#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1478;
float _4120;
float _4121;
float _4122;
float _4123;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4132 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4143 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4154 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4165 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4176 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4187 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _622;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _685 = _683.x;
    float _686 = _683.y;
    float _687 = _683.z;
    float _694 = ((_666.x - _685) * _461) + _685;
    float _695 = ((_666.y - _686) * _461) + _686;
    float _696 = ((_666.z - _687) * _461) + _687;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _719 = ((_708.x - _694) * _534) + _694;
    float _720 = ((_708.y - _695) * _534) + _695;
    float _721 = ((_708.z - _696) * _534) + _696;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _746 = ((_733.z - _721) * _603) + _721;
    float _749 = ((((_733.x - _719) * _603) + _719) * 2.0) + (-1.0);
    float _750 = ((((_733.y - _720) * _603) + _720) * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _4198 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _756 = sqrt(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _788 = (_749 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_643.x * 2.0) + (-1.0)))) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _789 = (_750 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_643.y * 2.0) + (-1.0)))) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_803 - _804) * cbMtdParam._m0[24u].y) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4209 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _629) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _831) + _629;
    float _840 = ((((cbMtdParam._m0[10u].y - _630) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _831) + _630;
    float _841 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _631)) * _831) + _631;
    float _846 = (((_643.z - _746) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _746;
    float _850 = ((_776.z - _846) * cbMtdParam._m0[19u].w) + _846;
    float _854 = ((cbMtdParam._m0[23u].y - _850) * _831) + _850;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _881 = (_875.x * 2.0) + (-1.0);
    float _882 = (_875.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _4220 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _899 = (_831 * (((cbMtdParam._m0[22u].z * _788) - _788) + _881)) + _788;
    float _900 = (_831 * (((cbMtdParam._m0[22u].z * _789) - _789) + _882)) + _789;
    float _901 = (_831 * (sqrt(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) - _756)) + _756;
    float _903 = cbMtdParam._m0[22u].x + _776.w;
    float _906 = fma(_901, _257 * NORMAL.x, fma(_900, _264 * TANGENT.x, (_250 * _242) * _899));
    float _909 = fma(_901, _257 * NORMAL.y, fma(_900, _264 * TANGENT.y, (_250 * _243) * _899));
    float _912 = fma(_901, _257 * NORMAL.z, fma(_900, _264 * TANGENT.z, (_250 * _244) * _899));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4231 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _920 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4253 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4264 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4275 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    vec4 _1003 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1005 = _1003.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1159 = sqrt(((_989 * _989) + (_990 * _990)) + (_991 * _991));
        float _1165 = (cbMatDynParam._m0[5u].x * _1159) + cbMatDynParam._m0[5u].y;
        float _4286 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1170 = (cbMatDynParam._m0[5u].z * _1159) + cbMatDynParam._m0[5u].w;
        float _4297 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) - _1166)) + _1166) < ((_1005 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1016 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1017 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1035 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1038 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1041 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1054 = _289 + 9u;
    uint _1055 = _1054 + uint(cbMatDynParam._m0[0u].w);
    float _1061 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * cbInstanceData._m0[_1055].x;
    float _1062 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * cbInstanceData._m0[_1055].y;
    float _1063 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * cbInstanceData._m0[_1055].z;
    float _4308 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1016, cbSceneParam._m0[86u].y * _1017));
    float _1079 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * TEXCOORD_5.w) * _1075.x;
    float _1080 = dot(vec3(_917, _918, _919), vec3(_996, _997, _998));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _917) - _996;
    float _1088 = (_1083 * _918) - _997;
    float _1089 = (_1083 * _919) - _998;
    float _1093 = abs(dot(vec3(_996, _997, _998), vec3(_917, _918, _919)));
    float _4341 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_920);
    float _1108 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1148, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140));
        float _1206 = fma(_1148, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140));
        float _1210 = fma(_1148, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140));
        float _1235 = _1140 + _917;
        float _1236 = _1144 + _918;
        float _1237 = _1148 + _919;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_917, _918, _919), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4389 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_917, _918, _919), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4422 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_917, _918, _919), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4455 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1148, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140));
        float _1522 = fma(_1148, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140));
        float _1526 = fma(_1148, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140));
        float _1549 = _1140 + _917;
        float _1550 = _1144 + _918;
        float _1551 = _1148 + _919;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_917, _918, _919), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4518 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_917, _918, _919), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4551 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_917, _918, _919), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4584 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = _1478;
        _1797 = _1478;
        _1798 = _1478;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1491)) + _1491;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1492)) + _1492;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1087 * 0.5;
    float _1856 = _1088 * 0.5;
    float _1857 = _1089 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1972 = fma(_1148, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140)) + cbModelParam._m0[13u].w;
        float _1976 = fma(_1148, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140)) + cbModelParam._m0[14u].w;
        float _1980 = fma(_1148, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140)) + cbModelParam._m0[15u].w;
        float _1983 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1986 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1989 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _2017;
        if (_1983 > 0.0)
        {
            _2017 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2017 = frontier_phi_17_15_ladder;
        }
        float _2188;
        if (_1986 > 0.0)
        {
            _2188 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2188 = frontier_phi_26_22_ladder;
        }
        float _2483;
        if (_1989 > 0.0)
        {
            _2483 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2483 = frontier_phi_38_33_ladder;
        }
        float _2485 = isnan(_2188) ? _2017 : (isnan(_2017) ? _2188 : min(_2017, _2188));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1983) + _1972;
        float _2491 = (_2486 * _1986) + _1976;
        float _2492 = (_2486 * _1989) + _1980;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_16_38_ladder = _2637.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2637.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2637.x * cbModelParam._m0[1u].y;
        }
        _2005 = frontier_phi_16_38_ladder_2;
        _2007 = frontier_phi_16_38_ladder_1;
        _2009 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1924);
        _2005 = _1993.x * cbModelParam._m0[1u].y;
        _2007 = _1993.y * cbModelParam._m0[1u].y;
        _2009 = _1993.z * cbModelParam._m0[1u].y;
    }
    float _2013 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2014 = isnan(_2013) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2013 : min(cbModelParam._m0[25u].w, _2013));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1148, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1148, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1148, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2083 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2086 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2193;
        if (_2080 > 0.0)
        {
            _2193 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2193 = frontier_phi_28_24_ladder;
        }
        float _2510;
        if (_2083 > 0.0)
        {
            _2510 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2510 = frontier_phi_40_35_ladder;
        }
        float _2837;
        if (_2086 > 0.0)
        {
            _2837 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2837 = frontier_phi_50_47_ladder;
        }
        float _2839 = isnan(_2510) ? _2193 : (isnan(_2193) ? _2510 : min(_2193, _2510));
        float _2840 = isnan(_2837) ? _2839 : (isnan(_2839) ? _2837 : min(_2839, _2837));
        float _2844 = (_2840 * _2080) + _2069;
        float _2845 = (_2840 * _2083) + _2073;
        float _2846 = (_2840 * _2086) + _2077;
        float _2847 = _2840 * 9.9999997473787516355514526367188e-05;
        float _2848 = (-1.0) - _2847;
        float _2850 = _2847 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2846 > _2850) || ((_2846 < _2848) || ((_2845 > _2850) || ((_2845 < _2848) || ((_2844 < _2848) || (_2844 > _2850))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2846, cbModelParam._m0[17u].z, fma(_2845, cbModelParam._m0[17u].y, _2844 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2846, cbModelParam._m0[18u].z, fma(_2845, cbModelParam._m0[18u].y, _2844 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2846, cbModelParam._m0[19u].z, fma(_2845, cbModelParam._m0[19u].y, _2844 * cbModelParam._m0[19u].x))), _2014);
            frontier_phi_25_50_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_25_50_ladder_2;
        _2107 = frontier_phi_25_50_ladder_1;
        _2109 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _2014);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2121 = ((((1.0 - _1108) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1108 * _1095)) * _1079;
    float _2122 = _2121 * ((cbModelParam._m0[1u].w * (_2105 - _2005)) + _2005);
    float _2123 = _2121 * ((cbModelParam._m0[1u].w * (_2107 - _2007)) + _2007);
    float _2124 = _2121 * ((cbModelParam._m0[1u].w * (_2109 - _2009)) + _2009);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2123, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2123, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2123, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2180 = _2167 / _2179;
    float _2181 = _2171 / _2179;
    float _2182 = _2175 / _2179;
    float _2329;
    float _2330;
    float _2331;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2209 = ((uint(_2182 > cbSceneParam._m0[59u].y) + uint(_2182 > cbSceneParam._m0[59u].x)) + uint(_2182 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2210 = _2209 + 43u;
        uint _2218 = _2209 + 44u;
        uint _2226 = _2209 + 45u;
        uint _2234 = _2209 + 46u;
        float _2245 = fma(_2179, cbSceneParam._m0[_2210].w, fma(_2175, cbSceneParam._m0[_2210].z, fma(_2171, cbSceneParam._m0[_2210].y, _2167 * cbSceneParam._m0[_2210].x)));
        float _2249 = fma(_2179, cbSceneParam._m0[_2218].w, fma(_2175, cbSceneParam._m0[_2218].z, fma(_2171, cbSceneParam._m0[_2218].y, _2167 * cbSceneParam._m0[_2218].x)));
        float _2257 = fma(_2179, cbSceneParam._m0[_2234].w, fma(_2175, cbSceneParam._m0[_2234].z, fma(_2171, cbSceneParam._m0[_2234].y, _2167 * cbSceneParam._m0[_2234].x)));
        float _2262 = cbSceneParam._m0[33u].z * _2257;
        float _2264 = cbSceneParam._m0[33u].w * _2257;
        float _2267 = fma(_2179, cbSceneParam._m0[_2226].w, fma(_2175, cbSceneParam._m0[_2226].z, fma(_2171, cbSceneParam._m0[_2226].y, _2167 * cbSceneParam._m0[_2226].x))) / _2257;
        float _2315 = (cbSceneParam._m0[33u].x - sqrt(((_2181 * _2181) + (_2180 * _2180)) + (_2182 * _2182))) * cbSceneParam._m0[33u].y;
        float _4710 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2322 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2262 + _2245) / _2257, (_2264 + _2249) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 + _2245) / _2257, (_2249 - _2262) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 - _2262) / _2257, (_2249 - _2264) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 - _2264) / _2257, (_2262 + _2249) / _2257), _2267), 0.0)).x), vec4(0.25)));
        _2329 = 1.0 - (_2322 * cbSceneParam._m0[34u].x);
        _2330 = 1.0 - (_2322 * cbSceneParam._m0[34u].y);
        _2331 = 1.0 - (_2322 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2329 = 1.0;
        _2330 = 1.0;
        _2331 = 1.0;
    }
    float _2395;
    float _2397;
    float _2399;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2383 = fma(_2179, cbSceneParam._m0[63u].w, fma(_2175, cbSceneParam._m0[63u].z, fma(_2171, cbSceneParam._m0[63u].y, _2167 * cbSceneParam._m0[63u].x)));
        float _2384 = fma(_2179, cbSceneParam._m0[60u].w, fma(_2175, cbSceneParam._m0[60u].z, fma(_2171, cbSceneParam._m0[60u].y, _2167 * cbSceneParam._m0[60u].x))) / _2383;
        float _2385 = fma(_2179, cbSceneParam._m0[61u].w, fma(_2175, cbSceneParam._m0[61u].z, fma(_2171, cbSceneParam._m0[61u].y, _2167 * cbSceneParam._m0[61u].x))) / _2383;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2384 >= cbSceneParam._m0[64u].x) && (_2385 >= cbSceneParam._m0[64u].y)) && (_2384 <= cbSceneParam._m0[64u].z)) && (_2385 <= cbSceneParam._m0[64u].w))
        {
            float _2523 = fma(_2179, cbSceneParam._m0[62u].w, fma(_2175, cbSceneParam._m0[62u].z, fma(_2171, cbSceneParam._m0[62u].y, _2167 * cbSceneParam._m0[62u].x))) / _2383;
            float _2527 = isnan(cbSceneParam._m0[41u].w) ? _2523 : (isnan(_2523) ? cbSceneParam._m0[41u].w : max(_2523, cbSceneParam._m0[41u].w));
            float _2570 = (cbSceneParam._m0[33u].x - sqrt(((_2181 * _2181) + (_2180 * _2180)) + (_2182 * _2182))) * cbSceneParam._m0[33u].y;
            float _4726 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
            float _2577 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2384, cbSceneParam._m0[33u].w + _2385), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2384, _2385 - cbSceneParam._m0[33u].z), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2384 - cbSceneParam._m0[33u].z, _2385 - cbSceneParam._m0[33u].w), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2384 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2385), _2527), 0.0)).x), vec4(0.25)));
            float _2581 = 1.0 - (_2577 * cbSceneParam._m0[34u].x);
            float _2582 = 1.0 - (_2577 * cbSceneParam._m0[34u].y);
            float _2583 = 1.0 - (_2577 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2583) ? _2331 : (isnan(_2331) ? _2583 : min(_2331, _2583));
            frontier_phi_37_36_ladder_1 = isnan(_2582) ? _2330 : (isnan(_2330) ? _2582 : min(_2330, _2582));
            frontier_phi_37_36_ladder_2 = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
        }
        else
        {
            frontier_phi_37_36_ladder = _2331;
            frontier_phi_37_36_ladder_1 = _2330;
            frontier_phi_37_36_ladder_2 = _2329;
        }
        _2395 = frontier_phi_37_36_ladder_2;
        _2397 = frontier_phi_37_36_ladder_1;
        _2399 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2395 = _2329;
        _2397 = _2330;
        _2399 = _2331;
    }
    uvec4 _2404 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2406 = _2404.x * 14u;
    uint _2407 = _2406 + 13u;
    float _2414 = _1079 + (-1.0);
    float _2419 = (cbLight._m0[_2407].x * _2414) + 1.0;
    float _2420 = (cbLight._m0[_2407].y * _2414) + 1.0;
    float _2421 = (cbLight._m0[_2407].z * _2414) + 1.0;
    float _2422 = (cbLight._m0[_2407].w * _2414) + 1.0;
    uint _2423 = _2406 + 5u;
    float _2429 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
    uint _2433 = _2406 + 4u;
    float _2442 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2446 = _2406 | 1u;
    float _2457 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_917, _918, _919));
    float _2460 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_917, _918, _919));
    float _4762 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _4773 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2465 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * 0.3183098733425140380859375;
    float _2467 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 0.3183098733425140380859375;
    float _2474 = ((cbLight._m0[_2423].x * _2429) * _2467) + (((cbLight._m0[_2433].x * _2395) * _2442) * _2465);
    float _2475 = ((_2429 * cbLight._m0[_2423].y) * _2467) + (((cbLight._m0[_2433].y * _2397) * _2442) * _2465);
    float _2476 = ((_2429 * cbLight._m0[_2423].z) * _2467) + (((cbLight._m0[_2433].z * _2399) * _2442) * _2465);
    uvec4 _2480 = floatBitsToUint(cbLight._m0[_2406 + 12u]);
    bool _2482 = _2480.x == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2482)
    {
        _2584 = _2474;
        _2586 = _2475;
        _2588 = _2476;
    }
    else
    {
        uint _2592 = _2406 + 6u;
        float _2608 = (dot(vec3(cbLight._m0[_2406 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2609 = _2608 * _2608;
        float _4784 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2610 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2611 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2584 = (((cbLight._m0[_2592].x * 0.3183098733425140380859375) * _2610) * _2611) + _2474;
        _2586 = (((cbLight._m0[_2592].y * 0.3183098733425140380859375) * _2610) * _2611) + _2475;
        _2588 = (((cbLight._m0[_2592].z * 0.3183098733425140380859375) * _2610) * _2611) + _2476;
    }
    bool _2591 = _2480.y == 0u;
    float _2646;
    float _2648;
    float _2650;
    if (_2591)
    {
        _2646 = _2584;
        _2648 = _2586;
        _2650 = _2588;
    }
    else
    {
        uint _2808 = _2406 + 7u;
        float _2824 = (dot(vec3(cbLight._m0[_2406 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2825 = _2824 * _2824;
        float _4800 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2826 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2827 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2646 = (((cbLight._m0[_2808].x * 0.3183098733425140380859375) * _2826) * _2827) + _2584;
        _2648 = (((cbLight._m0[_2808].y * 0.3183098733425140380859375) * _2826) * _2827) + _2586;
        _2650 = (((cbLight._m0[_2808].z * 0.3183098733425140380859375) * _2826) * _2827) + _2588;
    }
    uint _2653 = _2406 + 8u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _920) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2406].x + _996;
    float _2669 = cbLight._m0[_2406].y + _997;
    float _2670 = cbLight._m0[_2406].z + _998;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2406].xyz));
    float _4816 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _4827 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2682 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2683 = dot(vec3(_917, _918, _919), vec3(_2675, _2676, _2677));
    float _4838 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2687 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2675, _2676, _2677));
    float _4849 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2691 = _2667 * _2667;
    float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
    float _2706 = (exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2707 = 1.0 - _2667;
    float _2718 = (0.5 / (((_2682 * ((_2681 * _2707) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2707) + _2667) * _2681))) * _2681;
    float _4860 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2720 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
    uint _2734 = _2406 + 9u;
    float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _920) * 0.949999988079071044921875);
    float _2746 = _2745 * _2745;
    float _2747 = cbLight._m0[_2446].x + _996;
    float _2748 = cbLight._m0[_2446].y + _997;
    float _2749 = cbLight._m0[_2446].z + _998;
    float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
    float _2754 = _2753 * _2747;
    float _2755 = _2753 * _2748;
    float _2756 = _2753 * _2749;
    float _2757 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2446].xyz));
    float _4871 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2760 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2761 = dot(vec3(_917, _918, _919), vec3(_2754, _2755, _2756));
    float _4882 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2765 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2754, _2755, _2756));
    float _4893 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2769 = _2746 * _2746;
    float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
    float _2782 = (exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2783 = 1.0 - _2746;
    float _2793 = (0.5 / (((_2682 * ((_2760 * _2783) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2783) + _2746) * _2760))) * _2760;
    float _4904 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2795 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
    float _2805 = (((_2782 * cbLight._m0[_2734].x) * _2795) * _2429) + ((((cbLight._m0[_2653].x * _2395) * _2706) * _2720) * _2442);
    float _2806 = (((_2782 * cbLight._m0[_2734].y) * _2795) * _2429) + ((((cbLight._m0[_2653].y * _2397) * _2706) * _2720) * _2442);
    float _2807 = (((_2782 * cbLight._m0[_2734].z) * _2795) * _2429) + ((((cbLight._m0[_2653].z * _2399) * _2706) * _2720) * _2442);
    float _2863;
    float _2865;
    float _2867;
    if (_2482)
    {
        _2863 = _2805;
        _2865 = _2806;
        _2867 = _2807;
    }
    else
    {
        uint _2869 = _2406 + 2u;
        uint _2873 = _2406 + 10u;
        float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2869].w)) * _920) * 0.949999988079071044921875);
        float _2888 = _2887 * _2887;
        float _2889 = cbLight._m0[_2869].x + _996;
        float _2890 = cbLight._m0[_2869].y + _997;
        float _2891 = cbLight._m0[_2869].z + _998;
        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
        float _2896 = _2895 * _2889;
        float _2897 = _2895 * _2890;
        float _2898 = _2895 * _2891;
        float _2899 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2869].xyz));
        float _4915 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
        float _2903 = dot(vec3(_917, _918, _919), vec3(_2896, _2897, _2898));
        float _4926 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _2907 = dot(vec3(cbLight._m0[_2869].xyz), vec3(_2896, _2897, _2898));
        float _4937 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2911 = _2888 * _2888;
        float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
        float _2924 = (exp2(log2(1.0 - (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2925 = 1.0 - _2888;
        float _2935 = (0.5 / (((_2682 * ((_2902 * _2925) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2925) + _2888) * _2902))) * _2902;
        float _4948 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2937 = (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
        float _2938 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2863 = (((_2924 * cbLight._m0[_2873].x) * _2937) * _2938) + _2805;
        _2865 = (((_2924 * cbLight._m0[_2873].y) * _2937) * _2938) + _2806;
        _2867 = (((_2924 * cbLight._m0[_2873].z) * _2937) * _2938) + _2807;
    }
    float _2969;
    float _2971;
    float _2973;
    if (_2591)
    {
        _2969 = _2863;
        _2971 = _2865;
        _2973 = _2867;
    }
    else
    {
        uint _2980 = _2406 + 3u;
        uint _2984 = _2406 + 11u;
        float _2998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2980].w)) * _920) * 0.949999988079071044921875);
        float _2999 = _2998 * _2998;
        float _3000 = cbLight._m0[_2980].x + _996;
        float _3001 = cbLight._m0[_2980].y + _997;
        float _3002 = cbLight._m0[_2980].z + _998;
        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
        float _3007 = _3006 * _3000;
        float _3008 = _3006 * _3001;
        float _3009 = _3006 * _3002;
        float _3010 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2980].xyz));
        float _4964 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _3014 = dot(vec3(_917, _918, _919), vec3(_3007, _3008, _3009));
        float _4975 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _3018 = dot(vec3(cbLight._m0[_2980].xyz), vec3(_3007, _3008, _3009));
        float _4986 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3022 = _2999 * _2999;
        float _3026 = ((_3017 * _3017) * (_3022 + (-1.0))) + 1.0;
        float _3035 = (exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3036 = 1.0 - _2999;
        float _3046 = (0.5 / (((_2682 * ((_3013 * _3036) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _3036) + _2999) * _3013))) * _3013;
        float _4997 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3048 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_3022 / ((_3026 * _3026) * 3.141590118408203125));
        float _3049 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2969 = (((_3035 * cbLight._m0[_2984].x) * _3048) * _3049) + _2863;
        _2971 = (((_3035 * cbLight._m0[_2984].y) * _3048) * _3049) + _2865;
        _2973 = (((_3035 * cbLight._m0[_2984].z) * _3048) * _3049) + _2867;
    }
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_2404.y == 0u)
    {
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.x;
        uint _3082 = uint((float(_3070.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1017) / _3071))) + floor(float(uint(cbSceneParam._m0[85u].x * _1016) / _3071)));
        float _3092 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3093 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        uint _3096 = uint(isnan(14.0) ? _3093 : (isnan(_3093) ? 14.0 : min(_3093, 14.0)));
        uvec4 _3101 = texelFetch(g_lightClusterGridBuffer, int(((_3096 << 2u) + (_3082 << 6u)) >> 2u));
        uint _3102 = _3101.x;
        uint _3103 = _3070.z;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((((1u << ((_3103 >> 4u) & 15u)) + 4294967295u) & _3102) == 0u) || ((_3103 & 240u) == 0u))
        {
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
        }
        else
        {
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            uint _3341 = 0u;
            uint _3350;
            bool _3351;
            for (;;)
            {
                _3350 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                _3351 = _3350 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3351)
                {
                    frontier_phi_71_pred = _3340;
                    frontier_phi_71_pred_1 = _3339;
                    frontier_phi_71_pred_2 = _3338;
                    frontier_phi_71_pred_3 = _3337;
                    frontier_phi_71_pred_4 = _3336;
                    frontier_phi_71_pred_5 = _3335;
                }
                else
                {
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    uint _3486;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3350;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    for (;;)
                    {
                        uint _3490 = uint(findLSB(_3486)) + (_3341 << 5u);
                        uint _3487 = (_3486 + 4294967295u) & _3486;
                        uint _3492 = _3490 * 48u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 3u)).x));
                        uint _3512 = (_3490 * 48u) + 4u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 3u)).x));
                        uint _3531 = (_3490 * 48u) + 8u;
                        vec3 _3542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x));
                        float _3546 = _3506.x - _2180;
                        float _3547 = _3506.y - _2181;
                        float _3548 = _3506.z - _2182;
                        float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                        float _3552 = inversesqrt(_3549);
                        float _3553 = _3552 * _3546;
                        float _3554 = _3552 * _3547;
                        float _3555 = _3552 * _3548;
                        float _3556 = dot(vec3(_1035, _1038, _1041), vec3(_3553, _3554, _3555));
                        float _3561 = 1.0 - (_3549 * _3506.w);
                        float _5023 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                        float _3563 = sqrt(_3549) * _3525.w;
                        float _3566 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                        float _3567 = _3566 * _3566;
                        float _3570 = ((1.0 - _3567) * _3556) + _3567;
                        float _3573 = _3563 * _3563;
                        float _3577 = ((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3562) / ((_3573 * 0.699999988079071044921875) + 1.0);
                        float _3581 = (-0.0) - _2180;
                        float _3582 = (-0.0) - _2181;
                        float _3583 = (-0.0) - _2182;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3588 = _3587 * _3581;
                        float _3589 = _3587 * _3582;
                        float _3590 = _3587 * _3583;
                        float _3597 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                        float _3598 = 1.0 - _1095;
                        float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                        float _3606 = _3605 * _3605;
                        float _3607 = _3606 * _3606;
                        float _3608 = _3588 + _3553;
                        float _3609 = _3589 + _3554;
                        float _3610 = _3590 + _3555;
                        float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                        float _3618 = dot(vec3(_1035, _1038, _1041), vec3(_3588, _3589, _3590));
                        float _5039 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3621 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3622 = dot(vec3(_1035, _1038, _1041), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                        float _5050 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3625 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                        float _3630 = _3566 * _3606;
                        float _3631 = _3630 * _3630;
                        float _3634 = ((1.0 - _3631) * _3556) + _3631;
                        float _5061 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3636 = 1.0 - _3606;
                        float _3646 = (0.5 / (((_3635 * ((_3621 * _3636) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3606) * _3621))) * _3635;
                        float _5072 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3657 = (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) / ((_3629 * _3629) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125))) * _3562;
                        _3410 = (_3577 * _3525.x) + _3483;
                        _3411 = (_3577 * _3525.y) + _3484;
                        _3412 = (_3577 * _3525.z) + _3485;
                        _3407 = (_3657 * _3542.x) + _3480;
                        _3408 = (_3657 * _3542.y) + _3481;
                        _3409 = (_3657 * _3542.z) + _3482;
                        if (_3487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3487;
                        }
                    }
                    frontier_phi_71_pred = _3412;
                    frontier_phi_71_pred_1 = _3411;
                    frontier_phi_71_pred_2 = _3410;
                    frontier_phi_71_pred_3 = _3409;
                    frontier_phi_71_pred_4 = _3408;
                    frontier_phi_71_pred_5 = _3407;
                }
                _3193 = frontier_phi_71_pred;
                _3191 = frontier_phi_71_pred_1;
                _3189 = frontier_phi_71_pred_2;
                _3187 = frontier_phi_71_pred_3;
                _3185 = frontier_phi_71_pred_4;
                _3183 = frontier_phi_71_pred_5;
                uint _3342 = _3341 + 1u;
                if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3335 = _3183;
                    _3336 = _3185;
                    _3337 = _3187;
                    _3338 = _3189;
                    _3339 = _3191;
                    _3340 = _3193;
                    _3341 = _3342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
        }
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.z;
        uint _3199 = (_3197 >> 8u) & 15u;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        if (((4294967295u << _3199) & _3102) == 0u)
        {
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
            _3311 = _3190;
            _3313 = _3192;
        }
        else
        {
            float _3328 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _3329 = _3328 * _2180;
            float _3330 = _3328 * _2181;
            float _3331 = _3328 * _2182;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3199 < ((_3197 >> 12u) & 15u))
            {
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3463 = _3182;
                float _3464 = _3184;
                float _3465 = _3186;
                float _3466 = _3188;
                float _3467 = _3190;
                float _3468 = _3192;
                uint _3469 = _3199;
                uint _3478;
                bool _3479;
                for (;;)
                {
                    _3478 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3469 << 2u)) >> 2u)).x;
                    _3479 = _3478 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3479)
                    {
                        frontier_phi_82_pred = _3468;
                        frontier_phi_82_pred_1 = _3467;
                        frontier_phi_82_pred_2 = _3466;
                        frontier_phi_82_pred_3 = _3465;
                        frontier_phi_82_pred_4 = _3464;
                        frontier_phi_82_pred_5 = _3463;
                    }
                    else
                    {
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3684 = _3463;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        uint _3690 = _3478;
                        uint _3691;
                        vec4 _3716;
                        float _3717;
                        vec4 _3732;
                        vec3 _3744;
                        vec4 _3759;
                        vec4 _3774;
                        float _3820;
                        bool _3821;
                        for (;;)
                        {
                            uint _3701 = ((_3469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3690));
                            _3691 = (_3690 + 4294967295u) & _3690;
                            uint _3703 = _3701 * 40u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3717 = _3716.w;
                            uint _3719 = (_3701 * 40u) + 4u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3701 * 40u) + 8u;
                            _3744 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x));
                            uint _3746 = (_3701 * 40u) + 16u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3701 * 40u) + 20u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3701 * 40u) + 24u;
                            vec4 _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3795 = (_3701 * 40u) + 28u;
                            vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            _3820 = fma(_2182, _3808.z, fma(_2181, _3808.y, _3808.x * _2180)) + _3808.w;
                            _3821 = !((fma(_2182, _3789.z, fma(_2181, _3789.y, _3789.x * _2180)) + _3789.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3821)
                            {
                                float _3848 = _3716.x - _2180;
                                float _3849 = _3716.y - _2181;
                                float _3850 = _3716.z - _2182;
                                float _3851 = dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850));
                                float _3854 = inversesqrt(_3851);
                                float _3855 = _3854 * _3848;
                                float _3856 = _3854 * _3849;
                                float _3857 = _3854 * _3850;
                                float _3861 = 1.0 - (_3851 / (_3717 * _3717));
                                float _5083 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3866 = sqrt(_3851) * _3732.w;
                                float _3868 = 1.39999997615814208984375 / (_3866 + 1.39999997615814208984375);
                                float _3869 = _3868 * _3868;
                                float _3872 = ((1.0 - _3869) * dot(vec3(_3855, _3856, _3857), vec3(_1035, _1038, _1041))) + _3869;
                                float _3875 = _3866 * _3866;
                                float _3879 = (fma(_2182, _3759.z, fma(_2181, _3759.y, _3759.x * _2180)) + _3759.w) / _3820;
                                float _3880 = (fma(_2182, _3774.z, fma(_2181, _3774.y, _3774.x * _2180)) + _3774.w) / _3820;
                                float _3884 = 1.0 - dot(vec2(_3879, _3880), vec2(_3879, _3880));
                                float _5099 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3885 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3886 = _3885 * (((isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0))) * _3862) / ((_3875 * 0.699999988079071044921875) + 1.0));
                                float _3898 = exp2(log2(1.0 / ((_3875 * 3.5) + 5.0)) * 0.25);
                                float _3899 = 1.0 - _1095;
                                float _3906 = sqrt(1.0 - ((1.0 - (_3899 * _3899)) * (1.0 - (_3898 * _3898))));
                                float _3907 = _3906 * _3906;
                                float _3908 = _3907 * _3907;
                                float _3909 = _3855 - _3329;
                                float _3910 = _3856 - _3330;
                                float _3911 = _3857 - _3331;
                                float _3915 = inversesqrt(dot(vec3(_3909, _3910, _3911), vec3(_3909, _3910, _3911)));
                                float _3919 = dot(vec3(_1035, _1038, _1041), vec3((-0.0) - _3329, (-0.0) - _3330, (-0.0) - _3331));
                                float _5110 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3922 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3923 = dot(vec3(_1035, _1038, _1041), vec3(_3915 * _3909, _3915 * _3910, _3915 * _3911));
                                float _5121 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3926 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3930 = ((_3926 * _3926) * (_3908 + (-1.0))) + 1.0;
                                float _3931 = _3868 * _3907;
                                float _3932 = _3931 * _3931;
                                float _3938 = ((1.0 - _3932) * dot(vec3(_1035, _1038, _1041), vec3(_3855, _3856, _3857))) + _3932;
                                float _5132 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3940 = 1.0 - _3907;
                                float _3950 = (0.5 / (((_3939 * ((_3922 * _3940) + _3907)) + 9.9999999392252902907785028219223e-09) + (((_3939 * _3940) + _3907) * _3922))) * _3939;
                                float _5143 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3960 = (_3885 * _3862) * (((_3908 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3930 * _3930) * ((_3875 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3886 * _3732.z;
                                frontier_phi_88_pred_1 = _3886 * _3732.y;
                                frontier_phi_88_pred_2 = _3886 * _3732.x;
                                frontier_phi_88_pred_3 = _3960 * _3744.z;
                                frontier_phi_88_pred_4 = _3960 * _3744.y;
                                frontier_phi_88_pred_5 = _3960 * _3744.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3969 = frontier_phi_88_pred;
                            _3968 = frontier_phi_88_pred_1;
                            _3967 = frontier_phi_88_pred_2;
                            _3966 = frontier_phi_88_pred_3;
                            _3965 = frontier_phi_88_pred_4;
                            _3964 = frontier_phi_88_pred_5;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            if (_3691 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3691;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3676;
                        frontier_phi_82_pred_1 = _3675;
                        frontier_phi_82_pred_2 = _3674;
                        frontier_phi_82_pred_3 = _3673;
                        frontier_phi_82_pred_4 = _3672;
                        frontier_phi_82_pred_5 = _3671;
                    }
                    _3314 = frontier_phi_82_pred;
                    _3312 = frontier_phi_82_pred_1;
                    _3310 = frontier_phi_82_pred_2;
                    _3308 = frontier_phi_82_pred_3;
                    _3306 = frontier_phi_82_pred_4;
                    _3304 = frontier_phi_82_pred_5;
                    uint _3470 = _3469 + 1u;
                    if (_3470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3463 = _3304;
                        _3464 = _3306;
                        _3465 = _3308;
                        _3466 = _3310;
                        _3467 = _3312;
                        _3468 = _3314;
                        _3469 = _3470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3310;
                frontier_phi_63_64_ladder_1 = _3314;
                frontier_phi_63_64_ladder_2 = _3312;
                frontier_phi_63_64_ladder_3 = _3308;
                frontier_phi_63_64_ladder_4 = _3306;
                frontier_phi_63_64_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_63_64_ladder = _3188;
                frontier_phi_63_64_ladder_1 = _3192;
                frontier_phi_63_64_ladder_2 = _3190;
                frontier_phi_63_64_ladder_3 = _3186;
                frontier_phi_63_64_ladder_4 = _3184;
                frontier_phi_63_64_ladder_5 = _3182;
            }
            _3303 = frontier_phi_63_64_ladder_5;
            _3305 = frontier_phi_63_64_ladder_4;
            _3307 = frontier_phi_63_64_ladder_3;
            _3309 = frontier_phi_63_64_ladder;
            _3311 = frontier_phi_63_64_ladder_2;
            _3313 = frontier_phi_63_64_ladder_1;
        }
        float _3318 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _3115 = (_3318 * _3309) + _2646;
        _3117 = (_3318 * _3311) + _2648;
        _3119 = (_3318 * _3313) + _2650;
        _3121 = ((_3303 * 0.039999999105930328369140625) * _3318) + _2969;
        _3123 = ((_3305 * 0.039999999105930328369140625) * _3318) + _2971;
        _3125 = ((_3307 * 0.039999999105930328369140625) * _3318) + _2973;
    }
    else
    {
        _3115 = _2646;
        _3117 = _2648;
        _3119 = _2650;
        _3121 = _2969;
        _3123 = _2971;
        _3125 = _2973;
    }
    float _5159 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _5170 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _5181 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _3142 = ((isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3115 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1079))) + ((_3121 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3143 = ((isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0))) * (_3117 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1079))) + ((_3123 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3144 = ((isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0))) * (_3119 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1079))) + ((_3125 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    uint _3145 = _289 + 6u;
    float _3153 = _1016 / cbSceneParam._m0[86u].x;
    float _3154 = _1017 / cbSceneParam._m0[86u].y;
    vec4 _3168 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3170 = _3168.x;
    float _3171 = _3168.y;
    float _3172 = _3168.z;
    float _3173 = _3168.w;
    float _3245;
    float _3247;
    float _3249;
    float _3251;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _3208 = _3207 / _938;
        float _3219 = _3208 * _989;
        float _3220 = _990 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3223 = _3208 * _991;
        float _3225 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3226 = _3225 + cbSceneParam._m0[79u].w;
        float _3227 = cbSceneParam._m0[79u].w - _3220;
        float _3233 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3223 * _3223));
        float _3236 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3233;
        float _3241 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3243 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3420;
        if (abs((_3221 - _3225) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3420 = ((((_3226 > 0.0) ? exp2(_3241 * _3226) : (2.0 - exp2(_3243 * _3226))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3236;
        }
        else
        {
            float _3364 = 1.0 / cbSceneParam._m0[80u].x;
            float _3365 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : max(_3226, _3227));
            float _3366 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : min(_3226, _3227));
            float _3375 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : min(_3365, 0.0));
            float _3376 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : min(_3366, 0.0));
            _3420 = ((abs(_3233 / _3221) * cbSceneParam._m0[80u].y) * ((((_3375 - _3376) * 2.0) - ((exp2(_3241 * (isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0)))) - exp2(_3241 * (isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))))) * _3364)) - ((exp2(_3243 * _3375) - exp2(_3243 * _3376)) * _3364))) + (_3236 * cbSceneParam._m0[80u].z);
        }
        vec4 _3422 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, 1.0), 0.0);
        float _3431 = exp2((_3420 * (-1.44269502162933349609375)) * (1.0 - _3422.w));
        float _3432 = log2(_3431);
        float _3448 = log2(_3173);
        _3245 = (exp2(_3448 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].x)) * _3422.x) / cbSceneParam._m0[78u].x)) + _3170;
        _3247 = (exp2(_3448 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].y)) * _3422.y) / cbSceneParam._m0[78u].y)) + _3171;
        _3249 = (exp2(_3448 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].z)) * _3422.z) / cbSceneParam._m0[78u].z)) + _3172;
        _3251 = _3431 * _3173;
    }
    else
    {
        _3245 = _3170;
        _3247 = _3171;
        _3249 = _3172;
        _3251 = _3173;
    }
    bool _3458;
    vec4 _3261;
    vec4 _3283;
    float _3285;
    float _3289;
    float _3290;
    float _3291;
    float _3292;
    bool _3302;
    for (;;)
    {
        _3261 = cbMatDynParam._m0[0u];
        float _3263 = roundEven(_3261.y);
        bool _3264 = _3263 == 3.0;
        float _3265 = log2(_3251);
        float _3272 = exp2(_3265 * cbSceneParam._m0[78u].x) * _3142;
        float _3273 = exp2(_3265 * cbSceneParam._m0[78u].y) * _3143;
        float _3274 = exp2(_3265 * cbSceneParam._m0[78u].z) * _3144;
        float _3281 = _1005 + (-0.5);
        _3283 = cbMtdParam._m0[1u];
        _3285 = _3283.y * _3281;
        float _3288 = (_3263 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3289 = _3288 * (_3264 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3245)));
        _3290 = _3288 * (_3264 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3247)));
        _3291 = _3288 * (_3264 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3249)));
        _3292 = _3281 * 0.999000012874603271484375;
        _3302 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3302)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3292) < 0.5)
            {
                _3458 = true;
                break;
            }
        }
        uint _3399 = _1054 + uint(_3261.w);
        if ((cbInstanceData._m0[_3399].w < 1.0) && ((cbInstanceData._m0[_3399].w + _3292) < 0.5))
        {
            _3458 = true;
            break;
        }
        if ((_3285 + 1.0) < _3283.x)
        {
            _3458 = true;
            break;
        }
        _3458 = false;
        break;
    }
    float _3662;
    if (_3458)
    {
        discard_state = true;
        _3662 = 0.0;
    }
    else
    {
        _3662 = cbInstanceData._m0[_3145].w;
    }
    SV_Target.x = _3289;
    SV_Target.y = _3290;
    SV_Target.z = _3291;
    SV_Target.w = _3662;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3145].w;
    discard_exit();
}


