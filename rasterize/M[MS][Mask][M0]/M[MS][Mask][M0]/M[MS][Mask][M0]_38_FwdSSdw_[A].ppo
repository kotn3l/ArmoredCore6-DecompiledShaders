#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1393;
float _3775;
float _3776;
float _3777;
float _3778;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3787 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3798 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3809 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3820 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _456 = (_449 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _457 = (_449 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _458 = (_449 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _462 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _456;
    float _465 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _457;
    float _468 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _458;
    float _475 = ((_456 - _462) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _462;
    float _476 = ((_457 - _465) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _465;
    float _477 = ((_458 - _468) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _468;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    float _571 = ((_541.z - _562) * _449) + _562;
    float _574 = ((((_541.x - _560) * _449) + _560) * 2.0) + (-1.0);
    float _575 = ((((_541.y - _561) * _449) + _561) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3831 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _631 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _634 = ((isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : min(_631, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _643 = (_634 - ((((((_624 - _625) * cbMtdParam._m0[24u].w) + _625) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _634))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3852 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _651 = (_644 * ((_496.x * cbMtdParam._m0[18u].x) - _475)) + _475;
    float _652 = (_644 * ((_496.y * cbMtdParam._m0[18u].y) - _476)) + _476;
    float _653 = (_644 * ((_496.z * cbMtdParam._m0[18u].z) - _477)) + _477;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _693 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_667 - _668) * cbMtdParam._m0[24u].y) + _668) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3863 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _702 = ((((cbMtdParam._m0[10u].x - _651) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _694) + _651;
    float _703 = ((((cbMtdParam._m0[10u].y - _652) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _694) + _652;
    float _704 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _653)) * _694) + _653;
    float _709 = (((_516.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _713 = ((_597.z - _709) * cbMtdParam._m0[19u].w) + _709;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _734 = (_727.x * 2.0) + (-1.0);
    float _735 = (_727.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3874 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _744 = (_644 * (_727.z - _713)) + _713;
    float _747 = ((cbMtdParam._m0[23u].y - _744) * _694) + _744;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3885 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _788 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_516.x * 2.0) + (-1.0)))) + (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _789 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_516.y * 2.0) + (-1.0)))) + (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _801 = (((_734 - _788) + (cbMtdParam._m0[21u].x * _788)) * _644) + _788;
    float _802 = (((_735 - _789) + (cbMtdParam._m0[21u].x * _789)) * _644) + _789;
    float _803 = (_644 * (sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _581)) + _581;
    float _814 = (((_772 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _694) + _801;
    float _815 = (((_773 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _694) + _802;
    float _816 = ((sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _803) * _694) + _803;
    float _818 = cbMtdParam._m0[22u].x + _597.w;
    float _821 = fma(_816, _251 * NORMAL.x, fma(_815, _258 * TANGENT.x, (_244 * _236) * _814));
    float _824 = fma(_816, _251 * NORMAL.y, fma(_815, _258 * TANGENT.y, (_244 * _237) * _814));
    float _827 = fma(_816, _251 * NORMAL.z, fma(_815, _258 * TANGENT.z, (_244 * _238) * _814));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _3896 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _835 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _3918 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3929 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3940 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    vec4 _918 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _920 = _918.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1074 = sqrt(((_904 * _904) + (_905 * _905)) + (_906 * _906));
        float _1080 = (cbMatDynParam._m0[5u].x * _1074) + cbMatDynParam._m0[5u].y;
        float _3951 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1085 = (cbMatDynParam._m0[5u].z * _1074) + cbMatDynParam._m0[5u].w;
        float _3962 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) - _1081)) + _1081) < ((_920 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _950 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _953 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _956 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _969 = _283 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3973 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    vec4 _990 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _994 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _990.x;
    float _995 = dot(vec3(_832, _833, _834), vec3(_911, _912, _913));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _832) - _911;
    float _1003 = (_998 * _833) - _912;
    float _1004 = (_998 * _834) - _913;
    float _1008 = abs(dot(vec3(_911, _912, _913), vec3(_832, _833, _834)));
    float _4006 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_835);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1121 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1125 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1150 = _1055 + _832;
        float _1151 = _1059 + _833;
        float _1152 = _1063 + _834;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_832, _833, _834), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4054 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_832, _833, _834), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4087 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_832, _833, _834), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4120 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1435 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1439 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1443 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1466 = _1055 + _832;
        float _1467 = _1059 + _833;
        float _1468 = _1063 + _834;
        float _1478 = fma(_1468, cbModelParam._m0[30u].z, fma(_1467, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1466)) - _1435;
        float _1479 = fma(_1468, cbModelParam._m0[31u].z, fma(_1467, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1466)) - _1439;
        float _1480 = fma(_1468, cbModelParam._m0[32u].z, fma(_1467, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1466)) - _1443;
        float _1484 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
        float _1497 = ((_1484 * _1478) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1435 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1484 * _1479) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1439 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1484 * _1480) / cbModelParam._m0[35u].z) + ((((((_1443 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        float _1534 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1501.x + (-0.5));
        float _1536 = _1534 * (_1501.y + (-0.5));
        float _1537 = _1534 * (_1501.z + (-0.5));
        float _1544 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1508.x + (-0.5));
        float _1546 = _1544 * (_1508.y + (-0.5));
        float _1547 = _1544 * (_1508.z + (-0.5));
        float _1554 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1515.x + (-0.5));
        float _1556 = _1554 * (_1515.y + (-0.5));
        float _1557 = _1554 * (_1515.z + (-0.5));
        float _1564 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1522.x + (-0.5));
        float _1566 = _1564 * (_1522.y + (-0.5));
        float _1567 = _1564 * (_1522.z + (-0.5));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = _1535 * 0.5;
        float _1572 = _1545 * 0.5;
        float _1573 = _1555 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_832, _833, _834), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4183 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1598 + 1.0))) + _1603) * _1568;
        float _1613 = _1536 * 0.5;
        float _1614 = _1546 * 0.5;
        float _1615 = _1556 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_832, _833, _834), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4216 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1640 + 1.0))) + _1645) * _1569;
        float _1655 = _1537 * 0.5;
        float _1656 = _1547 * 0.5;
        float _1657 = _1557 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_832, _833, _834), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4249 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1682 + 1.0))) + _1687) * _1570;
        _1704 = _1537;
        _1705 = _1536;
        _1706 = _1535;
        _1707 = _1547;
        _1708 = _1546;
        _1709 = _1545;
        _1710 = _1557;
        _1711 = _1556;
        _1712 = _1555;
        _1713 = _1570;
        _1714 = _1569;
        _1715 = _1568;
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
    }
    else
    {
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = _1393;
        _1713 = _1393;
        _1714 = _1393;
        _1715 = _1393;
        _1716 = 0.0;
        _1717 = 0.0;
        _1718 = 0.0;
    }
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1405)) + _1405;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1406)) + _1406;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1407)) + _1407;
    float _1751 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1728));
    float _1772 = _1002 * 0.5;
    float _1773 = _1003 * 0.5;
    float _1774 = _1004 * 0.5;
    float _1775 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1778 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1781 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1815;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1788 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1792 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1796 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1803 = dot(vec4(cbModelParam._m0[39u]), vec4(_1772, _1773, _1774, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1826;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1817 = dot(vec4(cbModelParam._m0[40u]), vec4(_1772, _1773, _1774, 1.0));
        _1826 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1826 = 1.0;
    }
    float _1830 = (_1826 * cbModelParam._m0[1u].x) + (_1815 * (1.0 - cbModelParam._m0[1u].x));
    float _1840 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1841 = isnan(_1840) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1840 : min(cbModelParam._m0[25u].z, _1840));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1888 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1892 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1896 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1899 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1902 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1905 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1933;
        if (_1899 > 0.0)
        {
            _1933 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1933 = frontier_phi_17_15_ladder;
        }
        float _2154;
        if (_1902 > 0.0)
        {
            _2154 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2154 = frontier_phi_26_22_ladder;
        }
        float _2400;
        if (_1905 > 0.0)
        {
            _2400 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2400 = frontier_phi_38_33_ladder;
        }
        float _2402 = isnan(_2154) ? _1933 : (isnan(_1933) ? _2154 : min(_1933, _2154));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1899) + _1888;
        float _2408 = (_2403 * _1902) + _1892;
        float _2409 = (_2403 * _1905) + _1896;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1841);
            frontier_phi_16_38_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1921 = frontier_phi_16_38_ladder_2;
        _1923 = frontier_phi_16_38_ladder_1;
        _1925 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1841);
        _1921 = _1909.x * cbModelParam._m0[1u].y;
        _1923 = _1909.y * cbModelParam._m0[1u].y;
        _1925 = _1909.z * cbModelParam._m0[1u].y;
    }
    float _1929 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1929 : min(cbModelParam._m0[25u].w, _1929));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1983 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1987 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1991 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1994 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _1997 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _2000 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2159;
        if (_1994 > 0.0)
        {
            _2159 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2159 = frontier_phi_28_24_ladder;
        }
        float _2427;
        if (_1997 > 0.0)
        {
            _2427 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2427 = frontier_phi_40_35_ladder;
        }
        float _2632;
        if (_2000 > 0.0)
        {
            _2632 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2632 = frontier_phi_49_46_ladder;
        }
        float _2634 = isnan(_2427) ? _2159 : (isnan(_2159) ? _2427 : min(_2159, _2427));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1994) + _1983;
        float _2640 = (_2635 * _1997) + _1987;
        float _2641 = (_2635 * _2000) + _1991;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1930);
            frontier_phi_25_49_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _2019 = frontier_phi_25_49_ladder_2;
        _2021 = frontier_phi_25_49_ladder_1;
        _2023 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1930);
        _2019 = _2003.x * cbModelParam._m0[1u].z;
        _2021 = _2003.y * cbModelParam._m0[1u].z;
        _2023 = _2003.z * cbModelParam._m0[1u].z;
    }
    float _2035 = ((((1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1023 * _1010)) * _994;
    float _2036 = _2035 * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2037 = _2035 * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2038 = _2035 * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2036 * cbSceneParam._m0[91u].x));
    vec4 _2055 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_931, _932));
    float _2057 = _2055.w;
    float _2069 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2057);
    float _2070 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2057);
    float _2071 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2057);
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _994 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2113 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2117 = _2077 | 1u;
    float _2128 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_832, _833, _834));
    float _2131 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_832, _833, _834));
    float _4385 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _4396 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2136 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2138 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2145 = ((cbLight._m0[_2094].x * _2100) * _2138) + (((cbLight._m0[_2104].x * _2069) * _2113) * _2136);
    float _2146 = ((_2100 * cbLight._m0[_2094].y) * _2138) + (((cbLight._m0[_2104].y * _2070) * _2113) * _2136);
    float _2147 = ((_2100 * cbLight._m0[_2094].z) * _2138) + (((cbLight._m0[_2104].z * _2071) * _2113) * _2136);
    uvec4 _2151 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2153 = _2151.x == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2153)
    {
        _2164 = _2145;
        _2166 = _2146;
        _2168 = _2147;
    }
    else
    {
        uint _2172 = _2077 + 6u;
        float _2188 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4407 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2191 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2164 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _2145;
        _2166 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _2146;
        _2168 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _2147;
    }
    bool _2171 = _2151.y == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2171)
    {
        _2209 = _2164;
        _2211 = _2166;
        _2213 = _2168;
    }
    else
    {
        uint _2371 = _2077 + 7u;
        float _2387 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4423 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2390 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2209 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2164;
        _2211 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2166;
        _2213 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2168;
    }
    uint _2216 = _2077 + 8u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _835) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2077].x + _911;
    float _2232 = cbLight._m0[_2077].y + _912;
    float _2233 = cbLight._m0[_2077].z + _913;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2077].xyz));
    float _4439 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2245 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2246 = dot(vec3(_832, _833, _834), vec3(_2238, _2239, _2240));
    float _4461 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2238, _2239, _2240));
    float _4472 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2230 * _2230;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2230;
    float _2281 = (0.5 / (((_2245 * ((_2244 * _2270) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2270) + _2230) * _2244))) * _2244;
    float _4483 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    uint _2297 = _2077 + 9u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _835) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2117].x + _911;
    float _2311 = cbLight._m0[_2117].y + _912;
    float _2312 = cbLight._m0[_2117].z + _913;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2117].xyz));
    float _4494 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2324 = dot(vec3(_832, _833, _834), vec3(_2317, _2318, _2319));
    float _4505 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2328 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2317, _2318, _2319));
    float _4516 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2332 = _2309 * _2309;
    float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
    float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2346 = 1.0 - _2309;
    float _2356 = (0.5 / (((_2245 * ((_2323 * _2346) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2346) + _2309) * _2323))) * _2323;
    float _4527 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
    float _2368 = (((_2345 * cbLight._m0[_2297].x) * _2358) * _2100) + ((((cbLight._m0[_2216].x * _2069) * _2269) * _2283) * _2113);
    float _2369 = (((_2345 * cbLight._m0[_2297].y) * _2358) * _2100) + ((((cbLight._m0[_2216].y * _2070) * _2269) * _2283) * _2113);
    float _2370 = (((_2345 * cbLight._m0[_2297].z) * _2358) * _2100) + ((((cbLight._m0[_2216].z * _2071) * _2269) * _2283) * _2113);
    float _2432;
    float _2434;
    float _2436;
    if (_2153)
    {
        _2432 = _2368;
        _2434 = _2369;
        _2436 = _2370;
    }
    else
    {
        uint _2438 = _2077 + 2u;
        uint _2442 = _2077 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _835) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _911;
        float _2459 = cbLight._m0[_2438].y + _912;
        float _2460 = cbLight._m0[_2438].z + _913;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2438].xyz));
        float _4538 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2472 = dot(vec3(_832, _833, _834), vec3(_2465, _2466, _2467));
        float _4549 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4560 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2245 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2494) + _2457) * _2471))) * _2471;
        float _4571 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2432 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2368;
        _2434 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2369;
        _2436 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2370;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2171)
    {
        _2542 = _2432;
        _2544 = _2434;
        _2546 = _2436;
    }
    else
    {
        uint _2553 = _2077 + 3u;
        uint _2557 = _2077 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _835) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _911;
        float _2574 = cbLight._m0[_2553].y + _912;
        float _2575 = cbLight._m0[_2553].z + _913;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2553].xyz));
        float _4587 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2587 = dot(vec3(_832, _833, _834), vec3(_2580, _2581, _2582));
        float _4598 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4609 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2245 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2245 * _2609) + _2572) * _2586))) * _2586;
        float _4620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2542 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2432;
        _2544 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2434;
        _2546 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2436;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2075.y == 0u)
    {
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2697;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2697;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2697;
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.x;
        uint _2724 = uint((float(_2712.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2713))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2713)));
        float _2734 = (log2(_2700 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2735 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        uint _2738 = uint(isnan(14.0) ? _2735 : (isnan(_2735) ? 14.0 : min(_2735, 14.0)));
        uvec4 _2743 = texelFetch(g_lightClusterGridBuffer, int(((_2738 << 2u) + (_2724 << 6u)) >> 2u));
        uint _2744 = _2743.x;
        uint _2745 = _2712.z;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((((1u << ((_2745 >> 4u) & 15u)) + 4294967295u) & _2744) == 0u) || ((_2745 & 240u) == 0u))
        {
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
        }
        else
        {
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3014)
                {
                    frontier_phi_66_pred = _2998;
                    frontier_phi_66_pred_1 = _3003;
                    frontier_phi_66_pred_2 = _3002;
                    frontier_phi_66_pred_3 = _3001;
                    frontier_phi_66_pred_4 = _3000;
                    frontier_phi_66_pred_5 = _2999;
                }
                else
                {
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    uint _3149;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3013;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    for (;;)
                    {
                        uint _3153 = uint(findLSB(_3149)) + (_3004 << 5u);
                        uint _3150 = (_3149 + 4294967295u) & _3149;
                        uint _3155 = _3153 * 48u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3175 = (_3153 * 48u) + 4u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3194 = (_3153 * 48u) + 8u;
                        vec3 _3205 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x));
                        float _3209 = _3169.x - _2698;
                        float _3210 = _3169.y - _2699;
                        float _3211 = _3169.z - _2700;
                        float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                        float _3215 = inversesqrt(_3212);
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3219 = dot(vec3(_950, _953, _956), vec3(_3216, _3217, _3218));
                        float _3224 = 1.0 - (_3212 * _3169.w);
                        float _4646 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3226 = sqrt(_3212) * _3188.w;
                        float _3229 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3219) + _3230;
                        float _3236 = _3226 * _3226;
                        float _3240 = ((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3225) / ((_3236 * 0.699999988079071044921875) + 1.0);
                        float _3244 = (-0.0) - _2698;
                        float _3245 = (-0.0) - _2699;
                        float _3246 = (-0.0) - _2700;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3261 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _1010;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_950, _953, _956), vec3(_3251, _3252, _3253));
                        float _4662 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3286 = dot(vec3(_950, _953, _956), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4673 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3229 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3219) + _3295;
                        float _4684 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4695 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3293 * _3293) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125))) * _3225;
                        _3073 = (_3240 * _3188.x) + _3146;
                        _3074 = (_3240 * _3188.y) + _3147;
                        _3075 = (_3240 * _3188.z) + _3148;
                        _3070 = (_3321 * _3205.x) + _3143;
                        _3071 = (_3321 * _3205.y) + _3144;
                        _3072 = (_3321 * _3205.z) + _3145;
                        if (_3150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3150;
                        }
                    }
                    frontier_phi_66_pred = _3070;
                    frontier_phi_66_pred_1 = _3075;
                    frontier_phi_66_pred_2 = _3074;
                    frontier_phi_66_pred_3 = _3073;
                    frontier_phi_66_pred_4 = _3072;
                    frontier_phi_66_pred_5 = _3071;
                }
                _2846 = frontier_phi_66_pred;
                _2856 = frontier_phi_66_pred_1;
                _2854 = frontier_phi_66_pred_2;
                _2852 = frontier_phi_66_pred_3;
                _2850 = frontier_phi_66_pred_4;
                _2848 = frontier_phi_66_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2846;
                    _2999 = _2848;
                    _3000 = _2850;
                    _3001 = _2852;
                    _3002 = _2854;
                    _3003 = _2856;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
        }
        uvec4 _2859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2860 = _2859.z;
        uint _2862 = (_2860 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2862) & _2744) == 0u)
        {
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
            float _2992 = _2991 * _2698;
            float _2993 = _2991 * _2699;
            float _2994 = _2991 * _2700;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2862 < ((_2860 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3126 = _2845;
                float _3127 = _2847;
                float _3128 = _2849;
                float _3129 = _2851;
                float _3130 = _2853;
                float _3131 = _2855;
                uint _3132 = _2862;
                uint _3141;
                bool _3142;
                for (;;)
                {
                    _3141 = texelFetch(g_lightClassification, int((((_2738 << 5u) + (_2724 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                    _3142 = _3141 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3142)
                    {
                        frontier_phi_77_pred = _3131;
                        frontier_phi_77_pred_1 = _3130;
                        frontier_phi_77_pred_2 = _3129;
                        frontier_phi_77_pred_3 = _3128;
                        frontier_phi_77_pred_4 = _3127;
                        frontier_phi_77_pred_5 = _3126;
                    }
                    else
                    {
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        uint _3354 = _3141;
                        uint _3355;
                        vec4 _3380;
                        float _3381;
                        vec4 _3396;
                        vec3 _3408;
                        vec4 _3423;
                        vec4 _3438;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3365 = ((_3132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3354));
                            _3355 = (_3354 + 4294967295u) & _3354;
                            uint _3367 = _3365 * 40u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3381 = _3380.w;
                            uint _3383 = (_3365 * 40u) + 4u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3365 * 40u) + 8u;
                            _3408 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x));
                            uint _3410 = (_3365 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3365 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3365 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3365 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_2700, _3472.z, fma(_2699, _3472.y, _3472.x * _2698)) + _3472.w;
                            _3485 = !((fma(_2700, _3453.z, fma(_2699, _3453.y, _3453.x * _2698)) + _3453.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3380.x - _2698;
                                float _3513 = _3380.y - _2699;
                                float _3514 = _3380.z - _2700;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3381 * _3381));
                                float _4706 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3530 = sqrt(_3515) * _3396.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_950, _953, _956))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_2700, _3423.z, fma(_2699, _3423.y, _3423.x * _2698)) + _3423.w) / _3484;
                                float _3544 = (fma(_2700, _3438.z, fma(_2699, _3438.y, _3438.x * _2698)) + _3438.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4722 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _1010;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _2992;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_950, _953, _956), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4733 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3587 = dot(vec3(_950, _953, _956), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4744 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_950, _953, _956), vec3(_3519, _3520, _3521))) + _3596;
                                float _4755 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4766 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3550 * _3396.y;
                                frontier_phi_83_pred_1 = _3550 * _3396.x;
                                frontier_phi_83_pred_2 = _3624 * _3408.z;
                                frontier_phi_83_pred_3 = _3624 * _3408.y;
                                frontier_phi_83_pred_4 = _3624 * _3408.x;
                                frontier_phi_83_pred_5 = _3550 * _3396.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_83_pred;
                            _3631 = frontier_phi_83_pred_1;
                            _3630 = frontier_phi_83_pred_2;
                            _3629 = frontier_phi_83_pred_3;
                            _3628 = frontier_phi_83_pred_4;
                            _3633 = frontier_phi_83_pred_5;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            if (_3355 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3355;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3340;
                        frontier_phi_77_pred_1 = _3339;
                        frontier_phi_77_pred_2 = _3338;
                        frontier_phi_77_pred_3 = _3337;
                        frontier_phi_77_pred_4 = _3336;
                        frontier_phi_77_pred_5 = _3335;
                    }
                    _2977 = frontier_phi_77_pred;
                    _2975 = frontier_phi_77_pred_1;
                    _2973 = frontier_phi_77_pred_2;
                    _2971 = frontier_phi_77_pred_3;
                    _2969 = frontier_phi_77_pred_4;
                    _2967 = frontier_phi_77_pred_5;
                    uint _3133 = _3132 + 1u;
                    if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3126 = _2967;
                        _3127 = _2969;
                        _3128 = _2971;
                        _3129 = _2973;
                        _3130 = _2975;
                        _3131 = _2977;
                        _3132 = _3133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2971;
                frontier_phi_58_59_ladder_1 = _2977;
                frontier_phi_58_59_ladder_2 = _2975;
                frontier_phi_58_59_ladder_3 = _2973;
                frontier_phi_58_59_ladder_4 = _2969;
                frontier_phi_58_59_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_58_59_ladder = _2849;
                frontier_phi_58_59_ladder_1 = _2855;
                frontier_phi_58_59_ladder_2 = _2853;
                frontier_phi_58_59_ladder_3 = _2851;
                frontier_phi_58_59_ladder_4 = _2847;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            _2966 = frontier_phi_58_59_ladder_5;
            _2968 = frontier_phi_58_59_ladder_4;
            _2970 = frontier_phi_58_59_ladder;
            _2972 = frontier_phi_58_59_ladder_3;
            _2974 = frontier_phi_58_59_ladder_2;
            _2976 = frontier_phi_58_59_ladder_1;
        }
        float _2981 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _2757 = (_2981 * _2972) + _2209;
        _2759 = (_2981 * _2974) + _2211;
        _2761 = (_2981 * _2976) + _2213;
        _2763 = ((_2966 * 0.039999999105930328369140625) * _2981) + _2542;
        _2765 = ((_2968 * 0.039999999105930328369140625) * _2981) + _2544;
        _2767 = ((_2970 * 0.039999999105930328369140625) * _2981) + _2546;
    }
    else
    {
        _2757 = _2209;
        _2759 = _2211;
        _2761 = _2213;
        _2763 = _2542;
        _2765 = _2544;
        _2767 = _2546;
    }
    float _4782 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4793 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4804 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2784 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2757 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _994))) + ((_2763 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1830)) * cbPerFrame._m0[3u].x);
    float _2785 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2759 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _994))) + ((_2765 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1830)) * cbPerFrame._m0[3u].x);
    float _2786 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2761 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _994))) + ((_2767 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1830)) * cbPerFrame._m0[3u].x);
    uint _2787 = _283 + 6u;
    float _2795 = _931 / cbSceneParam._m0[86u].x;
    float _2796 = _932 / cbSceneParam._m0[86u].y;
    vec4 _2810 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2812 = _2810.x;
    float _2813 = _2810.y;
    float _2814 = _2810.z;
    float _2815 = _2810.w;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2870 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2871 = _2870 / _853;
        float _2882 = _2871 * _904;
        float _2883 = _905 * _2871;
        float _2884 = (-0.0) - _2883;
        float _2886 = _2871 * _906;
        float _2888 = (cbSceneParam._m0[77u].w * _2884) / _2870;
        float _2889 = _2888 + cbSceneParam._m0[79u].w;
        float _2890 = cbSceneParam._m0[79u].w - _2883;
        float _2896 = sqrt(((_2882 * _2882) + (_2883 * _2883)) + (_2886 * _2886));
        float _2899 = (1.0 - (cbSceneParam._m0[77u].w / _2870)) * _2896;
        float _2904 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2906 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3083;
        if (abs((_2884 - _2888) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3083 = ((((_2889 > 0.0) ? exp2(_2904 * _2889) : (2.0 - exp2(_2906 * _2889))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2899;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : max(_2889, _2890));
            float _3029 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : min(_2889, _2890));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3083 = ((abs(_2896 / _2884) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2904 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2904 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2906 * _3038) - exp2(_2906 * _3039)) * _3027))) + (_2899 * cbSceneParam._m0[80u].z);
        }
        vec4 _3085 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, 1.0), 0.0);
        float _3094 = exp2((_3083 * (-1.44269502162933349609375)) * (1.0 - _3085.w));
        float _3095 = log2(_3094);
        float _3111 = log2(_2815);
        _2908 = (exp2(_3111 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].x)) * _3085.x) / cbSceneParam._m0[78u].x)) + _2812;
        _2910 = (exp2(_3111 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].y)) * _3085.y) / cbSceneParam._m0[78u].y)) + _2813;
        _2912 = (exp2(_3111 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].z)) * _3085.z) / cbSceneParam._m0[78u].z)) + _2814;
        _2914 = _3094 * _2815;
    }
    else
    {
        _2908 = _2812;
        _2910 = _2813;
        _2912 = _2814;
        _2914 = _2815;
    }
    bool _3121;
    vec4 _2924;
    vec4 _2946;
    float _2948;
    float _2952;
    float _2953;
    float _2954;
    float _2955;
    bool _2965;
    for (;;)
    {
        _2924 = cbMatDynParam._m0[0u];
        float _2926 = roundEven(_2924.y);
        bool _2927 = _2926 == 3.0;
        float _2928 = log2(_2914);
        float _2935 = exp2(_2928 * cbSceneParam._m0[78u].x) * _2784;
        float _2936 = exp2(_2928 * cbSceneParam._m0[78u].y) * _2785;
        float _2937 = exp2(_2928 * cbSceneParam._m0[78u].z) * _2786;
        float _2944 = _920 + (-0.5);
        _2946 = cbMtdParam._m0[1u];
        _2948 = _2946.y * _2944;
        float _2951 = (_2926 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2952 = _2951 * (_2927 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2908)));
        _2953 = _2951 * (_2927 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2910)));
        _2954 = _2951 * (_2927 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2912)));
        _2955 = _2944 * 0.999000012874603271484375;
        _2965 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2965)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _2955) < 0.5)
            {
                _3121 = true;
                break;
            }
        }
        uint _3062 = _969 + uint(_2924.w);
        if ((cbInstanceData._m0[_3062].w < 1.0) && ((cbInstanceData._m0[_3062].w + _2955) < 0.5))
        {
            _3121 = true;
            break;
        }
        if ((_2948 + 1.0) < _2946.x)
        {
            _3121 = true;
            break;
        }
        _3121 = false;
        break;
    }
    float _3326;
    if (_3121)
    {
        discard_state = true;
        _3326 = 0.0;
    }
    else
    {
        _3326 = cbInstanceData._m0[_2787].w;
    }
    SV_Target.x = _2952;
    SV_Target.y = _2953;
    SV_Target.z = _2954;
    SV_Target.w = _3326;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2787].w;
    discard_exit();
}


