#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _337.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3688 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _413 = (_406 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _414 = (_406 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _415 = (_406 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _337.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3699 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _406) + _525;
    float _535 = ((_506.y - _526) * _406) + _526;
    float _536 = ((_506.z - _527) * _406) + _527;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _479) + _536;
    float _564 = ((((_548.x - _534) * _479) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _479) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3710 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _564;
    float _599 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _602 = fma(_572, _239, fma(_599, _246, _598 * _232));
    float _605 = fma(_572, _240, fma(_599, _247, _598 * _233));
    float _608 = fma(_572, _241, fma(_599, _248, _598 * _234));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _648 = (cbMtdParam._m0[19u].x + dot(vec4(_612 * _602, _612 * _605, _612 * _608, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_641 - _642) * cbMtdParam._m0[24u].w) + _642) * cbMtdParam._m0[21u].z);
    float _3721 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _651 = (-0.0) - cbMtdParam._m0[24u].x;
    float _653 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
    float _661 = _649 - ((_649 * TEXCOORD_8.x) * _654);
    float _662 = _649 - ((_649 * TEXCOORD_8.y) * _654);
    float _663 = _649 - ((_649 * TEXCOORD_8.z) * _654);
    float _670 = (_661 * (cbMtdParam._m0[17u].x - _486)) + _486;
    float _671 = (_662 * (cbMtdParam._m0[17u].y - _487)) + _487;
    float _672 = (_663 * (cbMtdParam._m0[17u].z - _488)) + _488;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _715 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_686 - _687) * cbMtdParam._m0[24u].y) + _687) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3742 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _724 = ((((cbMtdParam._m0[10u].x - _670) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _716) + _670;
    float _725 = ((((cbMtdParam._m0[10u].y - _671) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _716) + _671;
    float _726 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _672)) * _716) + _672;
    float _730 = (cbMtdParam._m0[19u].w * (_586.z - _561)) + _561;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _751 = (_744.x * 2.0) + (-1.0);
    float _752 = (_744.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3753 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _761 = ((_744.z - _730) * _661) + _730;
    float _764 = ((cbMtdParam._m0[23u].y - _761) * _716) + _761;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _789 = (_783.x * 2.0) + (-1.0);
    float _790 = (_783.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3764 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _806 = ((sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) - _572) * _663) + _572;
    float _809 = (((_751 - _598) * _661) + _598) + (cbMtdParam._m0[21u].x * _598);
    float _810 = (((_752 - _599) * _662) + _599) + (cbMtdParam._m0[21u].x * _599);
    float _821 = (((_789 - _809) + (_809 * cbMtdParam._m0[22u].z)) * _716) + _809;
    float _822 = (((_790 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _716) + _810;
    float _823 = (_716 * (sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _806)) + _806;
    float _825 = cbMtdParam._m0[22u].x + _586.w;
    float _828 = fma(_823, _239, fma(_822, _246, _821 * _232));
    float _831 = fma(_823, _240, fma(_822, _247, _821 * _233));
    float _834 = fma(_823, _241, fma(_822, _248, _821 * _234));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _3775 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _842 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _3797 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3808 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3819 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _860 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    float _926 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _927 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _945 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _948 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _951 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _965 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _971 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_965].x;
    float _972 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_965].y;
    float _973 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_965].z;
    float _3830 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _926, cbSceneParam._m0[86u].y * _927));
    float _989 = ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_839, _840, _841), vec3(_918, _919, _920));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _839) - _918;
    float _998 = (_993 * _840) - _919;
    float _999 = (_993 * _841) - _920;
    float _1003 = abs(dot(vec3(_918, _919, _920), vec3(_839, _840, _841)));
    float _3863 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_842);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1088 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1092 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1117 = _1050 + _839;
        float _1118 = _1054 + _840;
        float _1119 = _1058 + _841;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_839, _840, _841), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3911 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_839, _840, _841), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3944 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_839, _840, _841), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3977 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1402 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1406 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1429 = _1050 + _839;
        float _1430 = _1054 + _840;
        float _1431 = _1058 + _841;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_839, _840, _841), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4040 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_839, _840, _841), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4073 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_839, _840, _841), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4106 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1360;
        _1668 = _1360;
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1372)) + _1372;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1373)) + _1373;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1374)) + _1374;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _997 * 0.5;
    float _1736 = _998 * 0.5;
    float _1737 = _999 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1866 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1869 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1897 = frontier_phi_14_12_ladder;
        }
        float _2119;
        if (_1866 > 0.0)
        {
            _2119 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2119 = frontier_phi_23_19_ladder;
        }
        float _2365;
        if (_1869 > 0.0)
        {
            _2365 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2365 = frontier_phi_35_30_ladder;
        }
        float _2367 = isnan(_2119) ? _1897 : (isnan(_1897) ? _2119 : min(_1897, _2119));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1863) + _1852;
        float _2373 = (_2368 * _1866) + _1856;
        float _2374 = (_2368 * _1869) + _1860;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_13_35_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_13_35_ladder_2;
        _1887 = frontier_phi_13_35_ladder_1;
        _1889 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1804);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1962 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1965 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2124;
        if (_1959 > 0.0)
        {
            _2124 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2124 = frontier_phi_25_21_ladder;
        }
        float _2392;
        if (_1962 > 0.0)
        {
            _2392 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2392 = frontier_phi_37_32_ladder;
        }
        float _2597;
        if (_1965 > 0.0)
        {
            _2597 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2597 = frontier_phi_46_43_ladder;
        }
        float _2599 = isnan(_2392) ? _2124 : (isnan(_2124) ? _2392 : min(_2124, _2392));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1959) + _1948;
        float _2605 = (_2600 * _1962) + _1952;
        float _2606 = (_2600 * _1965) + _1956;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_22_46_ladder = _2805.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2805.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2805.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_22_46_ladder_2;
        _1986 = frontier_phi_22_46_ladder_1;
        _1988 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1894);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2000 = ((((1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1018 * _1005)) * _989;
    float _2001 = _2000 * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2002 = _2000 * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2003 = _2000 * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    vec4 _2020 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_926, _927));
    float _2022 = _2020.w;
    float _2034 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2022);
    float _2035 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2022);
    float _2036 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2022);
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _989 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2078 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2082 = _2042 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_839, _840, _841));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_839, _840, _841));
    float _4242 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4253 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2059].x * _2065) * _2103) + (((cbLight._m0[_2069].x * _2034) * _2078) * _2101);
    float _2111 = ((_2065 * cbLight._m0[_2059].y) * _2103) + (((cbLight._m0[_2069].y * _2035) * _2078) * _2101);
    float _2112 = ((_2065 * cbLight._m0[_2059].z) * _2103) + (((cbLight._m0[_2069].z * _2036) * _2078) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2042 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4264 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2156 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2336 = _2042 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4280 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2355 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2174 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2129;
        _2176 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2131;
        _2178 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2133;
    }
    uint _2181 = _2042 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _842) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2042].x + _918;
    float _2197 = cbLight._m0[_2042].y + _919;
    float _2198 = cbLight._m0[_2042].z + _920;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2042].xyz));
    float _4296 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2210 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2211 = dot(vec3(_839, _840, _841), vec3(_2203, _2204, _2205));
    float _4318 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2203, _2204, _2205));
    float _4329 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2235 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2210 * ((_2209 * _2235) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2235) + _2195) * _2209))) * _2209;
    float _4340 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2262 = _2042 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _842) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2082].x + _918;
    float _2276 = cbLight._m0[_2082].y + _919;
    float _2277 = cbLight._m0[_2082].z + _920;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2082].xyz));
    float _4351 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2289 = dot(vec3(_839, _840, _841), vec3(_2282, _2283, _2284));
    float _4362 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2282, _2283, _2284));
    float _4373 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2311 = 1.0 - _2274;
    float _2321 = (0.5 / (((_2210 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2311) + _2274) * _2288))) * _2288;
    float _4384 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2333 = (((_2310 * cbLight._m0[_2262].x) * _2323) * _2065) + ((((cbLight._m0[_2181].x * _2034) * _2234) * _2248) * _2078);
    float _2334 = (((_2310 * cbLight._m0[_2262].y) * _2323) * _2065) + ((((cbLight._m0[_2181].y * _2035) * _2234) * _2248) * _2078);
    float _2335 = (((_2310 * cbLight._m0[_2262].z) * _2323) * _2065) + ((((cbLight._m0[_2181].z * _2036) * _2234) * _2248) * _2078);
    float _2397;
    float _2399;
    float _2401;
    if (_2118)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2042 + 2u;
        uint _2407 = _2042 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _842) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _918;
        float _2424 = cbLight._m0[_2403].y + _919;
        float _2425 = cbLight._m0[_2403].z + _920;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2403].xyz));
        float _4395 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2437 = dot(vec3(_839, _840, _841), vec3(_2430, _2431, _2432));
        float _4406 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4417 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2459 = 1.0 - _2422;
        float _2469 = (0.5 / (((_2210 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2459) + _2422) * _2436))) * _2436;
        float _4428 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2397 = (((_2458 * cbLight._m0[_2407].x) * _2471) * _2472) + _2333;
        _2399 = (((_2458 * cbLight._m0[_2407].y) * _2471) * _2472) + _2334;
        _2401 = (((_2458 * cbLight._m0[_2407].z) * _2471) * _2472) + _2335;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2136)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _2042 + 3u;
        uint _2522 = _2042 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _842) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _918;
        float _2539 = cbLight._m0[_2518].y + _919;
        float _2540 = cbLight._m0[_2518].z + _920;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2518].xyz));
        float _4444 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2552 = dot(vec3(_839, _840, _841), vec3(_2545, _2546, _2547));
        float _4455 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4466 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2573 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2574 = 1.0 - _2537;
        float _2584 = (0.5 / (((_2210 * ((_2551 * _2574) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2574) + _2537) * _2551))) * _2551;
        float _4477 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2507 = (((_2573 * cbLight._m0[_2522].x) * _2586) * _2587) + _2397;
        _2509 = (((_2573 * cbLight._m0[_2522].y) * _2586) * _2587) + _2399;
        _2511 = (((_2573 * cbLight._m0[_2522].z) * _2586) * _2587) + _2401;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2040.y == 0u)
    {
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2662;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2662;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2662;
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _927) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _926) / _2678)));
        float _2699 = (log2(_2665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
        }
        else
        {
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            uint _2960 = 0u;
            uint _2969;
            bool _2970;
            for (;;)
            {
                _2969 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                _2970 = _2969 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2970)
                {
                    frontier_phi_61_pred = _2954;
                    frontier_phi_61_pred_1 = _2959;
                    frontier_phi_61_pred_2 = _2958;
                    frontier_phi_61_pred_3 = _2957;
                    frontier_phi_61_pred_4 = _2956;
                    frontier_phi_61_pred_5 = _2955;
                }
                else
                {
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    uint _3084;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2969;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3088 = uint(findLSB(_3084)) + (_2960 << 5u);
                        uint _3085 = (_3084 + 4294967295u) & _3084;
                        uint _3090 = _3088 * 48u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3110 = (_3088 * 48u) + 4u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3129 = (_3088 * 48u) + 8u;
                        vec3 _3140 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x));
                        float _3144 = _3104.x - _2663;
                        float _3145 = _3104.y - _2664;
                        float _3146 = _3104.z - _2665;
                        float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                        float _3150 = inversesqrt(_3147);
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3154 = dot(vec3(_945, _948, _951), vec3(_3151, _3152, _3153));
                        float _3159 = 1.0 - (_3147 * _3104.w);
                        float _4503 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3161 = sqrt(_3147) * _3123.w;
                        float _3164 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3154) + _3165;
                        float _3171 = _3161 * _3161;
                        float _3175 = ((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3160) / ((_3171 * 0.699999988079071044921875) + 1.0);
                        float _3179 = (-0.0) - _2663;
                        float _3180 = (-0.0) - _2664;
                        float _3181 = (-0.0) - _2665;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3196 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                        float _3197 = 1.0 - _1005;
                        float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                        float _3205 = _3204 * _3204;
                        float _3206 = _3205 * _3205;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3209 = _3188 + _3153;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3217 = dot(vec3(_945, _948, _951), vec3(_3186, _3187, _3188));
                        float _4519 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3221 = dot(vec3(_945, _948, _951), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                        float _4530 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                        float _3229 = _3164 * _3205;
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3154) + _3230;
                        float _4541 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3235 = 1.0 - _3205;
                        float _3245 = (0.5 / (((_3234 * ((_3220 * _3235) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3205) * _3220))) * _3234;
                        float _4552 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3256 = (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3228 * _3228) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125))) * _3160;
                        _3013 = (_3175 * _3123.x) + _3081;
                        _3014 = (_3175 * _3123.y) + _3082;
                        _3015 = (_3175 * _3123.z) + _3083;
                        _3010 = (_3256 * _3140.x) + _3078;
                        _3011 = (_3256 * _3140.y) + _3079;
                        _3012 = (_3256 * _3140.z) + _3080;
                        if (_3085 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3085;
                        }
                    }
                    frontier_phi_61_pred = _3010;
                    frontier_phi_61_pred_1 = _3015;
                    frontier_phi_61_pred_2 = _3014;
                    frontier_phi_61_pred_3 = _3013;
                    frontier_phi_61_pred_4 = _3012;
                    frontier_phi_61_pred_5 = _3011;
                }
                _2811 = frontier_phi_61_pred;
                _2821 = frontier_phi_61_pred_1;
                _2819 = frontier_phi_61_pred_2;
                _2817 = frontier_phi_61_pred_3;
                _2815 = frontier_phi_61_pred_4;
                _2813 = frontier_phi_61_pred_5;
                uint _2961 = _2960 + 1u;
                if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2954 = _2811;
                    _2955 = _2813;
                    _2956 = _2815;
                    _2957 = _2817;
                    _2958 = _2819;
                    _2959 = _2821;
                    _2960 = _2961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
        }
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.z;
        uint _2827 = (_2825 >> 8u) & 15u;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((4294967295u << _2827) & _2709) == 0u)
        {
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
        }
        else
        {
            float _2947 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
            float _2948 = _2947 * _2663;
            float _2949 = _2947 * _2664;
            float _2950 = _2947 * _2665;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2827 < ((_2825 >> 12u) & 15u))
            {
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _3061 = _2810;
                float _3062 = _2812;
                float _3063 = _2814;
                float _3064 = _2816;
                float _3065 = _2818;
                float _3066 = _2820;
                uint _3067 = _2827;
                uint _3076;
                bool _3077;
                for (;;)
                {
                    _3076 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                    _3077 = _3076 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3077)
                    {
                        frontier_phi_67_pred = _3064;
                        frontier_phi_67_pred_1 = _3065;
                        frontier_phi_67_pred_2 = _3066;
                        frontier_phi_67_pred_3 = _3063;
                        frontier_phi_67_pred_4 = _3062;
                        frontier_phi_67_pred_5 = _3061;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        uint _3280 = _3076;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3349;
                        vec4 _3364;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3291 = ((_3067 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3336 = (_3291 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3291 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3291 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3291 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_2665, _3398.z, fma(_2664, _3398.y, _3398.x * _2663)) + _3398.w;
                            _3411 = !((fma(_2665, _3379.z, fma(_2664, _3379.y, _3379.x * _2663)) + _3379.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3306.x - _2663;
                                float _3439 = _3306.y - _2664;
                                float _3440 = _3306.z - _2665;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3307 * _3307));
                                float _4563 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3456 = sqrt(_3441) * _3322.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_945, _948, _951))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_2665, _3349.z, fma(_2664, _3349.y, _3349.x * _2663)) + _3349.w) / _3410;
                                float _3470 = (fma(_2665, _3364.z, fma(_2664, _3364.y, _3364.x * _2663)) + _3364.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4579 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _1005;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2948;
                                float _3500 = _3446 - _2949;
                                float _3501 = _3447 - _2950;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_945, _948, _951), vec3((-0.0) - _2948, (-0.0) - _2949, (-0.0) - _2950));
                                float _4590 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3513 = dot(vec3(_945, _948, _951), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4601 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_945, _948, _951), vec3(_3445, _3446, _3447))) + _3522;
                                float _4612 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4623 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3550 * _3334.x;
                                frontier_phi_73_pred_1 = _3550 * _3334.y;
                                frontier_phi_73_pred_2 = _3476 * _3322.z;
                                frontier_phi_73_pred_3 = _3476 * _3322.y;
                                frontier_phi_73_pred_4 = _3476 * _3322.x;
                                frontier_phi_73_pred_5 = _3550 * _3334.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_73_pred;
                            _3555 = frontier_phi_73_pred_1;
                            _3559 = frontier_phi_73_pred_2;
                            _3558 = frontier_phi_73_pred_3;
                            _3557 = frontier_phi_73_pred_4;
                            _3556 = frontier_phi_73_pred_5;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3264;
                        frontier_phi_67_pred_1 = _3265;
                        frontier_phi_67_pred_2 = _3266;
                        frontier_phi_67_pred_3 = _3263;
                        frontier_phi_67_pred_4 = _3262;
                        frontier_phi_67_pred_5 = _3261;
                    }
                    _2929 = frontier_phi_67_pred;
                    _2931 = frontier_phi_67_pred_1;
                    _2933 = frontier_phi_67_pred_2;
                    _2927 = frontier_phi_67_pred_3;
                    _2925 = frontier_phi_67_pred_4;
                    _2923 = frontier_phi_67_pred_5;
                    uint _3068 = _3067 + 1u;
                    if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3061 = _2923;
                        _3062 = _2925;
                        _3063 = _2927;
                        _3064 = _2929;
                        _3065 = _2931;
                        _3066 = _2933;
                        _3067 = _3068;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2931;
                frontier_phi_55_56_ladder_1 = _2933;
                frontier_phi_55_56_ladder_2 = _2929;
                frontier_phi_55_56_ladder_3 = _2927;
                frontier_phi_55_56_ladder_4 = _2925;
                frontier_phi_55_56_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_55_56_ladder = _2818;
                frontier_phi_55_56_ladder_1 = _2820;
                frontier_phi_55_56_ladder_2 = _2816;
                frontier_phi_55_56_ladder_3 = _2814;
                frontier_phi_55_56_ladder_4 = _2812;
                frontier_phi_55_56_ladder_5 = _2810;
            }
            _2922 = frontier_phi_55_56_ladder_5;
            _2924 = frontier_phi_55_56_ladder_4;
            _2926 = frontier_phi_55_56_ladder_3;
            _2928 = frontier_phi_55_56_ladder_2;
            _2930 = frontier_phi_55_56_ladder;
            _2932 = frontier_phi_55_56_ladder_1;
        }
        float _2937 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2722 = (_2937 * _2928) + _2174;
        _2724 = (_2937 * _2930) + _2176;
        _2726 = (_2937 * _2932) + _2178;
        _2728 = ((_2922 * 0.039999999105930328369140625) * _2937) + _2507;
        _2730 = ((_2924 * 0.039999999105930328369140625) * _2937) + _2509;
        _2732 = ((_2926 * 0.039999999105930328369140625) * _2937) + _2511;
    }
    else
    {
        _2722 = _2174;
        _2724 = _2176;
        _2726 = _2178;
        _2728 = _2507;
        _2730 = _2509;
        _2732 = _2511;
    }
    float _4639 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4650 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4661 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    uint _2752 = _251 + 6u;
    float _2760 = _926 / cbSceneParam._m0[86u].x;
    float _2761 = _927 / cbSceneParam._m0[86u].y;
    vec4 _2775 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, (log2((isnan(cbSceneParam._m0[77u].w) ? _860 : (isnan(_860) ? cbSceneParam._m0[77u].w : min(_860, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2777 = _2775.x;
    float _2778 = _2775.y;
    float _2779 = _2775.z;
    float _2780 = _2775.w;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_860 > cbSceneParam._m0[78u].w)
    {
        float _2835 = isnan(_860) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _860 : min(cbSceneParam._m0[80u].w, _860));
        float _2836 = _2835 / _860;
        float _2847 = _2836 * _911;
        float _2848 = _912 * _2836;
        float _2849 = (-0.0) - _2848;
        float _2850 = _2836 * _913;
        float _2852 = (cbSceneParam._m0[77u].w * _2849) / _2835;
        float _2853 = _2852 + cbSceneParam._m0[79u].w;
        float _2854 = cbSceneParam._m0[79u].w - _2848;
        float _2860 = sqrt(((_2847 * _2847) + (_2848 * _2848)) + (_2850 * _2850));
        float _2863 = (1.0 - (cbSceneParam._m0[77u].w / _2835)) * _2860;
        float _2868 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2870 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2849 - _2852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2853 > 0.0) ? exp2(_2868 * _2853) : (2.0 - exp2(_2870 * _2853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2863;
        }
        else
        {
            float _2983 = 1.0 / cbSceneParam._m0[80u].x;
            float _2984 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : max(_2853, _2854));
            float _2985 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : min(_2853, _2854));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            _3023 = ((abs(_2860 / _2849) * cbSceneParam._m0[80u].y) * ((((_2994 - _2995) * 2.0) - ((exp2(_2868 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0)))) - exp2(_2868 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))))) * _2983)) - ((exp2(_2870 * _2994) - exp2(_2870 * _2995)) * _2983))) + (_2863 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2780);
        _2872 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2777;
        _2874 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2778;
        _2876 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2779;
        _2878 = _3034 * _2780;
    }
    else
    {
        _2872 = _2777;
        _2874 = _2778;
        _2876 = _2779;
        _2878 = _2780;
    }
    float _2890 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2891 = _2890 == 3.0;
    float _2892 = log2(_2878);
    float _2899 = exp2(_2892 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2722 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _989))) + ((_2728 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _2900 = exp2(_2892 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2724 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _989))) + ((_2730 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _2901 = exp2(_2892 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2726 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _989))) + ((_2732 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _2910 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2910 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.y = _2910 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.z = _2910 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.w = cbInstanceData._m0[_2752].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2752].w;
}


