#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1645;
float _4024;
float _4025;
float _4026;
float _4027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4036 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4047 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4058 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4069 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _472 = (_465 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _473 = (_465 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _474 = (_465 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _513 = _511.x;
    float _523 = dot(vec4(_513, _511.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _537 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_513 - _523) * cbMtdParam._m0[24u].z) + _523) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4080 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _545 = (_538 * ((_491.x * cbMtdParam._m0[13u].x) - _472)) + _472;
    float _546 = (_538 * ((_491.y * cbMtdParam._m0[13u].y) - _473)) + _473;
    float _547 = (_538 * ((_491.z * cbMtdParam._m0[13u].z) - _474)) + _474;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _584 = _582.x;
    float _594 = dot(vec4(_584, _582.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _606 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _395.z) * 2.0) - ((((_584 - _594) * cbMtdParam._m0[24u].z) + _594) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4091 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _614 = (_607 * ((_565.x * cbMtdParam._m0[14u].x) - _545)) + _545;
    float _615 = (_607 * ((_565.y * cbMtdParam._m0[14u].y) - _546)) + _546;
    float _616 = (_607 * ((_565.z * cbMtdParam._m0[14u].z) - _547)) + _547;
    float _620 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _614;
    float _623 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _615;
    float _626 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _616;
    float _633 = ((_614 - _620) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _620;
    float _634 = ((_615 - _623) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _623;
    float _635 = ((_616 - _626) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) + _626;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _465) + _716;
    float _726 = ((_697.y - _717) * _465) + _717;
    float _727 = ((_697.z - _718) * _465) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _538) + _725;
    float _751 = ((_739.y - _726) * _538) + _726;
    float _752 = ((_739.z - _727) * _538) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _607) + _752;
    float _780 = ((((_764.x - _750) * _607) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _607) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4102 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
    vec4 _805 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _817 = (_780 + ((((_672.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_805.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _818 = (_781 + ((((_672.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_805.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _821 = fma(_787, _262, fma(_818, _269, _817 * _255));
    float _824 = fma(_787, _263, fma(_818, _270, _817 * _256));
    float _827 = fma(_787, _264, fma(_818, _271, _817 * _257));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    vec4 _858 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _860 = _858.x;
    float _861 = 1.0 - _860;
    float _867 = (cbMtdParam._m0[19u].x + dot(vec4(_831 * _821, _831 * _824, _831 * _827, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_860 - _861) * cbMtdParam._m0[24u].w) + _861) * cbMtdParam._m0[21u].z);
    float _4113 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _868 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _870 = (-0.0) - cbMtdParam._m0[24u].x;
    float _872 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
    float _880 = _868 - ((_868 * TEXCOORD_8.x) * _873);
    float _881 = _868 - ((_868 * TEXCOORD_8.y) * _873);
    float _882 = _868 - ((_868 * TEXCOORD_8.z) * _873);
    float _889 = (_880 * ((_653.x * cbMtdParam._m0[18u].x) - _633)) + _633;
    float _890 = (_881 * ((_653.y * cbMtdParam._m0[18u].y) - _634)) + _634;
    float _891 = (_882 * ((_653.z * cbMtdParam._m0[18u].z) - _635)) + _635;
    float _906 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _907 = _906 * TEXCOORD.z;
    float _908 = _906 * TEXCOORD.w;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _907) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _908) + cbTextureTilingScale._m0[19u].w));
    float _922 = _920.x;
    float _923 = 1.0 - _922;
    float _951 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_922 - _923) * cbMtdParam._m0[24u].y) + _923) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4134 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _952 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _960 = ((((cbMtdParam._m0[10u].x - _889) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _952) + _889;
    float _961 = ((((cbMtdParam._m0[10u].y - _890) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _952) + _890;
    float _962 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _891)) * _952) + _891;
    float _967 = (((_672.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _971 = ((_805.z - _967) * cbMtdParam._m0[19u].w) + _967;
    vec4 _987 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _994 = (_987.x * 2.0) + (-1.0);
    float _995 = (_987.y * 2.0) + (-1.0);
    float _996 = dot(vec2(_994, _995), vec2(_994, _995));
    float _4145 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1004 = ((_987.z - _971) * _880) + _971;
    float _1007 = ((cbMtdParam._m0[23u].y - _1004) * _952) + _1004;
    vec4 _1028 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _907) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _908) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1034 = (_1028.x * 2.0) + (-1.0);
    float _1035 = (_1028.y * 2.0) + (-1.0);
    float _1036 = dot(vec2(_1034, _1035), vec2(_1034, _1035));
    float _4156 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1051 = ((sqrt(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) - _787) * _882) + _787;
    float _1054 = (((_994 - _817) * _880) + _817) + (cbMtdParam._m0[21u].x * _817);
    float _1055 = (((_995 - _818) * _881) + _818) + (cbMtdParam._m0[21u].x * _818);
    float _1066 = (((_1034 - _1054) + (_1054 * cbMtdParam._m0[22u].z)) * _952) + _1054;
    float _1067 = (((_1035 - _1055) + (_1055 * cbMtdParam._m0[22u].z)) * _952) + _1055;
    float _1068 = (_952 * (sqrt(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) - _1051)) + _1051;
    float _1070 = cbMtdParam._m0[22u].x + _805.w;
    float _1073 = fma(_1068, _262, fma(_1067, _269, _1066 * _255));
    float _1076 = fma(_1068, _263, fma(_1067, _270, _1066 * _256));
    float _1079 = fma(_1068, _264, fma(_1067, _271, _1066 * _257));
    float _1083 = inversesqrt(dot(vec3(_1073, _1076, _1079), vec3(_1073, _1076, _1079)));
    float _1084 = _1083 * _1073;
    float _1085 = _1083 * _1076;
    float _1086 = _1083 * _1079;
    float _4167 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1087 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4189 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4200 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4211 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1105 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1156 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1146);
    float _1157 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1146);
    float _1158 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1146);
    float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
    float _1163 = _1156 * _1162;
    float _1164 = _1157 * _1162;
    float _1165 = _1158 * _1162;
    vec4 _1170 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1172 = _1170.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1326 = sqrt(((_1156 * _1156) + (_1157 * _1157)) + (_1158 * _1158));
        float _1332 = (cbMatDynParam._m0[5u].x * _1326) + cbMatDynParam._m0[5u].y;
        float _4222 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1337 = (cbMatDynParam._m0[5u].z * _1326) + cbMatDynParam._m0[5u].w;
        float _4233 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) - _1333)) + _1333) < ((_1172 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1183 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1184 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1202 = fma(_1086, cbSceneParam._m0[5u].z, fma(_1085, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1084));
    float _1205 = fma(_1086, cbSceneParam._m0[6u].z, fma(_1085, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1084));
    float _1208 = fma(_1086, cbSceneParam._m0[7u].z, fma(_1085, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1084));
    uint _1221 = _293 + 9u;
    uint _1222 = _1221 + uint(cbMatDynParam._m0[0u].w);
    float _1228 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_1222].x;
    float _1229 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1222].y;
    float _1230 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1222].z;
    float _4244 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1232 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1233 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    vec4 _1242 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1183, cbSceneParam._m0[86u].y * _1184));
    float _1246 = ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * TEXCOORD_5.w) * _1242.x;
    float _1247 = dot(vec3(_1084, _1085, _1086), vec3(_1163, _1164, _1165));
    float _1250 = _1247 * 2.0;
    float _1254 = (_1250 * _1084) - _1163;
    float _1255 = (_1250 * _1085) - _1164;
    float _1256 = (_1250 * _1086) - _1165;
    float _1260 = abs(dot(vec3(_1163, _1164, _1165), vec3(_1084, _1085, _1086)));
    float _4277 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1262 = sqrt(_1087);
    float _1275 = exp2((_1262 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1262 * 3.0));
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1644;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1369 = fma(_1315, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307));
        float _1373 = fma(_1315, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307));
        float _1377 = fma(_1315, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307));
        float _1402 = _1307 + _1084;
        float _1403 = _1311 + _1085;
        float _1404 = _1315 + _1086;
        float _1414 = fma(_1404, cbModelParam._m0[26u].z, fma(_1403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1402)) - _1369;
        float _1415 = fma(_1404, cbModelParam._m0[27u].z, fma(_1403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1402)) - _1373;
        float _1416 = fma(_1404, cbModelParam._m0[28u].z, fma(_1403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1402)) - _1377;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1369 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1373 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[34u].z) + ((((((_1377 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1472 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1438.x + (-0.5));
        float _1474 = _1472 * (_1438.y + (-0.5));
        float _1475 = _1472 * (_1438.z + (-0.5));
        float _1482 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1445.x + (-0.5));
        float _1484 = _1482 * (_1445.y + (-0.5));
        float _1485 = _1482 * (_1445.z + (-0.5));
        float _1492 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1452.x + (-0.5));
        float _1494 = _1492 * (_1452.y + (-0.5));
        float _1495 = _1492 * (_1452.z + (-0.5));
        float _1502 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1459.x + (-0.5));
        float _1504 = _1502 * (_1459.y + (-0.5));
        float _1505 = _1502 * (_1459.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1526 = (dot(vec3(_1084, _1085, _1086), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1536 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4325 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1538 + 1.0))) + _1543) * _1506;
        float _1553 = _1474 * 0.5;
        float _1554 = _1484 * 0.5;
        float _1555 = _1494 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_1084, _1085, _1086), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4358 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1580 + 1.0))) + _1585) * _1507;
        float _1595 = _1475 * 0.5;
        float _1596 = _1485 * 0.5;
        float _1597 = _1495 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_1084, _1085, _1086), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4391 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1622 + 1.0))) + _1627) * _1508;
        _1644 = _1475;
        _1646 = _1474;
        _1647 = _1473;
        _1648 = _1485;
        _1649 = _1484;
        _1650 = _1483;
        _1651 = _1495;
        _1652 = _1494;
        _1653 = _1493;
        _1654 = _1508;
        _1655 = _1507;
        _1656 = _1506;
        _1657 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1658 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1659 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1645;
        _1646 = _1645;
        _1647 = _1645;
        _1648 = _1645;
        _1649 = _1645;
        _1650 = _1645;
        _1651 = _1645;
        _1652 = _1645;
        _1653 = _1645;
        _1654 = _1645;
        _1655 = _1645;
        _1656 = _1645;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1685 = fma(_1315, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307));
        float _1689 = fma(_1315, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307));
        float _1693 = fma(_1315, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307));
        float _1716 = _1307 + _1084;
        float _1717 = _1311 + _1085;
        float _1718 = _1315 + _1086;
        float _1728 = fma(_1718, cbModelParam._m0[30u].z, fma(_1717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1716)) - _1685;
        float _1729 = fma(_1718, cbModelParam._m0[31u].z, fma(_1717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1716)) - _1689;
        float _1730 = fma(_1718, cbModelParam._m0[32u].z, fma(_1717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1716)) - _1693;
        float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
        float _1747 = ((_1734 * _1728) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1685 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1748 = ((_1734 * _1729) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1689 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1749 = ((_1734 * _1730) / cbModelParam._m0[35u].z) + ((((((_1693 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1747, _1748, _1749), 0.0);
        vec4 _1758 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1747, _1748, _1749), 0.0);
        vec4 _1765 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1747, _1748, _1749), 0.0);
        vec4 _1772 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1747, _1748, _1749), 0.0);
        float _1784 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1785 = _1784 * (_1751.x + (-0.5));
        float _1786 = _1784 * (_1751.y + (-0.5));
        float _1787 = _1784 * (_1751.z + (-0.5));
        float _1794 = exp2((_1758.w + (-0.5)) * 20.0) * 2.0;
        float _1795 = _1794 * (_1758.x + (-0.5));
        float _1796 = _1794 * (_1758.y + (-0.5));
        float _1797 = _1794 * (_1758.z + (-0.5));
        float _1804 = exp2((_1765.w + (-0.5)) * 20.0) * 2.0;
        float _1805 = _1804 * (_1765.x + (-0.5));
        float _1806 = _1804 * (_1765.y + (-0.5));
        float _1807 = _1804 * (_1765.z + (-0.5));
        float _1814 = exp2((_1772.w + (-0.5)) * 20.0) * 2.0;
        float _1815 = _1814 * (_1772.x + (-0.5));
        float _1816 = _1814 * (_1772.y + (-0.5));
        float _1817 = _1814 * (_1772.z + (-0.5));
        float _1818 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1821 = _1785 * 0.5;
        float _1822 = _1795 * 0.5;
        float _1823 = _1805 * 0.5;
        float _1824 = dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823));
        float _1829 = (_1824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1824);
        float _1837 = (dot(vec3(_1084, _1085, _1086), vec3(_1829 * _1821, _1829 * _1822, _1829 * _1823)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823)) / (_1818 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1848 = _1847 * 2.0;
        float _1852 = (1.0 - _1847) / (_1847 + 1.0);
        float _4454 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1862 = ((((1.0 - _1853) * (_1848 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1848 + 1.0))) + _1853) * _1818;
        float _1863 = _1786 * 0.5;
        float _1864 = _1796 * 0.5;
        float _1865 = _1806 * 0.5;
        float _1866 = dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865));
        float _1871 = (_1866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1866);
        float _1879 = (dot(vec3(_1084, _1085, _1086), vec3(_1871 * _1863, _1871 * _1864, _1871 * _1865)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1890 = _1889 * 2.0;
        float _1894 = (1.0 - _1889) / (_1889 + 1.0);
        float _4487 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1904 = ((((1.0 - _1895) * (_1890 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1890 + 1.0))) + _1895) * _1819;
        float _1905 = _1787 * 0.5;
        float _1906 = _1797 * 0.5;
        float _1907 = _1807 * 0.5;
        float _1908 = dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907));
        float _1913 = (_1908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1908);
        float _1921 = (dot(vec3(_1084, _1085, _1086), vec3(_1913 * _1905, _1913 * _1906, _1913 * _1907)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1930 = sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907)) / (_1820 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1932 = _1931 * 2.0;
        float _1936 = (1.0 - _1931) / (_1931 + 1.0);
        float _4520 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1946 = ((((1.0 - _1937) * (_1932 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1932 + 1.0))) + _1937) * _1820;
        _1954 = _1787;
        _1955 = _1786;
        _1956 = _1785;
        _1957 = _1797;
        _1958 = _1796;
        _1959 = _1795;
        _1960 = _1807;
        _1961 = _1806;
        _1962 = _1805;
        _1963 = _1820;
        _1964 = _1819;
        _1965 = _1818;
        _1966 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)));
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)));
        _1968 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0)));
    }
    else
    {
        _1954 = _1645;
        _1955 = _1645;
        _1956 = _1645;
        _1957 = _1645;
        _1958 = _1645;
        _1959 = _1645;
        _1960 = _1645;
        _1961 = _1645;
        _1962 = _1645;
        _1963 = _1645;
        _1964 = _1645;
        _1965 = _1645;
        _1966 = 0.0;
        _1967 = 0.0;
        _1968 = 0.0;
    }
    float _1978 = (cbModelParam._m0[1u].x * (_1966 - _1657)) + _1657;
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1658)) + _1658;
    float _1980 = (cbModelParam._m0[1u].x * (_1968 - _1659)) + _1659;
    float _2001 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1978));
    float _2022 = _1254 * 0.5;
    float _2023 = _1255 * 0.5;
    float _2024 = _1256 * 0.5;
    float _2025 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1956, _1959, _1962, _1965));
    float _2028 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2031 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1954, _1957, _1960, _1963));
    float _2065;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2038 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1644, _1648, _1651, _1654));
        float _2042 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1646, _1649, _1652, _1655));
        float _2046 = dot(vec4(_2022, _2023, _2024, 1.0), vec4(_1647, _1650, _1653, _1656));
        float _2053 = dot(vec4(cbModelParam._m0[39u]), vec4(_2022, _2023, _2024, 1.0));
        _2065 = dot(vec3(isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)), isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)), isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2053) ? 0.0 : (isnan(0.0) ? _2053 : max(0.0, _2053))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2065 = 1.0;
    }
    float _2076;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2067 = dot(vec4(cbModelParam._m0[40u]), vec4(_2022, _2023, _2024, 1.0));
        _2076 = dot(vec3(isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2067) ? 0.0 : (isnan(0.0) ? _2067 : max(0.0, _2067))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2076 = 1.0;
    }
    float _2080 = (_2076 * cbModelParam._m0[1u].x) + (_2065 * (1.0 - cbModelParam._m0[1u].x));
    float _2090 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1087);
    float _2091 = isnan(_2090) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2090 : min(cbModelParam._m0[25u].z, _2090));
    float _2171;
    float _2173;
    float _2175;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2138 = fma(_1315, cbModelParam._m0[13u].z, fma(_1311, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1307)) + cbModelParam._m0[13u].w;
        float _2142 = fma(_1315, cbModelParam._m0[14u].z, fma(_1311, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1307)) + cbModelParam._m0[14u].w;
        float _2146 = fma(_1315, cbModelParam._m0[15u].z, fma(_1311, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1307)) + cbModelParam._m0[15u].w;
        float _2149 = fma(_1256, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1254));
        float _2152 = fma(_1256, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1254));
        float _2155 = fma(_1256, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1254));
        float _2183;
        if (_2149 > 0.0)
        {
            _2183 = abs((1.0 - _2138) / _2149);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2138 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2183 = frontier_phi_17_15_ladder;
        }
        float _2404;
        if (_2152 > 0.0)
        {
            _2404 = abs((1.0 - _2142) / _2152);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2142 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2404 = frontier_phi_26_22_ladder;
        }
        float _2650;
        if (_2155 > 0.0)
        {
            _2650 = abs((1.0 - _2146) / _2155);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2146 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2650 = frontier_phi_38_33_ladder;
        }
        float _2652 = isnan(_2404) ? _2183 : (isnan(_2183) ? _2404 : min(_2183, _2404));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _2149) + _2138;
        float _2658 = (_2653 * _2152) + _2142;
        float _2659 = (_2653 * _2155) + _2146;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2660;
        float _2664 = _2660 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 > _2664) || ((_2658 < _2662) || ((_2657 < _2662) || (_2657 > _2664))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2659, cbModelParam._m0[9u].z, fma(_2658, cbModelParam._m0[9u].y, _2657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2659, cbModelParam._m0[10u].z, fma(_2658, cbModelParam._m0[10u].y, _2657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2659, cbModelParam._m0[11u].z, fma(_2658, cbModelParam._m0[11u].y, _2657 * cbModelParam._m0[11u].x))), _2091);
            frontier_phi_16_38_ladder = _2783.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2783.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2783.x * cbModelParam._m0[1u].y;
        }
        _2171 = frontier_phi_16_38_ladder_2;
        _2173 = frontier_phi_16_38_ladder_1;
        _2175 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2159 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1254, _1255, _1256), _2091);
        _2171 = _2159.x * cbModelParam._m0[1u].y;
        _2173 = _2159.y * cbModelParam._m0[1u].y;
        _2175 = _2159.z * cbModelParam._m0[1u].y;
    }
    float _2179 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1087);
    float _2180 = isnan(_2179) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2179 : min(cbModelParam._m0[25u].w, _2179));
    float _2269;
    float _2271;
    float _2273;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2233 = fma(_1315, cbModelParam._m0[21u].z, fma(_1311, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1307)) + cbModelParam._m0[21u].w;
        float _2237 = fma(_1315, cbModelParam._m0[22u].z, fma(_1311, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1307)) + cbModelParam._m0[22u].w;
        float _2241 = fma(_1315, cbModelParam._m0[23u].z, fma(_1311, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1307)) + cbModelParam._m0[23u].w;
        float _2244 = fma(_1256, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1254));
        float _2247 = fma(_1256, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1254));
        float _2250 = fma(_1256, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1254));
        float _2409;
        if (_2244 > 0.0)
        {
            _2409 = abs((1.0 - _2233) / _2244);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2244 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2233 + 1.0) / _2244);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2409 = frontier_phi_28_24_ladder;
        }
        float _2677;
        if (_2247 > 0.0)
        {
            _2677 = abs((1.0 - _2237) / _2247);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2237 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2677 = frontier_phi_40_35_ladder;
        }
        float _2882;
        if (_2250 > 0.0)
        {
            _2882 = abs((1.0 - _2241) / _2250);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2241 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2882 = frontier_phi_49_46_ladder;
        }
        float _2884 = isnan(_2677) ? _2409 : (isnan(_2409) ? _2677 : min(_2409, _2677));
        float _2885 = isnan(_2882) ? _2884 : (isnan(_2884) ? _2882 : min(_2884, _2882));
        float _2889 = (_2885 * _2244) + _2233;
        float _2890 = (_2885 * _2247) + _2237;
        float _2891 = (_2885 * _2250) + _2241;
        float _2892 = _2885 * 9.9999997473787516355514526367188e-05;
        float _2893 = (-1.0) - _2892;
        float _2895 = _2892 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2891 > _2895) || ((_2891 < _2893) || ((_2890 > _2895) || ((_2890 < _2893) || ((_2889 < _2893) || (_2889 > _2895))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2891, cbModelParam._m0[17u].z, fma(_2890, cbModelParam._m0[17u].y, _2889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2891, cbModelParam._m0[18u].z, fma(_2890, cbModelParam._m0[18u].y, _2889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2891, cbModelParam._m0[19u].z, fma(_2890, cbModelParam._m0[19u].y, _2889 * cbModelParam._m0[19u].x))), _2180);
            frontier_phi_25_49_ladder = _3090.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3090.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3090.x * cbModelParam._m0[1u].z;
        }
        _2269 = frontier_phi_25_49_ladder_2;
        _2271 = frontier_phi_25_49_ladder_1;
        _2273 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2253 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1254, _1255, _1256), _2180);
        _2269 = _2253.x * cbModelParam._m0[1u].z;
        _2271 = _2253.y * cbModelParam._m0[1u].z;
        _2273 = _2253.z * cbModelParam._m0[1u].z;
    }
    float _2285 = ((((1.0 - _1275) * ((_1262 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1275 * _1262)) * _1246;
    float _2286 = _2285 * ((cbModelParam._m0[1u].w * (_2269 - _2171)) + _2171);
    float _2287 = _2285 * ((cbModelParam._m0[1u].w * (_2271 - _2173)) + _2173);
    float _2288 = _2285 * ((cbModelParam._m0[1u].w * (_2273 - _2175)) + _2175);
    float _2291 = fma(_2288, cbSceneParam._m0[89u].z, fma(_2287, cbSceneParam._m0[89u].y, _2286 * cbSceneParam._m0[89u].x));
    float _2294 = fma(_2288, cbSceneParam._m0[90u].z, fma(_2287, cbSceneParam._m0[90u].y, _2286 * cbSceneParam._m0[90u].x));
    float _2297 = fma(_2288, cbSceneParam._m0[91u].z, fma(_2287, cbSceneParam._m0[91u].y, _2286 * cbSceneParam._m0[91u].x));
    vec4 _2305 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1183, _1184));
    float _2307 = _2305.w;
    float _2319 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2307);
    float _2320 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2307);
    float _2321 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2307);
    uvec4 _2325 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2327 = _2325.x * 14u;
    uint _2328 = _2327 + 13u;
    float _2335 = _1246 + (-1.0);
    float _2340 = (cbLight._m0[_2328].x * _2335) + 1.0;
    float _2341 = (cbLight._m0[_2328].y * _2335) + 1.0;
    float _2342 = (cbLight._m0[_2328].z * _2335) + 1.0;
    float _2343 = (cbLight._m0[_2328].w * _2335) + 1.0;
    uint _2344 = _2327 + 5u;
    float _2350 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
    uint _2354 = _2327 + 4u;
    float _2363 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2367 = _2327 | 1u;
    float _2378 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_1084, _1085, _1086));
    float _2381 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_1084, _1085, _1086));
    float _4656 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _4667 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2386 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2388 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2395 = ((cbLight._m0[_2344].x * _2350) * _2388) + (((cbLight._m0[_2354].x * _2319) * _2363) * _2386);
    float _2396 = ((_2350 * cbLight._m0[_2344].y) * _2388) + (((cbLight._m0[_2354].y * _2320) * _2363) * _2386);
    float _2397 = ((_2350 * cbLight._m0[_2344].z) * _2388) + (((cbLight._m0[_2354].z * _2321) * _2363) * _2386);
    uvec4 _2401 = floatBitsToUint(cbLight._m0[_2327 + 12u]);
    bool _2403 = _2401.x == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2403)
    {
        _2414 = _2395;
        _2416 = _2396;
        _2418 = _2397;
    }
    else
    {
        uint _2422 = _2327 + 6u;
        float _2438 = (dot(vec3(cbLight._m0[_2327 + 2u].xyz), vec3(_1084, _1085, _1086)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4678 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2441 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2414 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2395;
        _2416 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2396;
        _2418 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2397;
    }
    bool _2421 = _2401.y == 0u;
    float _2459;
    float _2461;
    float _2463;
    if (_2421)
    {
        _2459 = _2414;
        _2461 = _2416;
        _2463 = _2418;
    }
    else
    {
        uint _2621 = _2327 + 7u;
        float _2637 = (dot(vec3(cbLight._m0[_2327 + 3u].xyz), vec3(_1084, _1085, _1086)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4694 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2640 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2459 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2414;
        _2461 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2416;
        _2463 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2418;
    }
    uint _2466 = _2327 + 8u;
    float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _1087) * 0.949999988079071044921875);
    float _2480 = _2479 * _2479;
    float _2481 = cbLight._m0[_2327].x + _1163;
    float _2482 = cbLight._m0[_2327].y + _1164;
    float _2483 = cbLight._m0[_2327].z + _1165;
    float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
    float _2488 = _2487 * _2481;
    float _2489 = _2487 * _2482;
    float _2490 = _2487 * _2483;
    float _2491 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2327].xyz));
    float _4710 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _2495 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2496 = dot(vec3(_1084, _1085, _1086), vec3(_2488, _2489, _2490));
    float _4732 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2500 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2488, _2489, _2490));
    float _4743 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = _2480 * _2480;
    float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
    float _2519 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2520 = 1.0 - _2480;
    float _2531 = (0.5 / (((_2495 * ((_2494 * _2520) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2520) + _2480) * _2494))) * _2494;
    float _4754 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
    uint _2547 = _2327 + 9u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _1087) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2367].x + _1163;
    float _2561 = cbLight._m0[_2367].y + _1164;
    float _2562 = cbLight._m0[_2367].z + _1165;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2367].xyz));
    float _4765 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2574 = dot(vec3(_1084, _1085, _1086), vec3(_2567, _2568, _2569));
    float _4776 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2567, _2568, _2569));
    float _4787 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2559 * _2559;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2595 = (exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2596 = 1.0 - _2559;
    float _2606 = (0.5 / (((_2495 * ((_2573 * _2596) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2596) + _2559) * _2573))) * _2573;
    float _4798 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2608 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    float _2618 = (((_2595 * cbLight._m0[_2547].x) * _2608) * _2350) + ((((cbLight._m0[_2466].x * _2319) * _2519) * _2533) * _2363);
    float _2619 = (((_2595 * cbLight._m0[_2547].y) * _2608) * _2350) + ((((cbLight._m0[_2466].y * _2320) * _2519) * _2533) * _2363);
    float _2620 = (((_2595 * cbLight._m0[_2547].z) * _2608) * _2350) + ((((cbLight._m0[_2466].z * _2321) * _2519) * _2533) * _2363);
    float _2682;
    float _2684;
    float _2686;
    if (_2403)
    {
        _2682 = _2618;
        _2684 = _2619;
        _2686 = _2620;
    }
    else
    {
        uint _2688 = _2327 + 2u;
        uint _2692 = _2327 + 10u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _1087) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1163;
        float _2709 = cbLight._m0[_2688].y + _1164;
        float _2710 = cbLight._m0[_2688].z + _1165;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2688].xyz));
        float _4809 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2722 = dot(vec3(_1084, _1085, _1086), vec3(_2715, _2716, _2717));
        float _4820 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4831 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2495 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2744) + _2707) * _2721))) * _2721;
        float _4842 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2682 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2618;
        _2684 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2619;
        _2686 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2620;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2421)
    {
        _2792 = _2682;
        _2794 = _2684;
        _2796 = _2686;
    }
    else
    {
        uint _2803 = _2327 + 3u;
        uint _2807 = _2327 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _1087) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _1163;
        float _2824 = cbLight._m0[_2803].y + _1164;
        float _2825 = cbLight._m0[_2803].z + _1165;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_1084, _1085, _1086), vec3(cbLight._m0[_2803].xyz));
        float _4858 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2837 = dot(vec3(_1084, _1085, _1086), vec3(_2830, _2831, _2832));
        float _4869 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4880 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2859 = 1.0 - _2822;
        float _2869 = (0.5 / (((_2495 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2859) + _2822) * _2836))) * _2836;
        float _4891 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2792 = (((_2858 * cbLight._m0[_2807].x) * _2871) * _2872) + _2682;
        _2794 = (((_2858 * cbLight._m0[_2807].y) * _2871) * _2872) + _2684;
        _2796 = (((_2858 * cbLight._m0[_2807].z) * _2871) * _2872) + _2686;
    }
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_2325.y == 0u)
    {
        float _2947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2947;
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2947;
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2947;
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.x;
        uint _2974 = uint((float(_2962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1184) / _2963))) + floor(float(uint(cbSceneParam._m0[85u].x * _1183) / _2963)));
        float _2984 = (log2(_2950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2985 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        uint _2988 = uint(isnan(14.0) ? _2985 : (isnan(_2985) ? 14.0 : min(_2985, 14.0)));
        uvec4 _2993 = texelFetch(g_lightClusterGridBuffer, int(((_2988 << 2u) + (_2974 << 6u)) >> 2u));
        uint _2994 = _2993.x;
        uint _2995 = _2962.z;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((((1u << ((_2995 >> 4u) & 15u)) + 4294967295u) & _2994) == 0u) || ((_2995 & 240u) == 0u))
        {
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
        }
        else
        {
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            uint _3253 = 0u;
            uint _3262;
            bool _3263;
            for (;;)
            {
                _3262 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                _3263 = _3262 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3263)
                {
                    frontier_phi_66_pred = _3247;
                    frontier_phi_66_pred_1 = _3252;
                    frontier_phi_66_pred_2 = _3251;
                    frontier_phi_66_pred_3 = _3250;
                    frontier_phi_66_pred_4 = _3249;
                    frontier_phi_66_pred_5 = _3248;
                }
                else
                {
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    uint _3398;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3262;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    for (;;)
                    {
                        uint _3402 = uint(findLSB(_3398)) + (_3253 << 5u);
                        uint _3399 = (_3398 + 4294967295u) & _3398;
                        uint _3404 = _3402 * 48u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3424 = (_3402 * 48u) + 4u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3443 = (_3402 * 48u) + 8u;
                        vec3 _3454 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x));
                        float _3458 = _3418.x - _2948;
                        float _3459 = _3418.y - _2949;
                        float _3460 = _3418.z - _2950;
                        float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                        float _3464 = inversesqrt(_3461);
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3468 = dot(vec3(_1202, _1205, _1208), vec3(_3465, _3466, _3467));
                        float _3473 = 1.0 - (_3461 * _3418.w);
                        float _4917 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3475 = sqrt(_3461) * _3437.w;
                        float _3478 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                        float _3479 = _3478 * _3478;
                        float _3482 = ((1.0 - _3479) * _3468) + _3479;
                        float _3485 = _3475 * _3475;
                        float _3489 = ((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3474) / ((_3485 * 0.699999988079071044921875) + 1.0);
                        float _3493 = (-0.0) - _2948;
                        float _3494 = (-0.0) - _2949;
                        float _3495 = (-0.0) - _2950;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3500 = _3499 * _3493;
                        float _3501 = _3499 * _3494;
                        float _3502 = _3499 * _3495;
                        float _3510 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                        float _3511 = 1.0 - _1262;
                        float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                        float _3519 = _3518 * _3518;
                        float _3520 = _3519 * _3519;
                        float _3521 = _3500 + _3465;
                        float _3522 = _3501 + _3466;
                        float _3523 = _3502 + _3467;
                        float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                        float _3531 = dot(vec3(_1202, _1205, _1208), vec3(_3500, _3501, _3502));
                        float _4933 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3535 = dot(vec3(_1202, _1205, _1208), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                        float _4944 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                        float _3543 = _3478 * _3519;
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3468) + _3544;
                        float _4955 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3549 = 1.0 - _3519;
                        float _3559 = (0.5 / (((_3548 * ((_3534 * _3549) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3519) * _3534))) * _3548;
                        float _4966 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3570 = (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3542 * _3542) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125))) * _3474;
                        _3322 = (_3489 * _3437.x) + _3395;
                        _3323 = (_3489 * _3437.y) + _3396;
                        _3324 = (_3489 * _3437.z) + _3397;
                        _3319 = (_3570 * _3454.x) + _3392;
                        _3320 = (_3570 * _3454.y) + _3393;
                        _3321 = (_3570 * _3454.z) + _3394;
                        if (_3399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3399;
                        }
                    }
                    frontier_phi_66_pred = _3319;
                    frontier_phi_66_pred_1 = _3324;
                    frontier_phi_66_pred_2 = _3323;
                    frontier_phi_66_pred_3 = _3322;
                    frontier_phi_66_pred_4 = _3321;
                    frontier_phi_66_pred_5 = _3320;
                }
                _3096 = frontier_phi_66_pred;
                _3106 = frontier_phi_66_pred_1;
                _3104 = frontier_phi_66_pred_2;
                _3102 = frontier_phi_66_pred_3;
                _3100 = frontier_phi_66_pred_4;
                _3098 = frontier_phi_66_pred_5;
                uint _3254 = _3253 + 1u;
                if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3247 = _3096;
                    _3248 = _3098;
                    _3249 = _3100;
                    _3250 = _3102;
                    _3251 = _3104;
                    _3252 = _3106;
                    _3253 = _3254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
        }
        uvec4 _3109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3110 = _3109.z;
        uint _3112 = (_3110 >> 8u) & 15u;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((4294967295u << _3112) & _2994) == 0u)
        {
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
            _3223 = _3103;
            _3225 = _3105;
        }
        else
        {
            float _3240 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
            float _3241 = _3240 * _2948;
            float _3242 = _3240 * _2949;
            float _3243 = _3240 * _2950;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3112 < ((_3110 >> 12u) & 15u))
            {
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3375 = _3095;
                float _3376 = _3097;
                float _3377 = _3099;
                float _3378 = _3101;
                float _3379 = _3103;
                float _3380 = _3105;
                uint _3381 = _3112;
                uint _3390;
                bool _3391;
                for (;;)
                {
                    _3390 = texelFetch(g_lightClassification, int((((_2988 << 5u) + (_2974 << 9u)) + (_3381 << 2u)) >> 2u)).x;
                    _3391 = _3390 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3391)
                    {
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    else
                    {
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3597 = _3375;
                        float _3598 = _3376;
                        float _3599 = _3377;
                        float _3600 = _3378;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        uint _3603 = _3390;
                        uint _3604;
                        vec4 _3629;
                        float _3630;
                        vec4 _3645;
                        vec3 _3657;
                        vec4 _3672;
                        vec4 _3687;
                        float _3733;
                        bool _3734;
                        for (;;)
                        {
                            uint _3614 = ((_3381 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3603));
                            _3604 = (_3603 + 4294967295u) & _3603;
                            uint _3616 = _3614 * 40u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3630 = _3629.w;
                            uint _3632 = (_3614 * 40u) + 4u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3614 * 40u) + 8u;
                            _3657 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x));
                            uint _3659 = (_3614 * 40u) + 16u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3614 * 40u) + 20u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3614 * 40u) + 24u;
                            vec4 _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3708 = (_3614 * 40u) + 28u;
                            vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3733 = fma(_2950, _3721.z, fma(_2949, _3721.y, _3721.x * _2948)) + _3721.w;
                            _3734 = !((fma(_2950, _3702.z, fma(_2949, _3702.y, _3702.x * _2948)) + _3702.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3734)
                            {
                                float _3761 = _3629.x - _2948;
                                float _3762 = _3629.y - _2949;
                                float _3763 = _3629.z - _2950;
                                float _3764 = dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763));
                                float _3767 = inversesqrt(_3764);
                                float _3768 = _3767 * _3761;
                                float _3769 = _3767 * _3762;
                                float _3770 = _3767 * _3763;
                                float _3774 = 1.0 - (_3764 / (_3630 * _3630));
                                float _4977 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3779 = sqrt(_3764) * _3645.w;
                                float _3781 = 1.39999997615814208984375 / (_3779 + 1.39999997615814208984375);
                                float _3782 = _3781 * _3781;
                                float _3785 = ((1.0 - _3782) * dot(vec3(_3768, _3769, _3770), vec3(_1202, _1205, _1208))) + _3782;
                                float _3788 = _3779 * _3779;
                                float _3792 = (fma(_2950, _3672.z, fma(_2949, _3672.y, _3672.x * _2948)) + _3672.w) / _3733;
                                float _3793 = (fma(_2950, _3687.z, fma(_2949, _3687.y, _3687.x * _2948)) + _3687.w) / _3733;
                                float _3797 = 1.0 - dot(vec2(_3792, _3793), vec2(_3792, _3793));
                                float _4993 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3799 = _3798 * (((isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0))) * _3775) / ((_3788 * 0.699999988079071044921875) + 1.0));
                                float _3811 = exp2(log2(1.0 / ((_3788 * 3.5) + 5.0)) * 0.25);
                                float _3812 = 1.0 - _1262;
                                float _3819 = sqrt(1.0 - ((1.0 - (_3812 * _3812)) * (1.0 - (_3811 * _3811))));
                                float _3820 = _3819 * _3819;
                                float _3821 = _3820 * _3820;
                                float _3822 = _3768 - _3241;
                                float _3823 = _3769 - _3242;
                                float _3824 = _3770 - _3243;
                                float _3828 = inversesqrt(dot(vec3(_3822, _3823, _3824), vec3(_3822, _3823, _3824)));
                                float _3832 = dot(vec3(_1202, _1205, _1208), vec3((-0.0) - _3241, (-0.0) - _3242, (-0.0) - _3243));
                                float _5004 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3836 = dot(vec3(_1202, _1205, _1208), vec3(_3828 * _3822, _3828 * _3823, _3828 * _3824));
                                float _5015 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3843 = ((_3839 * _3839) * (_3821 + (-1.0))) + 1.0;
                                float _3844 = _3781 * _3820;
                                float _3845 = _3844 * _3844;
                                float _3851 = ((1.0 - _3845) * dot(vec3(_1202, _1205, _1208), vec3(_3768, _3769, _3770))) + _3845;
                                float _5026 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3853 = 1.0 - _3820;
                                float _3863 = (0.5 / (((_3852 * ((_3835 * _3853) + _3820)) + 9.9999999392252902907785028219223e-09) + (((_3852 * _3853) + _3820) * _3835))) * _3852;
                                float _5037 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3873 = (_3798 * _3775) * (((_3821 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3843 * _3843) * ((_3788 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3799 * _3645.y;
                                frontier_phi_83_pred_1 = _3799 * _3645.x;
                                frontier_phi_83_pred_2 = _3873 * _3657.z;
                                frontier_phi_83_pred_3 = _3873 * _3657.y;
                                frontier_phi_83_pred_4 = _3873 * _3657.x;
                                frontier_phi_83_pred_5 = _3799 * _3645.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3881 = frontier_phi_83_pred;
                            _3880 = frontier_phi_83_pred_1;
                            _3879 = frontier_phi_83_pred_2;
                            _3878 = frontier_phi_83_pred_3;
                            _3877 = frontier_phi_83_pred_4;
                            _3882 = frontier_phi_83_pred_5;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            if (_3604 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3604;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3589;
                        frontier_phi_77_pred_1 = _3588;
                        frontier_phi_77_pred_2 = _3587;
                        frontier_phi_77_pred_3 = _3586;
                        frontier_phi_77_pred_4 = _3585;
                        frontier_phi_77_pred_5 = _3584;
                    }
                    _3226 = frontier_phi_77_pred;
                    _3224 = frontier_phi_77_pred_1;
                    _3222 = frontier_phi_77_pred_2;
                    _3220 = frontier_phi_77_pred_3;
                    _3218 = frontier_phi_77_pred_4;
                    _3216 = frontier_phi_77_pred_5;
                    uint _3382 = _3381 + 1u;
                    if (_3382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3375 = _3216;
                        _3376 = _3218;
                        _3377 = _3220;
                        _3378 = _3222;
                        _3379 = _3224;
                        _3380 = _3226;
                        _3381 = _3382;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3220;
                frontier_phi_58_59_ladder_1 = _3226;
                frontier_phi_58_59_ladder_2 = _3224;
                frontier_phi_58_59_ladder_3 = _3222;
                frontier_phi_58_59_ladder_4 = _3218;
                frontier_phi_58_59_ladder_5 = _3216;
            }
            else
            {
                frontier_phi_58_59_ladder = _3099;
                frontier_phi_58_59_ladder_1 = _3105;
                frontier_phi_58_59_ladder_2 = _3103;
                frontier_phi_58_59_ladder_3 = _3101;
                frontier_phi_58_59_ladder_4 = _3097;
                frontier_phi_58_59_ladder_5 = _3095;
            }
            _3215 = frontier_phi_58_59_ladder_5;
            _3217 = frontier_phi_58_59_ladder_4;
            _3219 = frontier_phi_58_59_ladder;
            _3221 = frontier_phi_58_59_ladder_3;
            _3223 = frontier_phi_58_59_ladder_2;
            _3225 = frontier_phi_58_59_ladder_1;
        }
        float _3230 = isnan(1.0) ? _1246 : (isnan(_1246) ? 1.0 : min(_1246, 1.0));
        _3007 = (_3230 * _3221) + _2459;
        _3009 = (_3230 * _3223) + _2461;
        _3011 = (_3230 * _3225) + _2463;
        _3013 = ((_3215 * 0.039999999105930328369140625) * _3230) + _2792;
        _3015 = ((_3217 * 0.039999999105930328369140625) * _3230) + _2794;
        _3017 = ((_3219 * 0.039999999105930328369140625) * _3230) + _2796;
    }
    else
    {
        _3007 = _2459;
        _3009 = _2461;
        _3011 = _2463;
        _3013 = _2792;
        _3015 = _2794;
        _3017 = _2796;
    }
    float _5053 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _5064 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _5075 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _3034 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3007 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1246))) + ((_3013 + ((isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0))) * _2080)) * cbPerFrame._m0[3u].x);
    float _3035 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3009 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1246))) + ((_3015 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _2080)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3011 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1246))) + ((_3017 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2080)) * cbPerFrame._m0[3u].x);
    uint _3037 = _293 + 6u;
    float _3045 = _1183 / cbSceneParam._m0[86u].x;
    float _3046 = _1184 / cbSceneParam._m0[86u].y;
    vec4 _3060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, (log2((isnan(cbSceneParam._m0[77u].w) ? _1105 : (isnan(_1105) ? cbSceneParam._m0[77u].w : min(_1105, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3062 = _3060.x;
    float _3063 = _3060.y;
    float _3064 = _3060.z;
    float _3065 = _3060.w;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_1105 > cbSceneParam._m0[78u].w)
    {
        float _3120 = isnan(_1105) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1105 : min(cbSceneParam._m0[80u].w, _1105));
        float _3121 = _3120 / _1105;
        float _3132 = _3121 * _1156;
        float _3133 = _1157 * _3121;
        float _3134 = (-0.0) - _3133;
        float _3135 = _3121 * _1158;
        float _3137 = (cbSceneParam._m0[77u].w * _3134) / _3120;
        float _3138 = _3137 + cbSceneParam._m0[79u].w;
        float _3139 = cbSceneParam._m0[79u].w - _3133;
        float _3145 = sqrt(((_3132 * _3132) + (_3133 * _3133)) + (_3135 * _3135));
        float _3148 = (1.0 - (cbSceneParam._m0[77u].w / _3120)) * _3145;
        float _3153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3155 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3332;
        if (abs((_3134 - _3137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3332 = ((((_3138 > 0.0) ? exp2(_3153 * _3138) : (2.0 - exp2(_3155 * _3138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3148;
        }
        else
        {
            float _3276 = 1.0 / cbSceneParam._m0[80u].x;
            float _3277 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : max(_3138, _3139));
            float _3278 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : min(_3138, _3139));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            _3332 = ((abs(_3145 / _3134) * cbSceneParam._m0[80u].y) * ((((_3287 - _3288) * 2.0) - ((exp2(_3153 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0)))) - exp2(_3153 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))))) * _3276)) - ((exp2(_3155 * _3287) - exp2(_3155 * _3288)) * _3276))) + (_3148 * cbSceneParam._m0[80u].z);
        }
        vec4 _3334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, 1.0), 0.0);
        float _3343 = exp2((_3332 * (-1.44269502162933349609375)) * (1.0 - _3334.w));
        float _3344 = log2(_3343);
        float _3360 = log2(_3065);
        _3157 = (exp2(_3360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].x)) * _3334.x) / cbSceneParam._m0[78u].x)) + _3062;
        _3159 = (exp2(_3360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].y)) * _3334.y) / cbSceneParam._m0[78u].y)) + _3063;
        _3161 = (exp2(_3360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].z)) * _3334.z) / cbSceneParam._m0[78u].z)) + _3064;
        _3163 = _3343 * _3065;
    }
    else
    {
        _3157 = _3062;
        _3159 = _3063;
        _3161 = _3064;
        _3163 = _3065;
    }
    bool _3370;
    vec4 _3173;
    vec4 _3195;
    float _3197;
    float _3201;
    float _3202;
    float _3203;
    float _3204;
    bool _3214;
    for (;;)
    {
        _3173 = cbMatDynParam._m0[0u];
        float _3175 = roundEven(_3173.y);
        bool _3176 = _3175 == 3.0;
        float _3177 = log2(_3163);
        float _3184 = exp2(_3177 * cbSceneParam._m0[78u].x) * _3034;
        float _3185 = exp2(_3177 * cbSceneParam._m0[78u].y) * _3035;
        float _3186 = exp2(_3177 * cbSceneParam._m0[78u].z) * _3036;
        float _3193 = _1172 + (-0.5);
        _3195 = cbMtdParam._m0[1u];
        _3197 = _3195.y * _3193;
        float _3200 = (_3175 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3201 = _3200 * (_3176 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3157)));
        _3202 = _3200 * (_3176 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3159)));
        _3203 = _3200 * (_3176 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3161)));
        _3204 = _3193 * 0.999000012874603271484375;
        _3214 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3214)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3204) < 0.5)
            {
                _3370 = true;
                break;
            }
        }
        uint _3311 = _1221 + uint(_3173.w);
        if ((cbInstanceData._m0[_3311].w < 1.0) && ((cbInstanceData._m0[_3311].w + _3204) < 0.5))
        {
            _3370 = true;
            break;
        }
        if ((_3197 + 1.0) < _3195.x)
        {
            _3370 = true;
            break;
        }
        _3370 = false;
        break;
    }
    float _3575;
    if (_3370)
    {
        discard_state = true;
        _3575 = 0.0;
    }
    else
    {
        _3575 = cbInstanceData._m0[_3037].w;
    }
    SV_Target.x = _3201;
    SV_Target.y = _3202;
    SV_Target.z = _3203;
    SV_Target.w = _3575;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3037].w;
    discard_exit();
}


