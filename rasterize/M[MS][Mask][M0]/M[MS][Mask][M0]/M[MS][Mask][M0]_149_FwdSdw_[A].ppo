#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1679;
float _4317;
float _4318;
float _4319;
float _4320;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4329 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4340 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4351 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _464 = _462.x;
    float _476 = dot(vec4(_464, _462.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _493 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_464 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4362 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _501 = (_494 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _502 = (_494 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _503 = (_494 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _566 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4373 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _574 = (_567 * ((_520.x * cbMtdParam._m0[13u].x) - _501)) + _501;
    float _575 = (_567 * ((_520.y * cbMtdParam._m0[13u].y) - _502)) + _502;
    float _576 = (_567 * ((_520.z * cbMtdParam._m0[13u].z) - _503)) + _503;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[24u].z) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4384 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _646 = (_353.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _574)) + _574);
    float _647 = (_353.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _575)) + _575);
    float _648 = (_353.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _576)) + _576);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _751 = _749.x;
    float _752 = _749.y;
    float _753 = _749.z;
    float _760 = ((_732.x - _751) * _494) + _751;
    float _761 = ((_732.y - _752) * _494) + _752;
    float _762 = ((_732.z - _753) * _494) + _753;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _785 = ((_774.x - _760) * _567) + _760;
    float _786 = ((_774.y - _761) * _567) + _761;
    float _787 = ((_774.z - _762) * _567) + _762;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _812 = ((_799.z - _787) * _636) + _787;
    float _815 = ((((_799.x - _785) * _636) + _785) * 2.0) + (-1.0);
    float _816 = ((((_799.y - _786) * _636) + _786) * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4395 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _822 = sqrt(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))));
    vec4 _840 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _852 = (_815 + ((((_707.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_840.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _853 = (_816 + ((((_707.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_840.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _856 = fma(_822, _266, fma(_853, _273, _852 * _259));
    float _859 = fma(_822, _267, fma(_853, _274, _852 * _260));
    float _862 = fma(_822, _268, fma(_853, _275, _852 * _261));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    vec4 _893 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _895 = _893.x;
    float _896 = 1.0 - _895;
    float _902 = (cbMtdParam._m0[19u].x + dot(vec4(_866 * _856, _866 * _859, _866 * _862, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_895 - _896) * cbMtdParam._m0[24u].w) + _896) * cbMtdParam._m0[21u].z);
    float _4406 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _903 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _905 = (-0.0) - cbMtdParam._m0[24u].x;
    float _907 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
    float _915 = _903 - ((_903 * TEXCOORD_8.x) * _908);
    float _916 = _903 - ((_903 * TEXCOORD_8.y) * _908);
    float _917 = _903 - ((_903 * TEXCOORD_8.z) * _908);
    float _924 = (_915 * ((_688.x * cbMtdParam._m0[18u].x) - _666)) + _666;
    float _925 = (_916 * ((_688.y * cbMtdParam._m0[18u].y) - _668)) + _668;
    float _926 = (_917 * ((_688.z * cbMtdParam._m0[18u].z) - _670)) + _670;
    float _941 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _942 = _941 * TEXCOORD.z;
    float _943 = _941 * TEXCOORD.w;
    vec4 _955 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _942) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _943) + cbTextureTilingScale._m0[19u].w));
    float _957 = _955.x;
    float _958 = 1.0 - _957;
    float _986 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_957 - _958) * cbMtdParam._m0[24u].y) + _958) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4427 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _987 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _995 = ((((cbMtdParam._m0[10u].x - _924) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _987) + _924;
    float _996 = ((((cbMtdParam._m0[10u].y - _925) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _987) + _925;
    float _997 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _926)) * _987) + _926;
    float _1002 = (((_707.z - _812) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _812;
    float _1006 = ((_840.z - _1002) * cbMtdParam._m0[19u].w) + _1002;
    vec4 _1022 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _1029 = (_1022.x * 2.0) + (-1.0);
    float _1030 = (_1022.y * 2.0) + (-1.0);
    float _1031 = dot(vec2(_1029, _1030), vec2(_1029, _1030));
    float _4438 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1039 = ((_1022.z - _1006) * _915) + _1006;
    float _1042 = ((cbMtdParam._m0[23u].y - _1039) * _987) + _1039;
    vec4 _1063 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _942) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _943) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1069 = (_1063.x * 2.0) + (-1.0);
    float _1070 = (_1063.y * 2.0) + (-1.0);
    float _1071 = dot(vec2(_1069, _1070), vec2(_1069, _1070));
    float _4449 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1086 = ((sqrt(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) - _822) * _917) + _822;
    float _1089 = (((_1029 - _852) * _915) + _852) + (cbMtdParam._m0[21u].x * _852);
    float _1090 = (((_1030 - _853) * _916) + _853) + (cbMtdParam._m0[21u].x * _853);
    float _1101 = (((_1069 - _1089) + (_1089 * cbMtdParam._m0[22u].z)) * _987) + _1089;
    float _1102 = (((_1070 - _1090) + (_1090 * cbMtdParam._m0[22u].z)) * _987) + _1090;
    float _1103 = (_987 * (sqrt(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) - _1086)) + _1086;
    float _1105 = cbMtdParam._m0[22u].x + _840.w;
    float _1108 = fma(_1103, _266, fma(_1102, _273, _1101 * _259));
    float _1111 = fma(_1103, _267, fma(_1102, _274, _1101 * _260));
    float _1114 = fma(_1103, _268, fma(_1102, _275, _1101 * _261));
    float _1118 = inversesqrt(dot(vec3(_1108, _1111, _1114), vec3(_1108, _1111, _1114)));
    float _1119 = _1118 * _1108;
    float _1120 = _1118 * _1111;
    float _1121 = _1118 * _1114;
    float _4460 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1122 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4482 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4493 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4504 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1140 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1190 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1180);
    float _1191 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1180);
    float _1192 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1180);
    float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
    float _1197 = _1190 * _1196;
    float _1198 = _1191 * _1196;
    float _1199 = _1192 * _1196;
    vec4 _1204 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1206 = _1204.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1360 = sqrt(((_1190 * _1190) + (_1191 * _1191)) + (_1192 * _1192));
        float _1366 = (cbMatDynParam._m0[5u].x * _1360) + cbMatDynParam._m0[5u].y;
        float _4515 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1371 = (cbMatDynParam._m0[5u].z * _1360) + cbMatDynParam._m0[5u].w;
        float _4526 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) - _1367)) + _1367) < ((_1206 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1217 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1218 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1236 = fma(_1121, cbSceneParam._m0[5u].z, fma(_1120, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1119));
    float _1239 = fma(_1121, cbSceneParam._m0[6u].z, fma(_1120, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1119));
    float _1242 = fma(_1121, cbSceneParam._m0[7u].z, fma(_1120, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1119));
    uint _1255 = _297 + 9u;
    uint _1256 = _1255 + uint(cbMatDynParam._m0[0u].w);
    float _1262 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * cbInstanceData._m0[_1256].x;
    float _1263 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * cbInstanceData._m0[_1256].y;
    float _1264 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * cbInstanceData._m0[_1256].z;
    float _4537 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1265 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _4548 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1266 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _4559 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _1267 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    vec4 _1276 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1217, cbSceneParam._m0[86u].y * _1218));
    float _1280 = ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * TEXCOORD_5.w) * _1276.x;
    float _1281 = dot(vec3(_1119, _1120, _1121), vec3(_1197, _1198, _1199));
    float _1284 = _1281 * 2.0;
    float _1288 = (_1284 * _1119) - _1197;
    float _1289 = (_1284 * _1120) - _1198;
    float _1290 = (_1284 * _1121) - _1199;
    float _1294 = abs(dot(vec3(_1197, _1198, _1199), vec3(_1119, _1120, _1121)));
    float _4570 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _1296 = sqrt(_1122);
    float _1309 = exp2((_1296 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1296 * 3.0));
    float _1341 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1345 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1349 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1678;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1403 = fma(_1349, cbModelParam._m0[26u].z, fma(_1345, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341));
        float _1407 = fma(_1349, cbModelParam._m0[27u].z, fma(_1345, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341));
        float _1411 = fma(_1349, cbModelParam._m0[28u].z, fma(_1345, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341));
        float _1436 = _1341 + _1119;
        float _1437 = _1345 + _1120;
        float _1438 = _1349 + _1121;
        float _1448 = fma(_1438, cbModelParam._m0[26u].z, fma(_1437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1436)) - _1403;
        float _1449 = fma(_1438, cbModelParam._m0[27u].z, fma(_1437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1436)) - _1407;
        float _1450 = fma(_1438, cbModelParam._m0[28u].z, fma(_1437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1436)) - _1411;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1403 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1407 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[34u].z) + ((((((_1411 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1506 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1472.x + (-0.5));
        float _1508 = _1506 * (_1472.y + (-0.5));
        float _1509 = _1506 * (_1472.z + (-0.5));
        float _1516 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1479.x + (-0.5));
        float _1518 = _1516 * (_1479.y + (-0.5));
        float _1519 = _1516 * (_1479.z + (-0.5));
        float _1526 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1486.x + (-0.5));
        float _1528 = _1526 * (_1486.y + (-0.5));
        float _1529 = _1526 * (_1486.z + (-0.5));
        float _1536 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1493.x + (-0.5));
        float _1538 = _1536 * (_1493.y + (-0.5));
        float _1539 = _1536 * (_1493.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1560 = (dot(vec3(_1119, _1120, _1121), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4596 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1570 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4607 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4618 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_1572 + 1.0))) + _1577) * _1540;
        float _1587 = _1508 * 0.5;
        float _1588 = _1518 * 0.5;
        float _1589 = _1528 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_1119, _1120, _1121), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4629 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4640 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4651 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_1614 + 1.0))) + _1619) * _1541;
        float _1629 = _1509 * 0.5;
        float _1630 = _1519 * 0.5;
        float _1631 = _1529 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_1119, _1120, _1121), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4662 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4673 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4684 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_1656 + 1.0))) + _1661) * _1542;
        _1678 = _1509;
        _1680 = _1508;
        _1681 = _1507;
        _1682 = _1519;
        _1683 = _1518;
        _1684 = _1517;
        _1685 = _1529;
        _1686 = _1528;
        _1687 = _1527;
        _1688 = _1542;
        _1689 = _1541;
        _1690 = _1540;
        _1691 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1692 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1693 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1679;
        _1680 = _1679;
        _1681 = _1679;
        _1682 = _1679;
        _1683 = _1679;
        _1684 = _1679;
        _1685 = _1679;
        _1686 = _1679;
        _1687 = _1679;
        _1688 = _1679;
        _1689 = _1679;
        _1690 = _1679;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    float _1993;
    float _1994;
    float _1995;
    float _1996;
    float _1997;
    float _1998;
    float _1999;
    float _2000;
    float _2001;
    float _2002;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1719 = fma(_1349, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341));
        float _1723 = fma(_1349, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341));
        float _1727 = fma(_1349, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341));
        float _1750 = _1341 + _1119;
        float _1751 = _1345 + _1120;
        float _1752 = _1349 + _1121;
        float _1762 = fma(_1752, cbModelParam._m0[30u].z, fma(_1751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1750)) - _1719;
        float _1763 = fma(_1752, cbModelParam._m0[31u].z, fma(_1751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1750)) - _1723;
        float _1764 = fma(_1752, cbModelParam._m0[32u].z, fma(_1751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1750)) - _1727;
        float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
        float _1781 = ((_1768 * _1762) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1719 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1782 = ((_1768 * _1763) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1723 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1783 = ((_1768 * _1764) / cbModelParam._m0[35u].z) + ((((((_1727 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1785 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1781, _1782, _1783), 0.0);
        vec4 _1792 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1781, _1782, _1783), 0.0);
        vec4 _1799 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1781, _1782, _1783), 0.0);
        vec4 _1806 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1781, _1782, _1783), 0.0);
        float _1818 = exp2((_1785.w + (-0.5)) * 20.0) * 2.0;
        float _1819 = _1818 * (_1785.x + (-0.5));
        float _1820 = _1818 * (_1785.y + (-0.5));
        float _1821 = _1818 * (_1785.z + (-0.5));
        float _1828 = exp2((_1792.w + (-0.5)) * 20.0) * 2.0;
        float _1829 = _1828 * (_1792.x + (-0.5));
        float _1830 = _1828 * (_1792.y + (-0.5));
        float _1831 = _1828 * (_1792.z + (-0.5));
        float _1838 = exp2((_1799.w + (-0.5)) * 20.0) * 2.0;
        float _1839 = _1838 * (_1799.x + (-0.5));
        float _1840 = _1838 * (_1799.y + (-0.5));
        float _1841 = _1838 * (_1799.z + (-0.5));
        float _1848 = exp2((_1806.w + (-0.5)) * 20.0) * 2.0;
        float _1849 = _1848 * (_1806.x + (-0.5));
        float _1850 = _1848 * (_1806.y + (-0.5));
        float _1851 = _1848 * (_1806.z + (-0.5));
        float _1852 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1853 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1854 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1855 = _1819 * 0.5;
        float _1856 = _1829 * 0.5;
        float _1857 = _1839 * 0.5;
        float _1858 = dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857));
        float _1863 = (_1858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1858);
        float _1871 = (dot(vec3(_1119, _1120, _1121), vec3(_1863 * _1855, _1863 * _1856, _1863 * _1857)) + 1.0) * 0.5;
        float _4725 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857)) / (_1852 + 9.9999997473787516355514526367188e-06);
        float _4736 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _1882 = _1881 * 2.0;
        float _1886 = (1.0 - _1881) / (_1881 + 1.0);
        float _4747 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _1896 = ((((1.0 - _1887) * (_1882 + 2.0)) * exp2(log2(isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_1882 + 1.0))) + _1887) * _1852;
        float _1897 = _1820 * 0.5;
        float _1898 = _1830 * 0.5;
        float _1899 = _1840 * 0.5;
        float _1900 = dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899));
        float _1905 = (_1900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1900);
        float _1913 = (dot(vec3(_1119, _1120, _1121), vec3(_1905 * _1897, _1905 * _1898, _1905 * _1899)) + 1.0) * 0.5;
        float _4758 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1922 = sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899)) / (_1853 + 9.9999997473787516355514526367188e-06);
        float _4769 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _1924 = _1923 * 2.0;
        float _1928 = (1.0 - _1923) / (_1923 + 1.0);
        float _4780 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _1938 = ((((1.0 - _1929) * (_1924 + 2.0)) * exp2(log2(isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_1924 + 1.0))) + _1929) * _1853;
        float _1939 = _1821 * 0.5;
        float _1940 = _1831 * 0.5;
        float _1941 = _1841 * 0.5;
        float _1942 = dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941));
        float _1947 = (_1942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1942);
        float _1955 = (dot(vec3(_1119, _1120, _1121), vec3(_1947 * _1939, _1947 * _1940, _1947 * _1941)) + 1.0) * 0.5;
        float _4791 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941)) / (_1854 + 9.9999997473787516355514526367188e-06);
        float _4802 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _1966 = _1965 * 2.0;
        float _1970 = (1.0 - _1965) / (_1965 + 1.0);
        float _4813 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _1980 = ((((1.0 - _1971) * (_1966 + 2.0)) * exp2(log2(isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_1966 + 1.0))) + _1971) * _1854;
        _1988 = _1821;
        _1989 = _1820;
        _1990 = _1819;
        _1991 = _1831;
        _1992 = _1830;
        _1993 = _1829;
        _1994 = _1841;
        _1995 = _1840;
        _1996 = _1839;
        _1997 = _1854;
        _1998 = _1853;
        _1999 = _1852;
        _2000 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)));
        _2001 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)));
        _2002 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
    }
    else
    {
        _1988 = _1679;
        _1989 = _1679;
        _1990 = _1679;
        _1991 = _1679;
        _1992 = _1679;
        _1993 = _1679;
        _1994 = _1679;
        _1995 = _1679;
        _1996 = _1679;
        _1997 = _1679;
        _1998 = _1679;
        _1999 = _1679;
        _2000 = 0.0;
        _2001 = 0.0;
        _2002 = 0.0;
    }
    float _2012 = (cbModelParam._m0[1u].x * (_2000 - _1691)) + _1691;
    float _2013 = (cbModelParam._m0[1u].x * (_2001 - _1692)) + _1692;
    float _2014 = (cbModelParam._m0[1u].x * (_2002 - _1693)) + _1693;
    float _2035 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2012));
    float _2056 = _1288 * 0.5;
    float _2057 = _1289 * 0.5;
    float _2058 = _1290 * 0.5;
    float _2059 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1990, _1993, _1996, _1999));
    float _2062 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1989, _1992, _1995, _1998));
    float _2065 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1988, _1991, _1994, _1997));
    float _2099;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2072 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1678, _1682, _1685, _1688));
        float _2076 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1680, _1683, _1686, _1689));
        float _2080 = dot(vec4(_2056, _2057, _2058, 1.0), vec4(_1681, _1684, _1687, _1690));
        float _2087 = dot(vec4(cbModelParam._m0[39u]), vec4(_2056, _2057, _2058, 1.0));
        _2099 = dot(vec3(isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0)), isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)), isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2087) ? 0.0 : (isnan(0.0) ? _2087 : max(0.0, _2087))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2099 = 1.0;
    }
    float _2110;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2101 = dot(vec4(cbModelParam._m0[40u]), vec4(_2056, _2057, _2058, 1.0));
        _2110 = dot(vec3(isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)), isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)), isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2101) ? 0.0 : (isnan(0.0) ? _2101 : max(0.0, _2101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2110 = 1.0;
    }
    float _2114 = (_2110 * cbModelParam._m0[1u].x) + (_2099 * (1.0 - cbModelParam._m0[1u].x));
    float _2124 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1122);
    float _2125 = isnan(_2124) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2124 : min(cbModelParam._m0[25u].z, _2124));
    float _2205;
    float _2207;
    float _2209;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2172 = fma(_1349, cbModelParam._m0[13u].z, fma(_1345, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1341)) + cbModelParam._m0[13u].w;
        float _2176 = fma(_1349, cbModelParam._m0[14u].z, fma(_1345, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1341)) + cbModelParam._m0[14u].w;
        float _2180 = fma(_1349, cbModelParam._m0[15u].z, fma(_1345, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1341)) + cbModelParam._m0[15u].w;
        float _2183 = fma(_1290, cbModelParam._m0[13u].z, fma(_1289, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1288));
        float _2186 = fma(_1290, cbModelParam._m0[14u].z, fma(_1289, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1288));
        float _2189 = fma(_1290, cbModelParam._m0[15u].z, fma(_1289, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1288));
        float _2217;
        if (_2183 > 0.0)
        {
            _2217 = abs((1.0 - _2172) / _2183);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2172 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2217 = frontier_phi_17_15_ladder;
        }
        float _2386;
        if (_2186 > 0.0)
        {
            _2386 = abs((1.0 - _2176) / _2186);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2176 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2386 = frontier_phi_26_22_ladder;
        }
        float _2681;
        if (_2189 > 0.0)
        {
            _2681 = abs((1.0 - _2180) / _2189);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2189 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2180 + 1.0) / _2189);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2681 = frontier_phi_38_33_ladder;
        }
        float _2683 = isnan(_2386) ? _2217 : (isnan(_2217) ? _2386 : min(_2217, _2386));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _2183) + _2172;
        float _2689 = (_2684 * _2186) + _2176;
        float _2690 = (_2684 * _2189) + _2180;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2693 = (-1.0) - _2691;
        float _2695 = _2691 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2690 > _2695) || ((_2690 < _2693) || ((_2689 > _2695) || ((_2689 < _2693) || ((_2688 < _2693) || (_2688 > _2695))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2690, cbModelParam._m0[9u].z, fma(_2689, cbModelParam._m0[9u].y, _2688 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2690, cbModelParam._m0[10u].z, fma(_2689, cbModelParam._m0[10u].y, _2688 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2690, cbModelParam._m0[11u].z, fma(_2689, cbModelParam._m0[11u].y, _2688 * cbModelParam._m0[11u].x))), _2125);
            frontier_phi_16_38_ladder = _2835.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2835.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2835.x * cbModelParam._m0[1u].y;
        }
        _2205 = frontier_phi_16_38_ladder_2;
        _2207 = frontier_phi_16_38_ladder_1;
        _2209 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1288, _1289, _1290), _2125);
        _2205 = _2193.x * cbModelParam._m0[1u].y;
        _2207 = _2193.y * cbModelParam._m0[1u].y;
        _2209 = _2193.z * cbModelParam._m0[1u].y;
    }
    float _2213 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1122);
    float _2214 = isnan(_2213) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2213 : min(cbModelParam._m0[25u].w, _2213));
    float _2303;
    float _2305;
    float _2307;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2267 = fma(_1349, cbModelParam._m0[21u].z, fma(_1345, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1341)) + cbModelParam._m0[21u].w;
        float _2271 = fma(_1349, cbModelParam._m0[22u].z, fma(_1345, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1341)) + cbModelParam._m0[22u].w;
        float _2275 = fma(_1349, cbModelParam._m0[23u].z, fma(_1345, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1341)) + cbModelParam._m0[23u].w;
        float _2278 = fma(_1290, cbModelParam._m0[21u].z, fma(_1289, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1288));
        float _2281 = fma(_1290, cbModelParam._m0[22u].z, fma(_1289, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1288));
        float _2284 = fma(_1290, cbModelParam._m0[23u].z, fma(_1289, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1288));
        float _2391;
        if (_2278 > 0.0)
        {
            _2391 = abs((1.0 - _2267) / _2278);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2278 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2267 + 1.0) / _2278);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2391 = frontier_phi_28_24_ladder;
        }
        float _2708;
        if (_2281 > 0.0)
        {
            _2708 = abs((1.0 - _2271) / _2281);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2281 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2271 + 1.0) / _2281);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2708 = frontier_phi_40_35_ladder;
        }
        float _3035;
        if (_2284 > 0.0)
        {
            _3035 = abs((1.0 - _2275) / _2284);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2284 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2275 + 1.0) / _2284);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3035 = frontier_phi_50_47_ladder;
        }
        float _3037 = isnan(_2708) ? _2391 : (isnan(_2391) ? _2708 : min(_2391, _2708));
        float _3038 = isnan(_3035) ? _3037 : (isnan(_3037) ? _3035 : min(_3037, _3035));
        float _3042 = (_3038 * _2278) + _2267;
        float _3043 = (_3038 * _2281) + _2271;
        float _3044 = (_3038 * _2284) + _2275;
        float _3045 = _3038 * 9.9999997473787516355514526367188e-05;
        float _3046 = (-1.0) - _3045;
        float _3048 = _3045 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3044 > _3048) || ((_3044 < _3046) || ((_3043 > _3048) || ((_3043 < _3046) || ((_3042 < _3046) || (_3042 > _3048))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3044, cbModelParam._m0[17u].z, fma(_3043, cbModelParam._m0[17u].y, _3042 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3044, cbModelParam._m0[18u].z, fma(_3043, cbModelParam._m0[18u].y, _3042 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3044, cbModelParam._m0[19u].z, fma(_3043, cbModelParam._m0[19u].y, _3042 * cbModelParam._m0[19u].x))), _2214);
            frontier_phi_25_50_ladder = _3162.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3162.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3162.x * cbModelParam._m0[1u].z;
        }
        _2303 = frontier_phi_25_50_ladder_2;
        _2305 = frontier_phi_25_50_ladder_1;
        _2307 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2287 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1288, _1289, _1290), _2214);
        _2303 = _2287.x * cbModelParam._m0[1u].z;
        _2305 = _2287.y * cbModelParam._m0[1u].z;
        _2307 = _2287.z * cbModelParam._m0[1u].z;
    }
    float _2319 = ((((1.0 - _1309) * ((_1296 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1309 * _1296)) * _1280;
    float _2320 = _2319 * ((cbModelParam._m0[1u].w * (_2303 - _2205)) + _2205);
    float _2321 = _2319 * ((cbModelParam._m0[1u].w * (_2305 - _2207)) + _2207);
    float _2322 = _2319 * ((cbModelParam._m0[1u].w * (_2307 - _2209)) + _2209);
    float _2325 = fma(_2322, cbSceneParam._m0[89u].z, fma(_2321, cbSceneParam._m0[89u].y, _2320 * cbSceneParam._m0[89u].x));
    float _2328 = fma(_2322, cbSceneParam._m0[90u].z, fma(_2321, cbSceneParam._m0[90u].y, _2320 * cbSceneParam._m0[90u].x));
    float _2331 = fma(_2322, cbSceneParam._m0[91u].z, fma(_2321, cbSceneParam._m0[91u].y, _2320 * cbSceneParam._m0[91u].x));
    float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2369 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2377 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2378 = _2365 / _2377;
    float _2379 = _2369 / _2377;
    float _2380 = _2373 / _2377;
    float _2527;
    float _2528;
    float _2529;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2407 = ((uint(_2380 > cbSceneParam._m0[59u].y) + uint(_2380 > cbSceneParam._m0[59u].x)) + uint(_2380 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2408 = _2407 + 43u;
        uint _2416 = _2407 + 44u;
        uint _2424 = _2407 + 45u;
        uint _2432 = _2407 + 46u;
        float _2443 = fma(_2377, cbSceneParam._m0[_2408].w, fma(_2373, cbSceneParam._m0[_2408].z, fma(_2369, cbSceneParam._m0[_2408].y, _2365 * cbSceneParam._m0[_2408].x)));
        float _2447 = fma(_2377, cbSceneParam._m0[_2416].w, fma(_2373, cbSceneParam._m0[_2416].z, fma(_2369, cbSceneParam._m0[_2416].y, _2365 * cbSceneParam._m0[_2416].x)));
        float _2455 = fma(_2377, cbSceneParam._m0[_2432].w, fma(_2373, cbSceneParam._m0[_2432].z, fma(_2369, cbSceneParam._m0[_2432].y, _2365 * cbSceneParam._m0[_2432].x)));
        float _2460 = cbSceneParam._m0[33u].z * _2455;
        float _2462 = cbSceneParam._m0[33u].w * _2455;
        float _2465 = fma(_2377, cbSceneParam._m0[_2424].w, fma(_2373, cbSceneParam._m0[_2424].z, fma(_2369, cbSceneParam._m0[_2424].y, _2365 * cbSceneParam._m0[_2424].x))) / _2455;
        float _2513 = (cbSceneParam._m0[33u].x - sqrt(((_2379 * _2379) + (_2378 * _2378)) + (_2380 * _2380))) * cbSceneParam._m0[33u].y;
        float _4939 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2520 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2460 + _2443) / _2455, (_2462 + _2447) / _2455), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2462 + _2443) / _2455, (_2447 - _2460) / _2455), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2443 - _2460) / _2455, (_2447 - _2462) / _2455), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2443 - _2462) / _2455, (_2460 + _2447) / _2455), _2465), 0.0)).x), vec4(0.25)));
        _2527 = 1.0 - (_2520 * cbSceneParam._m0[34u].x);
        _2528 = 1.0 - (_2520 * cbSceneParam._m0[34u].y);
        _2529 = 1.0 - (_2520 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2527 = 1.0;
        _2528 = 1.0;
        _2529 = 1.0;
    }
    float _2593;
    float _2595;
    float _2597;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2581 = fma(_2377, cbSceneParam._m0[63u].w, fma(_2373, cbSceneParam._m0[63u].z, fma(_2369, cbSceneParam._m0[63u].y, _2365 * cbSceneParam._m0[63u].x)));
        float _2582 = fma(_2377, cbSceneParam._m0[60u].w, fma(_2373, cbSceneParam._m0[60u].z, fma(_2369, cbSceneParam._m0[60u].y, _2365 * cbSceneParam._m0[60u].x))) / _2581;
        float _2583 = fma(_2377, cbSceneParam._m0[61u].w, fma(_2373, cbSceneParam._m0[61u].z, fma(_2369, cbSceneParam._m0[61u].y, _2365 * cbSceneParam._m0[61u].x))) / _2581;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2582 >= cbSceneParam._m0[64u].x) && (_2583 >= cbSceneParam._m0[64u].y)) && (_2582 <= cbSceneParam._m0[64u].z)) && (_2583 <= cbSceneParam._m0[64u].w))
        {
            float _2721 = fma(_2377, cbSceneParam._m0[62u].w, fma(_2373, cbSceneParam._m0[62u].z, fma(_2369, cbSceneParam._m0[62u].y, _2365 * cbSceneParam._m0[62u].x))) / _2581;
            float _2725 = isnan(cbSceneParam._m0[41u].w) ? _2721 : (isnan(_2721) ? cbSceneParam._m0[41u].w : max(_2721, cbSceneParam._m0[41u].w));
            float _2768 = (cbSceneParam._m0[33u].x - sqrt(((_2379 * _2379) + (_2378 * _2378)) + (_2380 * _2380))) * cbSceneParam._m0[33u].y;
            float _4955 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
            float _2775 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2582, cbSceneParam._m0[33u].w + _2583), _2725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2582, _2583 - cbSceneParam._m0[33u].z), _2725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2582 - cbSceneParam._m0[33u].z, _2583 - cbSceneParam._m0[33u].w), _2725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2582 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2583), _2725), 0.0)).x), vec4(0.25)));
            float _2779 = 1.0 - (_2775 * cbSceneParam._m0[34u].x);
            float _2780 = 1.0 - (_2775 * cbSceneParam._m0[34u].y);
            float _2781 = 1.0 - (_2775 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2781) ? _2529 : (isnan(_2529) ? _2781 : min(_2529, _2781));
            frontier_phi_37_36_ladder_1 = isnan(_2780) ? _2528 : (isnan(_2528) ? _2780 : min(_2528, _2780));
            frontier_phi_37_36_ladder_2 = isnan(_2779) ? _2527 : (isnan(_2527) ? _2779 : min(_2527, _2779));
        }
        else
        {
            frontier_phi_37_36_ladder = _2529;
            frontier_phi_37_36_ladder_1 = _2528;
            frontier_phi_37_36_ladder_2 = _2527;
        }
        _2593 = frontier_phi_37_36_ladder_2;
        _2595 = frontier_phi_37_36_ladder_1;
        _2597 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2593 = _2527;
        _2595 = _2528;
        _2597 = _2529;
    }
    uvec4 _2602 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2604 = _2602.x * 14u;
    uint _2605 = _2604 + 13u;
    float _2612 = _1280 + (-1.0);
    float _2617 = (cbLight._m0[_2605].x * _2612) + 1.0;
    float _2618 = (cbLight._m0[_2605].y * _2612) + 1.0;
    float _2619 = (cbLight._m0[_2605].z * _2612) + 1.0;
    float _2620 = (cbLight._m0[_2605].w * _2612) + 1.0;
    uint _2621 = _2604 + 5u;
    float _2627 = isnan(1.0) ? _2618 : (isnan(_2618) ? 1.0 : min(_2618, 1.0));
    uint _2631 = _2604 + 4u;
    float _2640 = isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0));
    uint _2644 = _2604 | 1u;
    float _2655 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_1119, _1120, _1121));
    float _2658 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_1119, _1120, _1121));
    float _4991 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _5002 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2663 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * 0.3183098733425140380859375;
    float _2665 = (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * 0.3183098733425140380859375;
    float _2672 = ((cbLight._m0[_2621].x * _2627) * _2665) + (((cbLight._m0[_2631].x * _2593) * _2640) * _2663);
    float _2673 = ((_2627 * cbLight._m0[_2621].y) * _2665) + (((cbLight._m0[_2631].y * _2595) * _2640) * _2663);
    float _2674 = ((_2627 * cbLight._m0[_2621].z) * _2665) + (((cbLight._m0[_2631].z * _2597) * _2640) * _2663);
    uvec4 _2678 = floatBitsToUint(cbLight._m0[_2604 + 12u]);
    bool _2680 = _2678.x == 0u;
    float _2782;
    float _2784;
    float _2786;
    if (_2680)
    {
        _2782 = _2672;
        _2784 = _2673;
        _2786 = _2674;
    }
    else
    {
        uint _2790 = _2604 + 6u;
        float _2806 = (dot(vec3(cbLight._m0[_2604 + 2u].xyz), vec3(_1119, _1120, _1121)) * 0.5) + 0.5;
        float _2807 = _2806 * _2806;
        float _5013 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2808 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _2809 = isnan(1.0) ? _2619 : (isnan(_2619) ? 1.0 : min(_2619, 1.0));
        _2782 = (((cbLight._m0[_2790].x * 0.3183098733425140380859375) * _2808) * _2809) + _2672;
        _2784 = (((cbLight._m0[_2790].y * 0.3183098733425140380859375) * _2808) * _2809) + _2673;
        _2786 = (((cbLight._m0[_2790].z * 0.3183098733425140380859375) * _2808) * _2809) + _2674;
    }
    bool _2789 = _2678.y == 0u;
    float _2844;
    float _2846;
    float _2848;
    if (_2789)
    {
        _2844 = _2782;
        _2846 = _2784;
        _2848 = _2786;
    }
    else
    {
        uint _3006 = _2604 + 7u;
        float _3022 = (dot(vec3(cbLight._m0[_2604 + 3u].xyz), vec3(_1119, _1120, _1121)) * 0.5) + 0.5;
        float _3023 = _3022 * _3022;
        float _5029 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3024 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
        float _3025 = isnan(1.0) ? _2620 : (isnan(_2620) ? 1.0 : min(_2620, 1.0));
        _2844 = (((cbLight._m0[_3006].x * 0.3183098733425140380859375) * _3024) * _3025) + _2782;
        _2846 = (((cbLight._m0[_3006].y * 0.3183098733425140380859375) * _3024) * _3025) + _2784;
        _2848 = (((cbLight._m0[_3006].z * 0.3183098733425140380859375) * _3024) * _3025) + _2786;
    }
    uint _2851 = _2604 + 8u;
    float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _1122) * 0.949999988079071044921875);
    float _2865 = _2864 * _2864;
    float _2866 = cbLight._m0[_2604].x + _1197;
    float _2867 = cbLight._m0[_2604].y + _1198;
    float _2868 = cbLight._m0[_2604].z + _1199;
    float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
    float _2873 = _2872 * _2866;
    float _2874 = _2872 * _2867;
    float _2875 = _2872 * _2868;
    float _2876 = dot(vec3(_1119, _1120, _1121), vec3(cbLight._m0[_2604].xyz));
    float _5045 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2879 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
    float _5056 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _2880 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
    float _2881 = dot(vec3(_1119, _1120, _1121), vec3(_2873, _2874, _2875));
    float _5067 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
    float _2884 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
    float _2885 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2873, _2874, _2875));
    float _5078 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    float _2889 = _2865 * _2865;
    float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
    float _2904 = (exp2(log2(1.0 - (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2905 = 1.0 - _2865;
    float _2916 = (0.5 / (((_2880 * ((_2879 * _2905) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2905) + _2865) * _2879))) * _2879;
    float _5089 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
    float _2918 = (isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
    uint _2932 = _2604 + 9u;
    float _2943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _1122) * 0.949999988079071044921875);
    float _2944 = _2943 * _2943;
    float _2945 = cbLight._m0[_2644].x + _1197;
    float _2946 = cbLight._m0[_2644].y + _1198;
    float _2947 = cbLight._m0[_2644].z + _1199;
    float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
    float _2952 = _2951 * _2945;
    float _2953 = _2951 * _2946;
    float _2954 = _2951 * _2947;
    float _2955 = dot(vec3(_1119, _1120, _1121), vec3(cbLight._m0[_2644].xyz));
    float _5100 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
    float _2958 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
    float _2959 = dot(vec3(_1119, _1120, _1121), vec3(_2952, _2953, _2954));
    float _5111 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
    float _2962 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
    float _2963 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2952, _2953, _2954));
    float _5122 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
    float _2967 = _2944 * _2944;
    float _2971 = ((_2962 * _2962) * (_2967 + (-1.0))) + 1.0;
    float _2980 = (exp2(log2(1.0 - (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2981 = 1.0 - _2944;
    float _2991 = (0.5 / (((_2880 * ((_2958 * _2981) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2981) + _2944) * _2958))) * _2958;
    float _5133 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
    float _2993 = (isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0))) * (_2967 / ((_2971 * _2971) * 3.141590118408203125));
    float _3003 = (((_2980 * cbLight._m0[_2932].x) * _2993) * _2627) + ((((cbLight._m0[_2851].x * _2593) * _2904) * _2918) * _2640);
    float _3004 = (((_2980 * cbLight._m0[_2932].y) * _2993) * _2627) + ((((cbLight._m0[_2851].y * _2595) * _2904) * _2918) * _2640);
    float _3005 = (((_2980 * cbLight._m0[_2932].z) * _2993) * _2627) + ((((cbLight._m0[_2851].z * _2597) * _2904) * _2918) * _2640);
    float _3061;
    float _3063;
    float _3065;
    if (_2680)
    {
        _3061 = _3003;
        _3063 = _3004;
        _3065 = _3005;
    }
    else
    {
        uint _3067 = _2604 + 2u;
        uint _3071 = _2604 + 10u;
        float _3085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3067].w)) * _1122) * 0.949999988079071044921875);
        float _3086 = _3085 * _3085;
        float _3087 = cbLight._m0[_3067].x + _1197;
        float _3088 = cbLight._m0[_3067].y + _1198;
        float _3089 = cbLight._m0[_3067].z + _1199;
        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
        float _3094 = _3093 * _3087;
        float _3095 = _3093 * _3088;
        float _3096 = _3093 * _3089;
        float _3097 = dot(vec3(_1119, _1120, _1121), vec3(cbLight._m0[_3067].xyz));
        float _5144 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3100 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
        float _3101 = dot(vec3(_1119, _1120, _1121), vec3(_3094, _3095, _3096));
        float _5155 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3104 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _3105 = dot(vec3(cbLight._m0[_3067].xyz), vec3(_3094, _3095, _3096));
        float _5166 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        float _3109 = _3086 * _3086;
        float _3113 = ((_3104 * _3104) * (_3109 + (-1.0))) + 1.0;
        float _3122 = (exp2(log2(1.0 - (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3123 = 1.0 - _3086;
        float _3133 = (0.5 / (((_2880 * ((_3100 * _3123) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _3123) + _3086) * _3100))) * _3100;
        float _5177 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3135 = (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3109 / ((_3113 * _3113) * 3.141590118408203125));
        float _3136 = isnan(1.0) ? _2619 : (isnan(_2619) ? 1.0 : min(_2619, 1.0));
        _3061 = (((_3122 * cbLight._m0[_3071].x) * _3135) * _3136) + _3003;
        _3063 = (((_3122 * cbLight._m0[_3071].y) * _3135) * _3136) + _3004;
        _3065 = (((_3122 * cbLight._m0[_3071].z) * _3135) * _3136) + _3005;
    }
    float _3167;
    float _3169;
    float _3171;
    if (_2789)
    {
        _3167 = _3061;
        _3169 = _3063;
        _3171 = _3065;
    }
    else
    {
        uint _3178 = _2604 + 3u;
        uint _3182 = _2604 + 11u;
        float _3196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3178].w)) * _1122) * 0.949999988079071044921875);
        float _3197 = _3196 * _3196;
        float _3198 = cbLight._m0[_3178].x + _1197;
        float _3199 = cbLight._m0[_3178].y + _1198;
        float _3200 = cbLight._m0[_3178].z + _1199;
        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
        float _3205 = _3204 * _3198;
        float _3206 = _3204 * _3199;
        float _3207 = _3204 * _3200;
        float _3208 = dot(vec3(_1119, _1120, _1121), vec3(cbLight._m0[_3178].xyz));
        float _5193 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
        float _3211 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
        float _3212 = dot(vec3(_1119, _1120, _1121), vec3(_3205, _3206, _3207));
        float _5204 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
        float _3215 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
        float _3216 = dot(vec3(cbLight._m0[_3178].xyz), vec3(_3205, _3206, _3207));
        float _5215 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
        float _3220 = _3197 * _3197;
        float _3224 = ((_3215 * _3215) * (_3220 + (-1.0))) + 1.0;
        float _3233 = (exp2(log2(1.0 - (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3234 = 1.0 - _3197;
        float _3244 = (0.5 / (((_2880 * ((_3211 * _3234) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _3234) + _3197) * _3211))) * _3211;
        float _5226 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
        float _3246 = (isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0))) * (_3220 / ((_3224 * _3224) * 3.141590118408203125));
        float _3247 = isnan(1.0) ? _2620 : (isnan(_2620) ? 1.0 : min(_2620, 1.0));
        _3167 = (((_3233 * cbLight._m0[_3182].x) * _3246) * _3247) + _3061;
        _3169 = (((_3233 * cbLight._m0[_3182].y) * _3246) * _3247) + _3063;
        _3171 = (((_3233 * cbLight._m0[_3182].z) * _3246) * _3247) + _3065;
    }
    float _3313;
    float _3315;
    float _3317;
    float _3319;
    float _3321;
    float _3323;
    if (_2602.y == 0u)
    {
        uvec4 _3268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3269 = _3268.x;
        uint _3280 = uint((float(_3268.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1218) / _3269))) + floor(float(uint(cbSceneParam._m0[85u].x * _1217) / _3269)));
        float _3290 = (log2(_2380 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3291 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
        uint _3294 = uint(isnan(14.0) ? _3291 : (isnan(_3291) ? 14.0 : min(_3291, 14.0)));
        uvec4 _3299 = texelFetch(g_lightClusterGridBuffer, int(((_3294 << 2u) + (_3280 << 6u)) >> 2u));
        uint _3300 = _3299.x;
        uint _3301 = _3268.z;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        float _3390;
        if (((((1u << ((_3301 >> 4u) & 15u)) + 4294967295u) & _3300) == 0u) || ((_3301 & 240u) == 0u))
        {
            _3380 = 0.0;
            _3382 = 0.0;
            _3384 = 0.0;
            _3386 = 0.0;
            _3388 = 0.0;
            _3390 = 0.0;
        }
        else
        {
            float _3381;
            float _3383;
            float _3385;
            float _3387;
            float _3389;
            float _3391;
            float _3532 = 0.0;
            float _3533 = 0.0;
            float _3534 = 0.0;
            float _3535 = 0.0;
            float _3536 = 0.0;
            float _3537 = 0.0;
            uint _3538 = 0u;
            uint _3547;
            bool _3548;
            for (;;)
            {
                _3547 = texelFetch(g_lightClassification, int((((_3294 << 5u) + (_3280 << 9u)) + (_3538 << 2u)) >> 2u)).x;
                _3548 = _3547 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3548)
                {
                    frontier_phi_71_pred = _3537;
                    frontier_phi_71_pred_1 = _3536;
                    frontier_phi_71_pred_2 = _3535;
                    frontier_phi_71_pred_3 = _3534;
                    frontier_phi_71_pred_4 = _3533;
                    frontier_phi_71_pred_5 = _3532;
                }
                else
                {
                    float _3677;
                    float _3678;
                    float _3679;
                    float _3680;
                    float _3681;
                    float _3682;
                    uint _3683;
                    _3677 = _3532;
                    _3678 = _3533;
                    _3679 = _3534;
                    _3680 = _3535;
                    _3681 = _3536;
                    _3682 = _3537;
                    _3683 = _3547;
                    float _3604;
                    float _3605;
                    float _3606;
                    float _3607;
                    float _3608;
                    float _3609;
                    for (;;)
                    {
                        uint _3687 = uint(findLSB(_3683)) + (_3538 << 5u);
                        uint _3684 = (_3683 + 4294967295u) & _3683;
                        uint _3689 = _3687 * 48u;
                        vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3689)).x, texelFetch(g_PointLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3689 + 3u)).x));
                        uint _3709 = (_3687 * 48u) + 4u;
                        vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3709)).x, texelFetch(g_PointLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3709 + 3u)).x));
                        uint _3728 = (_3687 * 48u) + 8u;
                        vec3 _3739 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3728)).x, texelFetch(g_PointLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3728 + 2u)).x));
                        float _3743 = _3703.x - _2378;
                        float _3744 = _3703.y - _2379;
                        float _3745 = _3703.z - _2380;
                        float _3746 = dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745));
                        float _3749 = inversesqrt(_3746);
                        float _3750 = _3749 * _3743;
                        float _3751 = _3749 * _3744;
                        float _3752 = _3749 * _3745;
                        float _3753 = dot(vec3(_1236, _1239, _1242), vec3(_3750, _3751, _3752));
                        float _3758 = 1.0 - (_3746 * _3703.w);
                        float _5252 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                        float _3759 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                        float _3760 = sqrt(_3746) * _3722.w;
                        float _3763 = 1.39999997615814208984375 / (_3760 + 1.39999997615814208984375);
                        float _3764 = _3763 * _3763;
                        float _3767 = ((1.0 - _3764) * _3753) + _3764;
                        float _3770 = _3760 * _3760;
                        float _3774 = ((isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0))) * _3759) / ((_3770 * 0.699999988079071044921875) + 1.0);
                        float _3778 = (-0.0) - _2378;
                        float _3779 = (-0.0) - _2379;
                        float _3780 = (-0.0) - _2380;
                        float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                        float _3785 = _3784 * _3778;
                        float _3786 = _3784 * _3779;
                        float _3787 = _3784 * _3780;
                        float _3794 = exp2(log2(1.0 / ((_3770 * 3.5) + 5.0)) * 0.25);
                        float _3795 = 1.0 - _1296;
                        float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                        float _3803 = _3802 * _3802;
                        float _3804 = _3803 * _3803;
                        float _3805 = _3785 + _3750;
                        float _3806 = _3786 + _3751;
                        float _3807 = _3787 + _3752;
                        float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                        float _3815 = dot(vec3(_1236, _1239, _1242), vec3(_3785, _3786, _3787));
                        float _5268 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                        float _3818 = isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0));
                        float _3819 = dot(vec3(_1236, _1239, _1242), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                        float _5279 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                        float _3822 = isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0));
                        float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                        float _3827 = _3763 * _3803;
                        float _3828 = _3827 * _3827;
                        float _3831 = ((1.0 - _3828) * _3753) + _3828;
                        float _5290 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                        float _3832 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
                        float _3833 = 1.0 - _3803;
                        float _3843 = (0.5 / (((_3832 * ((_3818 * _3833) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3803) * _3818))) * _3832;
                        float _5301 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                        float _3854 = (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0)))) / ((_3826 * _3826) * ((_3770 * 2.1991131305694580078125) + 3.141590118408203125))) * _3759;
                        _3607 = (_3774 * _3722.x) + _3680;
                        _3608 = (_3774 * _3722.y) + _3681;
                        _3609 = (_3774 * _3722.z) + _3682;
                        _3604 = (_3854 * _3739.x) + _3677;
                        _3605 = (_3854 * _3739.y) + _3678;
                        _3606 = (_3854 * _3739.z) + _3679;
                        if (_3684 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3677 = _3604;
                            _3678 = _3605;
                            _3679 = _3606;
                            _3680 = _3607;
                            _3681 = _3608;
                            _3682 = _3609;
                            _3683 = _3684;
                        }
                    }
                    frontier_phi_71_pred = _3609;
                    frontier_phi_71_pred_1 = _3608;
                    frontier_phi_71_pred_2 = _3607;
                    frontier_phi_71_pred_3 = _3606;
                    frontier_phi_71_pred_4 = _3605;
                    frontier_phi_71_pred_5 = _3604;
                }
                _3391 = frontier_phi_71_pred;
                _3389 = frontier_phi_71_pred_1;
                _3387 = frontier_phi_71_pred_2;
                _3385 = frontier_phi_71_pred_3;
                _3383 = frontier_phi_71_pred_4;
                _3381 = frontier_phi_71_pred_5;
                uint _3539 = _3538 + 1u;
                if (_3539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3532 = _3381;
                    _3533 = _3383;
                    _3534 = _3385;
                    _3535 = _3387;
                    _3536 = _3389;
                    _3537 = _3391;
                    _3538 = _3539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3380 = _3381;
            _3382 = _3383;
            _3384 = _3385;
            _3386 = _3387;
            _3388 = _3389;
            _3390 = _3391;
        }
        uvec4 _3394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3395 = _3394.z;
        uint _3397 = (_3395 >> 8u) & 15u;
        float _3500;
        float _3502;
        float _3504;
        float _3506;
        float _3508;
        float _3510;
        if (((4294967295u << _3397) & _3300) == 0u)
        {
            _3500 = _3380;
            _3502 = _3382;
            _3504 = _3384;
            _3506 = _3386;
            _3508 = _3388;
            _3510 = _3390;
        }
        else
        {
            float _3525 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
            float _3526 = _3525 * _2378;
            float _3527 = _3525 * _2379;
            float _3528 = _3525 * _2380;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3397 < ((_3395 >> 12u) & 15u))
            {
                float _3501;
                float _3503;
                float _3505;
                float _3507;
                float _3509;
                float _3511;
                float _3660 = _3380;
                float _3661 = _3382;
                float _3662 = _3384;
                float _3663 = _3386;
                float _3664 = _3388;
                float _3665 = _3390;
                uint _3666 = _3397;
                uint _3675;
                bool _3676;
                for (;;)
                {
                    _3675 = texelFetch(g_lightClassification, int((((_3294 << 5u) + (_3280 << 9u)) + (_3666 << 2u)) >> 2u)).x;
                    _3676 = _3675 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3676)
                    {
                        frontier_phi_82_pred = _3665;
                        frontier_phi_82_pred_1 = _3664;
                        frontier_phi_82_pred_2 = _3663;
                        frontier_phi_82_pred_3 = _3662;
                        frontier_phi_82_pred_4 = _3661;
                        frontier_phi_82_pred_5 = _3660;
                    }
                    else
                    {
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _4161;
                        float _4162;
                        float _4163;
                        float _4164;
                        float _4165;
                        float _4166;
                        float _3881 = _3660;
                        float _3882 = _3661;
                        float _3883 = _3662;
                        float _3884 = _3663;
                        float _3885 = _3664;
                        float _3886 = _3665;
                        uint _3887 = _3675;
                        uint _3888;
                        vec4 _3913;
                        float _3914;
                        vec4 _3929;
                        vec3 _3941;
                        vec4 _3956;
                        vec4 _3971;
                        float _4017;
                        bool _4018;
                        for (;;)
                        {
                            uint _3898 = ((_3666 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3887));
                            _3888 = (_3887 + 4294967295u) & _3887;
                            uint _3900 = _3898 * 40u;
                            _3913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 3u)).x));
                            _3914 = _3913.w;
                            uint _3916 = (_3898 * 40u) + 4u;
                            _3929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 3u)).x));
                            uint _3931 = (_3898 * 40u) + 8u;
                            _3941 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 2u)).x));
                            uint _3943 = (_3898 * 40u) + 16u;
                            _3956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 3u)).x));
                            uint _3958 = (_3898 * 40u) + 20u;
                            _3971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 3u)).x));
                            uint _3973 = (_3898 * 40u) + 24u;
                            vec4 _3986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 3u)).x));
                            uint _3992 = (_3898 * 40u) + 28u;
                            vec4 _4005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3992 + 3u)).x));
                            _4017 = fma(_2380, _4005.z, fma(_2379, _4005.y, _4005.x * _2378)) + _4005.w;
                            _4018 = !((fma(_2380, _3986.z, fma(_2379, _3986.y, _3986.x * _2378)) + _3986.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4018)
                            {
                                float _4045 = _3913.x - _2378;
                                float _4046 = _3913.y - _2379;
                                float _4047 = _3913.z - _2380;
                                float _4048 = dot(vec3(_4045, _4046, _4047), vec3(_4045, _4046, _4047));
                                float _4051 = inversesqrt(_4048);
                                float _4052 = _4051 * _4045;
                                float _4053 = _4051 * _4046;
                                float _4054 = _4051 * _4047;
                                float _4058 = 1.0 - (_4048 / (_3914 * _3914));
                                float _5312 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4059 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4063 = sqrt(_4048) * _3929.w;
                                float _4065 = 1.39999997615814208984375 / (_4063 + 1.39999997615814208984375);
                                float _4066 = _4065 * _4065;
                                float _4069 = ((1.0 - _4066) * dot(vec3(_4052, _4053, _4054), vec3(_1236, _1239, _1242))) + _4066;
                                float _4072 = _4063 * _4063;
                                float _4076 = (fma(_2380, _3956.z, fma(_2379, _3956.y, _3956.x * _2378)) + _3956.w) / _4017;
                                float _4077 = (fma(_2380, _3971.z, fma(_2379, _3971.y, _3971.x * _2378)) + _3971.w) / _4017;
                                float _4081 = 1.0 - dot(vec2(_4076, _4077), vec2(_4076, _4077));
                                float _5328 = isnan(0.0) ? _4081 : (isnan(_4081) ? 0.0 : max(_4081, 0.0));
                                float _4082 = isnan(1.0) ? _5328 : (isnan(_5328) ? 1.0 : min(_5328, 1.0));
                                float _4083 = _4082 * (((isnan(0.0) ? _4069 : (isnan(_4069) ? 0.0 : max(_4069, 0.0))) * _4059) / ((_4072 * 0.699999988079071044921875) + 1.0));
                                float _4095 = exp2(log2(1.0 / ((_4072 * 3.5) + 5.0)) * 0.25);
                                float _4096 = 1.0 - _1296;
                                float _4103 = sqrt(1.0 - ((1.0 - (_4096 * _4096)) * (1.0 - (_4095 * _4095))));
                                float _4104 = _4103 * _4103;
                                float _4105 = _4104 * _4104;
                                float _4106 = _4052 - _3526;
                                float _4107 = _4053 - _3527;
                                float _4108 = _4054 - _3528;
                                float _4112 = inversesqrt(dot(vec3(_4106, _4107, _4108), vec3(_4106, _4107, _4108)));
                                float _4116 = dot(vec3(_1236, _1239, _1242), vec3((-0.0) - _3526, (-0.0) - _3527, (-0.0) - _3528));
                                float _5339 = isnan(0.0) ? _4116 : (isnan(_4116) ? 0.0 : max(_4116, 0.0));
                                float _4119 = isnan(1.0) ? _5339 : (isnan(_5339) ? 1.0 : min(_5339, 1.0));
                                float _4120 = dot(vec3(_1236, _1239, _1242), vec3(_4112 * _4106, _4112 * _4107, _4112 * _4108));
                                float _5350 = isnan(0.0) ? _4120 : (isnan(_4120) ? 0.0 : max(_4120, 0.0));
                                float _4123 = isnan(1.0) ? _5350 : (isnan(_5350) ? 1.0 : min(_5350, 1.0));
                                float _4127 = ((_4123 * _4123) * (_4105 + (-1.0))) + 1.0;
                                float _4128 = _4065 * _4104;
                                float _4129 = _4128 * _4128;
                                float _4135 = ((1.0 - _4129) * dot(vec3(_1236, _1239, _1242), vec3(_4052, _4053, _4054))) + _4129;
                                float _5361 = isnan(0.0) ? _4135 : (isnan(_4135) ? 0.0 : max(_4135, 0.0));
                                float _4136 = isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0));
                                float _4137 = 1.0 - _4104;
                                float _4147 = (0.5 / (((_4136 * ((_4119 * _4137) + _4104)) + 9.9999999392252902907785028219223e-09) + (((_4136 * _4137) + _4104) * _4119))) * _4136;
                                float _5372 = isnan(0.0) ? _4147 : (isnan(_4147) ? 0.0 : max(_4147, 0.0));
                                float _4157 = (_4082 * _4059) * (((_4105 * 3.1415927410125732421875) * (isnan(1.0) ? _5372 : (isnan(_5372) ? 1.0 : min(_5372, 1.0)))) / ((_4127 * _4127) * ((_4072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4083 * _3929.z;
                                frontier_phi_88_pred_1 = _4083 * _3929.y;
                                frontier_phi_88_pred_2 = _4083 * _3929.x;
                                frontier_phi_88_pred_3 = _4157 * _3941.z;
                                frontier_phi_88_pred_4 = _4157 * _3941.y;
                                frontier_phi_88_pred_5 = _4157 * _3941.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4166 = frontier_phi_88_pred;
                            _4165 = frontier_phi_88_pred_1;
                            _4164 = frontier_phi_88_pred_2;
                            _4163 = frontier_phi_88_pred_3;
                            _4162 = frontier_phi_88_pred_4;
                            _4161 = frontier_phi_88_pred_5;
                            _3871 = _4164 + _3884;
                            _3872 = _4165 + _3885;
                            _3873 = _4166 + _3886;
                            _3868 = _4161 + _3881;
                            _3869 = _4162 + _3882;
                            _3870 = _4163 + _3883;
                            if (_3888 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3881 = _3868;
                                _3882 = _3869;
                                _3883 = _3870;
                                _3884 = _3871;
                                _3885 = _3872;
                                _3886 = _3873;
                                _3887 = _3888;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3873;
                        frontier_phi_82_pred_1 = _3872;
                        frontier_phi_82_pred_2 = _3871;
                        frontier_phi_82_pred_3 = _3870;
                        frontier_phi_82_pred_4 = _3869;
                        frontier_phi_82_pred_5 = _3868;
                    }
                    _3511 = frontier_phi_82_pred;
                    _3509 = frontier_phi_82_pred_1;
                    _3507 = frontier_phi_82_pred_2;
                    _3505 = frontier_phi_82_pred_3;
                    _3503 = frontier_phi_82_pred_4;
                    _3501 = frontier_phi_82_pred_5;
                    uint _3667 = _3666 + 1u;
                    if (_3667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3660 = _3501;
                        _3661 = _3503;
                        _3662 = _3505;
                        _3663 = _3507;
                        _3664 = _3509;
                        _3665 = _3511;
                        _3666 = _3667;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3507;
                frontier_phi_63_64_ladder_1 = _3511;
                frontier_phi_63_64_ladder_2 = _3509;
                frontier_phi_63_64_ladder_3 = _3505;
                frontier_phi_63_64_ladder_4 = _3503;
                frontier_phi_63_64_ladder_5 = _3501;
            }
            else
            {
                frontier_phi_63_64_ladder = _3386;
                frontier_phi_63_64_ladder_1 = _3390;
                frontier_phi_63_64_ladder_2 = _3388;
                frontier_phi_63_64_ladder_3 = _3384;
                frontier_phi_63_64_ladder_4 = _3382;
                frontier_phi_63_64_ladder_5 = _3380;
            }
            _3500 = frontier_phi_63_64_ladder_5;
            _3502 = frontier_phi_63_64_ladder_4;
            _3504 = frontier_phi_63_64_ladder_3;
            _3506 = frontier_phi_63_64_ladder;
            _3508 = frontier_phi_63_64_ladder_2;
            _3510 = frontier_phi_63_64_ladder_1;
        }
        float _3515 = isnan(1.0) ? _1280 : (isnan(_1280) ? 1.0 : min(_1280, 1.0));
        _3313 = (_3515 * _3506) + _2844;
        _3315 = (_3515 * _3508) + _2846;
        _3317 = (_3515 * _3510) + _2848;
        _3319 = ((_3500 * 0.039999999105930328369140625) * _3515) + _3167;
        _3321 = ((_3502 * 0.039999999105930328369140625) * _3515) + _3169;
        _3323 = ((_3504 * 0.039999999105930328369140625) * _3515) + _3171;
    }
    else
    {
        _3313 = _2844;
        _3315 = _2846;
        _3317 = _2848;
        _3319 = _3167;
        _3321 = _3169;
        _3323 = _3171;
    }
    float _5388 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _5399 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _5410 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _3340 = ((isnan(1.0) ? _5388 : (isnan(_5388) ? 1.0 : min(_5388, 1.0))) * (_3313 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1280))) + ((_3319 + ((isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0))) * _2114)) * cbPerFrame._m0[3u].x);
    float _3341 = ((isnan(1.0) ? _5399 : (isnan(_5399) ? 1.0 : min(_5399, 1.0))) * (_3315 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1280))) + ((_3321 + ((isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0))) * _2114)) * cbPerFrame._m0[3u].x);
    float _3342 = ((isnan(1.0) ? _5410 : (isnan(_5410) ? 1.0 : min(_5410, 1.0))) * (_3317 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1280))) + ((_3323 + ((isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0))) * _2114)) * cbPerFrame._m0[3u].x);
    uint _3343 = _297 + 6u;
    float _3351 = _1217 / cbSceneParam._m0[86u].x;
    float _3352 = _1218 / cbSceneParam._m0[86u].y;
    vec4 _3366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3351, _3352, (log2((isnan(cbSceneParam._m0[77u].w) ? _1140 : (isnan(_1140) ? cbSceneParam._m0[77u].w : min(_1140, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3368 = _3366.x;
    float _3369 = _3366.y;
    float _3370 = _3366.z;
    float _3371 = _3366.w;
    float _3442;
    float _3444;
    float _3446;
    float _3448;
    if (_1140 > cbSceneParam._m0[78u].w)
    {
        float _3405 = isnan(_1140) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1140 : min(cbSceneParam._m0[80u].w, _1140));
        float _3406 = _3405 / _1140;
        float _3417 = _3406 * _1190;
        float _3418 = _1191 * _3406;
        float _3419 = (-0.0) - _3418;
        float _3420 = _3406 * _1192;
        float _3422 = (cbSceneParam._m0[77u].w * _3419) / _3405;
        float _3423 = _3422 + cbSceneParam._m0[79u].w;
        float _3424 = cbSceneParam._m0[79u].w - _3418;
        float _3430 = sqrt(((_3417 * _3417) + (_3418 * _3418)) + (_3420 * _3420));
        float _3433 = (1.0 - (cbSceneParam._m0[77u].w / _3405)) * _3430;
        float _3438 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3440 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3617;
        if (abs((_3419 - _3422) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3617 = ((((_3423 > 0.0) ? exp2(_3438 * _3423) : (2.0 - exp2(_3440 * _3423))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3433;
        }
        else
        {
            float _3561 = 1.0 / cbSceneParam._m0[80u].x;
            float _3562 = isnan(_3424) ? _3423 : (isnan(_3423) ? _3424 : max(_3423, _3424));
            float _3563 = isnan(_3424) ? _3423 : (isnan(_3423) ? _3424 : min(_3423, _3424));
            float _3572 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : min(_3562, 0.0));
            float _3573 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : min(_3563, 0.0));
            _3617 = ((abs(_3430 / _3419) * cbSceneParam._m0[80u].y) * ((((_3572 - _3573) * 2.0) - ((exp2(_3438 * (isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0)))) - exp2(_3438 * (isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))))) * _3561)) - ((exp2(_3440 * _3572) - exp2(_3440 * _3573)) * _3561))) + (_3433 * cbSceneParam._m0[80u].z);
        }
        vec4 _3619 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3351, _3352, 1.0), 0.0);
        float _3628 = exp2((_3617 * (-1.44269502162933349609375)) * (1.0 - _3619.w));
        float _3629 = log2(_3628);
        float _3645 = log2(_3371);
        _3442 = (exp2(_3645 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3629 * cbSceneParam._m0[78u].x)) * _3619.x) / cbSceneParam._m0[78u].x)) + _3368;
        _3444 = (exp2(_3645 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3629 * cbSceneParam._m0[78u].y)) * _3619.y) / cbSceneParam._m0[78u].y)) + _3369;
        _3446 = (exp2(_3645 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3629 * cbSceneParam._m0[78u].z)) * _3619.z) / cbSceneParam._m0[78u].z)) + _3370;
        _3448 = _3628 * _3371;
    }
    else
    {
        _3442 = _3368;
        _3444 = _3369;
        _3446 = _3370;
        _3448 = _3371;
    }
    bool _3655;
    vec4 _3458;
    vec4 _3480;
    float _3482;
    float _3486;
    float _3487;
    float _3488;
    float _3489;
    bool _3499;
    for (;;)
    {
        _3458 = cbMatDynParam._m0[0u];
        float _3460 = roundEven(_3458.y);
        bool _3461 = _3460 == 3.0;
        float _3462 = log2(_3448);
        float _3469 = exp2(_3462 * cbSceneParam._m0[78u].x) * _3340;
        float _3470 = exp2(_3462 * cbSceneParam._m0[78u].y) * _3341;
        float _3471 = exp2(_3462 * cbSceneParam._m0[78u].z) * _3342;
        float _3478 = _1206 + (-0.5);
        _3480 = cbMtdParam._m0[1u];
        _3482 = _3480.y * _3478;
        float _3485 = (_3460 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3486 = _3485 * (_3461 ? _3469 : (_3469 + (cbSceneParam._m0[72u].w * _3442)));
        _3487 = _3485 * (_3461 ? _3470 : (_3470 + (cbSceneParam._m0[72u].w * _3444)));
        _3488 = _3485 * (_3461 ? _3471 : (_3471 + (cbSceneParam._m0[72u].w * _3446)));
        _3489 = _3478 * 0.999000012874603271484375;
        _3499 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3499)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3489) < 0.5)
            {
                _3655 = true;
                break;
            }
        }
        uint _3596 = _1255 + uint(_3458.w);
        if ((cbInstanceData._m0[_3596].w < 1.0) && ((cbInstanceData._m0[_3596].w + _3489) < 0.5))
        {
            _3655 = true;
            break;
        }
        if ((_3482 + 1.0) < _3480.x)
        {
            _3655 = true;
            break;
        }
        _3655 = false;
        break;
    }
    float _3859;
    if (_3655)
    {
        discard_state = true;
        _3859 = 0.0;
    }
    else
    {
        _3859 = cbInstanceData._m0[_3343].w;
    }
    SV_Target.x = _3486;
    SV_Target.y = _3487;
    SV_Target.z = _3488;
    SV_Target.w = _3859;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3343].w;
    discard_exit();
}


