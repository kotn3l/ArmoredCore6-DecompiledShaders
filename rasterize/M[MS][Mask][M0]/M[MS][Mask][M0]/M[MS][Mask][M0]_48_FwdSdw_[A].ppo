#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1422;
float _4062;
float _4063;
float _4064;
float _4065;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4074 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4085 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4096 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4107 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _456 = (_449 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _457 = (_449 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _458 = (_449 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _462 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _456;
    float _465 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _457;
    float _468 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _458;
    float _475 = ((_456 - _462) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) + _462;
    float _476 = ((_457 - _465) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _465;
    float _477 = ((_458 - _468) * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) + _468;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _564 = _560.z;
    float _573 = ((_543.z - _564) * _449) + _564;
    float _576 = ((((_543.x - _562) * _449) + _562) * 2.0) + (-1.0);
    float _577 = ((((_543.y - _563) * _449) + _563) * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _4118 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (_576 + ((((_516.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _616 = (_577 + ((((_516.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _619 = fma(_583, _252, fma(_616, _259, _615 * _245));
    float _622 = fma(_583, _253, fma(_616, _260, _615 * _246));
    float _625 = fma(_583, _254, fma(_616, _261, _615 * _247));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _665 = (cbMtdParam._m0[19u].x + dot(vec4(_629 * _619, _629 * _622, _629 * _625, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_658 - _659) * cbMtdParam._m0[24u].w) + _659) * cbMtdParam._m0[21u].z);
    float _4129 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _668 = (-0.0) - cbMtdParam._m0[24u].x;
    float _670 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
    float _678 = _666 - ((_666 * TEXCOORD_8.x) * _671);
    float _679 = _666 - ((_666 * TEXCOORD_8.y) * _671);
    float _680 = _666 - ((_666 * TEXCOORD_8.z) * _671);
    float _687 = (_678 * ((_496.x * cbMtdParam._m0[18u].x) - _475)) + _475;
    float _688 = (_679 * ((_496.y * cbMtdParam._m0[18u].y) - _476)) + _476;
    float _689 = (_680 * ((_496.z * cbMtdParam._m0[18u].z) - _477)) + _477;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_703 - _704) * cbMtdParam._m0[24u].y) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4150 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _687) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _731) + _687;
    float _740 = ((((cbMtdParam._m0[10u].y - _688) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _731) + _688;
    float _741 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _689)) * _731) + _689;
    float _746 = (((_516.z - _573) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _573;
    float _750 = ((_603.z - _746) * cbMtdParam._m0[19u].w) + _746;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _4161 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _781 = ((_764.z - _750) * _678) + _750;
    float _784 = ((cbMtdParam._m0[23u].y - _781) * _731) + _781;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _4172 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _826 = ((sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) - _583) * _680) + _583;
    float _829 = (((_771 - _615) * _678) + _615) + (cbMtdParam._m0[21u].x * _615);
    float _830 = (((_772 - _616) * _679) + _616) + (cbMtdParam._m0[21u].x * _616);
    float _841 = (((_809 - _829) + (_829 * cbMtdParam._m0[22u].z)) * _731) + _829;
    float _842 = (((_810 - _830) + (_830 * cbMtdParam._m0[22u].z)) * _731) + _830;
    float _843 = (_731 * (sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) - _826)) + _826;
    float _847 = cbMtdParam._m0[22u].x + _603.w;
    float _850 = fma(_843, _252, fma(_842, _259, _841 * _245));
    float _853 = fma(_843, _253, fma(_842, _260, _841 * _246));
    float _856 = fma(_843, _254, fma(_842, _261, _841 * _247));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _4183 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _864 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4205 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4216 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4227 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1103 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1109 = (cbMatDynParam._m0[5u].x * _1103) + cbMatDynParam._m0[5u].y;
        float _4238 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1114 = (cbMatDynParam._m0[5u].z * _1103) + cbMatDynParam._m0[5u].w;
        float _4249 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) - _1110)) + _1110) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _982 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _985 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _998 = _283 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_999].z;
    float _4260 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1023 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * TEXCOORD_5.w) * _1019.x;
    float _1024 = dot(vec3(_861, _862, _863), vec3(_940, _941, _942));
    float _1027 = _1024 * 2.0;
    float _1031 = (_1027 * _861) - _940;
    float _1032 = (_1027 * _862) - _941;
    float _1033 = (_1027 * _863) - _942;
    float _1037 = abs(dot(vec3(_940, _941, _942), vec3(_861, _862, _863)));
    float _4293 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1039 = sqrt(_864);
    float _1052 = exp2((_1039 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1039 * 3.0));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1421;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1150 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1154 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1179 = _1084 + _861;
        float _1180 = _1088 + _862;
        float _1181 = _1092 + _863;
        float _1191 = fma(_1181, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179)) - _1146;
        float _1192 = fma(_1181, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179)) - _1150;
        float _1193 = fma(_1181, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179)) - _1154;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1249 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1215.x + (-0.5));
        float _1251 = _1249 * (_1215.y + (-0.5));
        float _1252 = _1249 * (_1215.z + (-0.5));
        float _1259 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1222.x + (-0.5));
        float _1261 = _1259 * (_1222.y + (-0.5));
        float _1262 = _1259 * (_1222.z + (-0.5));
        float _1269 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1229.x + (-0.5));
        float _1271 = _1269 * (_1229.y + (-0.5));
        float _1272 = _1269 * (_1229.z + (-0.5));
        float _1279 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1236.x + (-0.5));
        float _1281 = _1279 * (_1236.y + (-0.5));
        float _1282 = _1279 * (_1236.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1303 = (dot(vec3(_861, _862, _863), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1313 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4341 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1315 + 1.0))) + _1320) * _1283;
        float _1330 = _1251 * 0.5;
        float _1331 = _1261 * 0.5;
        float _1332 = _1271 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_861, _862, _863), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4374 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1357 + 1.0))) + _1362) * _1284;
        float _1372 = _1252 * 0.5;
        float _1373 = _1262 * 0.5;
        float _1374 = _1272 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_861, _862, _863), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4407 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1399 + 1.0))) + _1404) * _1285;
        _1421 = _1252;
        _1423 = _1251;
        _1424 = _1250;
        _1425 = _1262;
        _1426 = _1261;
        _1427 = _1260;
        _1428 = _1272;
        _1429 = _1271;
        _1430 = _1270;
        _1431 = _1285;
        _1432 = _1284;
        _1433 = _1283;
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1422;
        _1423 = _1422;
        _1424 = _1422;
        _1425 = _1422;
        _1426 = _1422;
        _1427 = _1422;
        _1428 = _1422;
        _1429 = _1422;
        _1430 = _1422;
        _1431 = _1422;
        _1432 = _1422;
        _1433 = _1422;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1468 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1472 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1495 = _1084 + _861;
        float _1496 = _1088 + _862;
        float _1497 = _1092 + _863;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_861, _862, _863), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4470 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_861, _862, _863), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4503 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_861, _862, _863), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4536 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1422;
        _1734 = _1422;
        _1735 = _1422;
        _1736 = _1422;
        _1737 = _1422;
        _1738 = _1422;
        _1739 = _1422;
        _1740 = _1422;
        _1741 = _1422;
        _1742 = _1422;
        _1743 = _1422;
        _1744 = _1422;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1434)) + _1434;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1435)) + _1435;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1436)) + _1436;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1031 * 0.5;
    float _1802 = _1032 * 0.5;
    float _1803 = _1033 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1421, _1425, _1428, _1431));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1033, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031));
        float _1931 = fma(_1033, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031));
        float _1934 = fma(_1033, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1962 = frontier_phi_17_15_ladder;
        }
        float _2131;
        if (_1931 > 0.0)
        {
            _2131 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2131 = frontier_phi_26_22_ladder;
        }
        float _2426;
        if (_1934 > 0.0)
        {
            _2426 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2426 = frontier_phi_38_33_ladder;
        }
        float _2428 = isnan(_2131) ? _1962 : (isnan(_1962) ? _2131 : min(_1962, _2131));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1928) + _1917;
        float _2434 = (_2429 * _1931) + _1921;
        float _2435 = (_2429 * _1934) + _1925;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2436;
        float _2440 = _2436 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 > _2440) || ((_2434 < _2438) || ((_2433 < _2438) || (_2433 > _2440))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2435, cbModelParam._m0[9u].z, fma(_2434, cbModelParam._m0[9u].y, _2433 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2435, cbModelParam._m0[10u].z, fma(_2434, cbModelParam._m0[10u].y, _2433 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2435, cbModelParam._m0[11u].z, fma(_2434, cbModelParam._m0[11u].y, _2433 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_16_38_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_16_38_ladder_2;
        _1952 = frontier_phi_16_38_ladder_1;
        _1954 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1031, _1032, _1033), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1033, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031));
        float _2026 = fma(_1033, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031));
        float _2029 = fma(_1033, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031));
        float _2136;
        if (_2023 > 0.0)
        {
            _2136 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2453;
        if (_2026 > 0.0)
        {
            _2453 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2453 = frontier_phi_40_35_ladder;
        }
        float _2780;
        if (_2029 > 0.0)
        {
            _2780 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2780 = frontier_phi_50_47_ladder;
        }
        float _2782 = isnan(_2453) ? _2136 : (isnan(_2136) ? _2453 : min(_2136, _2453));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2023) + _2012;
        float _2788 = (_2783 * _2026) + _2016;
        float _2789 = (_2783 * _2029) + _2020;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_25_50_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_25_50_ladder_2;
        _2050 = frontier_phi_25_50_ladder_1;
        _2052 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1031, _1032, _1033), _1959);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2064 = ((((1.0 - _1052) * ((_1039 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1052 * _1039)) * _1023;
    float _2065 = _2064 * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2066 = _2064 * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2067 = _2064 * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2066, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2066, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2066, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2123 = _2110 / _2122;
    float _2124 = _2114 / _2122;
    float _2125 = _2118 / _2122;
    float _2272;
    float _2273;
    float _2274;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2152 = ((uint(_2125 > cbSceneParam._m0[59u].y) + uint(_2125 > cbSceneParam._m0[59u].x)) + uint(_2125 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2153 = _2152 + 43u;
        uint _2161 = _2152 + 44u;
        uint _2169 = _2152 + 45u;
        uint _2177 = _2152 + 46u;
        float _2188 = fma(_2122, cbSceneParam._m0[_2153].w, fma(_2118, cbSceneParam._m0[_2153].z, fma(_2114, cbSceneParam._m0[_2153].y, _2110 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2122, cbSceneParam._m0[_2161].w, fma(_2118, cbSceneParam._m0[_2161].z, fma(_2114, cbSceneParam._m0[_2161].y, _2110 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2122, cbSceneParam._m0[_2177].w, fma(_2118, cbSceneParam._m0[_2177].z, fma(_2114, cbSceneParam._m0[_2177].y, _2110 * cbSceneParam._m0[_2177].x)));
        float _2205 = cbSceneParam._m0[33u].z * _2200;
        float _2207 = cbSceneParam._m0[33u].w * _2200;
        float _2210 = fma(_2122, cbSceneParam._m0[_2169].w, fma(_2118, cbSceneParam._m0[_2169].z, fma(_2114, cbSceneParam._m0[_2169].y, _2110 * cbSceneParam._m0[_2169].x))) / _2200;
        float _2258 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
        float _4662 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2265 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2188) / _2200, (_2207 + _2192) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2188) / _2200, (_2192 - _2205) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2205) / _2200, (_2192 - _2207) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2207) / _2200, (_2205 + _2192) / _2200), _2210), 0.0)).x), vec4(0.25)));
        _2272 = 1.0 - (_2265 * cbSceneParam._m0[34u].x);
        _2273 = 1.0 - (_2265 * cbSceneParam._m0[34u].y);
        _2274 = 1.0 - (_2265 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2272 = 1.0;
        _2273 = 1.0;
        _2274 = 1.0;
    }
    float _2338;
    float _2340;
    float _2342;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2326 = fma(_2122, cbSceneParam._m0[63u].w, fma(_2118, cbSceneParam._m0[63u].z, fma(_2114, cbSceneParam._m0[63u].y, _2110 * cbSceneParam._m0[63u].x)));
        float _2327 = fma(_2122, cbSceneParam._m0[60u].w, fma(_2118, cbSceneParam._m0[60u].z, fma(_2114, cbSceneParam._m0[60u].y, _2110 * cbSceneParam._m0[60u].x))) / _2326;
        float _2328 = fma(_2122, cbSceneParam._m0[61u].w, fma(_2118, cbSceneParam._m0[61u].z, fma(_2114, cbSceneParam._m0[61u].y, _2110 * cbSceneParam._m0[61u].x))) / _2326;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2327 >= cbSceneParam._m0[64u].x) && (_2328 >= cbSceneParam._m0[64u].y)) && (_2327 <= cbSceneParam._m0[64u].z)) && (_2328 <= cbSceneParam._m0[64u].w))
        {
            float _2466 = fma(_2122, cbSceneParam._m0[62u].w, fma(_2118, cbSceneParam._m0[62u].z, fma(_2114, cbSceneParam._m0[62u].y, _2110 * cbSceneParam._m0[62u].x))) / _2326;
            float _2470 = isnan(cbSceneParam._m0[41u].w) ? _2466 : (isnan(_2466) ? cbSceneParam._m0[41u].w : max(_2466, cbSceneParam._m0[41u].w));
            float _2513 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
            float _4678 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
            float _2520 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2327, cbSceneParam._m0[33u].w + _2328), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2327, _2328 - cbSceneParam._m0[33u].z), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].z, _2328 - cbSceneParam._m0[33u].w), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2328), _2470), 0.0)).x), vec4(0.25)));
            float _2524 = 1.0 - (_2520 * cbSceneParam._m0[34u].x);
            float _2525 = 1.0 - (_2520 * cbSceneParam._m0[34u].y);
            float _2526 = 1.0 - (_2520 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
            frontier_phi_37_36_ladder_1 = isnan(_2525) ? _2273 : (isnan(_2273) ? _2525 : min(_2273, _2525));
            frontier_phi_37_36_ladder_2 = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
        }
        else
        {
            frontier_phi_37_36_ladder = _2274;
            frontier_phi_37_36_ladder_1 = _2273;
            frontier_phi_37_36_ladder_2 = _2272;
        }
        _2338 = frontier_phi_37_36_ladder_2;
        _2340 = frontier_phi_37_36_ladder_1;
        _2342 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2338 = _2272;
        _2340 = _2273;
        _2342 = _2274;
    }
    uvec4 _2347 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2349 = _2347.x * 14u;
    uint _2350 = _2349 + 13u;
    float _2357 = _1023 + (-1.0);
    float _2362 = (cbLight._m0[_2350].x * _2357) + 1.0;
    float _2363 = (cbLight._m0[_2350].y * _2357) + 1.0;
    float _2364 = (cbLight._m0[_2350].z * _2357) + 1.0;
    float _2365 = (cbLight._m0[_2350].w * _2357) + 1.0;
    uint _2366 = _2349 + 5u;
    float _2372 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
    uint _2376 = _2349 + 4u;
    float _2385 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
    uint _2389 = _2349 | 1u;
    float _2400 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_861, _862, _863));
    float _2403 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_861, _862, _863));
    float _4714 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _4725 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2408 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * 0.3183098733425140380859375;
    float _2410 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * 0.3183098733425140380859375;
    float _2417 = ((cbLight._m0[_2366].x * _2372) * _2410) + (((cbLight._m0[_2376].x * _2338) * _2385) * _2408);
    float _2418 = ((_2372 * cbLight._m0[_2366].y) * _2410) + (((cbLight._m0[_2376].y * _2340) * _2385) * _2408);
    float _2419 = ((_2372 * cbLight._m0[_2366].z) * _2410) + (((cbLight._m0[_2376].z * _2342) * _2385) * _2408);
    uvec4 _2423 = floatBitsToUint(cbLight._m0[_2349 + 12u]);
    bool _2425 = _2423.x == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2425)
    {
        _2527 = _2417;
        _2529 = _2418;
        _2531 = _2419;
    }
    else
    {
        uint _2535 = _2349 + 6u;
        float _2551 = (dot(vec3(cbLight._m0[_2349 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2552 = _2551 * _2551;
        float _4736 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2553 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2554 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2527 = (((cbLight._m0[_2535].x * 0.3183098733425140380859375) * _2553) * _2554) + _2417;
        _2529 = (((cbLight._m0[_2535].y * 0.3183098733425140380859375) * _2553) * _2554) + _2418;
        _2531 = (((cbLight._m0[_2535].z * 0.3183098733425140380859375) * _2553) * _2554) + _2419;
    }
    bool _2534 = _2423.y == 0u;
    float _2589;
    float _2591;
    float _2593;
    if (_2534)
    {
        _2589 = _2527;
        _2591 = _2529;
        _2593 = _2531;
    }
    else
    {
        uint _2751 = _2349 + 7u;
        float _2767 = (dot(vec3(cbLight._m0[_2349 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2768 = _2767 * _2767;
        float _4752 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2769 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2770 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2589 = (((cbLight._m0[_2751].x * 0.3183098733425140380859375) * _2769) * _2770) + _2527;
        _2591 = (((cbLight._m0[_2751].y * 0.3183098733425140380859375) * _2769) * _2770) + _2529;
        _2593 = (((cbLight._m0[_2751].z * 0.3183098733425140380859375) * _2769) * _2770) + _2531;
    }
    uint _2596 = _2349 + 8u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _864) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2349].x + _940;
    float _2612 = cbLight._m0[_2349].y + _941;
    float _2613 = cbLight._m0[_2349].z + _942;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2349].xyz));
    float _4768 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _4779 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2625 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2626 = dot(vec3(_861, _862, _863), vec3(_2618, _2619, _2620));
    float _4790 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2630 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2618, _2619, _2620));
    float _4801 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2634 = _2610 * _2610;
    float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
    float _2649 = (exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2650 = 1.0 - _2610;
    float _2661 = (0.5 / (((_2625 * ((_2624 * _2650) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2650) + _2610) * _2624))) * _2624;
    float _4812 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2663 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
    uint _2677 = _2349 + 9u;
    float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _864) * 0.949999988079071044921875);
    float _2689 = _2688 * _2688;
    float _2690 = cbLight._m0[_2389].x + _940;
    float _2691 = cbLight._m0[_2389].y + _941;
    float _2692 = cbLight._m0[_2389].z + _942;
    float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
    float _2697 = _2696 * _2690;
    float _2698 = _2696 * _2691;
    float _2699 = _2696 * _2692;
    float _2700 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2389].xyz));
    float _4823 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2703 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2704 = dot(vec3(_861, _862, _863), vec3(_2697, _2698, _2699));
    float _4834 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2708 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2697, _2698, _2699));
    float _4845 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2712 = _2689 * _2689;
    float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
    float _2725 = (exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2726 = 1.0 - _2689;
    float _2736 = (0.5 / (((_2625 * ((_2703 * _2726) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2726) + _2689) * _2703))) * _2703;
    float _4856 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2738 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
    float _2748 = (((_2725 * cbLight._m0[_2677].x) * _2738) * _2372) + ((((cbLight._m0[_2596].x * _2338) * _2649) * _2663) * _2385);
    float _2749 = (((_2725 * cbLight._m0[_2677].y) * _2738) * _2372) + ((((cbLight._m0[_2596].y * _2340) * _2649) * _2663) * _2385);
    float _2750 = (((_2725 * cbLight._m0[_2677].z) * _2738) * _2372) + ((((cbLight._m0[_2596].z * _2342) * _2649) * _2663) * _2385);
    float _2806;
    float _2808;
    float _2810;
    if (_2425)
    {
        _2806 = _2748;
        _2808 = _2749;
        _2810 = _2750;
    }
    else
    {
        uint _2812 = _2349 + 2u;
        uint _2816 = _2349 + 10u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _864) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _940;
        float _2833 = cbLight._m0[_2812].y + _941;
        float _2834 = cbLight._m0[_2812].z + _942;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2812].xyz));
        float _4867 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2846 = dot(vec3(_861, _862, _863), vec3(_2839, _2840, _2841));
        float _4878 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4889 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2867 = (exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2868 = 1.0 - _2831;
        float _2878 = (0.5 / (((_2625 * ((_2845 * _2868) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2868) + _2831) * _2845))) * _2845;
        float _4900 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2806 = (((_2867 * cbLight._m0[_2816].x) * _2880) * _2881) + _2748;
        _2808 = (((_2867 * cbLight._m0[_2816].y) * _2880) * _2881) + _2749;
        _2810 = (((_2867 * cbLight._m0[_2816].z) * _2880) * _2881) + _2750;
    }
    float _2912;
    float _2914;
    float _2916;
    if (_2534)
    {
        _2912 = _2806;
        _2914 = _2808;
        _2916 = _2810;
    }
    else
    {
        uint _2923 = _2349 + 3u;
        uint _2927 = _2349 + 11u;
        float _2941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2923].w)) * _864) * 0.949999988079071044921875);
        float _2942 = _2941 * _2941;
        float _2943 = cbLight._m0[_2923].x + _940;
        float _2944 = cbLight._m0[_2923].y + _941;
        float _2945 = cbLight._m0[_2923].z + _942;
        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
        float _2950 = _2949 * _2943;
        float _2951 = _2949 * _2944;
        float _2952 = _2949 * _2945;
        float _2953 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2923].xyz));
        float _4916 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2957 = dot(vec3(_861, _862, _863), vec3(_2950, _2951, _2952));
        float _4927 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2961 = dot(vec3(cbLight._m0[_2923].xyz), vec3(_2950, _2951, _2952));
        float _4938 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2965 = _2942 * _2942;
        float _2969 = ((_2960 * _2960) * (_2965 + (-1.0))) + 1.0;
        float _2978 = (exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2979 = 1.0 - _2942;
        float _2989 = (0.5 / (((_2625 * ((_2956 * _2979) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2979) + _2942) * _2956))) * _2956;
        float _4949 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2991 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2965 / ((_2969 * _2969) * 3.141590118408203125));
        float _2992 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2912 = (((_2978 * cbLight._m0[_2927].x) * _2991) * _2992) + _2806;
        _2914 = (((_2978 * cbLight._m0[_2927].y) * _2991) * _2992) + _2808;
        _2916 = (((_2978 * cbLight._m0[_2927].z) * _2991) * _2992) + _2810;
    }
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_2347.y == 0u)
    {
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.x;
        uint _3025 = uint((float(_3013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _3014))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _3014)));
        float _3035 = (log2(_2125 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3036 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        uint _3039 = uint(isnan(14.0) ? _3036 : (isnan(_3036) ? 14.0 : min(_3036, 14.0)));
        uvec4 _3044 = texelFetch(g_lightClusterGridBuffer, int(((_3039 << 2u) + (_3025 << 6u)) >> 2u));
        uint _3045 = _3044.x;
        uint _3046 = _3013.z;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((((1u << ((_3046 >> 4u) & 15u)) + 4294967295u) & _3045) == 0u) || ((_3046 & 240u) == 0u))
        {
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
        }
        else
        {
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            uint _3283 = 0u;
            uint _3292;
            bool _3293;
            for (;;)
            {
                _3292 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                _3293 = _3292 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3293)
                {
                    frontier_phi_71_pred = _3282;
                    frontier_phi_71_pred_1 = _3281;
                    frontier_phi_71_pred_2 = _3280;
                    frontier_phi_71_pred_3 = _3279;
                    frontier_phi_71_pred_4 = _3278;
                    frontier_phi_71_pred_5 = _3277;
                }
                else
                {
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    uint _3428;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3292;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    for (;;)
                    {
                        uint _3432 = uint(findLSB(_3428)) + (_3283 << 5u);
                        uint _3429 = (_3428 + 4294967295u) & _3428;
                        uint _3434 = _3432 * 48u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3454 = (_3432 * 48u) + 4u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3473 = (_3432 * 48u) + 8u;
                        vec3 _3484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x));
                        float _3488 = _3448.x - _2123;
                        float _3489 = _3448.y - _2124;
                        float _3490 = _3448.z - _2125;
                        float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                        float _3494 = inversesqrt(_3491);
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3498 = dot(vec3(_979, _982, _985), vec3(_3495, _3496, _3497));
                        float _3503 = 1.0 - (_3491 * _3448.w);
                        float _4975 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3505 = sqrt(_3491) * _3467.w;
                        float _3508 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                        float _3509 = _3508 * _3508;
                        float _3512 = ((1.0 - _3509) * _3498) + _3509;
                        float _3515 = _3505 * _3505;
                        float _3519 = ((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3504) / ((_3515 * 0.699999988079071044921875) + 1.0);
                        float _3523 = (-0.0) - _2123;
                        float _3524 = (-0.0) - _2124;
                        float _3525 = (-0.0) - _2125;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3539 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                        float _3540 = 1.0 - _1039;
                        float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                        float _3548 = _3547 * _3547;
                        float _3549 = _3548 * _3548;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3560 = dot(vec3(_979, _982, _985), vec3(_3530, _3531, _3532));
                        float _4991 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3564 = dot(vec3(_979, _982, _985), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                        float _5002 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                        float _3572 = _3508 * _3548;
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3498) + _3573;
                        float _5013 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3577 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                        float _3578 = 1.0 - _3548;
                        float _3588 = (0.5 / (((_3577 * ((_3563 * _3578) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3548) * _3563))) * _3577;
                        float _5024 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3599 = (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0)))) / ((_3571 * _3571) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125))) * _3504;
                        _3352 = (_3519 * _3467.x) + _3425;
                        _3353 = (_3519 * _3467.y) + _3426;
                        _3354 = (_3519 * _3467.z) + _3427;
                        _3349 = (_3599 * _3484.x) + _3422;
                        _3350 = (_3599 * _3484.y) + _3423;
                        _3351 = (_3599 * _3484.z) + _3424;
                        if (_3429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3429;
                        }
                    }
                    frontier_phi_71_pred = _3354;
                    frontier_phi_71_pred_1 = _3353;
                    frontier_phi_71_pred_2 = _3352;
                    frontier_phi_71_pred_3 = _3351;
                    frontier_phi_71_pred_4 = _3350;
                    frontier_phi_71_pred_5 = _3349;
                }
                _3136 = frontier_phi_71_pred;
                _3134 = frontier_phi_71_pred_1;
                _3132 = frontier_phi_71_pred_2;
                _3130 = frontier_phi_71_pred_3;
                _3128 = frontier_phi_71_pred_4;
                _3126 = frontier_phi_71_pred_5;
                uint _3284 = _3283 + 1u;
                if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3277 = _3126;
                    _3278 = _3128;
                    _3279 = _3130;
                    _3280 = _3132;
                    _3281 = _3134;
                    _3282 = _3136;
                    _3283 = _3284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
        }
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.z;
        uint _3142 = (_3140 >> 8u) & 15u;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((4294967295u << _3142) & _3045) == 0u)
        {
            _3245 = _3125;
            _3247 = _3127;
            _3249 = _3129;
            _3251 = _3131;
            _3253 = _3133;
            _3255 = _3135;
        }
        else
        {
            float _3270 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
            float _3271 = _3270 * _2123;
            float _3272 = _3270 * _2124;
            float _3273 = _3270 * _2125;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3142 < ((_3140 >> 12u) & 15u))
            {
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3405 = _3125;
                float _3406 = _3127;
                float _3407 = _3129;
                float _3408 = _3131;
                float _3409 = _3133;
                float _3410 = _3135;
                uint _3411 = _3142;
                uint _3420;
                bool _3421;
                for (;;)
                {
                    _3420 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3411 << 2u)) >> 2u)).x;
                    _3421 = _3420 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3421)
                    {
                        frontier_phi_82_pred = _3410;
                        frontier_phi_82_pred_1 = _3409;
                        frontier_phi_82_pred_2 = _3408;
                        frontier_phi_82_pred_3 = _3407;
                        frontier_phi_82_pred_4 = _3406;
                        frontier_phi_82_pred_5 = _3405;
                    }
                    else
                    {
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        uint _3632 = _3420;
                        uint _3633;
                        vec4 _3658;
                        float _3659;
                        vec4 _3674;
                        vec3 _3686;
                        vec4 _3701;
                        vec4 _3716;
                        float _3762;
                        bool _3763;
                        for (;;)
                        {
                            uint _3643 = ((_3411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3632));
                            _3633 = (_3632 + 4294967295u) & _3632;
                            uint _3645 = _3643 * 40u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3659 = _3658.w;
                            uint _3661 = (_3643 * 40u) + 4u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3643 * 40u) + 8u;
                            _3686 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x));
                            uint _3688 = (_3643 * 40u) + 16u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3643 * 40u) + 20u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3643 * 40u) + 24u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3737 = (_3643 * 40u) + 28u;
                            vec4 _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3762 = fma(_2125, _3750.z, fma(_2124, _3750.y, _3750.x * _2123)) + _3750.w;
                            _3763 = !((fma(_2125, _3731.z, fma(_2124, _3731.y, _3731.x * _2123)) + _3731.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3763)
                            {
                                float _3790 = _3658.x - _2123;
                                float _3791 = _3658.y - _2124;
                                float _3792 = _3658.z - _2125;
                                float _3793 = dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792));
                                float _3796 = inversesqrt(_3793);
                                float _3797 = _3796 * _3790;
                                float _3798 = _3796 * _3791;
                                float _3799 = _3796 * _3792;
                                float _3803 = 1.0 - (_3793 / (_3659 * _3659));
                                float _5035 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3808 = sqrt(_3793) * _3674.w;
                                float _3810 = 1.39999997615814208984375 / (_3808 + 1.39999997615814208984375);
                                float _3811 = _3810 * _3810;
                                float _3814 = ((1.0 - _3811) * dot(vec3(_3797, _3798, _3799), vec3(_979, _982, _985))) + _3811;
                                float _3817 = _3808 * _3808;
                                float _3821 = (fma(_2125, _3701.z, fma(_2124, _3701.y, _3701.x * _2123)) + _3701.w) / _3762;
                                float _3822 = (fma(_2125, _3716.z, fma(_2124, _3716.y, _3716.x * _2123)) + _3716.w) / _3762;
                                float _3826 = 1.0 - dot(vec2(_3821, _3822), vec2(_3821, _3822));
                                float _5051 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3828 = _3827 * (((isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0))) * _3804) / ((_3817 * 0.699999988079071044921875) + 1.0));
                                float _3840 = exp2(log2(1.0 / ((_3817 * 3.5) + 5.0)) * 0.25);
                                float _3841 = 1.0 - _1039;
                                float _3848 = sqrt(1.0 - ((1.0 - (_3841 * _3841)) * (1.0 - (_3840 * _3840))));
                                float _3849 = _3848 * _3848;
                                float _3850 = _3849 * _3849;
                                float _3851 = _3797 - _3271;
                                float _3852 = _3798 - _3272;
                                float _3853 = _3799 - _3273;
                                float _3857 = inversesqrt(dot(vec3(_3851, _3852, _3853), vec3(_3851, _3852, _3853)));
                                float _3861 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3271, (-0.0) - _3272, (-0.0) - _3273));
                                float _5062 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3865 = dot(vec3(_979, _982, _985), vec3(_3857 * _3851, _3857 * _3852, _3857 * _3853));
                                float _5073 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3868 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3872 = ((_3868 * _3868) * (_3850 + (-1.0))) + 1.0;
                                float _3873 = _3810 * _3849;
                                float _3874 = _3873 * _3873;
                                float _3880 = ((1.0 - _3874) * dot(vec3(_979, _982, _985), vec3(_3797, _3798, _3799))) + _3874;
                                float _5084 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3882 = 1.0 - _3849;
                                float _3892 = (0.5 / (((_3881 * ((_3864 * _3882) + _3849)) + 9.9999999392252902907785028219223e-09) + (((_3881 * _3882) + _3849) * _3864))) * _3881;
                                float _5095 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3902 = (_3827 * _3804) * (((_3850 * 3.1415927410125732421875) * (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) / ((_3872 * _3872) * ((_3817 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3828 * _3674.z;
                                frontier_phi_88_pred_1 = _3828 * _3674.y;
                                frontier_phi_88_pred_2 = _3828 * _3674.x;
                                frontier_phi_88_pred_3 = _3902 * _3686.z;
                                frontier_phi_88_pred_4 = _3902 * _3686.y;
                                frontier_phi_88_pred_5 = _3902 * _3686.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3911 = frontier_phi_88_pred;
                            _3910 = frontier_phi_88_pred_1;
                            _3909 = frontier_phi_88_pred_2;
                            _3908 = frontier_phi_88_pred_3;
                            _3907 = frontier_phi_88_pred_4;
                            _3906 = frontier_phi_88_pred_5;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            if (_3633 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3633;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3618;
                        frontier_phi_82_pred_1 = _3617;
                        frontier_phi_82_pred_2 = _3616;
                        frontier_phi_82_pred_3 = _3615;
                        frontier_phi_82_pred_4 = _3614;
                        frontier_phi_82_pred_5 = _3613;
                    }
                    _3256 = frontier_phi_82_pred;
                    _3254 = frontier_phi_82_pred_1;
                    _3252 = frontier_phi_82_pred_2;
                    _3250 = frontier_phi_82_pred_3;
                    _3248 = frontier_phi_82_pred_4;
                    _3246 = frontier_phi_82_pred_5;
                    uint _3412 = _3411 + 1u;
                    if (_3412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3405 = _3246;
                        _3406 = _3248;
                        _3407 = _3250;
                        _3408 = _3252;
                        _3409 = _3254;
                        _3410 = _3256;
                        _3411 = _3412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3252;
                frontier_phi_63_64_ladder_1 = _3256;
                frontier_phi_63_64_ladder_2 = _3254;
                frontier_phi_63_64_ladder_3 = _3250;
                frontier_phi_63_64_ladder_4 = _3248;
                frontier_phi_63_64_ladder_5 = _3246;
            }
            else
            {
                frontier_phi_63_64_ladder = _3131;
                frontier_phi_63_64_ladder_1 = _3135;
                frontier_phi_63_64_ladder_2 = _3133;
                frontier_phi_63_64_ladder_3 = _3129;
                frontier_phi_63_64_ladder_4 = _3127;
                frontier_phi_63_64_ladder_5 = _3125;
            }
            _3245 = frontier_phi_63_64_ladder_5;
            _3247 = frontier_phi_63_64_ladder_4;
            _3249 = frontier_phi_63_64_ladder_3;
            _3251 = frontier_phi_63_64_ladder;
            _3253 = frontier_phi_63_64_ladder_2;
            _3255 = frontier_phi_63_64_ladder_1;
        }
        float _3260 = isnan(1.0) ? _1023 : (isnan(_1023) ? 1.0 : min(_1023, 1.0));
        _3058 = (_3260 * _3251) + _2589;
        _3060 = (_3260 * _3253) + _2591;
        _3062 = (_3260 * _3255) + _2593;
        _3064 = ((_3245 * 0.039999999105930328369140625) * _3260) + _2912;
        _3066 = ((_3247 * 0.039999999105930328369140625) * _3260) + _2914;
        _3068 = ((_3249 * 0.039999999105930328369140625) * _3260) + _2916;
    }
    else
    {
        _3058 = _2589;
        _3060 = _2591;
        _3062 = _2593;
        _3064 = _2912;
        _3066 = _2914;
        _3068 = _2916;
    }
    float _5111 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5122 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5133 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _3085 = ((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3058 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1023))) + ((_3064 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _3086 = ((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3060 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1023))) + ((_3066 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _3087 = ((isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0))) * (_3062 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1023))) + ((_3068 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    uint _3088 = _283 + 6u;
    float _3096 = _960 / cbSceneParam._m0[86u].x;
    float _3097 = _961 / cbSceneParam._m0[86u].y;
    vec4 _3111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3113 = _3111.x;
    float _3114 = _3111.y;
    float _3115 = _3111.z;
    float _3116 = _3111.w;
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _3150 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _3151 = _3150 / _882;
        float _3162 = _3151 * _933;
        float _3163 = _934 * _3151;
        float _3164 = (-0.0) - _3163;
        float _3165 = _3151 * _935;
        float _3167 = (cbSceneParam._m0[77u].w * _3164) / _3150;
        float _3168 = _3167 + cbSceneParam._m0[79u].w;
        float _3169 = cbSceneParam._m0[79u].w - _3163;
        float _3175 = sqrt(((_3162 * _3162) + (_3163 * _3163)) + (_3165 * _3165));
        float _3178 = (1.0 - (cbSceneParam._m0[77u].w / _3150)) * _3175;
        float _3183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3362;
        if (abs((_3164 - _3167) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3362 = ((((_3168 > 0.0) ? exp2(_3183 * _3168) : (2.0 - exp2(_3185 * _3168))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3178;
        }
        else
        {
            float _3306 = 1.0 / cbSceneParam._m0[80u].x;
            float _3307 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : max(_3168, _3169));
            float _3308 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : min(_3168, _3169));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            _3362 = ((abs(_3175 / _3164) * cbSceneParam._m0[80u].y) * ((((_3317 - _3318) * 2.0) - ((exp2(_3183 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0)))) - exp2(_3183 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))))) * _3306)) - ((exp2(_3185 * _3317) - exp2(_3185 * _3318)) * _3306))) + (_3178 * cbSceneParam._m0[80u].z);
        }
        vec4 _3364 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, 1.0), 0.0);
        float _3373 = exp2((_3362 * (-1.44269502162933349609375)) * (1.0 - _3364.w));
        float _3374 = log2(_3373);
        float _3390 = log2(_3116);
        _3187 = (exp2(_3390 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].x)) * _3364.x) / cbSceneParam._m0[78u].x)) + _3113;
        _3189 = (exp2(_3390 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].y)) * _3364.y) / cbSceneParam._m0[78u].y)) + _3114;
        _3191 = (exp2(_3390 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].z)) * _3364.z) / cbSceneParam._m0[78u].z)) + _3115;
        _3193 = _3373 * _3116;
    }
    else
    {
        _3187 = _3113;
        _3189 = _3114;
        _3191 = _3115;
        _3193 = _3116;
    }
    bool _3400;
    vec4 _3203;
    vec4 _3225;
    float _3227;
    float _3231;
    float _3232;
    float _3233;
    float _3234;
    bool _3244;
    for (;;)
    {
        _3203 = cbMatDynParam._m0[0u];
        float _3205 = roundEven(_3203.y);
        bool _3206 = _3205 == 3.0;
        float _3207 = log2(_3193);
        float _3214 = exp2(_3207 * cbSceneParam._m0[78u].x) * _3085;
        float _3215 = exp2(_3207 * cbSceneParam._m0[78u].y) * _3086;
        float _3216 = exp2(_3207 * cbSceneParam._m0[78u].z) * _3087;
        float _3223 = _949 + (-0.5);
        _3225 = cbMtdParam._m0[1u];
        _3227 = _3225.y * _3223;
        float _3230 = (_3205 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3231 = _3230 * (_3206 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3187)));
        _3232 = _3230 * (_3206 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3189)));
        _3233 = _3230 * (_3206 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3191)));
        _3234 = _3223 * 0.999000012874603271484375;
        _3244 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3244)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3234) < 0.5)
            {
                _3400 = true;
                break;
            }
        }
        uint _3341 = _998 + uint(_3203.w);
        if ((cbInstanceData._m0[_3341].w < 1.0) && ((cbInstanceData._m0[_3341].w + _3234) < 0.5))
        {
            _3400 = true;
            break;
        }
        if ((_3227 + 1.0) < _3225.x)
        {
            _3400 = true;
            break;
        }
        _3400 = false;
        break;
    }
    float _3604;
    if (_3400)
    {
        discard_state = true;
        _3604 = 0.0;
    }
    else
    {
        _3604 = cbInstanceData._m0[_3088].w;
    }
    SV_Target.x = _3231;
    SV_Target.y = _3232;
    SV_Target.z = _3233;
    SV_Target.w = _3604;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3088].w;
    discard_exit();
}


