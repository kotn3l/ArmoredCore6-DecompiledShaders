#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1389;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].z) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3691 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _433 = (_426 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _434 = (_426 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _435 = (_426 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[24u].z) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3702 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _264) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _265) + cbTextureTilingScale._m0[24u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _567 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _354.z) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[24u].z) + _555) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3713 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _581 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_568 * ((_526.x * cbMtdParam._m0[14u].x) - _506)) + _506);
    float _584 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_568 * ((_526.y * cbMtdParam._m0[14u].y) - _507)) + _507);
    float _587 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_568 * ((_526.z * cbMtdParam._m0[14u].z) - _508)) + _508);
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    float _653 = ((_625.x - _644) * _426) + _644;
    float _654 = ((_625.y - _645) * _426) + _645;
    float _655 = ((_625.z - _646) * _426) + _646;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_667.x - _653) * _499) + _653;
    float _679 = ((_667.y - _654) * _499) + _654;
    float _680 = ((_667.z - _655) * _499) + _655;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _264) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _265) + cbTextureTilingScale._m0[23u].w));
    float _705 = ((_692.z - _680) * _568) + _680;
    float _708 = ((((_692.x - _678) * _568) + _678) * 2.0) + (-1.0);
    float _710 = ((((_692.y - _679) * _568) + _679) * 2.0) + (-1.0);
    float _711 = dot(vec2(_708, _710), vec2(_708, _710));
    float _3724 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _716 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _742 = (((_730.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _708;
    float _743 = (((_730.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _710;
    float _746 = fma(_716, _232, fma(_743, _239, _742 * _225));
    float _749 = fma(_716, _233, fma(_743, _240, _742 * _226));
    float _752 = fma(_716, _234, fma(_743, _241, _742 * _227));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _792 = (cbMtdParam._m0[19u].x + dot(vec4(_756 * _746, _756 * _749, _756 * _752, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_785 - _786) * cbMtdParam._m0[24u].w) + _786) * cbMtdParam._m0[21u].z);
    float _3735 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _793 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _800 = (_793 * ((_605.x * cbMtdParam._m0[18u].x) - _581)) + _581;
    float _801 = (_793 * ((_605.y * cbMtdParam._m0[18u].y) - _584)) + _584;
    float _802 = (_793 * ((_605.z * cbMtdParam._m0[18u].z) - _587)) + _587;
    float _806 = (cbMtdParam._m0[19u].w * (_730.z - _705)) + _705;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _826 = (_819.x * 2.0) + (-1.0);
    float _827 = (_819.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _3746 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _836 = ((_819.z - _806) * _793) + _806;
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _716) * _793) + _716;
    float _849 = (((_826 - _742) * _793) + _742) + (cbMtdParam._m0[21u].x * _742);
    float _850 = (((_827 - _743) * _793) + _743) + (cbMtdParam._m0[21u].x * _743);
    float _854 = cbMtdParam._m0[22u].x + _730.w;
    float _857 = fma(_846, _232, fma(_850, _239, _849 * _225));
    float _860 = fma(_846, _233, fma(_850, _240, _849 * _226));
    float _863 = fma(_846, _234, fma(_850, _241, _849 * _227));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _3757 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _871 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _3779 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3790 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3801 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _977 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _980 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _994 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1000 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_994].x;
    float _1001 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_994].y;
    float _1002 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_994].z;
    float _3812 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _1014 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1018 = ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * TEXCOORD_5.w) * _1014.x;
    float _1019 = dot(vec3(_868, _869, _870), vec3(_947, _948, _949));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _868) - _947;
    float _1027 = (_1022 * _869) - _948;
    float _1028 = (_1022 * _870) - _949;
    float _1032 = abs(dot(vec3(_947, _948, _949), vec3(_868, _869, _870)));
    float _3845 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_871);
    float _1047 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1388;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1117 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1121 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1146 = _1079 + _868;
        float _1147 = _1083 + _869;
        float _1148 = _1087 + _870;
        float _1158 = fma(_1148, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146)) - _1113;
        float _1159 = fma(_1148, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146)) - _1117;
        float _1160 = fma(_1148, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146)) - _1121;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1216 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1182.x + (-0.5));
        float _1218 = _1216 * (_1182.y + (-0.5));
        float _1219 = _1216 * (_1182.z + (-0.5));
        float _1226 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1189.x + (-0.5));
        float _1228 = _1226 * (_1189.y + (-0.5));
        float _1229 = _1226 * (_1189.z + (-0.5));
        float _1236 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1196.x + (-0.5));
        float _1238 = _1236 * (_1196.y + (-0.5));
        float _1239 = _1236 * (_1196.z + (-0.5));
        float _1246 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1203.x + (-0.5));
        float _1248 = _1246 * (_1203.y + (-0.5));
        float _1249 = _1246 * (_1203.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1270 = (dot(vec3(_868, _869, _870), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1280 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3893 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1282 + 1.0))) + _1287) * _1250;
        float _1297 = _1218 * 0.5;
        float _1298 = _1228 * 0.5;
        float _1299 = _1238 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_868, _869, _870), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3926 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1324 + 1.0))) + _1329) * _1251;
        float _1339 = _1219 * 0.5;
        float _1340 = _1229 * 0.5;
        float _1341 = _1239 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_868, _869, _870), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3959 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1366 + 1.0))) + _1371) * _1252;
        _1388 = _1219;
        _1390 = _1218;
        _1391 = _1217;
        _1392 = _1229;
        _1393 = _1228;
        _1394 = _1227;
        _1395 = _1239;
        _1396 = _1238;
        _1397 = _1237;
        _1398 = _1252;
        _1399 = _1251;
        _1400 = _1250;
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1389;
        _1390 = _1389;
        _1391 = _1389;
        _1392 = _1389;
        _1393 = _1389;
        _1394 = _1389;
        _1395 = _1389;
        _1396 = _1389;
        _1397 = _1389;
        _1398 = _1389;
        _1399 = _1389;
        _1400 = _1389;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1430 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1434 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1457 = _1079 + _868;
        float _1458 = _1083 + _869;
        float _1459 = _1087 + _870;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_868, _869, _870), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4022 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_868, _869, _870), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4055 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_868, _869, _870), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4088 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1389;
        _1696 = _1389;
        _1697 = _1389;
        _1698 = _1389;
        _1699 = _1389;
        _1700 = _1389;
        _1701 = _1389;
        _1702 = _1389;
        _1703 = _1389;
        _1704 = _1389;
        _1705 = _1389;
        _1706 = _1389;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1401)) + _1401;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1402)) + _1402;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1403)) + _1403;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1026 * 0.5;
    float _1764 = _1027 * 0.5;
    float _1765 = _1028 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1388, _1392, _1395, _1398));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1893 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1896 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1924 = frontier_phi_14_12_ladder;
        }
        float _2124;
        if (_1893 > 0.0)
        {
            _2124 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2124 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1896 > 0.0)
        {
            _2367 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2124) ? _1924 : (isnan(_1924) ? _2124 : min(_1924, _2124));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1890) + _1879;
        float _2375 = (_2370 * _1893) + _1883;
        float _2376 = (_2370 * _1896) + _1887;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_13_35_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_13_35_ladder_2;
        _1914 = frontier_phi_13_35_ladder_1;
        _1916 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1832);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _1988 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _1991 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2129;
        if (_1985 > 0.0)
        {
            _2129 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2129 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1988 > 0.0)
        {
            _2394 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2599;
        if (_1991 > 0.0)
        {
            _2599 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2599 = frontier_phi_46_43_ladder;
        }
        float _2601 = isnan(_2394) ? _2129 : (isnan(_2129) ? _2394 : min(_2129, _2394));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1985) + _1974;
        float _2607 = (_2602 * _1988) + _1978;
        float _2608 = (_2602 * _1991) + _1982;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_22_46_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_22_46_ladder_2;
        _2012 = frontier_phi_22_46_ladder_1;
        _2014 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1921);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2026 = ((((1.0 - _1047) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1047 * _1034)) * _1018;
    float _2027 = _2026 * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2028 = _2026 * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2029 = _2026 * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    uvec4 _2048 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2050 = _2048.x * 14u;
    uint _2051 = _2050 + 13u;
    float _2058 = _1018 + (-1.0);
    float _2063 = (cbLight._m0[_2051].x * _2058) + 1.0;
    float _2064 = (cbLight._m0[_2051].y * _2058) + 1.0;
    float _2065 = (cbLight._m0[_2051].z * _2058) + 1.0;
    float _2066 = (cbLight._m0[_2051].w * _2058) + 1.0;
    uint _2067 = _2050 + 5u;
    float _2073 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2077 = _2050 + 4u;
    float _2083 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2087 = _2050 | 1u;
    float _2098 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_868, _869, _870));
    float _2101 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_868, _869, _870));
    float _4224 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _4235 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2106 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2108 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2115 = ((cbLight._m0[_2067].x * _2073) * _2108) + ((cbLight._m0[_2077].x * _2083) * _2106);
    float _2116 = ((_2073 * cbLight._m0[_2067].y) * _2108) + ((_2083 * cbLight._m0[_2077].y) * _2106);
    float _2117 = ((_2073 * cbLight._m0[_2067].z) * _2108) + ((_2083 * cbLight._m0[_2077].z) * _2106);
    uvec4 _2121 = floatBitsToUint(cbLight._m0[_2050 + 12u]);
    bool _2123 = _2121.x == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2123)
    {
        _2134 = _2115;
        _2136 = _2116;
        _2138 = _2117;
    }
    else
    {
        uint _2142 = _2050 + 6u;
        float _2158 = (dot(vec3(cbLight._m0[_2050 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4246 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2161 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2134 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _2115;
        _2136 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _2116;
        _2138 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _2117;
    }
    bool _2141 = _2121.y == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2141)
    {
        _2179 = _2134;
        _2181 = _2136;
        _2183 = _2138;
    }
    else
    {
        uint _2338 = _2050 + 7u;
        float _2354 = (dot(vec3(cbLight._m0[_2050 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4262 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2357 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2179 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2134;
        _2181 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2136;
        _2183 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2138;
    }
    uint _2186 = _2050 + 8u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _871) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_2050].x + _947;
    float _2202 = cbLight._m0[_2050].y + _948;
    float _2203 = cbLight._m0[_2050].z + _949;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2050].xyz));
    float _4278 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2215 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2216 = dot(vec3(_868, _869, _870), vec3(_2208, _2209, _2210));
    float _4300 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2208, _2209, _2210));
    float _4311 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2200 * _2200;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2240 = 1.0 - _2200;
    float _2251 = (0.5 / (((_2215 * ((_2214 * _2240) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2240) + _2200) * _2214))) * _2214;
    float _4322 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    uint _2264 = _2050 + 9u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _871) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2087].x + _947;
    float _2278 = cbLight._m0[_2087].y + _948;
    float _2279 = cbLight._m0[_2087].z + _949;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2087].xyz));
    float _4333 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2291 = dot(vec3(_868, _869, _870), vec3(_2284, _2285, _2286));
    float _4344 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2284, _2285, _2286));
    float _4355 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2276 * _2276;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2313 = 1.0 - _2276;
    float _2323 = (0.5 / (((_2215 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2313) + _2276) * _2290))) * _2290;
    float _4366 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    float _2335 = (((_2312 * cbLight._m0[_2264].x) * _2325) * _2073) + (((_2239 * cbLight._m0[_2186].x) * _2253) * _2083);
    float _2336 = (((_2312 * cbLight._m0[_2264].y) * _2325) * _2073) + (((_2239 * cbLight._m0[_2186].y) * _2253) * _2083);
    float _2337 = (((_2312 * cbLight._m0[_2264].z) * _2325) * _2073) + (((_2239 * cbLight._m0[_2186].z) * _2253) * _2083);
    float _2399;
    float _2401;
    float _2403;
    if (_2123)
    {
        _2399 = _2335;
        _2401 = _2336;
        _2403 = _2337;
    }
    else
    {
        uint _2405 = _2050 + 2u;
        uint _2409 = _2050 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _871) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _947;
        float _2426 = cbLight._m0[_2405].y + _948;
        float _2427 = cbLight._m0[_2405].z + _949;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2405].xyz));
        float _4377 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2439 = dot(vec3(_868, _869, _870), vec3(_2432, _2433, _2434));
        float _4388 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4399 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2461 = 1.0 - _2424;
        float _2471 = (0.5 / (((_2215 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2461) + _2424) * _2438))) * _2438;
        float _4410 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2399 = (((_2460 * cbLight._m0[_2409].x) * _2473) * _2474) + _2335;
        _2401 = (((_2460 * cbLight._m0[_2409].y) * _2473) * _2474) + _2336;
        _2403 = (((_2460 * cbLight._m0[_2409].z) * _2473) * _2474) + _2337;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2141)
    {
        _2509 = _2399;
        _2511 = _2401;
        _2513 = _2403;
    }
    else
    {
        uint _2520 = _2050 + 3u;
        uint _2524 = _2050 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _871) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _947;
        float _2541 = cbLight._m0[_2520].y + _948;
        float _2542 = cbLight._m0[_2520].z + _949;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2520].xyz));
        float _4426 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2554 = dot(vec3(_868, _869, _870), vec3(_2547, _2548, _2549));
        float _4437 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4448 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2215 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2576) + _2539) * _2553))) * _2553;
        float _4459 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2509 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2399;
        _2511 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2401;
        _2513 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2403;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_2048.y == 0u)
    {
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2664;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2664;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2664;
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _2680)));
        float _2701 = (log2(_2667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            uint _2963 = 0u;
            uint _2972;
            bool _2973;
            for (;;)
            {
                _2972 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                _2973 = _2972 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2973)
                {
                    frontier_phi_61_pred = _2957;
                    frontier_phi_61_pred_1 = _2962;
                    frontier_phi_61_pred_2 = _2961;
                    frontier_phi_61_pred_3 = _2960;
                    frontier_phi_61_pred_4 = _2959;
                    frontier_phi_61_pred_5 = _2958;
                }
                else
                {
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    uint _3087;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2972;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3091 = uint(findLSB(_3087)) + (_2963 << 5u);
                        uint _3088 = (_3087 + 4294967295u) & _3087;
                        uint _3093 = _3091 * 48u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3113 = (_3091 * 48u) + 4u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3132 = (_3091 * 48u) + 8u;
                        vec3 _3143 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x));
                        float _3147 = _3107.x - _2665;
                        float _3148 = _3107.y - _2666;
                        float _3149 = _3107.z - _2667;
                        float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                        float _3153 = inversesqrt(_3150);
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3157 = dot(vec3(_974, _977, _980), vec3(_3154, _3155, _3156));
                        float _3162 = 1.0 - (_3150 * _3107.w);
                        float _4485 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3164 = sqrt(_3150) * _3126.w;
                        float _3167 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3157) + _3168;
                        float _3174 = _3164 * _3164;
                        float _3178 = ((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3163) / ((_3174 * 0.699999988079071044921875) + 1.0);
                        float _3182 = (-0.0) - _2665;
                        float _3183 = (-0.0) - _2666;
                        float _3184 = (-0.0) - _2667;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3199 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                        float _3200 = 1.0 - _1034;
                        float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                        float _3208 = _3207 * _3207;
                        float _3209 = _3208 * _3208;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3220 = dot(vec3(_974, _977, _980), vec3(_3189, _3190, _3191));
                        float _4501 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3224 = dot(vec3(_974, _977, _980), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                        float _4512 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                        float _3232 = _3167 * _3208;
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3157) + _3233;
                        float _4523 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3238 = 1.0 - _3208;
                        float _3248 = (0.5 / (((_3237 * ((_3223 * _3238) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3208) * _3223))) * _3237;
                        float _4534 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3259 = (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3231 * _3231) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125))) * _3163;
                        _3016 = (_3178 * _3126.x) + _3084;
                        _3017 = (_3178 * _3126.y) + _3085;
                        _3018 = (_3178 * _3126.z) + _3086;
                        _3013 = (_3259 * _3143.x) + _3081;
                        _3014 = (_3259 * _3143.y) + _3082;
                        _3015 = (_3259 * _3143.z) + _3083;
                        if (_3088 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3088;
                        }
                    }
                    frontier_phi_61_pred = _3013;
                    frontier_phi_61_pred_1 = _3018;
                    frontier_phi_61_pred_2 = _3017;
                    frontier_phi_61_pred_3 = _3016;
                    frontier_phi_61_pred_4 = _3015;
                    frontier_phi_61_pred_5 = _3014;
                }
                _2813 = frontier_phi_61_pred;
                _2823 = frontier_phi_61_pred_1;
                _2821 = frontier_phi_61_pred_2;
                _2819 = frontier_phi_61_pred_3;
                _2817 = frontier_phi_61_pred_4;
                _2815 = frontier_phi_61_pred_5;
                uint _2964 = _2963 + 1u;
                if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2957 = _2813;
                    _2958 = _2815;
                    _2959 = _2817;
                    _2960 = _2819;
                    _2961 = _2821;
                    _2962 = _2823;
                    _2963 = _2964;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((4294967295u << _2829) & _2711) == 0u)
        {
            _2925 = _2812;
            _2927 = _2814;
            _2929 = _2816;
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
        }
        else
        {
            float _2950 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
            float _2951 = _2950 * _2665;
            float _2952 = _2950 * _2666;
            float _2953 = _2950 * _2667;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _3064 = _2812;
                float _3065 = _2814;
                float _3066 = _2816;
                float _3067 = _2818;
                float _3068 = _2820;
                float _3069 = _2822;
                uint _3070 = _2829;
                uint _3079;
                bool _3080;
                for (;;)
                {
                    _3079 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                    _3080 = _3079 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3080)
                    {
                        frontier_phi_67_pred = _3067;
                        frontier_phi_67_pred_1 = _3068;
                        frontier_phi_67_pred_2 = _3069;
                        frontier_phi_67_pred_3 = _3066;
                        frontier_phi_67_pred_4 = _3065;
                        frontier_phi_67_pred_5 = _3064;
                    }
                    else
                    {
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        uint _3283 = _3079;
                        uint _3284;
                        vec4 _3309;
                        float _3310;
                        vec4 _3325;
                        vec3 _3337;
                        vec4 _3352;
                        vec4 _3367;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3294 = ((_3070 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3283));
                            _3284 = (_3283 + 4294967295u) & _3283;
                            uint _3296 = _3294 * 40u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.w;
                            uint _3312 = (_3294 * 40u) + 4u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3294 * 40u) + 8u;
                            _3337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x));
                            uint _3339 = (_3294 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3294 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3294 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3294 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_2667, _3401.z, fma(_2666, _3401.y, _3401.x * _2665)) + _3401.w;
                            _3414 = !((fma(_2667, _3382.z, fma(_2666, _3382.y, _3382.x * _2665)) + _3382.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3309.x - _2665;
                                float _3442 = _3309.y - _2666;
                                float _3443 = _3309.z - _2667;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3310 * _3310));
                                float _4545 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3459 = sqrt(_3444) * _3325.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_974, _977, _980))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_2667, _3352.z, fma(_2666, _3352.y, _3352.x * _2665)) + _3352.w) / _3413;
                                float _3473 = (fma(_2667, _3367.z, fma(_2666, _3367.y, _3367.x * _2665)) + _3367.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4561 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _1034;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2951;
                                float _3503 = _3449 - _2952;
                                float _3504 = _3450 - _2953;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_974, _977, _980), vec3((-0.0) - _2951, (-0.0) - _2952, (-0.0) - _2953));
                                float _4572 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3516 = dot(vec3(_974, _977, _980), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4583 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_974, _977, _980), vec3(_3448, _3449, _3450))) + _3525;
                                float _4594 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4605 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3553 * _3337.x;
                                frontier_phi_73_pred_1 = _3553 * _3337.y;
                                frontier_phi_73_pred_2 = _3479 * _3325.z;
                                frontier_phi_73_pred_3 = _3479 * _3325.y;
                                frontier_phi_73_pred_4 = _3479 * _3325.x;
                                frontier_phi_73_pred_5 = _3553 * _3337.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_73_pred;
                            _3558 = frontier_phi_73_pred_1;
                            _3562 = frontier_phi_73_pred_2;
                            _3561 = frontier_phi_73_pred_3;
                            _3560 = frontier_phi_73_pred_4;
                            _3559 = frontier_phi_73_pred_5;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            if (_3284 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3284;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3267;
                        frontier_phi_67_pred_1 = _3268;
                        frontier_phi_67_pred_2 = _3269;
                        frontier_phi_67_pred_3 = _3266;
                        frontier_phi_67_pred_4 = _3265;
                        frontier_phi_67_pred_5 = _3264;
                    }
                    _2932 = frontier_phi_67_pred;
                    _2934 = frontier_phi_67_pred_1;
                    _2936 = frontier_phi_67_pred_2;
                    _2930 = frontier_phi_67_pred_3;
                    _2928 = frontier_phi_67_pred_4;
                    _2926 = frontier_phi_67_pred_5;
                    uint _3071 = _3070 + 1u;
                    if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3064 = _2926;
                        _3065 = _2928;
                        _3066 = _2930;
                        _3067 = _2932;
                        _3068 = _2934;
                        _3069 = _2936;
                        _3070 = _3071;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            else
            {
                frontier_phi_55_56_ladder = _2820;
                frontier_phi_55_56_ladder_1 = _2822;
                frontier_phi_55_56_ladder_2 = _2818;
                frontier_phi_55_56_ladder_3 = _2816;
                frontier_phi_55_56_ladder_4 = _2814;
                frontier_phi_55_56_ladder_5 = _2812;
            }
            _2925 = frontier_phi_55_56_ladder_5;
            _2927 = frontier_phi_55_56_ladder_4;
            _2929 = frontier_phi_55_56_ladder_3;
            _2931 = frontier_phi_55_56_ladder_2;
            _2933 = frontier_phi_55_56_ladder;
            _2935 = frontier_phi_55_56_ladder_1;
        }
        float _2940 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _2724 = (_2940 * _2931) + _2179;
        _2726 = (_2940 * _2933) + _2181;
        _2728 = (_2940 * _2935) + _2183;
        _2730 = ((_2925 * 0.039999999105930328369140625) * _2940) + _2509;
        _2732 = ((_2927 * 0.039999999105930328369140625) * _2940) + _2511;
        _2734 = ((_2929 * 0.039999999105930328369140625) * _2940) + _2513;
    }
    else
    {
        _2724 = _2179;
        _2726 = _2181;
        _2728 = _2183;
        _2730 = _2509;
        _2732 = _2511;
        _2734 = _2513;
    }
    float _4621 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4632 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4643 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    uint _2754 = _244 + 6u;
    float _2762 = _955 / cbSceneParam._m0[86u].x;
    float _2763 = _956 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2838 = _2837 / _889;
        float _2849 = _2838 * _940;
        float _2850 = _941 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2853 = _2838 * _942;
        float _2855 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2850;
        float _2863 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2851 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2986 = 1.0 / cbSceneParam._m0[80u].x;
            float _2987 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2988 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            _3026 = ((abs(_2863 / _2851) * cbSceneParam._m0[80u].y) * ((((_2997 - _2998) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))))) * _2986)) - ((exp2(_2873 * _2997) - exp2(_2873 * _2998)) * _2986))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2782);
        _2875 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2877 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2879 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2881 = _3037 * _2782;
    }
    else
    {
        _2875 = _2779;
        _2877 = _2780;
        _2879 = _2781;
        _2881 = _2782;
    }
    float _2893 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2894 = _2893 == 3.0;
    float _2895 = log2(_2881);
    float _2902 = exp2(_2895 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2724 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1018))) + ((_2730 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2903 = exp2(_2895 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2726 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1018))) + ((_2732 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2904 = exp2(_2895 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2728 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1018))) + ((_2734 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2913 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2913 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.y = _2913 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.z = _2913 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.w = cbInstanceData._m0[_2754].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
}


