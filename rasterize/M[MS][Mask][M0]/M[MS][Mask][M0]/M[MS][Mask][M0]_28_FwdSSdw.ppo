#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1351;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3680 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3691 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3702 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3713 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _448 = (_441 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _449 = (_441 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _450 = (_441 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _454 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _448;
    float _457 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _449;
    float _460 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _450;
    float _467 = ((_448 - _454) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _454;
    float _468 = ((_449 - _457) * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) + _457;
    float _469 = ((_450 - _460) * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) + _460;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _544 = ((_514.z - _535) * _441) + _535;
    float _547 = ((((_514.x - _533) * _441) + _533) * 2.0) + (-1.0);
    float _548 = ((((_514.y - _534) * _441) + _534) * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3724 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _586 = (_547 + ((((_487.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_574.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _587 = (_548 + ((((_487.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_574.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = fma(_554, _244, fma(_587, _251, _586 * _237));
    float _593 = fma(_554, _245, fma(_587, _252, _586 * _238));
    float _596 = fma(_554, _246, fma(_587, _253, _586 * _239));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _636 = (cbMtdParam._m0[19u].x + dot(vec4(_600 * _590, _600 * _593, _600 * _596, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_629 - _630) * cbMtdParam._m0[24u].w) + _630) * cbMtdParam._m0[21u].z);
    float _3735 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _639 = (-0.0) - cbMtdParam._m0[24u].x;
    float _641 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _641 : (isnan(_641) ? 1.0 : min(_641, 1.0));
    float _649 = _637 - ((_637 * TEXCOORD_8.x) * _642);
    float _650 = _637 - ((_637 * TEXCOORD_8.y) * _642);
    float _651 = _637 - ((_637 * TEXCOORD_8.z) * _642);
    float _658 = (_649 * (cbMtdParam._m0[17u].x - _467)) + _467;
    float _659 = (_650 * (cbMtdParam._m0[17u].y - _468)) + _468;
    float _660 = (_651 * (cbMtdParam._m0[17u].z - _469)) + _469;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _701 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_674 - _675) * cbMtdParam._m0[24u].y) + _675) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3756 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _710 = ((((cbMtdParam._m0[10u].x - _658) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _702) + _658;
    float _711 = ((((cbMtdParam._m0[10u].y - _659) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _702) + _659;
    float _712 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _660)) * _702) + _660;
    float _717 = (((_487.z - _544) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _544;
    float _721 = ((_574.z - _717) * cbMtdParam._m0[19u].w) + _717;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _742 = (_735.x * 2.0) + (-1.0);
    float _743 = (_735.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3767 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _752 = ((_735.z - _721) * _649) + _721;
    float _755 = ((cbMtdParam._m0[23u].y - _752) * _702) + _752;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _780 = (_774.x * 2.0) + (-1.0);
    float _781 = (_774.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3778 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _797 = ((sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) - _554) * _651) + _554;
    float _800 = (((_742 - _586) * _649) + _586) + (cbMtdParam._m0[21u].x * _586);
    float _801 = (((_743 - _587) * _650) + _587) + (cbMtdParam._m0[21u].x * _587);
    float _812 = (((_780 - _800) + (_800 * cbMtdParam._m0[22u].z)) * _702) + _800;
    float _813 = (((_781 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _702) + _801;
    float _814 = (_702 * (sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _797)) + _797;
    float _816 = cbMtdParam._m0[22u].x + _574.w;
    float _819 = fma(_814, _244, fma(_813, _251, _812 * _237));
    float _822 = fma(_814, _245, fma(_813, _252, _812 * _238));
    float _825 = fma(_814, _246, fma(_813, _253, _812 * _239));
    float _829 = inversesqrt(dot(vec3(_819, _822, _825), vec3(_819, _822, _825)));
    float _830 = _829 * _819;
    float _831 = _829 * _822;
    float _832 = _829 * _825;
    float _3789 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _833 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _3811 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3822 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3833 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _902 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _892);
    float _903 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _892);
    float _904 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _892);
    float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
    float _909 = _902 * _908;
    float _910 = _903 * _908;
    float _911 = _904 * _908;
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_832, cbSceneParam._m0[5u].z, fma(_831, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _830));
    float _939 = fma(_832, cbSceneParam._m0[6u].z, fma(_831, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _830));
    float _942 = fma(_832, cbSceneParam._m0[7u].z, fma(_831, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _830));
    uint _956 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_956].z;
    float _3844 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _980 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_830, _831, _832), vec3(_909, _910, _911));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _830) - _909;
    float _989 = (_984 * _831) - _910;
    float _990 = (_984 * _832) - _911;
    float _994 = abs(dot(vec3(_909, _910, _911), vec3(_830, _831, _832)));
    float _3877 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_833);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1079 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1083 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1108 = _1041 + _830;
        float _1109 = _1045 + _831;
        float _1110 = _1049 + _832;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_830, _831, _832), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3925 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_830, _831, _832), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3958 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_830, _831, _832), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3991 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1390 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1394 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1398 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1421 = _1041 + _830;
        float _1422 = _1045 + _831;
        float _1423 = _1049 + _832;
        float _1433 = fma(_1423, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421)) - _1390;
        float _1434 = fma(_1423, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421)) - _1394;
        float _1435 = fma(_1423, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421)) - _1398;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1390 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1394 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[35u].z) + ((((((_1398 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1489 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1456.x + (-0.5));
        float _1491 = _1489 * (_1456.y + (-0.5));
        float _1492 = _1489 * (_1456.z + (-0.5));
        float _1499 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1463.x + (-0.5));
        float _1501 = _1499 * (_1463.y + (-0.5));
        float _1502 = _1499 * (_1463.z + (-0.5));
        float _1509 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1470.x + (-0.5));
        float _1511 = _1509 * (_1470.y + (-0.5));
        float _1512 = _1509 * (_1470.z + (-0.5));
        float _1519 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1477.x + (-0.5));
        float _1521 = _1519 * (_1477.y + (-0.5));
        float _1522 = _1519 * (_1477.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_830, _831, _832), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4054 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1553 + 1.0))) + _1558) * _1523;
        float _1568 = _1491 * 0.5;
        float _1569 = _1501 * 0.5;
        float _1570 = _1511 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_830, _831, _832), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4087 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1595 + 1.0))) + _1600) * _1524;
        float _1610 = _1492 * 0.5;
        float _1611 = _1502 * 0.5;
        float _1612 = _1512 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_830, _831, _832), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4120 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1637 + 1.0))) + _1642) * _1525;
        _1659 = _1492;
        _1660 = _1491;
        _1661 = _1490;
        _1662 = _1502;
        _1663 = _1501;
        _1664 = _1500;
        _1665 = _1512;
        _1666 = _1511;
        _1667 = _1510;
        _1668 = _1525;
        _1669 = _1524;
        _1670 = _1523;
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1351;
        _1660 = _1351;
        _1661 = _1351;
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = _1351;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1363)) + _1363;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1364)) + _1364;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1365)) + _1365;
    float _1706 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1683));
    float _1727 = _988 * 0.5;
    float _1728 = _989 * 0.5;
    float _1729 = _990 * 0.5;
    float _1730 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1733 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1736 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1770;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1743 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1747 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1751 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1758 = dot(vec4(cbModelParam._m0[39u]), vec4(_1727, _1728, _1729, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1781;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1772 = dot(vec4(cbModelParam._m0[40u]), vec4(_1727, _1728, _1729, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1785 = (_1781 * cbModelParam._m0[1u].x) + (_1770 * (1.0 - cbModelParam._m0[1u].x));
    float _1795 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _833);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1795 : min(cbModelParam._m0[25u].z, _1795));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1858 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1861 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1889 = frontier_phi_14_12_ladder;
        }
        float _2111;
        if (_1858 > 0.0)
        {
            _2111 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2111 = frontier_phi_23_19_ladder;
        }
        float _2357;
        if (_1861 > 0.0)
        {
            _2357 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2357 = frontier_phi_35_30_ladder;
        }
        float _2359 = isnan(_2111) ? _1889 : (isnan(_1889) ? _2111 : min(_1889, _2111));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1855) + _1844;
        float _2365 = (_2360 * _1858) + _1848;
        float _2366 = (_2360 * _1861) + _1852;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1796);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_13_35_ladder_2;
        _1879 = frontier_phi_13_35_ladder_1;
        _1881 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1796);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _833);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1954 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1957 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2116;
        if (_1951 > 0.0)
        {
            _2116 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2384;
        if (_1954 > 0.0)
        {
            _2384 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2384 = frontier_phi_37_32_ladder;
        }
        float _2589;
        if (_1957 > 0.0)
        {
            _2589 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2589 = frontier_phi_46_43_ladder;
        }
        float _2591 = isnan(_2384) ? _2116 : (isnan(_2116) ? _2384 : min(_2116, _2384));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1951) + _1940;
        float _2597 = (_2592 * _1954) + _1944;
        float _2598 = (_2592 * _1957) + _1948;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_22_46_ladder = _2797.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2797.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2797.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_22_46_ladder_2;
        _1978 = frontier_phi_22_46_ladder_1;
        _1980 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1886);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1992 = ((((1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1009 * _996)) * _980;
    float _1993 = _1992 * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1994 = _1992 * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1995 = _1992 * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    vec4 _2012 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_917, _918));
    float _2014 = _2012.w;
    float _2026 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2014);
    float _2027 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2014);
    float _2028 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2014);
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _980 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2070 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2074 = _2034 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_830, _831, _832));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_830, _831, _832));
    float _4256 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4267 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2051].x * _2057) * _2095) + (((cbLight._m0[_2061].x * _2026) * _2070) * _2093);
    float _2103 = ((_2057 * cbLight._m0[_2051].y) * _2095) + (((cbLight._m0[_2061].y * _2027) * _2070) * _2093);
    float _2104 = ((_2057 * cbLight._m0[_2051].z) * _2095) + (((cbLight._m0[_2061].z * _2028) * _2070) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2034 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4278 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2148 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2328 = _2034 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4294 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2347 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2166 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2121;
        _2168 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2123;
        _2170 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2125;
    }
    uint _2173 = _2034 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _833) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2034].x + _909;
    float _2189 = cbLight._m0[_2034].y + _910;
    float _2190 = cbLight._m0[_2034].z + _911;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2034].xyz));
    float _4310 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _4321 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2202 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2203 = dot(vec3(_830, _831, _832), vec3(_2195, _2196, _2197));
    float _4332 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2195, _2196, _2197));
    float _4343 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2202 * ((_2201 * _2227) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2227) + _2187) * _2201))) * _2201;
    float _4354 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2254 = _2034 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _833) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2074].x + _909;
    float _2268 = cbLight._m0[_2074].y + _910;
    float _2269 = cbLight._m0[_2074].z + _911;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2074].xyz));
    float _4365 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2281 = dot(vec3(_830, _831, _832), vec3(_2274, _2275, _2276));
    float _4376 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2274, _2275, _2276));
    float _4387 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2266;
    float _2313 = (0.5 / (((_2202 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2303) + _2266) * _2280))) * _2280;
    float _4398 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2325 = (((_2302 * cbLight._m0[_2254].x) * _2315) * _2057) + ((((cbLight._m0[_2173].x * _2026) * _2226) * _2240) * _2070);
    float _2326 = (((_2302 * cbLight._m0[_2254].y) * _2315) * _2057) + ((((cbLight._m0[_2173].y * _2027) * _2226) * _2240) * _2070);
    float _2327 = (((_2302 * cbLight._m0[_2254].z) * _2315) * _2057) + ((((cbLight._m0[_2173].z * _2028) * _2226) * _2240) * _2070);
    float _2389;
    float _2391;
    float _2393;
    if (_2110)
    {
        _2389 = _2325;
        _2391 = _2326;
        _2393 = _2327;
    }
    else
    {
        uint _2395 = _2034 + 2u;
        uint _2399 = _2034 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _833) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _909;
        float _2416 = cbLight._m0[_2395].y + _910;
        float _2417 = cbLight._m0[_2395].z + _911;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2395].xyz));
        float _4409 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2429 = dot(vec3(_830, _831, _832), vec3(_2422, _2423, _2424));
        float _4420 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4431 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2202 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2451) + _2414) * _2428))) * _2428;
        float _4442 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2389 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2325;
        _2391 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2326;
        _2393 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2327;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2128)
    {
        _2499 = _2389;
        _2501 = _2391;
        _2503 = _2393;
    }
    else
    {
        uint _2510 = _2034 + 3u;
        uint _2514 = _2034 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _833) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _909;
        float _2531 = cbLight._m0[_2510].y + _910;
        float _2532 = cbLight._m0[_2510].z + _911;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2510].xyz));
        float _4458 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2544 = dot(vec3(_830, _831, _832), vec3(_2537, _2538, _2539));
        float _4469 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4480 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2566 = 1.0 - _2529;
        float _2576 = (0.5 / (((_2202 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2566) + _2529) * _2543))) * _2543;
        float _4491 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2499 = (((_2565 * cbLight._m0[_2514].x) * _2578) * _2579) + _2389;
        _2501 = (((_2565 * cbLight._m0[_2514].y) * _2578) * _2579) + _2391;
        _2503 = (((_2565 * cbLight._m0[_2514].z) * _2578) * _2579) + _2393;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2032.y == 0u)
    {
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2654;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2654;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2654;
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2670)));
        float _2691 = (log2(_2657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2962)
                {
                    frontier_phi_61_pred = _2946;
                    frontier_phi_61_pred_1 = _2951;
                    frontier_phi_61_pred_2 = _2950;
                    frontier_phi_61_pred_3 = _2949;
                    frontier_phi_61_pred_4 = _2948;
                    frontier_phi_61_pred_5 = _2947;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2961;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2952 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _2655;
                        float _3137 = _3096.y - _2656;
                        float _3138 = _3096.z - _2657;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_936, _939, _942), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4517 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _2655;
                        float _3172 = (-0.0) - _2656;
                        float _3173 = (-0.0) - _2657;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3188 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _996;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_936, _939, _942), vec3(_3178, _3179, _3180));
                        float _4533 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3213 = dot(vec3(_936, _939, _942), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4544 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3156 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3146) + _3222;
                        float _4555 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4566 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3248 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3220 * _3220) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3005 = (_3167 * _3115.x) + _3073;
                        _3006 = (_3167 * _3115.y) + _3074;
                        _3007 = (_3167 * _3115.z) + _3075;
                        _3002 = (_3248 * _3132.x) + _3070;
                        _3003 = (_3248 * _3132.y) + _3071;
                        _3004 = (_3248 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_61_pred = _3002;
                    frontier_phi_61_pred_1 = _3007;
                    frontier_phi_61_pred_2 = _3006;
                    frontier_phi_61_pred_3 = _3005;
                    frontier_phi_61_pred_4 = _3004;
                    frontier_phi_61_pred_5 = _3003;
                }
                _2803 = frontier_phi_61_pred;
                _2813 = frontier_phi_61_pred_1;
                _2811 = frontier_phi_61_pred_2;
                _2809 = frontier_phi_61_pred_3;
                _2807 = frontier_phi_61_pred_4;
                _2805 = frontier_phi_61_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2803;
                    _2947 = _2805;
                    _2948 = _2807;
                    _2949 = _2809;
                    _2950 = _2811;
                    _2951 = _2813;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2819) & _2701) == 0u)
        {
            _2914 = _2802;
            _2916 = _2804;
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
            float _2940 = _2939 * _2655;
            float _2941 = _2939 * _2656;
            float _2942 = _2939 * _2657;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3053 = _2802;
                float _3054 = _2804;
                float _3055 = _2806;
                float _3056 = _2808;
                float _3057 = _2810;
                float _3058 = _2812;
                uint _3059 = _2819;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3069)
                    {
                        frontier_phi_67_pred = _3056;
                        frontier_phi_67_pred_1 = _3057;
                        frontier_phi_67_pred_2 = _3058;
                        frontier_phi_67_pred_3 = _3055;
                        frontier_phi_67_pred_4 = _3054;
                        frontier_phi_67_pred_5 = _3053;
                    }
                    else
                    {
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        float _3269 = _3056;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        uint _3272 = _3068;
                        uint _3273;
                        vec4 _3298;
                        float _3299;
                        vec4 _3314;
                        vec3 _3326;
                        vec4 _3341;
                        vec4 _3356;
                        float _3402;
                        bool _3403;
                        for (;;)
                        {
                            uint _3283 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3272));
                            _3273 = (_3272 + 4294967295u) & _3272;
                            uint _3285 = _3283 * 40u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3299 = _3298.w;
                            uint _3301 = (_3283 * 40u) + 4u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3316 = (_3283 * 40u) + 8u;
                            _3326 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x));
                            uint _3328 = (_3283 * 40u) + 16u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3283 * 40u) + 20u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3283 * 40u) + 24u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3377 = (_3283 * 40u) + 28u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3402 = fma(_2657, _3390.z, fma(_2656, _3390.y, _3390.x * _2655)) + _3390.w;
                            _3403 = !((fma(_2657, _3371.z, fma(_2656, _3371.y, _3371.x * _2655)) + _3371.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3403)
                            {
                                float _3430 = _3298.x - _2655;
                                float _3431 = _3298.y - _2656;
                                float _3432 = _3298.z - _2657;
                                float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                                float _3436 = inversesqrt(_3433);
                                float _3437 = _3436 * _3430;
                                float _3438 = _3436 * _3431;
                                float _3439 = _3436 * _3432;
                                float _3443 = 1.0 - (_3433 / (_3299 * _3299));
                                float _4577 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3448 = sqrt(_3433) * _3314.w;
                                float _3450 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                                float _3451 = _3450 * _3450;
                                float _3454 = ((1.0 - _3451) * dot(vec3(_3437, _3438, _3439), vec3(_936, _939, _942))) + _3451;
                                float _3457 = _3448 * _3448;
                                float _3461 = (fma(_2657, _3341.z, fma(_2656, _3341.y, _3341.x * _2655)) + _3341.w) / _3402;
                                float _3462 = (fma(_2657, _3356.z, fma(_2656, _3356.y, _3356.x * _2655)) + _3356.w) / _3402;
                                float _3466 = 1.0 - dot(vec2(_3461, _3462), vec2(_3461, _3462));
                                float _4593 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3468 = _3467 * (((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3444) / ((_3457 * 0.699999988079071044921875) + 1.0));
                                float _3480 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                                float _3481 = 1.0 - _996;
                                float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                                float _3489 = _3488 * _3488;
                                float _3490 = _3489 * _3489;
                                float _3491 = _3437 - _2940;
                                float _3492 = _3438 - _2941;
                                float _3493 = _3439 - _2942;
                                float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                                float _3501 = dot(vec3(_936, _939, _942), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4604 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3505 = dot(vec3(_936, _939, _942), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                                float _4615 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                                float _3513 = _3450 * _3489;
                                float _3514 = _3513 * _3513;
                                float _3520 = ((1.0 - _3514) * dot(vec3(_936, _939, _942), vec3(_3437, _3438, _3439))) + _3514;
                                float _4626 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3522 = 1.0 - _3489;
                                float _3532 = (0.5 / (((_3521 * ((_3504 * _3522) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3489) * _3504))) * _3521;
                                float _4637 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3542 = (_3467 * _3444) * (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3512 * _3512) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3542 * _3326.x;
                                frontier_phi_73_pred_1 = _3542 * _3326.y;
                                frontier_phi_73_pred_2 = _3468 * _3314.z;
                                frontier_phi_73_pred_3 = _3468 * _3314.y;
                                frontier_phi_73_pred_4 = _3468 * _3314.x;
                                frontier_phi_73_pred_5 = _3542 * _3326.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3546 = frontier_phi_73_pred;
                            _3547 = frontier_phi_73_pred_1;
                            _3551 = frontier_phi_73_pred_2;
                            _3550 = frontier_phi_73_pred_3;
                            _3549 = frontier_phi_73_pred_4;
                            _3548 = frontier_phi_73_pred_5;
                            _3256 = _3549 + _3269;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            if (_3273 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3273;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3256;
                        frontier_phi_67_pred_1 = _3257;
                        frontier_phi_67_pred_2 = _3258;
                        frontier_phi_67_pred_3 = _3255;
                        frontier_phi_67_pred_4 = _3254;
                        frontier_phi_67_pred_5 = _3253;
                    }
                    _2921 = frontier_phi_67_pred;
                    _2923 = frontier_phi_67_pred_1;
                    _2925 = frontier_phi_67_pred_2;
                    _2919 = frontier_phi_67_pred_3;
                    _2917 = frontier_phi_67_pred_4;
                    _2915 = frontier_phi_67_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2915;
                        _3054 = _2917;
                        _3055 = _2919;
                        _3056 = _2921;
                        _3057 = _2923;
                        _3058 = _2925;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2923;
                frontier_phi_55_56_ladder_1 = _2925;
                frontier_phi_55_56_ladder_2 = _2921;
                frontier_phi_55_56_ladder_3 = _2919;
                frontier_phi_55_56_ladder_4 = _2917;
                frontier_phi_55_56_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_55_56_ladder = _2810;
                frontier_phi_55_56_ladder_1 = _2812;
                frontier_phi_55_56_ladder_2 = _2808;
                frontier_phi_55_56_ladder_3 = _2806;
                frontier_phi_55_56_ladder_4 = _2804;
                frontier_phi_55_56_ladder_5 = _2802;
            }
            _2914 = frontier_phi_55_56_ladder_5;
            _2916 = frontier_phi_55_56_ladder_4;
            _2918 = frontier_phi_55_56_ladder_3;
            _2920 = frontier_phi_55_56_ladder_2;
            _2922 = frontier_phi_55_56_ladder;
            _2924 = frontier_phi_55_56_ladder_1;
        }
        float _2929 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2714 = (_2929 * _2920) + _2166;
        _2716 = (_2929 * _2922) + _2168;
        _2718 = (_2929 * _2924) + _2170;
        _2720 = ((_2914 * 0.039999999105930328369140625) * _2929) + _2499;
        _2722 = ((_2916 * 0.039999999105930328369140625) * _2929) + _2501;
        _2724 = ((_2918 * 0.039999999105930328369140625) * _2929) + _2503;
    }
    else
    {
        _2714 = _2166;
        _2716 = _2168;
        _2718 = _2170;
        _2720 = _2499;
        _2722 = _2501;
        _2724 = _2503;
    }
    float _4653 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4664 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4675 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    uint _2744 = _275 + 6u;
    float _2752 = _917 / cbSceneParam._m0[86u].x;
    float _2753 = _918 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _2828 = _2827 / _851;
        float _2839 = _2828 * _902;
        float _2840 = _903 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2842 = _2828 * _904;
        float _2844 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2840;
        float _2852 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2841 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2977 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3015 = ((abs(_2852 / _2841) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2862 * _2986) - exp2(_2862 * _2987)) * _2975))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2772);
        _2864 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2866 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2868 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2870 = _3026 * _2772;
    }
    else
    {
        _2864 = _2769;
        _2866 = _2770;
        _2868 = _2771;
        _2870 = _2772;
    }
    float _2882 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2883 = _2882 == 3.0;
    float _2884 = log2(_2870);
    float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2714 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _980))) + ((_2720 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2716 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _980))) + ((_2722 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2718 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _980))) + ((_2724 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1785)) * cbPerFrame._m0[3u].x));
    float _2902 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2902 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.y = _2902 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.z = _2902 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.w = cbInstanceData._m0[_2744].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
}


