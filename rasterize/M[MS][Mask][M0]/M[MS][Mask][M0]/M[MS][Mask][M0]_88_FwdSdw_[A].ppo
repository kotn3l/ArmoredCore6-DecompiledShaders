#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1499;
float _4139;
float _4140;
float _4141;
float _4142;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4151 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4162 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4173 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _430 = _428.x;
    float _442 = dot(vec4(_430, _428.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _459 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_430 - _442) * cbMtdParam._m0[24u].z) + _442) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4184 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _467 = (_460 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _468 = (_460 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _469 = (_460 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _486 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _508 = _506.x;
    float _518 = dot(vec4(_508, _506.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _532 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_508 - _518) * cbMtdParam._m0[24u].z) + _518) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4195 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _540 = (_533 * ((_486.x * cbMtdParam._m0[13u].x) - _467)) + _467;
    float _541 = (_533 * ((_486.y * cbMtdParam._m0[13u].y) - _468)) + _468;
    float _542 = (_533 * ((_486.z * cbMtdParam._m0[13u].z) - _469)) + _469;
    float _546 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _540;
    float _549 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _541;
    float _552 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _542;
    float _559 = ((_540 - _546) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) + _546;
    float _560 = ((_541 - _549) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _549;
    float _561 = ((_542 - _552) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _552;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _460) + _641;
    float _651 = ((_622.y - _642) * _460) + _642;
    float _652 = ((_622.z - _643) * _460) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _533) + _652;
    float _680 = ((((_664.x - _650) * _533) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _533) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _4206 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _728 = _726.x;
    float _729 = 1.0 - _728;
    float _735 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _738 = ((isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : min(_735, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _747 = (_738 - ((((((_728 - _729) * cbMtdParam._m0[24u].w) + _729) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _738))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4227 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _755 = (_748 * ((_580.x * cbMtdParam._m0[18u].x) - _559)) + _559;
    float _756 = (_748 * ((_580.y * cbMtdParam._m0[18u].y) - _560)) + _560;
    float _757 = (_748 * ((_580.z * cbMtdParam._m0[18u].z) - _561)) + _561;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _797 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_771 - _772) * cbMtdParam._m0[24u].y) + _772) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4238 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _806 = ((((cbMtdParam._m0[10u].x - _755) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _798) + _755;
    float _807 = ((((cbMtdParam._m0[10u].y - _756) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _798) + _756;
    float _808 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _757)) * _798) + _757;
    float _813 = (((_599.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _817 = ((_701.z - _813) * cbMtdParam._m0[19u].w) + _813;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _838 = (_831.x * 2.0) + (-1.0);
    float _839 = (_831.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _4249 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _848 = (_748 * (_831.z - _817)) + _817;
    float _851 = ((cbMtdParam._m0[23u].y - _848) * _798) + _848;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _878 = (_872.x * 2.0) + (-1.0);
    float _879 = (_872.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _4260 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _894 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_599.x * 2.0) + (-1.0)))) + (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _895 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_599.y * 2.0) + (-1.0)))) + (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _907 = (((_838 - _894) + (cbMtdParam._m0[21u].x * _894)) * _748) + _894;
    float _908 = (((_839 - _895) + (cbMtdParam._m0[21u].x * _895)) * _748) + _895;
    float _909 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) - _687)) + _687;
    float _920 = (((_878 - _907) + (_907 * cbMtdParam._m0[22u].z)) * _798) + _907;
    float _921 = (((_879 - _908) + (_908 * cbMtdParam._m0[22u].z)) * _798) + _908;
    float _922 = ((sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _909) * _798) + _909;
    float _924 = cbMtdParam._m0[22u].x + _701.w;
    float _927 = fma(_922, _259 * NORMAL.x, fma(_921, _266 * TANGENT.x, (_252 * _244) * _920));
    float _930 = fma(_922, _259 * NORMAL.y, fma(_921, _266 * TANGENT.y, (_252 * _245) * _920));
    float _933 = fma(_922, _259 * NORMAL.z, fma(_921, _266 * TANGENT.z, (_252 * _246) * _920));
    float _937 = inversesqrt(dot(vec3(_927, _930, _933), vec3(_927, _930, _933)));
    float _938 = _937 * _927;
    float _939 = _937 * _930;
    float _940 = _937 * _933;
    float _4271 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _941 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4293 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4304 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4315 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _959 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1010 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1000);
    float _1011 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1000);
    float _1012 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1000);
    float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
    float _1017 = _1010 * _1016;
    float _1018 = _1011 * _1016;
    float _1019 = _1012 * _1016;
    vec4 _1024 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1026 = _1024.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1180 = sqrt(((_1010 * _1010) + (_1011 * _1011)) + (_1012 * _1012));
        float _1186 = (cbMatDynParam._m0[5u].x * _1180) + cbMatDynParam._m0[5u].y;
        float _4326 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1191 = (cbMatDynParam._m0[5u].z * _1180) + cbMatDynParam._m0[5u].w;
        float _4337 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) - _1187)) + _1187) < ((_1026 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1037 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1038 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1056 = fma(_940, cbSceneParam._m0[5u].z, fma(_939, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _938));
    float _1059 = fma(_940, cbSceneParam._m0[6u].z, fma(_939, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _938));
    float _1062 = fma(_940, cbSceneParam._m0[7u].z, fma(_939, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _938));
    uint _1075 = _291 + 9u;
    uint _1076 = _1075 + uint(cbMatDynParam._m0[0u].w);
    float _1082 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * cbInstanceData._m0[_1076].x;
    float _1083 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1076].y;
    float _1084 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1076].z;
    float _4348 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1037, cbSceneParam._m0[86u].y * _1038));
    float _1100 = ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * TEXCOORD_5.w) * _1096.x;
    float _1101 = dot(vec3(_938, _939, _940), vec3(_1017, _1018, _1019));
    float _1104 = _1101 * 2.0;
    float _1108 = (_1104 * _938) - _1017;
    float _1109 = (_1104 * _939) - _1018;
    float _1110 = (_1104 * _940) - _1019;
    float _1114 = abs(dot(vec3(_1017, _1018, _1019), vec3(_938, _939, _940)));
    float _4381 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = sqrt(_941);
    float _1129 = exp2((_1116 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1116 * 3.0));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1227 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1231 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1256 = _1161 + _938;
        float _1257 = _1165 + _939;
        float _1258 = _1169 + _940;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1223;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1227;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1231;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_938, _939, _940), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4429 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_938, _939, _940), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4462 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_938, _939, _940), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4495 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1544 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1548 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1571 = _1161 + _938;
        float _1572 = _1165 + _939;
        float _1573 = _1169 + _940;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_938, _939, _940), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4558 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_938, _939, _940), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4591 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_938, _939, _940), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4624 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1499;
        _1810 = _1499;
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = _1499;
        _1820 = _1499;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1512)) + _1512;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1108 * 0.5;
    float _1878 = _1109 * 0.5;
    float _1879 = _1110 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1920;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1920 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1920 = 1.0;
    }
    float _1931;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1922 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1935 = (_1931 * cbModelParam._m0[1u].x) + (_1920 * (1.0 - cbModelParam._m0[1u].x));
    float _1945 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _941);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1945 : min(cbModelParam._m0[25u].z, _1945));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1993 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1997 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _2001 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _2004 = fma(_1110, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108));
        float _2007 = fma(_1110, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108));
        float _2010 = fma(_1110, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108));
        float _2038;
        if (_2004 > 0.0)
        {
            _2038 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2038 = frontier_phi_17_15_ladder;
        }
        float _2207;
        if (_2007 > 0.0)
        {
            _2207 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2207 = frontier_phi_26_22_ladder;
        }
        float _2502;
        if (_2010 > 0.0)
        {
            _2502 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2502 = frontier_phi_38_33_ladder;
        }
        float _2504 = isnan(_2207) ? _2038 : (isnan(_2038) ? _2207 : min(_2038, _2207));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _2004) + _1993;
        float _2510 = (_2505 * _2007) + _1997;
        float _2511 = (_2505 * _2010) + _2001;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2512;
        float _2516 = _2512 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 > _2516) || ((_2510 < _2514) || ((_2509 < _2514) || (_2509 > _2516))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2511, cbModelParam._m0[9u].z, fma(_2510, cbModelParam._m0[9u].y, _2509 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2511, cbModelParam._m0[10u].z, fma(_2510, cbModelParam._m0[10u].y, _2509 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2511, cbModelParam._m0[11u].z, fma(_2510, cbModelParam._m0[11u].y, _2509 * cbModelParam._m0[11u].x))), _1946);
            frontier_phi_16_38_ladder = _2656.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2656.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2656.x * cbModelParam._m0[1u].y;
        }
        _2026 = frontier_phi_16_38_ladder_2;
        _2028 = frontier_phi_16_38_ladder_1;
        _2030 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1108, _1109, _1110), _1946);
        _2026 = _2014.x * cbModelParam._m0[1u].y;
        _2028 = _2014.y * cbModelParam._m0[1u].y;
        _2030 = _2014.z * cbModelParam._m0[1u].y;
    }
    float _2034 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _941);
    float _2035 = isnan(_2034) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2034 : min(cbModelParam._m0[25u].w, _2034));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2088 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2092 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2096 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2099 = fma(_1110, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108));
        float _2102 = fma(_1110, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108));
        float _2105 = fma(_1110, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108));
        float _2212;
        if (_2099 > 0.0)
        {
            _2212 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2212 = frontier_phi_28_24_ladder;
        }
        float _2529;
        if (_2102 > 0.0)
        {
            _2529 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2529 = frontier_phi_40_35_ladder;
        }
        float _2856;
        if (_2105 > 0.0)
        {
            _2856 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2856 = frontier_phi_50_47_ladder;
        }
        float _2858 = isnan(_2529) ? _2212 : (isnan(_2212) ? _2529 : min(_2212, _2529));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2099) + _2088;
        float _2864 = (_2859 * _2102) + _2092;
        float _2865 = (_2859 * _2105) + _2096;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2035);
            frontier_phi_25_50_ladder = _2983.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2983.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2983.x * cbModelParam._m0[1u].z;
        }
        _2124 = frontier_phi_25_50_ladder_2;
        _2126 = frontier_phi_25_50_ladder_1;
        _2128 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1108, _1109, _1110), _2035);
        _2124 = _2108.x * cbModelParam._m0[1u].z;
        _2126 = _2108.y * cbModelParam._m0[1u].z;
        _2128 = _2108.z * cbModelParam._m0[1u].z;
    }
    float _2140 = ((((1.0 - _1129) * ((_1116 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1129 * _1116)) * _1100;
    float _2141 = _2140 * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2142 = _2140 * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2143 = _2140 * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2146 = fma(_2143, cbSceneParam._m0[89u].z, fma(_2142, cbSceneParam._m0[89u].y, _2141 * cbSceneParam._m0[89u].x));
    float _2149 = fma(_2143, cbSceneParam._m0[90u].z, fma(_2142, cbSceneParam._m0[90u].y, _2141 * cbSceneParam._m0[90u].x));
    float _2152 = fma(_2143, cbSceneParam._m0[91u].z, fma(_2142, cbSceneParam._m0[91u].y, _2141 * cbSceneParam._m0[91u].x));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2199 = _2186 / _2198;
    float _2200 = _2190 / _2198;
    float _2201 = _2194 / _2198;
    float _2348;
    float _2349;
    float _2350;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2228 = ((uint(_2201 > cbSceneParam._m0[59u].y) + uint(_2201 > cbSceneParam._m0[59u].x)) + uint(_2201 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2229 = _2228 + 43u;
        uint _2237 = _2228 + 44u;
        uint _2245 = _2228 + 45u;
        uint _2253 = _2228 + 46u;
        float _2264 = fma(_2198, cbSceneParam._m0[_2229].w, fma(_2194, cbSceneParam._m0[_2229].z, fma(_2190, cbSceneParam._m0[_2229].y, _2186 * cbSceneParam._m0[_2229].x)));
        float _2268 = fma(_2198, cbSceneParam._m0[_2237].w, fma(_2194, cbSceneParam._m0[_2237].z, fma(_2190, cbSceneParam._m0[_2237].y, _2186 * cbSceneParam._m0[_2237].x)));
        float _2276 = fma(_2198, cbSceneParam._m0[_2253].w, fma(_2194, cbSceneParam._m0[_2253].z, fma(_2190, cbSceneParam._m0[_2253].y, _2186 * cbSceneParam._m0[_2253].x)));
        float _2281 = cbSceneParam._m0[33u].z * _2276;
        float _2283 = cbSceneParam._m0[33u].w * _2276;
        float _2286 = fma(_2198, cbSceneParam._m0[_2245].w, fma(_2194, cbSceneParam._m0[_2245].z, fma(_2190, cbSceneParam._m0[_2245].y, _2186 * cbSceneParam._m0[_2245].x))) / _2276;
        float _2334 = (cbSceneParam._m0[33u].x - sqrt(((_2200 * _2200) + (_2199 * _2199)) + (_2201 * _2201))) * cbSceneParam._m0[33u].y;
        float _4750 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2341 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 + _2264) / _2276, (_2283 + _2268) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2283 + _2264) / _2276, (_2268 - _2281) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 - _2281) / _2276, (_2268 - _2283) / _2276), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 - _2283) / _2276, (_2281 + _2268) / _2276), _2286), 0.0)).x), vec4(0.25)));
        _2348 = 1.0 - (_2341 * cbSceneParam._m0[34u].x);
        _2349 = 1.0 - (_2341 * cbSceneParam._m0[34u].y);
        _2350 = 1.0 - (_2341 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2348 = 1.0;
        _2349 = 1.0;
        _2350 = 1.0;
    }
    float _2414;
    float _2416;
    float _2418;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2402 = fma(_2198, cbSceneParam._m0[63u].w, fma(_2194, cbSceneParam._m0[63u].z, fma(_2190, cbSceneParam._m0[63u].y, _2186 * cbSceneParam._m0[63u].x)));
        float _2403 = fma(_2198, cbSceneParam._m0[60u].w, fma(_2194, cbSceneParam._m0[60u].z, fma(_2190, cbSceneParam._m0[60u].y, _2186 * cbSceneParam._m0[60u].x))) / _2402;
        float _2404 = fma(_2198, cbSceneParam._m0[61u].w, fma(_2194, cbSceneParam._m0[61u].z, fma(_2190, cbSceneParam._m0[61u].y, _2186 * cbSceneParam._m0[61u].x))) / _2402;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2403 >= cbSceneParam._m0[64u].x) && (_2404 >= cbSceneParam._m0[64u].y)) && (_2403 <= cbSceneParam._m0[64u].z)) && (_2404 <= cbSceneParam._m0[64u].w))
        {
            float _2542 = fma(_2198, cbSceneParam._m0[62u].w, fma(_2194, cbSceneParam._m0[62u].z, fma(_2190, cbSceneParam._m0[62u].y, _2186 * cbSceneParam._m0[62u].x))) / _2402;
            float _2546 = isnan(cbSceneParam._m0[41u].w) ? _2542 : (isnan(_2542) ? cbSceneParam._m0[41u].w : max(_2542, cbSceneParam._m0[41u].w));
            float _2589 = (cbSceneParam._m0[33u].x - sqrt(((_2200 * _2200) + (_2199 * _2199)) + (_2201 * _2201))) * cbSceneParam._m0[33u].y;
            float _4766 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
            float _2596 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2403, cbSceneParam._m0[33u].w + _2404), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2403, _2404 - cbSceneParam._m0[33u].z), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2403 - cbSceneParam._m0[33u].z, _2404 - cbSceneParam._m0[33u].w), _2546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2403 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2404), _2546), 0.0)).x), vec4(0.25)));
            float _2600 = 1.0 - (_2596 * cbSceneParam._m0[34u].x);
            float _2601 = 1.0 - (_2596 * cbSceneParam._m0[34u].y);
            float _2602 = 1.0 - (_2596 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2602) ? _2350 : (isnan(_2350) ? _2602 : min(_2350, _2602));
            frontier_phi_37_36_ladder_1 = isnan(_2601) ? _2349 : (isnan(_2349) ? _2601 : min(_2349, _2601));
            frontier_phi_37_36_ladder_2 = isnan(_2600) ? _2348 : (isnan(_2348) ? _2600 : min(_2348, _2600));
        }
        else
        {
            frontier_phi_37_36_ladder = _2350;
            frontier_phi_37_36_ladder_1 = _2349;
            frontier_phi_37_36_ladder_2 = _2348;
        }
        _2414 = frontier_phi_37_36_ladder_2;
        _2416 = frontier_phi_37_36_ladder_1;
        _2418 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2414 = _2348;
        _2416 = _2349;
        _2418 = _2350;
    }
    uvec4 _2423 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2425 = _2423.x * 14u;
    uint _2426 = _2425 + 13u;
    float _2433 = _1100 + (-1.0);
    float _2438 = (cbLight._m0[_2426].x * _2433) + 1.0;
    float _2439 = (cbLight._m0[_2426].y * _2433) + 1.0;
    float _2440 = (cbLight._m0[_2426].z * _2433) + 1.0;
    float _2441 = (cbLight._m0[_2426].w * _2433) + 1.0;
    uint _2442 = _2425 + 5u;
    float _2448 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
    uint _2452 = _2425 + 4u;
    float _2461 = isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0));
    uint _2465 = _2425 | 1u;
    float _2476 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_938, _939, _940));
    float _2479 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_938, _939, _940));
    float _4802 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _4813 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2484 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2486 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * 0.3183098733425140380859375;
    float _2493 = ((cbLight._m0[_2442].x * _2448) * _2486) + (((cbLight._m0[_2452].x * _2414) * _2461) * _2484);
    float _2494 = ((_2448 * cbLight._m0[_2442].y) * _2486) + (((cbLight._m0[_2452].y * _2416) * _2461) * _2484);
    float _2495 = ((_2448 * cbLight._m0[_2442].z) * _2486) + (((cbLight._m0[_2452].z * _2418) * _2461) * _2484);
    uvec4 _2499 = floatBitsToUint(cbLight._m0[_2425 + 12u]);
    bool _2501 = _2499.x == 0u;
    float _2603;
    float _2605;
    float _2607;
    if (_2501)
    {
        _2603 = _2493;
        _2605 = _2494;
        _2607 = _2495;
    }
    else
    {
        uint _2611 = _2425 + 6u;
        float _2627 = (dot(vec3(cbLight._m0[_2425 + 2u].xyz), vec3(_938, _939, _940)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4824 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2630 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2603 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2493;
        _2605 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2494;
        _2607 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2495;
    }
    bool _2610 = _2499.y == 0u;
    float _2665;
    float _2667;
    float _2669;
    if (_2610)
    {
        _2665 = _2603;
        _2667 = _2605;
        _2669 = _2607;
    }
    else
    {
        uint _2827 = _2425 + 7u;
        float _2843 = (dot(vec3(cbLight._m0[_2425 + 3u].xyz), vec3(_938, _939, _940)) * 0.5) + 0.5;
        float _2844 = _2843 * _2843;
        float _4840 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2845 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2846 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _2665 = (((cbLight._m0[_2827].x * 0.3183098733425140380859375) * _2845) * _2846) + _2603;
        _2667 = (((cbLight._m0[_2827].y * 0.3183098733425140380859375) * _2845) * _2846) + _2605;
        _2669 = (((cbLight._m0[_2827].z * 0.3183098733425140380859375) * _2845) * _2846) + _2607;
    }
    uint _2672 = _2425 + 8u;
    float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _941) * 0.949999988079071044921875);
    float _2686 = _2685 * _2685;
    float _2687 = cbLight._m0[_2425].x + _1017;
    float _2688 = cbLight._m0[_2425].y + _1018;
    float _2689 = cbLight._m0[_2425].z + _1019;
    float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
    float _2694 = _2693 * _2687;
    float _2695 = _2693 * _2688;
    float _2696 = _2693 * _2689;
    float _2697 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2425].xyz));
    float _4856 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _4867 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2701 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2702 = dot(vec3(_938, _939, _940), vec3(_2694, _2695, _2696));
    float _4878 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2694, _2695, _2696));
    float _4889 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2686 * _2686;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2725 = (exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2726 = 1.0 - _2686;
    float _2737 = (0.5 / (((_2701 * ((_2700 * _2726) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2726) + _2686) * _2700))) * _2700;
    float _4900 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2739 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    uint _2753 = _2425 + 9u;
    float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _941) * 0.949999988079071044921875);
    float _2765 = _2764 * _2764;
    float _2766 = cbLight._m0[_2465].x + _1017;
    float _2767 = cbLight._m0[_2465].y + _1018;
    float _2768 = cbLight._m0[_2465].z + _1019;
    float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
    float _2773 = _2772 * _2766;
    float _2774 = _2772 * _2767;
    float _2775 = _2772 * _2768;
    float _2776 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2465].xyz));
    float _4911 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2780 = dot(vec3(_938, _939, _940), vec3(_2773, _2774, _2775));
    float _4922 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2783 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2784 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2773, _2774, _2775));
    float _4933 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2788 = _2765 * _2765;
    float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
    float _2801 = (exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2802 = 1.0 - _2765;
    float _2812 = (0.5 / (((_2701 * ((_2779 * _2802) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2802) + _2765) * _2779))) * _2779;
    float _4944 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2814 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
    float _2824 = (((_2801 * cbLight._m0[_2753].x) * _2814) * _2448) + ((((cbLight._m0[_2672].x * _2414) * _2725) * _2739) * _2461);
    float _2825 = (((_2801 * cbLight._m0[_2753].y) * _2814) * _2448) + ((((cbLight._m0[_2672].y * _2416) * _2725) * _2739) * _2461);
    float _2826 = (((_2801 * cbLight._m0[_2753].z) * _2814) * _2448) + ((((cbLight._m0[_2672].z * _2418) * _2725) * _2739) * _2461);
    float _2882;
    float _2884;
    float _2886;
    if (_2501)
    {
        _2882 = _2824;
        _2884 = _2825;
        _2886 = _2826;
    }
    else
    {
        uint _2888 = _2425 + 2u;
        uint _2892 = _2425 + 10u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _941) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _1017;
        float _2909 = cbLight._m0[_2888].y + _1018;
        float _2910 = cbLight._m0[_2888].z + _1019;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2888].xyz));
        float _4955 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2922 = dot(vec3(_938, _939, _940), vec3(_2915, _2916, _2917));
        float _4966 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4977 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2943 = (exp2(log2(1.0 - (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2944 = 1.0 - _2907;
        float _2954 = (0.5 / (((_2701 * ((_2921 * _2944) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2944) + _2907) * _2921))) * _2921;
        float _4988 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2956 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2957 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2882 = (((_2943 * cbLight._m0[_2892].x) * _2956) * _2957) + _2824;
        _2884 = (((_2943 * cbLight._m0[_2892].y) * _2956) * _2957) + _2825;
        _2886 = (((_2943 * cbLight._m0[_2892].z) * _2956) * _2957) + _2826;
    }
    float _2988;
    float _2990;
    float _2992;
    if (_2610)
    {
        _2988 = _2882;
        _2990 = _2884;
        _2992 = _2886;
    }
    else
    {
        uint _2999 = _2425 + 3u;
        uint _3003 = _2425 + 11u;
        float _3017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2999].w)) * _941) * 0.949999988079071044921875);
        float _3018 = _3017 * _3017;
        float _3019 = cbLight._m0[_2999].x + _1017;
        float _3020 = cbLight._m0[_2999].y + _1018;
        float _3021 = cbLight._m0[_2999].z + _1019;
        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
        float _3026 = _3025 * _3019;
        float _3027 = _3025 * _3020;
        float _3028 = _3025 * _3021;
        float _3029 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2999].xyz));
        float _5004 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _3033 = dot(vec3(_938, _939, _940), vec3(_3026, _3027, _3028));
        float _5015 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _3037 = dot(vec3(cbLight._m0[_2999].xyz), vec3(_3026, _3027, _3028));
        float _5026 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3041 = _3018 * _3018;
        float _3045 = ((_3036 * _3036) * (_3041 + (-1.0))) + 1.0;
        float _3054 = (exp2(log2(1.0 - (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3055 = 1.0 - _3018;
        float _3065 = (0.5 / (((_2701 * ((_3032 * _3055) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _3055) + _3018) * _3032))) * _3032;
        float _5037 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3067 = (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3041 / ((_3045 * _3045) * 3.141590118408203125));
        float _3068 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
        _2988 = (((_3054 * cbLight._m0[_3003].x) * _3067) * _3068) + _2882;
        _2990 = (((_3054 * cbLight._m0[_3003].y) * _3067) * _3068) + _2884;
        _2992 = (((_3054 * cbLight._m0[_3003].z) * _3067) * _3068) + _2886;
    }
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_2423.y == 0u)
    {
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.x;
        uint _3101 = uint((float(_3089.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1038) / _3090))) + floor(float(uint(cbSceneParam._m0[85u].x * _1037) / _3090)));
        float _3111 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3112 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        uint _3115 = uint(isnan(14.0) ? _3112 : (isnan(_3112) ? 14.0 : min(_3112, 14.0)));
        uvec4 _3120 = texelFetch(g_lightClusterGridBuffer, int(((_3115 << 2u) + (_3101 << 6u)) >> 2u));
        uint _3121 = _3120.x;
        uint _3122 = _3089.z;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((((1u << ((_3122 >> 4u) & 15u)) + 4294967295u) & _3121) == 0u) || ((_3122 & 240u) == 0u))
        {
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
        }
        else
        {
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            uint _3360 = 0u;
            uint _3369;
            bool _3370;
            for (;;)
            {
                _3369 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                _3370 = _3369 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3370)
                {
                    frontier_phi_71_pred = _3359;
                    frontier_phi_71_pred_1 = _3358;
                    frontier_phi_71_pred_2 = _3357;
                    frontier_phi_71_pred_3 = _3356;
                    frontier_phi_71_pred_4 = _3355;
                    frontier_phi_71_pred_5 = _3354;
                }
                else
                {
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    uint _3505;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3369;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    for (;;)
                    {
                        uint _3509 = uint(findLSB(_3505)) + (_3360 << 5u);
                        uint _3506 = (_3505 + 4294967295u) & _3505;
                        uint _3511 = _3509 * 48u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 3u)).x));
                        uint _3531 = (_3509 * 48u) + 4u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 3u)).x));
                        uint _3550 = (_3509 * 48u) + 8u;
                        vec3 _3561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x));
                        float _3565 = _3525.x - _2199;
                        float _3566 = _3525.y - _2200;
                        float _3567 = _3525.z - _2201;
                        float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                        float _3571 = inversesqrt(_3568);
                        float _3572 = _3571 * _3565;
                        float _3573 = _3571 * _3566;
                        float _3574 = _3571 * _3567;
                        float _3575 = dot(vec3(_1056, _1059, _1062), vec3(_3572, _3573, _3574));
                        float _3580 = 1.0 - (_3568 * _3525.w);
                        float _5063 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3582 = sqrt(_3568) * _3544.w;
                        float _3585 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                        float _3586 = _3585 * _3585;
                        float _3589 = ((1.0 - _3586) * _3575) + _3586;
                        float _3592 = _3582 * _3582;
                        float _3596 = ((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3581) / ((_3592 * 0.699999988079071044921875) + 1.0);
                        float _3600 = (-0.0) - _2199;
                        float _3601 = (-0.0) - _2200;
                        float _3602 = (-0.0) - _2201;
                        float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                        float _3607 = _3606 * _3600;
                        float _3608 = _3606 * _3601;
                        float _3609 = _3606 * _3602;
                        float _3616 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                        float _3617 = 1.0 - _1116;
                        float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                        float _3625 = _3624 * _3624;
                        float _3626 = _3625 * _3625;
                        float _3627 = _3607 + _3572;
                        float _3628 = _3608 + _3573;
                        float _3629 = _3609 + _3574;
                        float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                        float _3637 = dot(vec3(_1056, _1059, _1062), vec3(_3607, _3608, _3609));
                        float _5079 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3640 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3641 = dot(vec3(_1056, _1059, _1062), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                        float _5090 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3644 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                        float _3649 = _3585 * _3625;
                        float _3650 = _3649 * _3649;
                        float _3653 = ((1.0 - _3650) * _3575) + _3650;
                        float _5101 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3654 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3655 = 1.0 - _3625;
                        float _3665 = (0.5 / (((_3654 * ((_3640 * _3655) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3625) * _3640))) * _3654;
                        float _5112 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3676 = (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0)))) / ((_3648 * _3648) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125))) * _3581;
                        _3429 = (_3596 * _3544.x) + _3502;
                        _3430 = (_3596 * _3544.y) + _3503;
                        _3431 = (_3596 * _3544.z) + _3504;
                        _3426 = (_3676 * _3561.x) + _3499;
                        _3427 = (_3676 * _3561.y) + _3500;
                        _3428 = (_3676 * _3561.z) + _3501;
                        if (_3506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3506;
                        }
                    }
                    frontier_phi_71_pred = _3431;
                    frontier_phi_71_pred_1 = _3430;
                    frontier_phi_71_pred_2 = _3429;
                    frontier_phi_71_pred_3 = _3428;
                    frontier_phi_71_pred_4 = _3427;
                    frontier_phi_71_pred_5 = _3426;
                }
                _3212 = frontier_phi_71_pred;
                _3210 = frontier_phi_71_pred_1;
                _3208 = frontier_phi_71_pred_2;
                _3206 = frontier_phi_71_pred_3;
                _3204 = frontier_phi_71_pred_4;
                _3202 = frontier_phi_71_pred_5;
                uint _3361 = _3360 + 1u;
                if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3354 = _3202;
                    _3355 = _3204;
                    _3356 = _3206;
                    _3357 = _3208;
                    _3358 = _3210;
                    _3359 = _3212;
                    _3360 = _3361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
        }
        uvec4 _3215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3216 = _3215.z;
        uint _3218 = (_3216 >> 8u) & 15u;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        if (((4294967295u << _3218) & _3121) == 0u)
        {
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
            _3330 = _3209;
            _3332 = _3211;
        }
        else
        {
            float _3347 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _3348 = _3347 * _2199;
            float _3349 = _3347 * _2200;
            float _3350 = _3347 * _2201;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3218 < ((_3216 >> 12u) & 15u))
            {
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3482 = _3201;
                float _3483 = _3203;
                float _3484 = _3205;
                float _3485 = _3207;
                float _3486 = _3209;
                float _3487 = _3211;
                uint _3488 = _3218;
                uint _3497;
                bool _3498;
                for (;;)
                {
                    _3497 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3488 << 2u)) >> 2u)).x;
                    _3498 = _3497 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3498)
                    {
                        frontier_phi_82_pred = _3487;
                        frontier_phi_82_pred_1 = _3486;
                        frontier_phi_82_pred_2 = _3485;
                        frontier_phi_82_pred_3 = _3484;
                        frontier_phi_82_pred_4 = _3483;
                        frontier_phi_82_pred_5 = _3482;
                    }
                    else
                    {
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        uint _3709 = _3497;
                        uint _3710;
                        vec4 _3735;
                        float _3736;
                        vec4 _3751;
                        vec3 _3763;
                        vec4 _3778;
                        vec4 _3793;
                        float _3839;
                        bool _3840;
                        for (;;)
                        {
                            uint _3720 = ((_3488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3709));
                            _3710 = (_3709 + 4294967295u) & _3709;
                            uint _3722 = _3720 * 40u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3736 = _3735.w;
                            uint _3738 = (_3720 * 40u) + 4u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3720 * 40u) + 8u;
                            _3763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x));
                            uint _3765 = (_3720 * 40u) + 16u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3720 * 40u) + 20u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3720 * 40u) + 24u;
                            vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3814 = (_3720 * 40u) + 28u;
                            vec4 _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            _3839 = fma(_2201, _3827.z, fma(_2200, _3827.y, _3827.x * _2199)) + _3827.w;
                            _3840 = !((fma(_2201, _3808.z, fma(_2200, _3808.y, _3808.x * _2199)) + _3808.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3840)
                            {
                                float _3867 = _3735.x - _2199;
                                float _3868 = _3735.y - _2200;
                                float _3869 = _3735.z - _2201;
                                float _3870 = dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869));
                                float _3873 = inversesqrt(_3870);
                                float _3874 = _3873 * _3867;
                                float _3875 = _3873 * _3868;
                                float _3876 = _3873 * _3869;
                                float _3880 = 1.0 - (_3870 / (_3736 * _3736));
                                float _5123 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3885 = sqrt(_3870) * _3751.w;
                                float _3887 = 1.39999997615814208984375 / (_3885 + 1.39999997615814208984375);
                                float _3888 = _3887 * _3887;
                                float _3891 = ((1.0 - _3888) * dot(vec3(_3874, _3875, _3876), vec3(_1056, _1059, _1062))) + _3888;
                                float _3894 = _3885 * _3885;
                                float _3898 = (fma(_2201, _3778.z, fma(_2200, _3778.y, _3778.x * _2199)) + _3778.w) / _3839;
                                float _3899 = (fma(_2201, _3793.z, fma(_2200, _3793.y, _3793.x * _2199)) + _3793.w) / _3839;
                                float _3903 = 1.0 - dot(vec2(_3898, _3899), vec2(_3898, _3899));
                                float _5139 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3905 = _3904 * (((isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0))) * _3881) / ((_3894 * 0.699999988079071044921875) + 1.0));
                                float _3917 = exp2(log2(1.0 / ((_3894 * 3.5) + 5.0)) * 0.25);
                                float _3918 = 1.0 - _1116;
                                float _3925 = sqrt(1.0 - ((1.0 - (_3918 * _3918)) * (1.0 - (_3917 * _3917))));
                                float _3926 = _3925 * _3925;
                                float _3927 = _3926 * _3926;
                                float _3928 = _3874 - _3348;
                                float _3929 = _3875 - _3349;
                                float _3930 = _3876 - _3350;
                                float _3934 = inversesqrt(dot(vec3(_3928, _3929, _3930), vec3(_3928, _3929, _3930)));
                                float _3938 = dot(vec3(_1056, _1059, _1062), vec3((-0.0) - _3348, (-0.0) - _3349, (-0.0) - _3350));
                                float _5150 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3941 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3942 = dot(vec3(_1056, _1059, _1062), vec3(_3934 * _3928, _3934 * _3929, _3934 * _3930));
                                float _5161 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3945 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3949 = ((_3945 * _3945) * (_3927 + (-1.0))) + 1.0;
                                float _3950 = _3887 * _3926;
                                float _3951 = _3950 * _3950;
                                float _3957 = ((1.0 - _3951) * dot(vec3(_1056, _1059, _1062), vec3(_3874, _3875, _3876))) + _3951;
                                float _5172 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3958 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3959 = 1.0 - _3926;
                                float _3969 = (0.5 / (((_3958 * ((_3941 * _3959) + _3926)) + 9.9999999392252902907785028219223e-09) + (((_3958 * _3959) + _3926) * _3941))) * _3958;
                                float _5183 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3979 = (_3904 * _3881) * (((_3927 * 3.1415927410125732421875) * (isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0)))) / ((_3949 * _3949) * ((_3894 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3905 * _3751.z;
                                frontier_phi_88_pred_1 = _3905 * _3751.y;
                                frontier_phi_88_pred_2 = _3905 * _3751.x;
                                frontier_phi_88_pred_3 = _3979 * _3763.z;
                                frontier_phi_88_pred_4 = _3979 * _3763.y;
                                frontier_phi_88_pred_5 = _3979 * _3763.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3988 = frontier_phi_88_pred;
                            _3987 = frontier_phi_88_pred_1;
                            _3986 = frontier_phi_88_pred_2;
                            _3985 = frontier_phi_88_pred_3;
                            _3984 = frontier_phi_88_pred_4;
                            _3983 = frontier_phi_88_pred_5;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            _3695 = _3988 + _3708;
                            _3690 = _3983 + _3703;
                            _3691 = _3984 + _3704;
                            _3692 = _3985 + _3705;
                            if (_3710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3710;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3695;
                        frontier_phi_82_pred_1 = _3694;
                        frontier_phi_82_pred_2 = _3693;
                        frontier_phi_82_pred_3 = _3692;
                        frontier_phi_82_pred_4 = _3691;
                        frontier_phi_82_pred_5 = _3690;
                    }
                    _3333 = frontier_phi_82_pred;
                    _3331 = frontier_phi_82_pred_1;
                    _3329 = frontier_phi_82_pred_2;
                    _3327 = frontier_phi_82_pred_3;
                    _3325 = frontier_phi_82_pred_4;
                    _3323 = frontier_phi_82_pred_5;
                    uint _3489 = _3488 + 1u;
                    if (_3489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3482 = _3323;
                        _3483 = _3325;
                        _3484 = _3327;
                        _3485 = _3329;
                        _3486 = _3331;
                        _3487 = _3333;
                        _3488 = _3489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3329;
                frontier_phi_63_64_ladder_1 = _3333;
                frontier_phi_63_64_ladder_2 = _3331;
                frontier_phi_63_64_ladder_3 = _3327;
                frontier_phi_63_64_ladder_4 = _3325;
                frontier_phi_63_64_ladder_5 = _3323;
            }
            else
            {
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            _3322 = frontier_phi_63_64_ladder_5;
            _3324 = frontier_phi_63_64_ladder_4;
            _3326 = frontier_phi_63_64_ladder_3;
            _3328 = frontier_phi_63_64_ladder;
            _3330 = frontier_phi_63_64_ladder_2;
            _3332 = frontier_phi_63_64_ladder_1;
        }
        float _3337 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
        _3134 = (_3337 * _3328) + _2665;
        _3136 = (_3337 * _3330) + _2667;
        _3138 = (_3337 * _3332) + _2669;
        _3140 = ((_3322 * 0.039999999105930328369140625) * _3337) + _2988;
        _3142 = ((_3324 * 0.039999999105930328369140625) * _3337) + _2990;
        _3144 = ((_3326 * 0.039999999105930328369140625) * _3337) + _2992;
    }
    else
    {
        _3134 = _2665;
        _3136 = _2667;
        _3138 = _2669;
        _3140 = _2988;
        _3142 = _2990;
        _3144 = _2992;
    }
    float _5199 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _5210 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _5221 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _3161 = ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3134 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1100))) + ((_3140 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _3162 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3136 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1100))) + ((_3142 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _3163 = ((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3138 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1100))) + ((_3144 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    uint _3164 = _291 + 6u;
    float _3172 = _1037 / cbSceneParam._m0[86u].x;
    float _3173 = _1038 / cbSceneParam._m0[86u].y;
    vec4 _3187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, (log2((isnan(cbSceneParam._m0[77u].w) ? _959 : (isnan(_959) ? cbSceneParam._m0[77u].w : min(_959, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3189 = _3187.x;
    float _3190 = _3187.y;
    float _3191 = _3187.z;
    float _3192 = _3187.w;
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    if (_959 > cbSceneParam._m0[78u].w)
    {
        float _3226 = isnan(_959) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _959 : min(cbSceneParam._m0[80u].w, _959));
        float _3227 = _3226 / _959;
        float _3238 = _3227 * _1010;
        float _3239 = _1011 * _3227;
        float _3240 = (-0.0) - _3239;
        float _3242 = _3227 * _1012;
        float _3244 = (cbSceneParam._m0[77u].w * _3240) / _3226;
        float _3245 = _3244 + cbSceneParam._m0[79u].w;
        float _3246 = cbSceneParam._m0[79u].w - _3239;
        float _3252 = sqrt(((_3238 * _3238) + (_3239 * _3239)) + (_3242 * _3242));
        float _3255 = (1.0 - (cbSceneParam._m0[77u].w / _3226)) * _3252;
        float _3260 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3262 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3439;
        if (abs((_3240 - _3244) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3439 = ((((_3245 > 0.0) ? exp2(_3260 * _3245) : (2.0 - exp2(_3262 * _3245))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3255;
        }
        else
        {
            float _3383 = 1.0 / cbSceneParam._m0[80u].x;
            float _3384 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : max(_3245, _3246));
            float _3385 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : min(_3245, _3246));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            _3439 = ((abs(_3252 / _3240) * cbSceneParam._m0[80u].y) * ((((_3394 - _3395) * 2.0) - ((exp2(_3260 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0)))) - exp2(_3260 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))))) * _3383)) - ((exp2(_3262 * _3394) - exp2(_3262 * _3395)) * _3383))) + (_3255 * cbSceneParam._m0[80u].z);
        }
        vec4 _3441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, 1.0), 0.0);
        float _3450 = exp2((_3439 * (-1.44269502162933349609375)) * (1.0 - _3441.w));
        float _3451 = log2(_3450);
        float _3467 = log2(_3192);
        _3264 = (exp2(_3467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].x)) * _3441.x) / cbSceneParam._m0[78u].x)) + _3189;
        _3266 = (exp2(_3467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].y)) * _3441.y) / cbSceneParam._m0[78u].y)) + _3190;
        _3268 = (exp2(_3467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].z)) * _3441.z) / cbSceneParam._m0[78u].z)) + _3191;
        _3270 = _3450 * _3192;
    }
    else
    {
        _3264 = _3189;
        _3266 = _3190;
        _3268 = _3191;
        _3270 = _3192;
    }
    bool _3477;
    vec4 _3280;
    vec4 _3302;
    float _3304;
    float _3308;
    float _3309;
    float _3310;
    float _3311;
    bool _3321;
    for (;;)
    {
        _3280 = cbMatDynParam._m0[0u];
        float _3282 = roundEven(_3280.y);
        bool _3283 = _3282 == 3.0;
        float _3284 = log2(_3270);
        float _3291 = exp2(_3284 * cbSceneParam._m0[78u].x) * _3161;
        float _3292 = exp2(_3284 * cbSceneParam._m0[78u].y) * _3162;
        float _3293 = exp2(_3284 * cbSceneParam._m0[78u].z) * _3163;
        float _3300 = _1026 + (-0.5);
        _3302 = cbMtdParam._m0[1u];
        _3304 = _3302.y * _3300;
        float _3307 = (_3282 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3308 = _3307 * (_3283 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3264)));
        _3309 = _3307 * (_3283 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3266)));
        _3310 = _3307 * (_3283 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3268)));
        _3311 = _3300 * 0.999000012874603271484375;
        _3321 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3321)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3311) < 0.5)
            {
                _3477 = true;
                break;
            }
        }
        uint _3418 = _1075 + uint(_3280.w);
        if ((cbInstanceData._m0[_3418].w < 1.0) && ((cbInstanceData._m0[_3418].w + _3311) < 0.5))
        {
            _3477 = true;
            break;
        }
        if ((_3304 + 1.0) < _3302.x)
        {
            _3477 = true;
            break;
        }
        _3477 = false;
        break;
    }
    float _3681;
    if (_3477)
    {
        discard_state = true;
        _3681 = 0.0;
    }
    else
    {
        _3681 = cbInstanceData._m0[_3164].w;
    }
    SV_Target.x = _3308;
    SV_Target.y = _3309;
    SV_Target.z = _3310;
    SV_Target.w = _3681;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3164].w;
    discard_exit();
}


