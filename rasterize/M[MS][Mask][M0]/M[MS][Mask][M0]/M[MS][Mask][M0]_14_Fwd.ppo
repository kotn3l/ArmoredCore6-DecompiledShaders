#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1239;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3545 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3556 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3567 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3578 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _465 = (_320.x * cbMtdParam._m0[9u].x) * ((_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351);
    float _466 = (_320.y * cbMtdParam._m0[9u].y) * ((_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352);
    float _467 = (_320.z * cbMtdParam._m0[9u].z) * ((_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353);
    float _471 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _465;
    float _474 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _466;
    float _477 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _467;
    float _485 = (((_465 - _471) * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) + _471) * 4.55000019073486328125;
    float _487 = (((_466 - _474) * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) + _474) * 4.55000019073486328125;
    float _489 = (((_467 - _477) * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) + _477) * 4.55000019073486328125;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _455) + _553;
    float _565 = ((((_532.x - _551) * _455) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _455) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3589 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _629 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_615 - _616) * cbMtdParam._m0[24u].w) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3600 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _637 = (_630 * (cbMtdParam._m0[17u].x - _485)) + _485;
    float _638 = (_630 * (cbMtdParam._m0[17u].y - _487)) + _487;
    float _639 = (_630 * (cbMtdParam._m0[17u].z - _489)) + _489;
    float _644 = (((_507.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    float _648 = ((_588.z - _644) * cbMtdParam._m0[19u].w) + _644;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _668 = (_661.x * 2.0) + (-1.0);
    float _669 = (_661.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3611 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _678 = (_630 * (_661.z - _648)) + _648;
    float _687 = (_565 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_507.x * 2.0) + (-1.0)))) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _688 = (_566 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_507.y * 2.0) + (-1.0)))) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = (((_668 - _687) + (cbMtdParam._m0[21u].x * _687)) * _630) + _687;
    float _701 = (((_669 - _688) + (cbMtdParam._m0[21u].x * _688)) * _630) + _688;
    float _702 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) - _572)) + _572;
    float _704 = cbMtdParam._m0[22u].x + _588.w;
    float _707 = fma(_702, _230 * NORMAL.x, fma(_701, _237 * TANGENT.x, (_223 * _215) * _700));
    float _710 = fma(_702, _230 * NORMAL.y, fma(_701, _237 * TANGENT.y, (_223 * _216) * _700));
    float _713 = fma(_702, _230 * NORMAL.z, fma(_701, _237 * TANGENT.z, (_223 * _217) * _700));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    float _718 = _717 * _707;
    float _719 = _717 * _710;
    float _720 = _717 * _713;
    float _3622 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _721 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3644 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3655 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3666 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _739 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _790 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _780);
    float _791 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _780);
    float _792 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _780);
    float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
    float _797 = _790 * _796;
    float _798 = _791 * _796;
    float _799 = _792 * _796;
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _824 = fma(_720, cbSceneParam._m0[5u].z, fma(_719, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _718));
    float _827 = fma(_720, cbSceneParam._m0[6u].z, fma(_719, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _718));
    float _830 = fma(_720, cbSceneParam._m0[7u].z, fma(_719, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _718));
    uint _844 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _850 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_844].x;
    float _851 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_844].y;
    float _852 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_844].z;
    float _3677 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _868 = ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * TEXCOORD_5.w) * _864.x;
    float _869 = dot(vec3(_718, _719, _720), vec3(_797, _798, _799));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _718) - _797;
    float _877 = (_872 * _719) - _798;
    float _878 = (_872 * _720) - _799;
    float _882 = abs(dot(vec3(_797, _798, _799), vec3(_718, _719, _720)));
    float _3710 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_721);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_937, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929));
        float _967 = fma(_937, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929));
        float _971 = fma(_937, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929));
        float _996 = _929 + _718;
        float _997 = _933 + _719;
        float _998 = _937 + _720;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_718, _719, _720), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3758 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_718, _719, _720), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3791 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_718, _719, _720), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3824 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_937, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929));
        float _1282 = fma(_937, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929));
        float _1286 = fma(_937, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929));
        float _1309 = _929 + _718;
        float _1310 = _933 + _719;
        float _1311 = _937 + _720;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_718, _719, _720), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3887 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_718, _719, _720), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3920 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_718, _719, _720), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _3953 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1239;
        _1548 = _1239;
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1251)) + _1251;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _876 * 0.5;
    float _1616 = _877 * 0.5;
    float _1617 = _878 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _721);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_937, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_937, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_937, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1746 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1749 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1777 = frontier_phi_14_12_ladder;
        }
        float _1978;
        if (_1746 > 0.0)
        {
            _1978 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1978 = frontier_phi_23_19_ladder;
        }
        float _2221;
        if (_1749 > 0.0)
        {
            _2221 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2221 = frontier_phi_35_30_ladder;
        }
        float _2223 = isnan(_1978) ? _1777 : (isnan(_1777) ? _1978 : min(_1777, _1978));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1743) + _1732;
        float _2229 = (_2224 * _1746) + _1736;
        float _2230 = (_2224 * _1749) + _1740;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2231;
        float _2235 = _2231 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 > _2235) || ((_2229 < _2233) || ((_2228 < _2233) || (_2228 > _2235))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2230, cbModelParam._m0[9u].z, fma(_2229, cbModelParam._m0[9u].y, _2228 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2230, cbModelParam._m0[10u].z, fma(_2229, cbModelParam._m0[10u].y, _2228 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2230, cbModelParam._m0[11u].z, fma(_2229, cbModelParam._m0[11u].y, _2228 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_13_35_ladder = _2354.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2354.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_13_35_ladder_2;
        _1767 = frontier_phi_13_35_ladder_1;
        _1769 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1684);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _721);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1828 = fma(_937, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929)) + cbModelParam._m0[21u].w;
        float _1832 = fma(_937, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929)) + cbModelParam._m0[22u].w;
        float _1836 = fma(_937, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929)) + cbModelParam._m0[23u].w;
        float _1839 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1842 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1845 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _1983;
        if (_1839 > 0.0)
        {
            _1983 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1983 = frontier_phi_25_21_ladder;
        }
        float _2248;
        if (_1842 > 0.0)
        {
            _2248 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2248 = frontier_phi_37_32_ladder;
        }
        float _2453;
        if (_1845 > 0.0)
        {
            _2453 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2453 = frontier_phi_46_43_ladder;
        }
        float _2455 = isnan(_2248) ? _1983 : (isnan(_1983) ? _2248 : min(_1983, _2248));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1839) + _1828;
        float _2461 = (_2456 * _1842) + _1832;
        float _2462 = (_2456 * _1845) + _1836;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_22_46_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1864 = frontier_phi_22_46_ladder_2;
        _1866 = frontier_phi_22_46_ladder_1;
        _1868 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1774);
        _1864 = _1848.x * cbModelParam._m0[1u].z;
        _1866 = _1848.y * cbModelParam._m0[1u].z;
        _1868 = _1848.z * cbModelParam._m0[1u].z;
    }
    float _1880 = ((((1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_897 * _884)) * _868;
    float _1881 = _1880 * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1882 = _1880 * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1883 = _1880 * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1881 * cbSceneParam._m0[91u].x));
    uvec4 _1902 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1904 = _1902.x * 14u;
    uint _1905 = _1904 + 13u;
    float _1912 = _868 + (-1.0);
    float _1917 = (cbLight._m0[_1905].x * _1912) + 1.0;
    float _1918 = (cbLight._m0[_1905].y * _1912) + 1.0;
    float _1919 = (cbLight._m0[_1905].z * _1912) + 1.0;
    float _1920 = (cbLight._m0[_1905].w * _1912) + 1.0;
    uint _1921 = _1904 + 5u;
    float _1927 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1931 = _1904 + 4u;
    float _1937 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1941 = _1904 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_718, _719, _720));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_718, _719, _720));
    float _4089 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _4100 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1921].x * _1927) * _1962) + ((cbLight._m0[_1931].x * _1937) * _1960);
    float _1970 = ((_1927 * cbLight._m0[_1921].y) * _1962) + ((_1937 * cbLight._m0[_1931].y) * _1960);
    float _1971 = ((_1927 * cbLight._m0[_1921].z) * _1962) + ((_1937 * cbLight._m0[_1931].z) * _1960);
    uvec4 _1975 = floatBitsToUint(cbLight._m0[_1904 + 12u]);
    bool _1977 = _1975.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1977)
    {
        _1988 = _1969;
        _1990 = _1970;
        _1992 = _1971;
    }
    else
    {
        uint _1996 = _1904 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1904 + 2u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4111 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2015 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1969;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1970;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1971;
    }
    bool _1995 = _1975.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1995)
    {
        _2033 = _1988;
        _2035 = _1990;
        _2037 = _1992;
    }
    else
    {
        uint _2192 = _1904 + 7u;
        float _2208 = (dot(vec3(cbLight._m0[_1904 + 3u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4127 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2211 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2033 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _1988;
        _2035 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _1990;
        _2037 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _1992;
    }
    uint _2040 = _1904 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _721) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1904].x + _797;
    float _2056 = cbLight._m0[_1904].y + _798;
    float _2057 = cbLight._m0[_1904].z + _799;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1904].xyz));
    float _4143 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2069 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2070 = dot(vec3(_718, _719, _720), vec3(_2062, _2063, _2064));
    float _4165 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2062, _2063, _2064));
    float _4176 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2093 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2094 = 1.0 - _2054;
    float _2105 = (0.5 / (((_2069 * ((_2068 * _2094) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2094) + _2054) * _2068))) * _2068;
    float _4187 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2118 = _1904 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _721) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1941].x + _797;
    float _2132 = cbLight._m0[_1941].y + _798;
    float _2133 = cbLight._m0[_1941].z + _799;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1941].xyz));
    float _4198 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2145 = dot(vec3(_718, _719, _720), vec3(_2138, _2139, _2140));
    float _4209 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2138, _2139, _2140));
    float _4220 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2166 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2167 = 1.0 - _2130;
    float _2177 = (0.5 / (((_2069 * ((_2144 * _2167) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2167) + _2130) * _2144))) * _2144;
    float _4231 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2189 = (((_2166 * cbLight._m0[_2118].x) * _2179) * _1927) + (((_2093 * cbLight._m0[_2040].x) * _2107) * _1937);
    float _2190 = (((_2166 * cbLight._m0[_2118].y) * _2179) * _1927) + (((_2093 * cbLight._m0[_2040].y) * _2107) * _1937);
    float _2191 = (((_2166 * cbLight._m0[_2118].z) * _2179) * _1927) + (((_2093 * cbLight._m0[_2040].z) * _2107) * _1937);
    float _2253;
    float _2255;
    float _2257;
    if (_1977)
    {
        _2253 = _2189;
        _2255 = _2190;
        _2257 = _2191;
    }
    else
    {
        uint _2259 = _1904 + 2u;
        uint _2263 = _1904 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _721) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _797;
        float _2280 = cbLight._m0[_2259].y + _798;
        float _2281 = cbLight._m0[_2259].z + _799;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2259].xyz));
        float _4242 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2293 = dot(vec3(_718, _719, _720), vec3(_2286, _2287, _2288));
        float _4253 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4264 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2314 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2315 = 1.0 - _2278;
        float _2325 = (0.5 / (((_2069 * ((_2292 * _2315) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2315) + _2278) * _2292))) * _2292;
        float _4275 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2253 = (((_2314 * cbLight._m0[_2263].x) * _2327) * _2328) + _2189;
        _2255 = (((_2314 * cbLight._m0[_2263].y) * _2327) * _2328) + _2190;
        _2257 = (((_2314 * cbLight._m0[_2263].z) * _2327) * _2328) + _2191;
    }
    float _2363;
    float _2365;
    float _2367;
    if (_1995)
    {
        _2363 = _2253;
        _2365 = _2255;
        _2367 = _2257;
    }
    else
    {
        uint _2374 = _1904 + 3u;
        uint _2378 = _1904 + 11u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _721) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _797;
        float _2395 = cbLight._m0[_2374].y + _798;
        float _2396 = cbLight._m0[_2374].z + _799;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2374].xyz));
        float _4291 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2408 = dot(vec3(_718, _719, _720), vec3(_2401, _2402, _2403));
        float _4302 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4313 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2430 = 1.0 - _2393;
        float _2440 = (0.5 / (((_2069 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2430) + _2393) * _2407))) * _2407;
        float _4324 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2442 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2443 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2363 = (((_2429 * cbLight._m0[_2378].x) * _2442) * _2443) + _2253;
        _2365 = (((_2429 * cbLight._m0[_2378].y) * _2442) * _2443) + _2255;
        _2367 = (((_2429 * cbLight._m0[_2378].z) * _2442) * _2443) + _2257;
    }
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_1902.y == 0u)
    {
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2518;
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2518;
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2518;
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.x;
        uint _2545 = uint((float(_2533.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _2534))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _2534)));
        float _2555 = (log2(_2521 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2556 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        uint _2559 = uint(isnan(14.0) ? _2556 : (isnan(_2556) ? 14.0 : min(_2556, 14.0)));
        uvec4 _2564 = texelFetch(g_lightClusterGridBuffer, int(((_2559 << 2u) + (_2545 << 6u)) >> 2u));
        uint _2565 = _2564.x;
        uint _2566 = _2533.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2566 >> 4u) & 15u)) + 4294967295u) & _2565) == 0u) || ((_2566 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            uint _2817 = 0u;
            uint _2826;
            bool _2827;
            for (;;)
            {
                _2826 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                _2827 = _2826 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2827)
                {
                    frontier_phi_61_pred = _2811;
                    frontier_phi_61_pred_1 = _2816;
                    frontier_phi_61_pred_2 = _2815;
                    frontier_phi_61_pred_3 = _2814;
                    frontier_phi_61_pred_4 = _2813;
                    frontier_phi_61_pred_5 = _2812;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2826;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2817 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _2519;
                        float _3002 = _2961.y - _2520;
                        float _3003 = _2961.z - _2521;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_824, _827, _830), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4350 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _2519;
                        float _3037 = (-0.0) - _2520;
                        float _3038 = (-0.0) - _2521;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3053 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _884;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_824, _827, _830), vec3(_3043, _3044, _3045));
                        float _4366 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3078 = dot(vec3(_824, _827, _830), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4377 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3021 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3011) + _3087;
                        float _4388 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4399 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3113 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3085 * _3085) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2870 = (_3032 * _2980.x) + _2938;
                        _2871 = (_3032 * _2980.y) + _2939;
                        _2872 = (_3032 * _2980.z) + _2940;
                        _2867 = (_3113 * _2997.x) + _2935;
                        _2868 = (_3113 * _2997.y) + _2936;
                        _2869 = (_3113 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_61_pred = _2867;
                    frontier_phi_61_pred_1 = _2872;
                    frontier_phi_61_pred_2 = _2871;
                    frontier_phi_61_pred_3 = _2870;
                    frontier_phi_61_pred_4 = _2869;
                    frontier_phi_61_pred_5 = _2868;
                }
                _2667 = frontier_phi_61_pred;
                _2677 = frontier_phi_61_pred_1;
                _2675 = frontier_phi_61_pred_2;
                _2673 = frontier_phi_61_pred_3;
                _2671 = frontier_phi_61_pred_4;
                _2669 = frontier_phi_61_pred_5;
                uint _2818 = _2817 + 1u;
                if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2811 = _2667;
                    _2812 = _2669;
                    _2813 = _2671;
                    _2814 = _2673;
                    _2815 = _2675;
                    _2816 = _2677;
                    _2817 = _2818;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((4294967295u << _2683) & _2565) == 0u)
        {
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
        }
        else
        {
            float _2804 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
            float _2805 = _2804 * _2519;
            float _2806 = _2804 * _2520;
            float _2807 = _2804 * _2521;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2918 = _2666;
                float _2919 = _2668;
                float _2920 = _2670;
                float _2921 = _2672;
                float _2922 = _2674;
                float _2923 = _2676;
                uint _2924 = _2683;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2934)
                    {
                        frontier_phi_67_pred = _2921;
                        frontier_phi_67_pred_1 = _2922;
                        frontier_phi_67_pred_2 = _2923;
                        frontier_phi_67_pred_3 = _2920;
                        frontier_phi_67_pred_4 = _2919;
                        frontier_phi_67_pred_5 = _2918;
                    }
                    else
                    {
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        uint _3137 = _2933;
                        uint _3138;
                        vec4 _3163;
                        float _3164;
                        vec4 _3179;
                        vec3 _3191;
                        vec4 _3206;
                        vec4 _3221;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3148 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3137));
                            _3138 = (_3137 + 4294967295u) & _3137;
                            uint _3150 = _3148 * 40u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3164 = _3163.w;
                            uint _3166 = (_3148 * 40u) + 4u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3148 * 40u) + 8u;
                            _3191 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x));
                            uint _3193 = (_3148 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3148 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3148 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3148 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_2521, _3255.z, fma(_2520, _3255.y, _3255.x * _2519)) + _3255.w;
                            _3268 = !((fma(_2521, _3236.z, fma(_2520, _3236.y, _3236.x * _2519)) + _3236.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3163.x - _2519;
                                float _3296 = _3163.y - _2520;
                                float _3297 = _3163.z - _2521;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3164 * _3164));
                                float _4410 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3313 = sqrt(_3298) * _3179.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_824, _827, _830))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_2521, _3206.z, fma(_2520, _3206.y, _3206.x * _2519)) + _3206.w) / _3267;
                                float _3327 = (fma(_2521, _3221.z, fma(_2520, _3221.y, _3221.x * _2519)) + _3221.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4426 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _884;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2805;
                                float _3357 = _3303 - _2806;
                                float _3358 = _3304 - _2807;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_824, _827, _830), vec3((-0.0) - _2805, (-0.0) - _2806, (-0.0) - _2807));
                                float _4437 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3370 = dot(vec3(_824, _827, _830), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4448 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_824, _827, _830), vec3(_3302, _3303, _3304))) + _3379;
                                float _4459 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4470 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3407 * _3191.x;
                                frontier_phi_73_pred_1 = _3407 * _3191.y;
                                frontier_phi_73_pred_2 = _3333 * _3179.z;
                                frontier_phi_73_pred_3 = _3333 * _3179.y;
                                frontier_phi_73_pred_4 = _3333 * _3179.x;
                                frontier_phi_73_pred_5 = _3407 * _3191.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_73_pred;
                            _3412 = frontier_phi_73_pred_1;
                            _3416 = frontier_phi_73_pred_2;
                            _3415 = frontier_phi_73_pred_3;
                            _3414 = frontier_phi_73_pred_4;
                            _3413 = frontier_phi_73_pred_5;
                            _3121 = _3414 + _3134;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            _3118 = _3411 + _3131;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            if (_3138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3138;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3121;
                        frontier_phi_67_pred_1 = _3122;
                        frontier_phi_67_pred_2 = _3123;
                        frontier_phi_67_pred_3 = _3120;
                        frontier_phi_67_pred_4 = _3119;
                        frontier_phi_67_pred_5 = _3118;
                    }
                    _2786 = frontier_phi_67_pred;
                    _2788 = frontier_phi_67_pred_1;
                    _2790 = frontier_phi_67_pred_2;
                    _2784 = frontier_phi_67_pred_3;
                    _2782 = frontier_phi_67_pred_4;
                    _2780 = frontier_phi_67_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2780;
                        _2919 = _2782;
                        _2920 = _2784;
                        _2921 = _2786;
                        _2922 = _2788;
                        _2923 = _2790;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2788;
                frontier_phi_55_56_ladder_1 = _2790;
                frontier_phi_55_56_ladder_2 = _2786;
                frontier_phi_55_56_ladder_3 = _2784;
                frontier_phi_55_56_ladder_4 = _2782;
                frontier_phi_55_56_ladder_5 = _2780;
            }
            else
            {
                frontier_phi_55_56_ladder = _2674;
                frontier_phi_55_56_ladder_1 = _2676;
                frontier_phi_55_56_ladder_2 = _2672;
                frontier_phi_55_56_ladder_3 = _2670;
                frontier_phi_55_56_ladder_4 = _2668;
                frontier_phi_55_56_ladder_5 = _2666;
            }
            _2779 = frontier_phi_55_56_ladder_5;
            _2781 = frontier_phi_55_56_ladder_4;
            _2783 = frontier_phi_55_56_ladder_3;
            _2785 = frontier_phi_55_56_ladder_2;
            _2787 = frontier_phi_55_56_ladder;
            _2789 = frontier_phi_55_56_ladder_1;
        }
        float _2794 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2578 = (_2794 * _2785) + _2033;
        _2580 = (_2794 * _2787) + _2035;
        _2582 = (_2794 * _2789) + _2037;
        _2584 = ((_2779 * 0.039999999105930328369140625) * _2794) + _2363;
        _2586 = ((_2781 * 0.039999999105930328369140625) * _2794) + _2365;
        _2588 = ((_2783 * 0.039999999105930328369140625) * _2794) + _2367;
    }
    else
    {
        _2578 = _2033;
        _2580 = _2035;
        _2582 = _2037;
        _2584 = _2363;
        _2586 = _2365;
        _2588 = _2367;
    }
    float _4486 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4497 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4508 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    uint _2608 = _264 + 6u;
    float _2616 = _805 / cbSceneParam._m0[86u].x;
    float _2617 = _806 / cbSceneParam._m0[86u].y;
    vec4 _2631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, (log2((isnan(cbSceneParam._m0[77u].w) ? _739 : (isnan(_739) ? cbSceneParam._m0[77u].w : min(_739, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2633 = _2631.x;
    float _2634 = _2631.y;
    float _2635 = _2631.z;
    float _2636 = _2631.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_739 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_739) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _739 : min(cbSceneParam._m0[80u].w, _739));
        float _2692 = _2691 / _739;
        float _2703 = _2692 * _790;
        float _2704 = _791 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2707 = _2692 * _792;
        float _2709 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2710 = _2709 + cbSceneParam._m0[79u].w;
        float _2711 = cbSceneParam._m0[79u].w - _2704;
        float _2717 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2707 * _2707));
        float _2720 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2717;
        float _2725 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2705 - _2709) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2710 > 0.0) ? exp2(_2725 * _2710) : (2.0 - exp2(_2727 * _2710))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2720;
        }
        else
        {
            float _2840 = 1.0 / cbSceneParam._m0[80u].x;
            float _2841 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : max(_2710, _2711));
            float _2842 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : min(_2710, _2711));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            _2880 = ((abs(_2717 / _2705) * cbSceneParam._m0[80u].y) * ((((_2851 - _2852) * 2.0) - ((exp2(_2725 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0)))) - exp2(_2725 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))))) * _2840)) - ((exp2(_2727 * _2851) - exp2(_2727 * _2852)) * _2840))) + (_2720 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2636);
        _2729 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2633;
        _2731 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2634;
        _2733 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2635;
        _2735 = _2891 * _2636;
    }
    else
    {
        _2729 = _2633;
        _2731 = _2634;
        _2733 = _2635;
        _2735 = _2636;
    }
    float _2747 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2748 = _2747 == 3.0;
    float _2749 = log2(_2735);
    float _2756 = exp2(_2749 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2578 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _868))) + ((_2584 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2757 = exp2(_2749 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2580 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _868))) + ((_2586 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2758 = exp2(_2749 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2582 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _868))) + ((_2588 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2767 = (_2747 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2767 * (_2748 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.y = _2767 * (_2748 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.z = _2767 * (_2748 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.w = cbInstanceData._m0[_2608].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2608].w;
}


