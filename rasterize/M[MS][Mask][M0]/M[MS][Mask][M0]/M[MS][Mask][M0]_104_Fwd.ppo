#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1347;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3652 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3663 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3674 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _449 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _466 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_437 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _474 = (_467 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _475 = (_467 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _476 = (_467 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _515 = _513.x;
    float _525 = dot(vec4(_515, _513.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _539 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_515 - _525) * cbMtdParam._m0[24u].z) + _525) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3696 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _547 = (_540 * ((_493.x * cbMtdParam._m0[13u].x) - _474)) + _474;
    float _548 = (_540 * ((_493.y * cbMtdParam._m0[13u].y) - _475)) + _475;
    float _549 = (_540 * ((_493.z * cbMtdParam._m0[13u].z) - _476)) + _476;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _289) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _290) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _397.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[24u].z) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3707 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _619 = (_326.x * cbMtdParam._m0[9u].x) * ((_609 * ((_567.x * cbMtdParam._m0[14u].x) - _547)) + _547);
    float _620 = (_326.y * cbMtdParam._m0[9u].y) * ((_609 * ((_567.y * cbMtdParam._m0[14u].y) - _548)) + _548);
    float _621 = (_326.z * cbMtdParam._m0[9u].z) * ((_609 * ((_567.z * cbMtdParam._m0[14u].z) - _549)) + _549);
    float _625 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _619;
    float _628 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _620;
    float _631 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _621;
    float _639 = (((_619 - _625) * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) + _625) * 4.55000019073486328125;
    float _641 = (((_620 - _628) * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) + _628) * 4.55000019073486328125;
    float _643 = (((_621 - _631) * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) + _631) * 4.55000019073486328125;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _697 = _695.x;
    float _698 = _695.y;
    float _699 = _695.z;
    float _706 = ((_678.x - _697) * _467) + _697;
    float _707 = ((_678.y - _698) * _467) + _698;
    float _708 = ((_678.z - _699) * _467) + _699;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _731 = ((_720.x - _706) * _540) + _706;
    float _732 = ((_720.y - _707) * _540) + _707;
    float _733 = ((_720.z - _708) * _540) + _708;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _289) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _290) + cbTextureTilingScale._m0[23u].w));
    float _758 = ((_745.z - _733) * _609) + _733;
    float _761 = ((((_745.x - _731) * _609) + _731) * 2.0) + (-1.0);
    float _762 = ((((_745.y - _732) * _609) + _732) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3718 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _800 = (_761 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_655.x * 2.0) + (-1.0)))) + (((_788.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _801 = (_762 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_655.y * 2.0) + (-1.0)))) + (((_788.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _806 = (((_655.z - _758) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _758;
    float _810 = ((_788.z - _806) * cbMtdParam._m0[19u].w) + _806;
    float _812 = cbMtdParam._m0[22u].x + _788.w;
    float _815 = fma(_768, _236 * NORMAL.x, fma(_801, _243 * TANGENT.x, (_229 * _221) * _800));
    float _818 = fma(_768, _236 * NORMAL.y, fma(_801, _243 * TANGENT.y, (_229 * _222) * _800));
    float _821 = fma(_768, _236 * NORMAL.z, fma(_801, _243 * TANGENT.z, (_229 * _223) * _800));
    float _825 = inversesqrt(dot(vec3(_815, _818, _821), vec3(_815, _818, _821)));
    float _826 = _825 * _815;
    float _827 = _825 * _818;
    float _828 = _825 * _821;
    float _3729 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _829 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _3751 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3762 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3773 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _898 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _888);
    float _899 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _888);
    float _900 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _888);
    float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
    float _905 = _898 * _904;
    float _906 = _899 * _904;
    float _907 = _900 * _904;
    float _913 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _914 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _932 = fma(_828, cbSceneParam._m0[5u].z, fma(_827, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _826));
    float _935 = fma(_828, cbSceneParam._m0[6u].z, fma(_827, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _826));
    float _938 = fma(_828, cbSceneParam._m0[7u].z, fma(_827, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _826));
    uint _952 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_952].z;
    float _3784 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _913, cbSceneParam._m0[86u].y * _914));
    float _976 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_826, _827, _828), vec3(_905, _906, _907));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _826) - _905;
    float _985 = (_980 * _827) - _906;
    float _986 = (_980 * _828) - _907;
    float _990 = abs(dot(vec3(_905, _906, _907), vec3(_826, _827, _828)));
    float _3817 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_829);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1075 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1079 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1104 = _1037 + _826;
        float _1105 = _1041 + _827;
        float _1106 = _1045 + _828;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_826, _827, _828), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3865 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_826, _827, _828), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3898 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_826, _827, _828), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3931 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1388 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1392 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1415 = _1037 + _826;
        float _1416 = _1041 + _827;
        float _1417 = _1045 + _828;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_826, _827, _828), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _3994 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_826, _827, _828), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4027 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_826, _827, _828), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4060 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1347;
        _1654 = _1347;
        _1655 = _1347;
        _1656 = _1347;
        _1657 = _1347;
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1359)) + _1359;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1360)) + _1360;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1361)) + _1361;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _984 * 0.5;
    float _1722 = _985 * 0.5;
    float _1723 = _986 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _829);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1852 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1855 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1883 = frontier_phi_14_12_ladder;
        }
        float _2085;
        if (_1852 > 0.0)
        {
            _2085 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2085 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1855 > 0.0)
        {
            _2328 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_35_30_ladder;
        }
        float _2330 = isnan(_2085) ? _1883 : (isnan(_1883) ? _2085 : min(_1883, _2085));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1849) + _1838;
        float _2336 = (_2331 * _1852) + _1842;
        float _2337 = (_2331 * _1855) + _1846;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_13_35_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_13_35_ladder_2;
        _1873 = frontier_phi_13_35_ladder_1;
        _1875 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1790);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _829);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1935 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1939 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1943 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1946 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1949 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1952 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2090;
        if (_1946 > 0.0)
        {
            _2090 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2090 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1949 > 0.0)
        {
            _2355 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2560;
        if (_1952 > 0.0)
        {
            _2560 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2560 = frontier_phi_46_43_ladder;
        }
        float _2562 = isnan(_2355) ? _2090 : (isnan(_2090) ? _2355 : min(_2090, _2355));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1946) + _1935;
        float _2568 = (_2563 * _1949) + _1939;
        float _2569 = (_2563 * _1952) + _1943;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_22_46_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1971 = frontier_phi_22_46_ladder_2;
        _1973 = frontier_phi_22_46_ladder_1;
        _1975 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1880);
        _1971 = _1955.x * cbModelParam._m0[1u].z;
        _1973 = _1955.y * cbModelParam._m0[1u].z;
        _1975 = _1955.z * cbModelParam._m0[1u].z;
    }
    float _1987 = ((((1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1005 * _992)) * _976;
    float _1988 = _1987 * ((cbModelParam._m0[1u].w * (_1971 - _1871)) + _1871);
    float _1989 = _1987 * ((cbModelParam._m0[1u].w * (_1973 - _1873)) + _1873);
    float _1990 = _1987 * ((cbModelParam._m0[1u].w * (_1975 - _1875)) + _1875);
    float _1993 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1988 * cbSceneParam._m0[91u].x));
    uvec4 _2009 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2011 = _2009.x * 14u;
    uint _2012 = _2011 + 13u;
    float _2019 = _976 + (-1.0);
    float _2024 = (cbLight._m0[_2012].x * _2019) + 1.0;
    float _2025 = (cbLight._m0[_2012].y * _2019) + 1.0;
    float _2026 = (cbLight._m0[_2012].z * _2019) + 1.0;
    float _2027 = (cbLight._m0[_2012].w * _2019) + 1.0;
    uint _2028 = _2011 + 5u;
    float _2034 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2038 = _2011 + 4u;
    float _2044 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2048 = _2011 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_826, _827, _828));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_826, _827, _828));
    float _4196 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4207 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2028].x * _2034) * _2069) + ((cbLight._m0[_2038].x * _2044) * _2067);
    float _2077 = ((_2034 * cbLight._m0[_2028].y) * _2069) + ((_2044 * cbLight._m0[_2038].y) * _2067);
    float _2078 = ((_2034 * cbLight._m0[_2028].z) * _2069) + ((_2044 * cbLight._m0[_2038].z) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2011 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2084)
    {
        _2095 = _2076;
        _2097 = _2077;
        _2099 = _2078;
    }
    else
    {
        uint _2103 = _2011 + 6u;
        float _2119 = (dot(vec3(cbLight._m0[_2011 + 2u].xyz), vec3(_826, _827, _828)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4218 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2122 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2095 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _2076;
        _2097 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _2077;
        _2099 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _2078;
    }
    bool _2102 = _2082.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2102)
    {
        _2140 = _2095;
        _2142 = _2097;
        _2144 = _2099;
    }
    else
    {
        uint _2299 = _2011 + 7u;
        float _2315 = (dot(vec3(cbLight._m0[_2011 + 3u].xyz), vec3(_826, _827, _828)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4234 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2318 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2140 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2095;
        _2142 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2097;
        _2144 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2099;
    }
    uint _2147 = _2011 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _829) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2011].x + _905;
    float _2163 = cbLight._m0[_2011].y + _906;
    float _2164 = cbLight._m0[_2011].z + _907;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_826, _827, _828), vec3(cbLight._m0[_2011].xyz));
    float _4250 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2176 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2177 = dot(vec3(_826, _827, _828), vec3(_2169, _2170, _2171));
    float _4272 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2169, _2170, _2171));
    float _4283 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2201 = 1.0 - _2161;
    float _2212 = (0.5 / (((_2176 * ((_2175 * _2201) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2201) + _2161) * _2175))) * _2175;
    float _4294 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2225 = _2011 + 9u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _829) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2048].x + _905;
    float _2239 = cbLight._m0[_2048].y + _906;
    float _2240 = cbLight._m0[_2048].z + _907;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_826, _827, _828), vec3(cbLight._m0[_2048].xyz));
    float _4305 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2252 = dot(vec3(_826, _827, _828), vec3(_2245, _2246, _2247));
    float _4316 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2245, _2246, _2247));
    float _4327 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2237 * _2237;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2237;
    float _2284 = (0.5 / (((_2176 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2274) + _2237) * _2251))) * _2251;
    float _4338 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    float _2296 = (((_2273 * cbLight._m0[_2225].x) * _2286) * _2034) + (((_2200 * cbLight._m0[_2147].x) * _2214) * _2044);
    float _2297 = (((_2273 * cbLight._m0[_2225].y) * _2286) * _2034) + (((_2200 * cbLight._m0[_2147].y) * _2214) * _2044);
    float _2298 = (((_2273 * cbLight._m0[_2225].z) * _2286) * _2034) + (((_2200 * cbLight._m0[_2147].z) * _2214) * _2044);
    float _2360;
    float _2362;
    float _2364;
    if (_2084)
    {
        _2360 = _2296;
        _2362 = _2297;
        _2364 = _2298;
    }
    else
    {
        uint _2366 = _2011 + 2u;
        uint _2370 = _2011 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _829) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _905;
        float _2387 = cbLight._m0[_2366].y + _906;
        float _2388 = cbLight._m0[_2366].z + _907;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_826, _827, _828), vec3(cbLight._m0[_2366].xyz));
        float _4349 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2400 = dot(vec3(_826, _827, _828), vec3(_2393, _2394, _2395));
        float _4360 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4371 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2422 = 1.0 - _2385;
        float _2432 = (0.5 / (((_2176 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2422) + _2385) * _2399))) * _2399;
        float _4382 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2360 = (((_2421 * cbLight._m0[_2370].x) * _2434) * _2435) + _2296;
        _2362 = (((_2421 * cbLight._m0[_2370].y) * _2434) * _2435) + _2297;
        _2364 = (((_2421 * cbLight._m0[_2370].z) * _2434) * _2435) + _2298;
    }
    float _2470;
    float _2472;
    float _2474;
    if (_2102)
    {
        _2470 = _2360;
        _2472 = _2362;
        _2474 = _2364;
    }
    else
    {
        uint _2481 = _2011 + 3u;
        uint _2485 = _2011 + 11u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _829) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _905;
        float _2502 = cbLight._m0[_2481].y + _906;
        float _2503 = cbLight._m0[_2481].z + _907;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_826, _827, _828), vec3(cbLight._m0[_2481].xyz));
        float _4398 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2515 = dot(vec3(_826, _827, _828), vec3(_2508, _2509, _2510));
        float _4409 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4420 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2537 = 1.0 - _2500;
        float _2547 = (0.5 / (((_2176 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2537) + _2500) * _2514))) * _2514;
        float _4431 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2470 = (((_2536 * cbLight._m0[_2485].x) * _2549) * _2550) + _2360;
        _2472 = (((_2536 * cbLight._m0[_2485].y) * _2549) * _2550) + _2362;
        _2474 = (((_2536 * cbLight._m0[_2485].z) * _2549) * _2550) + _2364;
    }
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_2009.y == 0u)
    {
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2625;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2625;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2625;
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.x;
        uint _2652 = uint((float(_2640.y) * floor(float(uint(cbSceneParam._m0[85u].y * _914) / _2641))) + floor(float(uint(cbSceneParam._m0[85u].x * _913) / _2641)));
        float _2662 = (log2(_2628 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2663 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        uint _2666 = uint(isnan(14.0) ? _2663 : (isnan(_2663) ? 14.0 : min(_2663, 14.0)));
        uvec4 _2671 = texelFetch(g_lightClusterGridBuffer, int(((_2666 << 2u) + (_2652 << 6u)) >> 2u));
        uint _2672 = _2671.x;
        uint _2673 = _2640.z;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((((1u << ((_2673 >> 4u) & 15u)) + 4294967295u) & _2672) == 0u) || ((_2673 & 240u) == 0u))
        {
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
        }
        else
        {
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            uint _2924 = 0u;
            uint _2933;
            bool _2934;
            for (;;)
            {
                _2933 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                _2934 = _2933 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2934)
                {
                    frontier_phi_61_pred = _2918;
                    frontier_phi_61_pred_1 = _2923;
                    frontier_phi_61_pred_2 = _2922;
                    frontier_phi_61_pred_3 = _2921;
                    frontier_phi_61_pred_4 = _2920;
                    frontier_phi_61_pred_5 = _2919;
                }
                else
                {
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    uint _3048;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2933;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    for (;;)
                    {
                        uint _3052 = uint(findLSB(_3048)) + (_2924 << 5u);
                        uint _3049 = (_3048 + 4294967295u) & _3048;
                        uint _3054 = _3052 * 48u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3074 = (_3052 * 48u) + 4u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3093 = (_3052 * 48u) + 8u;
                        vec3 _3104 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x));
                        float _3108 = _3068.x - _2626;
                        float _3109 = _3068.y - _2627;
                        float _3110 = _3068.z - _2628;
                        float _3111 = dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110));
                        float _3114 = inversesqrt(_3111);
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3118 = dot(vec3(_932, _935, _938), vec3(_3115, _3116, _3117));
                        float _3123 = 1.0 - (_3111 * _3068.w);
                        float _4457 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3125 = sqrt(_3111) * _3087.w;
                        float _3128 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                        float _3129 = _3128 * _3128;
                        float _3132 = ((1.0 - _3129) * _3118) + _3129;
                        float _3135 = _3125 * _3125;
                        float _3139 = ((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3124) / ((_3135 * 0.699999988079071044921875) + 1.0);
                        float _3143 = (-0.0) - _2626;
                        float _3144 = (-0.0) - _2627;
                        float _3145 = (-0.0) - _2628;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3160 = exp2(log2(1.0 / ((_3135 * 3.5) + 5.0)) * 0.25);
                        float _3161 = 1.0 - _992;
                        float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                        float _3169 = _3168 * _3168;
                        float _3170 = _3169 * _3169;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3181 = dot(vec3(_932, _935, _938), vec3(_3150, _3151, _3152));
                        float _4473 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3185 = dot(vec3(_932, _935, _938), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                        float _4484 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                        float _3193 = _3128 * _3169;
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3118) + _3194;
                        float _4495 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3199 = 1.0 - _3169;
                        float _3209 = (0.5 / (((_3198 * ((_3184 * _3199) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3169) * _3184))) * _3198;
                        float _4506 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3220 = (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3192 * _3192) * ((_3135 * 2.1991131305694580078125) + 3.141590118408203125))) * _3124;
                        _2977 = (_3139 * _3087.x) + _3045;
                        _2978 = (_3139 * _3087.y) + _3046;
                        _2979 = (_3139 * _3087.z) + _3047;
                        _2974 = (_3220 * _3104.x) + _3042;
                        _2975 = (_3220 * _3104.y) + _3043;
                        _2976 = (_3220 * _3104.z) + _3044;
                        if (_3049 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _3049;
                        }
                    }
                    frontier_phi_61_pred = _2974;
                    frontier_phi_61_pred_1 = _2979;
                    frontier_phi_61_pred_2 = _2978;
                    frontier_phi_61_pred_3 = _2977;
                    frontier_phi_61_pred_4 = _2976;
                    frontier_phi_61_pred_5 = _2975;
                }
                _2774 = frontier_phi_61_pred;
                _2784 = frontier_phi_61_pred_1;
                _2782 = frontier_phi_61_pred_2;
                _2780 = frontier_phi_61_pred_3;
                _2778 = frontier_phi_61_pred_4;
                _2776 = frontier_phi_61_pred_5;
                uint _2925 = _2924 + 1u;
                if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2918 = _2774;
                    _2919 = _2776;
                    _2920 = _2778;
                    _2921 = _2780;
                    _2922 = _2782;
                    _2923 = _2784;
                    _2924 = _2925;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
        }
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.z;
        uint _2790 = (_2788 >> 8u) & 15u;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((4294967295u << _2790) & _2672) == 0u)
        {
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
            _2892 = _2779;
            _2894 = _2781;
            _2896 = _2783;
        }
        else
        {
            float _2911 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
            float _2912 = _2911 * _2626;
            float _2913 = _2911 * _2627;
            float _2914 = _2911 * _2628;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2790 < ((_2788 >> 12u) & 15u))
            {
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _3025 = _2773;
                float _3026 = _2775;
                float _3027 = _2777;
                float _3028 = _2779;
                float _3029 = _2781;
                float _3030 = _2783;
                uint _3031 = _2790;
                uint _3040;
                bool _3041;
                for (;;)
                {
                    _3040 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                    _3041 = _3040 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3041)
                    {
                        frontier_phi_67_pred = _3028;
                        frontier_phi_67_pred_1 = _3029;
                        frontier_phi_67_pred_2 = _3030;
                        frontier_phi_67_pred_3 = _3027;
                        frontier_phi_67_pred_4 = _3026;
                        frontier_phi_67_pred_5 = _3025;
                    }
                    else
                    {
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        uint _3244 = _3040;
                        uint _3245;
                        vec4 _3270;
                        float _3271;
                        vec4 _3286;
                        vec3 _3298;
                        vec4 _3313;
                        vec4 _3328;
                        float _3374;
                        bool _3375;
                        for (;;)
                        {
                            uint _3255 = ((_3031 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3244));
                            _3245 = (_3244 + 4294967295u) & _3244;
                            uint _3257 = _3255 * 40u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3271 = _3270.w;
                            uint _3273 = (_3255 * 40u) + 4u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3255 * 40u) + 8u;
                            _3298 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x));
                            uint _3300 = (_3255 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3255 * 40u) + 20u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3255 * 40u) + 24u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3349 = (_3255 * 40u) + 28u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3374 = fma(_2628, _3362.z, fma(_2627, _3362.y, _3362.x * _2626)) + _3362.w;
                            _3375 = !((fma(_2628, _3343.z, fma(_2627, _3343.y, _3343.x * _2626)) + _3343.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3375)
                            {
                                float _3402 = _3270.x - _2626;
                                float _3403 = _3270.y - _2627;
                                float _3404 = _3270.z - _2628;
                                float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                                float _3408 = inversesqrt(_3405);
                                float _3409 = _3408 * _3402;
                                float _3410 = _3408 * _3403;
                                float _3411 = _3408 * _3404;
                                float _3415 = 1.0 - (_3405 / (_3271 * _3271));
                                float _4517 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3420 = sqrt(_3405) * _3286.w;
                                float _3422 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                                float _3423 = _3422 * _3422;
                                float _3426 = ((1.0 - _3423) * dot(vec3(_3409, _3410, _3411), vec3(_932, _935, _938))) + _3423;
                                float _3429 = _3420 * _3420;
                                float _3433 = (fma(_2628, _3313.z, fma(_2627, _3313.y, _3313.x * _2626)) + _3313.w) / _3374;
                                float _3434 = (fma(_2628, _3328.z, fma(_2627, _3328.y, _3328.x * _2626)) + _3328.w) / _3374;
                                float _3438 = 1.0 - dot(vec2(_3433, _3434), vec2(_3433, _3434));
                                float _4533 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3440 = _3439 * (((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3416) / ((_3429 * 0.699999988079071044921875) + 1.0));
                                float _3452 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                                float _3453 = 1.0 - _992;
                                float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                                float _3461 = _3460 * _3460;
                                float _3462 = _3461 * _3461;
                                float _3463 = _3409 - _2912;
                                float _3464 = _3410 - _2913;
                                float _3465 = _3411 - _2914;
                                float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                                float _3473 = dot(vec3(_932, _935, _938), vec3((-0.0) - _2912, (-0.0) - _2913, (-0.0) - _2914));
                                float _4544 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3477 = dot(vec3(_932, _935, _938), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                                float _4555 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                                float _3485 = _3422 * _3461;
                                float _3486 = _3485 * _3485;
                                float _3492 = ((1.0 - _3486) * dot(vec3(_932, _935, _938), vec3(_3409, _3410, _3411))) + _3486;
                                float _4566 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3494 = 1.0 - _3461;
                                float _3504 = (0.5 / (((_3493 * ((_3476 * _3494) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3461) * _3476))) * _3493;
                                float _4577 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3514 = (_3439 * _3416) * (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3484 * _3484) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3514 * _3298.x;
                                frontier_phi_73_pred_1 = _3514 * _3298.y;
                                frontier_phi_73_pred_2 = _3440 * _3286.z;
                                frontier_phi_73_pred_3 = _3440 * _3286.y;
                                frontier_phi_73_pred_4 = _3440 * _3286.x;
                                frontier_phi_73_pred_5 = _3514 * _3298.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_73_pred;
                            _3519 = frontier_phi_73_pred_1;
                            _3523 = frontier_phi_73_pred_2;
                            _3522 = frontier_phi_73_pred_3;
                            _3521 = frontier_phi_73_pred_4;
                            _3520 = frontier_phi_73_pred_5;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            if (_3245 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3245;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3228;
                        frontier_phi_67_pred_1 = _3229;
                        frontier_phi_67_pred_2 = _3230;
                        frontier_phi_67_pred_3 = _3227;
                        frontier_phi_67_pred_4 = _3226;
                        frontier_phi_67_pred_5 = _3225;
                    }
                    _2893 = frontier_phi_67_pred;
                    _2895 = frontier_phi_67_pred_1;
                    _2897 = frontier_phi_67_pred_2;
                    _2891 = frontier_phi_67_pred_3;
                    _2889 = frontier_phi_67_pred_4;
                    _2887 = frontier_phi_67_pred_5;
                    uint _3032 = _3031 + 1u;
                    if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3025 = _2887;
                        _3026 = _2889;
                        _3027 = _2891;
                        _3028 = _2893;
                        _3029 = _2895;
                        _3030 = _2897;
                        _3031 = _3032;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2895;
                frontier_phi_55_56_ladder_1 = _2897;
                frontier_phi_55_56_ladder_2 = _2893;
                frontier_phi_55_56_ladder_3 = _2891;
                frontier_phi_55_56_ladder_4 = _2889;
                frontier_phi_55_56_ladder_5 = _2887;
            }
            else
            {
                frontier_phi_55_56_ladder = _2781;
                frontier_phi_55_56_ladder_1 = _2783;
                frontier_phi_55_56_ladder_2 = _2779;
                frontier_phi_55_56_ladder_3 = _2777;
                frontier_phi_55_56_ladder_4 = _2775;
                frontier_phi_55_56_ladder_5 = _2773;
            }
            _2886 = frontier_phi_55_56_ladder_5;
            _2888 = frontier_phi_55_56_ladder_4;
            _2890 = frontier_phi_55_56_ladder_3;
            _2892 = frontier_phi_55_56_ladder_2;
            _2894 = frontier_phi_55_56_ladder;
            _2896 = frontier_phi_55_56_ladder_1;
        }
        float _2901 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _2685 = (_2901 * _2892) + _2140;
        _2687 = (_2901 * _2894) + _2142;
        _2689 = (_2901 * _2896) + _2144;
        _2691 = ((_2886 * 0.039999999105930328369140625) * _2901) + _2470;
        _2693 = ((_2888 * 0.039999999105930328369140625) * _2901) + _2472;
        _2695 = ((_2890 * 0.039999999105930328369140625) * _2901) + _2474;
    }
    else
    {
        _2685 = _2140;
        _2687 = _2142;
        _2689 = _2144;
        _2691 = _2470;
        _2693 = _2472;
        _2695 = _2474;
    }
    float _4593 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4604 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4615 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    uint _2715 = _270 + 6u;
    float _2723 = _913 / cbSceneParam._m0[86u].x;
    float _2724 = _914 / cbSceneParam._m0[86u].y;
    vec4 _2738 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2740 = _2738.x;
    float _2741 = _2738.y;
    float _2742 = _2738.z;
    float _2743 = _2738.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _2798 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _2799 = _2798 / _847;
        float _2810 = _2799 * _898;
        float _2811 = _899 * _2799;
        float _2812 = (-0.0) - _2811;
        float _2814 = _2799 * _900;
        float _2816 = (cbSceneParam._m0[77u].w * _2812) / _2798;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2811;
        float _2824 = sqrt(((_2810 * _2810) + (_2811 * _2811)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2798)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2987;
        if (abs((_2812 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2987 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2947 = 1.0 / cbSceneParam._m0[80u].x;
            float _2948 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2949 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            _2987 = ((abs(_2824 / _2812) * cbSceneParam._m0[80u].y) * ((((_2958 - _2959) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))))) * _2947)) - ((exp2(_2834 * _2958) - exp2(_2834 * _2959)) * _2947))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _2989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, 1.0), 0.0);
        float _2998 = exp2((_2987 * (-1.44269502162933349609375)) * (1.0 - _2989.w));
        float _2999 = log2(_2998);
        float _3015 = log2(_2743);
        _2836 = (exp2(_3015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].x)) * _2989.x) / cbSceneParam._m0[78u].x)) + _2740;
        _2838 = (exp2(_3015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].y)) * _2989.y) / cbSceneParam._m0[78u].y)) + _2741;
        _2840 = (exp2(_3015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].z)) * _2989.z) / cbSceneParam._m0[78u].z)) + _2742;
        _2842 = _2998 * _2743;
    }
    else
    {
        _2836 = _2740;
        _2838 = _2741;
        _2840 = _2742;
        _2842 = _2743;
    }
    float _2854 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2855 = _2854 == 3.0;
    float _2856 = log2(_2842);
    float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2685 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _976))) + ((_2691 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1779)) * cbPerFrame._m0[3u].x));
    float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2687 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _976))) + ((_2693 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1779)) * cbPerFrame._m0[3u].x));
    float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2689 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _976))) + ((_2695 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1779)) * cbPerFrame._m0[3u].x));
    float _2874 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2874 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.y = _2874 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.z = _2874 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.w = cbInstanceData._m0[_2715].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2715].w;
}


