#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1471;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3798 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _560 = _558.x;
    float _570 = dot(vec4(_560, _558.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _582 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _369.z) * 2.0) - ((((_560 - _570) * cbMtdParam._m0[24u].z) + _570) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3820 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _596 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_583 * ((_541.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _599 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_583 * ((_541.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _602 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_583 * ((_541.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _441) + _639;
    float _649 = ((_620.y - _640) * _441) + _640;
    float _650 = ((_620.z - _641) * _441) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_662.x - _648) * _514) + _648;
    float _674 = ((_662.y - _649) * _514) + _649;
    float _675 = ((_662.z - _650) * _514) + _650;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _700 = ((_687.z - _675) * _583) + _675;
    float _703 = ((((_687.x - _673) * _583) + _673) * 2.0) + (-1.0);
    float _705 = ((((_687.y - _674) * _583) + _674) * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _3831 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _759 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _762 = ((isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : min(_759, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _771 = (_762 - ((((((_752 - _753) * cbMtdParam._m0[24u].w) + _753) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _762))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3852 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _779 = (_772 * (cbMtdParam._m0[17u].x - _596)) + _596;
    float _780 = (_772 * (cbMtdParam._m0[17u].y - _599)) + _599;
    float _781 = (_772 * (cbMtdParam._m0[17u].z - _602)) + _602;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _795 = _793.x;
    float _796 = 1.0 - _795;
    float _823 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_795 - _796) * cbMtdParam._m0[24u].y) + _796) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3863 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _832 = ((((cbMtdParam._m0[10u].x - _779) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _824) + _779;
    float _833 = ((((cbMtdParam._m0[10u].y - _780) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _824) + _780;
    float _834 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _781)) * _824) + _781;
    float _838 = (cbMtdParam._m0[19u].w * (_725.z - _700)) + _700;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _3874 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = (_772 * (_852.z - _838)) + _838;
    float _872 = ((cbMtdParam._m0[23u].y - _869) * _824) + _869;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _897 = (_891.x * 2.0) + (-1.0);
    float _898 = (_891.y * 2.0) + (-1.0);
    float _899 = dot(vec2(_897, _898), vec2(_897, _898));
    float _3885 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _907 = (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _908 = (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _920 = (((_859 - _907) + (cbMtdParam._m0[21u].x * _907)) * _772) + _907;
    float _921 = (((_860 - _908) + (cbMtdParam._m0[21u].x * _908)) * _772) + _908;
    float _922 = (_772 * (sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _711)) + _711;
    float _933 = (((_897 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _824) + _920;
    float _934 = (((_898 - _921) + (_921 * cbMtdParam._m0[22u].z)) * _824) + _921;
    float _935 = ((sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _922) * _824) + _922;
    float _937 = cbMtdParam._m0[22u].x + _725.w;
    float _940 = fma(_935, _248 * NORMAL.x, fma(_934, _255 * TANGENT.x, (_241 * _233) * _933));
    float _943 = fma(_935, _248 * NORMAL.y, fma(_934, _255 * TANGENT.y, (_241 * _234) * _933));
    float _946 = fma(_935, _248 * NORMAL.z, fma(_934, _255 * TANGENT.z, (_241 * _235) * _933));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _3896 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _954 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3918 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3929 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3940 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _972 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1022 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1012);
    float _1023 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1012);
    float _1024 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1012);
    float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
    float _1029 = _1022 * _1028;
    float _1030 = _1023 * _1028;
    float _1031 = _1024 * _1028;
    float _1037 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1038 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1056 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1059 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1062 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1076 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1082 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1076].x;
    float _1083 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_1076].y;
    float _1084 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_1076].z;
    float _3951 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1037, cbSceneParam._m0[86u].y * _1038));
    float _1100 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _1096.x;
    float _1101 = dot(vec3(_951, _952, _953), vec3(_1029, _1030, _1031));
    float _1104 = _1101 * 2.0;
    float _1108 = (_1104 * _951) - _1029;
    float _1109 = (_1104 * _952) - _1030;
    float _1110 = (_1104 * _953) - _1031;
    float _1114 = abs(dot(vec3(_1029, _1030, _1031), vec3(_951, _952, _953)));
    float _3984 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = sqrt(_954);
    float _1129 = exp2((_1116 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1116 * 3.0));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1199 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1203 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1228 = _1161 + _951;
        float _1229 = _1165 + _952;
        float _1230 = _1169 + _953;
        float _1240 = fma(_1230, cbModelParam._m0[26u].z, fma(_1229, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1228)) - _1195;
        float _1241 = fma(_1230, cbModelParam._m0[27u].z, fma(_1229, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1228)) - _1199;
        float _1242 = fma(_1230, cbModelParam._m0[28u].z, fma(_1229, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1228)) - _1203;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_951, _952, _953), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4032 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_951, _952, _953), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4065 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_951, _952, _953), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4098 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1508 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1512 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1516 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1539 = _1161 + _951;
        float _1540 = _1165 + _952;
        float _1541 = _1169 + _953;
        float _1551 = fma(_1541, cbModelParam._m0[30u].z, fma(_1540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1539)) - _1508;
        float _1552 = fma(_1541, cbModelParam._m0[31u].z, fma(_1540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1539)) - _1512;
        float _1553 = fma(_1541, cbModelParam._m0[32u].z, fma(_1540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1539)) - _1516;
        float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
        float _1570 = ((_1557 * _1551) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1508 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1557 * _1552) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1512 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1557 * _1553) / cbModelParam._m0[35u].z) + ((((((_1516 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        float _1607 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1574.x + (-0.5));
        float _1609 = _1607 * (_1574.y + (-0.5));
        float _1610 = _1607 * (_1574.z + (-0.5));
        float _1617 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1581.x + (-0.5));
        float _1619 = _1617 * (_1581.y + (-0.5));
        float _1620 = _1617 * (_1581.z + (-0.5));
        float _1627 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1588.x + (-0.5));
        float _1629 = _1627 * (_1588.y + (-0.5));
        float _1630 = _1627 * (_1588.z + (-0.5));
        float _1637 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1595.x + (-0.5));
        float _1639 = _1637 * (_1595.y + (-0.5));
        float _1640 = _1637 * (_1595.z + (-0.5));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = _1608 * 0.5;
        float _1645 = _1618 * 0.5;
        float _1646 = _1628 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_951, _952, _953), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4161 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1671 + 1.0))) + _1676) * _1641;
        float _1686 = _1609 * 0.5;
        float _1687 = _1619 * 0.5;
        float _1688 = _1629 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_951, _952, _953), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4194 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1713 + 1.0))) + _1718) * _1642;
        float _1728 = _1610 * 0.5;
        float _1729 = _1620 * 0.5;
        float _1730 = _1630 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_951, _952, _953), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4227 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1755 + 1.0))) + _1760) * _1643;
        _1777 = _1610;
        _1778 = _1609;
        _1779 = _1608;
        _1780 = _1620;
        _1781 = _1619;
        _1782 = _1618;
        _1783 = _1630;
        _1784 = _1629;
        _1785 = _1628;
        _1786 = _1643;
        _1787 = _1642;
        _1788 = _1641;
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
    }
    else
    {
        _1777 = _1471;
        _1778 = _1471;
        _1779 = _1471;
        _1780 = _1471;
        _1781 = _1471;
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = 0.0;
        _1790 = 0.0;
        _1791 = 0.0;
    }
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1483)) + _1483;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1484)) + _1484;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1485)) + _1485;
    float _1824 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1801));
    float _1845 = _1108 * 0.5;
    float _1846 = _1109 * 0.5;
    float _1847 = _1110 * 0.5;
    float _1848 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1851 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1854 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1888;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1861 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1865 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1869 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1876 = dot(vec4(cbModelParam._m0[39u]), vec4(_1845, _1846, _1847, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1899;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1890 = dot(vec4(cbModelParam._m0[40u]), vec4(_1845, _1846, _1847, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1903 = (_1899 * cbModelParam._m0[1u].x) + (_1888 * (1.0 - cbModelParam._m0[1u].x));
    float _1913 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1913 : min(cbModelParam._m0[25u].z, _1913));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1961 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1965 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _1969 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _1972 = fma(_1110, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108));
        float _1975 = fma(_1110, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108));
        float _1978 = fma(_1110, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108));
        float _2006;
        if (_1972 > 0.0)
        {
            _2006 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2006 = frontier_phi_14_12_ladder;
        }
        float _2228;
        if (_1975 > 0.0)
        {
            _2228 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2228 = frontier_phi_23_19_ladder;
        }
        float _2474;
        if (_1978 > 0.0)
        {
            _2474 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2474 = frontier_phi_35_30_ladder;
        }
        float _2476 = isnan(_2228) ? _2006 : (isnan(_2006) ? _2228 : min(_2006, _2228));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1972) + _1961;
        float _2482 = (_2477 * _1975) + _1965;
        float _2483 = (_2477 * _1978) + _1969;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2484;
        float _2488 = _2484 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 > _2488) || ((_2482 < _2486) || ((_2481 < _2486) || (_2481 > _2488))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2483, cbModelParam._m0[9u].z, fma(_2482, cbModelParam._m0[9u].y, _2481 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2483, cbModelParam._m0[10u].z, fma(_2482, cbModelParam._m0[10u].y, _2481 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2483, cbModelParam._m0[11u].z, fma(_2482, cbModelParam._m0[11u].y, _2481 * cbModelParam._m0[11u].x))), _1914);
            frontier_phi_13_35_ladder = _2607.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2607.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2607.x * cbModelParam._m0[1u].y;
        }
        _1994 = frontier_phi_13_35_ladder_2;
        _1996 = frontier_phi_13_35_ladder_1;
        _1998 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1108, _1109, _1110), _1914);
        _1994 = _1982.x * cbModelParam._m0[1u].y;
        _1996 = _1982.y * cbModelParam._m0[1u].y;
        _1998 = _1982.z * cbModelParam._m0[1u].y;
    }
    float _2002 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2002 : min(cbModelParam._m0[25u].w, _2002));
    float _2093;
    float _2095;
    float _2097;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2057 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2061 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2065 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2068 = fma(_1110, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108));
        float _2071 = fma(_1110, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108));
        float _2074 = fma(_1110, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108));
        float _2233;
        if (_2068 > 0.0)
        {
            _2233 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2233 = frontier_phi_25_21_ladder;
        }
        float _2501;
        if (_2071 > 0.0)
        {
            _2501 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2501 = frontier_phi_37_32_ladder;
        }
        float _2706;
        if (_2074 > 0.0)
        {
            _2706 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2706 = frontier_phi_46_43_ladder;
        }
        float _2708 = isnan(_2501) ? _2233 : (isnan(_2233) ? _2501 : min(_2233, _2501));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _2068) + _2057;
        float _2714 = (_2709 * _2071) + _2061;
        float _2715 = (_2709 * _2074) + _2065;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _2003);
            frontier_phi_22_46_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2093 = frontier_phi_22_46_ladder_2;
        _2095 = frontier_phi_22_46_ladder_1;
        _2097 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1108, _1109, _1110), _2003);
        _2093 = _2077.x * cbModelParam._m0[1u].z;
        _2095 = _2077.y * cbModelParam._m0[1u].z;
        _2097 = _2077.z * cbModelParam._m0[1u].z;
    }
    float _2109 = ((((1.0 - _1129) * ((_1116 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1129 * _1116)) * _1100;
    float _2110 = _2109 * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2111 = _2109 * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2112 = _2109 * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2115 = fma(_2112, cbSceneParam._m0[89u].z, fma(_2111, cbSceneParam._m0[89u].y, _2110 * cbSceneParam._m0[89u].x));
    float _2118 = fma(_2112, cbSceneParam._m0[90u].z, fma(_2111, cbSceneParam._m0[90u].y, _2110 * cbSceneParam._m0[90u].x));
    float _2121 = fma(_2112, cbSceneParam._m0[91u].z, fma(_2111, cbSceneParam._m0[91u].y, _2110 * cbSceneParam._m0[91u].x));
    vec4 _2129 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1037, _1038));
    float _2131 = _2129.w;
    float _2143 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2131);
    float _2144 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2131);
    float _2145 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2131);
    uvec4 _2149 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2151 = _2149.x * 14u;
    uint _2152 = _2151 + 13u;
    float _2159 = _1100 + (-1.0);
    float _2164 = (cbLight._m0[_2152].x * _2159) + 1.0;
    float _2165 = (cbLight._m0[_2152].y * _2159) + 1.0;
    float _2166 = (cbLight._m0[_2152].z * _2159) + 1.0;
    float _2167 = (cbLight._m0[_2152].w * _2159) + 1.0;
    uint _2168 = _2151 + 5u;
    float _2174 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2178 = _2151 + 4u;
    float _2187 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2191 = _2151 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_951, _952, _953));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_951, _952, _953));
    float _4363 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4374 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2168].x * _2174) * _2212) + (((cbLight._m0[_2178].x * _2143) * _2187) * _2210);
    float _2220 = ((_2174 * cbLight._m0[_2168].y) * _2212) + (((cbLight._m0[_2178].y * _2144) * _2187) * _2210);
    float _2221 = ((_2174 * cbLight._m0[_2168].z) * _2212) + (((cbLight._m0[_2178].z * _2145) * _2187) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2151 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2227)
    {
        _2238 = _2219;
        _2240 = _2220;
        _2242 = _2221;
    }
    else
    {
        uint _2246 = _2151 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2151 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4385 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2265 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2219;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2220;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2221;
    }
    bool _2245 = _2225.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2245)
    {
        _2283 = _2238;
        _2285 = _2240;
        _2287 = _2242;
    }
    else
    {
        uint _2445 = _2151 + 7u;
        float _2461 = (dot(vec3(cbLight._m0[_2151 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4401 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2464 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2283 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2238;
        _2285 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2240;
        _2287 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2242;
    }
    uint _2290 = _2151 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _954) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2151].x + _1029;
    float _2306 = cbLight._m0[_2151].y + _1030;
    float _2307 = cbLight._m0[_2151].z + _1031;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2151].xyz));
    float _4417 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2319 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2320 = dot(vec3(_951, _952, _953), vec3(_2312, _2313, _2314));
    float _4439 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2312, _2313, _2314));
    float _4450 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2344 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2319 * ((_2318 * _2344) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2344) + _2304) * _2318))) * _2318;
    float _4461 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2371 = _2151 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _954) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2191].x + _1029;
    float _2385 = cbLight._m0[_2191].y + _1030;
    float _2386 = cbLight._m0[_2191].z + _1031;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2191].xyz));
    float _4472 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2398 = dot(vec3(_951, _952, _953), vec3(_2391, _2392, _2393));
    float _4483 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2391, _2392, _2393));
    float _4494 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2420 = 1.0 - _2383;
    float _2430 = (0.5 / (((_2319 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2420) + _2383) * _2397))) * _2397;
    float _4505 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2442 = (((_2419 * cbLight._m0[_2371].x) * _2432) * _2174) + ((((cbLight._m0[_2290].x * _2143) * _2343) * _2357) * _2187);
    float _2443 = (((_2419 * cbLight._m0[_2371].y) * _2432) * _2174) + ((((cbLight._m0[_2290].y * _2144) * _2343) * _2357) * _2187);
    float _2444 = (((_2419 * cbLight._m0[_2371].z) * _2432) * _2174) + ((((cbLight._m0[_2290].z * _2145) * _2343) * _2357) * _2187);
    float _2506;
    float _2508;
    float _2510;
    if (_2227)
    {
        _2506 = _2442;
        _2508 = _2443;
        _2510 = _2444;
    }
    else
    {
        uint _2512 = _2151 + 2u;
        uint _2516 = _2151 + 10u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _954) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _1029;
        float _2533 = cbLight._m0[_2512].y + _1030;
        float _2534 = cbLight._m0[_2512].z + _1031;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2512].xyz));
        float _4516 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2546 = dot(vec3(_951, _952, _953), vec3(_2539, _2540, _2541));
        float _4527 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4538 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2568 = 1.0 - _2531;
        float _2578 = (0.5 / (((_2319 * ((_2545 * _2568) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2568) + _2531) * _2545))) * _2545;
        float _4549 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2506 = (((_2567 * cbLight._m0[_2516].x) * _2580) * _2581) + _2442;
        _2508 = (((_2567 * cbLight._m0[_2516].y) * _2580) * _2581) + _2443;
        _2510 = (((_2567 * cbLight._m0[_2516].z) * _2580) * _2581) + _2444;
    }
    float _2616;
    float _2618;
    float _2620;
    if (_2245)
    {
        _2616 = _2506;
        _2618 = _2508;
        _2620 = _2510;
    }
    else
    {
        uint _2627 = _2151 + 3u;
        uint _2631 = _2151 + 11u;
        float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _954) * 0.949999988079071044921875);
        float _2646 = _2645 * _2645;
        float _2647 = cbLight._m0[_2627].x + _1029;
        float _2648 = cbLight._m0[_2627].y + _1030;
        float _2649 = cbLight._m0[_2627].z + _1031;
        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
        float _2654 = _2653 * _2647;
        float _2655 = _2653 * _2648;
        float _2656 = _2653 * _2649;
        float _2657 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2627].xyz));
        float _4565 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2661 = dot(vec3(_951, _952, _953), vec3(_2654, _2655, _2656));
        float _4576 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2665 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2654, _2655, _2656));
        float _4587 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2669 = _2646 * _2646;
        float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
        float _2682 = (exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2683 = 1.0 - _2646;
        float _2693 = (0.5 / (((_2319 * ((_2660 * _2683) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2683) + _2646) * _2660))) * _2660;
        float _4598 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2616 = (((_2682 * cbLight._m0[_2631].x) * _2695) * _2696) + _2506;
        _2618 = (((_2682 * cbLight._m0[_2631].y) * _2695) * _2696) + _2508;
        _2620 = (((_2682 * cbLight._m0[_2631].z) * _2695) * _2696) + _2510;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2149.y == 0u)
    {
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2771;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2771;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2771;
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1038) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _1037) / _2787)));
        float _2808 = (log2(_2774 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3080)
                {
                    frontier_phi_61_pred = _3064;
                    frontier_phi_61_pred_1 = _3069;
                    frontier_phi_61_pred_2 = _3068;
                    frontier_phi_61_pred_3 = _3067;
                    frontier_phi_61_pred_4 = _3066;
                    frontier_phi_61_pred_5 = _3065;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3079;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3070 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _2772;
                        float _3255 = _3214.y - _2773;
                        float _3256 = _3214.z - _2774;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_1056, _1059, _1062), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4624 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _2772;
                        float _3290 = (-0.0) - _2773;
                        float _3291 = (-0.0) - _2774;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3306 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _1116;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_1056, _1059, _1062), vec3(_3296, _3297, _3298));
                        float _4640 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3331 = dot(vec3(_1056, _1059, _1062), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4651 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3274 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3264) + _3340;
                        float _4662 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4673 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3338 * _3338) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3123 = (_3285 * _3233.x) + _3191;
                        _3124 = (_3285 * _3233.y) + _3192;
                        _3125 = (_3285 * _3233.z) + _3193;
                        _3120 = (_3366 * _3250.x) + _3188;
                        _3121 = (_3366 * _3250.y) + _3189;
                        _3122 = (_3366 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_61_pred = _3120;
                    frontier_phi_61_pred_1 = _3125;
                    frontier_phi_61_pred_2 = _3124;
                    frontier_phi_61_pred_3 = _3123;
                    frontier_phi_61_pred_4 = _3122;
                    frontier_phi_61_pred_5 = _3121;
                }
                _2920 = frontier_phi_61_pred;
                _2930 = frontier_phi_61_pred_1;
                _2928 = frontier_phi_61_pred_2;
                _2926 = frontier_phi_61_pred_3;
                _2924 = frontier_phi_61_pred_4;
                _2922 = frontier_phi_61_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2920;
                    _3065 = _2922;
                    _3066 = _2924;
                    _3067 = _2926;
                    _3068 = _2928;
                    _3069 = _2930;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2936) & _2818) == 0u)
        {
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
            float _3058 = _3057 * _2772;
            float _3059 = _3057 * _2773;
            float _3060 = _3057 * _2774;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3171 = _2919;
                float _3172 = _2921;
                float _3173 = _2923;
                float _3174 = _2925;
                float _3175 = _2927;
                float _3176 = _2929;
                uint _3177 = _2936;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3187)
                    {
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        uint _3390 = _3186;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3474;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3401 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3401 * 40u) + 20u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3401 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3401 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_2774, _3508.z, fma(_2773, _3508.y, _3508.x * _2772)) + _3508.w;
                            _3521 = !((fma(_2774, _3489.z, fma(_2773, _3489.y, _3489.x * _2772)) + _3489.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3416.x - _2772;
                                float _3549 = _3416.y - _2773;
                                float _3550 = _3416.z - _2774;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3417 * _3417));
                                float _4684 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3566 = sqrt(_3551) * _3432.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_1056, _1059, _1062))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_2774, _3459.z, fma(_2773, _3459.y, _3459.x * _2772)) + _3459.w) / _3520;
                                float _3580 = (fma(_2774, _3474.z, fma(_2773, _3474.y, _3474.x * _2772)) + _3474.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4700 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _1116;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3611 = _3557 - _3060;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_1056, _1059, _1062), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4711 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3623 = dot(vec3(_1056, _1059, _1062), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4722 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_1056, _1059, _1062), vec3(_3555, _3556, _3557))) + _3632;
                                float _4733 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4744 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3660 * _3444.x;
                                frontier_phi_73_pred_1 = _3660 * _3444.y;
                                frontier_phi_73_pred_2 = _3586 * _3432.z;
                                frontier_phi_73_pred_3 = _3586 * _3432.y;
                                frontier_phi_73_pred_4 = _3586 * _3432.x;
                                frontier_phi_73_pred_5 = _3660 * _3444.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_73_pred;
                            _3665 = frontier_phi_73_pred_1;
                            _3669 = frontier_phi_73_pred_2;
                            _3668 = frontier_phi_73_pred_3;
                            _3667 = frontier_phi_73_pred_4;
                            _3666 = frontier_phi_73_pred_5;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3374;
                        frontier_phi_67_pred_1 = _3375;
                        frontier_phi_67_pred_2 = _3376;
                        frontier_phi_67_pred_3 = _3373;
                        frontier_phi_67_pred_4 = _3372;
                        frontier_phi_67_pred_5 = _3371;
                    }
                    _3039 = frontier_phi_67_pred;
                    _3041 = frontier_phi_67_pred_1;
                    _3043 = frontier_phi_67_pred_2;
                    _3037 = frontier_phi_67_pred_3;
                    _3035 = frontier_phi_67_pred_4;
                    _3033 = frontier_phi_67_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3033;
                        _3172 = _3035;
                        _3173 = _3037;
                        _3174 = _3039;
                        _3175 = _3041;
                        _3176 = _3043;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3041;
                frontier_phi_55_56_ladder_1 = _3043;
                frontier_phi_55_56_ladder_2 = _3039;
                frontier_phi_55_56_ladder_3 = _3037;
                frontier_phi_55_56_ladder_4 = _3035;
                frontier_phi_55_56_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            _3032 = frontier_phi_55_56_ladder_5;
            _3034 = frontier_phi_55_56_ladder_4;
            _3036 = frontier_phi_55_56_ladder_3;
            _3038 = frontier_phi_55_56_ladder_2;
            _3040 = frontier_phi_55_56_ladder;
            _3042 = frontier_phi_55_56_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
        _2831 = (_3047 * _3038) + _2283;
        _2833 = (_3047 * _3040) + _2285;
        _2835 = (_3047 * _3042) + _2287;
        _2837 = ((_3032 * 0.039999999105930328369140625) * _3047) + _2616;
        _2839 = ((_3034 * 0.039999999105930328369140625) * _3047) + _2618;
        _2841 = ((_3036 * 0.039999999105930328369140625) * _3047) + _2620;
    }
    else
    {
        _2831 = _2283;
        _2833 = _2285;
        _2835 = _2287;
        _2837 = _2616;
        _2839 = _2618;
        _2841 = _2620;
    }
    float _4760 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _4771 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _4782 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    uint _2861 = _261 + 6u;
    float _2869 = _1037 / cbSceneParam._m0[86u].x;
    float _2870 = _1038 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _972 : (isnan(_972) ? cbSceneParam._m0[77u].w : min(_972, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_972 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_972) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _972 : min(cbSceneParam._m0[80u].w, _972));
        float _2945 = _2944 / _972;
        float _2956 = _2945 * _1022;
        float _2957 = _1023 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2960 = _2945 * _1024;
        float _2962 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2957;
        float _2970 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3133;
        if (abs((_2958 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3133 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3095 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3133 = ((abs(_2970 / _2958) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2980 * _3104) - exp2(_2980 * _3105)) * _3093))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3135 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3144 = exp2((_3133 * (-1.44269502162933349609375)) * (1.0 - _3135.w));
        float _3145 = log2(_3144);
        float _3161 = log2(_2889);
        _2982 = (exp2(_3161 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].x)) * _3135.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2984 = (exp2(_3161 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].y)) * _3135.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2986 = (exp2(_3161 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].z)) * _3135.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2988 = _3144 * _2889;
    }
    else
    {
        _2982 = _2886;
        _2984 = _2887;
        _2986 = _2888;
        _2988 = _2889;
    }
    float _3000 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3001 = _3000 == 3.0;
    float _3002 = log2(_2988);
    float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2831 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1100))) + ((_2837 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1903)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2833 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1100))) + ((_2839 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1903)) * cbPerFrame._m0[3u].x));
    float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2835 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1100))) + ((_2841 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1903)) * cbPerFrame._m0[3u].x));
    float _3020 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3020 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.y = _3020 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.z = _3020 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.w = cbInstanceData._m0[_2861].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
}


