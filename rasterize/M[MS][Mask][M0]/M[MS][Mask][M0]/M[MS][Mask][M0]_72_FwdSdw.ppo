#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1268;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _350.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3856 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _426 = (_419 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _427 = (_419 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _428 = (_419 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _350.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[24u].z) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3867 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _505 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426);
    float _508 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427);
    float _511 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428);
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _557 = ((_529.x - _548) * _419) + _548;
    float _558 = ((_529.y - _549) * _419) + _549;
    float _559 = ((_529.z - _550) * _419) + _550;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _584 = ((_571.z - _559) * _492) + _559;
    float _587 = ((((_571.x - _557) * _492) + _557) * 2.0) + (-1.0);
    float _589 = ((((_571.y - _558) * _492) + _558) * 2.0) + (-1.0);
    float _590 = dot(vec2(_587, _589), vec2(_587, _589));
    float _3878 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _622 = (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _625 = fma(_595, _228, fma(_622, _235, _621 * _221));
    float _628 = fma(_595, _229, fma(_622, _236, _621 * _222));
    float _631 = fma(_595, _230, fma(_622, _237, _621 * _223));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _671 = (cbMtdParam._m0[19u].x + dot(vec4(_635 * _625, _635 * _628, _635 * _631, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) * cbMtdParam._m0[21u].z);
    float _3889 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _679 = (_672 * (cbMtdParam._m0[17u].x - _505)) + _505;
    float _680 = (_672 * (cbMtdParam._m0[17u].y - _508)) + _508;
    float _681 = (_672 * (cbMtdParam._m0[17u].z - _511)) + _511;
    float _685 = (cbMtdParam._m0[19u].w * (_609.z - _584)) + _584;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3900 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = ((_698.z - _685) * _672) + _685;
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _595) * _672) + _595;
    float _728 = (((_705 - _621) * _672) + _621) + (cbMtdParam._m0[21u].x * _621);
    float _729 = (((_706 - _622) * _672) + _622) + (cbMtdParam._m0[21u].x * _622);
    float _733 = cbMtdParam._m0[22u].x + _609.w;
    float _736 = fma(_725, _228, fma(_729, _235, _728 * _221));
    float _739 = fma(_725, _229, fma(_729, _236, _728 * _222));
    float _742 = fma(_725, _230, fma(_729, _237, _728 * _223));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3911 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _750 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3933 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3944 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3955 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _768 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _819 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _809);
    float _820 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _809);
    float _821 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _809);
    float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
    float _826 = _819 * _825;
    float _827 = _820 * _825;
    float _828 = _821 * _825;
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _853 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _856 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _859 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _873 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _879 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_873].x;
    float _880 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_873].y;
    float _881 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_873].z;
    float _3966 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    vec4 _893 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _897 = ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * TEXCOORD_5.w) * _893.x;
    float _898 = dot(vec3(_747, _748, _749), vec3(_826, _827, _828));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _747) - _826;
    float _906 = (_901 * _748) - _827;
    float _907 = (_901 * _749) - _828;
    float _911 = abs(dot(vec3(_826, _827, _828), vec3(_747, _748, _749)));
    float _3999 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_750);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_966, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958));
        float _996 = fma(_966, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958));
        float _1000 = fma(_966, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958));
        float _1025 = _958 + _747;
        float _1026 = _962 + _748;
        float _1027 = _966 + _749;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _992;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _996;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1000;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_747, _748, _749), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4047 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_747, _748, _749), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4080 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_747, _748, _749), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4113 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_966, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958));
        float _1310 = fma(_966, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958));
        float _1314 = fma(_966, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958));
        float _1337 = _958 + _747;
        float _1338 = _962 + _748;
        float _1339 = _966 + _749;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_747, _748, _749), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4176 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_747, _748, _749), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4209 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_747, _748, _749), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4242 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1268;
        _1576 = _1268;
        _1577 = _1268;
        _1578 = _1268;
        _1579 = _1268;
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1280)) + _1280;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1281)) + _1281;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1282)) + _1282;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _905 * 0.5;
    float _1644 = _906 * 0.5;
    float _1645 = _907 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_966, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_966, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_966, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1774 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1777 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1805 = frontier_phi_14_12_ladder;
        }
        float _1975;
        if (_1774 > 0.0)
        {
            _1975 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1975 = frontier_phi_23_19_ladder;
        }
        float _2270;
        if (_1777 > 0.0)
        {
            _2270 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2270 = frontier_phi_35_30_ladder;
        }
        float _2272 = isnan(_1975) ? _1805 : (isnan(_1805) ? _1975 : min(_1805, _1975));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1771) + _1760;
        float _2278 = (_2273 * _1774) + _1764;
        float _2279 = (_2273 * _1777) + _1768;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_13_35_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_13_35_ladder_2;
        _1795 = frontier_phi_13_35_ladder_1;
        _1797 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1712);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_966, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_966, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_966, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1870 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1873 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _1980;
        if (_1867 > 0.0)
        {
            _1980 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1980 = frontier_phi_25_21_ladder;
        }
        float _2297;
        if (_1870 > 0.0)
        {
            _2297 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2297 = frontier_phi_37_32_ladder;
        }
        float _2624;
        if (_1873 > 0.0)
        {
            _2624 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2624 = frontier_phi_47_44_ladder;
        }
        float _2626 = isnan(_2297) ? _1980 : (isnan(_1980) ? _2297 : min(_1980, _2297));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _1867) + _1856;
        float _2632 = (_2627 * _1870) + _1860;
        float _2633 = (_2627 * _1873) + _1864;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2635 = (-1.0) - _2634;
        float _2637 = _2634 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2633 > _2637) || ((_2633 < _2635) || ((_2632 > _2637) || ((_2632 < _2635) || ((_2631 < _2635) || (_2631 > _2637))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2633, cbModelParam._m0[17u].z, fma(_2632, cbModelParam._m0[17u].y, _2631 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2633, cbModelParam._m0[18u].z, fma(_2632, cbModelParam._m0[18u].y, _2631 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2633, cbModelParam._m0[19u].z, fma(_2632, cbModelParam._m0[19u].y, _2631 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_22_47_ladder = _2751.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2751.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2751.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_22_47_ladder_2;
        _1894 = frontier_phi_22_47_ladder_1;
        _1896 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1802);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1908 = ((((1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_926 * _913)) * _897;
    float _1909 = _1908 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = _1908 * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1911 = _1908 * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1967 = _1954 / _1966;
    float _1968 = _1958 / _1966;
    float _1969 = _1962 / _1966;
    float _2116;
    float _2117;
    float _2118;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1996 = ((uint(_1969 > cbSceneParam._m0[59u].y) + uint(_1969 > cbSceneParam._m0[59u].x)) + uint(_1969 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1997 = _1996 + 43u;
        uint _2005 = _1996 + 44u;
        uint _2013 = _1996 + 45u;
        uint _2021 = _1996 + 46u;
        float _2032 = fma(_1966, cbSceneParam._m0[_1997].w, fma(_1962, cbSceneParam._m0[_1997].z, fma(_1958, cbSceneParam._m0[_1997].y, _1954 * cbSceneParam._m0[_1997].x)));
        float _2036 = fma(_1966, cbSceneParam._m0[_2005].w, fma(_1962, cbSceneParam._m0[_2005].z, fma(_1958, cbSceneParam._m0[_2005].y, _1954 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1966, cbSceneParam._m0[_2021].w, fma(_1962, cbSceneParam._m0[_2021].z, fma(_1958, cbSceneParam._m0[_2021].y, _1954 * cbSceneParam._m0[_2021].x)));
        float _2049 = cbSceneParam._m0[33u].z * _2044;
        float _2051 = cbSceneParam._m0[33u].w * _2044;
        float _2054 = fma(_1966, cbSceneParam._m0[_2013].w, fma(_1962, cbSceneParam._m0[_2013].z, fma(_1958, cbSceneParam._m0[_2013].y, _1954 * cbSceneParam._m0[_2013].x))) / _2044;
        float _2102 = (cbSceneParam._m0[33u].x - sqrt(((_1968 * _1968) + (_1967 * _1967)) + (_1969 * _1969))) * cbSceneParam._m0[33u].y;
        float _4368 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2109 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 + _2032) / _2044, (_2051 + _2036) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 + _2032) / _2044, (_2036 - _2049) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 - _2049) / _2044, (_2036 - _2051) / _2044), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 - _2051) / _2044, (_2049 + _2036) / _2044), _2054), 0.0)).x), vec4(0.25)));
        _2116 = 1.0 - (_2109 * cbSceneParam._m0[34u].x);
        _2117 = 1.0 - (_2109 * cbSceneParam._m0[34u].y);
        _2118 = 1.0 - (_2109 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2116 = 1.0;
        _2117 = 1.0;
        _2118 = 1.0;
    }
    float _2182;
    float _2184;
    float _2186;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2170 = fma(_1966, cbSceneParam._m0[63u].w, fma(_1962, cbSceneParam._m0[63u].z, fma(_1958, cbSceneParam._m0[63u].y, _1954 * cbSceneParam._m0[63u].x)));
        float _2171 = fma(_1966, cbSceneParam._m0[60u].w, fma(_1962, cbSceneParam._m0[60u].z, fma(_1958, cbSceneParam._m0[60u].y, _1954 * cbSceneParam._m0[60u].x))) / _2170;
        float _2172 = fma(_1966, cbSceneParam._m0[61u].w, fma(_1962, cbSceneParam._m0[61u].z, fma(_1958, cbSceneParam._m0[61u].y, _1954 * cbSceneParam._m0[61u].x))) / _2170;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2171 >= cbSceneParam._m0[64u].x) && (_2172 >= cbSceneParam._m0[64u].y)) && (_2171 <= cbSceneParam._m0[64u].z)) && (_2172 <= cbSceneParam._m0[64u].w))
        {
            float _2310 = fma(_1966, cbSceneParam._m0[62u].w, fma(_1962, cbSceneParam._m0[62u].z, fma(_1958, cbSceneParam._m0[62u].y, _1954 * cbSceneParam._m0[62u].x))) / _2170;
            float _2314 = isnan(cbSceneParam._m0[41u].w) ? _2310 : (isnan(_2310) ? cbSceneParam._m0[41u].w : max(_2310, cbSceneParam._m0[41u].w));
            float _2357 = (cbSceneParam._m0[33u].x - sqrt(((_1968 * _1968) + (_1967 * _1967)) + (_1969 * _1969))) * cbSceneParam._m0[33u].y;
            float _4384 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
            float _2364 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2171, cbSceneParam._m0[33u].w + _2172), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2171, _2172 - cbSceneParam._m0[33u].z), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2171 - cbSceneParam._m0[33u].z, _2172 - cbSceneParam._m0[33u].w), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2171 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2172), _2314), 0.0)).x), vec4(0.25)));
            float _2368 = 1.0 - (_2364 * cbSceneParam._m0[34u].x);
            float _2369 = 1.0 - (_2364 * cbSceneParam._m0[34u].y);
            float _2370 = 1.0 - (_2364 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2370) ? _2118 : (isnan(_2118) ? _2370 : min(_2118, _2370));
            frontier_phi_34_33_ladder_1 = isnan(_2369) ? _2117 : (isnan(_2117) ? _2369 : min(_2117, _2369));
            frontier_phi_34_33_ladder_2 = isnan(_2368) ? _2116 : (isnan(_2116) ? _2368 : min(_2116, _2368));
        }
        else
        {
            frontier_phi_34_33_ladder = _2118;
            frontier_phi_34_33_ladder_1 = _2117;
            frontier_phi_34_33_ladder_2 = _2116;
        }
        _2182 = frontier_phi_34_33_ladder_2;
        _2184 = frontier_phi_34_33_ladder_1;
        _2186 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2182 = _2116;
        _2184 = _2117;
        _2186 = _2118;
    }
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _897 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2229 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2233 = _2193 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_747, _748, _749));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_747, _748, _749));
    float _4420 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4431 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2210].x * _2216) * _2254) + (((cbLight._m0[_2220].x * _2182) * _2229) * _2252);
    float _2262 = ((_2216 * cbLight._m0[_2210].y) * _2254) + (((cbLight._m0[_2220].y * _2184) * _2229) * _2252);
    float _2263 = ((_2216 * cbLight._m0[_2210].z) * _2254) + (((cbLight._m0[_2220].z * _2186) * _2229) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2269)
    {
        _2371 = _2261;
        _2373 = _2262;
        _2375 = _2263;
    }
    else
    {
        uint _2379 = _2193 + 6u;
        float _2395 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4442 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2398 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2371 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2261;
        _2373 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2262;
        _2375 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2263;
    }
    bool _2378 = _2267.y == 0u;
    float _2433;
    float _2435;
    float _2437;
    if (_2378)
    {
        _2433 = _2371;
        _2435 = _2373;
        _2437 = _2375;
    }
    else
    {
        uint _2595 = _2193 + 7u;
        float _2611 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4458 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2614 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2433 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2371;
        _2435 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2373;
        _2437 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2375;
    }
    uint _2440 = _2193 + 8u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _750) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2193].x + _826;
    float _2456 = cbLight._m0[_2193].y + _827;
    float _2457 = cbLight._m0[_2193].z + _828;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2193].xyz));
    float _4474 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _4485 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2469 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2470 = dot(vec3(_747, _748, _749), vec3(_2462, _2463, _2464));
    float _4496 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2462, _2463, _2464));
    float _4507 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2454 * _2454;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2494 = 1.0 - _2454;
    float _2505 = (0.5 / (((_2469 * ((_2468 * _2494) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2494) + _2454) * _2468))) * _2468;
    float _4518 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2507 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    uint _2521 = _2193 + 9u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _750) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2233].x + _826;
    float _2535 = cbLight._m0[_2233].y + _827;
    float _2536 = cbLight._m0[_2233].z + _828;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2233].xyz));
    float _4529 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2548 = dot(vec3(_747, _748, _749), vec3(_2541, _2542, _2543));
    float _4540 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2541, _2542, _2543));
    float _4551 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2533 * _2533;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2570 = 1.0 - _2533;
    float _2580 = (0.5 / (((_2469 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2570) + _2533) * _2547))) * _2547;
    float _4562 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    float _2592 = (((_2569 * cbLight._m0[_2521].x) * _2582) * _2216) + ((((cbLight._m0[_2440].x * _2182) * _2493) * _2507) * _2229);
    float _2593 = (((_2569 * cbLight._m0[_2521].y) * _2582) * _2216) + ((((cbLight._m0[_2440].y * _2184) * _2493) * _2507) * _2229);
    float _2594 = (((_2569 * cbLight._m0[_2521].z) * _2582) * _2216) + ((((cbLight._m0[_2440].z * _2186) * _2493) * _2507) * _2229);
    float _2650;
    float _2652;
    float _2654;
    if (_2269)
    {
        _2650 = _2592;
        _2652 = _2593;
        _2654 = _2594;
    }
    else
    {
        uint _2656 = _2193 + 2u;
        uint _2660 = _2193 + 10u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _750) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _826;
        float _2677 = cbLight._m0[_2656].y + _827;
        float _2678 = cbLight._m0[_2656].z + _828;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2656].xyz));
        float _4573 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2690 = dot(vec3(_747, _748, _749), vec3(_2683, _2684, _2685));
        float _4584 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4595 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2711 = (exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2712 = 1.0 - _2675;
        float _2722 = (0.5 / (((_2469 * ((_2689 * _2712) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2712) + _2675) * _2689))) * _2689;
        float _4606 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2650 = (((_2711 * cbLight._m0[_2660].x) * _2724) * _2725) + _2592;
        _2652 = (((_2711 * cbLight._m0[_2660].y) * _2724) * _2725) + _2593;
        _2654 = (((_2711 * cbLight._m0[_2660].z) * _2724) * _2725) + _2594;
    }
    float _2756;
    float _2758;
    float _2760;
    if (_2378)
    {
        _2756 = _2650;
        _2758 = _2652;
        _2760 = _2654;
    }
    else
    {
        uint _2767 = _2193 + 3u;
        uint _2771 = _2193 + 11u;
        float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2767].w)) * _750) * 0.949999988079071044921875);
        float _2786 = _2785 * _2785;
        float _2787 = cbLight._m0[_2767].x + _826;
        float _2788 = cbLight._m0[_2767].y + _827;
        float _2789 = cbLight._m0[_2767].z + _828;
        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
        float _2794 = _2793 * _2787;
        float _2795 = _2793 * _2788;
        float _2796 = _2793 * _2789;
        float _2797 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2767].xyz));
        float _4622 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2801 = dot(vec3(_747, _748, _749), vec3(_2794, _2795, _2796));
        float _4633 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2805 = dot(vec3(cbLight._m0[_2767].xyz), vec3(_2794, _2795, _2796));
        float _4644 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2809 = _2786 * _2786;
        float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
        float _2822 = (exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2823 = 1.0 - _2786;
        float _2833 = (0.5 / (((_2469 * ((_2800 * _2823) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2823) + _2786) * _2800))) * _2800;
        float _4655 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2756 = (((_2822 * cbLight._m0[_2771].x) * _2835) * _2836) + _2650;
        _2758 = (((_2822 * cbLight._m0[_2771].y) * _2835) * _2836) + _2652;
        _2760 = (((_2822 * cbLight._m0[_2771].z) * _2835) * _2836) + _2654;
    }
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_2191.y == 0u)
    {
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.x;
        uint _2869 = uint((float(_2857.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2858))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2858)));
        float _2879 = (log2(_1969 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2880 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        uint _2883 = uint(isnan(14.0) ? _2880 : (isnan(_2880) ? 14.0 : min(_2880, 14.0)));
        uvec4 _2888 = texelFetch(g_lightClusterGridBuffer, int(((_2883 << 2u) + (_2869 << 6u)) >> 2u));
        uint _2889 = _2888.x;
        uint _2890 = _2857.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2890 >> 4u) & 15u)) + 4294967295u) & _2889) == 0u) || ((_2890 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            uint _3120 = 0u;
            uint _3129;
            bool _3130;
            for (;;)
            {
                _3129 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                _3130 = _3129 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3130)
                {
                    frontier_phi_66_pred = _3119;
                    frontier_phi_66_pred_1 = _3118;
                    frontier_phi_66_pred_2 = _3117;
                    frontier_phi_66_pred_3 = _3116;
                    frontier_phi_66_pred_4 = _3115;
                    frontier_phi_66_pred_5 = _3114;
                }
                else
                {
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    uint _3244;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3129;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    for (;;)
                    {
                        uint _3248 = uint(findLSB(_3244)) + (_3120 << 5u);
                        uint _3245 = (_3244 + 4294967295u) & _3244;
                        uint _3250 = _3248 * 48u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3270 = (_3248 * 48u) + 4u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3289 = (_3248 * 48u) + 8u;
                        vec3 _3300 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x));
                        float _3304 = _3264.x - _1967;
                        float _3305 = _3264.y - _1968;
                        float _3306 = _3264.z - _1969;
                        float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                        float _3310 = inversesqrt(_3307);
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3314 = dot(vec3(_853, _856, _859), vec3(_3311, _3312, _3313));
                        float _3319 = 1.0 - (_3307 * _3264.w);
                        float _4681 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3321 = sqrt(_3307) * _3283.w;
                        float _3324 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3314) + _3325;
                        float _3331 = _3321 * _3321;
                        float _3335 = ((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3320) / ((_3331 * 0.699999988079071044921875) + 1.0);
                        float _3339 = (-0.0) - _1967;
                        float _3340 = (-0.0) - _1968;
                        float _3341 = (-0.0) - _1969;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3355 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                        float _3356 = 1.0 - _913;
                        float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                        float _3364 = _3363 * _3363;
                        float _3365 = _3364 * _3364;
                        float _3366 = _3346 + _3311;
                        float _3367 = _3347 + _3312;
                        float _3368 = _3348 + _3313;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3376 = dot(vec3(_853, _856, _859), vec3(_3346, _3347, _3348));
                        float _4697 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3380 = dot(vec3(_853, _856, _859), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                        float _4708 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                        float _3388 = _3324 * _3364;
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3314) + _3389;
                        float _4719 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3394 = 1.0 - _3364;
                        float _3404 = (0.5 / (((_3393 * ((_3379 * _3394) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3393 * _3394) + _3364) * _3379))) * _3393;
                        float _4730 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3415 = (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3387 * _3387) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125))) * _3320;
                        _3173 = (_3335 * _3283.x) + _3241;
                        _3174 = (_3335 * _3283.y) + _3242;
                        _3175 = (_3335 * _3283.z) + _3243;
                        _3170 = (_3415 * _3300.x) + _3238;
                        _3171 = (_3415 * _3300.y) + _3239;
                        _3172 = (_3415 * _3300.z) + _3240;
                        if (_3245 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3245;
                        }
                    }
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                _2980 = frontier_phi_66_pred;
                _2978 = frontier_phi_66_pred_1;
                _2976 = frontier_phi_66_pred_2;
                _2974 = frontier_phi_66_pred_3;
                _2972 = frontier_phi_66_pred_4;
                _2970 = frontier_phi_66_pred_5;
                uint _3121 = _3120 + 1u;
                if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3114 = _2970;
                    _3115 = _2972;
                    _3116 = _2974;
                    _3117 = _2976;
                    _3118 = _2978;
                    _3119 = _2980;
                    _3120 = _3121;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((4294967295u << _2986) & _2889) == 0u)
        {
            _3082 = _2969;
            _3084 = _2971;
            _3086 = _2973;
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
        }
        else
        {
            float _3107 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
            float _3108 = _3107 * _1967;
            float _3109 = _3107 * _1968;
            float _3110 = _3107 * _1969;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3221 = _2969;
                float _3222 = _2971;
                float _3223 = _2973;
                float _3224 = _2975;
                float _3225 = _2977;
                float _3226 = _2979;
                uint _3227 = _2986;
                uint _3236;
                bool _3237;
                for (;;)
                {
                    _3236 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                    _3237 = _3236 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3237)
                    {
                        frontier_phi_72_pred = _3226;
                        frontier_phi_72_pred_1 = _3225;
                        frontier_phi_72_pred_2 = _3224;
                        frontier_phi_72_pred_3 = _3223;
                        frontier_phi_72_pred_4 = _3222;
                        frontier_phi_72_pred_5 = _3221;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3433 = _3221;
                        float _3434 = _3222;
                        float _3435 = _3223;
                        float _3436 = _3224;
                        float _3437 = _3225;
                        float _3438 = _3226;
                        uint _3439 = _3236;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3450 = ((_3227 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3450 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3450 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3450 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_1969, _3557.z, fma(_1968, _3557.y, _3557.x * _1967)) + _3557.w;
                            _3570 = !((fma(_1969, _3538.z, fma(_1968, _3538.y, _3538.x * _1967)) + _3538.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3465.x - _1967;
                                float _3598 = _3465.y - _1968;
                                float _3599 = _3465.z - _1969;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3466 * _3466));
                                float _4741 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3615 = sqrt(_3600) * _3481.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_853, _856, _859))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_1969, _3508.z, fma(_1968, _3508.y, _3508.x * _1967)) + _3508.w) / _3569;
                                float _3629 = (fma(_1969, _3523.z, fma(_1968, _3523.y, _3523.x * _1967)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4757 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _913;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3108;
                                float _3659 = _3605 - _3109;
                                float _3660 = _3606 - _3110;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_853, _856, _859), vec3((-0.0) - _3108, (-0.0) - _3109, (-0.0) - _3110));
                                float _4768 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3672 = dot(vec3(_853, _856, _859), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4779 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_853, _856, _859), vec3(_3604, _3605, _3606))) + _3681;
                                float _4790 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4801 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3635 * _3481.y;
                                frontier_phi_78_pred_1 = _3635 * _3481.x;
                                frontier_phi_78_pred_2 = _3709 * _3493.z;
                                frontier_phi_78_pred_3 = _3709 * _3493.y;
                                frontier_phi_78_pred_4 = _3709 * _3493.x;
                                frontier_phi_78_pred_5 = _3635 * _3481.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_78_pred;
                            _3716 = frontier_phi_78_pred_1;
                            _3715 = frontier_phi_78_pred_2;
                            _3714 = frontier_phi_78_pred_3;
                            _3713 = frontier_phi_78_pred_4;
                            _3718 = frontier_phi_78_pred_5;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3425;
                        frontier_phi_72_pred_1 = _3424;
                        frontier_phi_72_pred_2 = _3423;
                        frontier_phi_72_pred_3 = _3422;
                        frontier_phi_72_pred_4 = _3421;
                        frontier_phi_72_pred_5 = _3420;
                    }
                    _3093 = frontier_phi_72_pred;
                    _3091 = frontier_phi_72_pred_1;
                    _3089 = frontier_phi_72_pred_2;
                    _3087 = frontier_phi_72_pred_3;
                    _3085 = frontier_phi_72_pred_4;
                    _3083 = frontier_phi_72_pred_5;
                    uint _3228 = _3227 + 1u;
                    if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3221 = _3083;
                        _3222 = _3085;
                        _3223 = _3087;
                        _3224 = _3089;
                        _3225 = _3091;
                        _3226 = _3093;
                        _3227 = _3228;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3093;
                frontier_phi_60_61_ladder_1 = _3091;
                frontier_phi_60_61_ladder_2 = _3087;
                frontier_phi_60_61_ladder_3 = _3085;
                frontier_phi_60_61_ladder_4 = _3083;
                frontier_phi_60_61_ladder_5 = _3089;
            }
            else
            {
                frontier_phi_60_61_ladder = _2979;
                frontier_phi_60_61_ladder_1 = _2977;
                frontier_phi_60_61_ladder_2 = _2973;
                frontier_phi_60_61_ladder_3 = _2971;
                frontier_phi_60_61_ladder_4 = _2969;
                frontier_phi_60_61_ladder_5 = _2975;
            }
            _3082 = frontier_phi_60_61_ladder_4;
            _3084 = frontier_phi_60_61_ladder_3;
            _3086 = frontier_phi_60_61_ladder_2;
            _3088 = frontier_phi_60_61_ladder_5;
            _3090 = frontier_phi_60_61_ladder_1;
            _3092 = frontier_phi_60_61_ladder;
        }
        float _3097 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2902 = (_3097 * _3088) + _2433;
        _2904 = (_3097 * _3090) + _2435;
        _2906 = (_3097 * _3092) + _2437;
        _2908 = ((_3082 * 0.039999999105930328369140625) * _3097) + _2756;
        _2910 = ((_3084 * 0.039999999105930328369140625) * _3097) + _2758;
        _2912 = ((_3086 * 0.039999999105930328369140625) * _3097) + _2760;
    }
    else
    {
        _2902 = _2433;
        _2904 = _2435;
        _2906 = _2437;
        _2908 = _2756;
        _2910 = _2758;
        _2912 = _2760;
    }
    float _4817 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4828 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4839 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    uint _2932 = _240 + 6u;
    float _2940 = _834 / cbSceneParam._m0[86u].x;
    float _2941 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2955 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, (log2((isnan(cbSceneParam._m0[77u].w) ? _768 : (isnan(_768) ? cbSceneParam._m0[77u].w : min(_768, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2957 = _2955.x;
    float _2958 = _2955.y;
    float _2959 = _2955.z;
    float _2960 = _2955.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_768 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_768) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _768 : min(cbSceneParam._m0[80u].w, _768));
        float _2995 = _2994 / _768;
        float _3006 = _2995 * _819;
        float _3007 = _820 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _821;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3183;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3183 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3143 = 1.0 / cbSceneParam._m0[80u].x;
            float _3144 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3145 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            _3183 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3154 - _3155) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))))) * _3143)) - ((exp2(_3030 * _3154) - exp2(_3030 * _3155)) * _3143))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, 1.0), 0.0);
        float _3194 = exp2((_3183 * (-1.44269502162933349609375)) * (1.0 - _3185.w));
        float _3195 = log2(_3194);
        float _3211 = log2(_2960);
        _3032 = (exp2(_3211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].x)) * _3185.x) / cbSceneParam._m0[78u].x)) + _2957;
        _3034 = (exp2(_3211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].y)) * _3185.y) / cbSceneParam._m0[78u].y)) + _2958;
        _3036 = (exp2(_3211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].z)) * _3185.z) / cbSceneParam._m0[78u].z)) + _2959;
        _3038 = _3194 * _2960;
    }
    else
    {
        _3032 = _2957;
        _3034 = _2958;
        _3036 = _2959;
        _3038 = _2960;
    }
    float _3050 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3051 = _3050 == 3.0;
    float _3052 = log2(_3038);
    float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2902 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _897))) + ((_2908 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1701)) * cbPerFrame._m0[3u].x));
    float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2904 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _897))) + ((_2910 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x));
    float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2906 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _897))) + ((_2912 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x));
    float _3070 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3070 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.y = _3070 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
    SV_Target.z = _3070 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
    SV_Target.w = cbInstanceData._m0[_2932].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2932].w;
}


