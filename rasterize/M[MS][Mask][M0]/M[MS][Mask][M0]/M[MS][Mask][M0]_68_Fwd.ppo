#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1428;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3733 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3744 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3755 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[24u].z) + _432) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3766 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _457 = (_450 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _458 = (_450 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _459 = (_450 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3777 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) + _542;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _612 = _608.z;
    float _619 = ((_591.x - _610) * _450) + _610;
    float _620 = ((_591.y - _611) * _450) + _611;
    float _621 = ((_591.z - _612) * _450) + _612;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_633.z - _621) * _523) + _621;
    float _649 = ((((_633.x - _619) * _523) + _619) * 2.0) + (-1.0);
    float _650 = ((((_633.y - _620) * _523) + _620) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3788 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _704 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _707 = ((isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : min(_704, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _716 = (_707 - ((((((_697 - _698) * cbMtdParam._m0[24u].w) + _698) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _707))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3809 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _717 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _724 = (_717 * (cbMtdParam._m0[17u].x - _549)) + _549;
    float _725 = (_717 * (cbMtdParam._m0[17u].y - _550)) + _550;
    float _726 = (_717 * (cbMtdParam._m0[17u].z - _551)) + _551;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _740 = _738.x;
    float _741 = 1.0 - _740;
    float _766 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_740 - _741) * cbMtdParam._m0[24u].y) + _741) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3820 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _775 = ((((cbMtdParam._m0[10u].x - _724) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _767) + _724;
    float _776 = ((((cbMtdParam._m0[10u].y - _725) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _767) + _725;
    float _777 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _726)) * _767) + _726;
    float _782 = (((_568.z - _646) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _646;
    float _786 = ((_670.z - _782) * cbMtdParam._m0[19u].w) + _782;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _807 = (_800.x * 2.0) + (-1.0);
    float _808 = (_800.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3831 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _817 = (_717 * (_800.z - _786)) + _786;
    float _820 = ((cbMtdParam._m0[23u].y - _817) * _767) + _817;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _845 = (_839.x * 2.0) + (-1.0);
    float _846 = (_839.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _3842 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _861 = (_649 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_568.x * 2.0) + (-1.0)))) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _862 = (_650 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_568.y * 2.0) + (-1.0)))) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _874 = (((_807 - _861) + (cbMtdParam._m0[21u].x * _861)) * _717) + _861;
    float _875 = (((_808 - _862) + (cbMtdParam._m0[21u].x * _862)) * _717) + _862;
    float _876 = (_717 * (sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _656)) + _656;
    float _887 = (((_845 - _874) + (_874 * cbMtdParam._m0[22u].z)) * _767) + _874;
    float _888 = (((_846 - _875) + (_875 * cbMtdParam._m0[22u].z)) * _767) + _875;
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) - _876) * _767) + _876;
    float _893 = cbMtdParam._m0[22u].x + _670.w;
    float _896 = fma(_889, _249 * NORMAL.x, fma(_888, _256 * TANGENT.x, (_242 * _234) * _887));
    float _899 = fma(_889, _249 * NORMAL.y, fma(_888, _256 * TANGENT.y, (_242 * _235) * _887));
    float _902 = fma(_889, _249 * NORMAL.z, fma(_888, _256 * TANGENT.z, (_242 * _236) * _887));
    float _906 = inversesqrt(dot(vec3(_896, _899, _902), vec3(_896, _899, _902)));
    float _907 = _906 * _896;
    float _908 = _906 * _899;
    float _909 = _906 * _902;
    float _3853 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _910 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _3875 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3886 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _3897 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _928 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _979 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _969);
    float _980 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _969);
    float _981 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _969);
    float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
    float _986 = _979 * _985;
    float _987 = _980 * _985;
    float _988 = _981 * _985;
    float _994 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _995 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1013 = fma(_909, cbSceneParam._m0[5u].z, fma(_908, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _907));
    float _1016 = fma(_909, cbSceneParam._m0[6u].z, fma(_908, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _907));
    float _1019 = fma(_909, cbSceneParam._m0[7u].z, fma(_908, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _907));
    uint _1033 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1039 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_1033].x;
    float _1040 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_1033].y;
    float _1041 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_1033].z;
    float _3908 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _994, cbSceneParam._m0[86u].y * _995));
    float _1057 = ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * TEXCOORD_5.w) * _1053.x;
    float _1058 = dot(vec3(_907, _908, _909), vec3(_986, _987, _988));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _907) - _986;
    float _1066 = (_1061 * _908) - _987;
    float _1067 = (_1061 * _909) - _988;
    float _1071 = abs(dot(vec3(_986, _987, _988), vec3(_907, _908, _909)));
    float _3941 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_910);
    float _1086 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1152 = fma(_1126, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118));
        float _1156 = fma(_1126, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118));
        float _1160 = fma(_1126, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118));
        float _1185 = _1118 + _907;
        float _1186 = _1122 + _908;
        float _1187 = _1126 + _909;
        float _1197 = fma(_1187, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1185)) - _1152;
        float _1198 = fma(_1187, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1185)) - _1156;
        float _1199 = fma(_1187, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1185)) - _1160;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1152 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1156 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[34u].z) + ((((((_1160 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_907, _908, _909), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3989 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_907, _908, _909), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4022 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_907, _908, _909), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4055 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1126, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118));
        float _1470 = fma(_1126, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118));
        float _1474 = fma(_1126, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118));
        float _1497 = _1118 + _907;
        float _1498 = _1122 + _908;
        float _1499 = _1126 + _909;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_907, _908, _909), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4118 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_907, _908, _909), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4151 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_907, _908, _909), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4184 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1428;
        _1736 = _1428;
        _1737 = _1428;
        _1738 = _1428;
        _1739 = _1428;
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = _1428;
        _1745 = _1428;
        _1746 = _1428;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1440)) + _1440;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1441)) + _1441;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1442)) + _1442;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1065 * 0.5;
    float _1804 = _1066 * 0.5;
    float _1805 = _1067 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _910);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1126, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1126, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1126, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1934 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1937 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1965 = frontier_phi_14_12_ladder;
        }
        float _2166;
        if (_1934 > 0.0)
        {
            _2166 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2166 = frontier_phi_23_19_ladder;
        }
        float _2409;
        if (_1937 > 0.0)
        {
            _2409 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2409 = frontier_phi_35_30_ladder;
        }
        float _2411 = isnan(_2166) ? _1965 : (isnan(_1965) ? _2166 : min(_1965, _2166));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1931) + _1920;
        float _2417 = (_2412 * _1934) + _1924;
        float _2418 = (_2412 * _1937) + _1928;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_13_35_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_13_35_ladder_2;
        _1955 = frontier_phi_13_35_ladder_1;
        _1957 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1872);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _910);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1126, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1126, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1126, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2030 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2033 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2171;
        if (_2027 > 0.0)
        {
            _2171 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2171 = frontier_phi_25_21_ladder;
        }
        float _2436;
        if (_2030 > 0.0)
        {
            _2436 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2436 = frontier_phi_37_32_ladder;
        }
        float _2641;
        if (_2033 > 0.0)
        {
            _2641 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2641 = frontier_phi_46_43_ladder;
        }
        float _2643 = isnan(_2436) ? _2171 : (isnan(_2171) ? _2436 : min(_2171, _2436));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _2027) + _2016;
        float _2649 = (_2644 * _2030) + _2020;
        float _2650 = (_2644 * _2033) + _2024;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_22_46_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_22_46_ladder_2;
        _2054 = frontier_phi_22_46_ladder_1;
        _2056 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1962);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2068 = ((((1.0 - _1086) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1086 * _1073)) * _1057;
    float _2069 = _2068 * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2070 = _2068 * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2071 = _2068 * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    uvec4 _2090 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2092 = _2090.x * 14u;
    uint _2093 = _2092 + 13u;
    float _2100 = _1057 + (-1.0);
    float _2105 = (cbLight._m0[_2093].x * _2100) + 1.0;
    float _2106 = (cbLight._m0[_2093].y * _2100) + 1.0;
    float _2107 = (cbLight._m0[_2093].z * _2100) + 1.0;
    float _2108 = (cbLight._m0[_2093].w * _2100) + 1.0;
    uint _2109 = _2092 + 5u;
    float _2115 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2119 = _2092 + 4u;
    float _2125 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2129 = _2092 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_907, _908, _909));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_907, _908, _909));
    float _4320 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4331 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2109].x * _2115) * _2150) + ((cbLight._m0[_2119].x * _2125) * _2148);
    float _2158 = ((_2115 * cbLight._m0[_2109].y) * _2150) + ((_2125 * cbLight._m0[_2119].y) * _2148);
    float _2159 = ((_2115 * cbLight._m0[_2109].z) * _2150) + ((_2125 * cbLight._m0[_2119].z) * _2148);
    uvec4 _2163 = floatBitsToUint(cbLight._m0[_2092 + 12u]);
    bool _2165 = _2163.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2165)
    {
        _2176 = _2157;
        _2178 = _2158;
        _2180 = _2159;
    }
    else
    {
        uint _2184 = _2092 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_2092 + 2u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4342 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2203 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2157;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2158;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2159;
    }
    bool _2183 = _2163.y == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2183)
    {
        _2221 = _2176;
        _2223 = _2178;
        _2225 = _2180;
    }
    else
    {
        uint _2380 = _2092 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_2092 + 3u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4358 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2399 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2221 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2176;
        _2223 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2178;
        _2225 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2180;
    }
    uint _2228 = _2092 + 8u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _910) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2092].x + _986;
    float _2244 = cbLight._m0[_2092].y + _987;
    float _2245 = cbLight._m0[_2092].z + _988;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2092].xyz));
    float _4374 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2257 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2258 = dot(vec3(_907, _908, _909), vec3(_2250, _2251, _2252));
    float _4396 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2250, _2251, _2252));
    float _4407 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2242 * _2242;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2282 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2257 * ((_2256 * _2282) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2282) + _2242) * _2256))) * _2256;
    float _4418 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    uint _2306 = _2092 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _910) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2129].x + _986;
    float _2320 = cbLight._m0[_2129].y + _987;
    float _2321 = cbLight._m0[_2129].z + _988;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2129].xyz));
    float _4429 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2333 = dot(vec3(_907, _908, _909), vec3(_2326, _2327, _2328));
    float _4440 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2326, _2327, _2328));
    float _4451 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2354 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2355 = 1.0 - _2318;
    float _2365 = (0.5 / (((_2257 * ((_2332 * _2355) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2355) + _2318) * _2332))) * _2332;
    float _4462 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2377 = (((_2354 * cbLight._m0[_2306].x) * _2367) * _2115) + (((_2281 * cbLight._m0[_2228].x) * _2295) * _2125);
    float _2378 = (((_2354 * cbLight._m0[_2306].y) * _2367) * _2115) + (((_2281 * cbLight._m0[_2228].y) * _2295) * _2125);
    float _2379 = (((_2354 * cbLight._m0[_2306].z) * _2367) * _2115) + (((_2281 * cbLight._m0[_2228].z) * _2295) * _2125);
    float _2441;
    float _2443;
    float _2445;
    if (_2165)
    {
        _2441 = _2377;
        _2443 = _2378;
        _2445 = _2379;
    }
    else
    {
        uint _2447 = _2092 + 2u;
        uint _2451 = _2092 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _910) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _986;
        float _2468 = cbLight._m0[_2447].y + _987;
        float _2469 = cbLight._m0[_2447].z + _988;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2447].xyz));
        float _4473 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2481 = dot(vec3(_907, _908, _909), vec3(_2474, _2475, _2476));
        float _4484 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2503 = 1.0 - _2466;
        float _2513 = (0.5 / (((_2257 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2503) + _2466) * _2480))) * _2480;
        float _4506 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2441 = (((_2502 * cbLight._m0[_2451].x) * _2515) * _2516) + _2377;
        _2443 = (((_2502 * cbLight._m0[_2451].y) * _2515) * _2516) + _2378;
        _2445 = (((_2502 * cbLight._m0[_2451].z) * _2515) * _2516) + _2379;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2183)
    {
        _2551 = _2441;
        _2553 = _2443;
        _2555 = _2445;
    }
    else
    {
        uint _2562 = _2092 + 3u;
        uint _2566 = _2092 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _910) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _986;
        float _2583 = cbLight._m0[_2562].y + _987;
        float _2584 = cbLight._m0[_2562].z + _988;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2562].xyz));
        float _4522 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2596 = dot(vec3(_907, _908, _909), vec3(_2589, _2590, _2591));
        float _4533 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4544 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2618 = 1.0 - _2581;
        float _2628 = (0.5 / (((_2257 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2618) + _2581) * _2595))) * _2595;
        float _4555 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2551 = (((_2617 * cbLight._m0[_2566].x) * _2630) * _2631) + _2441;
        _2553 = (((_2617 * cbLight._m0[_2566].y) * _2630) * _2631) + _2443;
        _2555 = (((_2617 * cbLight._m0[_2566].z) * _2630) * _2631) + _2445;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2090.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _995) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _994) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3015)
                {
                    frontier_phi_61_pred = _2999;
                    frontier_phi_61_pred_1 = _3004;
                    frontier_phi_61_pred_2 = _3003;
                    frontier_phi_61_pred_3 = _3002;
                    frontier_phi_61_pred_4 = _3001;
                    frontier_phi_61_pred_5 = _3000;
                }
                else
                {
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    uint _3129;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3014;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3133 = uint(findLSB(_3129)) + (_3005 << 5u);
                        uint _3130 = (_3129 + 4294967295u) & _3129;
                        uint _3135 = _3133 * 48u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3155 = (_3133 * 48u) + 4u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3174 = (_3133 * 48u) + 8u;
                        vec3 _3185 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x));
                        float _3189 = _3149.x - _2707;
                        float _3190 = _3149.y - _2708;
                        float _3191 = _3149.z - _2709;
                        float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                        float _3195 = inversesqrt(_3192);
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3199 = dot(vec3(_1013, _1016, _1019), vec3(_3196, _3197, _3198));
                        float _3204 = 1.0 - (_3192 * _3149.w);
                        float _4581 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3206 = sqrt(_3192) * _3168.w;
                        float _3209 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3199) + _3210;
                        float _3216 = _3206 * _3206;
                        float _3220 = ((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3205) / ((_3216 * 0.699999988079071044921875) + 1.0);
                        float _3224 = (-0.0) - _2707;
                        float _3225 = (-0.0) - _2708;
                        float _3226 = (-0.0) - _2709;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3241 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                        float _3242 = 1.0 - _1073;
                        float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                        float _3250 = _3249 * _3249;
                        float _3251 = _3250 * _3250;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3262 = dot(vec3(_1013, _1016, _1019), vec3(_3231, _3232, _3233));
                        float _4597 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3266 = dot(vec3(_1013, _1016, _1019), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                        float _4608 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                        float _3274 = _3209 * _3250;
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3199) + _3275;
                        float _4619 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3280 = 1.0 - _3250;
                        float _3290 = (0.5 / (((_3279 * ((_3265 * _3280) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3250) * _3265))) * _3279;
                        float _4630 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3301 = (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3273 * _3273) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125))) * _3205;
                        _3058 = (_3220 * _3168.x) + _3126;
                        _3059 = (_3220 * _3168.y) + _3127;
                        _3060 = (_3220 * _3168.z) + _3128;
                        _3055 = (_3301 * _3185.x) + _3123;
                        _3056 = (_3301 * _3185.y) + _3124;
                        _3057 = (_3301 * _3185.z) + _3125;
                        if (_3130 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3130;
                        }
                    }
                    frontier_phi_61_pred = _3055;
                    frontier_phi_61_pred_1 = _3060;
                    frontier_phi_61_pred_2 = _3059;
                    frontier_phi_61_pred_3 = _3058;
                    frontier_phi_61_pred_4 = _3057;
                    frontier_phi_61_pred_5 = _3056;
                }
                _2855 = frontier_phi_61_pred;
                _2865 = frontier_phi_61_pred_1;
                _2863 = frontier_phi_61_pred_2;
                _2861 = frontier_phi_61_pred_3;
                _2859 = frontier_phi_61_pred_4;
                _2857 = frontier_phi_61_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2855;
                    _3000 = _2857;
                    _3001 = _2859;
                    _3002 = _2861;
                    _3003 = _2863;
                    _3004 = _2865;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2871) & _2753) == 0u)
        {
            _2967 = _2854;
            _2969 = _2856;
            _2971 = _2858;
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _2993 = _2992 * _2707;
            float _2994 = _2992 * _2708;
            float _2995 = _2992 * _2709;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3106 = _2854;
                float _3107 = _2856;
                float _3108 = _2858;
                float _3109 = _2860;
                float _3110 = _2862;
                float _3111 = _2864;
                uint _3112 = _2871;
                uint _3121;
                bool _3122;
                for (;;)
                {
                    _3121 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                    _3122 = _3121 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3122)
                    {
                        frontier_phi_67_pred = _3109;
                        frontier_phi_67_pred_1 = _3110;
                        frontier_phi_67_pred_2 = _3111;
                        frontier_phi_67_pred_3 = _3108;
                        frontier_phi_67_pred_4 = _3107;
                        frontier_phi_67_pred_5 = _3106;
                    }
                    else
                    {
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        uint _3325 = _3121;
                        uint _3326;
                        vec4 _3351;
                        float _3352;
                        vec4 _3367;
                        vec3 _3379;
                        vec4 _3394;
                        vec4 _3409;
                        float _3455;
                        bool _3456;
                        for (;;)
                        {
                            uint _3336 = ((_3112 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3325));
                            _3326 = (_3325 + 4294967295u) & _3325;
                            uint _3338 = _3336 * 40u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3352 = _3351.w;
                            uint _3354 = (_3336 * 40u) + 4u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3336 * 40u) + 8u;
                            _3379 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x));
                            uint _3381 = (_3336 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3336 * 40u) + 20u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3336 * 40u) + 24u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3430 = (_3336 * 40u) + 28u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3455 = fma(_2709, _3443.z, fma(_2708, _3443.y, _3443.x * _2707)) + _3443.w;
                            _3456 = !((fma(_2709, _3424.z, fma(_2708, _3424.y, _3424.x * _2707)) + _3424.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3456)
                            {
                                float _3483 = _3351.x - _2707;
                                float _3484 = _3351.y - _2708;
                                float _3485 = _3351.z - _2709;
                                float _3486 = dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485));
                                float _3489 = inversesqrt(_3486);
                                float _3490 = _3489 * _3483;
                                float _3491 = _3489 * _3484;
                                float _3492 = _3489 * _3485;
                                float _3496 = 1.0 - (_3486 / (_3352 * _3352));
                                float _4641 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3501 = sqrt(_3486) * _3367.w;
                                float _3503 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                                float _3504 = _3503 * _3503;
                                float _3507 = ((1.0 - _3504) * dot(vec3(_3490, _3491, _3492), vec3(_1013, _1016, _1019))) + _3504;
                                float _3510 = _3501 * _3501;
                                float _3514 = (fma(_2709, _3394.z, fma(_2708, _3394.y, _3394.x * _2707)) + _3394.w) / _3455;
                                float _3515 = (fma(_2709, _3409.z, fma(_2708, _3409.y, _3409.x * _2707)) + _3409.w) / _3455;
                                float _3519 = 1.0 - dot(vec2(_3514, _3515), vec2(_3514, _3515));
                                float _4657 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3521 = _3520 * (((isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0))) * _3497) / ((_3510 * 0.699999988079071044921875) + 1.0));
                                float _3533 = exp2(log2(1.0 / ((_3510 * 3.5) + 5.0)) * 0.25);
                                float _3534 = 1.0 - _1073;
                                float _3541 = sqrt(1.0 - ((1.0 - (_3534 * _3534)) * (1.0 - (_3533 * _3533))));
                                float _3542 = _3541 * _3541;
                                float _3543 = _3542 * _3542;
                                float _3544 = _3490 - _2993;
                                float _3545 = _3491 - _2994;
                                float _3546 = _3492 - _2995;
                                float _3550 = inversesqrt(dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546)));
                                float _3554 = dot(vec3(_1013, _1016, _1019), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4668 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3558 = dot(vec3(_1013, _1016, _1019), vec3(_3550 * _3544, _3550 * _3545, _3550 * _3546));
                                float _4679 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3565 = ((_3561 * _3561) * (_3543 + (-1.0))) + 1.0;
                                float _3566 = _3503 * _3542;
                                float _3567 = _3566 * _3566;
                                float _3573 = ((1.0 - _3567) * dot(vec3(_1013, _1016, _1019), vec3(_3490, _3491, _3492))) + _3567;
                                float _4690 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3575 = 1.0 - _3542;
                                float _3585 = (0.5 / (((_3574 * ((_3557 * _3575) + _3542)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3542) * _3557))) * _3574;
                                float _4701 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3595 = (_3520 * _3497) * (((_3543 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3565 * _3565) * ((_3510 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3595 * _3379.x;
                                frontier_phi_73_pred_1 = _3595 * _3379.y;
                                frontier_phi_73_pred_2 = _3521 * _3367.z;
                                frontier_phi_73_pred_3 = _3521 * _3367.y;
                                frontier_phi_73_pred_4 = _3521 * _3367.x;
                                frontier_phi_73_pred_5 = _3595 * _3379.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3599 = frontier_phi_73_pred;
                            _3600 = frontier_phi_73_pred_1;
                            _3604 = frontier_phi_73_pred_2;
                            _3603 = frontier_phi_73_pred_3;
                            _3602 = frontier_phi_73_pred_4;
                            _3601 = frontier_phi_73_pred_5;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            if (_3326 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3326;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3309;
                        frontier_phi_67_pred_1 = _3310;
                        frontier_phi_67_pred_2 = _3311;
                        frontier_phi_67_pred_3 = _3308;
                        frontier_phi_67_pred_4 = _3307;
                        frontier_phi_67_pred_5 = _3306;
                    }
                    _2974 = frontier_phi_67_pred;
                    _2976 = frontier_phi_67_pred_1;
                    _2978 = frontier_phi_67_pred_2;
                    _2972 = frontier_phi_67_pred_3;
                    _2970 = frontier_phi_67_pred_4;
                    _2968 = frontier_phi_67_pred_5;
                    uint _3113 = _3112 + 1u;
                    if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3106 = _2968;
                        _3107 = _2970;
                        _3108 = _2972;
                        _3109 = _2974;
                        _3110 = _2976;
                        _3111 = _2978;
                        _3112 = _3113;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2976;
                frontier_phi_55_56_ladder_1 = _2978;
                frontier_phi_55_56_ladder_2 = _2974;
                frontier_phi_55_56_ladder_3 = _2972;
                frontier_phi_55_56_ladder_4 = _2970;
                frontier_phi_55_56_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_55_56_ladder = _2862;
                frontier_phi_55_56_ladder_1 = _2864;
                frontier_phi_55_56_ladder_2 = _2860;
                frontier_phi_55_56_ladder_3 = _2858;
                frontier_phi_55_56_ladder_4 = _2856;
                frontier_phi_55_56_ladder_5 = _2854;
            }
            _2967 = frontier_phi_55_56_ladder_5;
            _2969 = frontier_phi_55_56_ladder_4;
            _2971 = frontier_phi_55_56_ladder_3;
            _2973 = frontier_phi_55_56_ladder_2;
            _2975 = frontier_phi_55_56_ladder;
            _2977 = frontier_phi_55_56_ladder_1;
        }
        float _2982 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _2766 = (_2982 * _2973) + _2221;
        _2768 = (_2982 * _2975) + _2223;
        _2770 = (_2982 * _2977) + _2225;
        _2772 = ((_2967 * 0.039999999105930328369140625) * _2982) + _2551;
        _2774 = ((_2969 * 0.039999999105930328369140625) * _2982) + _2553;
        _2776 = ((_2971 * 0.039999999105930328369140625) * _2982) + _2555;
    }
    else
    {
        _2766 = _2221;
        _2768 = _2223;
        _2770 = _2225;
        _2772 = _2551;
        _2774 = _2553;
        _2776 = _2555;
    }
    float _4717 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _4728 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _4739 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    uint _2796 = _281 + 6u;
    float _2804 = _994 / cbSceneParam._m0[86u].x;
    float _2805 = _995 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _928 : (isnan(_928) ? cbSceneParam._m0[77u].w : min(_928, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_928 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_928) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _928 : min(cbSceneParam._m0[80u].w, _928));
        float _2880 = _2879 / _928;
        float _2891 = _2880 * _979;
        float _2892 = _980 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2895 = _2880 * _981;
        float _2897 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2892;
        float _2905 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2893 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3030 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3068 = ((abs(_2905 / _2893) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2915 * _3039) - exp2(_2915 * _3040)) * _3028))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2824);
        _2917 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2919 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2921 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2923 = _3079 * _2824;
    }
    else
    {
        _2917 = _2821;
        _2919 = _2822;
        _2921 = _2823;
        _2923 = _2824;
    }
    float _2935 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2936 = _2935 == 3.0;
    float _2937 = log2(_2923);
    float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2766 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1057))) + ((_2772 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2768 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1057))) + ((_2774 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2770 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1057))) + ((_2776 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2955 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2955 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.y = _2955 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.z = _2955 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.w = cbInstanceData._m0[_2796].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2796].w;
}


