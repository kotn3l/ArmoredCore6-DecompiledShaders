#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _969;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _253 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3284 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _254 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    vec4 _266 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _268 = _266.x;
    float _269 = _266.y;
    float _270 = _266.z;
    vec4 _282 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _293 = ((_282.x - _268) * _254) + _268;
    float _294 = ((_282.y - _269) * _254) + _269;
    float _295 = ((_282.z - _270) * _254) + _270;
    vec4 _308 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _310 = _308.x;
    float _311 = _308.y;
    float _312 = _308.z;
    float _320 = exp2(log2(_310) * 0.453999996185302734375);
    float _321 = exp2(log2(_311) * 0.453999996185302734375);
    float _322 = exp2(log2(_312) * 0.453999996185302734375);
    float _337 = (((_320 + (-0.5)) * (_310 - _293)) * cbMtdParam._m0[9u].z) + _293;
    float _338 = (((_321 + (-0.5)) * (_311 - _294)) * cbMtdParam._m0[9u].z) + _294;
    float _339 = (((_322 + (-0.5)) * (_312 - _295)) * cbMtdParam._m0[9u].z) + _295;
    float _353 = ((cbMtdParam._m0[9u].z * (0.5 - _320)) * (_310 - _337)) + _337;
    float _354 = ((cbMtdParam._m0[9u].z * (0.5 - _321)) * (_311 - _338)) + _338;
    float _355 = ((cbMtdParam._m0[9u].z * (0.5 - _322)) * (_312 - _339)) + _339;
    vec4 _367 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _369 = _367.x;
    float _370 = _367.y;
    float _371 = _367.z;
    vec4 _383 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _396 = ((_383.z - _371) * _254) + _371;
    float _399 = ((((_383.x - _369) * _254) + _369) * 2.0) + (-1.0);
    float _400 = ((((_383.y - _370) * _254) + _370) * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3295 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))));
    vec4 _420 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _430 = (((_420.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _399;
    float _431 = (((_420.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _400;
    float _434 = fma(_406, _218, fma(_431, _210 * TANGENT.x, (_196 * _188) * _430));
    float _437 = fma(_406, _219, fma(_431, _210 * TANGENT.y, (_196 * _189) * _430));
    float _440 = fma(_406, _220, fma(_431, _210 * TANGENT.z, (_196 * _190) * _430));
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    float _445 = _444 * _434;
    float _446 = _444 * _437;
    float _447 = _444 * _440;
    float _3306 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _448 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3328 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3339 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _467 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _554 = fma(_447, cbSceneParam._m0[5u].z, fma(_446, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _445));
    float _557 = fma(_447, cbSceneParam._m0[6u].z, fma(_446, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _445));
    float _560 = fma(_447, cbSceneParam._m0[7u].z, fma(_446, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _445));
    uint _573 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = (_573 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_576].z;
    float _3350 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _599 = _596.x * TEXCOORD_3.w;
    float _600 = dot(vec3(_445, _446, _447), vec3(_526, _527, _528));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _445) - _526;
    float _608 = (_603 * _446) - _527;
    float _609 = (_603 * _447) - _528;
    float _613 = abs(dot(vec3(_526, _527, _528), vec3(_445, _446, _447)));
    float _3383 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _615 = sqrt(_448);
    float _628 = exp2((_615 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_615 * 3.0));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _695 = fma(_668, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660));
        float _699 = fma(_668, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660));
        float _703 = fma(_668, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660));
        float _726 = _660 + _445;
        float _727 = _664 + _446;
        float _728 = _668 + _447;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _695;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _699;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _703;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_695 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_699 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_703 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_445, _446, _447), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3431 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_445, _446, _447), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3464 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_445, _446, _447), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3497 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1009 = fma(_668, cbModelParam._m0[30u].z, fma(_664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _660));
        float _1013 = fma(_668, cbModelParam._m0[31u].z, fma(_664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _660));
        float _1017 = fma(_668, cbModelParam._m0[32u].z, fma(_664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _660));
        float _1040 = _660 + _445;
        float _1041 = _664 + _446;
        float _1042 = _668 + _447;
        float _1052 = fma(_1042, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1009 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1013 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[35u].z) + ((((((_1017 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_445, _446, _447), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3560 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_445, _446, _447), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3593 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_445, _446, _447), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3626 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _969;
        _1279 = _969;
        _1280 = _969;
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _981)) + _981;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _607 * 0.5;
    float _1347 = _608 * 0.5;
    float _1348 = _609 * 0.5;
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_968, _972, _975, _978));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_970, _973, _976, _979));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_971, _974, _977, _980));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1414 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1414 : min(cbModelParam._m0[25u].z, _1414));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1464 = fma(_668, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660)) + cbModelParam._m0[13u].w;
        float _1468 = fma(_668, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660)) + cbModelParam._m0[14u].w;
        float _1472 = fma(_668, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660)) + cbModelParam._m0[15u].w;
        float _1475 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1478 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1481 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1509;
        if (_1475 > 0.0)
        {
            _1509 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1509 = frontier_phi_16_14_ladder;
        }
        float _1714;
        if (_1478 > 0.0)
        {
            _1714 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1714 = frontier_phi_25_21_ladder;
        }
        float _1957;
        if (_1481 > 0.0)
        {
            _1957 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1957 = frontier_phi_37_32_ladder;
        }
        float _1959 = isnan(_1714) ? _1509 : (isnan(_1509) ? _1714 : min(_1509, _1714));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1475) + _1464;
        float _1965 = (_1960 * _1478) + _1468;
        float _1966 = (_1960 * _1481) + _1472;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1415);
            frontier_phi_15_37_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1497 = frontier_phi_15_37_ladder_2;
        _1499 = frontier_phi_15_37_ladder_1;
        _1501 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1415);
        _1497 = _1485.x * cbModelParam._m0[1u].y;
        _1499 = _1485.y * cbModelParam._m0[1u].y;
        _1501 = _1485.z * cbModelParam._m0[1u].y;
    }
    float _1505 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1505 : min(cbModelParam._m0[25u].w, _1505));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_668, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_668, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_668, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1577 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1580 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1719;
        if (_1574 > 0.0)
        {
            _1719 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1719 = frontier_phi_27_23_ladder;
        }
        float _1984;
        if (_1577 > 0.0)
        {
            _1984 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1984 = frontier_phi_39_34_ladder;
        }
        float _2189;
        if (_1580 > 0.0)
        {
            _2189 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2189 = frontier_phi_48_45_ladder;
        }
        float _2191 = isnan(_1984) ? _1719 : (isnan(_1719) ? _1984 : min(_1719, _1984));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1574) + _1563;
        float _2197 = (_2192 * _1577) + _1567;
        float _2198 = (_2192 * _1580) + _1571;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2199;
        float _2202 = _2199 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2198 > _2202) || ((_2198 < _2200) || ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 < _2200) || (_2196 > _2202))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2198, cbModelParam._m0[17u].z, fma(_2197, cbModelParam._m0[17u].y, _2196 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2198, cbModelParam._m0[18u].z, fma(_2197, cbModelParam._m0[18u].y, _2196 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2198, cbModelParam._m0[19u].z, fma(_2197, cbModelParam._m0[19u].y, _2196 * cbModelParam._m0[19u].x))), _1506);
            frontier_phi_24_48_ladder = _2396.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2396.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2396.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_24_48_ladder_2;
        _1601 = frontier_phi_24_48_ladder_1;
        _1603 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1506);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1615 = ((((1.0 - _628) * ((_615 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_628 * _615)) * _599;
    float _1616 = _1615 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = _1615 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1618 = _1615 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    uvec4 _1637 = floatBitsToUint(cbInstanceData._m0[_573 + 5u]);
    uint _1639 = _1637.x * 14u;
    uint _1640 = _1639 + 13u;
    float _1647 = _599 + (-1.0);
    float _1652 = (cbLight._m0[_1640].x * _1647) + 1.0;
    float _1653 = (cbLight._m0[_1640].y * _1647) + 1.0;
    float _1654 = (cbLight._m0[_1640].z * _1647) + 1.0;
    float _1655 = (cbLight._m0[_1640].w * _1647) + 1.0;
    uint _1656 = _1639 + 5u;
    float _1662 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1666 = _1639 + 4u;
    float _1672 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1676 = _1639 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_445, _446, _447));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_445, _446, _447));
    float _3762 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3773 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1656].x * _1662) * _1697) + ((cbLight._m0[_1666].x * _1672) * _1695);
    float _1705 = ((_1662 * cbLight._m0[_1656].y) * _1697) + ((_1672 * cbLight._m0[_1666].y) * _1695);
    float _1706 = ((_1662 * cbLight._m0[_1656].z) * _1697) + ((_1672 * cbLight._m0[_1666].z) * _1695);
    uvec4 _1711 = floatBitsToUint(cbLight._m0[_1639 + 12u]);
    bool _1713 = _1711.x == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1713)
    {
        _1724 = _1704;
        _1726 = _1705;
        _1728 = _1706;
    }
    else
    {
        uint _1732 = _1639 + 6u;
        float _1748 = (dot(vec3(cbLight._m0[_1639 + 2u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1749 = _1748 * _1748;
        float _3784 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1751 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1724 = (((cbLight._m0[_1732].x * 0.3183098733425140380859375) * _1750) * _1751) + _1704;
        _1726 = (((cbLight._m0[_1732].y * 0.3183098733425140380859375) * _1750) * _1751) + _1705;
        _1728 = (((cbLight._m0[_1732].z * 0.3183098733425140380859375) * _1750) * _1751) + _1706;
    }
    bool _1731 = _1711.y == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1731)
    {
        _1769 = _1724;
        _1771 = _1726;
        _1773 = _1728;
    }
    else
    {
        uint _1928 = _1639 + 7u;
        float _1944 = (dot(vec3(cbLight._m0[_1639 + 3u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _3800 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1947 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1769 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1724;
        _1771 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1726;
        _1773 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1728;
    }
    uint _1776 = _1639 + 8u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _448) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1639].x + _526;
    float _1792 = cbLight._m0[_1639].y + _527;
    float _1793 = cbLight._m0[_1639].z + _528;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1639].xyz));
    float _3816 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1805 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1806 = dot(vec3(_445, _446, _447), vec3(_1798, _1799, _1800));
    float _3838 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1798, _1799, _1800));
    float _3849 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1790 * _1790;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1829 = (exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1830 = 1.0 - _1790;
    float _1841 = (0.5 / (((_1805 * ((_1804 * _1830) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1830) + _1790) * _1804))) * _1804;
    float _3860 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1843 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    uint _1854 = _1639 + 9u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _448) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1676].x + _526;
    float _1868 = cbLight._m0[_1676].y + _527;
    float _1869 = cbLight._m0[_1676].z + _528;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1676].xyz));
    float _3871 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1881 = dot(vec3(_445, _446, _447), vec3(_1874, _1875, _1876));
    float _3882 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1874, _1875, _1876));
    float _3893 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1866 * _1866;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1902 = (exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1903 = 1.0 - _1866;
    float _1913 = (0.5 / (((_1805 * ((_1880 * _1903) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1903) + _1866) * _1880))) * _1880;
    float _3904 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    float _1925 = (((_1902 * cbLight._m0[_1854].x) * _1915) * _1662) + (((_1829 * cbLight._m0[_1776].x) * _1843) * _1672);
    float _1926 = (((_1902 * cbLight._m0[_1854].y) * _1915) * _1662) + (((_1829 * cbLight._m0[_1776].y) * _1843) * _1672);
    float _1927 = (((_1902 * cbLight._m0[_1854].z) * _1915) * _1662) + (((_1829 * cbLight._m0[_1776].z) * _1843) * _1672);
    float _1989;
    float _1991;
    float _1993;
    if (_1713)
    {
        _1989 = _1925;
        _1991 = _1926;
        _1993 = _1927;
    }
    else
    {
        uint _1995 = _1639 + 2u;
        uint _1999 = _1639 + 10u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _448) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _526;
        float _2016 = cbLight._m0[_1995].y + _527;
        float _2017 = cbLight._m0[_1995].z + _528;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1995].xyz));
        float _3915 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2029 = dot(vec3(_445, _446, _447), vec3(_2022, _2023, _2024));
        float _3926 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _3937 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2051 = 1.0 - _2014;
        float _2061 = (0.5 / (((_1805 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2051) + _2014) * _2028))) * _2028;
        float _3948 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1989 = (((_2050 * cbLight._m0[_1999].x) * _2063) * _2064) + _1925;
        _1991 = (((_2050 * cbLight._m0[_1999].y) * _2063) * _2064) + _1926;
        _1993 = (((_2050 * cbLight._m0[_1999].z) * _2063) * _2064) + _1927;
    }
    float _2099;
    float _2101;
    float _2103;
    if (_1731)
    {
        _2099 = _1989;
        _2101 = _1991;
        _2103 = _1993;
    }
    else
    {
        uint _2110 = _1639 + 3u;
        uint _2114 = _1639 + 11u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _448) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _526;
        float _2131 = cbLight._m0[_2110].y + _527;
        float _2132 = cbLight._m0[_2110].z + _528;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2110].xyz));
        float _3964 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2144 = dot(vec3(_445, _446, _447), vec3(_2137, _2138, _2139));
        float _3975 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _3986 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2166 = 1.0 - _2129;
        float _2176 = (0.5 / (((_1805 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2166) + _2129) * _2143))) * _2143;
        float _3997 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2178 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2179 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _2099 = (((_2165 * cbLight._m0[_2114].x) * _2178) * _2179) + _1989;
        _2101 = (((_2165 * cbLight._m0[_2114].y) * _2178) * _2179) + _1991;
        _2103 = (((_2165 * cbLight._m0[_2114].z) * _2178) * _2179) + _1993;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1637.y == 0u)
    {
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2254;
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2254;
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2254;
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2270)));
        float _2291 = (log2(_2257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            uint _2551 = 0u;
            uint _2560;
            bool _2561;
            for (;;)
            {
                _2560 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                _2561 = _2560 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2561)
                {
                    frontier_phi_63_pred = _2550;
                    frontier_phi_63_pred_1 = _2549;
                    frontier_phi_63_pred_2 = _2548;
                    frontier_phi_63_pred_3 = _2547;
                    frontier_phi_63_pred_4 = _2546;
                    frontier_phi_63_pred_5 = _2545;
                }
                else
                {
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    uint _2675;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2560;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2679 = uint(findLSB(_2675)) + (_2551 << 5u);
                        uint _2676 = (_2675 + 4294967295u) & _2675;
                        uint _2681 = _2679 * 48u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2701 = (_2679 * 48u) + 4u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2720 = (_2679 * 48u) + 8u;
                        vec3 _2731 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x));
                        float _2735 = _2695.x - _2255;
                        float _2736 = _2695.y - _2256;
                        float _2737 = _2695.z - _2257;
                        float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                        float _2741 = inversesqrt(_2738);
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2745 = dot(vec3(_554, _557, _560), vec3(_2742, _2743, _2744));
                        float _2750 = 1.0 - (_2738 * _2695.w);
                        float _4023 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2752 = sqrt(_2738) * _2714.w;
                        float _2755 = 1.39999997615814208984375 / (_2752 + 1.39999997615814208984375);
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2745) + _2756;
                        float _2762 = _2752 * _2752;
                        float _2766 = ((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2751) / ((_2762 * 0.699999988079071044921875) + 1.0);
                        float _2770 = (-0.0) - _2255;
                        float _2771 = (-0.0) - _2256;
                        float _2772 = (-0.0) - _2257;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2787 = exp2(log2(1.0 / ((_2762 * 3.5) + 5.0)) * 0.25);
                        float _2788 = 1.0 - _615;
                        float _2795 = sqrt(1.0 - ((1.0 - (_2788 * _2788)) * (1.0 - (_2787 * _2787))));
                        float _2796 = _2795 * _2795;
                        float _2797 = _2796 * _2796;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2808 = dot(vec3(_554, _557, _560), vec3(_2777, _2778, _2779));
                        float _4039 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2812 = dot(vec3(_554, _557, _560), vec3(_2804 * _2798, _2804 * _2799, _2804 * _2800));
                        float _4050 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2819 = ((_2815 * _2815) * (_2797 + (-1.0))) + 1.0;
                        float _2820 = _2755 * _2796;
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2745) + _2821;
                        float _4061 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2825 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2826 = 1.0 - _2796;
                        float _2836 = (0.5 / (((_2825 * ((_2811 * _2826) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2826) + _2796) * _2811))) * _2825;
                        float _4072 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2847 = (((_2797 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_2819 * _2819) * ((_2762 * 2.1991131305694580078125) + 3.141590118408203125))) * _2751;
                        _2604 = (_2766 * _2714.x) + _2672;
                        _2605 = (_2766 * _2714.y) + _2673;
                        _2606 = (_2766 * _2714.z) + _2674;
                        _2601 = (_2847 * _2731.x) + _2669;
                        _2602 = (_2847 * _2731.y) + _2670;
                        _2603 = (_2847 * _2731.z) + _2671;
                        if (_2676 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2676;
                        }
                    }
                    frontier_phi_63_pred = _2606;
                    frontier_phi_63_pred_1 = _2605;
                    frontier_phi_63_pred_2 = _2604;
                    frontier_phi_63_pred_3 = _2603;
                    frontier_phi_63_pred_4 = _2602;
                    frontier_phi_63_pred_5 = _2601;
                }
                _2412 = frontier_phi_63_pred;
                _2410 = frontier_phi_63_pred_1;
                _2408 = frontier_phi_63_pred_2;
                _2406 = frontier_phi_63_pred_3;
                _2404 = frontier_phi_63_pred_4;
                _2402 = frontier_phi_63_pred_5;
                uint _2552 = _2551 + 1u;
                if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2545 = _2402;
                    _2546 = _2404;
                    _2547 = _2406;
                    _2548 = _2408;
                    _2549 = _2410;
                    _2550 = _2412;
                    _2551 = _2552;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((4294967295u << _2418) & _2301) == 0u)
        {
            _2513 = _2401;
            _2515 = _2403;
            _2517 = _2405;
            _2519 = _2407;
            _2521 = _2409;
            _2523 = _2411;
        }
        else
        {
            float _2538 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
            float _2539 = _2538 * _2255;
            float _2540 = _2538 * _2256;
            float _2541 = _2538 * _2257;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2652 = _2401;
                float _2653 = _2403;
                float _2654 = _2405;
                float _2655 = _2407;
                float _2656 = _2409;
                float _2657 = _2411;
                uint _2658 = _2418;
                uint _2667;
                bool _2668;
                for (;;)
                {
                    _2667 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                    _2668 = _2667 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2668)
                    {
                        frontier_phi_69_pred = _2657;
                        frontier_phi_69_pred_1 = _2656;
                        frontier_phi_69_pred_2 = _2655;
                        frontier_phi_69_pred_3 = _2654;
                        frontier_phi_69_pred_4 = _2653;
                        frontier_phi_69_pred_5 = _2652;
                    }
                    else
                    {
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        uint _2871 = _2667;
                        uint _2872;
                        vec4 _2897;
                        float _2898;
                        vec4 _2913;
                        vec3 _2925;
                        vec4 _2941;
                        vec4 _2957;
                        float _3004;
                        bool _3005;
                        for (;;)
                        {
                            uint _2882 = ((_2658 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2871));
                            _2872 = (_2871 + 4294967295u) & _2871;
                            uint _2884 = _2882 * 40u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2898 = _2897.w;
                            uint _2900 = (_2882 * 40u) + 4u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2915 = (_2882 * 40u) + 8u;
                            _2925 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x));
                            uint _2928 = (_2882 * 40u) + 16u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2882 * 40u) + 20u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2960 = (_2882 * 40u) + 24u;
                            vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2979 = (_2882 * 40u) + 28u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            _3004 = fma(_2257, _2992.z, fma(_2256, _2992.y, _2992.x * _2255)) + _2992.w;
                            _3005 = !((fma(_2257, _2973.z, fma(_2256, _2973.y, _2973.x * _2255)) + _2973.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3005)
                            {
                                float _3032 = _2897.x - _2255;
                                float _3033 = _2897.y - _2256;
                                float _3034 = _2897.z - _2257;
                                float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                                float _3038 = inversesqrt(_3035);
                                float _3039 = _3038 * _3032;
                                float _3040 = _3038 * _3033;
                                float _3041 = _3038 * _3034;
                                float _3045 = 1.0 - (_3035 / (_2898 * _2898));
                                float _4083 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3050 = sqrt(_3035) * _2913.w;
                                float _3052 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                                float _3053 = _3052 * _3052;
                                float _3056 = ((1.0 - _3053) * dot(vec3(_3039, _3040, _3041), vec3(_554, _557, _560))) + _3053;
                                float _3059 = _3050 * _3050;
                                float _3063 = (fma(_2257, _2941.z, fma(_2256, _2941.y, _2941.x * _2255)) + _2941.w) / _3004;
                                float _3064 = (fma(_2257, _2957.z, fma(_2256, _2957.y, _2957.x * _2255)) + _2957.w) / _3004;
                                float _3068 = 1.0 - dot(vec2(_3063, _3064), vec2(_3063, _3064));
                                float _4099 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3070 = _3069 * (((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3046) / ((_3059 * 0.699999988079071044921875) + 1.0));
                                float _3082 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                                float _3083 = 1.0 - _615;
                                float _3090 = sqrt(1.0 - ((1.0 - (_3083 * _3083)) * (1.0 - (_3082 * _3082))));
                                float _3091 = _3090 * _3090;
                                float _3092 = _3091 * _3091;
                                float _3093 = _3039 - _2539;
                                float _3094 = _3040 - _2540;
                                float _3095 = _3041 - _2541;
                                float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                                float _3103 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2539, (-0.0) - _2540, (-0.0) - _2541));
                                float _4110 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3107 = dot(vec3(_554, _557, _560), vec3(_3099 * _3093, _3099 * _3094, _3099 * _3095));
                                float _4121 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3114 = ((_3110 * _3110) * (_3092 + (-1.0))) + 1.0;
                                float _3115 = _3052 * _3091;
                                float _3116 = _3115 * _3115;
                                float _3122 = ((1.0 - _3116) * dot(vec3(_554, _557, _560), vec3(_3039, _3040, _3041))) + _3116;
                                float _4132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3124 = 1.0 - _3091;
                                float _3134 = (0.5 / (((_3123 * ((_3106 * _3124) + _3091)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3091) * _3106))) * _3123;
                                float _4143 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3144 = (_3069 * _3046) * (((_3092 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3114 * _3114) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3070 * _2913.z;
                                frontier_phi_75_pred_1 = _3070 * _2913.y;
                                frontier_phi_75_pred_2 = _3070 * _2913.x;
                                frontier_phi_75_pred_3 = _3144 * _2925.z;
                                frontier_phi_75_pred_4 = _3144 * _2925.y;
                                frontier_phi_75_pred_5 = _3144 * _2925.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_75_pred;
                            _3152 = frontier_phi_75_pred_1;
                            _3151 = frontier_phi_75_pred_2;
                            _3150 = frontier_phi_75_pred_3;
                            _3149 = frontier_phi_75_pred_4;
                            _3148 = frontier_phi_75_pred_5;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            if (_2872 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2872;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2857;
                        frontier_phi_69_pred_1 = _2856;
                        frontier_phi_69_pred_2 = _2855;
                        frontier_phi_69_pred_3 = _2854;
                        frontier_phi_69_pred_4 = _2853;
                        frontier_phi_69_pred_5 = _2852;
                    }
                    _2524 = frontier_phi_69_pred;
                    _2522 = frontier_phi_69_pred_1;
                    _2520 = frontier_phi_69_pred_2;
                    _2518 = frontier_phi_69_pred_3;
                    _2516 = frontier_phi_69_pred_4;
                    _2514 = frontier_phi_69_pred_5;
                    uint _2659 = _2658 + 1u;
                    if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2652 = _2514;
                        _2653 = _2516;
                        _2654 = _2518;
                        _2655 = _2520;
                        _2656 = _2522;
                        _2657 = _2524;
                        _2658 = _2659;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2524;
                frontier_phi_57_58_ladder_1 = _2522;
                frontier_phi_57_58_ladder_2 = _2520;
                frontier_phi_57_58_ladder_3 = _2518;
                frontier_phi_57_58_ladder_4 = _2516;
                frontier_phi_57_58_ladder_5 = _2514;
            }
            else
            {
                frontier_phi_57_58_ladder = _2411;
                frontier_phi_57_58_ladder_1 = _2409;
                frontier_phi_57_58_ladder_2 = _2407;
                frontier_phi_57_58_ladder_3 = _2405;
                frontier_phi_57_58_ladder_4 = _2403;
                frontier_phi_57_58_ladder_5 = _2401;
            }
            _2513 = frontier_phi_57_58_ladder_5;
            _2515 = frontier_phi_57_58_ladder_4;
            _2517 = frontier_phi_57_58_ladder_3;
            _2519 = frontier_phi_57_58_ladder_2;
            _2521 = frontier_phi_57_58_ladder_1;
            _2523 = frontier_phi_57_58_ladder;
        }
        float _2528 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2313 = (_2528 * _2519) + _1769;
        _2315 = (_2528 * _2521) + _1771;
        _2317 = (_2528 * _2523) + _1773;
        _2319 = ((_2513 * 0.039999999105930328369140625) * _2528) + _2099;
        _2321 = ((_2515 * 0.039999999105930328369140625) * _2528) + _2101;
        _2323 = ((_2517 * 0.039999999105930328369140625) * _2528) + _2103;
    }
    else
    {
        _2313 = _1769;
        _2315 = _1771;
        _2317 = _1773;
        _2319 = _2099;
        _2321 = _2101;
        _2323 = _2103;
    }
    float _4159 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4170 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4181 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    uint _2343 = _573 + 6u;
    float _2351 = _534 / cbSceneParam._m0[86u].x;
    float _2352 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _467 : (isnan(_467) ? cbSceneParam._m0[77u].w : min(_467, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_467 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_467) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _467 : min(cbSceneParam._m0[80u].w, _467));
        float _2427 = _2426 / _467;
        float _2438 = _2427 * _519;
        float _2439 = _520 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2441 = _2427 * _521;
        float _2443 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2439;
        float _2451 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2440 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2574 = 1.0 / cbSceneParam._m0[80u].x;
            float _2575 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2576 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            _2614 = ((abs(_2451 / _2440) * cbSceneParam._m0[80u].y) * ((((_2585 - _2586) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))))) * _2574)) - ((exp2(_2461 * _2585) - exp2(_2461 * _2586)) * _2574))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2371);
        _2463 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2465 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2467 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2469 = _2625 * _2371;
    }
    else
    {
        _2463 = _2368;
        _2465 = _2369;
        _2467 = _2370;
        _2469 = _2371;
    }
    float _2481 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2482 = _2481 == 3.0;
    float _2483 = log2(_2469);
    float _2490 = exp2(_2483 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2313 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _599))) + ((_2319 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2491 = exp2(_2483 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2315 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _599))) + ((_2321 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2492 = exp2(_2483 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2317 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _599))) + ((_2323 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2501 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2501 * (_2482 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2463)));
    SV_Target.y = _2501 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2465)));
    SV_Target.z = _2501 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.w = cbInstanceData._m0[_2343].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
}


