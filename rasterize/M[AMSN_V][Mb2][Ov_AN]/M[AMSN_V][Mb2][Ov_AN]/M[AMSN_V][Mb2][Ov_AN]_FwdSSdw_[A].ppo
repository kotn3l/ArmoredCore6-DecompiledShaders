#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1016;
float _3409;
float _3410;
float _3411;
float _3412;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _259 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3421 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _260 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    vec4 _272 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _274 = _272.x;
    float _275 = _272.y;
    float _276 = _272.z;
    vec4 _288 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _299 = ((_288.x - _274) * _260) + _274;
    float _300 = ((_288.y - _275) * _260) + _275;
    float _301 = ((_288.z - _276) * _260) + _276;
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _316 = _314.x;
    float _317 = _314.y;
    float _318 = _314.z;
    float _326 = exp2(log2(_316) * 0.453999996185302734375);
    float _327 = exp2(log2(_317) * 0.453999996185302734375);
    float _328 = exp2(log2(_318) * 0.453999996185302734375);
    float _343 = (((_326 + (-0.5)) * (_316 - _299)) * cbMtdParam._m0[9u].z) + _299;
    float _344 = (((_327 + (-0.5)) * (_317 - _300)) * cbMtdParam._m0[9u].z) + _300;
    float _345 = (((_328 + (-0.5)) * (_318 - _301)) * cbMtdParam._m0[9u].z) + _301;
    float _359 = ((cbMtdParam._m0[9u].z * (0.5 - _326)) * (_316 - _343)) + _343;
    float _360 = ((cbMtdParam._m0[9u].z * (0.5 - _327)) * (_317 - _344)) + _344;
    float _361 = ((cbMtdParam._m0[9u].z * (0.5 - _328)) * (_318 - _345)) + _345;
    vec4 _373 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _375 = _373.x;
    float _376 = _373.y;
    float _377 = _373.z;
    vec4 _389 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _402 = ((_389.z - _377) * _260) + _377;
    float _405 = ((((_389.x - _375) * _260) + _375) * 2.0) + (-1.0);
    float _406 = ((((_389.y - _376) * _260) + _376) * 2.0) + (-1.0);
    float _407 = dot(vec2(_405, _406), vec2(_405, _406));
    float _3432 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))));
    vec4 _426 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _436 = (((_426.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _405;
    float _437 = (((_426.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _406;
    float _440 = fma(_412, _224, fma(_437, _216 * TANGENT.x, (_202 * _194) * _436));
    float _443 = fma(_412, _225, fma(_437, _216 * TANGENT.y, (_202 * _195) * _436));
    float _446 = fma(_412, _226, fma(_437, _216 * TANGENT.z, (_202 * _196) * _436));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _3443 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _454 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3465 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3476 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _525 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _515);
    float _526 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _515);
    float _527 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _515);
    float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
    float _532 = _525 * _531;
    float _533 = _526 * _531;
    float _534 = _527 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _697 = sqrt(((_525 * _525) + (_526 * _526)) + (_527 * _527));
        float _703 = (cbMatDynParam._m0[5u].x * _697) + cbMatDynParam._m0[5u].y;
        float _3487 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _708 = (cbMatDynParam._m0[5u].z * _697) + cbMatDynParam._m0[5u].w;
        float _3498 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) - _704)) + _704) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _575 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _578 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _591 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3509 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _617 = _614.x * TEXCOORD_3.w;
    float _618 = dot(vec3(_451, _452, _453), vec3(_532, _533, _534));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _451) - _532;
    float _626 = (_621 * _452) - _533;
    float _627 = (_621 * _453) - _534;
    float _631 = abs(dot(vec3(_532, _533, _534), vec3(_451, _452, _453)));
    float _3542 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _633 = sqrt(_454);
    float _646 = exp2((_633 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_633 * 3.0));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _746 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _750 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _773 = _678 + _451;
        float _774 = _682 + _452;
        float _775 = _686 + _453;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _742;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _746;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _750;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_451, _452, _453), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3590 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_451, _452, _453), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3623 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_451, _452, _453), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3656 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1063 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1067 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1090 = _678 + _451;
        float _1091 = _682 + _452;
        float _1092 = _686 + _453;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_451, _452, _453), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3719 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_451, _452, _453), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3752 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_451, _452, _453), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3785 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = _1016;
        _1338 = _1016;
        _1339 = _1016;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1029)) + _1029;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _625 * 0.5;
    float _1397 = _626 * 0.5;
    float _1398 = _627 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _454);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1528 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1531 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1559 = frontier_phi_19_17_ladder;
        }
        float _1785;
        if (_1528 > 0.0)
        {
            _1785 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1785 = frontier_phi_28_24_ladder;
        }
        float _2031;
        if (_1531 > 0.0)
        {
            _2031 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2031 = frontier_phi_40_35_ladder;
        }
        float _2033 = isnan(_1785) ? _1559 : (isnan(_1559) ? _1785 : min(_1559, _1785));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1525) + _1514;
        float _2039 = (_2034 * _1528) + _1518;
        float _2040 = (_2034 * _1531) + _1522;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_18_40_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_18_40_ladder_2;
        _1549 = frontier_phi_18_40_ladder_1;
        _1551 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1465);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _454);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1627 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1630 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1790;
        if (_1624 > 0.0)
        {
            _1790 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1790 = frontier_phi_30_26_ladder;
        }
        float _2058;
        if (_1627 > 0.0)
        {
            _2058 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2058 = frontier_phi_42_37_ladder;
        }
        float _2263;
        if (_1630 > 0.0)
        {
            _2263 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2263 = frontier_phi_51_48_ladder;
        }
        float _2265 = isnan(_2058) ? _1790 : (isnan(_1790) ? _2058 : min(_1790, _2058));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1624) + _1613;
        float _2271 = (_2266 * _1627) + _1617;
        float _2272 = (_2266 * _1630) + _1621;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_27_51_ladder = _2470.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2470.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2470.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_27_51_ladder_2;
        _1651 = frontier_phi_27_51_ladder_1;
        _1653 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1556);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1665 = ((((1.0 - _646) * ((_633 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_646 * _633)) * _617;
    float _1666 = _1665 * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1667 = _1665 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1668 = _1665 * ((cbModelParam._m0[1u].w * (_1653 - _1551)) + _1551);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    vec4 _1685 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1687 = _1685.w;
    float _1699 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1687);
    float _1700 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1687);
    float _1701 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1687);
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _617 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1743 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1747 = _1707 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_451, _452, _453));
    float _1761 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_451, _452, _453));
    float _3921 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _3932 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1766 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1768 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1775 = ((cbLight._m0[_1724].x * _1730) * _1768) + (((cbLight._m0[_1734].x * _1699) * _1743) * _1766);
    float _1776 = ((_1730 * cbLight._m0[_1724].y) * _1768) + (((cbLight._m0[_1734].y * _1700) * _1743) * _1766);
    float _1777 = ((_1730 * cbLight._m0[_1724].z) * _1768) + (((cbLight._m0[_1734].z * _1701) * _1743) * _1766);
    uvec4 _1782 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1784 = _1782.x == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1784)
    {
        _1795 = _1775;
        _1797 = _1776;
        _1799 = _1777;
    }
    else
    {
        uint _1803 = _1707 + 6u;
        float _1819 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _3943 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1822 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1795 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1775;
        _1797 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1776;
        _1799 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1777;
    }
    bool _1802 = _1782.y == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1802)
    {
        _1840 = _1795;
        _1842 = _1797;
        _1844 = _1799;
    }
    else
    {
        uint _2002 = _1707 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3959 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2021 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1840 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1795;
        _1842 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1797;
        _1844 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1799;
    }
    uint _1847 = _1707 + 8u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _454) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1707].x + _532;
    float _1863 = cbLight._m0[_1707].y + _533;
    float _1864 = cbLight._m0[_1707].z + _534;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1707].xyz));
    float _3975 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1876 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1877 = dot(vec3(_451, _452, _453), vec3(_1869, _1870, _1871));
    float _3997 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1869, _1870, _1871));
    float _4008 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1861 * _1861;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1861;
    float _1912 = (0.5 / (((_1876 * ((_1875 * _1901) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1901) + _1861) * _1875))) * _1875;
    float _4019 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    uint _1928 = _1707 + 9u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _454) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1747].x + _532;
    float _1942 = cbLight._m0[_1747].y + _533;
    float _1943 = cbLight._m0[_1747].z + _534;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1747].xyz));
    float _4030 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1955 = dot(vec3(_451, _452, _453), vec3(_1948, _1949, _1950));
    float _4041 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1948, _1949, _1950));
    float _4052 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1940 * _1940;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1940;
    float _1987 = (0.5 / (((_1876 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1977) + _1940) * _1954))) * _1954;
    float _4063 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    float _1999 = (((_1976 * cbLight._m0[_1928].x) * _1989) * _1730) + ((((cbLight._m0[_1847].x * _1699) * _1900) * _1914) * _1743);
    float _2000 = (((_1976 * cbLight._m0[_1928].y) * _1989) * _1730) + ((((cbLight._m0[_1847].y * _1700) * _1900) * _1914) * _1743);
    float _2001 = (((_1976 * cbLight._m0[_1928].z) * _1989) * _1730) + ((((cbLight._m0[_1847].z * _1701) * _1900) * _1914) * _1743);
    float _2063;
    float _2065;
    float _2067;
    if (_1784)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1707 + 2u;
        uint _2073 = _1707 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _454) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _532;
        float _2090 = cbLight._m0[_2069].y + _533;
        float _2091 = cbLight._m0[_2069].z + _534;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2069].xyz));
        float _4074 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2103 = dot(vec3(_451, _452, _453), vec3(_2096, _2097, _2098));
        float _4085 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4096 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2125 = 1.0 - _2088;
        float _2135 = (0.5 / (((_1876 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2125) + _2088) * _2102))) * _2102;
        float _4107 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2063 = (((_2124 * cbLight._m0[_2073].x) * _2137) * _2138) + _1999;
        _2065 = (((_2124 * cbLight._m0[_2073].y) * _2137) * _2138) + _2000;
        _2067 = (((_2124 * cbLight._m0[_2073].z) * _2137) * _2138) + _2001;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1802)
    {
        _2173 = _2063;
        _2175 = _2065;
        _2177 = _2067;
    }
    else
    {
        uint _2184 = _1707 + 3u;
        uint _2188 = _1707 + 11u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _454) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _532;
        float _2205 = cbLight._m0[_2184].y + _533;
        float _2206 = cbLight._m0[_2184].z + _534;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2184].xyz));
        float _4123 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2218 = dot(vec3(_451, _452, _453), vec3(_2211, _2212, _2213));
        float _4134 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4145 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2240 = 1.0 - _2203;
        float _2250 = (0.5 / (((_1876 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2240) + _2203) * _2217))) * _2217;
        float _4156 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2253 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2173 = (((_2239 * cbLight._m0[_2188].x) * _2252) * _2253) + _2063;
        _2175 = (((_2239 * cbLight._m0[_2188].y) * _2252) * _2253) + _2065;
        _2177 = (((_2239 * cbLight._m0[_2188].z) * _2252) * _2253) + _2067;
    }
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    if (_1705.y == 0u)
    {
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2328;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2328;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2328;
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2344)));
        float _2365 = (log2(_2331 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            uint _2633 = 0u;
            uint _2642;
            bool _2643;
            for (;;)
            {
                _2642 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2633 << 2u)) >> 2u)).x;
                _2643 = _2642 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2643)
                {
                    frontier_phi_68_pred = _2629;
                    frontier_phi_68_pred_1 = _2632;
                    frontier_phi_68_pred_2 = _2631;
                    frontier_phi_68_pred_3 = _2630;
                    frontier_phi_68_pred_4 = _2628;
                    frontier_phi_68_pred_5 = _2627;
                }
                else
                {
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    uint _2778;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2642;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    for (;;)
                    {
                        uint _2782 = uint(findLSB(_2778)) + (_2633 << 5u);
                        uint _2779 = (_2778 + 4294967295u) & _2778;
                        uint _2784 = _2782 * 48u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2804 = (_2782 * 48u) + 4u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2823 = (_2782 * 48u) + 8u;
                        vec3 _2834 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x));
                        float _2838 = _2798.x - _2329;
                        float _2839 = _2798.y - _2330;
                        float _2840 = _2798.z - _2331;
                        float _2841 = dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840));
                        float _2844 = inversesqrt(_2841);
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2848 = dot(vec3(_572, _575, _578), vec3(_2845, _2846, _2847));
                        float _2853 = 1.0 - (_2841 * _2798.w);
                        float _4182 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2855 = sqrt(_2841) * _2817.w;
                        float _2858 = 1.39999997615814208984375 / (_2855 + 1.39999997615814208984375);
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2848) + _2859;
                        float _2865 = _2855 * _2855;
                        float _2869 = ((isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))) * _2854) / ((_2865 * 0.699999988079071044921875) + 1.0);
                        float _2873 = (-0.0) - _2329;
                        float _2874 = (-0.0) - _2330;
                        float _2875 = (-0.0) - _2331;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2890 = exp2(log2(1.0 / ((_2865 * 3.5) + 5.0)) * 0.25);
                        float _2891 = 1.0 - _633;
                        float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                        float _2899 = _2898 * _2898;
                        float _2900 = _2899 * _2899;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_572, _575, _578), vec3(_2880, _2881, _2882));
                        float _4198 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2915 = dot(vec3(_572, _575, _578), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _4209 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                        float _2923 = _2858 * _2899;
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2848) + _2924;
                        float _4220 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2929 = 1.0 - _2899;
                        float _2939 = (0.5 / (((_2928 * ((_2914 * _2929) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2899) * _2914))) * _2928;
                        float _4231 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2950 = (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2922 * _2922) * ((_2865 * 2.1991131305694580078125) + 3.141590118408203125))) * _2854;
                        _2702 = (_2869 * _2817.x) + _2775;
                        _2703 = (_2869 * _2817.y) + _2776;
                        _2704 = (_2869 * _2817.z) + _2777;
                        _2699 = (_2950 * _2834.x) + _2772;
                        _2700 = (_2950 * _2834.y) + _2773;
                        _2701 = (_2950 * _2834.z) + _2774;
                        if (_2779 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2779;
                        }
                    }
                    frontier_phi_68_pred = _2701;
                    frontier_phi_68_pred_1 = _2704;
                    frontier_phi_68_pred_2 = _2703;
                    frontier_phi_68_pred_3 = _2702;
                    frontier_phi_68_pred_4 = _2700;
                    frontier_phi_68_pred_5 = _2699;
                }
                _2480 = frontier_phi_68_pred;
                _2486 = frontier_phi_68_pred_1;
                _2484 = frontier_phi_68_pred_2;
                _2482 = frontier_phi_68_pred_3;
                _2478 = frontier_phi_68_pred_4;
                _2476 = frontier_phi_68_pred_5;
                uint _2634 = _2633 + 1u;
                if (_2634 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2627 = _2476;
                    _2628 = _2478;
                    _2629 = _2480;
                    _2630 = _2482;
                    _2631 = _2484;
                    _2632 = _2486;
                    _2633 = _2634;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        if (((4294967295u << _2492) & _2375) == 0u)
        {
            _2595 = _2475;
            _2597 = _2477;
            _2599 = _2479;
            _2601 = _2481;
            _2603 = _2483;
            _2605 = _2485;
        }
        else
        {
            float _2620 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
            float _2621 = _2620 * _2329;
            float _2622 = _2620 * _2330;
            float _2623 = _2620 * _2331;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2596;
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2755 = _2475;
                float _2756 = _2477;
                float _2757 = _2479;
                float _2758 = _2481;
                float _2759 = _2483;
                float _2760 = _2485;
                uint _2761 = _2492;
                uint _2770;
                bool _2771;
                for (;;)
                {
                    _2770 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                    _2771 = _2770 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2771)
                    {
                        frontier_phi_79_pred = _2760;
                        frontier_phi_79_pred_1 = _2759;
                        frontier_phi_79_pred_2 = _2758;
                        frontier_phi_79_pred_3 = _2757;
                        frontier_phi_79_pred_4 = _2756;
                        frontier_phi_79_pred_5 = _2755;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        uint _2983 = _2770;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2994 = ((_2761 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_2994 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2994 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2331, _3104.z, fma(_2330, _3104.y, _3104.x * _2329)) + _3104.w;
                            _3117 = !((fma(_2331, _3085.z, fma(_2330, _3085.y, _3085.x * _2329)) + _3085.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3009.x - _2329;
                                float _3145 = _3009.y - _2330;
                                float _3146 = _3009.z - _2331;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3010 * _3010));
                                float _4242 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3162 = sqrt(_3147) * _3025.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_572, _575, _578))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2331, _3053.z, fma(_2330, _3053.y, _3053.x * _2329)) + _3053.w) / _3116;
                                float _3176 = (fma(_2331, _3069.z, fma(_2330, _3069.y, _3069.x * _2329)) + _3069.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4258 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _633;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2621;
                                float _3206 = _3152 - _2622;
                                float _3207 = _3153 - _2623;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2621, (-0.0) - _2622, (-0.0) - _2623));
                                float _4269 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3219 = dot(vec3(_572, _575, _578), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4280 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_572, _575, _578), vec3(_3151, _3152, _3153))) + _3228;
                                float _4291 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4302 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3182 * _3025.z;
                                frontier_phi_85_pred_1 = _3182 * _3025.y;
                                frontier_phi_85_pred_2 = _3182 * _3025.x;
                                frontier_phi_85_pred_3 = _3256 * _3037.z;
                                frontier_phi_85_pred_4 = _3256 * _3037.y;
                                frontier_phi_85_pred_5 = _3256 * _3037.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_85_pred;
                            _3264 = frontier_phi_85_pred_1;
                            _3263 = frontier_phi_85_pred_2;
                            _3262 = frontier_phi_85_pred_3;
                            _3261 = frontier_phi_85_pred_4;
                            _3260 = frontier_phi_85_pred_5;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2969;
                        frontier_phi_79_pred_1 = _2968;
                        frontier_phi_79_pred_2 = _2967;
                        frontier_phi_79_pred_3 = _2966;
                        frontier_phi_79_pred_4 = _2965;
                        frontier_phi_79_pred_5 = _2964;
                    }
                    _2606 = frontier_phi_79_pred;
                    _2604 = frontier_phi_79_pred_1;
                    _2602 = frontier_phi_79_pred_2;
                    _2600 = frontier_phi_79_pred_3;
                    _2598 = frontier_phi_79_pred_4;
                    _2596 = frontier_phi_79_pred_5;
                    uint _2762 = _2761 + 1u;
                    if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2755 = _2596;
                        _2756 = _2598;
                        _2757 = _2600;
                        _2758 = _2602;
                        _2759 = _2604;
                        _2760 = _2606;
                        _2761 = _2762;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2602;
                frontier_phi_60_61_ladder_1 = _2606;
                frontier_phi_60_61_ladder_2 = _2604;
                frontier_phi_60_61_ladder_3 = _2600;
                frontier_phi_60_61_ladder_4 = _2598;
                frontier_phi_60_61_ladder_5 = _2596;
            }
            else
            {
                frontier_phi_60_61_ladder = _2481;
                frontier_phi_60_61_ladder_1 = _2485;
                frontier_phi_60_61_ladder_2 = _2483;
                frontier_phi_60_61_ladder_3 = _2479;
                frontier_phi_60_61_ladder_4 = _2477;
                frontier_phi_60_61_ladder_5 = _2475;
            }
            _2595 = frontier_phi_60_61_ladder_5;
            _2597 = frontier_phi_60_61_ladder_4;
            _2599 = frontier_phi_60_61_ladder_3;
            _2601 = frontier_phi_60_61_ladder;
            _2603 = frontier_phi_60_61_ladder_2;
            _2605 = frontier_phi_60_61_ladder_1;
        }
        float _2610 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2387 = (_2610 * _2601) + _1840;
        _2389 = (_2610 * _2603) + _1842;
        _2391 = (_2610 * _2605) + _1844;
        _2393 = ((_2595 * 0.039999999105930328369140625) * _2610) + _2173;
        _2395 = ((_2597 * 0.039999999105930328369140625) * _2610) + _2175;
        _2397 = ((_2599 * 0.039999999105930328369140625) * _2610) + _2177;
    }
    else
    {
        _2387 = _1840;
        _2389 = _1842;
        _2391 = _1844;
        _2393 = _2173;
        _2395 = _2175;
        _2397 = _2177;
    }
    float _4318 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4329 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4340 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2414 = ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2387 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _617))) + ((_2393 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2415 = ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2389 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _617))) + ((_2395 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2416 = ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2391 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _617))) + ((_2397 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    uint _2417 = _591 + 6u;
    float _2425 = _552 / cbSceneParam._m0[86u].x;
    float _2426 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2440 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2442 = _2440.x;
    float _2443 = _2440.y;
    float _2444 = _2440.z;
    float _2445 = _2440.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2501 = _2500 / _473;
        float _2512 = _2501 * _525;
        float _2513 = _526 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _527;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2712;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2712 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2656 = 1.0 / cbSceneParam._m0[80u].x;
            float _2657 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2658 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2667 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : min(_2657, 0.0));
            float _2668 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : min(_2658, 0.0));
            _2712 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2667 - _2668) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))))) * _2656)) - ((exp2(_2535 * _2667) - exp2(_2535 * _2668)) * _2656))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2714 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, 1.0), 0.0);
        float _2723 = exp2((_2712 * (-1.44269502162933349609375)) * (1.0 - _2714.w));
        float _2724 = log2(_2723);
        float _2740 = log2(_2445);
        _2537 = (exp2(_2740 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].x)) * _2714.x) / cbSceneParam._m0[78u].x)) + _2442;
        _2539 = (exp2(_2740 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].y)) * _2714.y) / cbSceneParam._m0[78u].y)) + _2443;
        _2541 = (exp2(_2740 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].z)) * _2714.z) / cbSceneParam._m0[78u].z)) + _2444;
        _2543 = _2723 * _2445;
    }
    else
    {
        _2537 = _2442;
        _2539 = _2443;
        _2541 = _2444;
        _2543 = _2445;
    }
    bool _2750;
    vec4 _2553;
    vec4 _2575;
    float _2577;
    float _2581;
    float _2582;
    float _2583;
    float _2584;
    bool _2594;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2557 = log2(_2543);
        float _2564 = exp2(_2557 * cbSceneParam._m0[78u].x) * _2414;
        float _2565 = exp2(_2557 * cbSceneParam._m0[78u].y) * _2415;
        float _2566 = exp2(_2557 * cbSceneParam._m0[78u].z) * _2416;
        float _2573 = _541 + (-0.5);
        _2575 = cbMtdParam._m0[1u];
        _2577 = _2575.y * _2573;
        float _2580 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2581 = _2580 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2537)));
        _2582 = _2580 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
        _2583 = _2580 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
        _2584 = _2573 * 0.999000012874603271484375;
        _2594 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2594)
        {
            if ((cbInstanceData._m0[_591 + 7u].x + _2584) < 0.5)
            {
                _2750 = true;
                break;
            }
        }
        uint _2691 = _593 + uint(_2553.w);
        if ((cbInstanceData._m0[_2691].w < 1.0) && ((cbInstanceData._m0[_2691].w + _2584) < 0.5))
        {
            _2750 = true;
            break;
        }
        if ((_2577 + 1.0) < _2575.x)
        {
            _2750 = true;
            break;
        }
        _2750 = false;
        break;
    }
    float _2955;
    if (_2750)
    {
        discard_state = true;
        _2955 = 0.0;
    }
    else
    {
        _2955 = cbInstanceData._m0[_2417].w;
    }
    SV_Target.x = _2581;
    SV_Target.y = _2582;
    SV_Target.z = _2583;
    SV_Target.w = _2955;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2417].w;
    discard_exit();
}


