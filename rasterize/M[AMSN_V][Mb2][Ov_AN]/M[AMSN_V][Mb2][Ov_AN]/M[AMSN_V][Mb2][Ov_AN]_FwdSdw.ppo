#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _973;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _257 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3571 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _258 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    vec4 _270 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _272 = _270.x;
    float _273 = _270.y;
    float _274 = _270.z;
    vec4 _286 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _297 = ((_286.x - _272) * _258) + _272;
    float _298 = ((_286.y - _273) * _258) + _273;
    float _299 = ((_286.z - _274) * _258) + _274;
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _314 = _312.x;
    float _315 = _312.y;
    float _316 = _312.z;
    float _324 = exp2(log2(_314) * 0.453999996185302734375);
    float _325 = exp2(log2(_315) * 0.453999996185302734375);
    float _326 = exp2(log2(_316) * 0.453999996185302734375);
    float _341 = (((_324 + (-0.5)) * (_314 - _297)) * cbMtdParam._m0[9u].z) + _297;
    float _342 = (((_325 + (-0.5)) * (_315 - _298)) * cbMtdParam._m0[9u].z) + _298;
    float _343 = (((_326 + (-0.5)) * (_316 - _299)) * cbMtdParam._m0[9u].z) + _299;
    float _357 = ((cbMtdParam._m0[9u].z * (0.5 - _324)) * (_314 - _341)) + _341;
    float _358 = ((cbMtdParam._m0[9u].z * (0.5 - _325)) * (_315 - _342)) + _342;
    float _359 = ((cbMtdParam._m0[9u].z * (0.5 - _326)) * (_316 - _343)) + _343;
    vec4 _371 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _373 = _371.x;
    float _374 = _371.y;
    float _375 = _371.z;
    vec4 _387 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _400 = ((_387.z - _375) * _258) + _375;
    float _403 = ((((_387.x - _373) * _258) + _373) * 2.0) + (-1.0);
    float _404 = ((((_387.y - _374) * _258) + _374) * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3582 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))));
    vec4 _424 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _434 = (((_424.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _403;
    float _435 = (((_424.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _404;
    float _438 = fma(_410, _222, fma(_435, _214 * TANGENT.x, (_200 * _192) * _434));
    float _441 = fma(_410, _223, fma(_435, _214 * TANGENT.y, (_200 * _193) * _434));
    float _444 = fma(_410, _224, fma(_435, _214 * TANGENT.z, (_200 * _194) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3593 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _452 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3615 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3626 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _523 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _513);
    float _524 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _513);
    float _525 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _513);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _530 = _523 * _529;
    float _531 = _524 * _529;
    float _532 = _525 * _529;
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _561 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _564 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _580 = (_577 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3637 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _603 = _600.x * TEXCOORD_3.w;
    float _604 = dot(vec3(_449, _450, _451), vec3(_530, _531, _532));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _449) - _530;
    float _612 = (_607 * _450) - _531;
    float _613 = (_607 * _451) - _532;
    float _617 = abs(dot(vec3(_530, _531, _532), vec3(_449, _450, _451)));
    float _3670 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_452);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _703 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _707 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _730 = _664 + _449;
        float _731 = _668 + _450;
        float _732 = _672 + _451;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _699;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _703;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _707;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_449, _450, _451), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3718 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_449, _450, _451), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3751 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_449, _450, _451), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3784 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1013 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1017 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1021 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1044 = _664 + _449;
        float _1045 = _668 + _450;
        float _1046 = _672 + _451;
        float _1056 = fma(_1046, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044)) - _1013;
        float _1057 = fma(_1046, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044)) - _1017;
        float _1058 = fma(_1046, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044)) - _1021;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1013 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1017 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[35u].z) + ((((((_1021 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1112 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1079.x + (-0.5));
        float _1114 = _1112 * (_1079.y + (-0.5));
        float _1115 = _1112 * (_1079.z + (-0.5));
        float _1122 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1086.x + (-0.5));
        float _1124 = _1122 * (_1086.y + (-0.5));
        float _1125 = _1122 * (_1086.z + (-0.5));
        float _1132 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1093.x + (-0.5));
        float _1134 = _1132 * (_1093.y + (-0.5));
        float _1135 = _1132 * (_1093.z + (-0.5));
        float _1142 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1100.x + (-0.5));
        float _1144 = _1142 * (_1100.y + (-0.5));
        float _1145 = _1142 * (_1100.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_449, _450, _451), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3847 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1176 + 1.0))) + _1181) * _1146;
        float _1191 = _1114 * 0.5;
        float _1192 = _1124 * 0.5;
        float _1193 = _1134 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_449, _450, _451), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3880 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1218 + 1.0))) + _1223) * _1147;
        float _1233 = _1115 * 0.5;
        float _1234 = _1125 * 0.5;
        float _1235 = _1135 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_449, _450, _451), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3913 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1260 + 1.0))) + _1265) * _1148;
        _1282 = _1115;
        _1283 = _1114;
        _1284 = _1113;
        _1285 = _1125;
        _1286 = _1124;
        _1287 = _1123;
        _1288 = _1135;
        _1289 = _1134;
        _1290 = _1133;
        _1291 = _1148;
        _1292 = _1147;
        _1293 = _1146;
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _973;
        _1283 = _973;
        _1284 = _973;
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = _973;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1329 = fma(_1308, cbSceneParam._m0[89u].z, fma(_1307, cbSceneParam._m0[89u].y, _1306 * cbSceneParam._m0[89u].x));
    float _1332 = fma(_1308, cbSceneParam._m0[90u].z, fma(_1307, cbSceneParam._m0[90u].y, _1306 * cbSceneParam._m0[90u].x));
    float _1335 = fma(_1308, cbSceneParam._m0[91u].z, fma(_1307, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1306));
    float _1350 = _611 * 0.5;
    float _1351 = _612 * 0.5;
    float _1352 = _613 * 0.5;
    float _1353 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1356 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1359 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1393;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1366 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_972, _976, _979, _982));
        float _1370 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_974, _977, _980, _983));
        float _1374 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_975, _978, _981, _984));
        float _1381 = dot(vec4(cbModelParam._m0[39u]), vec4(_1350, _1351, _1352, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1404;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1395 = dot(vec4(cbModelParam._m0[40u]), vec4(_1350, _1351, _1352, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1408 = (_1404 * cbModelParam._m0[1u].x) + (_1393 * (1.0 - cbModelParam._m0[1u].x));
    float _1418 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1418 : min(cbModelParam._m0[25u].z, _1418));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1468 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1472 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1476 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1479 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1482 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1485 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1513;
        if (_1479 > 0.0)
        {
            _1513 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1513 = frontier_phi_16_14_ladder;
        }
        float _1687;
        if (_1482 > 0.0)
        {
            _1687 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1687 = frontier_phi_25_21_ladder;
        }
        float _1982;
        if (_1485 > 0.0)
        {
            _1982 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1982 = frontier_phi_37_32_ladder;
        }
        float _1984 = isnan(_1687) ? _1513 : (isnan(_1513) ? _1687 : min(_1513, _1687));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1479) + _1468;
        float _1990 = (_1985 * _1482) + _1472;
        float _1991 = (_1985 * _1485) + _1476;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1419);
            frontier_phi_15_37_ladder = _2136.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2136.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2136.z * cbModelParam._m0[1u].y;
        }
        _1501 = frontier_phi_15_37_ladder_1;
        _1503 = frontier_phi_15_37_ladder;
        _1505 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1419);
        _1501 = _1489.x * cbModelParam._m0[1u].y;
        _1503 = _1489.y * cbModelParam._m0[1u].y;
        _1505 = _1489.z * cbModelParam._m0[1u].y;
    }
    float _1509 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1509 : min(cbModelParam._m0[25u].w, _1509));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1581 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1584 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1692;
        if (_1578 > 0.0)
        {
            _1692 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1692 = frontier_phi_27_23_ladder;
        }
        float _2009;
        if (_1581 > 0.0)
        {
            _2009 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2009 = frontier_phi_39_34_ladder;
        }
        float _2336;
        if (_1584 > 0.0)
        {
            _2336 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2336 = frontier_phi_49_46_ladder;
        }
        float _2338 = isnan(_2009) ? _1692 : (isnan(_1692) ? _2009 : min(_1692, _2009));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1578) + _1567;
        float _2344 = (_2339 * _1581) + _1571;
        float _2345 = (_2339 * _1584) + _1575;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1510);
            frontier_phi_24_49_ladder = _2463.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2463.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2463.x * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_24_49_ladder_2;
        _1605 = frontier_phi_24_49_ladder_1;
        _1607 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1510);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1619 = ((((1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_632 * _619)) * _603;
    float _1620 = _1619 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = _1619 * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1622 = _1619 * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, _1620 * cbSceneParam._m0[91u].x));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1679 = _1666 / _1678;
    float _1680 = _1670 / _1678;
    float _1681 = _1674 / _1678;
    float _1828;
    float _1829;
    float _1830;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1708 = ((uint(_1681 > cbSceneParam._m0[59u].y) + uint(_1681 > cbSceneParam._m0[59u].x)) + uint(_1681 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1709 = _1708 + 43u;
        uint _1717 = _1708 + 44u;
        uint _1725 = _1708 + 45u;
        uint _1733 = _1708 + 46u;
        float _1744 = fma(_1678, cbSceneParam._m0[_1709].w, fma(_1674, cbSceneParam._m0[_1709].z, fma(_1670, cbSceneParam._m0[_1709].y, _1666 * cbSceneParam._m0[_1709].x)));
        float _1748 = fma(_1678, cbSceneParam._m0[_1717].w, fma(_1674, cbSceneParam._m0[_1717].z, fma(_1670, cbSceneParam._m0[_1717].y, _1666 * cbSceneParam._m0[_1717].x)));
        float _1756 = fma(_1678, cbSceneParam._m0[_1733].w, fma(_1674, cbSceneParam._m0[_1733].z, fma(_1670, cbSceneParam._m0[_1733].y, _1666 * cbSceneParam._m0[_1733].x)));
        float _1761 = cbSceneParam._m0[33u].z * _1756;
        float _1763 = cbSceneParam._m0[33u].w * _1756;
        float _1766 = fma(_1678, cbSceneParam._m0[_1725].w, fma(_1674, cbSceneParam._m0[_1725].z, fma(_1670, cbSceneParam._m0[_1725].y, _1666 * cbSceneParam._m0[_1725].x))) / _1756;
        float _1814 = (cbSceneParam._m0[33u].x - sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681))) * cbSceneParam._m0[33u].y;
        float _4039 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1821 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 + _1744) / _1756, (_1763 + _1748) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1763 + _1744) / _1756, (_1748 - _1761) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1744 - _1761) / _1756, (_1748 - _1763) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1744 - _1763) / _1756, (_1761 + _1748) / _1756), _1766), 0.0)).x), vec4(0.25)));
        _1828 = 1.0 - (_1821 * cbSceneParam._m0[34u].x);
        _1829 = 1.0 - (_1821 * cbSceneParam._m0[34u].y);
        _1830 = 1.0 - (_1821 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1828 = 1.0;
        _1829 = 1.0;
        _1830 = 1.0;
    }
    float _1894;
    float _1896;
    float _1898;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1882 = fma(_1678, cbSceneParam._m0[63u].w, fma(_1674, cbSceneParam._m0[63u].z, fma(_1670, cbSceneParam._m0[63u].y, _1666 * cbSceneParam._m0[63u].x)));
        float _1883 = fma(_1678, cbSceneParam._m0[60u].w, fma(_1674, cbSceneParam._m0[60u].z, fma(_1670, cbSceneParam._m0[60u].y, _1666 * cbSceneParam._m0[60u].x))) / _1882;
        float _1884 = fma(_1678, cbSceneParam._m0[61u].w, fma(_1674, cbSceneParam._m0[61u].z, fma(_1670, cbSceneParam._m0[61u].y, _1666 * cbSceneParam._m0[61u].x))) / _1882;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1883 >= cbSceneParam._m0[64u].x) && (_1884 >= cbSceneParam._m0[64u].y)) && (_1883 <= cbSceneParam._m0[64u].z)) && (_1884 <= cbSceneParam._m0[64u].w))
        {
            float _2022 = fma(_1678, cbSceneParam._m0[62u].w, fma(_1674, cbSceneParam._m0[62u].z, fma(_1670, cbSceneParam._m0[62u].y, _1666 * cbSceneParam._m0[62u].x))) / _1882;
            float _2026 = isnan(cbSceneParam._m0[41u].w) ? _2022 : (isnan(_2022) ? cbSceneParam._m0[41u].w : max(_2022, cbSceneParam._m0[41u].w));
            float _2069 = (cbSceneParam._m0[33u].x - sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681))) * cbSceneParam._m0[33u].y;
            float _4055 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
            float _2076 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1883, cbSceneParam._m0[33u].w + _1884), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1883, _1884 - cbSceneParam._m0[33u].z), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1883 - cbSceneParam._m0[33u].z, _1884 - cbSceneParam._m0[33u].w), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1883 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1884), _2026), 0.0)).x), vec4(0.25)));
            float _2080 = 1.0 - (_2076 * cbSceneParam._m0[34u].x);
            float _2081 = 1.0 - (_2076 * cbSceneParam._m0[34u].y);
            float _2082 = 1.0 - (_2076 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2081) ? _1829 : (isnan(_1829) ? _2081 : min(_1829, _2081));
            frontier_phi_36_35_ladder_1 = isnan(_2082) ? _1830 : (isnan(_1830) ? _2082 : min(_1830, _2082));
            frontier_phi_36_35_ladder_2 = isnan(_2080) ? _1828 : (isnan(_1828) ? _2080 : min(_1828, _2080));
        }
        else
        {
            frontier_phi_36_35_ladder = _1829;
            frontier_phi_36_35_ladder_1 = _1830;
            frontier_phi_36_35_ladder_2 = _1828;
        }
        _1894 = frontier_phi_36_35_ladder_2;
        _1896 = frontier_phi_36_35_ladder;
        _1898 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1894 = _1828;
        _1896 = _1829;
        _1898 = _1830;
    }
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _603 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1941 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1945 = _1905 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_449, _450, _451));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_449, _450, _451));
    float _4091 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _4102 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1922].x * _1928) * _1966) + (((cbLight._m0[_1932].x * _1894) * _1941) * _1964);
    float _1974 = ((_1928 * cbLight._m0[_1922].y) * _1966) + (((cbLight._m0[_1932].y * _1896) * _1941) * _1964);
    float _1975 = ((_1928 * cbLight._m0[_1922].z) * _1966) + (((cbLight._m0[_1932].z * _1898) * _1941) * _1964);
    uvec4 _1979 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1981 = _1979.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_1981)
    {
        _2083 = _1973;
        _2085 = _1974;
        _2087 = _1975;
    }
    else
    {
        uint _2091 = _1905 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4113 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2110 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1973;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1974;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1975;
    }
    bool _2090 = _1979.y == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2090)
    {
        _2145 = _2083;
        _2147 = _2085;
        _2149 = _2087;
    }
    else
    {
        uint _2307 = _1905 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4129 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2326 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2145 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2083;
        _2147 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2085;
        _2149 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2087;
    }
    uint _2152 = _1905 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _452) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1905].x + _530;
    float _2168 = cbLight._m0[_1905].y + _531;
    float _2169 = cbLight._m0[_1905].z + _532;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1905].xyz));
    float _4145 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2181 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2182 = dot(vec3(_449, _450, _451), vec3(_2174, _2175, _2176));
    float _4167 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2174, _2175, _2176));
    float _4178 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2206 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2181 * ((_2180 * _2206) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2206) + _2166) * _2180))) * _2180;
    float _4189 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2233 = _1905 + 9u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _452) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_1945].x + _530;
    float _2247 = cbLight._m0[_1945].y + _531;
    float _2248 = cbLight._m0[_1945].z + _532;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1945].xyz));
    float _4200 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2260 = dot(vec3(_449, _450, _451), vec3(_2253, _2254, _2255));
    float _4211 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2253, _2254, _2255));
    float _4222 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2245 * _2245;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2282 = 1.0 - _2245;
    float _2292 = (0.5 / (((_2181 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2282) + _2245) * _2259))) * _2259;
    float _4233 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    float _2304 = (((_2281 * cbLight._m0[_2233].x) * _2294) * _1928) + ((((cbLight._m0[_2152].x * _1894) * _2205) * _2219) * _1941);
    float _2305 = (((_2281 * cbLight._m0[_2233].y) * _2294) * _1928) + ((((cbLight._m0[_2152].y * _1896) * _2205) * _2219) * _1941);
    float _2306 = (((_2281 * cbLight._m0[_2233].z) * _2294) * _1928) + ((((cbLight._m0[_2152].z * _1898) * _2205) * _2219) * _1941);
    float _2362;
    float _2364;
    float _2366;
    if (_1981)
    {
        _2362 = _2304;
        _2364 = _2305;
        _2366 = _2306;
    }
    else
    {
        uint _2368 = _1905 + 2u;
        uint _2372 = _1905 + 10u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _452) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _530;
        float _2389 = cbLight._m0[_2368].y + _531;
        float _2390 = cbLight._m0[_2368].z + _532;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2368].xyz));
        float _4244 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2402 = dot(vec3(_449, _450, _451), vec3(_2395, _2396, _2397));
        float _4255 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4266 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2423 = (exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2424 = 1.0 - _2387;
        float _2434 = (0.5 / (((_2181 * ((_2401 * _2424) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2424) + _2387) * _2401))) * _2401;
        float _4277 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2362 = (((_2423 * cbLight._m0[_2372].x) * _2436) * _2437) + _2304;
        _2364 = (((_2423 * cbLight._m0[_2372].y) * _2436) * _2437) + _2305;
        _2366 = (((_2423 * cbLight._m0[_2372].z) * _2436) * _2437) + _2306;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2090)
    {
        _2468 = _2362;
        _2470 = _2364;
        _2472 = _2366;
    }
    else
    {
        uint _2479 = _1905 + 3u;
        uint _2483 = _1905 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _452) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _530;
        float _2500 = cbLight._m0[_2479].y + _531;
        float _2501 = cbLight._m0[_2479].z + _532;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2479].xyz));
        float _4293 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2513 = dot(vec3(_449, _450, _451), vec3(_2506, _2507, _2508));
        float _4304 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4315 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2181 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2535) + _2498) * _2512))) * _2512;
        float _4326 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2468 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2362;
        _2470 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2364;
        _2472 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2366;
    }
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_1903.y == 0u)
    {
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.x;
        uint _2581 = uint((float(_2569.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2570))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2570)));
        float _2591 = (log2(_1681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2592 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        uint _2595 = uint(isnan(14.0) ? _2592 : (isnan(_2592) ? 14.0 : min(_2592, 14.0)));
        uvec4 _2600 = texelFetch(g_lightClusterGridBuffer, int(((_2595 << 2u) + (_2581 << 6u)) >> 2u));
        uint _2601 = _2600.x;
        uint _2602 = _2569.z;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((((1u << ((_2602 >> 4u) & 15u)) + 4294967295u) & _2601) == 0u) || ((_2602 & 240u) == 0u))
        {
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
        }
        else
        {
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2840)
                {
                    frontier_phi_68_pred = _2829;
                    frontier_phi_68_pred_1 = _2828;
                    frontier_phi_68_pred_2 = _2827;
                    frontier_phi_68_pred_3 = _2825;
                    frontier_phi_68_pred_4 = _2824;
                    frontier_phi_68_pred_5 = _2826;
                }
                else
                {
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    uint _2954;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2839;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    for (;;)
                    {
                        uint _2958 = uint(findLSB(_2954)) + (_2830 << 5u);
                        uint _2955 = (_2954 + 4294967295u) & _2954;
                        uint _2960 = _2958 * 48u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2980 = (_2958 * 48u) + 4u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _2999 = (_2958 * 48u) + 8u;
                        vec3 _3010 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x));
                        float _3014 = _2974.x - _1679;
                        float _3015 = _2974.y - _1680;
                        float _3016 = _2974.z - _1681;
                        float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                        float _3020 = inversesqrt(_3017);
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3024 = dot(vec3(_558, _561, _564), vec3(_3021, _3022, _3023));
                        float _3029 = 1.0 - (_3017 * _2974.w);
                        float _4352 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3031 = sqrt(_3017) * _2993.w;
                        float _3034 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _3024) + _3035;
                        float _3041 = _3031 * _3031;
                        float _3045 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3030) / ((_3041 * 0.699999988079071044921875) + 1.0);
                        float _3049 = (-0.0) - _1679;
                        float _3050 = (-0.0) - _1680;
                        float _3051 = (-0.0) - _1681;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3065 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                        float _3066 = 1.0 - _619;
                        float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                        float _3074 = _3073 * _3073;
                        float _3075 = _3074 * _3074;
                        float _3076 = _3056 + _3021;
                        float _3077 = _3057 + _3022;
                        float _3078 = _3058 + _3023;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3086 = dot(vec3(_558, _561, _564), vec3(_3056, _3057, _3058));
                        float _4368 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3090 = dot(vec3(_558, _561, _564), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                        float _4379 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                        float _3098 = _3034 * _3074;
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3024) + _3099;
                        float _4390 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3104 = 1.0 - _3074;
                        float _3114 = (0.5 / (((_3103 * ((_3089 * _3104) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3074) * _3089))) * _3103;
                        float _4401 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3125 = (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3097 * _3097) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125))) * _3030;
                        _2883 = (_3045 * _2993.x) + _2951;
                        _2884 = (_3045 * _2993.y) + _2952;
                        _2885 = (_3045 * _2993.z) + _2953;
                        _2880 = (_3125 * _3010.x) + _2948;
                        _2881 = (_3125 * _3010.y) + _2949;
                        _2882 = (_3125 * _3010.z) + _2950;
                        if (_2955 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2955;
                        }
                    }
                    frontier_phi_68_pred = _2885;
                    frontier_phi_68_pred_1 = _2884;
                    frontier_phi_68_pred_2 = _2883;
                    frontier_phi_68_pred_3 = _2881;
                    frontier_phi_68_pred_4 = _2880;
                    frontier_phi_68_pred_5 = _2882;
                }
                _2691 = frontier_phi_68_pred;
                _2689 = frontier_phi_68_pred_1;
                _2687 = frontier_phi_68_pred_2;
                _2683 = frontier_phi_68_pred_3;
                _2681 = frontier_phi_68_pred_4;
                _2685 = frontier_phi_68_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2681;
                    _2825 = _2683;
                    _2826 = _2685;
                    _2827 = _2687;
                    _2828 = _2689;
                    _2829 = _2691;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
        }
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.z;
        uint _2697 = (_2695 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2697) & _2601) == 0u)
        {
            _2792 = _2680;
            _2794 = _2682;
            _2796 = _2684;
            _2798 = _2686;
            _2800 = _2688;
            _2802 = _2690;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
            float _2818 = _2817 * _1679;
            float _2819 = _2817 * _1680;
            float _2820 = _2817 * _1681;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2697 < ((_2695 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2931 = _2680;
                float _2932 = _2682;
                float _2933 = _2684;
                float _2934 = _2686;
                float _2935 = _2688;
                float _2936 = _2690;
                uint _2937 = _2697;
                uint _2946;
                bool _2947;
                for (;;)
                {
                    _2946 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                    _2947 = _2946 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2947)
                    {
                        frontier_phi_74_pred = _2933;
                        frontier_phi_74_pred_1 = _2932;
                        frontier_phi_74_pred_2 = _2931;
                        frontier_phi_74_pred_3 = _2936;
                        frontier_phi_74_pred_4 = _2935;
                        frontier_phi_74_pred_5 = _2934;
                    }
                    else
                    {
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3143 = _2931;
                        float _3144 = _2932;
                        float _3145 = _2933;
                        float _3146 = _2934;
                        float _3147 = _2935;
                        float _3148 = _2936;
                        uint _3149 = _2946;
                        uint _3150;
                        vec4 _3175;
                        float _3176;
                        vec4 _3191;
                        vec3 _3203;
                        vec4 _3219;
                        vec4 _3235;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3160 = ((_2937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3149));
                            _3150 = (_3149 + 4294967295u) & _3149;
                            uint _3162 = _3160 * 40u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3176 = _3175.w;
                            uint _3178 = (_3160 * 40u) + 4u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3160 * 40u) + 8u;
                            _3203 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x));
                            uint _3206 = (_3160 * 40u) + 16u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3222 = (_3160 * 40u) + 20u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3238 = (_3160 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3160 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_1681, _3270.z, fma(_1680, _3270.y, _3270.x * _1679)) + _3270.w;
                            _3283 = !((fma(_1681, _3251.z, fma(_1680, _3251.y, _3251.x * _1679)) + _3251.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3175.x - _1679;
                                float _3311 = _3175.y - _1680;
                                float _3312 = _3175.z - _1681;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3176 * _3176));
                                float _4412 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3328 = sqrt(_3313) * _3191.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_558, _561, _564))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_1681, _3219.z, fma(_1680, _3219.y, _3219.x * _1679)) + _3219.w) / _3282;
                                float _3342 = (fma(_1681, _3235.z, fma(_1680, _3235.y, _3235.x * _1679)) + _3235.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4428 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _619;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2818;
                                float _3372 = _3318 - _2819;
                                float _3373 = _3319 - _2820;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4439 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3385 = dot(vec3(_558, _561, _564), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4450 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_558, _561, _564), vec3(_3317, _3318, _3319))) + _3394;
                                float _4461 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4472 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3422 * _3203.z;
                                frontier_phi_80_pred_1 = _3422 * _3203.y;
                                frontier_phi_80_pred_2 = _3422 * _3203.x;
                                frontier_phi_80_pred_3 = _3348 * _3191.z;
                                frontier_phi_80_pred_4 = _3348 * _3191.y;
                                frontier_phi_80_pred_5 = _3348 * _3191.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3428 = frontier_phi_80_pred;
                            _3427 = frontier_phi_80_pred_1;
                            _3426 = frontier_phi_80_pred_2;
                            _3431 = frontier_phi_80_pred_3;
                            _3430 = frontier_phi_80_pred_4;
                            _3429 = frontier_phi_80_pred_5;
                            _3133 = _3429 + _3146;
                            _3134 = _3430 + _3147;
                            _3135 = _3431 + _3148;
                            _3130 = _3426 + _3143;
                            _3131 = _3427 + _3144;
                            _3132 = _3428 + _3145;
                            if (_3150 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3150;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3132;
                        frontier_phi_74_pred_1 = _3131;
                        frontier_phi_74_pred_2 = _3130;
                        frontier_phi_74_pred_3 = _3135;
                        frontier_phi_74_pred_4 = _3134;
                        frontier_phi_74_pred_5 = _3133;
                    }
                    _2797 = frontier_phi_74_pred;
                    _2795 = frontier_phi_74_pred_1;
                    _2793 = frontier_phi_74_pred_2;
                    _2803 = frontier_phi_74_pred_3;
                    _2801 = frontier_phi_74_pred_4;
                    _2799 = frontier_phi_74_pred_5;
                    uint _2938 = _2937 + 1u;
                    if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2931 = _2793;
                        _2932 = _2795;
                        _2933 = _2797;
                        _2934 = _2799;
                        _2935 = _2801;
                        _2936 = _2803;
                        _2937 = _2938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2801;
                frontier_phi_62_63_ladder_1 = _2799;
                frontier_phi_62_63_ladder_2 = _2797;
                frontier_phi_62_63_ladder_3 = _2803;
                frontier_phi_62_63_ladder_4 = _2795;
                frontier_phi_62_63_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_62_63_ladder = _2688;
                frontier_phi_62_63_ladder_1 = _2686;
                frontier_phi_62_63_ladder_2 = _2684;
                frontier_phi_62_63_ladder_3 = _2690;
                frontier_phi_62_63_ladder_4 = _2682;
                frontier_phi_62_63_ladder_5 = _2680;
            }
            _2792 = frontier_phi_62_63_ladder_5;
            _2794 = frontier_phi_62_63_ladder_4;
            _2796 = frontier_phi_62_63_ladder_2;
            _2798 = frontier_phi_62_63_ladder_1;
            _2800 = frontier_phi_62_63_ladder;
            _2802 = frontier_phi_62_63_ladder_3;
        }
        float _2807 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2613 = (_2807 * _2798) + _2145;
        _2615 = (_2807 * _2800) + _2147;
        _2617 = (_2807 * _2802) + _2149;
        _2619 = ((_2792 * 0.039999999105930328369140625) * _2807) + _2468;
        _2621 = ((_2794 * 0.039999999105930328369140625) * _2807) + _2470;
        _2623 = ((_2796 * 0.039999999105930328369140625) * _2807) + _2472;
    }
    else
    {
        _2613 = _2145;
        _2615 = _2147;
        _2617 = _2149;
        _2619 = _2468;
        _2621 = _2470;
        _2623 = _2472;
    }
    float _4488 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4499 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4510 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    uint _2643 = _577 + 6u;
    float _2651 = _538 / cbSceneParam._m0[86u].x;
    float _2652 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2668 = _2666.x;
    float _2669 = _2666.y;
    float _2670 = _2666.z;
    float _2671 = _2666.w;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2705 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2706 = _2705 / _471;
        float _2717 = _2706 * _523;
        float _2718 = _524 * _2706;
        float _2719 = (-0.0) - _2718;
        float _2720 = _2706 * _525;
        float _2722 = (cbSceneParam._m0[77u].w * _2719) / _2705;
        float _2723 = _2722 + cbSceneParam._m0[79u].w;
        float _2724 = cbSceneParam._m0[79u].w - _2718;
        float _2730 = sqrt(((_2717 * _2717) + (_2718 * _2718)) + (_2720 * _2720));
        float _2733 = (1.0 - (cbSceneParam._m0[77u].w / _2705)) * _2730;
        float _2738 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2740 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2893;
        if (abs((_2719 - _2722) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2893 = ((((_2723 > 0.0) ? exp2(_2738 * _2723) : (2.0 - exp2(_2740 * _2723))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2733;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2724) ? _2723 : (isnan(_2723) ? _2724 : max(_2723, _2724));
            float _2855 = isnan(_2724) ? _2723 : (isnan(_2723) ? _2724 : min(_2723, _2724));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2893 = ((abs(_2730 / _2719) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2738 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2738 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2740 * _2864) - exp2(_2740 * _2865)) * _2853))) + (_2733 * cbSceneParam._m0[80u].z);
        }
        vec4 _2895 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, 1.0), 0.0);
        float _2904 = exp2((_2893 * (-1.44269502162933349609375)) * (1.0 - _2895.w));
        float _2905 = log2(_2904);
        float _2921 = log2(_2671);
        _2742 = (exp2(_2921 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].x)) * _2895.x) / cbSceneParam._m0[78u].x)) + _2668;
        _2744 = (exp2(_2921 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].y)) * _2895.y) / cbSceneParam._m0[78u].y)) + _2669;
        _2746 = (exp2(_2921 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].z)) * _2895.z) / cbSceneParam._m0[78u].z)) + _2670;
        _2748 = _2904 * _2671;
    }
    else
    {
        _2742 = _2668;
        _2744 = _2669;
        _2746 = _2670;
        _2748 = _2671;
    }
    float _2760 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2761 = _2760 == 3.0;
    float _2762 = log2(_2748);
    float _2769 = exp2(_2762 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2613 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _603))) + ((_2619 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2770 = exp2(_2762 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2615 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _603))) + ((_2621 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2771 = exp2(_2762 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2617 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _603))) + ((_2623 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2780 = (_2760 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2780 * (_2761 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.y = _2780 * (_2761 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.z = _2780 * (_2761 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.w = cbInstanceData._m0[_2643].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2643].w;
}


