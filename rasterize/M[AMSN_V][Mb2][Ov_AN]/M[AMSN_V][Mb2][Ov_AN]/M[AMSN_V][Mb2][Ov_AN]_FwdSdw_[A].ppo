#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3670;
float _3671;
float _3672;
float _3673;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _261 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3682 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _262 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    vec4 _274 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _276 = _274.x;
    float _277 = _274.y;
    float _278 = _274.z;
    vec4 _290 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _301 = ((_290.x - _276) * _262) + _276;
    float _302 = ((_290.y - _277) * _262) + _277;
    float _303 = ((_290.z - _278) * _262) + _278;
    vec4 _316 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _318 = _316.x;
    float _319 = _316.y;
    float _320 = _316.z;
    float _328 = exp2(log2(_318) * 0.453999996185302734375);
    float _329 = exp2(log2(_319) * 0.453999996185302734375);
    float _330 = exp2(log2(_320) * 0.453999996185302734375);
    float _345 = (((_328 + (-0.5)) * (_318 - _301)) * cbMtdParam._m0[9u].z) + _301;
    float _346 = (((_329 + (-0.5)) * (_319 - _302)) * cbMtdParam._m0[9u].z) + _302;
    float _347 = (((_330 + (-0.5)) * (_320 - _303)) * cbMtdParam._m0[9u].z) + _303;
    float _361 = ((cbMtdParam._m0[9u].z * (0.5 - _328)) * (_318 - _345)) + _345;
    float _362 = ((cbMtdParam._m0[9u].z * (0.5 - _329)) * (_319 - _346)) + _346;
    float _363 = ((cbMtdParam._m0[9u].z * (0.5 - _330)) * (_320 - _347)) + _347;
    vec4 _375 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _377 = _375.x;
    float _378 = _375.y;
    float _379 = _375.z;
    vec4 _391 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _404 = ((_391.z - _379) * _262) + _379;
    float _407 = ((((_391.x - _377) * _262) + _377) * 2.0) + (-1.0);
    float _408 = ((((_391.y - _378) * _262) + _378) * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _3693 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))));
    vec4 _428 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _438 = (((_428.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _407;
    float _439 = (((_428.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _408;
    float _442 = fma(_414, _226, fma(_439, _218 * TANGENT.x, (_204 * _196) * _438));
    float _445 = fma(_414, _227, fma(_439, _218 * TANGENT.y, (_204 * _197) * _438));
    float _448 = fma(_414, _228, fma(_439, _218 * TANGENT.z, (_204 * _198) * _438));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3704 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _456 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3726 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3737 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _527 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _517);
    float _528 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _517);
    float _529 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _517);
    float _533 = inversesqrt(dot(vec3(_527, _528, _529), vec3(_527, _528, _529)));
    float _534 = _527 * _533;
    float _535 = _528 * _533;
    float _536 = _529 * _533;
    vec4 _541 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _543 = _541.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _699 = sqrt(((_527 * _527) + (_528 * _528)) + (_529 * _529));
        float _705 = (cbMatDynParam._m0[5u].x * _699) + cbMatDynParam._m0[5u].y;
        float _3748 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _710 = (cbMatDynParam._m0[5u].z * _699) + cbMatDynParam._m0[5u].w;
        float _3759 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) - _706)) + _706) < ((_543 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _577 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _580 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _593 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3770 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    vec4 _616 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _619 = _616.x * TEXCOORD_3.w;
    float _620 = dot(vec3(_453, _454, _455), vec3(_534, _535, _536));
    float _623 = _620 * 2.0;
    float _627 = (_623 * _453) - _534;
    float _628 = (_623 * _454) - _535;
    float _629 = (_623 * _455) - _536;
    float _633 = abs(dot(vec3(_534, _535, _536), vec3(_453, _454, _455)));
    float _3803 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _635 = sqrt(_456);
    float _648 = exp2((_635 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_635 * 3.0));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_688, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680));
        float _748 = fma(_688, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680));
        float _752 = fma(_688, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680));
        float _775 = _680 + _453;
        float _776 = _684 + _454;
        float _777 = _688 + _455;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _744;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _748;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _752;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_453, _454, _455), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3851 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_453, _454, _455), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3884 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_453, _454, _455), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3917 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_688, cbModelParam._m0[30u].z, fma(_684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _680));
        float _1065 = fma(_688, cbModelParam._m0[31u].z, fma(_684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _680));
        float _1069 = fma(_688, cbModelParam._m0[32u].z, fma(_684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _680));
        float _1092 = _680 + _453;
        float _1093 = _684 + _454;
        float _1094 = _688 + _455;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_453, _454, _455), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3980 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_453, _454, _455), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4013 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_453, _454, _455), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4046 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = _1018;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1031)) + _1031;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1032)) + _1032;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _627 * 0.5;
    float _1399 = _628 * 0.5;
    float _1400 = _629 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_688, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_688, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_688, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_629, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627));
        float _1530 = fma(_629, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627));
        float _1533 = fma(_629, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1561 = frontier_phi_19_17_ladder;
        }
        float _1735;
        if (_1530 > 0.0)
        {
            _1735 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1735 = frontier_phi_28_24_ladder;
        }
        float _2030;
        if (_1533 > 0.0)
        {
            _2030 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2030 = frontier_phi_40_35_ladder;
        }
        float _2032 = isnan(_1735) ? _1561 : (isnan(_1561) ? _1735 : min(_1561, _1735));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1527) + _1516;
        float _2038 = (_2033 * _1530) + _1520;
        float _2039 = (_2033 * _1533) + _1524;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_18_40_ladder = _2184.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2184.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2184.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_18_40_ladder_2;
        _1551 = frontier_phi_18_40_ladder_1;
        _1553 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_627, _628, _629), _1467);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_688, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_688, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_688, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_629, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627));
        float _1629 = fma(_629, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627));
        float _1632 = fma(_629, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627));
        float _1740;
        if (_1626 > 0.0)
        {
            _1740 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1740 = frontier_phi_30_26_ladder;
        }
        float _2057;
        if (_1629 > 0.0)
        {
            _2057 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2057 = frontier_phi_42_37_ladder;
        }
        float _2384;
        if (_1632 > 0.0)
        {
            _2384 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2384 = frontier_phi_52_49_ladder;
        }
        float _2386 = isnan(_2057) ? _1740 : (isnan(_1740) ? _2057 : min(_1740, _2057));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1626) + _1615;
        float _2392 = (_2387 * _1629) + _1619;
        float _2393 = (_2387 * _1632) + _1623;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_27_52_ladder = _2511.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2511.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2511.x * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_27_52_ladder_2;
        _1653 = frontier_phi_27_52_ladder_1;
        _1655 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_627, _628, _629), _1558);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1667 = ((((1.0 - _648) * ((_635 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_648 * _635)) * _619;
    float _1668 = _1667 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1669 = _1667 * ((cbModelParam._m0[1u].w * (_1653 - _1551)) + _1551);
    float _1670 = _1667 * ((cbModelParam._m0[1u].w * (_1655 - _1553)) + _1553);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1727 = _1714 / _1726;
    float _1728 = _1718 / _1726;
    float _1729 = _1722 / _1726;
    float _1876;
    float _1877;
    float _1878;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1756 = ((uint(_1729 > cbSceneParam._m0[59u].y) + uint(_1729 > cbSceneParam._m0[59u].x)) + uint(_1729 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1757 = _1756 + 43u;
        uint _1765 = _1756 + 44u;
        uint _1773 = _1756 + 45u;
        uint _1781 = _1756 + 46u;
        float _1792 = fma(_1726, cbSceneParam._m0[_1757].w, fma(_1722, cbSceneParam._m0[_1757].z, fma(_1718, cbSceneParam._m0[_1757].y, _1714 * cbSceneParam._m0[_1757].x)));
        float _1796 = fma(_1726, cbSceneParam._m0[_1765].w, fma(_1722, cbSceneParam._m0[_1765].z, fma(_1718, cbSceneParam._m0[_1765].y, _1714 * cbSceneParam._m0[_1765].x)));
        float _1804 = fma(_1726, cbSceneParam._m0[_1781].w, fma(_1722, cbSceneParam._m0[_1781].z, fma(_1718, cbSceneParam._m0[_1781].y, _1714 * cbSceneParam._m0[_1781].x)));
        float _1809 = cbSceneParam._m0[33u].z * _1804;
        float _1811 = cbSceneParam._m0[33u].w * _1804;
        float _1814 = fma(_1726, cbSceneParam._m0[_1773].w, fma(_1722, cbSceneParam._m0[_1773].z, fma(_1718, cbSceneParam._m0[_1773].y, _1714 * cbSceneParam._m0[_1773].x))) / _1804;
        float _1862 = (cbSceneParam._m0[33u].x - sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729))) * cbSceneParam._m0[33u].y;
        float _4172 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1869 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 + _1792) / _1804, (_1811 + _1796) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1792) / _1804, (_1796 - _1809) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 - _1809) / _1804, (_1796 - _1811) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 - _1811) / _1804, (_1809 + _1796) / _1804), _1814), 0.0)).x), vec4(0.25)));
        _1876 = 1.0 - (_1869 * cbSceneParam._m0[34u].x);
        _1877 = 1.0 - (_1869 * cbSceneParam._m0[34u].y);
        _1878 = 1.0 - (_1869 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1876 = 1.0;
        _1877 = 1.0;
        _1878 = 1.0;
    }
    float _1942;
    float _1944;
    float _1946;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1930 = fma(_1726, cbSceneParam._m0[63u].w, fma(_1722, cbSceneParam._m0[63u].z, fma(_1718, cbSceneParam._m0[63u].y, _1714 * cbSceneParam._m0[63u].x)));
        float _1931 = fma(_1726, cbSceneParam._m0[60u].w, fma(_1722, cbSceneParam._m0[60u].z, fma(_1718, cbSceneParam._m0[60u].y, _1714 * cbSceneParam._m0[60u].x))) / _1930;
        float _1932 = fma(_1726, cbSceneParam._m0[61u].w, fma(_1722, cbSceneParam._m0[61u].z, fma(_1718, cbSceneParam._m0[61u].y, _1714 * cbSceneParam._m0[61u].x))) / _1930;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1931 >= cbSceneParam._m0[64u].x) && (_1932 >= cbSceneParam._m0[64u].y)) && (_1931 <= cbSceneParam._m0[64u].z)) && (_1932 <= cbSceneParam._m0[64u].w))
        {
            float _2070 = fma(_1726, cbSceneParam._m0[62u].w, fma(_1722, cbSceneParam._m0[62u].z, fma(_1718, cbSceneParam._m0[62u].y, _1714 * cbSceneParam._m0[62u].x))) / _1930;
            float _2074 = isnan(cbSceneParam._m0[41u].w) ? _2070 : (isnan(_2070) ? cbSceneParam._m0[41u].w : max(_2070, cbSceneParam._m0[41u].w));
            float _2117 = (cbSceneParam._m0[33u].x - sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729))) * cbSceneParam._m0[33u].y;
            float _4188 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
            float _2124 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1931, cbSceneParam._m0[33u].w + _1932), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1931, _1932 - cbSceneParam._m0[33u].z), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1931 - cbSceneParam._m0[33u].z, _1932 - cbSceneParam._m0[33u].w), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1931 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1932), _2074), 0.0)).x), vec4(0.25)));
            float _2128 = 1.0 - (_2124 * cbSceneParam._m0[34u].x);
            float _2129 = 1.0 - (_2124 * cbSceneParam._m0[34u].y);
            float _2130 = 1.0 - (_2124 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2129) ? _1877 : (isnan(_1877) ? _2129 : min(_1877, _2129));
            frontier_phi_39_38_ladder_1 = isnan(_2128) ? _1876 : (isnan(_1876) ? _2128 : min(_1876, _2128));
            frontier_phi_39_38_ladder_2 = isnan(_2130) ? _1878 : (isnan(_1878) ? _2130 : min(_1878, _2130));
        }
        else
        {
            frontier_phi_39_38_ladder = _1877;
            frontier_phi_39_38_ladder_1 = _1876;
            frontier_phi_39_38_ladder_2 = _1878;
        }
        _1942 = frontier_phi_39_38_ladder_1;
        _1944 = frontier_phi_39_38_ladder;
        _1946 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1942 = _1876;
        _1944 = _1877;
        _1946 = _1878;
    }
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1953 = _1951.x * 14u;
    uint _1954 = _1953 + 13u;
    float _1961 = _619 + (-1.0);
    float _1966 = (cbLight._m0[_1954].x * _1961) + 1.0;
    float _1967 = (cbLight._m0[_1954].y * _1961) + 1.0;
    float _1968 = (cbLight._m0[_1954].z * _1961) + 1.0;
    float _1969 = (cbLight._m0[_1954].w * _1961) + 1.0;
    uint _1970 = _1953 + 5u;
    float _1976 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1980 = _1953 + 4u;
    float _1989 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1993 = _1953 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_453, _454, _455));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_453, _454, _455));
    float _4224 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4235 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1970].x * _1976) * _2014) + (((cbLight._m0[_1980].x * _1942) * _1989) * _2012);
    float _2022 = ((_1976 * cbLight._m0[_1970].y) * _2014) + (((cbLight._m0[_1980].y * _1944) * _1989) * _2012);
    float _2023 = ((_1976 * cbLight._m0[_1970].z) * _2014) + (((cbLight._m0[_1980].z * _1946) * _1989) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1953 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2029)
    {
        _2131 = _2021;
        _2133 = _2022;
        _2135 = _2023;
    }
    else
    {
        uint _2139 = _1953 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_1953 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4246 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2158 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2021;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2022;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2023;
    }
    bool _2138 = _2027.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2138)
    {
        _2193 = _2131;
        _2195 = _2133;
        _2197 = _2135;
    }
    else
    {
        uint _2355 = _1953 + 7u;
        float _2371 = (dot(vec3(cbLight._m0[_1953 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4262 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2374 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2193 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2131;
        _2195 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2133;
        _2197 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2135;
    }
    uint _2200 = _1953 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _456) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_1953].x + _534;
    float _2216 = cbLight._m0[_1953].y + _535;
    float _2217 = cbLight._m0[_1953].z + _536;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1953].xyz));
    float _4278 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _2229 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2230 = dot(vec3(_453, _454, _455), vec3(_2222, _2223, _2224));
    float _4300 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2222, _2223, _2224));
    float _4311 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2254 = 1.0 - _2214;
    float _2265 = (0.5 / (((_2229 * ((_2228 * _2254) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2254) + _2214) * _2228))) * _2228;
    float _4322 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2281 = _1953 + 9u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _456) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_1993].x + _534;
    float _2295 = cbLight._m0[_1993].y + _535;
    float _2296 = cbLight._m0[_1993].z + _536;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1993].xyz));
    float _4333 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2308 = dot(vec3(_453, _454, _455), vec3(_2301, _2302, _2303));
    float _4344 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2301, _2302, _2303));
    float _4355 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2293 * _2293;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2330 = 1.0 - _2293;
    float _2340 = (0.5 / (((_2229 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2330) + _2293) * _2307))) * _2307;
    float _4366 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    float _2352 = (((_2329 * cbLight._m0[_2281].x) * _2342) * _1976) + ((((cbLight._m0[_2200].x * _1942) * _2253) * _2267) * _1989);
    float _2353 = (((_2329 * cbLight._m0[_2281].y) * _2342) * _1976) + ((((cbLight._m0[_2200].y * _1944) * _2253) * _2267) * _1989);
    float _2354 = (((_2329 * cbLight._m0[_2281].z) * _2342) * _1976) + ((((cbLight._m0[_2200].z * _1946) * _2253) * _2267) * _1989);
    float _2410;
    float _2412;
    float _2414;
    if (_2029)
    {
        _2410 = _2352;
        _2412 = _2353;
        _2414 = _2354;
    }
    else
    {
        uint _2416 = _1953 + 2u;
        uint _2420 = _1953 + 10u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _456) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _534;
        float _2437 = cbLight._m0[_2416].y + _535;
        float _2438 = cbLight._m0[_2416].z + _536;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2416].xyz));
        float _4377 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2450 = dot(vec3(_453, _454, _455), vec3(_2443, _2444, _2445));
        float _4388 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4399 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2472 = 1.0 - _2435;
        float _2482 = (0.5 / (((_2229 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2472) + _2435) * _2449))) * _2449;
        float _4410 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2410 = (((_2471 * cbLight._m0[_2420].x) * _2484) * _2485) + _2352;
        _2412 = (((_2471 * cbLight._m0[_2420].y) * _2484) * _2485) + _2353;
        _2414 = (((_2471 * cbLight._m0[_2420].z) * _2484) * _2485) + _2354;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2138)
    {
        _2516 = _2410;
        _2518 = _2412;
        _2520 = _2414;
    }
    else
    {
        uint _2527 = _1953 + 3u;
        uint _2531 = _1953 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _456) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _534;
        float _2548 = cbLight._m0[_2527].y + _535;
        float _2549 = cbLight._m0[_2527].z + _536;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2527].xyz));
        float _4426 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2561 = dot(vec3(_453, _454, _455), vec3(_2554, _2555, _2556));
        float _4437 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4448 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2583 = 1.0 - _2546;
        float _2593 = (0.5 / (((_2229 * ((_2560 * _2583) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2583) + _2546) * _2560))) * _2560;
        float _4459 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2516 = (((_2582 * cbLight._m0[_2531].x) * _2595) * _2596) + _2410;
        _2518 = (((_2582 * cbLight._m0[_2531].y) * _2595) * _2596) + _2412;
        _2520 = (((_2582 * cbLight._m0[_2531].z) * _2595) * _2596) + _2414;
    }
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_1951.y == 0u)
    {
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.x;
        uint _2629 = uint((float(_2617.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2618))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2618)));
        float _2639 = (log2(_1729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        uint _2643 = uint(isnan(14.0) ? _2640 : (isnan(_2640) ? 14.0 : min(_2640, 14.0)));
        uvec4 _2648 = texelFetch(g_lightClusterGridBuffer, int(((_2643 << 2u) + (_2629 << 6u)) >> 2u));
        uint _2649 = _2648.x;
        uint _2650 = _2617.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2650 >> 4u) & 15u)) + 4294967295u) & _2649) == 0u) || ((_2650 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2896)
                {
                    frontier_phi_73_pred = _2885;
                    frontier_phi_73_pred_1 = _2884;
                    frontier_phi_73_pred_2 = _2883;
                    frontier_phi_73_pred_3 = _2882;
                    frontier_phi_73_pred_4 = _2881;
                    frontier_phi_73_pred_5 = _2880;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2895;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2886 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _1727;
                        float _3092 = _3051.y - _1728;
                        float _3093 = _3051.z - _1729;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_574, _577, _580), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4485 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _1727;
                        float _3127 = (-0.0) - _1728;
                        float _3128 = (-0.0) - _1729;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3142 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3143 = 1.0 - _635;
                        float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                        float _3151 = _3150 * _3150;
                        float _3152 = _3151 * _3151;
                        float _3153 = _3133 + _3098;
                        float _3154 = _3134 + _3099;
                        float _3155 = _3135 + _3100;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3163 = dot(vec3(_574, _577, _580), vec3(_3133, _3134, _3135));
                        float _4501 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3167 = dot(vec3(_574, _577, _580), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                        float _4512 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                        float _3175 = _3111 * _3151;
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3101) + _3176;
                        float _4523 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3180 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3181 = 1.0 - _3151;
                        float _3191 = (0.5 / (((_3180 * ((_3166 * _3181) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3151) * _3166))) * _3180;
                        float _4534 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3202 = (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3174 * _3174) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2955 = (_3122 * _3070.x) + _3028;
                        _2956 = (_3122 * _3070.y) + _3029;
                        _2957 = (_3122 * _3070.z) + _3030;
                        _2952 = (_3202 * _3087.x) + _3025;
                        _2953 = (_3202 * _3087.y) + _3026;
                        _2954 = (_3202 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_73_pred = _2957;
                    frontier_phi_73_pred_1 = _2956;
                    frontier_phi_73_pred_2 = _2955;
                    frontier_phi_73_pred_3 = _2954;
                    frontier_phi_73_pred_4 = _2953;
                    frontier_phi_73_pred_5 = _2952;
                }
                _2739 = frontier_phi_73_pred;
                _2737 = frontier_phi_73_pred_1;
                _2735 = frontier_phi_73_pred_2;
                _2733 = frontier_phi_73_pred_3;
                _2731 = frontier_phi_73_pred_4;
                _2729 = frontier_phi_73_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2729;
                    _2881 = _2731;
                    _2882 = _2733;
                    _2883 = _2735;
                    _2884 = _2737;
                    _2885 = _2739;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2745) & _2649) == 0u)
        {
            _2848 = _2728;
            _2850 = _2730;
            _2852 = _2732;
            _2854 = _2734;
            _2856 = _2736;
            _2858 = _2738;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
            float _2874 = _2873 * _1727;
            float _2875 = _2873 * _1728;
            float _2876 = _2873 * _1729;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _3008 = _2728;
                float _3009 = _2730;
                float _3010 = _2732;
                float _3011 = _2734;
                float _3012 = _2736;
                float _3013 = _2738;
                uint _3014 = _2745;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3024)
                    {
                        frontier_phi_84_pred = _3012;
                        frontier_phi_84_pred_1 = _3011;
                        frontier_phi_84_pred_2 = _3010;
                        frontier_phi_84_pred_3 = _3009;
                        frontier_phi_84_pred_4 = _3008;
                        frontier_phi_84_pred_5 = _3013;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3229 = _3008;
                        float _3230 = _3009;
                        float _3231 = _3010;
                        float _3232 = _3011;
                        float _3233 = _3012;
                        float _3234 = _3013;
                        uint _3235 = _3023;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3305;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3246 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3292 = (_3246 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3246 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3246 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3246 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_1729, _3356.z, fma(_1728, _3356.y, _3356.x * _1727)) + _3356.w;
                            _3369 = !((fma(_1729, _3337.z, fma(_1728, _3337.y, _3337.x * _1727)) + _3337.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3261.x - _1727;
                                float _3397 = _3261.y - _1728;
                                float _3398 = _3261.z - _1729;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3262 * _3262));
                                float _4545 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3414 = sqrt(_3399) * _3277.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_574, _577, _580))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_1729, _3305.z, fma(_1728, _3305.y, _3305.x * _1727)) + _3305.w) / _3368;
                                float _3428 = (fma(_1729, _3321.z, fma(_1728, _3321.y, _3321.x * _1727)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4561 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _635;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3459 = _3405 - _2876;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4572 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3471 = dot(vec3(_574, _577, _580), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4583 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_574, _577, _580), vec3(_3403, _3404, _3405))) + _3480;
                                float _4594 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4605 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3434 * _3277.y;
                                frontier_phi_90_pred_1 = _3434 * _3277.x;
                                frontier_phi_90_pred_2 = _3508 * _3289.z;
                                frontier_phi_90_pred_3 = _3508 * _3289.y;
                                frontier_phi_90_pred_4 = _3508 * _3289.x;
                                frontier_phi_90_pred_5 = _3434 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_90_pred;
                            _3515 = frontier_phi_90_pred_1;
                            _3514 = frontier_phi_90_pred_2;
                            _3513 = frontier_phi_90_pred_3;
                            _3512 = frontier_phi_90_pred_4;
                            _3517 = frontier_phi_90_pred_5;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3221 = _3517 + _3234;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3220;
                        frontier_phi_84_pred_1 = _3219;
                        frontier_phi_84_pred_2 = _3218;
                        frontier_phi_84_pred_3 = _3217;
                        frontier_phi_84_pred_4 = _3216;
                        frontier_phi_84_pred_5 = _3221;
                    }
                    _2857 = frontier_phi_84_pred;
                    _2855 = frontier_phi_84_pred_1;
                    _2853 = frontier_phi_84_pred_2;
                    _2851 = frontier_phi_84_pred_3;
                    _2849 = frontier_phi_84_pred_4;
                    _2859 = frontier_phi_84_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2849;
                        _3009 = _2851;
                        _3010 = _2853;
                        _3011 = _2855;
                        _3012 = _2857;
                        _3013 = _2859;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2859;
                frontier_phi_65_66_ladder_1 = _2855;
                frontier_phi_65_66_ladder_2 = _2857;
                frontier_phi_65_66_ladder_3 = _2851;
                frontier_phi_65_66_ladder_4 = _2849;
                frontier_phi_65_66_ladder_5 = _2853;
            }
            else
            {
                frontier_phi_65_66_ladder = _2738;
                frontier_phi_65_66_ladder_1 = _2734;
                frontier_phi_65_66_ladder_2 = _2736;
                frontier_phi_65_66_ladder_3 = _2730;
                frontier_phi_65_66_ladder_4 = _2728;
                frontier_phi_65_66_ladder_5 = _2732;
            }
            _2848 = frontier_phi_65_66_ladder_4;
            _2850 = frontier_phi_65_66_ladder_3;
            _2852 = frontier_phi_65_66_ladder_5;
            _2854 = frontier_phi_65_66_ladder_1;
            _2856 = frontier_phi_65_66_ladder_2;
            _2858 = frontier_phi_65_66_ladder;
        }
        float _2863 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
        _2661 = (_2863 * _2854) + _2193;
        _2663 = (_2863 * _2856) + _2195;
        _2665 = (_2863 * _2858) + _2197;
        _2667 = ((_2848 * 0.039999999105930328369140625) * _2863) + _2516;
        _2669 = ((_2850 * 0.039999999105930328369140625) * _2863) + _2518;
        _2671 = ((_2852 * 0.039999999105930328369140625) * _2863) + _2520;
    }
    else
    {
        _2661 = _2193;
        _2663 = _2195;
        _2665 = _2197;
        _2667 = _2516;
        _2669 = _2518;
        _2671 = _2520;
    }
    float _4621 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4632 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4643 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2688 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2661 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _619))) + ((_2667 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2663 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _619))) + ((_2669 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2690 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2665 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _619))) + ((_2671 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    uint _2691 = _593 + 6u;
    float _2699 = _554 / cbSceneParam._m0[86u].x;
    float _2700 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2714 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2716 = _2714.x;
    float _2717 = _2714.y;
    float _2718 = _2714.z;
    float _2719 = _2714.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2754 = _2753 / _475;
        float _2765 = _2754 * _527;
        float _2766 = _528 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2768 = _2754 * _529;
        float _2770 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2766;
        float _2778 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2767 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2911 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2965 = ((abs(_2778 / _2767) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2788 * _2920) - exp2(_2788 * _2921)) * _2909))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2719);
        _2790 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2716;
        _2792 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2717;
        _2794 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2718;
        _2796 = _2976 * _2719;
    }
    else
    {
        _2790 = _2716;
        _2792 = _2717;
        _2794 = _2718;
        _2796 = _2719;
    }
    bool _3003;
    vec4 _2806;
    vec4 _2828;
    float _2830;
    float _2834;
    float _2835;
    float _2836;
    float _2837;
    bool _2847;
    for (;;)
    {
        _2806 = cbMatDynParam._m0[0u];
        float _2808 = roundEven(_2806.y);
        bool _2809 = _2808 == 3.0;
        float _2810 = log2(_2796);
        float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * _2688;
        float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * _2689;
        float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * _2690;
        float _2826 = _543 + (-0.5);
        _2828 = cbMtdParam._m0[1u];
        _2830 = _2828.y * _2826;
        float _2833 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2834 = _2833 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
        _2835 = _2833 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
        _2836 = _2833 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
        _2837 = _2826 * 0.999000012874603271484375;
        _2847 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2847)
        {
            if ((cbInstanceData._m0[_593 + 7u].x + _2837) < 0.5)
            {
                _3003 = true;
                break;
            }
        }
        uint _2944 = _595 + uint(_2806.w);
        if ((cbInstanceData._m0[_2944].w < 1.0) && ((cbInstanceData._m0[_2944].w + _2837) < 0.5))
        {
            _3003 = true;
            break;
        }
        if ((_2830 + 1.0) < _2828.x)
        {
            _3003 = true;
            break;
        }
        _3003 = false;
        break;
    }
    float _3207;
    if (_3003)
    {
        discard_state = true;
        _3207 = 0.0;
    }
    else
    {
        _3207 = cbInstanceData._m0[_2691].w;
    }
    SV_Target.x = _2834;
    SV_Target.y = _2835;
    SV_Target.z = _2836;
    SV_Target.w = _3207;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2691].w;
    discard_exit();
}


