#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3383;
float _3384;
float _3385;
float _3386;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _257 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3395 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _258 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    vec4 _270 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _272 = _270.x;
    float _273 = _270.y;
    float _274 = _270.z;
    vec4 _286 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _297 = ((_286.x - _272) * _258) + _272;
    float _298 = ((_286.y - _273) * _258) + _273;
    float _299 = ((_286.z - _274) * _258) + _274;
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _314 = _312.x;
    float _315 = _312.y;
    float _316 = _312.z;
    float _324 = exp2(log2(_314) * 0.453999996185302734375);
    float _325 = exp2(log2(_315) * 0.453999996185302734375);
    float _326 = exp2(log2(_316) * 0.453999996185302734375);
    float _341 = (((_324 + (-0.5)) * (_314 - _297)) * cbMtdParam._m0[9u].z) + _297;
    float _342 = (((_325 + (-0.5)) * (_315 - _298)) * cbMtdParam._m0[9u].z) + _298;
    float _343 = (((_326 + (-0.5)) * (_316 - _299)) * cbMtdParam._m0[9u].z) + _299;
    float _357 = ((cbMtdParam._m0[9u].z * (0.5 - _324)) * (_314 - _341)) + _341;
    float _358 = ((cbMtdParam._m0[9u].z * (0.5 - _325)) * (_315 - _342)) + _342;
    float _359 = ((cbMtdParam._m0[9u].z * (0.5 - _326)) * (_316 - _343)) + _343;
    vec4 _371 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _373 = _371.x;
    float _374 = _371.y;
    float _375 = _371.z;
    vec4 _387 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _400 = ((_387.z - _375) * _258) + _375;
    float _403 = ((((_387.x - _373) * _258) + _373) * 2.0) + (-1.0);
    float _404 = ((((_387.y - _374) * _258) + _374) * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))));
    vec4 _424 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _434 = (((_424.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _403;
    float _435 = (((_424.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _404;
    float _438 = fma(_410, _222, fma(_435, _214 * TANGENT.x, (_200 * _192) * _434));
    float _441 = fma(_410, _223, fma(_435, _214 * TANGENT.y, (_200 * _193) * _434));
    float _444 = fma(_410, _224, fma(_435, _214 * TANGENT.z, (_200 * _194) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3417 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _452 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3439 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3450 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _523 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _513);
    float _524 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _513);
    float _525 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _513);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _530 = _523 * _529;
    float _531 = _524 * _529;
    float _532 = _525 * _529;
    vec4 _537 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _539 = _537.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _695 = sqrt(((_523 * _523) + (_524 * _524)) + (_525 * _525));
        float _701 = (cbMatDynParam._m0[5u].x * _695) + cbMatDynParam._m0[5u].y;
        float _3461 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _706 = (cbMatDynParam._m0[5u].z * _695) + cbMatDynParam._m0[5u].w;
        float _3472 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) - _702)) + _702) < ((_539 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _573 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _576 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _589 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3483 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _615 = _612.x * TEXCOORD_3.w;
    float _616 = dot(vec3(_449, _450, _451), vec3(_530, _531, _532));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _449) - _530;
    float _624 = (_619 * _450) - _531;
    float _625 = (_619 * _451) - _532;
    float _629 = abs(dot(vec3(_530, _531, _532), vec3(_449, _450, _451)));
    float _3516 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_452);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_684, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676));
        float _744 = fma(_684, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676));
        float _748 = fma(_684, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676));
        float _771 = _676 + _449;
        float _772 = _680 + _450;
        float _773 = _684 + _451;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _740;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _744;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _748;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_449, _450, _451), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3564 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_449, _450, _451), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3597 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_449, _450, _451), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3630 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_684, cbModelParam._m0[30u].z, fma(_680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _676));
        float _1061 = fma(_684, cbModelParam._m0[31u].z, fma(_680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _676));
        float _1065 = fma(_684, cbModelParam._m0[32u].z, fma(_680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _676));
        float _1088 = _676 + _449;
        float _1089 = _680 + _450;
        float _1090 = _684 + _451;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_449, _450, _451), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3693 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_449, _450, _451), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3726 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_449, _450, _451), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3759 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = _1014;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1027)) + _1027;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _623 * 0.5;
    float _1395 = _624 * 0.5;
    float _1396 = _625 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_684, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_684, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_684, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1526 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1529 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1557 = frontier_phi_19_17_ladder;
        }
        float _1762;
        if (_1526 > 0.0)
        {
            _1762 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1762 = frontier_phi_28_24_ladder;
        }
        float _2005;
        if (_1529 > 0.0)
        {
            _2005 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2005 = frontier_phi_40_35_ladder;
        }
        float _2007 = isnan(_1762) ? _1557 : (isnan(_1557) ? _1762 : min(_1557, _1762));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1523) + _1512;
        float _2013 = (_2008 * _1526) + _1516;
        float _2014 = (_2008 * _1529) + _1520;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2017 = (-1.0) - _2015;
        float _2019 = _2015 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2014 > _2019) || ((_2014 < _2017) || ((_2013 > _2019) || ((_2013 < _2017) || ((_2012 < _2017) || (_2012 > _2019))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2014, cbModelParam._m0[9u].z, fma(_2013, cbModelParam._m0[9u].y, _2012 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2014, cbModelParam._m0[10u].z, fma(_2013, cbModelParam._m0[10u].y, _2012 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2014, cbModelParam._m0[11u].z, fma(_2013, cbModelParam._m0[11u].y, _2012 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_18_40_ladder = _2138.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2138.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2138.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_18_40_ladder_2;
        _1547 = frontier_phi_18_40_ladder_1;
        _1549 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1463);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_684, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_684, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_684, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1625 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1628 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1767;
        if (_1622 > 0.0)
        {
            _1767 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1767 = frontier_phi_30_26_ladder;
        }
        float _2032;
        if (_1625 > 0.0)
        {
            _2032 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2032 = frontier_phi_42_37_ladder;
        }
        float _2237;
        if (_1628 > 0.0)
        {
            _2237 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2237 = frontier_phi_51_48_ladder;
        }
        float _2239 = isnan(_2032) ? _1767 : (isnan(_1767) ? _2032 : min(_1767, _2032));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1622) + _1611;
        float _2245 = (_2240 * _1625) + _1615;
        float _2246 = (_2240 * _1628) + _1619;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_27_51_ladder = _2444.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2444.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2444.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_27_51_ladder_2;
        _1649 = frontier_phi_27_51_ladder_1;
        _1651 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1554);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_644 * _631)) * _615;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1545)) + _1545);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    uvec4 _1685 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1687 = _1685.x * 14u;
    uint _1688 = _1687 + 13u;
    float _1695 = _615 + (-1.0);
    float _1700 = (cbLight._m0[_1688].x * _1695) + 1.0;
    float _1701 = (cbLight._m0[_1688].y * _1695) + 1.0;
    float _1702 = (cbLight._m0[_1688].z * _1695) + 1.0;
    float _1703 = (cbLight._m0[_1688].w * _1695) + 1.0;
    uint _1704 = _1687 + 5u;
    float _1710 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1714 = _1687 + 4u;
    float _1720 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1724 = _1687 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_449, _450, _451));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_449, _450, _451));
    float _3895 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3906 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1704].x * _1710) * _1745) + ((cbLight._m0[_1714].x * _1720) * _1743);
    float _1753 = ((_1710 * cbLight._m0[_1704].y) * _1745) + ((_1720 * cbLight._m0[_1714].y) * _1743);
    float _1754 = ((_1710 * cbLight._m0[_1704].z) * _1745) + ((_1720 * cbLight._m0[_1714].z) * _1743);
    uvec4 _1759 = floatBitsToUint(cbLight._m0[_1687 + 12u]);
    bool _1761 = _1759.x == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1761)
    {
        _1772 = _1752;
        _1774 = _1753;
        _1776 = _1754;
    }
    else
    {
        uint _1780 = _1687 + 6u;
        float _1796 = (dot(vec3(cbLight._m0[_1687 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1797 = _1796 * _1796;
        float _3917 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1799 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1772 = (((cbLight._m0[_1780].x * 0.3183098733425140380859375) * _1798) * _1799) + _1752;
        _1774 = (((cbLight._m0[_1780].y * 0.3183098733425140380859375) * _1798) * _1799) + _1753;
        _1776 = (((cbLight._m0[_1780].z * 0.3183098733425140380859375) * _1798) * _1799) + _1754;
    }
    bool _1779 = _1759.y == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1779)
    {
        _1817 = _1772;
        _1819 = _1774;
        _1821 = _1776;
    }
    else
    {
        uint _1976 = _1687 + 7u;
        float _1992 = (dot(vec3(cbLight._m0[_1687 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _3933 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1995 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1817 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1772;
        _1819 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1774;
        _1821 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1776;
    }
    uint _1824 = _1687 + 8u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _452) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1687].x + _530;
    float _1840 = cbLight._m0[_1687].y + _531;
    float _1841 = cbLight._m0[_1687].z + _532;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1687].xyz));
    float _3949 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1853 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1854 = dot(vec3(_449, _450, _451), vec3(_1846, _1847, _1848));
    float _3971 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1846, _1847, _1848));
    float _3982 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1838 * _1838;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1877 = (exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1878 = 1.0 - _1838;
    float _1889 = (0.5 / (((_1853 * ((_1852 * _1878) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1878) + _1838) * _1852))) * _1852;
    float _3993 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    uint _1902 = _1687 + 9u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _452) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1724].x + _530;
    float _1916 = cbLight._m0[_1724].y + _531;
    float _1917 = cbLight._m0[_1724].z + _532;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1724].xyz));
    float _4004 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1929 = dot(vec3(_449, _450, _451), vec3(_1922, _1923, _1924));
    float _4015 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1922, _1923, _1924));
    float _4026 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1914 * _1914;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1950 = (exp2(log2(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1951 = 1.0 - _1914;
    float _1961 = (0.5 / (((_1853 * ((_1928 * _1951) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1951) + _1914) * _1928))) * _1928;
    float _4037 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    float _1973 = (((_1950 * cbLight._m0[_1902].x) * _1963) * _1710) + (((_1877 * cbLight._m0[_1824].x) * _1891) * _1720);
    float _1974 = (((_1950 * cbLight._m0[_1902].y) * _1963) * _1710) + (((_1877 * cbLight._m0[_1824].y) * _1891) * _1720);
    float _1975 = (((_1950 * cbLight._m0[_1902].z) * _1963) * _1710) + (((_1877 * cbLight._m0[_1824].z) * _1891) * _1720);
    float _2037;
    float _2039;
    float _2041;
    if (_1761)
    {
        _2037 = _1973;
        _2039 = _1974;
        _2041 = _1975;
    }
    else
    {
        uint _2043 = _1687 + 2u;
        uint _2047 = _1687 + 10u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _452) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _530;
        float _2064 = cbLight._m0[_2043].y + _531;
        float _2065 = cbLight._m0[_2043].z + _532;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2043].xyz));
        float _4048 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2077 = dot(vec3(_449, _450, _451), vec3(_2070, _2071, _2072));
        float _4059 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _4070 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2099 = 1.0 - _2062;
        float _2109 = (0.5 / (((_1853 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2099) + _2062) * _2076))) * _2076;
        float _4081 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2037 = (((_2098 * cbLight._m0[_2047].x) * _2111) * _2112) + _1973;
        _2039 = (((_2098 * cbLight._m0[_2047].y) * _2111) * _2112) + _1974;
        _2041 = (((_2098 * cbLight._m0[_2047].z) * _2111) * _2112) + _1975;
    }
    float _2147;
    float _2149;
    float _2151;
    if (_1779)
    {
        _2147 = _2037;
        _2149 = _2039;
        _2151 = _2041;
    }
    else
    {
        uint _2158 = _1687 + 3u;
        uint _2162 = _1687 + 11u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _452) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _530;
        float _2179 = cbLight._m0[_2158].y + _531;
        float _2180 = cbLight._m0[_2158].z + _532;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2158].xyz));
        float _4097 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2192 = dot(vec3(_449, _450, _451), vec3(_2185, _2186, _2187));
        float _4108 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4119 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2213 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2214 = 1.0 - _2177;
        float _2224 = (0.5 / (((_1853 * ((_2191 * _2214) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2214) + _2177) * _2191))) * _2191;
        float _4130 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2147 = (((_2213 * cbLight._m0[_2162].x) * _2226) * _2227) + _2037;
        _2149 = (((_2213 * cbLight._m0[_2162].y) * _2226) * _2227) + _2039;
        _2151 = (((_2213 * cbLight._m0[_2162].z) * _2226) * _2227) + _2041;
    }
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1685.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
        }
        else
        {
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            uint _2607 = 0u;
            uint _2616;
            bool _2617;
            for (;;)
            {
                _2616 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                _2617 = _2616 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2617)
                {
                    frontier_phi_68_pred = _2603;
                    frontier_phi_68_pred_1 = _2606;
                    frontier_phi_68_pred_2 = _2605;
                    frontier_phi_68_pred_3 = _2604;
                    frontier_phi_68_pred_4 = _2602;
                    frontier_phi_68_pred_5 = _2601;
                }
                else
                {
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    uint _2752;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2616;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    for (;;)
                    {
                        uint _2756 = uint(findLSB(_2752)) + (_2607 << 5u);
                        uint _2753 = (_2752 + 4294967295u) & _2752;
                        uint _2758 = _2756 * 48u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2778 = (_2756 * 48u) + 4u;
                        vec4 _2791 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 3u)).x));
                        uint _2797 = (_2756 * 48u) + 8u;
                        vec3 _2808 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2797)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 2u)).x));
                        float _2812 = _2772.x - _2303;
                        float _2813 = _2772.y - _2304;
                        float _2814 = _2772.z - _2305;
                        float _2815 = dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814));
                        float _2818 = inversesqrt(_2815);
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2822 = dot(vec3(_570, _573, _576), vec3(_2819, _2820, _2821));
                        float _2827 = 1.0 - (_2815 * _2772.w);
                        float _4156 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2828 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2829 = sqrt(_2815) * _2791.w;
                        float _2832 = 1.39999997615814208984375 / (_2829 + 1.39999997615814208984375);
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2822) + _2833;
                        float _2839 = _2829 * _2829;
                        float _2843 = ((isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))) * _2828) / ((_2839 * 0.699999988079071044921875) + 1.0);
                        float _2847 = (-0.0) - _2303;
                        float _2848 = (-0.0) - _2304;
                        float _2849 = (-0.0) - _2305;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2864 = exp2(log2(1.0 / ((_2839 * 3.5) + 5.0)) * 0.25);
                        float _2865 = 1.0 - _631;
                        float _2872 = sqrt(1.0 - ((1.0 - (_2865 * _2865)) * (1.0 - (_2864 * _2864))));
                        float _2873 = _2872 * _2872;
                        float _2874 = _2873 * _2873;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2877 = _2856 + _2821;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2885 = dot(vec3(_570, _573, _576), vec3(_2854, _2855, _2856));
                        float _4172 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2889 = dot(vec3(_570, _573, _576), vec3(_2881 * _2875, _2881 * _2876, _2881 * _2877));
                        float _4183 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2892 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2896 = ((_2892 * _2892) * (_2874 + (-1.0))) + 1.0;
                        float _2897 = _2832 * _2873;
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2822) + _2898;
                        float _4194 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2903 = 1.0 - _2873;
                        float _2913 = (0.5 / (((_2902 * ((_2888 * _2903) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2902 * _2903) + _2873) * _2888))) * _2902;
                        float _4205 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2924 = (((_2874 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_2896 * _2896) * ((_2839 * 2.1991131305694580078125) + 3.141590118408203125))) * _2828;
                        _2676 = (_2843 * _2791.x) + _2749;
                        _2677 = (_2843 * _2791.y) + _2750;
                        _2678 = (_2843 * _2791.z) + _2751;
                        _2673 = (_2924 * _2808.x) + _2746;
                        _2674 = (_2924 * _2808.y) + _2747;
                        _2675 = (_2924 * _2808.z) + _2748;
                        if (_2753 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2753;
                        }
                    }
                    frontier_phi_68_pred = _2675;
                    frontier_phi_68_pred_1 = _2678;
                    frontier_phi_68_pred_2 = _2677;
                    frontier_phi_68_pred_3 = _2676;
                    frontier_phi_68_pred_4 = _2674;
                    frontier_phi_68_pred_5 = _2673;
                }
                _2454 = frontier_phi_68_pred;
                _2460 = frontier_phi_68_pred_1;
                _2458 = frontier_phi_68_pred_2;
                _2456 = frontier_phi_68_pred_3;
                _2452 = frontier_phi_68_pred_4;
                _2450 = frontier_phi_68_pred_5;
                uint _2608 = _2607 + 1u;
                if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2601 = _2450;
                    _2602 = _2452;
                    _2603 = _2454;
                    _2604 = _2456;
                    _2605 = _2458;
                    _2606 = _2460;
                    _2607 = _2608;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
        }
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.z;
        uint _2466 = (_2464 >> 8u) & 15u;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((4294967295u << _2466) & _2349) == 0u)
        {
            _2569 = _2449;
            _2571 = _2451;
            _2573 = _2453;
            _2575 = _2455;
            _2577 = _2457;
            _2579 = _2459;
        }
        else
        {
            float _2594 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2595 = _2594 * _2303;
            float _2596 = _2594 * _2304;
            float _2597 = _2594 * _2305;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2466 < ((_2464 >> 12u) & 15u))
            {
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2729 = _2449;
                float _2730 = _2451;
                float _2731 = _2453;
                float _2732 = _2455;
                float _2733 = _2457;
                float _2734 = _2459;
                uint _2735 = _2466;
                uint _2744;
                bool _2745;
                for (;;)
                {
                    _2744 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                    _2745 = _2744 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2745)
                    {
                        frontier_phi_79_pred = _2734;
                        frontier_phi_79_pred_1 = _2733;
                        frontier_phi_79_pred_2 = _2732;
                        frontier_phi_79_pred_3 = _2731;
                        frontier_phi_79_pred_4 = _2730;
                        frontier_phi_79_pred_5 = _2729;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        uint _2957 = _2744;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2968 = ((_2735 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2968 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2968 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2968 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2305, _3078.z, fma(_2304, _3078.y, _3078.x * _2303)) + _3078.w;
                            _3091 = !((fma(_2305, _3059.z, fma(_2304, _3059.y, _3059.x * _2303)) + _3059.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2983.x - _2303;
                                float _3119 = _2983.y - _2304;
                                float _3120 = _2983.z - _2305;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2984 * _2984));
                                float _4216 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3136 = sqrt(_3121) * _2999.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_570, _573, _576))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2305, _3027.z, fma(_2304, _3027.y, _3027.x * _2303)) + _3027.w) / _3090;
                                float _3150 = (fma(_2305, _3043.z, fma(_2304, _3043.y, _3043.x * _2303)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4232 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _631;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2595;
                                float _3180 = _3126 - _2596;
                                float _3181 = _3127 - _2597;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2595, (-0.0) - _2596, (-0.0) - _2597));
                                float _4243 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3193 = dot(vec3(_570, _573, _576), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4254 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_570, _573, _576), vec3(_3125, _3126, _3127))) + _3202;
                                float _4265 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4276 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3156 * _2999.z;
                                frontier_phi_85_pred_1 = _3156 * _2999.y;
                                frontier_phi_85_pred_2 = _3156 * _2999.x;
                                frontier_phi_85_pred_3 = _3230 * _3011.z;
                                frontier_phi_85_pred_4 = _3230 * _3011.y;
                                frontier_phi_85_pred_5 = _3230 * _3011.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3239 = frontier_phi_85_pred;
                            _3238 = frontier_phi_85_pred_1;
                            _3237 = frontier_phi_85_pred_2;
                            _3236 = frontier_phi_85_pred_3;
                            _3235 = frontier_phi_85_pred_4;
                            _3234 = frontier_phi_85_pred_5;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2943;
                        frontier_phi_79_pred_1 = _2942;
                        frontier_phi_79_pred_2 = _2941;
                        frontier_phi_79_pred_3 = _2940;
                        frontier_phi_79_pred_4 = _2939;
                        frontier_phi_79_pred_5 = _2938;
                    }
                    _2580 = frontier_phi_79_pred;
                    _2578 = frontier_phi_79_pred_1;
                    _2576 = frontier_phi_79_pred_2;
                    _2574 = frontier_phi_79_pred_3;
                    _2572 = frontier_phi_79_pred_4;
                    _2570 = frontier_phi_79_pred_5;
                    uint _2736 = _2735 + 1u;
                    if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2729 = _2570;
                        _2730 = _2572;
                        _2731 = _2574;
                        _2732 = _2576;
                        _2733 = _2578;
                        _2734 = _2580;
                        _2735 = _2736;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2576;
                frontier_phi_60_61_ladder_1 = _2580;
                frontier_phi_60_61_ladder_2 = _2578;
                frontier_phi_60_61_ladder_3 = _2574;
                frontier_phi_60_61_ladder_4 = _2572;
                frontier_phi_60_61_ladder_5 = _2570;
            }
            else
            {
                frontier_phi_60_61_ladder = _2455;
                frontier_phi_60_61_ladder_1 = _2459;
                frontier_phi_60_61_ladder_2 = _2457;
                frontier_phi_60_61_ladder_3 = _2453;
                frontier_phi_60_61_ladder_4 = _2451;
                frontier_phi_60_61_ladder_5 = _2449;
            }
            _2569 = frontier_phi_60_61_ladder_5;
            _2571 = frontier_phi_60_61_ladder_4;
            _2573 = frontier_phi_60_61_ladder_3;
            _2575 = frontier_phi_60_61_ladder;
            _2577 = frontier_phi_60_61_ladder_2;
            _2579 = frontier_phi_60_61_ladder_1;
        }
        float _2584 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2361 = (_2584 * _2575) + _1817;
        _2363 = (_2584 * _2577) + _1819;
        _2365 = (_2584 * _2579) + _1821;
        _2367 = ((_2569 * 0.039999999105930328369140625) * _2584) + _2147;
        _2369 = ((_2571 * 0.039999999105930328369140625) * _2584) + _2149;
        _2371 = ((_2573 * 0.039999999105930328369140625) * _2584) + _2151;
    }
    else
    {
        _2361 = _1817;
        _2363 = _1819;
        _2365 = _1821;
        _2367 = _2147;
        _2369 = _2149;
        _2371 = _2151;
    }
    float _4292 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4303 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4314 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2388 = ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2361 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _615))) + ((_2367 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2363 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _615))) + ((_2369 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _2390 = ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2365 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _615))) + ((_2371 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    uint _2391 = _589 + 6u;
    float _2399 = _550 / cbSceneParam._m0[86u].x;
    float _2400 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2474 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2475 = _2474 / _471;
        float _2486 = _2475 * _523;
        float _2487 = _524 * _2475;
        float _2488 = (-0.0) - _2487;
        float _2489 = _2475 * _525;
        float _2491 = (cbSceneParam._m0[77u].w * _2488) / _2474;
        float _2492 = _2491 + cbSceneParam._m0[79u].w;
        float _2493 = cbSceneParam._m0[79u].w - _2487;
        float _2499 = sqrt(((_2486 * _2486) + (_2487 * _2487)) + (_2489 * _2489));
        float _2502 = (1.0 - (cbSceneParam._m0[77u].w / _2474)) * _2499;
        float _2507 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2509 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2686;
        if (abs((_2488 - _2491) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2686 = ((((_2492 > 0.0) ? exp2(_2507 * _2492) : (2.0 - exp2(_2509 * _2492))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2502;
        }
        else
        {
            float _2630 = 1.0 / cbSceneParam._m0[80u].x;
            float _2631 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : max(_2492, _2493));
            float _2632 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : min(_2492, _2493));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            _2686 = ((abs(_2499 / _2488) * cbSceneParam._m0[80u].y) * ((((_2641 - _2642) * 2.0) - ((exp2(_2507 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)))) - exp2(_2507 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))))) * _2630)) - ((exp2(_2509 * _2641) - exp2(_2509 * _2642)) * _2630))) + (_2502 * cbSceneParam._m0[80u].z);
        }
        vec4 _2688 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2697 = exp2((_2686 * (-1.44269502162933349609375)) * (1.0 - _2688.w));
        float _2698 = log2(_2697);
        float _2714 = log2(_2419);
        _2511 = (exp2(_2714 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].x)) * _2688.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2513 = (exp2(_2714 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].y)) * _2688.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2515 = (exp2(_2714 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].z)) * _2688.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2517 = _2697 * _2419;
    }
    else
    {
        _2511 = _2416;
        _2513 = _2417;
        _2515 = _2418;
        _2517 = _2419;
    }
    bool _2724;
    vec4 _2527;
    vec4 _2549;
    float _2551;
    float _2555;
    float _2556;
    float _2557;
    float _2558;
    bool _2568;
    for (;;)
    {
        _2527 = cbMatDynParam._m0[0u];
        float _2529 = roundEven(_2527.y);
        bool _2530 = _2529 == 3.0;
        float _2531 = log2(_2517);
        float _2538 = exp2(_2531 * cbSceneParam._m0[78u].x) * _2388;
        float _2539 = exp2(_2531 * cbSceneParam._m0[78u].y) * _2389;
        float _2540 = exp2(_2531 * cbSceneParam._m0[78u].z) * _2390;
        float _2547 = _539 + (-0.5);
        _2549 = cbMtdParam._m0[1u];
        _2551 = _2549.y * _2547;
        float _2554 = (_2529 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2555 = _2554 * (_2530 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2511)));
        _2556 = _2554 * (_2530 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2513)));
        _2557 = _2554 * (_2530 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2515)));
        _2558 = _2547 * 0.999000012874603271484375;
        _2568 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2568)
        {
            if ((cbInstanceData._m0[_589 + 7u].x + _2558) < 0.5)
            {
                _2724 = true;
                break;
            }
        }
        uint _2665 = _591 + uint(_2527.w);
        if ((cbInstanceData._m0[_2665].w < 1.0) && ((cbInstanceData._m0[_2665].w + _2558) < 0.5))
        {
            _2724 = true;
            break;
        }
        if ((_2551 + 1.0) < _2549.x)
        {
            _2724 = true;
            break;
        }
        _2724 = false;
        break;
    }
    float _2929;
    if (_2724)
    {
        discard_state = true;
        _2929 = 0.0;
    }
    else
    {
        _2929 = cbInstanceData._m0[_2391].w;
    }
    SV_Target.x = _2555;
    SV_Target.y = _2556;
    SV_Target.z = _2557;
    SV_Target.w = _2929;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
    discard_exit();
}


