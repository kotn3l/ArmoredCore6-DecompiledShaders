#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _971;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    float _255 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3310 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _256 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    vec4 _268 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _270 = _268.x;
    float _271 = _268.y;
    float _272 = _268.z;
    vec4 _284 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _295 = ((_284.x - _270) * _256) + _270;
    float _296 = ((_284.y - _271) * _256) + _271;
    float _297 = ((_284.z - _272) * _256) + _272;
    vec4 _310 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _312 = _310.x;
    float _313 = _310.y;
    float _314 = _310.z;
    float _322 = exp2(log2(_312) * 0.453999996185302734375);
    float _323 = exp2(log2(_313) * 0.453999996185302734375);
    float _324 = exp2(log2(_314) * 0.453999996185302734375);
    float _339 = (((_322 + (-0.5)) * (_312 - _295)) * cbMtdParam._m0[9u].z) + _295;
    float _340 = (((_323 + (-0.5)) * (_313 - _296)) * cbMtdParam._m0[9u].z) + _296;
    float _341 = (((_324 + (-0.5)) * (_314 - _297)) * cbMtdParam._m0[9u].z) + _297;
    float _355 = ((cbMtdParam._m0[9u].z * (0.5 - _322)) * (_312 - _339)) + _339;
    float _356 = ((cbMtdParam._m0[9u].z * (0.5 - _323)) * (_313 - _340)) + _340;
    float _357 = ((cbMtdParam._m0[9u].z * (0.5 - _324)) * (_314 - _341)) + _341;
    vec4 _369 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _371 = _369.x;
    float _372 = _369.y;
    float _373 = _369.z;
    vec4 _385 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _398 = ((_385.z - _373) * _256) + _373;
    float _401 = ((((_385.x - _371) * _256) + _371) * 2.0) + (-1.0);
    float _402 = ((((_385.y - _372) * _256) + _372) * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3321 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))));
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb2_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _432 = (((_422.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _401;
    float _433 = (((_422.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y) + _402;
    float _436 = fma(_408, _220, fma(_433, _212 * TANGENT.x, (_198 * _190) * _432));
    float _439 = fma(_408, _221, fma(_433, _212 * TANGENT.y, (_198 * _191) * _432));
    float _442 = fma(_408, _222, fma(_433, _212 * TANGENT.z, (_198 * _192) * _432));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _3332 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _450 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3354 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3365 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _469 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_449, cbSceneParam._m0[5u].z, fma(_448, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _447));
    float _559 = fma(_449, cbSceneParam._m0[6u].z, fma(_448, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _447));
    float _562 = fma(_449, cbSceneParam._m0[7u].z, fma(_448, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _447));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = (_575 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3376 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _601 = _598.x * TEXCOORD_3.w;
    float _602 = dot(vec3(_447, _448, _449), vec3(_528, _529, _530));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _447) - _528;
    float _610 = (_605 * _448) - _529;
    float _611 = (_605 * _449) - _530;
    float _615 = abs(dot(vec3(_528, _529, _530), vec3(_447, _448, _449)));
    float _3409 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_450);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _970;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _701 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _705 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _728 = _662 + _447;
        float _729 = _666 + _448;
        float _730 = _670 + _449;
        float _740 = fma(_730, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728)) - _697;
        float _741 = fma(_730, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728)) - _701;
        float _742 = fma(_730, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728)) - _705;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _759 = ((_746 * _740) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_746 * _741) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_746 * _742) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        float _798 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_764.x + (-0.5));
        float _800 = _798 * (_764.y + (-0.5));
        float _801 = _798 * (_764.z + (-0.5));
        float _808 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_771.x + (-0.5));
        float _810 = _808 * (_771.y + (-0.5));
        float _811 = _808 * (_771.z + (-0.5));
        float _818 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_778.x + (-0.5));
        float _820 = _818 * (_778.y + (-0.5));
        float _821 = _818 * (_778.z + (-0.5));
        float _828 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_785.x + (-0.5));
        float _830 = _828 * (_785.y + (-0.5));
        float _831 = _828 * (_785.z + (-0.5));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = _799 * 0.5;
        float _836 = _809 * 0.5;
        float _837 = _819 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _852 = (dot(vec3(_447, _448, _449), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _862 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3457 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_864 + 1.0))) + _869) * _832;
        float _879 = _800 * 0.5;
        float _880 = _810 * 0.5;
        float _881 = _820 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_447, _448, _449), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3490 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_906 + 1.0))) + _911) * _833;
        float _921 = _801 * 0.5;
        float _922 = _811 * 0.5;
        float _923 = _821 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_447, _448, _449), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3523 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_948 + 1.0))) + _953) * _834;
        _970 = _801;
        _972 = _800;
        _973 = _799;
        _974 = _811;
        _975 = _810;
        _976 = _809;
        _977 = _821;
        _978 = _820;
        _979 = _819;
        _980 = _834;
        _981 = _833;
        _982 = _832;
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
    }
    else
    {
        _970 = _971;
        _972 = _971;
        _973 = _971;
        _974 = _971;
        _975 = _971;
        _976 = _971;
        _977 = _971;
        _978 = _971;
        _979 = _971;
        _980 = _971;
        _981 = _971;
        _982 = _971;
        _983 = 0.0;
        _984 = 0.0;
        _985 = 0.0;
    }
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1011 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1015 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1019 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1042 = _662 + _447;
        float _1043 = _666 + _448;
        float _1044 = _670 + _449;
        float _1054 = fma(_1044, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1011 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1015 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[35u].z) + ((((((_1019 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1110 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1077.x + (-0.5));
        float _1112 = _1110 * (_1077.y + (-0.5));
        float _1113 = _1110 * (_1077.z + (-0.5));
        float _1120 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1084.x + (-0.5));
        float _1122 = _1120 * (_1084.y + (-0.5));
        float _1123 = _1120 * (_1084.z + (-0.5));
        float _1130 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1091.x + (-0.5));
        float _1132 = _1130 * (_1091.y + (-0.5));
        float _1133 = _1130 * (_1091.z + (-0.5));
        float _1140 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1098.x + (-0.5));
        float _1142 = _1140 * (_1098.y + (-0.5));
        float _1143 = _1140 * (_1098.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_447, _448, _449), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3586 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1174 + 1.0))) + _1179) * _1144;
        float _1189 = _1112 * 0.5;
        float _1190 = _1122 * 0.5;
        float _1191 = _1132 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_447, _448, _449), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3619 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1216 + 1.0))) + _1221) * _1145;
        float _1231 = _1113 * 0.5;
        float _1232 = _1123 * 0.5;
        float _1233 = _1133 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_447, _448, _449), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3652 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1258 + 1.0))) + _1263) * _1146;
        _1280 = _1113;
        _1281 = _1112;
        _1282 = _1111;
        _1283 = _1123;
        _1284 = _1122;
        _1285 = _1121;
        _1286 = _1133;
        _1287 = _1132;
        _1288 = _1131;
        _1289 = _1146;
        _1290 = _1145;
        _1291 = _1144;
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _971;
        _1281 = _971;
        _1282 = _971;
        _1283 = _971;
        _1284 = _971;
        _1285 = _971;
        _1286 = _971;
        _1287 = _971;
        _1288 = _971;
        _1289 = _971;
        _1290 = _971;
        _1291 = _971;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1327 = fma(_1306, cbSceneParam._m0[89u].z, fma(_1305, cbSceneParam._m0[89u].y, _1304 * cbSceneParam._m0[89u].x));
    float _1330 = fma(_1306, cbSceneParam._m0[90u].z, fma(_1305, cbSceneParam._m0[90u].y, _1304 * cbSceneParam._m0[90u].x));
    float _1333 = fma(_1306, cbSceneParam._m0[91u].z, fma(_1305, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1304));
    float _1348 = _609 * 0.5;
    float _1349 = _610 * 0.5;
    float _1350 = _611 * 0.5;
    float _1351 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1354 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1357 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1391;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1364 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_970, _974, _977, _980));
        float _1368 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_972, _975, _978, _981));
        float _1372 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_973, _976, _979, _982));
        float _1379 = dot(vec4(cbModelParam._m0[39u]), vec4(_1348, _1349, _1350, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1402;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1393 = dot(vec4(cbModelParam._m0[40u]), vec4(_1348, _1349, _1350, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1406 = (_1402 * cbModelParam._m0[1u].x) + (_1391 * (1.0 - cbModelParam._m0[1u].x));
    float _1416 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _450);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1416 : min(cbModelParam._m0[25u].z, _1416));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1466 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1470 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1474 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1477 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1480 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1483 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1511;
        if (_1477 > 0.0)
        {
            _1511 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1511 = frontier_phi_16_14_ladder;
        }
        float _1737;
        if (_1480 > 0.0)
        {
            _1737 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _1983;
        if (_1483 > 0.0)
        {
            _1983 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1983 = frontier_phi_37_32_ladder;
        }
        float _1985 = isnan(_1737) ? _1511 : (isnan(_1511) ? _1737 : min(_1511, _1737));
        float _1986 = isnan(_1983) ? _1985 : (isnan(_1985) ? _1983 : min(_1985, _1983));
        float _1990 = (_1986 * _1477) + _1466;
        float _1991 = (_1986 * _1480) + _1470;
        float _1992 = (_1986 * _1483) + _1474;
        float _1993 = _1986 * 9.9999997473787516355514526367188e-05;
        float _1995 = (-1.0) - _1993;
        float _1997 = _1993 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1992 > _1997) || ((_1992 < _1995) || ((_1991 > _1997) || ((_1991 < _1995) || ((_1990 < _1995) || (_1990 > _1997))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1992, cbModelParam._m0[9u].z, fma(_1991, cbModelParam._m0[9u].y, _1990 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1992, cbModelParam._m0[10u].z, fma(_1991, cbModelParam._m0[10u].y, _1990 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1992, cbModelParam._m0[11u].z, fma(_1991, cbModelParam._m0[11u].y, _1990 * cbModelParam._m0[11u].x))), _1417);
            frontier_phi_15_37_ladder = _2116.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2116.x * cbModelParam._m0[1u].y;
        }
        _1499 = frontier_phi_15_37_ladder_2;
        _1501 = frontier_phi_15_37_ladder_1;
        _1503 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1417);
        _1499 = _1487.x * cbModelParam._m0[1u].y;
        _1501 = _1487.y * cbModelParam._m0[1u].y;
        _1503 = _1487.z * cbModelParam._m0[1u].y;
    }
    float _1507 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _450);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1507 : min(cbModelParam._m0[25u].w, _1507));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1579 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1582 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1742;
        if (_1576 > 0.0)
        {
            _1742 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1742 = frontier_phi_27_23_ladder;
        }
        float _2010;
        if (_1579 > 0.0)
        {
            _2010 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2010 = frontier_phi_39_34_ladder;
        }
        float _2215;
        if (_1582 > 0.0)
        {
            _2215 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2215 = frontier_phi_48_45_ladder;
        }
        float _2217 = isnan(_2010) ? _1742 : (isnan(_1742) ? _2010 : min(_1742, _2010));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1576) + _1565;
        float _2223 = (_2218 * _1579) + _1569;
        float _2224 = (_2218 * _1582) + _1573;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2224, cbModelParam._m0[17u].z, fma(_2223, cbModelParam._m0[17u].y, _2222 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2224, cbModelParam._m0[18u].z, fma(_2223, cbModelParam._m0[18u].y, _2222 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2224, cbModelParam._m0[19u].z, fma(_2223, cbModelParam._m0[19u].y, _2222 * cbModelParam._m0[19u].x))), _1508);
            frontier_phi_24_48_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_24_48_ladder_2;
        _1603 = frontier_phi_24_48_ladder_1;
        _1605 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1508);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1617 = ((((1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_630 * _617)) * _601;
    float _1618 = _1617 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1619 = _1617 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1620 = _1617 * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1623 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    vec4 _1637 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_536, _537));
    float _1639 = _1637.w;
    float _1651 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1639);
    float _1652 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1639);
    float _1653 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1639);
    uvec4 _1657 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1659 = _1657.x * 14u;
    uint _1660 = _1659 + 13u;
    float _1667 = _601 + (-1.0);
    float _1672 = (cbLight._m0[_1660].x * _1667) + 1.0;
    float _1673 = (cbLight._m0[_1660].y * _1667) + 1.0;
    float _1674 = (cbLight._m0[_1660].z * _1667) + 1.0;
    float _1675 = (cbLight._m0[_1660].w * _1667) + 1.0;
    uint _1676 = _1659 + 5u;
    float _1682 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1686 = _1659 + 4u;
    float _1695 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1699 = _1659 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_447, _448, _449));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_447, _448, _449));
    float _3788 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3799 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1676].x * _1682) * _1720) + (((cbLight._m0[_1686].x * _1651) * _1695) * _1718);
    float _1728 = ((_1682 * cbLight._m0[_1676].y) * _1720) + (((cbLight._m0[_1686].y * _1652) * _1695) * _1718);
    float _1729 = ((_1682 * cbLight._m0[_1676].z) * _1720) + (((cbLight._m0[_1686].z * _1653) * _1695) * _1718);
    uvec4 _1734 = floatBitsToUint(cbLight._m0[_1659 + 12u]);
    bool _1736 = _1734.x == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1736)
    {
        _1747 = _1727;
        _1749 = _1728;
        _1751 = _1729;
    }
    else
    {
        uint _1755 = _1659 + 6u;
        float _1771 = (dot(vec3(cbLight._m0[_1659 + 2u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3810 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1774 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1747 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1727;
        _1749 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1728;
        _1751 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1729;
    }
    bool _1754 = _1734.y == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1754)
    {
        _1792 = _1747;
        _1794 = _1749;
        _1796 = _1751;
    }
    else
    {
        uint _1954 = _1659 + 7u;
        float _1970 = (dot(vec3(cbLight._m0[_1659 + 3u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _3826 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1973 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1792 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1747;
        _1794 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1749;
        _1796 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1751;
    }
    uint _1799 = _1659 + 8u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _450) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1659].x + _528;
    float _1815 = cbLight._m0[_1659].y + _529;
    float _1816 = cbLight._m0[_1659].z + _530;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1659].xyz));
    float _3842 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1828 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1829 = dot(vec3(_447, _448, _449), vec3(_1821, _1822, _1823));
    float _3864 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1821, _1822, _1823));
    float _3875 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1813 * _1813;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1828 * ((_1827 * _1853) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1853) + _1813) * _1827))) * _1827;
    float _3886 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    uint _1880 = _1659 + 9u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _450) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1699].x + _528;
    float _1894 = cbLight._m0[_1699].y + _529;
    float _1895 = cbLight._m0[_1699].z + _530;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1699].xyz));
    float _3897 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1907 = dot(vec3(_447, _448, _449), vec3(_1900, _1901, _1902));
    float _3908 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1900, _1901, _1902));
    float _3919 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1892 * _1892;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1929 = 1.0 - _1892;
    float _1939 = (0.5 / (((_1828 * ((_1906 * _1929) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1929) + _1892) * _1906))) * _1906;
    float _3930 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    float _1951 = (((_1928 * cbLight._m0[_1880].x) * _1941) * _1682) + ((((cbLight._m0[_1799].x * _1651) * _1852) * _1866) * _1695);
    float _1952 = (((_1928 * cbLight._m0[_1880].y) * _1941) * _1682) + ((((cbLight._m0[_1799].y * _1652) * _1852) * _1866) * _1695);
    float _1953 = (((_1928 * cbLight._m0[_1880].z) * _1941) * _1682) + ((((cbLight._m0[_1799].z * _1653) * _1852) * _1866) * _1695);
    float _2015;
    float _2017;
    float _2019;
    if (_1736)
    {
        _2015 = _1951;
        _2017 = _1952;
        _2019 = _1953;
    }
    else
    {
        uint _2021 = _1659 + 2u;
        uint _2025 = _1659 + 10u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _450) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _528;
        float _2042 = cbLight._m0[_2021].y + _529;
        float _2043 = cbLight._m0[_2021].z + _530;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2021].xyz));
        float _3941 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2055 = dot(vec3(_447, _448, _449), vec3(_2048, _2049, _2050));
        float _3952 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _3963 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2077 = 1.0 - _2040;
        float _2087 = (0.5 / (((_1828 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2077) + _2040) * _2054))) * _2054;
        float _3974 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2015 = (((_2076 * cbLight._m0[_2025].x) * _2089) * _2090) + _1951;
        _2017 = (((_2076 * cbLight._m0[_2025].y) * _2089) * _2090) + _1952;
        _2019 = (((_2076 * cbLight._m0[_2025].z) * _2089) * _2090) + _1953;
    }
    float _2125;
    float _2127;
    float _2129;
    if (_1754)
    {
        _2125 = _2015;
        _2127 = _2017;
        _2129 = _2019;
    }
    else
    {
        uint _2136 = _1659 + 3u;
        uint _2140 = _1659 + 11u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _450) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _528;
        float _2157 = cbLight._m0[_2136].y + _529;
        float _2158 = cbLight._m0[_2136].z + _530;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2136].xyz));
        float _3990 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2170 = dot(vec3(_447, _448, _449), vec3(_2163, _2164, _2165));
        float _4001 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4012 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2192 = 1.0 - _2155;
        float _2202 = (0.5 / (((_1828 * ((_2169 * _2192) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2192) + _2155) * _2169))) * _2169;
        float _4023 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2125 = (((_2191 * cbLight._m0[_2140].x) * _2204) * _2205) + _2015;
        _2127 = (((_2191 * cbLight._m0[_2140].y) * _2204) * _2205) + _2017;
        _2129 = (((_2191 * cbLight._m0[_2140].z) * _2204) * _2205) + _2019;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1657.y == 0u)
    {
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2280;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2280;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2280;
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.x;
        uint _2307 = uint((float(_2295.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2296))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2296)));
        float _2317 = (log2(_2283 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2318 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        uint _2321 = uint(isnan(14.0) ? _2318 : (isnan(_2318) ? 14.0 : min(_2318, 14.0)));
        uvec4 _2326 = texelFetch(g_lightClusterGridBuffer, int(((_2321 << 2u) + (_2307 << 6u)) >> 2u));
        uint _2327 = _2326.x;
        uint _2328 = _2295.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2328 >> 4u) & 15u)) + 4294967295u) & _2327) == 0u) || ((_2328 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            uint _2577 = 0u;
            uint _2586;
            bool _2587;
            for (;;)
            {
                _2586 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                _2587 = _2586 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2587)
                {
                    frontier_phi_63_pred = _2576;
                    frontier_phi_63_pred_1 = _2575;
                    frontier_phi_63_pred_2 = _2574;
                    frontier_phi_63_pred_3 = _2573;
                    frontier_phi_63_pred_4 = _2572;
                    frontier_phi_63_pred_5 = _2571;
                }
                else
                {
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    uint _2701;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2586;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    for (;;)
                    {
                        uint _2705 = uint(findLSB(_2701)) + (_2577 << 5u);
                        uint _2702 = (_2701 + 4294967295u) & _2701;
                        uint _2707 = _2705 * 48u;
                        vec4 _2721 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2727 = (_2705 * 48u) + 4u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 3u)).x));
                        uint _2746 = (_2705 * 48u) + 8u;
                        vec3 _2757 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x));
                        float _2761 = _2721.x - _2281;
                        float _2762 = _2721.y - _2282;
                        float _2763 = _2721.z - _2283;
                        float _2764 = dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763));
                        float _2767 = inversesqrt(_2764);
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2771 = dot(vec3(_556, _559, _562), vec3(_2768, _2769, _2770));
                        float _2776 = 1.0 - (_2764 * _2721.w);
                        float _4049 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2777 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2778 = sqrt(_2764) * _2740.w;
                        float _2781 = 1.39999997615814208984375 / (_2778 + 1.39999997615814208984375);
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2771) + _2782;
                        float _2788 = _2778 * _2778;
                        float _2792 = ((isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))) * _2777) / ((_2788 * 0.699999988079071044921875) + 1.0);
                        float _2796 = (-0.0) - _2281;
                        float _2797 = (-0.0) - _2282;
                        float _2798 = (-0.0) - _2283;
                        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2813 = exp2(log2(1.0 / ((_2788 * 3.5) + 5.0)) * 0.25);
                        float _2814 = 1.0 - _617;
                        float _2821 = sqrt(1.0 - ((1.0 - (_2814 * _2814)) * (1.0 - (_2813 * _2813))));
                        float _2822 = _2821 * _2821;
                        float _2823 = _2822 * _2822;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2826 = _2805 + _2770;
                        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
                        float _2834 = dot(vec3(_556, _559, _562), vec3(_2803, _2804, _2805));
                        float _4065 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2837 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2838 = dot(vec3(_556, _559, _562), vec3(_2830 * _2824, _2830 * _2825, _2830 * _2826));
                        float _4076 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2841 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2845 = ((_2841 * _2841) * (_2823 + (-1.0))) + 1.0;
                        float _2846 = _2781 * _2822;
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2771) + _2847;
                        float _4087 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2851 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2852 = 1.0 - _2822;
                        float _2862 = (0.5 / (((_2851 * ((_2837 * _2852) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _2852) + _2822) * _2837))) * _2851;
                        float _4098 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2873 = (((_2823 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2845 * _2845) * ((_2788 * 2.1991131305694580078125) + 3.141590118408203125))) * _2777;
                        _2630 = (_2792 * _2740.x) + _2698;
                        _2631 = (_2792 * _2740.y) + _2699;
                        _2632 = (_2792 * _2740.z) + _2700;
                        _2627 = (_2873 * _2757.x) + _2695;
                        _2628 = (_2873 * _2757.y) + _2696;
                        _2629 = (_2873 * _2757.z) + _2697;
                        if (_2702 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2702;
                        }
                    }
                    frontier_phi_63_pred = _2632;
                    frontier_phi_63_pred_1 = _2631;
                    frontier_phi_63_pred_2 = _2630;
                    frontier_phi_63_pred_3 = _2629;
                    frontier_phi_63_pred_4 = _2628;
                    frontier_phi_63_pred_5 = _2627;
                }
                _2438 = frontier_phi_63_pred;
                _2436 = frontier_phi_63_pred_1;
                _2434 = frontier_phi_63_pred_2;
                _2432 = frontier_phi_63_pred_3;
                _2430 = frontier_phi_63_pred_4;
                _2428 = frontier_phi_63_pred_5;
                uint _2578 = _2577 + 1u;
                if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2571 = _2428;
                    _2572 = _2430;
                    _2573 = _2432;
                    _2574 = _2434;
                    _2575 = _2436;
                    _2576 = _2438;
                    _2577 = _2578;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((4294967295u << _2444) & _2327) == 0u)
        {
            _2539 = _2427;
            _2541 = _2429;
            _2543 = _2431;
            _2545 = _2433;
            _2547 = _2435;
            _2549 = _2437;
        }
        else
        {
            float _2564 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
            float _2565 = _2564 * _2281;
            float _2566 = _2564 * _2282;
            float _2567 = _2564 * _2283;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2678 = _2427;
                float _2679 = _2429;
                float _2680 = _2431;
                float _2681 = _2433;
                float _2682 = _2435;
                float _2683 = _2437;
                uint _2684 = _2444;
                uint _2693;
                bool _2694;
                for (;;)
                {
                    _2693 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2684 << 2u)) >> 2u)).x;
                    _2694 = _2693 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2694)
                    {
                        frontier_phi_69_pred = _2683;
                        frontier_phi_69_pred_1 = _2682;
                        frontier_phi_69_pred_2 = _2681;
                        frontier_phi_69_pred_3 = _2680;
                        frontier_phi_69_pred_4 = _2679;
                        frontier_phi_69_pred_5 = _2678;
                    }
                    else
                    {
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        uint _2897 = _2693;
                        uint _2898;
                        vec4 _2923;
                        float _2924;
                        vec4 _2939;
                        vec3 _2951;
                        vec4 _2967;
                        vec4 _2983;
                        float _3030;
                        bool _3031;
                        for (;;)
                        {
                            uint _2908 = ((_2684 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2897));
                            _2898 = (_2897 + 4294967295u) & _2897;
                            uint _2910 = _2908 * 40u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2924 = _2923.w;
                            uint _2926 = (_2908 * 40u) + 4u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2941 = (_2908 * 40u) + 8u;
                            _2951 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x));
                            uint _2954 = (_2908 * 40u) + 16u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2908 * 40u) + 20u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2908 * 40u) + 24u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3005 = (_2908 * 40u) + 28u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3030 = fma(_2283, _3018.z, fma(_2282, _3018.y, _3018.x * _2281)) + _3018.w;
                            _3031 = !((fma(_2283, _2999.z, fma(_2282, _2999.y, _2999.x * _2281)) + _2999.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3031)
                            {
                                float _3058 = _2923.x - _2281;
                                float _3059 = _2923.y - _2282;
                                float _3060 = _2923.z - _2283;
                                float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                                float _3064 = inversesqrt(_3061);
                                float _3065 = _3064 * _3058;
                                float _3066 = _3064 * _3059;
                                float _3067 = _3064 * _3060;
                                float _3071 = 1.0 - (_3061 / (_2924 * _2924));
                                float _4109 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3076 = sqrt(_3061) * _2939.w;
                                float _3078 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                                float _3079 = _3078 * _3078;
                                float _3082 = ((1.0 - _3079) * dot(vec3(_3065, _3066, _3067), vec3(_556, _559, _562))) + _3079;
                                float _3085 = _3076 * _3076;
                                float _3089 = (fma(_2283, _2967.z, fma(_2282, _2967.y, _2967.x * _2281)) + _2967.w) / _3030;
                                float _3090 = (fma(_2283, _2983.z, fma(_2282, _2983.y, _2983.x * _2281)) + _2983.w) / _3030;
                                float _3094 = 1.0 - dot(vec2(_3089, _3090), vec2(_3089, _3090));
                                float _4125 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3096 = _3095 * (((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3072) / ((_3085 * 0.699999988079071044921875) + 1.0));
                                float _3108 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                                float _3109 = 1.0 - _617;
                                float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                                float _3117 = _3116 * _3116;
                                float _3118 = _3117 * _3117;
                                float _3119 = _3065 - _2565;
                                float _3120 = _3066 - _2566;
                                float _3121 = _3067 - _2567;
                                float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                                float _3129 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2565, (-0.0) - _2566, (-0.0) - _2567));
                                float _4136 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3133 = dot(vec3(_556, _559, _562), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                                float _4147 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                                float _3141 = _3078 * _3117;
                                float _3142 = _3141 * _3141;
                                float _3148 = ((1.0 - _3142) * dot(vec3(_556, _559, _562), vec3(_3065, _3066, _3067))) + _3142;
                                float _4158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3150 = 1.0 - _3117;
                                float _3160 = (0.5 / (((_3149 * ((_3132 * _3150) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3117) * _3132))) * _3149;
                                float _4169 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3170 = (_3095 * _3072) * (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3140 * _3140) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3096 * _2939.z;
                                frontier_phi_75_pred_1 = _3096 * _2939.y;
                                frontier_phi_75_pred_2 = _3096 * _2939.x;
                                frontier_phi_75_pred_3 = _3170 * _2951.z;
                                frontier_phi_75_pred_4 = _3170 * _2951.y;
                                frontier_phi_75_pred_5 = _3170 * _2951.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_75_pred;
                            _3178 = frontier_phi_75_pred_1;
                            _3177 = frontier_phi_75_pred_2;
                            _3176 = frontier_phi_75_pred_3;
                            _3175 = frontier_phi_75_pred_4;
                            _3174 = frontier_phi_75_pred_5;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            if (_2898 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2898;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2883;
                        frontier_phi_69_pred_1 = _2882;
                        frontier_phi_69_pred_2 = _2881;
                        frontier_phi_69_pred_3 = _2880;
                        frontier_phi_69_pred_4 = _2879;
                        frontier_phi_69_pred_5 = _2878;
                    }
                    _2550 = frontier_phi_69_pred;
                    _2548 = frontier_phi_69_pred_1;
                    _2546 = frontier_phi_69_pred_2;
                    _2544 = frontier_phi_69_pred_3;
                    _2542 = frontier_phi_69_pred_4;
                    _2540 = frontier_phi_69_pred_5;
                    uint _2685 = _2684 + 1u;
                    if (_2685 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2678 = _2540;
                        _2679 = _2542;
                        _2680 = _2544;
                        _2681 = _2546;
                        _2682 = _2548;
                        _2683 = _2550;
                        _2684 = _2685;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2550;
                frontier_phi_57_58_ladder_1 = _2548;
                frontier_phi_57_58_ladder_2 = _2546;
                frontier_phi_57_58_ladder_3 = _2544;
                frontier_phi_57_58_ladder_4 = _2542;
                frontier_phi_57_58_ladder_5 = _2540;
            }
            else
            {
                frontier_phi_57_58_ladder = _2437;
                frontier_phi_57_58_ladder_1 = _2435;
                frontier_phi_57_58_ladder_2 = _2433;
                frontier_phi_57_58_ladder_3 = _2431;
                frontier_phi_57_58_ladder_4 = _2429;
                frontier_phi_57_58_ladder_5 = _2427;
            }
            _2539 = frontier_phi_57_58_ladder_5;
            _2541 = frontier_phi_57_58_ladder_4;
            _2543 = frontier_phi_57_58_ladder_3;
            _2545 = frontier_phi_57_58_ladder_2;
            _2547 = frontier_phi_57_58_ladder_1;
            _2549 = frontier_phi_57_58_ladder;
        }
        float _2554 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2339 = (_2554 * _2545) + _1792;
        _2341 = (_2554 * _2547) + _1794;
        _2343 = (_2554 * _2549) + _1796;
        _2345 = ((_2539 * 0.039999999105930328369140625) * _2554) + _2125;
        _2347 = ((_2541 * 0.039999999105930328369140625) * _2554) + _2127;
        _2349 = ((_2543 * 0.039999999105930328369140625) * _2554) + _2129;
    }
    else
    {
        _2339 = _1792;
        _2341 = _1794;
        _2343 = _1796;
        _2345 = _2125;
        _2347 = _2127;
        _2349 = _2129;
    }
    float _4185 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4196 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4207 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    uint _2369 = _575 + 6u;
    float _2377 = _536 / cbSceneParam._m0[86u].x;
    float _2378 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2392 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, (log2((isnan(cbSceneParam._m0[77u].w) ? _469 : (isnan(_469) ? cbSceneParam._m0[77u].w : min(_469, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2394 = _2392.x;
    float _2395 = _2392.y;
    float _2396 = _2392.z;
    float _2397 = _2392.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_469 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_469) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _469 : min(cbSceneParam._m0[80u].w, _469));
        float _2453 = _2452 / _469;
        float _2464 = _2453 * _521;
        float _2465 = _522 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _523;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2640;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2640 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2487 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2600 = 1.0 / cbSceneParam._m0[80u].x;
            float _2601 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2602 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            _2640 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2611 - _2612) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0))))) * _2600)) - ((exp2(_2487 * _2611) - exp2(_2487 * _2612)) * _2600))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2642 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, 1.0), 0.0);
        float _2651 = exp2((_2640 * (-1.44269502162933349609375)) * (1.0 - _2642.w));
        float _2652 = log2(_2651);
        float _2668 = log2(_2397);
        _2489 = (exp2(_2668 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].x)) * _2642.x) / cbSceneParam._m0[78u].x)) + _2394;
        _2491 = (exp2(_2668 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].y)) * _2642.y) / cbSceneParam._m0[78u].y)) + _2395;
        _2493 = (exp2(_2668 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].z)) * _2642.z) / cbSceneParam._m0[78u].z)) + _2396;
        _2495 = _2651 * _2397;
    }
    else
    {
        _2489 = _2394;
        _2491 = _2395;
        _2493 = _2396;
        _2495 = _2397;
    }
    float _2507 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2508 = _2507 == 3.0;
    float _2509 = log2(_2495);
    float _2516 = exp2(_2509 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2339 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _601))) + ((_2345 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2517 = exp2(_2509 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2341 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _601))) + ((_2347 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2518 = exp2(_2509 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2343 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _601))) + ((_2349 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2527 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2527 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.y = _2527 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.z = _2527 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.w = cbInstanceData._m0[_2369].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2369].w;
}


