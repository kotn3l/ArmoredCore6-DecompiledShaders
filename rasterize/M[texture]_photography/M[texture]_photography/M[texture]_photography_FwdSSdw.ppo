#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _977;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _247.x * cbMtdParam._m0[9u].x;
    float _253 = _247.y * cbMtdParam._m0[9u].y;
    float _254 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _303 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3336 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _311 = (_304 * ((_272.x * cbMtdParam._m0[10u].x) - _252)) + _252;
    float _312 = (_304 * ((_272.y * cbMtdParam._m0[10u].y) - _253)) + _253;
    float _313 = (_304 * ((_272.z * cbMtdParam._m0[10u].z) - _254)) + _254;
    float _345 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _348 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _345) * _304) + _345;
    vec4 _362 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _370 = (_362.x * 2.0) + (-1.0);
    float _372 = (_362.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_370, _372), vec2(_370, _372));
    float _3347 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _378 = sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))));
    float _379 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _400 = (_393.x * 2.0) + (-1.0);
    float _401 = (_393.y * 2.0) + (-1.0);
    float _402 = dot(vec2(_400, _401), vec2(_400, _401));
    float _3358 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _411 = (_304 * ((_393.z * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _418 = (_304 * (_400 - _370)) + _370;
    float _419 = (_304 * (_401 - _372)) + _372;
    float _420 = (_304 * (sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) - _378)) + _378;
    float _423 = fma(_420, _209 * NORMAL.x, fma(_419, _216 * TANGENT.x, (_202 * _194) * _418));
    float _426 = fma(_420, _209 * NORMAL.y, fma(_419, _216 * TANGENT.y, (_202 * _195) * _418));
    float _429 = fma(_420, _209 * NORMAL.z, fma(_419, _216 * TANGENT.z, (_202 * _196) * _418));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _434 = _433 * _423;
    float _435 = _433 * _426;
    float _436 = _433 * _429;
    float _3369 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _437 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3391 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3402 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3413 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _441 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _457 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _508 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _498);
    float _509 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _498);
    float _510 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _498);
    float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
    float _515 = _508 * _514;
    float _516 = _509 * _514;
    float _517 = _510 * _514;
    float _523 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _524 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _543 = fma(_436, cbSceneParam._m0[5u].z, fma(_435, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _434));
    float _546 = fma(_436, cbSceneParam._m0[6u].z, fma(_435, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _434));
    float _549 = fma(_436, cbSceneParam._m0[7u].z, fma(_435, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _434));
    uint _562 = uint(roundEven(NORMAL.w)) * 13u;
    uint _564 = (_562 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _570 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_564].x;
    float _571 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_564].y;
    float _572 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_564].z;
    float _3424 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _576 = 1.0 - _441;
    float _577 = _573 * _576;
    float _578 = _574 * _576;
    float _579 = _575 * _576;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _441;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _441;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _441;
    float _587 = _584 + 0.039999999105930328369140625;
    float _589 = _585 + 0.039999999105930328369140625;
    float _590 = _586 + 0.039999999105930328369140625;
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _523, cbSceneParam._m0[86u].y * _524));
    float _602 = _599.x * TEXCOORD_4.x;
    float _603 = dot(vec3(_434, _435, _436), vec3(_515, _516, _517));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _434) - _515;
    float _611 = (_606 * _435) - _516;
    float _612 = (_606 * _436) - _517;
    float _616 = abs(dot(vec3(_515, _516, _517), vec3(_434, _435, _436)));
    float _3457 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _618 = sqrt(_437);
    float _631 = exp2((_618 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_618 * 3.0));
    float _637 = (1.0 - _631) * ((_618 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _638 = _631 * _618;
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _705 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _709 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _734 = _666 + _434;
        float _735 = _670 + _435;
        float _736 = _674 + _436;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_434, _435, _436), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3505 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_434, _435, _436), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3538 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_434, _435, _436), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3571 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1017 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1021 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1025 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1048 = _666 + _434;
        float _1049 = _670 + _435;
        float _1050 = _674 + _436;
        float _1060 = fma(_1050, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1017 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1021 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[35u].z) + ((((((_1025 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1116 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1083.x + (-0.5));
        float _1118 = _1116 * (_1083.y + (-0.5));
        float _1119 = _1116 * (_1083.z + (-0.5));
        float _1126 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1090.x + (-0.5));
        float _1128 = _1126 * (_1090.y + (-0.5));
        float _1129 = _1126 * (_1090.z + (-0.5));
        float _1136 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1097.x + (-0.5));
        float _1138 = _1136 * (_1097.y + (-0.5));
        float _1139 = _1136 * (_1097.z + (-0.5));
        float _1146 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1104.x + (-0.5));
        float _1148 = _1146 * (_1104.y + (-0.5));
        float _1149 = _1146 * (_1104.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_434, _435, _436), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3634 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1180 + 1.0))) + _1185) * _1150;
        float _1195 = _1118 * 0.5;
        float _1196 = _1128 * 0.5;
        float _1197 = _1138 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_434, _435, _436), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3667 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1222 + 1.0))) + _1227) * _1151;
        float _1237 = _1119 * 0.5;
        float _1238 = _1129 * 0.5;
        float _1239 = _1139 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_434, _435, _436), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3700 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1264 + 1.0))) + _1269) * _1152;
        _1286 = _1119;
        _1287 = _1118;
        _1288 = _1117;
        _1289 = _1129;
        _1290 = _1128;
        _1291 = _1127;
        _1292 = _1139;
        _1293 = _1138;
        _1294 = _1137;
        _1295 = _1152;
        _1296 = _1151;
        _1297 = _1150;
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _977;
        _1287 = _977;
        _1288 = _977;
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = _977;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1310));
    float _1354 = _610 * 0.5;
    float _1355 = _611 * 0.5;
    float _1356 = _612 * 0.5;
    float _1357 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1360 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1363 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1397;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1370 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_976, _980, _983, _986));
        float _1374 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_978, _981, _984, _987));
        float _1378 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_979, _982, _985, _988));
        float _1385 = dot(vec4(cbModelParam._m0[39u]), vec4(_1354, _1355, _1356, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1408;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1399 = dot(vec4(cbModelParam._m0[40u]), vec4(_1354, _1355, _1356, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1412 = (_1408 * cbModelParam._m0[1u].x) + (_1397 * (1.0 - cbModelParam._m0[1u].x));
    float _1422 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _437);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1422 : min(cbModelParam._m0[25u].z, _1422));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1486 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1489 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1517 = frontier_phi_14_12_ladder;
        }
        float _1744;
        if (_1486 > 0.0)
        {
            _1744 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1744 = frontier_phi_23_19_ladder;
        }
        float _2001;
        if (_1489 > 0.0)
        {
            _2001 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2001 = frontier_phi_35_30_ladder;
        }
        float _2003 = isnan(_1744) ? _1517 : (isnan(_1517) ? _1744 : min(_1517, _1744));
        float _2004 = isnan(_2001) ? _2003 : (isnan(_2003) ? _2001 : min(_2003, _2001));
        float _2008 = (_2004 * _1483) + _1472;
        float _2009 = (_2004 * _1486) + _1476;
        float _2010 = (_2004 * _1489) + _1480;
        float _2011 = _2004 * 9.9999997473787516355514526367188e-05;
        float _2013 = (-1.0) - _2011;
        float _2015 = _2011 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2010 > _2015) || ((_2010 < _2013) || ((_2009 > _2015) || ((_2009 < _2013) || ((_2008 < _2013) || (_2008 > _2015))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2010, cbModelParam._m0[9u].z, fma(_2009, cbModelParam._m0[9u].y, _2008 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2010, cbModelParam._m0[10u].z, fma(_2009, cbModelParam._m0[10u].y, _2008 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2010, cbModelParam._m0[11u].z, fma(_2009, cbModelParam._m0[11u].y, _2008 * cbModelParam._m0[11u].x))), _1423);
            frontier_phi_13_35_ladder = _2138.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2138.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2138.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_13_35_ladder_2;
        _1507 = frontier_phi_13_35_ladder_1;
        _1509 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1423);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _437);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1585 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1588 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1749;
        if (_1582 > 0.0)
        {
            _1749 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1749 = frontier_phi_25_21_ladder;
        }
        float _2028;
        if (_1585 > 0.0)
        {
            _2028 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2028 = frontier_phi_37_32_ladder;
        }
        float _2241;
        if (_1588 > 0.0)
        {
            _2241 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2241 = frontier_phi_46_43_ladder;
        }
        float _2243 = isnan(_2028) ? _1749 : (isnan(_1749) ? _2028 : min(_1749, _2028));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1582) + _1571;
        float _2249 = (_2244 * _1585) + _1575;
        float _2250 = (_2244 * _1588) + _1579;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_22_46_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_22_46_ladder_2;
        _1609 = frontier_phi_22_46_ladder_1;
        _1611 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1514);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1624 = (((_637 * _587) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1626 = (((_637 * _589) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1628 = (((_637 * _590) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1611 - _1509)) + _1509);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    vec4 _1645 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_523, _524));
    float _1647 = _1645.w;
    float _1659 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1647);
    float _1660 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1647);
    float _1661 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1647);
    uvec4 _1665 = floatBitsToUint(cbInstanceData._m0[_562 + 5u]);
    uint _1667 = _1665.x * 14u;
    uint _1668 = _1667 + 13u;
    float _1675 = _602 + (-1.0);
    float _1680 = (cbLight._m0[_1668].x * _1675) + 1.0;
    float _1681 = (cbLight._m0[_1668].y * _1675) + 1.0;
    float _1682 = (cbLight._m0[_1668].z * _1675) + 1.0;
    float _1683 = (cbLight._m0[_1668].w * _1675) + 1.0;
    uint _1684 = _1667 + 5u;
    float _1690 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1694 = _1667 + 4u;
    float _1703 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1707 = _1667 | 1u;
    float _1718 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_434, _435, _436));
    float _1721 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_434, _435, _436));
    float _3836 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _3847 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1726 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1728 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1735 = ((cbLight._m0[_1684].x * _1690) * _1728) + (((cbLight._m0[_1694].x * _1659) * _1703) * _1726);
    float _1736 = ((_1690 * cbLight._m0[_1684].y) * _1728) + (((cbLight._m0[_1694].y * _1660) * _1703) * _1726);
    float _1737 = ((_1690 * cbLight._m0[_1684].z) * _1728) + (((cbLight._m0[_1694].z * _1661) * _1703) * _1726);
    uvec4 _1741 = floatBitsToUint(cbLight._m0[_1667 + 12u]);
    bool _1743 = _1741.x == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1743)
    {
        _1754 = _1735;
        _1756 = _1736;
        _1758 = _1737;
    }
    else
    {
        uint _1762 = _1667 + 6u;
        float _1778 = (dot(vec3(cbLight._m0[_1667 + 2u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _1779 = _1778 * _1778;
        float _3858 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1781 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _1754 = (((cbLight._m0[_1762].x * 0.3183098733425140380859375) * _1780) * _1781) + _1735;
        _1756 = (((cbLight._m0[_1762].y * 0.3183098733425140380859375) * _1780) * _1781) + _1736;
        _1758 = (((cbLight._m0[_1762].z * 0.3183098733425140380859375) * _1780) * _1781) + _1737;
    }
    bool _1761 = _1741.y == 0u;
    float _1799;
    float _1801;
    float _1803;
    if (_1761)
    {
        _1799 = _1754;
        _1801 = _1756;
        _1803 = _1758;
    }
    else
    {
        uint _1972 = _1667 + 7u;
        float _1988 = (dot(vec3(cbLight._m0[_1667 + 3u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _3874 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1991 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1799 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1754;
        _1801 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1756;
        _1803 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1758;
    }
    uint _1806 = _1667 + 8u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1667].w)) * _437) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1667].x + _515;
    float _1822 = cbLight._m0[_1667].y + _516;
    float _1823 = cbLight._m0[_1667].z + _517;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1667].xyz));
    float _3890 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1835 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1836 = dot(vec3(_434, _435, _436), vec3(_1828, _1829, _1830));
    float _3912 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1828, _1829, _1830));
    float _3923 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1820 * _1820;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0);
    float _1857 = 0.959999978542327880859375 - _584;
    float _1859 = 0.959999978542327880859375 - _585;
    float _1860 = 0.959999978542327880859375 - _586;
    float _1867 = 1.0 - _1820;
    float _1878 = (0.5 / (((_1835 * ((_1834 * _1867) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1867) + _1820) * _1834))) * _1834;
    float _3934 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    uint _1894 = _1667 + 9u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _437) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1707].x + _515;
    float _1908 = cbLight._m0[_1707].y + _516;
    float _1909 = cbLight._m0[_1707].z + _517;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1707].xyz));
    float _3945 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1921 = dot(vec3(_434, _435, _436), vec3(_1914, _1915, _1916));
    float _3956 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1914, _1915, _1916));
    float _3967 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1929 = _1906 * _1906;
    float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0);
    float _1947 = 1.0 - _1906;
    float _1957 = (0.5 / (((_1835 * ((_1920 * _1947) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1947) + _1906) * _1920))) * _1920;
    float _3978 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
    float _1969 = (((((_1940 * _1857) + _587) * cbLight._m0[_1894].x) * _1959) * _1690) + ((((cbLight._m0[_1806].x * _1659) * ((_1856 * _1857) + _587)) * _1880) * _1703);
    float _1970 = (((((_1940 * _1859) + _589) * cbLight._m0[_1894].y) * _1959) * _1690) + ((((cbLight._m0[_1806].y * _1660) * ((_1856 * _1859) + _589)) * _1880) * _1703);
    float _1971 = (((((_1940 * _1860) + _590) * cbLight._m0[_1894].z) * _1959) * _1690) + ((((cbLight._m0[_1806].z * _1661) * ((_1856 * _1860) + _590)) * _1880) * _1703);
    float _2033;
    float _2035;
    float _2037;
    if (_1743)
    {
        _2033 = _1969;
        _2035 = _1970;
        _2037 = _1971;
    }
    else
    {
        uint _2039 = _1667 + 2u;
        uint _2043 = _1667 + 10u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _437) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _515;
        float _2060 = cbLight._m0[_2039].y + _516;
        float _2061 = cbLight._m0[_2039].z + _517;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2039].xyz));
        float _3989 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2073 = dot(vec3(_434, _435, _436), vec3(_2066, _2067, _2068));
        float _4000 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4011 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1835 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2099) + _2058) * _2072))) * _2072;
        float _4022 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _2033 = (((((_2092 * _1857) + _587) * cbLight._m0[_2043].x) * _2111) * _2112) + _1969;
        _2035 = (((((_2092 * _1859) + _589) * cbLight._m0[_2043].y) * _2111) * _2112) + _1970;
        _2037 = (((((_2092 * _1860) + _590) * cbLight._m0[_2043].z) * _2111) * _2112) + _1971;
    }
    float _2147;
    float _2149;
    float _2151;
    if (_1761)
    {
        _2147 = _2033;
        _2149 = _2035;
        _2151 = _2037;
    }
    else
    {
        uint _2158 = _1667 + 3u;
        uint _2162 = _1667 + 11u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _437) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _515;
        float _2179 = cbLight._m0[_2158].y + _516;
        float _2180 = cbLight._m0[_2158].z + _517;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2158].xyz));
        float _4038 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2192 = dot(vec3(_434, _435, _436), vec3(_2185, _2186, _2187));
        float _4049 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4060 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
        float _2218 = 1.0 - _2177;
        float _2228 = (0.5 / (((_1835 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2218) + _2177) * _2191))) * _2191;
        float _4071 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2147 = (((((_2211 * _1857) + _587) * cbLight._m0[_2162].x) * _2230) * _2231) + _2033;
        _2149 = (((((_2211 * _1859) + _589) * cbLight._m0[_2162].y) * _2230) * _2231) + _2035;
        _2151 = (((((_2211 * _1860) + _590) * cbLight._m0[_2162].z) * _2230) * _2231) + _2037;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1665.y == 0u)
    {
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2306;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2306;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2306;
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.x;
        uint _2333 = uint((float(_2321.y) * floor(float(uint(cbSceneParam._m0[85u].y * _524) / _2322))) + floor(float(uint(cbSceneParam._m0[85u].x * _523) / _2322)));
        float _2343 = (log2(_2309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2344 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        uint _2347 = uint(isnan(14.0) ? _2344 : (isnan(_2344) ? 14.0 : min(_2344, 14.0)));
        uvec4 _2352 = texelFetch(g_lightClusterGridBuffer, int(((_2347 << 2u) + (_2333 << 6u)) >> 2u));
        uint _2353 = _2352.x;
        uint _2354 = _2321.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2354 >> 4u) & 15u)) + 4294967295u) & _2353) == 0u) || ((_2354 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            uint _2605 = 0u;
            uint _2614;
            bool _2615;
            for (;;)
            {
                _2614 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                _2615 = _2614 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2615)
                {
                    frontier_phi_61_pred = _2599;
                    frontier_phi_61_pred_1 = _2604;
                    frontier_phi_61_pred_2 = _2603;
                    frontier_phi_61_pred_3 = _2602;
                    frontier_phi_61_pred_4 = _2601;
                    frontier_phi_61_pred_5 = _2600;
                }
                else
                {
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    uint _2729;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2601;
                    _2726 = _2602;
                    _2727 = _2603;
                    _2728 = _2604;
                    _2729 = _2614;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2733 = uint(findLSB(_2729)) + (_2605 << 5u);
                        uint _2730 = (_2729 + 4294967295u) & _2729;
                        uint _2735 = _2733 * 48u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2755 = (_2733 * 48u) + 4u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 3u)).x));
                        uint _2774 = (_2733 * 48u) + 8u;
                        vec3 _2785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x));
                        float _2789 = _2749.x - _2307;
                        float _2790 = _2749.y - _2308;
                        float _2791 = _2749.z - _2309;
                        float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                        float _2795 = inversesqrt(_2792);
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2799 = dot(vec3(_543, _546, _549), vec3(_2796, _2797, _2798));
                        float _2804 = 1.0 - (_2792 * _2749.w);
                        float _4097 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2806 = sqrt(_2792) * _2768.w;
                        float _2809 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2799) + _2810;
                        float _2816 = _2806 * _2806;
                        float _2820 = ((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2805) / ((_2816 * 0.699999988079071044921875) + 1.0);
                        float _2824 = (-0.0) - _2307;
                        float _2825 = (-0.0) - _2308;
                        float _2826 = (-0.0) - _2309;
                        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2841 = exp2(log2(1.0 / ((_2816 * 3.5) + 5.0)) * 0.25);
                        float _2842 = 1.0 - _618;
                        float _2849 = sqrt(1.0 - ((1.0 - (_2842 * _2842)) * (1.0 - (_2841 * _2841))));
                        float _2850 = _2849 * _2849;
                        float _2851 = _2850 * _2850;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2862 = dot(vec3(_543, _546, _549), vec3(_2831, _2832, _2833));
                        float _4113 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2866 = dot(vec3(_543, _546, _549), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                        float _4124 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2873 = ((_2869 * _2869) * (_2851 + (-1.0))) + 1.0;
                        float _2874 = _2809 * _2850;
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2799) + _2875;
                        float _4135 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2880 = 1.0 - _2850;
                        float _2890 = (0.5 / (((_2879 * ((_2865 * _2880) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2879 * _2880) + _2850) * _2865))) * _2879;
                        float _4146 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2901 = (((_2851 * 3.1415927410125732421875) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) / ((_2873 * _2873) * ((_2816 * 2.1991131305694580078125) + 3.141590118408203125))) * _2805;
                        _2658 = (_2820 * _2768.x) + _2726;
                        _2659 = (_2820 * _2768.y) + _2727;
                        _2660 = (_2820 * _2768.z) + _2728;
                        _2655 = (_2901 * _2785.x) + _2723;
                        _2656 = (_2901 * _2785.y) + _2724;
                        _2657 = (_2901 * _2785.z) + _2725;
                        if (_2730 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2730;
                        }
                    }
                    frontier_phi_61_pred = _2655;
                    frontier_phi_61_pred_1 = _2660;
                    frontier_phi_61_pred_2 = _2659;
                    frontier_phi_61_pred_3 = _2658;
                    frontier_phi_61_pred_4 = _2657;
                    frontier_phi_61_pred_5 = _2656;
                }
                _2455 = frontier_phi_61_pred;
                _2465 = frontier_phi_61_pred_1;
                _2463 = frontier_phi_61_pred_2;
                _2461 = frontier_phi_61_pred_3;
                _2459 = frontier_phi_61_pred_4;
                _2457 = frontier_phi_61_pred_5;
                uint _2606 = _2605 + 1u;
                if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2599 = _2455;
                    _2600 = _2457;
                    _2601 = _2459;
                    _2602 = _2461;
                    _2603 = _2463;
                    _2604 = _2465;
                    _2605 = _2606;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((4294967295u << _2471) & _2353) == 0u)
        {
            _2567 = _2454;
            _2569 = _2456;
            _2571 = _2458;
            _2573 = _2460;
            _2575 = _2462;
            _2577 = _2464;
        }
        else
        {
            float _2592 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
            float _2593 = _2592 * _2307;
            float _2594 = _2592 * _2308;
            float _2595 = _2592 * _2309;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2706 = _2454;
                float _2707 = _2456;
                float _2708 = _2458;
                float _2709 = _2460;
                float _2710 = _2462;
                float _2711 = _2464;
                uint _2712 = _2471;
                uint _2721;
                bool _2722;
                for (;;)
                {
                    _2721 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                    _2722 = _2721 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2722)
                    {
                        frontier_phi_67_pred = _2709;
                        frontier_phi_67_pred_1 = _2710;
                        frontier_phi_67_pred_2 = _2711;
                        frontier_phi_67_pred_3 = _2708;
                        frontier_phi_67_pred_4 = _2707;
                        frontier_phi_67_pred_5 = _2706;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        float _2921 = _2708;
                        float _2922 = _2709;
                        float _2923 = _2710;
                        float _2924 = _2711;
                        uint _2925 = _2721;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3011;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2936 = ((_2712 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2936 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2936 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2936 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_2309, _3046.z, fma(_2308, _3046.y, _3046.x * _2307)) + _3046.w;
                            _3059 = !((fma(_2309, _3027.z, fma(_2308, _3027.y, _3027.x * _2307)) + _3027.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2951.x - _2307;
                                float _3087 = _2951.y - _2308;
                                float _3088 = _2951.z - _2309;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2952 * _2952));
                                float _4157 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3104 = sqrt(_3089) * _2967.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_543, _546, _549))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_2309, _2995.z, fma(_2308, _2995.y, _2995.x * _2307)) + _2995.w) / _3058;
                                float _3118 = (fma(_2309, _3011.z, fma(_2308, _3011.y, _3011.x * _2307)) + _3011.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4173 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _618;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2593;
                                float _3148 = _3094 - _2594;
                                float _3149 = _3095 - _2595;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_543, _546, _549), vec3((-0.0) - _2593, (-0.0) - _2594, (-0.0) - _2595));
                                float _4184 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3161 = dot(vec3(_543, _546, _549), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4195 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_543, _546, _549), vec3(_3093, _3094, _3095))) + _3170;
                                float _4206 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4217 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3198 * _2979.x;
                                frontier_phi_73_pred_1 = _3198 * _2979.y;
                                frontier_phi_73_pred_2 = _3124 * _2967.z;
                                frontier_phi_73_pred_3 = _3124 * _2967.y;
                                frontier_phi_73_pred_4 = _3124 * _2967.x;
                                frontier_phi_73_pred_5 = _3198 * _2979.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_73_pred;
                            _3203 = frontier_phi_73_pred_1;
                            _3207 = frontier_phi_73_pred_2;
                            _3206 = frontier_phi_73_pred_3;
                            _3205 = frontier_phi_73_pred_4;
                            _3204 = frontier_phi_73_pred_5;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2909;
                        frontier_phi_67_pred_1 = _2910;
                        frontier_phi_67_pred_2 = _2911;
                        frontier_phi_67_pred_3 = _2908;
                        frontier_phi_67_pred_4 = _2907;
                        frontier_phi_67_pred_5 = _2906;
                    }
                    _2574 = frontier_phi_67_pred;
                    _2576 = frontier_phi_67_pred_1;
                    _2578 = frontier_phi_67_pred_2;
                    _2572 = frontier_phi_67_pred_3;
                    _2570 = frontier_phi_67_pred_4;
                    _2568 = frontier_phi_67_pred_5;
                    uint _2713 = _2712 + 1u;
                    if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2706 = _2568;
                        _2707 = _2570;
                        _2708 = _2572;
                        _2709 = _2574;
                        _2710 = _2576;
                        _2711 = _2578;
                        _2712 = _2713;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2576;
                frontier_phi_55_56_ladder_1 = _2578;
                frontier_phi_55_56_ladder_2 = _2574;
                frontier_phi_55_56_ladder_3 = _2572;
                frontier_phi_55_56_ladder_4 = _2570;
                frontier_phi_55_56_ladder_5 = _2568;
            }
            else
            {
                frontier_phi_55_56_ladder = _2462;
                frontier_phi_55_56_ladder_1 = _2464;
                frontier_phi_55_56_ladder_2 = _2460;
                frontier_phi_55_56_ladder_3 = _2458;
                frontier_phi_55_56_ladder_4 = _2456;
                frontier_phi_55_56_ladder_5 = _2454;
            }
            _2567 = frontier_phi_55_56_ladder_5;
            _2569 = frontier_phi_55_56_ladder_4;
            _2571 = frontier_phi_55_56_ladder_3;
            _2573 = frontier_phi_55_56_ladder_2;
            _2575 = frontier_phi_55_56_ladder;
            _2577 = frontier_phi_55_56_ladder_1;
        }
        float _2582 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2366 = (_2582 * _2573) + _1799;
        _2368 = (_2582 * _2575) + _1801;
        _2370 = (_2582 * _2577) + _1803;
        _2372 = ((_2567 * _587) * _2582) + _2147;
        _2374 = ((_2569 * _589) * _2582) + _2149;
        _2376 = ((_2571 * _590) * _2582) + _2151;
    }
    else
    {
        _2366 = _1799;
        _2368 = _1801;
        _2370 = _1803;
        _2372 = _2147;
        _2374 = _2149;
        _2376 = _2151;
    }
    float _4233 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4244 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4255 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    uint _2396 = _562 + 6u;
    float _2404 = _523 / cbSceneParam._m0[86u].x;
    float _2405 = _524 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _457 : (isnan(_457) ? cbSceneParam._m0[77u].w : min(_457, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_457 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_457) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _457 : min(cbSceneParam._m0[80u].w, _457));
        float _2480 = _2479 / _457;
        float _2491 = _2480 * _508;
        float _2492 = _509 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2495 = _2480 * _510;
        float _2497 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2492;
        float _2505 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2493 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2628 = 1.0 / cbSceneParam._m0[80u].x;
            float _2629 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2630 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2639 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : min(_2629, 0.0));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            _2668 = ((abs(_2505 / _2493) * cbSceneParam._m0[80u].y) * ((((_2639 - _2640) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))))) * _2628)) - ((exp2(_2515 * _2639) - exp2(_2515 * _2640)) * _2628))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2424);
        _2517 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2519 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2521 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2523 = _2679 * _2424;
    }
    else
    {
        _2517 = _2421;
        _2519 = _2422;
        _2521 = _2423;
        _2523 = _2424;
    }
    float _2535 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2536 = _2535 == 3.0;
    float _2537 = log2(_2523);
    float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2366 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _602))) + ((_2372 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1412)) * cbPerFrame._m0[3u].x));
    float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2368 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _602))) + ((_2374 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1412)) * cbPerFrame._m0[3u].x));
    float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2370 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _602))) + ((_2376 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1412)) * cbPerFrame._m0[3u].x));
    float _2555 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2555 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.y = _2555 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
    SV_Target.z = _2555 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.w = cbInstanceData._m0[_2396].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
}


