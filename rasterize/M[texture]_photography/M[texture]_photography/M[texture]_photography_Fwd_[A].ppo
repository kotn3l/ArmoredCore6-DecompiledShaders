#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _986;
float _3371;
float _3372;
float _3373;
float _3374;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _249.x * cbMtdParam._m0[9u].x;
    float _255 = _249.y * cbMtdParam._m0[9u].y;
    float _256 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _305 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3383 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[10u].x) - _254)) + _254;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[10u].y) - _255)) + _255;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[10u].z) - _256)) + _256;
    float _347 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _350 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _347) * _306) + _347;
    vec4 _364 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _372 = (_364.x * 2.0) + (-1.0);
    float _374 = (_364.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_372, _374), vec2(_372, _374));
    float _3394 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))));
    float _381 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _402 = (_395.x * 2.0) + (-1.0);
    float _403 = (_395.y * 2.0) + (-1.0);
    float _404 = dot(vec2(_402, _403), vec2(_402, _403));
    float _3405 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _413 = (_306 * ((_395.z * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _420 = (_306 * (_402 - _372)) + _372;
    float _421 = (_306 * (_403 - _374)) + _374;
    float _422 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) - _380)) + _380;
    float _425 = fma(_422, _211 * NORMAL.x, fma(_421, _218 * TANGENT.x, (_204 * _196) * _420));
    float _428 = fma(_422, _211 * NORMAL.y, fma(_421, _218 * TANGENT.y, (_204 * _197) * _420));
    float _431 = fma(_422, _211 * NORMAL.z, fma(_421, _218 * TANGENT.z, (_204 * _198) * _420));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _3416 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _439 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3438 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3449 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3460 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _443 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _510 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _500);
    float _511 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _500);
    float _512 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _500);
    float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
    float _517 = _510 * _516;
    float _518 = _511 * _516;
    float _519 = _512 * _516;
    vec4 _524 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _526 = _524.w;
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _552 = fma(_438, cbSceneParam._m0[5u].z, fma(_437, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _436));
    float _555 = fma(_438, cbSceneParam._m0[6u].z, fma(_437, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _436));
    float _558 = fma(_438, cbSceneParam._m0[7u].z, fma(_437, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _436));
    uint _571 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _571 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3471 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _585 = 1.0 - _443;
    float _586 = _582 * _585;
    float _587 = _583 * _585;
    float _588 = _584 * _585;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _443;
    float _594 = (_583 + (-0.039999999105930328369140625)) * _443;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _443;
    float _596 = _593 + 0.039999999105930328369140625;
    float _598 = _594 + 0.039999999105930328369140625;
    float _599 = _595 + 0.039999999105930328369140625;
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _611 = _608.x * TEXCOORD_4.x;
    float _612 = dot(vec3(_436, _437, _438), vec3(_517, _518, _519));
    float _615 = _612 * 2.0;
    float _619 = (_615 * _436) - _517;
    float _620 = (_615 * _437) - _518;
    float _621 = (_615 * _438) - _519;
    float _625 = abs(dot(vec3(_517, _518, _519), vec3(_436, _437, _438)));
    float _3504 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _627 = sqrt(_439);
    float _640 = exp2((_627 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _646 = (1.0 - _640) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _647 = _640 * _627;
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _985;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _710 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _714 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _718 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _743 = _675 + _436;
        float _744 = _679 + _437;
        float _745 = _683 + _438;
        float _755 = fma(_745, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743)) - _710;
        float _756 = fma(_745, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743)) - _714;
        float _757 = fma(_745, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743)) - _718;
        float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
        float _774 = ((_761 * _755) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_710 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_761 * _756) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_714 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_761 * _757) / cbModelParam._m0[34u].z) + ((((((_718 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        float _813 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_779.x + (-0.5));
        float _815 = _813 * (_779.y + (-0.5));
        float _816 = _813 * (_779.z + (-0.5));
        float _823 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_786.x + (-0.5));
        float _825 = _823 * (_786.y + (-0.5));
        float _826 = _823 * (_786.z + (-0.5));
        float _833 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_793.x + (-0.5));
        float _835 = _833 * (_793.y + (-0.5));
        float _836 = _833 * (_793.z + (-0.5));
        float _843 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_800.x + (-0.5));
        float _845 = _843 * (_800.y + (-0.5));
        float _846 = _843 * (_800.z + (-0.5));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = _814 * 0.5;
        float _851 = _824 * 0.5;
        float _852 = _834 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _867 = (dot(vec3(_436, _437, _438), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _877 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3552 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_879 + 1.0))) + _884) * _847;
        float _894 = _815 * 0.5;
        float _895 = _825 * 0.5;
        float _896 = _835 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_436, _437, _438), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3585 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_921 + 1.0))) + _926) * _848;
        float _936 = _816 * 0.5;
        float _937 = _826 * 0.5;
        float _938 = _836 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_436, _437, _438), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3618 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_963 + 1.0))) + _968) * _849;
        _985 = _816;
        _987 = _815;
        _988 = _814;
        _989 = _826;
        _990 = _825;
        _991 = _824;
        _992 = _836;
        _993 = _835;
        _994 = _834;
        _995 = _849;
        _996 = _848;
        _997 = _847;
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
    }
    else
    {
        _985 = _986;
        _987 = _986;
        _988 = _986;
        _989 = _986;
        _990 = _986;
        _991 = _986;
        _992 = _986;
        _993 = _986;
        _994 = _986;
        _995 = _986;
        _996 = _986;
        _997 = _986;
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1030 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1034 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1057 = _675 + _436;
        float _1058 = _679 + _437;
        float _1059 = _683 + _438;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_436, _437, _438), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3681 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_436, _437, _438), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3714 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_436, _437, _438), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3747 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _986;
        _1296 = _986;
        _1297 = _986;
        _1298 = _986;
        _1299 = _986;
        _1300 = _986;
        _1301 = _986;
        _1302 = _986;
        _1303 = _986;
        _1304 = _986;
        _1305 = _986;
        _1306 = _986;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _619 * 0.5;
    float _1364 = _620 * 0.5;
    float _1365 = _621 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _989, _992, _995));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_987, _990, _993, _996));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_988, _991, _994, _997));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _439);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1495 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1498 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1526 = frontier_phi_14_12_ladder;
        }
        float _1732;
        if (_1495 > 0.0)
        {
            _1732 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1732 = frontier_phi_23_19_ladder;
        }
        float _1986;
        if (_1498 > 0.0)
        {
            _1986 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1986 = frontier_phi_35_30_ladder;
        }
        float _1988 = isnan(_1732) ? _1526 : (isnan(_1526) ? _1732 : min(_1526, _1732));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1492) + _1481;
        float _1994 = (_1989 * _1495) + _1485;
        float _1995 = (_1989 * _1498) + _1489;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_13_35_ladder = _2123.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2123.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2123.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_13_35_ladder_2;
        _1516 = frontier_phi_13_35_ladder_1;
        _1518 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1432);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _439);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1594 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1597 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1737;
        if (_1591 > 0.0)
        {
            _1737 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _2013;
        if (_1594 > 0.0)
        {
            _2013 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2013 = frontier_phi_37_32_ladder;
        }
        float _2226;
        if (_1597 > 0.0)
        {
            _2226 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2226 = frontier_phi_46_43_ladder;
        }
        float _2228 = isnan(_2013) ? _1737 : (isnan(_1737) ? _2013 : min(_1737, _2013));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1591) + _1580;
        float _2234 = (_2229 * _1594) + _1584;
        float _2235 = (_2229 * _1597) + _1588;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_22_46_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_22_46_ladder_2;
        _1618 = frontier_phi_22_46_ladder_1;
        _1620 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1523);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1633 = (((_646 * _596) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_646 * _598) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_646 * _599) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_571 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _611 + (-1.0);
    float _1671 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1672 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1675 = _1658 + 5u;
    float _1681 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1685 = _1658 + 4u;
    float _1691 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1695 = _1658 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_436, _437, _438));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_436, _437, _438));
    float _3883 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3894 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1675].x * _1681) * _1716) + ((cbLight._m0[_1685].x * _1691) * _1714);
    float _1724 = ((_1681 * cbLight._m0[_1675].y) * _1716) + ((_1691 * cbLight._m0[_1685].y) * _1714);
    float _1725 = ((_1681 * cbLight._m0[_1675].z) * _1716) + ((_1691 * cbLight._m0[_1685].z) * _1714);
    uvec4 _1729 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1731 = _1729.x == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1731)
    {
        _1742 = _1723;
        _1744 = _1724;
        _1746 = _1725;
    }
    else
    {
        uint _1750 = _1658 + 6u;
        float _1766 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _1767 = _1766 * _1766;
        float _3905 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1769 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1742 = (((cbLight._m0[_1750].x * 0.3183098733425140380859375) * _1768) * _1769) + _1723;
        _1744 = (((cbLight._m0[_1750].y * 0.3183098733425140380859375) * _1768) * _1769) + _1724;
        _1746 = (((cbLight._m0[_1750].z * 0.3183098733425140380859375) * _1768) * _1769) + _1725;
    }
    bool _1749 = _1729.y == 0u;
    float _1787;
    float _1789;
    float _1791;
    if (_1749)
    {
        _1787 = _1742;
        _1789 = _1744;
        _1791 = _1746;
    }
    else
    {
        uint _1957 = _1658 + 7u;
        float _1973 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _3921 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1976 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1787 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1742;
        _1789 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1744;
        _1791 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1746;
    }
    uint _1794 = _1658 + 8u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1658].w)) * _439) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1658].x + _517;
    float _1810 = cbLight._m0[_1658].y + _518;
    float _1811 = cbLight._m0[_1658].z + _519;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1658].xyz));
    float _3937 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1823 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1824 = dot(vec3(_436, _437, _438), vec3(_1816, _1817, _1818));
    float _3959 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1816, _1817, _1818));
    float _3970 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1808 * _1808;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
    float _1845 = 0.959999978542327880859375 - _593;
    float _1847 = 0.959999978542327880859375 - _594;
    float _1848 = 0.959999978542327880859375 - _595;
    float _1855 = 1.0 - _1808;
    float _1866 = (0.5 / (((_1823 * ((_1822 * _1855) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1855) + _1808) * _1822))) * _1822;
    float _3981 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    uint _1879 = _1658 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _439) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1695].x + _517;
    float _1893 = cbLight._m0[_1695].y + _518;
    float _1894 = cbLight._m0[_1695].z + _519;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1695].xyz));
    float _3992 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1906 = dot(vec3(_436, _437, _438), vec3(_1899, _1900, _1901));
    float _4003 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1899, _1900, _1901));
    float _4014 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1932 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1823 * ((_1905 * _1932) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1932) + _1891) * _1905))) * _1905;
    float _4025 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1954 = (((((_1925 * _1845) + _596) * cbLight._m0[_1879].x) * _1944) * _1681) + (((((_1844 * _1845) + _596) * cbLight._m0[_1794].x) * _1868) * _1691);
    float _1955 = (((((_1925 * _1847) + _598) * cbLight._m0[_1879].y) * _1944) * _1681) + (((((_1844 * _1847) + _598) * cbLight._m0[_1794].y) * _1868) * _1691);
    float _1956 = (((((_1925 * _1848) + _599) * cbLight._m0[_1879].z) * _1944) * _1681) + (((((_1844 * _1848) + _599) * cbLight._m0[_1794].z) * _1868) * _1691);
    float _2018;
    float _2020;
    float _2022;
    if (_1731)
    {
        _2018 = _1954;
        _2020 = _1955;
        _2022 = _1956;
    }
    else
    {
        uint _2024 = _1658 + 2u;
        uint _2028 = _1658 + 10u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _439) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _517;
        float _2045 = cbLight._m0[_2024].y + _518;
        float _2046 = cbLight._m0[_2024].z + _519;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2024].xyz));
        float _4036 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2058 = dot(vec3(_436, _437, _438), vec3(_2051, _2052, _2053));
        float _4047 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _4058 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1823 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2084) + _2043) * _2057))) * _2057;
        float _4069 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2018 = (((((_2077 * _1845) + _596) * cbLight._m0[_2028].x) * _2096) * _2097) + _1954;
        _2020 = (((((_2077 * _1847) + _598) * cbLight._m0[_2028].y) * _2096) * _2097) + _1955;
        _2022 = (((((_2077 * _1848) + _599) * cbLight._m0[_2028].z) * _2096) * _2097) + _1956;
    }
    float _2132;
    float _2134;
    float _2136;
    if (_1749)
    {
        _2132 = _2018;
        _2134 = _2020;
        _2136 = _2022;
    }
    else
    {
        uint _2143 = _1658 + 3u;
        uint _2147 = _1658 + 11u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _439) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _517;
        float _2164 = cbLight._m0[_2143].y + _518;
        float _2165 = cbLight._m0[_2143].z + _519;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2143].xyz));
        float _4085 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2177 = dot(vec3(_436, _437, _438), vec3(_2170, _2171, _2172));
        float _4096 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4107 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
        float _2203 = 1.0 - _2162;
        float _2213 = (0.5 / (((_1823 * ((_2176 * _2203) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2203) + _2162) * _2176))) * _2176;
        float _4118 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2132 = (((((_2196 * _1845) + _596) * cbLight._m0[_2147].x) * _2215) * _2216) + _2018;
        _2134 = (((((_2196 * _1847) + _598) * cbLight._m0[_2147].y) * _2215) * _2216) + _2020;
        _2136 = (((((_2196 * _1848) + _599) * cbLight._m0[_2147].z) * _2215) * _2216) + _2022;
    }
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_1656.y == 0u)
    {
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2291;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2291;
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2291;
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.x;
        uint _2318 = uint((float(_2306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2307))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2307)));
        float _2328 = (log2(_2294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2329 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        uint _2332 = uint(isnan(14.0) ? _2329 : (isnan(_2329) ? 14.0 : min(_2329, 14.0)));
        uvec4 _2337 = texelFetch(g_lightClusterGridBuffer, int(((_2332 << 2u) + (_2318 << 6u)) >> 2u));
        uint _2338 = _2337.x;
        uint _2339 = _2306.z;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((((1u << ((_2339 >> 4u) & 15u)) + 4294967295u) & _2338) == 0u) || ((_2339 & 240u) == 0u))
        {
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
        }
        else
        {
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2608)
                {
                    frontier_phi_63_pred = _2592;
                    frontier_phi_63_pred_1 = _2597;
                    frontier_phi_63_pred_2 = _2596;
                    frontier_phi_63_pred_3 = _2595;
                    frontier_phi_63_pred_4 = _2594;
                    frontier_phi_63_pred_5 = _2593;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2592;
                    _2739 = _2593;
                    _2740 = _2594;
                    _2741 = _2595;
                    _2742 = _2596;
                    _2743 = _2597;
                    _2744 = _2607;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2598 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        float _2804 = _2764.x - _2292;
                        float _2805 = _2764.y - _2293;
                        float _2806 = _2764.z - _2294;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_552, _555, _558), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2764.w);
                        float _4144 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2821 = sqrt(_2807) * _2783.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2814) + _2825;
                        float _2831 = _2821 * _2821;
                        float _2835 = ((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2820) / ((_2831 * 0.699999988079071044921875) + 1.0);
                        float _2839 = (-0.0) - _2292;
                        float _2840 = (-0.0) - _2293;
                        float _2841 = (-0.0) - _2294;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2856 = exp2(log2(1.0 / ((_2831 * 3.5) + 5.0)) * 0.25);
                        float _2857 = 1.0 - _627;
                        float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                        float _2865 = _2864 * _2864;
                        float _2866 = _2865 * _2865;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2877 = dot(vec3(_552, _555, _558), vec3(_2846, _2847, _2848));
                        float _4160 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2881 = dot(vec3(_552, _555, _558), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                        float _4171 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                        float _2889 = _2824 * _2865;
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2814) + _2890;
                        float _4182 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2895 = 1.0 - _2865;
                        float _2905 = (0.5 / (((_2894 * ((_2880 * _2895) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2865) * _2880))) * _2894;
                        float _4193 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2916 = (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_2888 * _2888) * ((_2831 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2667 = (_2835 * _2783.x) + _2741;
                        _2668 = (_2835 * _2783.y) + _2742;
                        _2669 = (_2835 * _2783.z) + _2743;
                        _2664 = (_2916 * _2800.x) + _2738;
                        _2665 = (_2916 * _2800.y) + _2739;
                        _2666 = (_2916 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2664;
                            _2739 = _2665;
                            _2740 = _2666;
                            _2741 = _2667;
                            _2742 = _2668;
                            _2743 = _2669;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_63_pred = _2664;
                    frontier_phi_63_pred_1 = _2669;
                    frontier_phi_63_pred_2 = _2668;
                    frontier_phi_63_pred_3 = _2667;
                    frontier_phi_63_pred_4 = _2666;
                    frontier_phi_63_pred_5 = _2665;
                }
                _2440 = frontier_phi_63_pred;
                _2450 = frontier_phi_63_pred_1;
                _2448 = frontier_phi_63_pred_2;
                _2446 = frontier_phi_63_pred_3;
                _2444 = frontier_phi_63_pred_4;
                _2442 = frontier_phi_63_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2440;
                    _2593 = _2442;
                    _2594 = _2444;
                    _2595 = _2446;
                    _2596 = _2448;
                    _2597 = _2450;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
        }
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.z;
        uint _2456 = (_2454 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2456) & _2338) == 0u)
        {
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
            _2568 = _2447;
            _2570 = _2449;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
            float _2586 = _2585 * _2292;
            float _2587 = _2585 * _2293;
            float _2588 = _2585 * _2294;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2456 < ((_2454 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2721 = _2439;
                float _2722 = _2441;
                float _2723 = _2443;
                float _2724 = _2445;
                float _2725 = _2447;
                float _2726 = _2449;
                uint _2727 = _2456;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2737)
                    {
                        frontier_phi_74_pred = _2726;
                        frontier_phi_74_pred_1 = _2725;
                        frontier_phi_74_pred_2 = _2724;
                        frontier_phi_74_pred_3 = _2723;
                        frontier_phi_74_pred_4 = _2722;
                        frontier_phi_74_pred_5 = _2721;
                    }
                    else
                    {
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _2945 = _2721;
                        float _2946 = _2722;
                        float _2947 = _2723;
                        float _2948 = _2724;
                        float _2949 = _2725;
                        float _2950 = _2726;
                        uint _2951 = _2736;
                        uint _2952;
                        vec4 _2977;
                        float _2978;
                        vec4 _2993;
                        vec3 _3005;
                        vec4 _3021;
                        vec4 _3037;
                        float _3084;
                        bool _3085;
                        for (;;)
                        {
                            uint _2962 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2951));
                            _2952 = (_2951 + 4294967295u) & _2951;
                            uint _2964 = _2962 * 40u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2978 = _2977.w;
                            uint _2980 = (_2962 * 40u) + 4u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2995 = (_2962 * 40u) + 8u;
                            _3005 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x));
                            uint _3008 = (_2962 * 40u) + 16u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3024 = (_2962 * 40u) + 20u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3040 = (_2962 * 40u) + 24u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3059 = (_2962 * 40u) + 28u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3084 = fma(_2294, _3072.z, fma(_2293, _3072.y, _3072.x * _2292)) + _3072.w;
                            _3085 = !((fma(_2294, _3053.z, fma(_2293, _3053.y, _3053.x * _2292)) + _3053.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3085)
                            {
                                float _3112 = _2977.x - _2292;
                                float _3113 = _2977.y - _2293;
                                float _3114 = _2977.z - _2294;
                                float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                                float _3118 = inversesqrt(_3115);
                                float _3119 = _3118 * _3112;
                                float _3120 = _3118 * _3113;
                                float _3121 = _3118 * _3114;
                                float _3125 = 1.0 - (_3115 / (_2978 * _2978));
                                float _4204 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3130 = sqrt(_3115) * _2993.w;
                                float _3132 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                                float _3133 = _3132 * _3132;
                                float _3136 = ((1.0 - _3133) * dot(vec3(_3119, _3120, _3121), vec3(_552, _555, _558))) + _3133;
                                float _3139 = _3130 * _3130;
                                float _3143 = (fma(_2294, _3021.z, fma(_2293, _3021.y, _3021.x * _2292)) + _3021.w) / _3084;
                                float _3144 = (fma(_2294, _3037.z, fma(_2293, _3037.y, _3037.x * _2292)) + _3037.w) / _3084;
                                float _3148 = 1.0 - dot(vec2(_3143, _3144), vec2(_3143, _3144));
                                float _4220 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3150 = _3149 * (((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3126) / ((_3139 * 0.699999988079071044921875) + 1.0));
                                float _3162 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                                float _3163 = 1.0 - _627;
                                float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                                float _3171 = _3170 * _3170;
                                float _3172 = _3171 * _3171;
                                float _3173 = _3119 - _2586;
                                float _3174 = _3120 - _2587;
                                float _3175 = _3121 - _2588;
                                float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                                float _3183 = dot(vec3(_552, _555, _558), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4231 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3186 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3187 = dot(vec3(_552, _555, _558), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                                float _4242 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3190 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                                float _3195 = _3132 * _3171;
                                float _3196 = _3195 * _3195;
                                float _3202 = ((1.0 - _3196) * dot(vec3(_552, _555, _558), vec3(_3119, _3120, _3121))) + _3196;
                                float _4253 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3204 = 1.0 - _3171;
                                float _3214 = (0.5 / (((_3203 * ((_3186 * _3204) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3171) * _3186))) * _3203;
                                float _4264 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3224 = (_3149 * _3126) * (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_3194 * _3194) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3150 * _2993.y;
                                frontier_phi_80_pred_1 = _3150 * _2993.x;
                                frontier_phi_80_pred_2 = _3224 * _3005.z;
                                frontier_phi_80_pred_3 = _3224 * _3005.y;
                                frontier_phi_80_pred_4 = _3224 * _3005.x;
                                frontier_phi_80_pred_5 = _3150 * _2993.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3232 = frontier_phi_80_pred;
                            _3231 = frontier_phi_80_pred_1;
                            _3230 = frontier_phi_80_pred_2;
                            _3229 = frontier_phi_80_pred_3;
                            _3228 = frontier_phi_80_pred_4;
                            _3233 = frontier_phi_80_pred_5;
                            _2935 = _3231 + _2948;
                            _2936 = _3232 + _2949;
                            _2937 = _3233 + _2950;
                            _2932 = _3228 + _2945;
                            _2933 = _3229 + _2946;
                            _2934 = _3230 + _2947;
                            if (_2952 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2952;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2937;
                        frontier_phi_74_pred_1 = _2936;
                        frontier_phi_74_pred_2 = _2935;
                        frontier_phi_74_pred_3 = _2934;
                        frontier_phi_74_pred_4 = _2933;
                        frontier_phi_74_pred_5 = _2932;
                    }
                    _2571 = frontier_phi_74_pred;
                    _2569 = frontier_phi_74_pred_1;
                    _2567 = frontier_phi_74_pred_2;
                    _2565 = frontier_phi_74_pred_3;
                    _2563 = frontier_phi_74_pred_4;
                    _2561 = frontier_phi_74_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2561;
                        _2722 = _2563;
                        _2723 = _2565;
                        _2724 = _2567;
                        _2725 = _2569;
                        _2726 = _2571;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2565;
                frontier_phi_55_56_ladder_1 = _2571;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2563;
                frontier_phi_55_56_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_55_56_ladder = _2443;
                frontier_phi_55_56_ladder_1 = _2449;
                frontier_phi_55_56_ladder_2 = _2447;
                frontier_phi_55_56_ladder_3 = _2445;
                frontier_phi_55_56_ladder_4 = _2441;
                frontier_phi_55_56_ladder_5 = _2439;
            }
            _2560 = frontier_phi_55_56_ladder_5;
            _2562 = frontier_phi_55_56_ladder_4;
            _2564 = frontier_phi_55_56_ladder;
            _2566 = frontier_phi_55_56_ladder_3;
            _2568 = frontier_phi_55_56_ladder_2;
            _2570 = frontier_phi_55_56_ladder_1;
        }
        float _2575 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
        _2351 = (_2575 * _2566) + _1787;
        _2353 = (_2575 * _2568) + _1789;
        _2355 = (_2575 * _2570) + _1791;
        _2357 = ((_2560 * _596) * _2575) + _2132;
        _2359 = ((_2562 * _598) * _2575) + _2134;
        _2361 = ((_2564 * _599) * _2575) + _2136;
    }
    else
    {
        _2351 = _1787;
        _2353 = _1789;
        _2355 = _1791;
        _2357 = _2132;
        _2359 = _2134;
        _2361 = _2136;
    }
    float _4280 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4291 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4302 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2378 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2351 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _611))) + ((_2357 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2379 = ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2353 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _611))) + ((_2359 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2380 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2355 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _611))) + ((_2361 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    uint _2381 = _571 + 6u;
    float _2389 = _532 / cbSceneParam._m0[86u].x;
    float _2390 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _2464 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _2465 = _2464 / _459;
        float _2476 = _2465 * _510;
        float _2477 = _511 * _2465;
        float _2478 = (-0.0) - _2477;
        float _2480 = _2465 * _512;
        float _2482 = (cbSceneParam._m0[77u].w * _2478) / _2464;
        float _2483 = _2482 + cbSceneParam._m0[79u].w;
        float _2484 = cbSceneParam._m0[79u].w - _2477;
        float _2490 = sqrt(((_2476 * _2476) + (_2477 * _2477)) + (_2480 * _2480));
        float _2493 = (1.0 - (cbSceneParam._m0[77u].w / _2464)) * _2490;
        float _2498 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2500 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2677;
        if (abs((_2478 - _2482) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2677 = ((((_2483 > 0.0) ? exp2(_2498 * _2483) : (2.0 - exp2(_2500 * _2483))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2493;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : max(_2483, _2484));
            float _2623 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : min(_2483, _2484));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2677 = ((abs(_2490 / _2478) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2498 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2498 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2500 * _2632) - exp2(_2500 * _2633)) * _2621))) + (_2493 * cbSceneParam._m0[80u].z);
        }
        vec4 _2679 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2688 = exp2((_2677 * (-1.44269502162933349609375)) * (1.0 - _2679.w));
        float _2689 = log2(_2688);
        float _2705 = log2(_2409);
        _2502 = (exp2(_2705 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].x)) * _2679.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2504 = (exp2(_2705 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].y)) * _2679.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2506 = (exp2(_2705 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].z)) * _2679.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2508 = _2688 * _2409;
    }
    else
    {
        _2502 = _2406;
        _2504 = _2407;
        _2506 = _2408;
        _2508 = _2409;
    }
    bool _2715;
    vec4 _2518;
    vec4 _2540;
    float _2542;
    float _2546;
    float _2547;
    float _2548;
    float _2549;
    bool _2559;
    for (;;)
    {
        _2518 = cbMatDynParam._m0[0u];
        float _2520 = roundEven(_2518.y);
        bool _2521 = _2520 == 3.0;
        float _2522 = log2(_2508);
        float _2529 = exp2(_2522 * cbSceneParam._m0[78u].x) * _2378;
        float _2530 = exp2(_2522 * cbSceneParam._m0[78u].y) * _2379;
        float _2531 = exp2(_2522 * cbSceneParam._m0[78u].z) * _2380;
        float _2538 = _526 + (-0.5);
        _2540 = cbMtdParam._m0[1u];
        _2542 = _2540.y * _2538;
        float _2545 = (_2520 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2546 = _2545 * (_2521 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2502)));
        _2547 = _2545 * (_2521 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2504)));
        _2548 = _2545 * (_2521 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2506)));
        _2549 = _2538 * 0.999000012874603271484375;
        _2559 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2559)
        {
            if ((cbInstanceData._m0[_571 + 7u].x + _2549) < 0.5)
            {
                _2715 = true;
                break;
            }
        }
        uint _2656 = _572 + uint(_2518.w);
        if ((cbInstanceData._m0[_2656].w < 1.0) && ((cbInstanceData._m0[_2656].w + _2549) < 0.5))
        {
            _2715 = true;
            break;
        }
        if ((_2542 + 1.0) < _2540.x)
        {
            _2715 = true;
            break;
        }
        _2715 = false;
        break;
    }
    float _2923;
    if (_2715)
    {
        discard_state = true;
        _2923 = 0.0;
    }
    else
    {
        _2923 = cbInstanceData._m0[_2381].w;
    }
    SV_Target.x = _2546;
    SV_Target.y = _2547;
    SV_Target.z = _2548;
    SV_Target.w = _2923;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
    discard_exit();
}


