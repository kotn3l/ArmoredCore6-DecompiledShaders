#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _979;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _249.x * cbMtdParam._m0[9u].x;
    float _255 = _249.y * cbMtdParam._m0[9u].y;
    float _256 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _305 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3597 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[10u].x) - _254)) + _254;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[10u].y) - _255)) + _255;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[10u].z) - _256)) + _256;
    float _347 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _350 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _347) * _306) + _347;
    vec4 _364 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _372 = (_364.x * 2.0) + (-1.0);
    float _374 = (_364.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_372, _374), vec2(_372, _374));
    float _3608 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))));
    float _381 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _402 = (_395.x * 2.0) + (-1.0);
    float _403 = (_395.y * 2.0) + (-1.0);
    float _404 = dot(vec2(_402, _403), vec2(_402, _403));
    float _3619 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _413 = (_306 * ((_395.z * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _420 = (_306 * (_402 - _372)) + _372;
    float _421 = (_306 * (_403 - _374)) + _374;
    float _422 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) - _380)) + _380;
    float _425 = fma(_422, _211 * NORMAL.x, fma(_421, _218 * TANGENT.x, (_204 * _196) * _420));
    float _428 = fma(_422, _211 * NORMAL.y, fma(_421, _218 * TANGENT.y, (_204 * _197) * _420));
    float _431 = fma(_422, _211 * NORMAL.z, fma(_421, _218 * TANGENT.z, (_204 * _198) * _420));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _3630 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _439 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3652 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3663 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3674 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _443 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _510 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _500);
    float _511 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _500);
    float _512 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _500);
    float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
    float _517 = _510 * _516;
    float _518 = _511 * _516;
    float _519 = _512 * _516;
    float _525 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _526 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _545 = fma(_438, cbSceneParam._m0[5u].z, fma(_437, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _436));
    float _548 = fma(_438, cbSceneParam._m0[6u].z, fma(_437, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _436));
    float _551 = fma(_438, cbSceneParam._m0[7u].z, fma(_437, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _436));
    uint _564 = uint(roundEven(NORMAL.w)) * 13u;
    uint _566 = (_564 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _572 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_566].x;
    float _573 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_566].y;
    float _574 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_566].z;
    float _3685 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _578 = 1.0 - _443;
    float _579 = _575 * _578;
    float _580 = _576 * _578;
    float _581 = _577 * _578;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _443;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _443;
    float _588 = (_577 + (-0.039999999105930328369140625)) * _443;
    float _589 = _586 + 0.039999999105930328369140625;
    float _591 = _587 + 0.039999999105930328369140625;
    float _592 = _588 + 0.039999999105930328369140625;
    vec4 _601 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _525, cbSceneParam._m0[86u].y * _526));
    float _604 = _601.x * TEXCOORD_4.x;
    float _605 = dot(vec3(_436, _437, _438), vec3(_517, _518, _519));
    float _608 = _605 * 2.0;
    float _612 = (_608 * _436) - _517;
    float _613 = (_608 * _437) - _518;
    float _614 = (_608 * _438) - _519;
    float _618 = abs(dot(vec3(_517, _518, _519), vec3(_436, _437, _438)));
    float _3718 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _620 = sqrt(_439);
    float _633 = exp2((_620 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_620 * 3.0));
    float _639 = (1.0 - _633) * ((_620 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _640 = _633 * _620;
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _978;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = fma(_676, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668));
        float _707 = fma(_676, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668));
        float _711 = fma(_676, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668));
        float _736 = _668 + _436;
        float _737 = _672 + _437;
        float _738 = _676 + _438;
        float _748 = fma(_738, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736)) - _703;
        float _749 = fma(_738, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736)) - _707;
        float _750 = fma(_738, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736)) - _711;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_703 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_707 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[34u].z) + ((((((_711 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _806 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_772.x + (-0.5));
        float _808 = _806 * (_772.y + (-0.5));
        float _809 = _806 * (_772.z + (-0.5));
        float _816 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_779.x + (-0.5));
        float _818 = _816 * (_779.y + (-0.5));
        float _819 = _816 * (_779.z + (-0.5));
        float _826 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_786.x + (-0.5));
        float _828 = _826 * (_786.y + (-0.5));
        float _829 = _826 * (_786.z + (-0.5));
        float _836 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_793.x + (-0.5));
        float _838 = _836 * (_793.y + (-0.5));
        float _839 = _836 * (_793.z + (-0.5));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = _807 * 0.5;
        float _844 = _817 * 0.5;
        float _845 = _827 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _860 = (dot(vec3(_436, _437, _438), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _870 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3766 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_872 + 1.0))) + _877) * _840;
        float _887 = _808 * 0.5;
        float _888 = _818 * 0.5;
        float _889 = _828 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_436, _437, _438), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3799 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_914 + 1.0))) + _919) * _841;
        float _929 = _809 * 0.5;
        float _930 = _819 * 0.5;
        float _931 = _829 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_436, _437, _438), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3832 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_956 + 1.0))) + _961) * _842;
        _978 = _809;
        _980 = _808;
        _981 = _807;
        _982 = _819;
        _983 = _818;
        _984 = _817;
        _985 = _829;
        _986 = _828;
        _987 = _827;
        _988 = _842;
        _989 = _841;
        _990 = _840;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
    }
    else
    {
        _978 = _979;
        _980 = _979;
        _981 = _979;
        _982 = _979;
        _983 = _979;
        _984 = _979;
        _985 = _979;
        _986 = _979;
        _987 = _979;
        _988 = _979;
        _989 = _979;
        _990 = _979;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1019 = fma(_676, cbModelParam._m0[30u].z, fma(_672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _668));
        float _1023 = fma(_676, cbModelParam._m0[31u].z, fma(_672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _668));
        float _1027 = fma(_676, cbModelParam._m0[32u].z, fma(_672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _668));
        float _1050 = _668 + _436;
        float _1051 = _672 + _437;
        float _1052 = _676 + _438;
        float _1062 = fma(_1052, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050)) - _1019;
        float _1063 = fma(_1052, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050)) - _1023;
        float _1064 = fma(_1052, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050)) - _1027;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1019 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1023 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[35u].z) + ((((((_1027 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1118 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1085.x + (-0.5));
        float _1120 = _1118 * (_1085.y + (-0.5));
        float _1121 = _1118 * (_1085.z + (-0.5));
        float _1128 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1092.x + (-0.5));
        float _1130 = _1128 * (_1092.y + (-0.5));
        float _1131 = _1128 * (_1092.z + (-0.5));
        float _1138 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1099.x + (-0.5));
        float _1140 = _1138 * (_1099.y + (-0.5));
        float _1141 = _1138 * (_1099.z + (-0.5));
        float _1148 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1106.x + (-0.5));
        float _1150 = _1148 * (_1106.y + (-0.5));
        float _1151 = _1148 * (_1106.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_436, _437, _438), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3895 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1182 + 1.0))) + _1187) * _1152;
        float _1197 = _1120 * 0.5;
        float _1198 = _1130 * 0.5;
        float _1199 = _1140 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_436, _437, _438), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3928 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1224 + 1.0))) + _1229) * _1153;
        float _1239 = _1121 * 0.5;
        float _1240 = _1131 * 0.5;
        float _1241 = _1141 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_436, _437, _438), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3961 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1266 + 1.0))) + _1271) * _1154;
        _1288 = _1121;
        _1289 = _1120;
        _1290 = _1119;
        _1291 = _1131;
        _1292 = _1130;
        _1293 = _1129;
        _1294 = _1141;
        _1295 = _1140;
        _1296 = _1139;
        _1297 = _1154;
        _1298 = _1153;
        _1299 = _1152;
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _979;
        _1289 = _979;
        _1290 = _979;
        _1291 = _979;
        _1292 = _979;
        _1293 = _979;
        _1294 = _979;
        _1295 = _979;
        _1296 = _979;
        _1297 = _979;
        _1298 = _979;
        _1299 = _979;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1335 = fma(_1314, cbSceneParam._m0[89u].z, fma(_1313, cbSceneParam._m0[89u].y, _1312 * cbSceneParam._m0[89u].x));
    float _1338 = fma(_1314, cbSceneParam._m0[90u].z, fma(_1313, cbSceneParam._m0[90u].y, _1312 * cbSceneParam._m0[90u].x));
    float _1341 = fma(_1314, cbSceneParam._m0[91u].z, fma(_1313, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1312));
    float _1356 = _612 * 0.5;
    float _1357 = _613 * 0.5;
    float _1358 = _614 * 0.5;
    float _1359 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1362 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1365 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1399;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1372 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_978, _982, _985, _988));
        float _1376 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_980, _983, _986, _989));
        float _1380 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_981, _984, _987, _990));
        float _1387 = dot(vec4(cbModelParam._m0[39u]), vec4(_1356, _1357, _1358, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1387) ? 0.0 : (isnan(0.0) ? _1387 : max(0.0, _1387))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1410;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1401 = dot(vec4(cbModelParam._m0[40u]), vec4(_1356, _1357, _1358, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1401) ? 0.0 : (isnan(0.0) ? _1401 : max(0.0, _1401))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1414 = (_1410 * cbModelParam._m0[1u].x) + (_1399 * (1.0 - cbModelParam._m0[1u].x));
    float _1424 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _439);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1424 : min(cbModelParam._m0[25u].z, _1424));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1474 = fma(_676, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668)) + cbModelParam._m0[13u].w;
        float _1478 = fma(_676, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668)) + cbModelParam._m0[14u].w;
        float _1482 = fma(_676, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668)) + cbModelParam._m0[15u].w;
        float _1485 = fma(_614, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612));
        float _1488 = fma(_614, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612));
        float _1491 = fma(_614, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612));
        float _1519;
        if (_1485 > 0.0)
        {
            _1519 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1519 = frontier_phi_14_12_ladder;
        }
        float _1694;
        if (_1488 > 0.0)
        {
            _1694 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1694 = frontier_phi_23_19_ladder;
        }
        float _1989;
        if (_1491 > 0.0)
        {
            _1989 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1989 = frontier_phi_35_30_ladder;
        }
        float _1991 = isnan(_1694) ? _1519 : (isnan(_1519) ? _1694 : min(_1519, _1694));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1485) + _1474;
        float _1997 = (_1992 * _1488) + _1478;
        float _1998 = (_1992 * _1491) + _1482;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _1999;
        float _2003 = _1999 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 > _2003) || ((_1997 < _2001) || ((_1996 < _2001) || (_1996 > _2003))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1998, cbModelParam._m0[9u].z, fma(_1997, cbModelParam._m0[9u].y, _1996 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1998, cbModelParam._m0[10u].z, fma(_1997, cbModelParam._m0[10u].y, _1996 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1998, cbModelParam._m0[11u].z, fma(_1997, cbModelParam._m0[11u].y, _1996 * cbModelParam._m0[11u].x))), _1425);
            frontier_phi_13_35_ladder = _2143.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2143.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2143.x * cbModelParam._m0[1u].y;
        }
        _1507 = frontier_phi_13_35_ladder_2;
        _1509 = frontier_phi_13_35_ladder_1;
        _1511 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_612, _613, _614), _1425);
        _1507 = _1495.x * cbModelParam._m0[1u].y;
        _1509 = _1495.y * cbModelParam._m0[1u].y;
        _1511 = _1495.z * cbModelParam._m0[1u].y;
    }
    float _1515 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _439);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1515 : min(cbModelParam._m0[25u].w, _1515));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1573 = fma(_676, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668)) + cbModelParam._m0[21u].w;
        float _1577 = fma(_676, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668)) + cbModelParam._m0[22u].w;
        float _1581 = fma(_676, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668)) + cbModelParam._m0[23u].w;
        float _1584 = fma(_614, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612));
        float _1587 = fma(_614, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612));
        float _1590 = fma(_614, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612));
        float _1699;
        if (_1584 > 0.0)
        {
            _1699 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1699 = frontier_phi_25_21_ladder;
        }
        float _2016;
        if (_1587 > 0.0)
        {
            _2016 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2016 = frontier_phi_37_32_ladder;
        }
        float _2354;
        if (_1590 > 0.0)
        {
            _2354 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2354 = frontier_phi_47_44_ladder;
        }
        float _2356 = isnan(_2016) ? _1699 : (isnan(_1699) ? _2016 : min(_1699, _2016));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1584) + _1573;
        float _2362 = (_2357 * _1587) + _1577;
        float _2363 = (_2357 * _1590) + _1581;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2364;
        float _2367 = _2364 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2363 > _2367) || ((_2363 < _2365) || ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 < _2365) || (_2361 > _2367))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2363, cbModelParam._m0[17u].z, fma(_2362, cbModelParam._m0[17u].y, _2361 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2363, cbModelParam._m0[18u].z, fma(_2362, cbModelParam._m0[18u].y, _2361 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2363, cbModelParam._m0[19u].z, fma(_2362, cbModelParam._m0[19u].y, _2361 * cbModelParam._m0[19u].x))), _1516);
            frontier_phi_22_47_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1609 = frontier_phi_22_47_ladder_2;
        _1611 = frontier_phi_22_47_ladder_1;
        _1613 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_612, _613, _614), _1516);
        _1609 = _1593.x * cbModelParam._m0[1u].z;
        _1611 = _1593.y * cbModelParam._m0[1u].z;
        _1613 = _1593.z * cbModelParam._m0[1u].z;
    }
    float _1626 = (((_639 * _589) + _640) * _604) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1628 = (((_639 * _591) + _640) * _604) * ((cbModelParam._m0[1u].w * (_1611 - _1509)) + _1509);
    float _1630 = (((_639 * _592) + _640) * _604) * ((cbModelParam._m0[1u].w * (_1613 - _1511)) + _1511);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, _1626 * cbSceneParam._m0[91u].x));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1685 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1686 = _1673 / _1685;
    float _1687 = _1677 / _1685;
    float _1688 = _1681 / _1685;
    float _1835;
    float _1836;
    float _1837;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1715 = ((uint(_1688 > cbSceneParam._m0[59u].y) + uint(_1688 > cbSceneParam._m0[59u].x)) + uint(_1688 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1716 = _1715 + 43u;
        uint _1724 = _1715 + 44u;
        uint _1732 = _1715 + 45u;
        uint _1740 = _1715 + 46u;
        float _1751 = fma(_1685, cbSceneParam._m0[_1716].w, fma(_1681, cbSceneParam._m0[_1716].z, fma(_1677, cbSceneParam._m0[_1716].y, _1673 * cbSceneParam._m0[_1716].x)));
        float _1755 = fma(_1685, cbSceneParam._m0[_1724].w, fma(_1681, cbSceneParam._m0[_1724].z, fma(_1677, cbSceneParam._m0[_1724].y, _1673 * cbSceneParam._m0[_1724].x)));
        float _1763 = fma(_1685, cbSceneParam._m0[_1740].w, fma(_1681, cbSceneParam._m0[_1740].z, fma(_1677, cbSceneParam._m0[_1740].y, _1673 * cbSceneParam._m0[_1740].x)));
        float _1768 = cbSceneParam._m0[33u].z * _1763;
        float _1770 = cbSceneParam._m0[33u].w * _1763;
        float _1773 = fma(_1685, cbSceneParam._m0[_1732].w, fma(_1681, cbSceneParam._m0[_1732].z, fma(_1677, cbSceneParam._m0[_1732].y, _1673 * cbSceneParam._m0[_1732].x))) / _1763;
        float _1821 = (cbSceneParam._m0[33u].x - sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688))) * cbSceneParam._m0[33u].y;
        float _4087 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1828 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 + _1751) / _1763, (_1770 + _1755) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 + _1751) / _1763, (_1755 - _1768) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 - _1768) / _1763, (_1755 - _1770) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 - _1770) / _1763, (_1768 + _1755) / _1763), _1773), 0.0)).x), vec4(0.25)));
        _1835 = 1.0 - (_1828 * cbSceneParam._m0[34u].x);
        _1836 = 1.0 - (_1828 * cbSceneParam._m0[34u].y);
        _1837 = 1.0 - (_1828 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1835 = 1.0;
        _1836 = 1.0;
        _1837 = 1.0;
    }
    float _1901;
    float _1903;
    float _1905;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1889 = fma(_1685, cbSceneParam._m0[63u].w, fma(_1681, cbSceneParam._m0[63u].z, fma(_1677, cbSceneParam._m0[63u].y, _1673 * cbSceneParam._m0[63u].x)));
        float _1890 = fma(_1685, cbSceneParam._m0[60u].w, fma(_1681, cbSceneParam._m0[60u].z, fma(_1677, cbSceneParam._m0[60u].y, _1673 * cbSceneParam._m0[60u].x))) / _1889;
        float _1891 = fma(_1685, cbSceneParam._m0[61u].w, fma(_1681, cbSceneParam._m0[61u].z, fma(_1677, cbSceneParam._m0[61u].y, _1673 * cbSceneParam._m0[61u].x))) / _1889;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1890 >= cbSceneParam._m0[64u].x) && (_1891 >= cbSceneParam._m0[64u].y)) && (_1890 <= cbSceneParam._m0[64u].z)) && (_1891 <= cbSceneParam._m0[64u].w))
        {
            float _2029 = fma(_1685, cbSceneParam._m0[62u].w, fma(_1681, cbSceneParam._m0[62u].z, fma(_1677, cbSceneParam._m0[62u].y, _1673 * cbSceneParam._m0[62u].x))) / _1889;
            float _2033 = isnan(cbSceneParam._m0[41u].w) ? _2029 : (isnan(_2029) ? cbSceneParam._m0[41u].w : max(_2029, cbSceneParam._m0[41u].w));
            float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688))) * cbSceneParam._m0[33u].y;
            float _4103 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
            float _2083 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1890, cbSceneParam._m0[33u].w + _1891), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1890, _1891 - cbSceneParam._m0[33u].z), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1890 - cbSceneParam._m0[33u].z, _1891 - cbSceneParam._m0[33u].w), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1890 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1891), _2033), 0.0)).x), vec4(0.25)));
            float _2087 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
            float _2088 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
            float _2089 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2089) ? _1837 : (isnan(_1837) ? _2089 : min(_1837, _2089));
            frontier_phi_34_33_ladder_1 = isnan(_2088) ? _1836 : (isnan(_1836) ? _2088 : min(_1836, _2088));
            frontier_phi_34_33_ladder_2 = isnan(_2087) ? _1835 : (isnan(_1835) ? _2087 : min(_1835, _2087));
        }
        else
        {
            frontier_phi_34_33_ladder = _1837;
            frontier_phi_34_33_ladder_1 = _1836;
            frontier_phi_34_33_ladder_2 = _1835;
        }
        _1901 = frontier_phi_34_33_ladder_2;
        _1903 = frontier_phi_34_33_ladder_1;
        _1905 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1901 = _1835;
        _1903 = _1836;
        _1905 = _1837;
    }
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_564 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _604 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1948 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1952 = _1912 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_436, _437, _438));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_436, _437, _438));
    float _4139 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _4150 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1929].x * _1935) * _1973) + (((cbLight._m0[_1939].x * _1901) * _1948) * _1971);
    float _1981 = ((_1935 * cbLight._m0[_1929].y) * _1973) + (((cbLight._m0[_1939].y * _1903) * _1948) * _1971);
    float _1982 = ((_1935 * cbLight._m0[_1929].z) * _1973) + (((cbLight._m0[_1939].z * _1905) * _1948) * _1971);
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_1988)
    {
        _2090 = _1980;
        _2092 = _1981;
        _2094 = _1982;
    }
    else
    {
        uint _2098 = _1912 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4161 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2117 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _1980;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _1981;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _1982;
    }
    bool _2097 = _1986.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2097)
    {
        _2152 = _2090;
        _2154 = _2092;
        _2156 = _2094;
    }
    else
    {
        uint _2325 = _1912 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4177 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2344 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2152 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2090;
        _2154 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2092;
        _2156 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2094;
    }
    uint _2159 = _1912 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _439) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1912].x + _517;
    float _2175 = cbLight._m0[_1912].y + _518;
    float _2176 = cbLight._m0[_1912].z + _519;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1912].xyz));
    float _4193 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2188 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2189 = dot(vec3(_436, _437, _438), vec3(_2181, _2182, _2183));
    float _4215 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2181, _2182, _2183));
    float _4226 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _586;
    float _2212 = 0.959999978542327880859375 - _587;
    float _2213 = 0.959999978542327880859375 - _588;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4237 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2247 = _1912 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _439) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_1952].x + _517;
    float _2261 = cbLight._m0[_1952].y + _518;
    float _2262 = cbLight._m0[_1952].z + _519;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1952].xyz));
    float _4248 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2274 = dot(vec3(_436, _437, _438), vec3(_2267, _2268, _2269));
    float _4259 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2267, _2268, _2269));
    float _4270 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2188 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2300) + _2259) * _2273))) * _2273;
    float _4281 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2210) + _589) * cbLight._m0[_2247].x) * _2312) * _1935) + ((((cbLight._m0[_2159].x * _1901) * ((_2209 * _2210) + _589)) * _2233) * _1948);
    float _2323 = (((((_2293 * _2212) + _591) * cbLight._m0[_2247].y) * _2312) * _1935) + ((((cbLight._m0[_2159].y * _1903) * ((_2209 * _2212) + _591)) * _2233) * _1948);
    float _2324 = (((((_2293 * _2213) + _592) * cbLight._m0[_2247].z) * _2312) * _1935) + ((((cbLight._m0[_2159].z * _1905) * ((_2209 * _2213) + _592)) * _2233) * _1948);
    float _2380;
    float _2382;
    float _2384;
    if (_1988)
    {
        _2380 = _2322;
        _2382 = _2323;
        _2384 = _2324;
    }
    else
    {
        uint _2386 = _1912 + 2u;
        uint _2390 = _1912 + 10u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _439) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _517;
        float _2407 = cbLight._m0[_2386].y + _518;
        float _2408 = cbLight._m0[_2386].z + _519;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2386].xyz));
        float _4292 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2420 = dot(vec3(_436, _437, _438), vec3(_2413, _2414, _2415));
        float _4303 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4314 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2188 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2446) + _2405) * _2419))) * _2419;
        float _4325 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2380 = (((((_2439 * _2210) + _589) * cbLight._m0[_2390].x) * _2458) * _2459) + _2322;
        _2382 = (((((_2439 * _2212) + _591) * cbLight._m0[_2390].y) * _2458) * _2459) + _2323;
        _2384 = (((((_2439 * _2213) + _592) * cbLight._m0[_2390].z) * _2458) * _2459) + _2324;
    }
    float _2490;
    float _2492;
    float _2494;
    if (_2097)
    {
        _2490 = _2380;
        _2492 = _2382;
        _2494 = _2384;
    }
    else
    {
        uint _2501 = _1912 + 3u;
        uint _2505 = _1912 + 11u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _439) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _517;
        float _2522 = cbLight._m0[_2501].y + _518;
        float _2523 = cbLight._m0[_2501].z + _519;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2501].xyz));
        float _4341 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2535 = dot(vec3(_436, _437, _438), vec3(_2528, _2529, _2530));
        float _4352 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4363 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2561 = 1.0 - _2520;
        float _2571 = (0.5 / (((_2188 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2561) + _2520) * _2534))) * _2534;
        float _4374 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2490 = (((((_2554 * _2210) + _589) * cbLight._m0[_2505].x) * _2573) * _2574) + _2380;
        _2492 = (((((_2554 * _2212) + _591) * cbLight._m0[_2505].y) * _2573) * _2574) + _2382;
        _2494 = (((((_2554 * _2213) + _592) * cbLight._m0[_2505].z) * _2573) * _2574) + _2384;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1910.y == 0u)
    {
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _526) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _525) / _2596)));
        float _2617 = (log2(_1688 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2868)
                {
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2856;
                    frontier_phi_66_pred_2 = _2855;
                    frontier_phi_66_pred_3 = _2854;
                    frontier_phi_66_pred_4 = _2853;
                    frontier_phi_66_pred_5 = _2852;
                }
                else
                {
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    uint _2982;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2867;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2986 = uint(findLSB(_2982)) + (_2858 << 5u);
                        uint _2983 = (_2982 + 4294967295u) & _2982;
                        uint _2988 = _2986 * 48u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3008 = (_2986 * 48u) + 4u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3027 = (_2986 * 48u) + 8u;
                        vec3 _3038 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x));
                        float _3042 = _3002.x - _1686;
                        float _3043 = _3002.y - _1687;
                        float _3044 = _3002.z - _1688;
                        float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                        float _3048 = inversesqrt(_3045);
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3052 = dot(vec3(_545, _548, _551), vec3(_3049, _3050, _3051));
                        float _3057 = 1.0 - (_3045 * _3002.w);
                        float _4400 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3059 = sqrt(_3045) * _3021.w;
                        float _3062 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _3052) + _3063;
                        float _3069 = _3059 * _3059;
                        float _3073 = ((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3058) / ((_3069 * 0.699999988079071044921875) + 1.0);
                        float _3077 = (-0.0) - _1686;
                        float _3078 = (-0.0) - _1687;
                        float _3079 = (-0.0) - _1688;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3093 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _620;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3084 + _3049;
                        float _3105 = _3085 + _3050;
                        float _3106 = _3086 + _3051;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_545, _548, _551), vec3(_3084, _3085, _3086));
                        float _4416 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3118 = dot(vec3(_545, _548, _551), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4427 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3062 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3052) + _3127;
                        float _4438 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4449 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3125 * _3125) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3058;
                        _2911 = (_3073 * _3021.x) + _2979;
                        _2912 = (_3073 * _3021.y) + _2980;
                        _2913 = (_3073 * _3021.z) + _2981;
                        _2908 = (_3153 * _3038.x) + _2976;
                        _2909 = (_3153 * _3038.y) + _2977;
                        _2910 = (_3153 * _3038.z) + _2978;
                        if (_2983 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2983;
                        }
                    }
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2912;
                    frontier_phi_66_pred_2 = _2911;
                    frontier_phi_66_pred_3 = _2910;
                    frontier_phi_66_pred_4 = _2909;
                    frontier_phi_66_pred_5 = _2908;
                }
                _2718 = frontier_phi_66_pred;
                _2716 = frontier_phi_66_pred_1;
                _2714 = frontier_phi_66_pred_2;
                _2712 = frontier_phi_66_pred_3;
                _2710 = frontier_phi_66_pred_4;
                _2708 = frontier_phi_66_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2708;
                    _2853 = _2710;
                    _2854 = _2712;
                    _2855 = _2714;
                    _2856 = _2716;
                    _2857 = _2718;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2724) & _2627) == 0u)
        {
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
            float _2846 = _2845 * _1686;
            float _2847 = _2845 * _1687;
            float _2848 = _2845 * _1688;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2959 = _2707;
                float _2960 = _2709;
                float _2961 = _2711;
                float _2962 = _2713;
                float _2963 = _2715;
                float _2964 = _2717;
                uint _2965 = _2724;
                uint _2974;
                bool _2975;
                for (;;)
                {
                    _2974 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                    _2975 = _2974 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2975)
                    {
                        frontier_phi_72_pred = _2964;
                        frontier_phi_72_pred_1 = _2963;
                        frontier_phi_72_pred_2 = _2962;
                        frontier_phi_72_pred_3 = _2961;
                        frontier_phi_72_pred_4 = _2960;
                        frontier_phi_72_pred_5 = _2959;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        uint _3177 = _2974;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3247;
                        vec4 _3263;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3188 = ((_2965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3234 = (_3188 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3250 = (_3188 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3188 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3188 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_1688, _3298.z, fma(_1687, _3298.y, _3298.x * _1686)) + _3298.w;
                            _3311 = !((fma(_1688, _3279.z, fma(_1687, _3279.y, _3279.x * _1686)) + _3279.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3203.x - _1686;
                                float _3339 = _3203.y - _1687;
                                float _3340 = _3203.z - _1688;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3204 * _3204));
                                float _4460 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3356 = sqrt(_3341) * _3219.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_545, _548, _551))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_1688, _3247.z, fma(_1687, _3247.y, _3247.x * _1686)) + _3247.w) / _3310;
                                float _3370 = (fma(_1688, _3263.z, fma(_1687, _3263.y, _3263.x * _1686)) + _3263.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4476 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _620;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2846;
                                float _3400 = _3346 - _2847;
                                float _3401 = _3347 - _2848;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4487 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3413 = dot(vec3(_545, _548, _551), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4498 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_545, _548, _551), vec3(_3345, _3346, _3347))) + _3422;
                                float _4509 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4520 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3376 * _3219.y;
                                frontier_phi_78_pred_1 = _3376 * _3219.x;
                                frontier_phi_78_pred_2 = _3450 * _3231.z;
                                frontier_phi_78_pred_3 = _3450 * _3231.y;
                                frontier_phi_78_pred_4 = _3450 * _3231.x;
                                frontier_phi_78_pred_5 = _3376 * _3219.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3458 = frontier_phi_78_pred;
                            _3457 = frontier_phi_78_pred_1;
                            _3456 = frontier_phi_78_pred_2;
                            _3455 = frontier_phi_78_pred_3;
                            _3454 = frontier_phi_78_pred_4;
                            _3459 = frontier_phi_78_pred_5;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3160 = _3456 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3163;
                        frontier_phi_72_pred_1 = _3162;
                        frontier_phi_72_pred_2 = _3161;
                        frontier_phi_72_pred_3 = _3160;
                        frontier_phi_72_pred_4 = _3159;
                        frontier_phi_72_pred_5 = _3158;
                    }
                    _2831 = frontier_phi_72_pred;
                    _2829 = frontier_phi_72_pred_1;
                    _2827 = frontier_phi_72_pred_2;
                    _2825 = frontier_phi_72_pred_3;
                    _2823 = frontier_phi_72_pred_4;
                    _2821 = frontier_phi_72_pred_5;
                    uint _2966 = _2965 + 1u;
                    if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2959 = _2821;
                        _2960 = _2823;
                        _2961 = _2825;
                        _2962 = _2827;
                        _2963 = _2829;
                        _2964 = _2831;
                        _2965 = _2966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2831;
                frontier_phi_60_61_ladder_1 = _2829;
                frontier_phi_60_61_ladder_2 = _2825;
                frontier_phi_60_61_ladder_3 = _2823;
                frontier_phi_60_61_ladder_4 = _2821;
                frontier_phi_60_61_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_60_61_ladder = _2717;
                frontier_phi_60_61_ladder_1 = _2715;
                frontier_phi_60_61_ladder_2 = _2711;
                frontier_phi_60_61_ladder_3 = _2709;
                frontier_phi_60_61_ladder_4 = _2707;
                frontier_phi_60_61_ladder_5 = _2713;
            }
            _2820 = frontier_phi_60_61_ladder_4;
            _2822 = frontier_phi_60_61_ladder_3;
            _2824 = frontier_phi_60_61_ladder_2;
            _2826 = frontier_phi_60_61_ladder_5;
            _2828 = frontier_phi_60_61_ladder_1;
            _2830 = frontier_phi_60_61_ladder;
        }
        float _2835 = isnan(1.0) ? _604 : (isnan(_604) ? 1.0 : min(_604, 1.0));
        _2640 = (_2835 * _2826) + _2152;
        _2642 = (_2835 * _2828) + _2154;
        _2644 = (_2835 * _2830) + _2156;
        _2646 = ((_2820 * _589) * _2835) + _2490;
        _2648 = ((_2822 * _591) * _2835) + _2492;
        _2650 = ((_2824 * _592) * _2835) + _2494;
    }
    else
    {
        _2640 = _2152;
        _2642 = _2154;
        _2644 = _2156;
        _2646 = _2490;
        _2648 = _2492;
        _2650 = _2494;
    }
    float _4536 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4547 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4558 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    uint _2670 = _564 + 6u;
    float _2678 = _525 / cbSceneParam._m0[86u].x;
    float _2679 = _526 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _2733 = _2732 / _459;
        float _2744 = _2733 * _510;
        float _2745 = _511 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2748 = _2733 * _512;
        float _2750 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2745;
        float _2758 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2746 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2883 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2921 = ((abs(_2758 / _2746) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2768 * _2892) - exp2(_2768 * _2893)) * _2881))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2698);
        _2770 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2772 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2774 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2776 = _2932 * _2698;
    }
    else
    {
        _2770 = _2695;
        _2772 = _2696;
        _2774 = _2697;
        _2776 = _2698;
    }
    float _2788 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2789 = _2788 == 3.0;
    float _2790 = log2(_2776);
    float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2640 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _604))) + ((_2646 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1414)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2642 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _604))) + ((_2648 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1414)) * cbPerFrame._m0[3u].x));
    float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2644 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _604))) + ((_2650 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1414)) * cbPerFrame._m0[3u].x));
    float _2808 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2808 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.y = _2808 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.z = _2808 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.w = cbInstanceData._m0[_2670].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
}


