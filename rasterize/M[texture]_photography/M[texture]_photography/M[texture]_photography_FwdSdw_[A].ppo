#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _990;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _253.x * cbMtdParam._m0[9u].x;
    float _259 = _253.y * cbMtdParam._m0[9u].y;
    float _260 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _309 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3670 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[10u].x) - _258)) + _258;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[10u].y) - _259)) + _259;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[10u].z) - _260)) + _260;
    float _351 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _354 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _351) * _310) + _351;
    vec4 _368 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = (_368.x * 2.0) + (-1.0);
    float _378 = (_368.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_376, _378), vec2(_376, _378));
    float _3681 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _385 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _406 = (_399.x * 2.0) + (-1.0);
    float _407 = (_399.y * 2.0) + (-1.0);
    float _408 = dot(vec2(_406, _407), vec2(_406, _407));
    float _3692 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _417 = (_310 * ((_399.z * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _424 = (_310 * (_406 - _376)) + _376;
    float _425 = (_310 * (_407 - _378)) + _378;
    float _426 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) - _384)) + _384;
    float _429 = fma(_426, _215 * NORMAL.x, fma(_425, _222 * TANGENT.x, (_208 * _200) * _424));
    float _432 = fma(_426, _215 * NORMAL.y, fma(_425, _222 * TANGENT.y, (_208 * _201) * _424));
    float _435 = fma(_426, _215 * NORMAL.z, fma(_425, _222 * TANGENT.z, (_208 * _202) * _424));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    float _440 = _439 * _429;
    float _441 = _439 * _432;
    float _442 = _439 * _435;
    float _3703 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _443 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3725 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3736 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3747 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _447 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _463 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _514 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _504);
    float _515 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _504);
    float _516 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _504);
    float _520 = inversesqrt(dot(vec3(_514, _515, _516), vec3(_514, _515, _516)));
    float _521 = _514 * _520;
    float _522 = _515 * _520;
    float _523 = _516 * _520;
    vec4 _528 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _530 = _528.w;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_442, cbSceneParam._m0[5u].z, fma(_441, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _440));
    float _559 = fma(_442, cbSceneParam._m0[6u].z, fma(_441, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _440));
    float _562 = fma(_442, cbSceneParam._m0[7u].z, fma(_441, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _440));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = _575 + 9u;
    uint _577 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_577].z;
    float _3758 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _589 = 1.0 - _447;
    float _590 = _586 * _589;
    float _591 = _587 * _589;
    float _592 = _588 * _589;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _447;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _447;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _447;
    float _600 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _615 = _612.x * TEXCOORD_4.x;
    float _616 = dot(vec3(_440, _441, _442), vec3(_521, _522, _523));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _440) - _521;
    float _624 = (_619 * _441) - _522;
    float _625 = (_619 * _442) - _523;
    float _629 = abs(dot(vec3(_521, _522, _523), vec3(_440, _441, _442)));
    float _3791 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_443);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _650 = (1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _651 = _644 * _631;
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _989;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _718 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _722 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _747 = _679 + _440;
        float _748 = _683 + _441;
        float _749 = _687 + _442;
        float _759 = fma(_749, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747)) - _714;
        float _760 = fma(_749, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747)) - _718;
        float _761 = fma(_749, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747)) - _722;
        float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
        float _778 = ((_765 * _759) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_714 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_765 * _760) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_718 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_765 * _761) / cbModelParam._m0[34u].z) + ((((((_722 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        float _817 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_783.x + (-0.5));
        float _819 = _817 * (_783.y + (-0.5));
        float _820 = _817 * (_783.z + (-0.5));
        float _827 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_790.x + (-0.5));
        float _829 = _827 * (_790.y + (-0.5));
        float _830 = _827 * (_790.z + (-0.5));
        float _837 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_797.x + (-0.5));
        float _839 = _837 * (_797.y + (-0.5));
        float _840 = _837 * (_797.z + (-0.5));
        float _847 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_804.x + (-0.5));
        float _849 = _847 * (_804.y + (-0.5));
        float _850 = _847 * (_804.z + (-0.5));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = _818 * 0.5;
        float _855 = _828 * 0.5;
        float _856 = _838 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _871 = (dot(vec3(_440, _441, _442), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _881 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3839 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_883 + 1.0))) + _888) * _851;
        float _898 = _819 * 0.5;
        float _899 = _829 * 0.5;
        float _900 = _839 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_440, _441, _442), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3872 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_925 + 1.0))) + _930) * _852;
        float _940 = _820 * 0.5;
        float _941 = _830 * 0.5;
        float _942 = _840 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_440, _441, _442), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3905 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_967 + 1.0))) + _972) * _853;
        _989 = _820;
        _991 = _819;
        _992 = _818;
        _993 = _830;
        _994 = _829;
        _995 = _828;
        _996 = _840;
        _997 = _839;
        _998 = _838;
        _999 = _853;
        _1000 = _852;
        _1001 = _851;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
    }
    else
    {
        _989 = _990;
        _991 = _990;
        _992 = _990;
        _993 = _990;
        _994 = _990;
        _995 = _990;
        _996 = _990;
        _997 = _990;
        _998 = _990;
        _999 = _990;
        _1000 = _990;
        _1001 = _990;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1034 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1038 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1061 = _679 + _440;
        float _1062 = _683 + _441;
        float _1063 = _687 + _442;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_440, _441, _442), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3968 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_440, _441, _442), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4001 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_440, _441, _442), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4034 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _990;
        _1300 = _990;
        _1301 = _990;
        _1302 = _990;
        _1303 = _990;
        _1304 = _990;
        _1305 = _990;
        _1306 = _990;
        _1307 = _990;
        _1308 = _990;
        _1309 = _990;
        _1310 = _990;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _623 * 0.5;
    float _1368 = _624 * 0.5;
    float _1369 = _625 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_989, _993, _996, _999));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_991, _994, _997, _1000));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_992, _995, _998, _1001));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _443);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1499 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1502 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1530 = frontier_phi_14_12_ladder;
        }
        float _1705;
        if (_1499 > 0.0)
        {
            _1705 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1705 = frontier_phi_23_19_ladder;
        }
        float _2000;
        if (_1502 > 0.0)
        {
            _2000 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2000 = frontier_phi_35_30_ladder;
        }
        float _2002 = isnan(_1705) ? _1530 : (isnan(_1530) ? _1705 : min(_1530, _1705));
        float _2003 = isnan(_2000) ? _2002 : (isnan(_2002) ? _2000 : min(_2002, _2000));
        float _2007 = (_2003 * _1496) + _1485;
        float _2008 = (_2003 * _1499) + _1489;
        float _2009 = (_2003 * _1502) + _1493;
        float _2010 = _2003 * 9.9999997473787516355514526367188e-05;
        float _2012 = (-1.0) - _2010;
        float _2014 = _2010 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2009 > _2014) || ((_2009 < _2012) || ((_2008 > _2014) || ((_2008 < _2012) || ((_2007 < _2012) || (_2007 > _2014))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2154 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2009, cbModelParam._m0[9u].z, fma(_2008, cbModelParam._m0[9u].y, _2007 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2009, cbModelParam._m0[10u].z, fma(_2008, cbModelParam._m0[10u].y, _2007 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2009, cbModelParam._m0[11u].z, fma(_2008, cbModelParam._m0[11u].y, _2007 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_13_35_ladder = _2154.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2154.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2154.x * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_13_35_ladder_2;
        _1520 = frontier_phi_13_35_ladder_1;
        _1522 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1436);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _443);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1598 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1601 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1710;
        if (_1595 > 0.0)
        {
            _1710 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1710 = frontier_phi_25_21_ladder;
        }
        float _2027;
        if (_1598 > 0.0)
        {
            _2027 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2027 = frontier_phi_37_32_ladder;
        }
        float _2365;
        if (_1601 > 0.0)
        {
            _2365 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2365 = frontier_phi_47_44_ladder;
        }
        float _2367 = isnan(_2027) ? _1710 : (isnan(_1710) ? _2027 : min(_1710, _2027));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1595) + _1584;
        float _2373 = (_2368 * _1598) + _1588;
        float _2374 = (_2368 * _1601) + _1592;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_22_47_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_22_47_ladder_2;
        _1622 = frontier_phi_22_47_ladder_1;
        _1624 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1527);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1637 = (((_650 * _600) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1639 = (((_650 * _602) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1622 - _1520)) + _1520);
    float _1641 = (((_650 * _603) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1624 - _1522)) + _1522);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1697 = _1684 / _1696;
    float _1698 = _1688 / _1696;
    float _1699 = _1692 / _1696;
    float _1846;
    float _1847;
    float _1848;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1726 = ((uint(_1699 > cbSceneParam._m0[59u].y) + uint(_1699 > cbSceneParam._m0[59u].x)) + uint(_1699 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1727 = _1726 + 43u;
        uint _1735 = _1726 + 44u;
        uint _1743 = _1726 + 45u;
        uint _1751 = _1726 + 46u;
        float _1762 = fma(_1696, cbSceneParam._m0[_1727].w, fma(_1692, cbSceneParam._m0[_1727].z, fma(_1688, cbSceneParam._m0[_1727].y, _1684 * cbSceneParam._m0[_1727].x)));
        float _1766 = fma(_1696, cbSceneParam._m0[_1735].w, fma(_1692, cbSceneParam._m0[_1735].z, fma(_1688, cbSceneParam._m0[_1735].y, _1684 * cbSceneParam._m0[_1735].x)));
        float _1774 = fma(_1696, cbSceneParam._m0[_1751].w, fma(_1692, cbSceneParam._m0[_1751].z, fma(_1688, cbSceneParam._m0[_1751].y, _1684 * cbSceneParam._m0[_1751].x)));
        float _1779 = cbSceneParam._m0[33u].z * _1774;
        float _1781 = cbSceneParam._m0[33u].w * _1774;
        float _1784 = fma(_1696, cbSceneParam._m0[_1743].w, fma(_1692, cbSceneParam._m0[_1743].z, fma(_1688, cbSceneParam._m0[_1743].y, _1684 * cbSceneParam._m0[_1743].x))) / _1774;
        float _1832 = (cbSceneParam._m0[33u].x - sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699))) * cbSceneParam._m0[33u].y;
        float _4160 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1839 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 + _1762) / _1774, (_1781 + _1766) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 + _1762) / _1774, (_1766 - _1779) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 - _1779) / _1774, (_1766 - _1781) / _1774), _1784), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 - _1781) / _1774, (_1779 + _1766) / _1774), _1784), 0.0)).x), vec4(0.25)));
        _1846 = 1.0 - (_1839 * cbSceneParam._m0[34u].x);
        _1847 = 1.0 - (_1839 * cbSceneParam._m0[34u].y);
        _1848 = 1.0 - (_1839 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1846 = 1.0;
        _1847 = 1.0;
        _1848 = 1.0;
    }
    float _1912;
    float _1914;
    float _1916;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1900 = fma(_1696, cbSceneParam._m0[63u].w, fma(_1692, cbSceneParam._m0[63u].z, fma(_1688, cbSceneParam._m0[63u].y, _1684 * cbSceneParam._m0[63u].x)));
        float _1901 = fma(_1696, cbSceneParam._m0[60u].w, fma(_1692, cbSceneParam._m0[60u].z, fma(_1688, cbSceneParam._m0[60u].y, _1684 * cbSceneParam._m0[60u].x))) / _1900;
        float _1902 = fma(_1696, cbSceneParam._m0[61u].w, fma(_1692, cbSceneParam._m0[61u].z, fma(_1688, cbSceneParam._m0[61u].y, _1684 * cbSceneParam._m0[61u].x))) / _1900;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1901 >= cbSceneParam._m0[64u].x) && (_1902 >= cbSceneParam._m0[64u].y)) && (_1901 <= cbSceneParam._m0[64u].z)) && (_1902 <= cbSceneParam._m0[64u].w))
        {
            float _2040 = fma(_1696, cbSceneParam._m0[62u].w, fma(_1692, cbSceneParam._m0[62u].z, fma(_1688, cbSceneParam._m0[62u].y, _1684 * cbSceneParam._m0[62u].x))) / _1900;
            float _2044 = isnan(cbSceneParam._m0[41u].w) ? _2040 : (isnan(_2040) ? cbSceneParam._m0[41u].w : max(_2040, cbSceneParam._m0[41u].w));
            float _2087 = (cbSceneParam._m0[33u].x - sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699))) * cbSceneParam._m0[33u].y;
            float _4176 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
            float _2094 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1901, cbSceneParam._m0[33u].w + _1902), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1901, _1902 - cbSceneParam._m0[33u].z), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1901 - cbSceneParam._m0[33u].z, _1902 - cbSceneParam._m0[33u].w), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1901 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1902), _2044), 0.0)).x), vec4(0.25)));
            float _2098 = 1.0 - (_2094 * cbSceneParam._m0[34u].x);
            float _2099 = 1.0 - (_2094 * cbSceneParam._m0[34u].y);
            float _2100 = 1.0 - (_2094 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2100) ? _1848 : (isnan(_1848) ? _2100 : min(_1848, _2100));
            frontier_phi_34_33_ladder_1 = isnan(_2099) ? _1847 : (isnan(_1847) ? _2099 : min(_1847, _2099));
            frontier_phi_34_33_ladder_2 = isnan(_2098) ? _1846 : (isnan(_1846) ? _2098 : min(_1846, _2098));
        }
        else
        {
            frontier_phi_34_33_ladder = _1848;
            frontier_phi_34_33_ladder_1 = _1847;
            frontier_phi_34_33_ladder_2 = _1846;
        }
        _1912 = frontier_phi_34_33_ladder_2;
        _1914 = frontier_phi_34_33_ladder_1;
        _1916 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1912 = _1846;
        _1914 = _1847;
        _1916 = _1848;
    }
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _615 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1959 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1963 = _1923 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_440, _441, _442));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_440, _441, _442));
    float _4212 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4223 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1940].x * _1946) * _1984) + (((cbLight._m0[_1950].x * _1912) * _1959) * _1982);
    float _1992 = ((_1946 * cbLight._m0[_1940].y) * _1984) + (((cbLight._m0[_1950].y * _1914) * _1959) * _1982);
    float _1993 = ((_1946 * cbLight._m0[_1940].z) * _1984) + (((cbLight._m0[_1950].z * _1916) * _1959) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_1999)
    {
        _2101 = _1991;
        _2103 = _1992;
        _2105 = _1993;
    }
    else
    {
        uint _2109 = _1923 + 6u;
        float _2125 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4234 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2128 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2101 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _1991;
        _2103 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _1992;
        _2105 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _1993;
    }
    bool _2108 = _1997.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2108)
    {
        _2163 = _2101;
        _2165 = _2103;
        _2167 = _2105;
    }
    else
    {
        uint _2336 = _1923 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4250 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2355 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2163 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2101;
        _2165 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2103;
        _2167 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2105;
    }
    uint _2170 = _1923 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _443) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1923].x + _521;
    float _2186 = cbLight._m0[_1923].y + _522;
    float _2187 = cbLight._m0[_1923].z + _523;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1923].xyz));
    float _4266 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2199 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2200 = dot(vec3(_440, _441, _442), vec3(_2192, _2193, _2194));
    float _4288 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2192, _2193, _2194));
    float _4299 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _597;
    float _2223 = 0.959999978542327880859375 - _598;
    float _2224 = 0.959999978542327880859375 - _599;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4310 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2258 = _1923 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _443) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_1963].x + _521;
    float _2272 = cbLight._m0[_1963].y + _522;
    float _2273 = cbLight._m0[_1963].z + _523;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1963].xyz));
    float _4321 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2285 = dot(vec3(_440, _441, _442), vec3(_2278, _2279, _2280));
    float _4332 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2278, _2279, _2280));
    float _4343 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2311 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2199 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2311) + _2270) * _2284))) * _2284;
    float _4354 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2333 = (((((_2304 * _2221) + _600) * cbLight._m0[_2258].x) * _2323) * _1946) + ((((cbLight._m0[_2170].x * _1912) * ((_2220 * _2221) + _600)) * _2244) * _1959);
    float _2334 = (((((_2304 * _2223) + _602) * cbLight._m0[_2258].y) * _2323) * _1946) + ((((cbLight._m0[_2170].y * _1914) * ((_2220 * _2223) + _602)) * _2244) * _1959);
    float _2335 = (((((_2304 * _2224) + _603) * cbLight._m0[_2258].z) * _2323) * _1946) + ((((cbLight._m0[_2170].z * _1916) * ((_2220 * _2224) + _603)) * _2244) * _1959);
    float _2391;
    float _2393;
    float _2395;
    if (_1999)
    {
        _2391 = _2333;
        _2393 = _2334;
        _2395 = _2335;
    }
    else
    {
        uint _2397 = _1923 + 2u;
        uint _2401 = _1923 + 10u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _443) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _521;
        float _2418 = cbLight._m0[_2397].y + _522;
        float _2419 = cbLight._m0[_2397].z + _523;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2397].xyz));
        float _4365 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2431 = dot(vec3(_440, _441, _442), vec3(_2424, _2425, _2426));
        float _4376 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4387 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2199 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2457) + _2416) * _2430))) * _2430;
        float _4398 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2391 = (((((_2450 * _2221) + _600) * cbLight._m0[_2401].x) * _2469) * _2470) + _2333;
        _2393 = (((((_2450 * _2223) + _602) * cbLight._m0[_2401].y) * _2469) * _2470) + _2334;
        _2395 = (((((_2450 * _2224) + _603) * cbLight._m0[_2401].z) * _2469) * _2470) + _2335;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2108)
    {
        _2501 = _2391;
        _2503 = _2393;
        _2505 = _2395;
    }
    else
    {
        uint _2512 = _1923 + 3u;
        uint _2516 = _1923 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _443) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _521;
        float _2533 = cbLight._m0[_2512].y + _522;
        float _2534 = cbLight._m0[_2512].z + _523;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2512].xyz));
        float _4414 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2546 = dot(vec3(_440, _441, _442), vec3(_2539, _2540, _2541));
        float _4425 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4436 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2199 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2572) + _2531) * _2545))) * _2545;
        float _4447 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2501 = (((((_2565 * _2221) + _600) * cbLight._m0[_2516].x) * _2584) * _2585) + _2391;
        _2503 = (((((_2565 * _2223) + _602) * cbLight._m0[_2516].y) * _2584) * _2585) + _2393;
        _2505 = (((((_2565 * _2224) + _603) * cbLight._m0[_2516].z) * _2584) * _2585) + _2395;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1921.y == 0u)
    {
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2607)));
        float _2628 = (log2(_1699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
        }
        else
        {
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2887)
                {
                    frontier_phi_68_pred = _2876;
                    frontier_phi_68_pred_1 = _2875;
                    frontier_phi_68_pred_2 = _2874;
                    frontier_phi_68_pred_3 = _2873;
                    frontier_phi_68_pred_4 = _2872;
                    frontier_phi_68_pred_5 = _2871;
                }
                else
                {
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3017 = _2871;
                    _3018 = _2872;
                    _3019 = _2873;
                    _3020 = _2874;
                    _3021 = _2875;
                    _3022 = _2876;
                    _3023 = _2886;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2877 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3049 = (_3027 * 48u) + 4u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        uint _3068 = (_3027 * 48u) + 8u;
                        vec3 _3079 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x));
                        float _3083 = _3043.x - _1697;
                        float _3084 = _3043.y - _1698;
                        float _3085 = _3043.z - _1699;
                        float _3086 = dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085));
                        float _3089 = inversesqrt(_3086);
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3093 = dot(vec3(_556, _559, _562), vec3(_3090, _3091, _3092));
                        float _3098 = 1.0 - (_3086 * _3043.w);
                        float _4473 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3100 = sqrt(_3086) * _3062.w;
                        float _3103 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3093) + _3104;
                        float _3110 = _3100 * _3100;
                        float _3114 = ((isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))) * _3099) / ((_3110 * 0.699999988079071044921875) + 1.0);
                        float _3118 = (-0.0) - _1697;
                        float _3119 = (-0.0) - _1698;
                        float _3120 = (-0.0) - _1699;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3134 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                        float _3135 = 1.0 - _631;
                        float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                        float _3143 = _3142 * _3142;
                        float _3144 = _3143 * _3143;
                        float _3145 = _3125 + _3090;
                        float _3146 = _3126 + _3091;
                        float _3147 = _3127 + _3092;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3155 = dot(vec3(_556, _559, _562), vec3(_3125, _3126, _3127));
                        float _4489 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3159 = dot(vec3(_556, _559, _562), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                        float _4500 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                        float _3167 = _3103 * _3143;
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3093) + _3168;
                        float _4511 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3173 = 1.0 - _3143;
                        float _3183 = (0.5 / (((_3172 * ((_3158 * _3173) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3143) * _3158))) * _3172;
                        float _4522 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3194 = (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3166 * _3166) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125))) * _3099;
                        _2946 = (_3114 * _3062.x) + _3020;
                        _2947 = (_3114 * _3062.y) + _3021;
                        _2948 = (_3114 * _3062.z) + _3022;
                        _2943 = (_3194 * _3079.x) + _3017;
                        _2944 = (_3194 * _3079.y) + _3018;
                        _2945 = (_3194 * _3079.z) + _3019;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3017 = _2943;
                            _3018 = _2944;
                            _3019 = _2945;
                            _3020 = _2946;
                            _3021 = _2947;
                            _3022 = _2948;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_68_pred = _2948;
                    frontier_phi_68_pred_1 = _2947;
                    frontier_phi_68_pred_2 = _2946;
                    frontier_phi_68_pred_3 = _2945;
                    frontier_phi_68_pred_4 = _2944;
                    frontier_phi_68_pred_5 = _2943;
                }
                _2729 = frontier_phi_68_pred;
                _2727 = frontier_phi_68_pred_1;
                _2725 = frontier_phi_68_pred_2;
                _2723 = frontier_phi_68_pred_3;
                _2721 = frontier_phi_68_pred_4;
                _2719 = frontier_phi_68_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2719;
                    _2872 = _2721;
                    _2873 = _2723;
                    _2874 = _2725;
                    _2875 = _2727;
                    _2876 = _2729;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
        }
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.z;
        uint _2735 = (_2733 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2735) & _2638) == 0u)
        {
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
            float _2865 = _2864 * _1697;
            float _2866 = _2864 * _1698;
            float _2867 = _2864 * _1699;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2735 < ((_2733 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _3000 = _2718;
                float _3001 = _2720;
                float _3002 = _2722;
                float _3003 = _2724;
                float _3004 = _2726;
                float _3005 = _2728;
                uint _3006 = _2735;
                uint _3015;
                bool _3016;
                for (;;)
                {
                    _3015 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                    _3016 = _3015 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3016)
                    {
                        frontier_phi_79_pred = _3005;
                        frontier_phi_79_pred_1 = _3004;
                        frontier_phi_79_pred_2 = _3003;
                        frontier_phi_79_pred_3 = _3002;
                        frontier_phi_79_pred_4 = _3001;
                        frontier_phi_79_pred_5 = _3000;
                    }
                    else
                    {
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3223 = _3000;
                        float _3224 = _3001;
                        float _3225 = _3002;
                        float _3226 = _3003;
                        float _3227 = _3004;
                        float _3228 = _3005;
                        uint _3229 = _3015;
                        uint _3230;
                        vec4 _3255;
                        float _3256;
                        vec4 _3271;
                        vec3 _3283;
                        vec4 _3299;
                        vec4 _3315;
                        float _3362;
                        bool _3363;
                        for (;;)
                        {
                            uint _3240 = ((_3006 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3229));
                            _3230 = (_3229 + 4294967295u) & _3229;
                            uint _3242 = _3240 * 40u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3256 = _3255.w;
                            uint _3258 = (_3240 * 40u) + 4u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3240 * 40u) + 8u;
                            _3283 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x));
                            uint _3286 = (_3240 * 40u) + 16u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3302 = (_3240 * 40u) + 20u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3318 = (_3240 * 40u) + 24u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3337 = (_3240 * 40u) + 28u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3362 = fma(_1699, _3350.z, fma(_1698, _3350.y, _3350.x * _1697)) + _3350.w;
                            _3363 = !((fma(_1699, _3331.z, fma(_1698, _3331.y, _3331.x * _1697)) + _3331.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3363)
                            {
                                float _3390 = _3255.x - _1697;
                                float _3391 = _3255.y - _1698;
                                float _3392 = _3255.z - _1699;
                                float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                                float _3396 = inversesqrt(_3393);
                                float _3397 = _3396 * _3390;
                                float _3398 = _3396 * _3391;
                                float _3399 = _3396 * _3392;
                                float _3403 = 1.0 - (_3393 / (_3256 * _3256));
                                float _4533 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3408 = sqrt(_3393) * _3271.w;
                                float _3410 = 1.39999997615814208984375 / (_3408 + 1.39999997615814208984375);
                                float _3411 = _3410 * _3410;
                                float _3414 = ((1.0 - _3411) * dot(vec3(_3397, _3398, _3399), vec3(_556, _559, _562))) + _3411;
                                float _3417 = _3408 * _3408;
                                float _3421 = (fma(_1699, _3299.z, fma(_1698, _3299.y, _3299.x * _1697)) + _3299.w) / _3362;
                                float _3422 = (fma(_1699, _3315.z, fma(_1698, _3315.y, _3315.x * _1697)) + _3315.w) / _3362;
                                float _3426 = 1.0 - dot(vec2(_3421, _3422), vec2(_3421, _3422));
                                float _4549 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3428 = _3427 * (((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3404) / ((_3417 * 0.699999988079071044921875) + 1.0));
                                float _3440 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                                float _3441 = 1.0 - _631;
                                float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                                float _3449 = _3448 * _3448;
                                float _3450 = _3449 * _3449;
                                float _3451 = _3397 - _2865;
                                float _3452 = _3398 - _2866;
                                float _3453 = _3399 - _2867;
                                float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                                float _3461 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4560 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3465 = dot(vec3(_556, _559, _562), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                                float _4571 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                                float _3473 = _3410 * _3449;
                                float _3474 = _3473 * _3473;
                                float _3480 = ((1.0 - _3474) * dot(vec3(_556, _559, _562), vec3(_3397, _3398, _3399))) + _3474;
                                float _4582 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3482 = 1.0 - _3449;
                                float _3492 = (0.5 / (((_3481 * ((_3464 * _3482) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3449) * _3464))) * _3481;
                                float _4593 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3502 = (_3427 * _3404) * (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3472 * _3472) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3428 * _3271.z;
                                frontier_phi_85_pred_1 = _3428 * _3271.y;
                                frontier_phi_85_pred_2 = _3428 * _3271.x;
                                frontier_phi_85_pred_3 = _3502 * _3283.z;
                                frontier_phi_85_pred_4 = _3502 * _3283.y;
                                frontier_phi_85_pred_5 = _3502 * _3283.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3511 = frontier_phi_85_pred;
                            _3510 = frontier_phi_85_pred_1;
                            _3509 = frontier_phi_85_pred_2;
                            _3508 = frontier_phi_85_pred_3;
                            _3507 = frontier_phi_85_pred_4;
                            _3506 = frontier_phi_85_pred_5;
                            _3213 = _3509 + _3226;
                            _3214 = _3510 + _3227;
                            _3215 = _3511 + _3228;
                            _3210 = _3506 + _3223;
                            _3211 = _3507 + _3224;
                            _3212 = _3508 + _3225;
                            if (_3230 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3230;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3215;
                        frontier_phi_79_pred_1 = _3214;
                        frontier_phi_79_pred_2 = _3213;
                        frontier_phi_79_pred_3 = _3212;
                        frontier_phi_79_pred_4 = _3211;
                        frontier_phi_79_pred_5 = _3210;
                    }
                    _2850 = frontier_phi_79_pred;
                    _2848 = frontier_phi_79_pred_1;
                    _2846 = frontier_phi_79_pred_2;
                    _2844 = frontier_phi_79_pred_3;
                    _2842 = frontier_phi_79_pred_4;
                    _2840 = frontier_phi_79_pred_5;
                    uint _3007 = _3006 + 1u;
                    if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3000 = _2840;
                        _3001 = _2842;
                        _3002 = _2844;
                        _3003 = _2846;
                        _3004 = _2848;
                        _3005 = _2850;
                        _3006 = _3007;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2846;
                frontier_phi_60_61_ladder_1 = _2850;
                frontier_phi_60_61_ladder_2 = _2848;
                frontier_phi_60_61_ladder_3 = _2844;
                frontier_phi_60_61_ladder_4 = _2842;
                frontier_phi_60_61_ladder_5 = _2840;
            }
            else
            {
                frontier_phi_60_61_ladder = _2724;
                frontier_phi_60_61_ladder_1 = _2728;
                frontier_phi_60_61_ladder_2 = _2726;
                frontier_phi_60_61_ladder_3 = _2722;
                frontier_phi_60_61_ladder_4 = _2720;
                frontier_phi_60_61_ladder_5 = _2718;
            }
            _2839 = frontier_phi_60_61_ladder_5;
            _2841 = frontier_phi_60_61_ladder_4;
            _2843 = frontier_phi_60_61_ladder_3;
            _2845 = frontier_phi_60_61_ladder;
            _2847 = frontier_phi_60_61_ladder_2;
            _2849 = frontier_phi_60_61_ladder_1;
        }
        float _2854 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2651 = (_2854 * _2845) + _2163;
        _2653 = (_2854 * _2847) + _2165;
        _2655 = (_2854 * _2849) + _2167;
        _2657 = ((_2839 * _600) * _2854) + _2501;
        _2659 = ((_2841 * _602) * _2854) + _2503;
        _2661 = ((_2843 * _603) * _2854) + _2505;
    }
    else
    {
        _2651 = _2163;
        _2653 = _2165;
        _2655 = _2167;
        _2657 = _2501;
        _2659 = _2503;
        _2661 = _2505;
    }
    float _4609 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4620 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4631 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2678 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2651 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _615))) + ((_2657 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2679 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2653 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _615))) + ((_2659 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2655 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _615))) + ((_2661 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    uint _2681 = _575 + 6u;
    float _2689 = _536 / cbSceneParam._m0[86u].x;
    float _2690 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _463 : (isnan(_463) ? cbSceneParam._m0[77u].w : min(_463, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_463 > cbSceneParam._m0[78u].w)
    {
        float _2743 = isnan(_463) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _463 : min(cbSceneParam._m0[80u].w, _463));
        float _2744 = _2743 / _463;
        float _2755 = _2744 * _514;
        float _2756 = _515 * _2744;
        float _2757 = (-0.0) - _2756;
        float _2759 = _2744 * _516;
        float _2761 = (cbSceneParam._m0[77u].w * _2757) / _2743;
        float _2762 = _2761 + cbSceneParam._m0[79u].w;
        float _2763 = cbSceneParam._m0[79u].w - _2756;
        float _2769 = sqrt(((_2755 * _2755) + (_2756 * _2756)) + (_2759 * _2759));
        float _2772 = (1.0 - (cbSceneParam._m0[77u].w / _2743)) * _2769;
        float _2777 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2779 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2757 - _2761) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2762 > 0.0) ? exp2(_2777 * _2762) : (2.0 - exp2(_2779 * _2762))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2772;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : max(_2762, _2763));
            float _2902 = isnan(_2763) ? _2762 : (isnan(_2762) ? _2763 : min(_2762, _2763));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2956 = ((abs(_2769 / _2757) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2777 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2777 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2779 * _2911) - exp2(_2779 * _2912)) * _2900))) + (_2772 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2709);
        _2781 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2783 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2785 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2787 = _2967 * _2709;
    }
    else
    {
        _2781 = _2706;
        _2783 = _2707;
        _2785 = _2708;
        _2787 = _2709;
    }
    bool _2994;
    vec4 _2797;
    vec4 _2819;
    float _2821;
    float _2825;
    float _2826;
    float _2827;
    float _2828;
    bool _2838;
    for (;;)
    {
        _2797 = cbMatDynParam._m0[0u];
        float _2799 = roundEven(_2797.y);
        bool _2800 = _2799 == 3.0;
        float _2801 = log2(_2787);
        float _2808 = exp2(_2801 * cbSceneParam._m0[78u].x) * _2678;
        float _2809 = exp2(_2801 * cbSceneParam._m0[78u].y) * _2679;
        float _2810 = exp2(_2801 * cbSceneParam._m0[78u].z) * _2680;
        float _2817 = _530 + (-0.5);
        _2819 = cbMtdParam._m0[1u];
        _2821 = _2819.y * _2817;
        float _2824 = (_2799 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2825 = _2824 * (_2800 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2781)));
        _2826 = _2824 * (_2800 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2783)));
        _2827 = _2824 * (_2800 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2785)));
        _2828 = _2817 * 0.999000012874603271484375;
        _2838 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2838)
        {
            if ((cbInstanceData._m0[_575 + 7u].x + _2828) < 0.5)
            {
                _2994 = true;
                break;
            }
        }
        uint _2935 = _576 + uint(_2797.w);
        if ((cbInstanceData._m0[_2935].w < 1.0) && ((cbInstanceData._m0[_2935].w + _2828) < 0.5))
        {
            _2994 = true;
            break;
        }
        if ((_2821 + 1.0) < _2819.x)
        {
            _2994 = true;
            break;
        }
        _2994 = false;
        break;
    }
    float _3201;
    if (_2994)
    {
        discard_state = true;
        _3201 = 0.0;
    }
    else
    {
        _3201 = cbInstanceData._m0[_2681].w;
    }
    SV_Target.x = _2825;
    SV_Target.y = _2826;
    SV_Target.z = _2827;
    SV_Target.w = _3201;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
    discard_exit();
}


