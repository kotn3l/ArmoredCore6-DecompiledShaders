#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _988;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _251.x * cbMtdParam._m0[9u].x;
    float _257 = _251.y * cbMtdParam._m0[9u].y;
    float _258 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _307 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3409 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[10u].x) - _256)) + _256;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[10u].y) - _257)) + _257;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[10u].z) - _258)) + _258;
    float _349 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _352 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _349) * _308) + _349;
    vec4 _366 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _374 = (_366.x * 2.0) + (-1.0);
    float _376 = (_366.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_374, _376), vec2(_374, _376));
    float _3420 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _382 = sqrt(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))));
    float _383 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _404 = (_397.x * 2.0) + (-1.0);
    float _405 = (_397.y * 2.0) + (-1.0);
    float _406 = dot(vec2(_404, _405), vec2(_404, _405));
    float _3431 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _415 = (_308 * ((_397.z * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _422 = (_308 * (_404 - _374)) + _374;
    float _423 = (_308 * (_405 - _376)) + _376;
    float _424 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) - _382)) + _382;
    float _427 = fma(_424, _213 * NORMAL.x, fma(_423, _220 * TANGENT.x, (_206 * _198) * _422));
    float _430 = fma(_424, _213 * NORMAL.y, fma(_423, _220 * TANGENT.y, (_206 * _199) * _422));
    float _433 = fma(_424, _213 * NORMAL.z, fma(_423, _220 * TANGENT.z, (_206 * _200) * _422));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    float _438 = _437 * _427;
    float _439 = _437 * _430;
    float _440 = _437 * _433;
    float _3442 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _441 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3464 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3475 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3486 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _445 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _461 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _512 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _502);
    float _513 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _502);
    float _514 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _502);
    float _518 = inversesqrt(dot(vec3(_512, _513, _514), vec3(_512, _513, _514)));
    float _519 = _512 * _518;
    float _520 = _513 * _518;
    float _521 = _514 * _518;
    vec4 _526 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _528 = _526.w;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _554 = fma(_440, cbSceneParam._m0[5u].z, fma(_439, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _438));
    float _557 = fma(_440, cbSceneParam._m0[6u].z, fma(_439, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _438));
    float _560 = fma(_440, cbSceneParam._m0[7u].z, fma(_439, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _438));
    uint _573 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _573 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3497 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _587 = 1.0 - _445;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _445;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _445;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _445;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _613 = _610.x * TEXCOORD_4.x;
    float _614 = dot(vec3(_438, _439, _440), vec3(_519, _520, _521));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _438) - _519;
    float _622 = (_617 * _439) - _520;
    float _623 = (_617 * _440) - _521;
    float _627 = abs(dot(vec3(_519, _520, _521), vec3(_438, _439, _440)));
    float _3530 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_441);
    float _642 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _648 = (1.0 - _642) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _649 = _642 * _629;
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _987;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _712 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _716 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _720 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _745 = _677 + _438;
        float _746 = _681 + _439;
        float _747 = _685 + _440;
        float _757 = fma(_747, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) - _712;
        float _758 = fma(_747, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) - _716;
        float _759 = fma(_747, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) - _720;
        float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
        float _776 = ((_763 * _757) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_712 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_763 * _758) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_716 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_763 * _759) / cbModelParam._m0[34u].z) + ((((((_720 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        float _815 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_781.x + (-0.5));
        float _817 = _815 * (_781.y + (-0.5));
        float _818 = _815 * (_781.z + (-0.5));
        float _825 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_788.x + (-0.5));
        float _827 = _825 * (_788.y + (-0.5));
        float _828 = _825 * (_788.z + (-0.5));
        float _835 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_795.x + (-0.5));
        float _837 = _835 * (_795.y + (-0.5));
        float _838 = _835 * (_795.z + (-0.5));
        float _845 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_802.x + (-0.5));
        float _847 = _845 * (_802.y + (-0.5));
        float _848 = _845 * (_802.z + (-0.5));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = _816 * 0.5;
        float _853 = _826 * 0.5;
        float _854 = _836 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _869 = (dot(vec3(_438, _439, _440), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _879 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3578 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_881 + 1.0))) + _886) * _849;
        float _896 = _817 * 0.5;
        float _897 = _827 * 0.5;
        float _898 = _837 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_438, _439, _440), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3611 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_923 + 1.0))) + _928) * _850;
        float _938 = _818 * 0.5;
        float _939 = _828 * 0.5;
        float _940 = _838 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_438, _439, _440), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3644 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_965 + 1.0))) + _970) * _851;
        _987 = _818;
        _989 = _817;
        _990 = _816;
        _991 = _828;
        _992 = _827;
        _993 = _826;
        _994 = _838;
        _995 = _837;
        _996 = _836;
        _997 = _851;
        _998 = _850;
        _999 = _849;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
    }
    else
    {
        _987 = _988;
        _989 = _988;
        _990 = _988;
        _991 = _988;
        _992 = _988;
        _993 = _988;
        _994 = _988;
        _995 = _988;
        _996 = _988;
        _997 = _988;
        _998 = _988;
        _999 = _988;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1032 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1036 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1059 = _677 + _438;
        float _1060 = _681 + _439;
        float _1061 = _685 + _440;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_438, _439, _440), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3707 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_438, _439, _440), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3740 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_438, _439, _440), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3773 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _988;
        _1298 = _988;
        _1299 = _988;
        _1300 = _988;
        _1301 = _988;
        _1302 = _988;
        _1303 = _988;
        _1304 = _988;
        _1305 = _988;
        _1306 = _988;
        _1307 = _988;
        _1308 = _988;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _621 * 0.5;
    float _1366 = _622 * 0.5;
    float _1367 = _623 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_987, _991, _994, _997));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_989, _992, _995, _998));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_990, _993, _996, _999));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _441);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1483 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1487 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1491 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1494 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1497 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1500 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1528;
        if (_1494 > 0.0)
        {
            _1528 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1528 = frontier_phi_14_12_ladder;
        }
        float _1755;
        if (_1497 > 0.0)
        {
            _1755 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1755 = frontier_phi_23_19_ladder;
        }
        float _2012;
        if (_1500 > 0.0)
        {
            _2012 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2012 = frontier_phi_35_30_ladder;
        }
        float _2014 = isnan(_1755) ? _1528 : (isnan(_1528) ? _1755 : min(_1528, _1755));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1494) + _1483;
        float _2020 = (_2015 * _1497) + _1487;
        float _2021 = (_2015 * _1500) + _1491;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_13_35_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1516 = frontier_phi_13_35_ladder_2;
        _1518 = frontier_phi_13_35_ladder_1;
        _1520 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1434);
        _1516 = _1504.x * cbModelParam._m0[1u].y;
        _1518 = _1504.y * cbModelParam._m0[1u].y;
        _1520 = _1504.z * cbModelParam._m0[1u].y;
    }
    float _1524 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _441);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1524 : min(cbModelParam._m0[25u].w, _1524));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1582 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1586 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1590 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1593 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1596 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1599 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1760;
        if (_1593 > 0.0)
        {
            _1760 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1760 = frontier_phi_25_21_ladder;
        }
        float _2039;
        if (_1596 > 0.0)
        {
            _2039 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2039 = frontier_phi_37_32_ladder;
        }
        float _2252;
        if (_1599 > 0.0)
        {
            _2252 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_43_ladder;
        }
        float _2254 = isnan(_2039) ? _1760 : (isnan(_1760) ? _2039 : min(_1760, _2039));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1593) + _1582;
        float _2260 = (_2255 * _1596) + _1586;
        float _2261 = (_2255 * _1599) + _1590;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1525);
            frontier_phi_22_46_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1618 = frontier_phi_22_46_ladder_2;
        _1620 = frontier_phi_22_46_ladder_1;
        _1622 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1525);
        _1618 = _1602.x * cbModelParam._m0[1u].z;
        _1620 = _1602.y * cbModelParam._m0[1u].z;
        _1622 = _1602.z * cbModelParam._m0[1u].z;
    }
    float _1635 = (((_648 * _598) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_648 * _600) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1639 = (((_648 * _601) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1622 - _1520)) + _1520);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, _1635 * cbSceneParam._m0[91u].x));
    vec4 _1656 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_534, _535));
    float _1658 = _1656.w;
    float _1670 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1658);
    float _1671 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1658);
    float _1672 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1658);
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_573 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1686 = _613 + (-1.0);
    float _1691 = (cbLight._m0[_1679].x * _1686) + 1.0;
    float _1692 = (cbLight._m0[_1679].y * _1686) + 1.0;
    float _1693 = (cbLight._m0[_1679].z * _1686) + 1.0;
    float _1694 = (cbLight._m0[_1679].w * _1686) + 1.0;
    uint _1695 = _1678 + 5u;
    float _1701 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1705 = _1678 + 4u;
    float _1714 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1718 = _1678 | 1u;
    float _1729 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_438, _439, _440));
    float _1732 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_438, _439, _440));
    float _3909 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _3920 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1737 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1739 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1746 = ((cbLight._m0[_1695].x * _1701) * _1739) + (((cbLight._m0[_1705].x * _1670) * _1714) * _1737);
    float _1747 = ((_1701 * cbLight._m0[_1695].y) * _1739) + (((cbLight._m0[_1705].y * _1671) * _1714) * _1737);
    float _1748 = ((_1701 * cbLight._m0[_1695].z) * _1739) + (((cbLight._m0[_1705].z * _1672) * _1714) * _1737);
    uvec4 _1752 = floatBitsToUint(cbLight._m0[_1678 + 12u]);
    bool _1754 = _1752.x == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1754)
    {
        _1765 = _1746;
        _1767 = _1747;
        _1769 = _1748;
    }
    else
    {
        uint _1773 = _1678 + 6u;
        float _1789 = (dot(vec3(cbLight._m0[_1678 + 2u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _1790 = _1789 * _1789;
        float _3931 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1792 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1765 = (((cbLight._m0[_1773].x * 0.3183098733425140380859375) * _1791) * _1792) + _1746;
        _1767 = (((cbLight._m0[_1773].y * 0.3183098733425140380859375) * _1791) * _1792) + _1747;
        _1769 = (((cbLight._m0[_1773].z * 0.3183098733425140380859375) * _1791) * _1792) + _1748;
    }
    bool _1772 = _1752.y == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1772)
    {
        _1810 = _1765;
        _1812 = _1767;
        _1814 = _1769;
    }
    else
    {
        uint _1983 = _1678 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1678 + 3u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3947 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2002 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1810 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1765;
        _1812 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1767;
        _1814 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1769;
    }
    uint _1817 = _1678 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _441) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1678].x + _519;
    float _1833 = cbLight._m0[_1678].y + _520;
    float _1834 = cbLight._m0[_1678].z + _521;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1678].xyz));
    float _3963 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1846 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1847 = dot(vec3(_438, _439, _440), vec3(_1839, _1840, _1841));
    float _3985 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1839, _1840, _1841));
    float _3996 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
    float _1868 = 0.959999978542327880859375 - _595;
    float _1870 = 0.959999978542327880859375 - _596;
    float _1871 = 0.959999978542327880859375 - _597;
    float _1878 = 1.0 - _1831;
    float _1889 = (0.5 / (((_1846 * ((_1845 * _1878) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1878) + _1831) * _1845))) * _1845;
    float _4007 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1905 = _1678 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _441) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1718].x + _519;
    float _1919 = cbLight._m0[_1718].y + _520;
    float _1920 = cbLight._m0[_1718].z + _521;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1718].xyz));
    float _4018 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1932 = dot(vec3(_438, _439, _440), vec3(_1925, _1926, _1927));
    float _4029 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1925, _1926, _1927));
    float _4040 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1846 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1958) + _1917) * _1931))) * _1931;
    float _4051 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1868) + _598) * cbLight._m0[_1905].x) * _1970) * _1701) + ((((cbLight._m0[_1817].x * _1670) * ((_1867 * _1868) + _598)) * _1891) * _1714);
    float _1981 = (((((_1951 * _1870) + _600) * cbLight._m0[_1905].y) * _1970) * _1701) + ((((cbLight._m0[_1817].y * _1671) * ((_1867 * _1870) + _600)) * _1891) * _1714);
    float _1982 = (((((_1951 * _1871) + _601) * cbLight._m0[_1905].z) * _1970) * _1701) + ((((cbLight._m0[_1817].z * _1672) * ((_1867 * _1871) + _601)) * _1891) * _1714);
    float _2044;
    float _2046;
    float _2048;
    if (_1754)
    {
        _2044 = _1980;
        _2046 = _1981;
        _2048 = _1982;
    }
    else
    {
        uint _2050 = _1678 + 2u;
        uint _2054 = _1678 + 10u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _441) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _519;
        float _2071 = cbLight._m0[_2050].y + _520;
        float _2072 = cbLight._m0[_2050].z + _521;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2050].xyz));
        float _4062 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2084 = dot(vec3(_438, _439, _440), vec3(_2077, _2078, _2079));
        float _4073 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4084 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1846 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2110) + _2069) * _2083))) * _2083;
        float _4095 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2044 = (((((_2103 * _1868) + _598) * cbLight._m0[_2054].x) * _2122) * _2123) + _1980;
        _2046 = (((((_2103 * _1870) + _600) * cbLight._m0[_2054].y) * _2122) * _2123) + _1981;
        _2048 = (((((_2103 * _1871) + _601) * cbLight._m0[_2054].z) * _2122) * _2123) + _1982;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1772)
    {
        _2158 = _2044;
        _2160 = _2046;
        _2162 = _2048;
    }
    else
    {
        uint _2169 = _1678 + 3u;
        uint _2173 = _1678 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _441) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _519;
        float _2190 = cbLight._m0[_2169].y + _520;
        float _2191 = cbLight._m0[_2169].z + _521;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2169].xyz));
        float _4111 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2203 = dot(vec3(_438, _439, _440), vec3(_2196, _2197, _2198));
        float _4122 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4133 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1846 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2229) + _2188) * _2202))) * _2202;
        float _4144 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2158 = (((((_2222 * _1868) + _598) * cbLight._m0[_2173].x) * _2241) * _2242) + _2044;
        _2160 = (((((_2222 * _1870) + _600) * cbLight._m0[_2173].y) * _2241) * _2242) + _2046;
        _2162 = (((((_2222 * _1871) + _601) * cbLight._m0[_2173].z) * _2241) * _2242) + _2048;
    }
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_1676.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
        }
        else
        {
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2634)
                {
                    frontier_phi_63_pred = _2618;
                    frontier_phi_63_pred_1 = _2623;
                    frontier_phi_63_pred_2 = _2622;
                    frontier_phi_63_pred_3 = _2621;
                    frontier_phi_63_pred_4 = _2620;
                    frontier_phi_63_pred_5 = _2619;
                }
                else
                {
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    uint _2770;
                    _2764 = _2618;
                    _2765 = _2619;
                    _2766 = _2620;
                    _2767 = _2621;
                    _2768 = _2622;
                    _2769 = _2623;
                    _2770 = _2633;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    for (;;)
                    {
                        uint _2774 = uint(findLSB(_2770)) + (_2624 << 5u);
                        uint _2771 = (_2770 + 4294967295u) & _2770;
                        uint _2776 = _2774 * 48u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2796 = (_2774 * 48u) + 4u;
                        vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2815 = (_2774 * 48u) + 8u;
                        vec3 _2826 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x));
                        float _2830 = _2790.x - _2318;
                        float _2831 = _2790.y - _2319;
                        float _2832 = _2790.z - _2320;
                        float _2833 = dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832));
                        float _2836 = inversesqrt(_2833);
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2840 = dot(vec3(_554, _557, _560), vec3(_2837, _2838, _2839));
                        float _2845 = 1.0 - (_2833 * _2790.w);
                        float _4170 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2847 = sqrt(_2833) * _2809.w;
                        float _2850 = 1.39999997615814208984375 / (_2847 + 1.39999997615814208984375);
                        float _2851 = _2850 * _2850;
                        float _2854 = ((1.0 - _2851) * _2840) + _2851;
                        float _2857 = _2847 * _2847;
                        float _2861 = ((isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))) * _2846) / ((_2857 * 0.699999988079071044921875) + 1.0);
                        float _2865 = (-0.0) - _2318;
                        float _2866 = (-0.0) - _2319;
                        float _2867 = (-0.0) - _2320;
                        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2882 = exp2(log2(1.0 / ((_2857 * 3.5) + 5.0)) * 0.25);
                        float _2883 = 1.0 - _629;
                        float _2890 = sqrt(1.0 - ((1.0 - (_2883 * _2883)) * (1.0 - (_2882 * _2882))));
                        float _2891 = _2890 * _2890;
                        float _2892 = _2891 * _2891;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2895 = _2874 + _2839;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2903 = dot(vec3(_554, _557, _560), vec3(_2872, _2873, _2874));
                        float _4186 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2907 = dot(vec3(_554, _557, _560), vec3(_2899 * _2893, _2899 * _2894, _2899 * _2895));
                        float _4197 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2910 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2914 = ((_2910 * _2910) * (_2892 + (-1.0))) + 1.0;
                        float _2915 = _2850 * _2891;
                        float _2916 = _2915 * _2915;
                        float _2919 = ((1.0 - _2916) * _2840) + _2916;
                        float _4208 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2921 = 1.0 - _2891;
                        float _2931 = (0.5 / (((_2920 * ((_2906 * _2921) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2920 * _2921) + _2891) * _2906))) * _2920;
                        float _4219 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2942 = (((_2892 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2914 * _2914) * ((_2857 * 2.1991131305694580078125) + 3.141590118408203125))) * _2846;
                        _2693 = (_2861 * _2809.x) + _2767;
                        _2694 = (_2861 * _2809.y) + _2768;
                        _2695 = (_2861 * _2809.z) + _2769;
                        _2690 = (_2942 * _2826.x) + _2764;
                        _2691 = (_2942 * _2826.y) + _2765;
                        _2692 = (_2942 * _2826.z) + _2766;
                        if (_2771 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2764 = _2690;
                            _2765 = _2691;
                            _2766 = _2692;
                            _2767 = _2693;
                            _2768 = _2694;
                            _2769 = _2695;
                            _2770 = _2771;
                        }
                    }
                    frontier_phi_63_pred = _2690;
                    frontier_phi_63_pred_1 = _2695;
                    frontier_phi_63_pred_2 = _2694;
                    frontier_phi_63_pred_3 = _2693;
                    frontier_phi_63_pred_4 = _2692;
                    frontier_phi_63_pred_5 = _2691;
                }
                _2466 = frontier_phi_63_pred;
                _2476 = frontier_phi_63_pred_1;
                _2474 = frontier_phi_63_pred_2;
                _2472 = frontier_phi_63_pred_3;
                _2470 = frontier_phi_63_pred_4;
                _2468 = frontier_phi_63_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2466;
                    _2619 = _2468;
                    _2620 = _2470;
                    _2621 = _2472;
                    _2622 = _2474;
                    _2623 = _2476;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
        }
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.z;
        uint _2482 = (_2480 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2482) & _2364) == 0u)
        {
            _2586 = _2465;
            _2588 = _2467;
            _2590 = _2469;
            _2592 = _2471;
            _2594 = _2473;
            _2596 = _2475;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2612 = _2611 * _2318;
            float _2613 = _2611 * _2319;
            float _2614 = _2611 * _2320;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2482 < ((_2480 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2747 = _2465;
                float _2748 = _2467;
                float _2749 = _2469;
                float _2750 = _2471;
                float _2751 = _2473;
                float _2752 = _2475;
                uint _2753 = _2482;
                uint _2762;
                bool _2763;
                for (;;)
                {
                    _2762 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2753 << 2u)) >> 2u)).x;
                    _2763 = _2762 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2763)
                    {
                        frontier_phi_74_pred = _2752;
                        frontier_phi_74_pred_1 = _2751;
                        frontier_phi_74_pred_2 = _2750;
                        frontier_phi_74_pred_3 = _2749;
                        frontier_phi_74_pred_4 = _2748;
                        frontier_phi_74_pred_5 = _2747;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _2971 = _2747;
                        float _2972 = _2748;
                        float _2973 = _2749;
                        float _2974 = _2750;
                        float _2975 = _2751;
                        float _2976 = _2752;
                        uint _2977 = _2762;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3047;
                        vec4 _3063;
                        float _3110;
                        bool _3111;
                        for (;;)
                        {
                            uint _2988 = ((_2753 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3034 = (_2988 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3050 = (_2988 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3066 = (_2988 * 40u) + 24u;
                            vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3085 = (_2988 * 40u) + 28u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3110 = fma(_2320, _3098.z, fma(_2319, _3098.y, _3098.x * _2318)) + _3098.w;
                            _3111 = !((fma(_2320, _3079.z, fma(_2319, _3079.y, _3079.x * _2318)) + _3079.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3111)
                            {
                                float _3138 = _3003.x - _2318;
                                float _3139 = _3003.y - _2319;
                                float _3140 = _3003.z - _2320;
                                float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                                float _3144 = inversesqrt(_3141);
                                float _3145 = _3144 * _3138;
                                float _3146 = _3144 * _3139;
                                float _3147 = _3144 * _3140;
                                float _3151 = 1.0 - (_3141 / (_3004 * _3004));
                                float _4230 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3156 = sqrt(_3141) * _3019.w;
                                float _3158 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                                float _3159 = _3158 * _3158;
                                float _3162 = ((1.0 - _3159) * dot(vec3(_3145, _3146, _3147), vec3(_554, _557, _560))) + _3159;
                                float _3165 = _3156 * _3156;
                                float _3169 = (fma(_2320, _3047.z, fma(_2319, _3047.y, _3047.x * _2318)) + _3047.w) / _3110;
                                float _3170 = (fma(_2320, _3063.z, fma(_2319, _3063.y, _3063.x * _2318)) + _3063.w) / _3110;
                                float _3174 = 1.0 - dot(vec2(_3169, _3170), vec2(_3169, _3170));
                                float _4246 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3176 = _3175 * (((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3152) / ((_3165 * 0.699999988079071044921875) + 1.0));
                                float _3188 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                                float _3189 = 1.0 - _629;
                                float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                                float _3197 = _3196 * _3196;
                                float _3198 = _3197 * _3197;
                                float _3199 = _3145 - _2612;
                                float _3200 = _3146 - _2613;
                                float _3201 = _3147 - _2614;
                                float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                                float _3209 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4257 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3213 = dot(vec3(_554, _557, _560), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                                float _4268 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                                float _3221 = _3158 * _3197;
                                float _3222 = _3221 * _3221;
                                float _3228 = ((1.0 - _3222) * dot(vec3(_554, _557, _560), vec3(_3145, _3146, _3147))) + _3222;
                                float _4279 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3230 = 1.0 - _3197;
                                float _3240 = (0.5 / (((_3229 * ((_3212 * _3230) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3197) * _3212))) * _3229;
                                float _4290 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3250 = (_3175 * _3152) * (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3220 * _3220) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3176 * _3019.y;
                                frontier_phi_80_pred_1 = _3176 * _3019.x;
                                frontier_phi_80_pred_2 = _3250 * _3031.z;
                                frontier_phi_80_pred_3 = _3250 * _3031.y;
                                frontier_phi_80_pred_4 = _3250 * _3031.x;
                                frontier_phi_80_pred_5 = _3176 * _3019.z;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3258 = frontier_phi_80_pred;
                            _3257 = frontier_phi_80_pred_1;
                            _3256 = frontier_phi_80_pred_2;
                            _3255 = frontier_phi_80_pred_3;
                            _3254 = frontier_phi_80_pred_4;
                            _3259 = frontier_phi_80_pred_5;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            _2958 = _3254 + _2971;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2963;
                        frontier_phi_74_pred_1 = _2962;
                        frontier_phi_74_pred_2 = _2961;
                        frontier_phi_74_pred_3 = _2960;
                        frontier_phi_74_pred_4 = _2959;
                        frontier_phi_74_pred_5 = _2958;
                    }
                    _2597 = frontier_phi_74_pred;
                    _2595 = frontier_phi_74_pred_1;
                    _2593 = frontier_phi_74_pred_2;
                    _2591 = frontier_phi_74_pred_3;
                    _2589 = frontier_phi_74_pred_4;
                    _2587 = frontier_phi_74_pred_5;
                    uint _2754 = _2753 + 1u;
                    if (_2754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2747 = _2587;
                        _2748 = _2589;
                        _2749 = _2591;
                        _2750 = _2593;
                        _2751 = _2595;
                        _2752 = _2597;
                        _2753 = _2754;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2591;
                frontier_phi_55_56_ladder_1 = _2597;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2589;
                frontier_phi_55_56_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_55_56_ladder = _2469;
                frontier_phi_55_56_ladder_1 = _2475;
                frontier_phi_55_56_ladder_2 = _2473;
                frontier_phi_55_56_ladder_3 = _2471;
                frontier_phi_55_56_ladder_4 = _2467;
                frontier_phi_55_56_ladder_5 = _2465;
            }
            _2586 = frontier_phi_55_56_ladder_5;
            _2588 = frontier_phi_55_56_ladder_4;
            _2590 = frontier_phi_55_56_ladder;
            _2592 = frontier_phi_55_56_ladder_3;
            _2594 = frontier_phi_55_56_ladder_2;
            _2596 = frontier_phi_55_56_ladder_1;
        }
        float _2601 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2377 = (_2601 * _2592) + _1810;
        _2379 = (_2601 * _2594) + _1812;
        _2381 = (_2601 * _2596) + _1814;
        _2383 = ((_2586 * _598) * _2601) + _2158;
        _2385 = ((_2588 * _600) * _2601) + _2160;
        _2387 = ((_2590 * _601) * _2601) + _2162;
    }
    else
    {
        _2377 = _1810;
        _2379 = _1812;
        _2381 = _1814;
        _2383 = _2158;
        _2385 = _2160;
        _2387 = _2162;
    }
    float _4306 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4317 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4328 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2404 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2377 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _613))) + ((_2383 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2405 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2379 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _613))) + ((_2385 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2406 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2381 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _613))) + ((_2387 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    uint _2407 = _573 + 6u;
    float _2415 = _534 / cbSceneParam._m0[86u].x;
    float _2416 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _461 : (isnan(_461) ? cbSceneParam._m0[77u].w : min(_461, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_461 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_461) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _461 : min(cbSceneParam._m0[80u].w, _461));
        float _2491 = _2490 / _461;
        float _2502 = _2491 * _512;
        float _2503 = _513 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2506 = _2491 * _514;
        float _2508 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2509 = _2508 + cbSceneParam._m0[79u].w;
        float _2510 = cbSceneParam._m0[79u].w - _2503;
        float _2516 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2506 * _2506));
        float _2519 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2516;
        float _2524 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2526 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2703;
        if (abs((_2504 - _2508) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2703 = ((((_2509 > 0.0) ? exp2(_2524 * _2509) : (2.0 - exp2(_2526 * _2509))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2519;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : max(_2509, _2510));
            float _2649 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : min(_2509, _2510));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2703 = ((abs(_2516 / _2504) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2524 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2524 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2526 * _2658) - exp2(_2526 * _2659)) * _2647))) + (_2519 * cbSceneParam._m0[80u].z);
        }
        vec4 _2705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2714 = exp2((_2703 * (-1.44269502162933349609375)) * (1.0 - _2705.w));
        float _2715 = log2(_2714);
        float _2731 = log2(_2435);
        _2528 = (exp2(_2731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].x)) * _2705.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2530 = (exp2(_2731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].y)) * _2705.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2532 = (exp2(_2731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].z)) * _2705.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2534 = _2714 * _2435;
    }
    else
    {
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
        _2534 = _2435;
    }
    bool _2741;
    vec4 _2544;
    vec4 _2566;
    float _2568;
    float _2572;
    float _2573;
    float _2574;
    float _2575;
    bool _2585;
    for (;;)
    {
        _2544 = cbMatDynParam._m0[0u];
        float _2546 = roundEven(_2544.y);
        bool _2547 = _2546 == 3.0;
        float _2548 = log2(_2534);
        float _2555 = exp2(_2548 * cbSceneParam._m0[78u].x) * _2404;
        float _2556 = exp2(_2548 * cbSceneParam._m0[78u].y) * _2405;
        float _2557 = exp2(_2548 * cbSceneParam._m0[78u].z) * _2406;
        float _2564 = _528 + (-0.5);
        _2566 = cbMtdParam._m0[1u];
        _2568 = _2566.y * _2564;
        float _2571 = (_2546 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2572 = _2571 * (_2547 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2528)));
        _2573 = _2571 * (_2547 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2530)));
        _2574 = _2571 * (_2547 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2532)));
        _2575 = _2564 * 0.999000012874603271484375;
        _2585 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2585)
        {
            if ((cbInstanceData._m0[_573 + 7u].x + _2575) < 0.5)
            {
                _2741 = true;
                break;
            }
        }
        uint _2682 = _574 + uint(_2544.w);
        if ((cbInstanceData._m0[_2682].w < 1.0) && ((cbInstanceData._m0[_2682].w + _2575) < 0.5))
        {
            _2741 = true;
            break;
        }
        if ((_2568 + 1.0) < _2566.x)
        {
            _2741 = true;
            break;
        }
        _2741 = false;
        break;
    }
    float _2949;
    if (_2741)
    {
        discard_state = true;
        _2949 = 0.0;
    }
    else
    {
        _2949 = cbInstanceData._m0[_2407].w;
    }
    SV_Target.x = _2572;
    SV_Target.y = _2573;
    SV_Target.z = _2574;
    SV_Target.w = _2949;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
    discard_exit();
}


