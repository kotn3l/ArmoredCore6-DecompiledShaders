#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_texture_photography_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_texture_photography_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_texture_photography_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D M_texture_photography_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D M_texture_photography_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D M_texture_photography_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_texture_photography_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec2 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _975;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _245.x * cbMtdParam._m0[9u].x;
    float _251 = _245.y * cbMtdParam._m0[9u].y;
    float _252 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _301 = (TEXCOORD_4.y - ((cbMtdParam._m0[11u].w * (1.0 - TEXCOORD_4.y)) * (texture(sampler2D(M_texture_photography_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].x + 1.0);
    float _3310 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _309 = (_302 * ((_270.x * cbMtdParam._m0[10u].x) - _250)) + _250;
    float _310 = (_302 * ((_270.y * cbMtdParam._m0[10u].y) - _251)) + _251;
    float _311 = (_302 * ((_270.z * cbMtdParam._m0[10u].z) - _252)) + _252;
    float _343 = cbMtdParam._m0[11u].x * texture(sampler2D(M_texture_photography_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _346 = (((cbMtdParam._m0[11u].y * texture(sampler2D(M_texture_photography_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x) - _343) * _302) + _343;
    vec4 _360 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _368 = (_360.x * 2.0) + (-1.0);
    float _370 = (_360.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_368, _370), vec2(_368, _370));
    float _3321 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _376 = sqrt(1.0 - (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))));
    float _377 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_texture_photography_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _398 = (_391.x * 2.0) + (-1.0);
    float _399 = (_391.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_398, _399), vec2(_398, _399));
    float _3332 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _409 = (_302 * ((_391.z * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _416 = (_302 * (_398 - _368)) + _368;
    float _417 = (_302 * (_399 - _370)) + _370;
    float _418 = (_302 * (sqrt(1.0 - (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) - _376)) + _376;
    float _421 = fma(_418, _207 * NORMAL.x, fma(_417, _214 * TANGENT.x, (_200 * _192) * _416));
    float _424 = fma(_418, _207 * NORMAL.y, fma(_417, _214 * TANGENT.y, (_200 * _193) * _416));
    float _427 = fma(_418, _207 * NORMAL.z, fma(_417, _214 * TANGENT.z, (_200 * _194) * _416));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3343 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _435 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3365 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3376 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3387 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _439 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _455 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _541 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _544 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _547 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _562 = (_560 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3398 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _574 = 1.0 - _439;
    float _575 = _571 * _574;
    float _576 = _572 * _574;
    float _577 = _573 * _574;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _439;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _439;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _439;
    float _585 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _600 = _597.x * TEXCOORD_4.x;
    float _601 = dot(vec3(_432, _433, _434), vec3(_513, _514, _515));
    float _604 = _601 * 2.0;
    float _608 = (_604 * _432) - _513;
    float _609 = (_604 * _433) - _514;
    float _610 = (_604 * _434) - _515;
    float _614 = abs(dot(vec3(_513, _514, _515), vec3(_432, _433, _434)));
    float _3431 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _616 = sqrt(_435);
    float _629 = exp2((_616 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_616 * 3.0));
    float _635 = (1.0 - _629) * ((_616 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _636 = _629 * _616;
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _974;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _703 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _707 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _732 = _664 + _432;
        float _733 = _668 + _433;
        float _734 = _672 + _434;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _699;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _703;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _707;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_768.x + (-0.5));
        float _804 = _802 * (_768.y + (-0.5));
        float _805 = _802 * (_768.z + (-0.5));
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_775.x + (-0.5));
        float _814 = _812 * (_775.y + (-0.5));
        float _815 = _812 * (_775.z + (-0.5));
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_782.x + (-0.5));
        float _824 = _822 * (_782.y + (-0.5));
        float _825 = _822 * (_782.z + (-0.5));
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = _803 * 0.5;
        float _840 = _813 * 0.5;
        float _841 = _823 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _856 = (dot(vec3(_432, _433, _434), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _866 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3479 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_868 + 1.0))) + _873) * _836;
        float _883 = _804 * 0.5;
        float _884 = _814 * 0.5;
        float _885 = _824 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_432, _433, _434), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3512 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_910 + 1.0))) + _915) * _837;
        float _925 = _805 * 0.5;
        float _926 = _815 * 0.5;
        float _927 = _825 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_432, _433, _434), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3545 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_952 + 1.0))) + _957) * _838;
        _974 = _805;
        _976 = _804;
        _977 = _803;
        _978 = _815;
        _979 = _814;
        _980 = _813;
        _981 = _825;
        _982 = _824;
        _983 = _823;
        _984 = _838;
        _985 = _837;
        _986 = _836;
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    }
    else
    {
        _974 = _975;
        _976 = _975;
        _977 = _975;
        _978 = _975;
        _979 = _975;
        _980 = _975;
        _981 = _975;
        _982 = _975;
        _983 = _975;
        _984 = _975;
        _985 = _975;
        _986 = _975;
        _987 = 0.0;
        _988 = 0.0;
        _989 = 0.0;
    }
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1015 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1019 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1023 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1046 = _664 + _432;
        float _1047 = _668 + _433;
        float _1048 = _672 + _434;
        float _1058 = fma(_1048, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1015 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1019 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[35u].z) + ((((((_1023 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1114 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1081.x + (-0.5));
        float _1116 = _1114 * (_1081.y + (-0.5));
        float _1117 = _1114 * (_1081.z + (-0.5));
        float _1124 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1088.x + (-0.5));
        float _1126 = _1124 * (_1088.y + (-0.5));
        float _1127 = _1124 * (_1088.z + (-0.5));
        float _1134 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1095.x + (-0.5));
        float _1136 = _1134 * (_1095.y + (-0.5));
        float _1137 = _1134 * (_1095.z + (-0.5));
        float _1144 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1102.x + (-0.5));
        float _1146 = _1144 * (_1102.y + (-0.5));
        float _1147 = _1144 * (_1102.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_432, _433, _434), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3608 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1178 + 1.0))) + _1183) * _1148;
        float _1193 = _1116 * 0.5;
        float _1194 = _1126 * 0.5;
        float _1195 = _1136 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_432, _433, _434), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3641 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1220 + 1.0))) + _1225) * _1149;
        float _1235 = _1117 * 0.5;
        float _1236 = _1127 * 0.5;
        float _1237 = _1137 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_432, _433, _434), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3674 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1262 + 1.0))) + _1267) * _1150;
        _1284 = _1117;
        _1285 = _1116;
        _1286 = _1115;
        _1287 = _1127;
        _1288 = _1126;
        _1289 = _1125;
        _1290 = _1137;
        _1291 = _1136;
        _1292 = _1135;
        _1293 = _1150;
        _1294 = _1149;
        _1295 = _1148;
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _975;
        _1285 = _975;
        _1286 = _975;
        _1287 = _975;
        _1288 = _975;
        _1289 = _975;
        _1290 = _975;
        _1291 = _975;
        _1292 = _975;
        _1293 = _975;
        _1294 = _975;
        _1295 = _975;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1308));
    float _1352 = _608 * 0.5;
    float _1353 = _609 * 0.5;
    float _1354 = _610 * 0.5;
    float _1355 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1358 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1361 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1395;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1368 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_974, _978, _981, _984));
        float _1372 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_976, _979, _982, _985));
        float _1376 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_977, _980, _983, _986));
        float _1383 = dot(vec4(cbModelParam._m0[39u]), vec4(_1352, _1353, _1354, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1406;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1397 = dot(vec4(cbModelParam._m0[40u]), vec4(_1352, _1353, _1354, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1397) ? 0.0 : (isnan(0.0) ? _1397 : max(0.0, _1397))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1410 = (_1406 * cbModelParam._m0[1u].x) + (_1395 * (1.0 - cbModelParam._m0[1u].x));
    float _1420 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1420 : min(cbModelParam._m0[25u].z, _1420));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_610, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608));
        float _1484 = fma(_610, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608));
        float _1487 = fma(_610, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1515 = frontier_phi_14_12_ladder;
        }
        float _1721;
        if (_1484 > 0.0)
        {
            _1721 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1721 = frontier_phi_23_19_ladder;
        }
        float _1975;
        if (_1487 > 0.0)
        {
            _1975 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1975 = frontier_phi_35_30_ladder;
        }
        float _1977 = isnan(_1721) ? _1515 : (isnan(_1515) ? _1721 : min(_1515, _1721));
        float _1978 = isnan(_1975) ? _1977 : (isnan(_1977) ? _1975 : min(_1977, _1975));
        float _1982 = (_1978 * _1481) + _1470;
        float _1983 = (_1978 * _1484) + _1474;
        float _1984 = (_1978 * _1487) + _1478;
        float _1985 = _1978 * 9.9999997473787516355514526367188e-05;
        float _1987 = (-1.0) - _1985;
        float _1989 = _1985 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1984 > _1989) || ((_1984 < _1987) || ((_1983 > _1989) || ((_1983 < _1987) || ((_1982 < _1987) || (_1982 > _1989))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1984, cbModelParam._m0[9u].z, fma(_1983, cbModelParam._m0[9u].y, _1982 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1984, cbModelParam._m0[10u].z, fma(_1983, cbModelParam._m0[10u].y, _1982 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1984, cbModelParam._m0[11u].z, fma(_1983, cbModelParam._m0[11u].y, _1982 * cbModelParam._m0[11u].x))), _1421);
            frontier_phi_13_35_ladder = _2112.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2112.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2112.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_13_35_ladder_2;
        _1505 = frontier_phi_13_35_ladder_1;
        _1507 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_608, _609, _610), _1421);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_610, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608));
        float _1583 = fma(_610, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608));
        float _1586 = fma(_610, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608));
        float _1726;
        if (_1580 > 0.0)
        {
            _1726 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1726 = frontier_phi_25_21_ladder;
        }
        float _2002;
        if (_1583 > 0.0)
        {
            _2002 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2002 = frontier_phi_37_32_ladder;
        }
        float _2215;
        if (_1586 > 0.0)
        {
            _2215 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2215 = frontier_phi_46_43_ladder;
        }
        float _2217 = isnan(_2002) ? _1726 : (isnan(_1726) ? _2002 : min(_1726, _2002));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1580) + _1569;
        float _2223 = (_2218 * _1583) + _1573;
        float _2224 = (_2218 * _1586) + _1577;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2224, cbModelParam._m0[17u].z, fma(_2223, cbModelParam._m0[17u].y, _2222 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2224, cbModelParam._m0[18u].z, fma(_2223, cbModelParam._m0[18u].y, _2222 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2224, cbModelParam._m0[19u].z, fma(_2223, cbModelParam._m0[19u].y, _2222 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_22_46_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_22_46_ladder_2;
        _1607 = frontier_phi_22_46_ladder_1;
        _1609 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_608, _609, _610), _1512);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1622 = (((_635 * _585) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1624 = (((_635 * _587) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1626 = (((_635 * _588) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    uvec4 _1645 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1647 = _1645.x * 14u;
    uint _1648 = _1647 + 13u;
    float _1655 = _600 + (-1.0);
    float _1660 = (cbLight._m0[_1648].x * _1655) + 1.0;
    float _1661 = (cbLight._m0[_1648].y * _1655) + 1.0;
    float _1662 = (cbLight._m0[_1648].z * _1655) + 1.0;
    float _1663 = (cbLight._m0[_1648].w * _1655) + 1.0;
    uint _1664 = _1647 + 5u;
    float _1670 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1674 = _1647 + 4u;
    float _1680 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1684 = _1647 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_432, _433, _434));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_432, _433, _434));
    float _3810 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3821 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1664].x * _1670) * _1705) + ((cbLight._m0[_1674].x * _1680) * _1703);
    float _1713 = ((_1670 * cbLight._m0[_1664].y) * _1705) + ((_1680 * cbLight._m0[_1674].y) * _1703);
    float _1714 = ((_1670 * cbLight._m0[_1664].z) * _1705) + ((_1680 * cbLight._m0[_1674].z) * _1703);
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1647 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1731;
    float _1733;
    float _1735;
    if (_1720)
    {
        _1731 = _1712;
        _1733 = _1713;
        _1735 = _1714;
    }
    else
    {
        uint _1739 = _1647 + 6u;
        float _1755 = (dot(vec3(cbLight._m0[_1647 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1756 = _1755 * _1755;
        float _3832 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1758 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1731 = (((cbLight._m0[_1739].x * 0.3183098733425140380859375) * _1757) * _1758) + _1712;
        _1733 = (((cbLight._m0[_1739].y * 0.3183098733425140380859375) * _1757) * _1758) + _1713;
        _1735 = (((cbLight._m0[_1739].z * 0.3183098733425140380859375) * _1757) * _1758) + _1714;
    }
    bool _1738 = _1718.y == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1738)
    {
        _1776 = _1731;
        _1778 = _1733;
        _1780 = _1735;
    }
    else
    {
        uint _1946 = _1647 + 7u;
        float _1962 = (dot(vec3(cbLight._m0[_1647 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _3848 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1965 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1776 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1731;
        _1778 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1733;
        _1780 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1735;
    }
    uint _1783 = _1647 + 8u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _435) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1647].x + _513;
    float _1799 = cbLight._m0[_1647].y + _514;
    float _1800 = cbLight._m0[_1647].z + _515;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1647].xyz));
    float _3864 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1812 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1813 = dot(vec3(_432, _433, _434), vec3(_1805, _1806, _1807));
    float _3886 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1805, _1806, _1807));
    float _3897 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1797 * _1797;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1833 = exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0);
    float _1834 = 0.959999978542327880859375 - _582;
    float _1836 = 0.959999978542327880859375 - _583;
    float _1837 = 0.959999978542327880859375 - _584;
    float _1844 = 1.0 - _1797;
    float _1855 = (0.5 / (((_1812 * ((_1811 * _1844) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1844) + _1797) * _1811))) * _1811;
    float _3908 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    uint _1868 = _1647 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _435) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1684].x + _513;
    float _1882 = cbLight._m0[_1684].y + _514;
    float _1883 = cbLight._m0[_1684].z + _515;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1684].xyz));
    float _3919 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1895 = dot(vec3(_432, _433, _434), vec3(_1888, _1889, _1890));
    float _3930 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1888, _1889, _1890));
    float _3941 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
    float _1921 = 1.0 - _1880;
    float _1931 = (0.5 / (((_1812 * ((_1894 * _1921) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1921) + _1880) * _1894))) * _1894;
    float _3952 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1943 = (((((_1914 * _1834) + _585) * cbLight._m0[_1868].x) * _1933) * _1670) + (((((_1833 * _1834) + _585) * cbLight._m0[_1783].x) * _1857) * _1680);
    float _1944 = (((((_1914 * _1836) + _587) * cbLight._m0[_1868].y) * _1933) * _1670) + (((((_1833 * _1836) + _587) * cbLight._m0[_1783].y) * _1857) * _1680);
    float _1945 = (((((_1914 * _1837) + _588) * cbLight._m0[_1868].z) * _1933) * _1670) + (((((_1833 * _1837) + _588) * cbLight._m0[_1783].z) * _1857) * _1680);
    float _2007;
    float _2009;
    float _2011;
    if (_1720)
    {
        _2007 = _1943;
        _2009 = _1944;
        _2011 = _1945;
    }
    else
    {
        uint _2013 = _1647 + 2u;
        uint _2017 = _1647 + 10u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _435) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _513;
        float _2034 = cbLight._m0[_2013].y + _514;
        float _2035 = cbLight._m0[_2013].z + _515;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2013].xyz));
        float _3963 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2047 = dot(vec3(_432, _433, _434), vec3(_2040, _2041, _2042));
        float _3974 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3985 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1812 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2073) + _2032) * _2046))) * _2046;
        float _3996 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2007 = (((((_2066 * _1834) + _585) * cbLight._m0[_2017].x) * _2085) * _2086) + _1943;
        _2009 = (((((_2066 * _1836) + _587) * cbLight._m0[_2017].y) * _2085) * _2086) + _1944;
        _2011 = (((((_2066 * _1837) + _588) * cbLight._m0[_2017].z) * _2085) * _2086) + _1945;
    }
    float _2121;
    float _2123;
    float _2125;
    if (_1738)
    {
        _2121 = _2007;
        _2123 = _2009;
        _2125 = _2011;
    }
    else
    {
        uint _2132 = _1647 + 3u;
        uint _2136 = _1647 + 11u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _435) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _513;
        float _2153 = cbLight._m0[_2132].y + _514;
        float _2154 = cbLight._m0[_2132].z + _515;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2132].xyz));
        float _4012 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2166 = dot(vec3(_432, _433, _434), vec3(_2159, _2160, _2161));
        float _4023 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4034 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1812 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2192) + _2151) * _2165))) * _2165;
        float _4045 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2121 = (((((_2185 * _1834) + _585) * cbLight._m0[_2136].x) * _2204) * _2205) + _2007;
        _2123 = (((((_2185 * _1836) + _587) * cbLight._m0[_2136].y) * _2204) * _2205) + _2009;
        _2125 = (((((_2185 * _1837) + _588) * cbLight._m0[_2136].z) * _2204) * _2205) + _2011;
    }
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_1645.y == 0u)
    {
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2280;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2280;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2280;
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.x;
        uint _2307 = uint((float(_2295.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2296))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2296)));
        float _2317 = (log2(_2283 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2318 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        uint _2321 = uint(isnan(14.0) ? _2318 : (isnan(_2318) ? 14.0 : min(_2318, 14.0)));
        uvec4 _2326 = texelFetch(g_lightClusterGridBuffer, int(((_2321 << 2u) + (_2307 << 6u)) >> 2u));
        uint _2327 = _2326.x;
        uint _2328 = _2295.z;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((((1u << ((_2328 >> 4u) & 15u)) + 4294967295u) & _2327) == 0u) || ((_2328 & 240u) == 0u))
        {
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
        }
        else
        {
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            uint _2579 = 0u;
            uint _2588;
            bool _2589;
            for (;;)
            {
                _2588 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                _2589 = _2588 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2589)
                {
                    frontier_phi_61_pred = _2573;
                    frontier_phi_61_pred_1 = _2578;
                    frontier_phi_61_pred_2 = _2577;
                    frontier_phi_61_pred_3 = _2576;
                    frontier_phi_61_pred_4 = _2575;
                    frontier_phi_61_pred_5 = _2574;
                }
                else
                {
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    uint _2703;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2588;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2707 = uint(findLSB(_2703)) + (_2579 << 5u);
                        uint _2704 = (_2703 + 4294967295u) & _2703;
                        uint _2709 = _2707 * 48u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2729 = (_2707 * 48u) + 4u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2748 = (_2707 * 48u) + 8u;
                        vec3 _2759 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x));
                        float _2763 = _2723.x - _2281;
                        float _2764 = _2723.y - _2282;
                        float _2765 = _2723.z - _2283;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2773 = dot(vec3(_541, _544, _547), vec3(_2770, _2771, _2772));
                        float _2778 = 1.0 - (_2766 * _2723.w);
                        float _4071 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2780 = sqrt(_2766) * _2742.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2773) + _2784;
                        float _2790 = _2780 * _2780;
                        float _2794 = ((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2779) / ((_2790 * 0.699999988079071044921875) + 1.0);
                        float _2798 = (-0.0) - _2281;
                        float _2799 = (-0.0) - _2282;
                        float _2800 = (-0.0) - _2283;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2815 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2816 = 1.0 - _616;
                        float _2823 = sqrt(1.0 - ((1.0 - (_2816 * _2816)) * (1.0 - (_2815 * _2815))));
                        float _2824 = _2823 * _2823;
                        float _2825 = _2824 * _2824;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2836 = dot(vec3(_541, _544, _547), vec3(_2805, _2806, _2807));
                        float _4087 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2840 = dot(vec3(_541, _544, _547), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828));
                        float _4098 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2847 = ((_2843 * _2843) * (_2825 + (-1.0))) + 1.0;
                        float _2848 = _2783 * _2824;
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2773) + _2849;
                        float _4109 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2854 = 1.0 - _2824;
                        float _2864 = (0.5 / (((_2853 * ((_2839 * _2854) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2853 * _2854) + _2824) * _2839))) * _2853;
                        float _4120 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2875 = (((_2825 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_2847 * _2847) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2779;
                        _2632 = (_2794 * _2742.x) + _2700;
                        _2633 = (_2794 * _2742.y) + _2701;
                        _2634 = (_2794 * _2742.z) + _2702;
                        _2629 = (_2875 * _2759.x) + _2697;
                        _2630 = (_2875 * _2759.y) + _2698;
                        _2631 = (_2875 * _2759.z) + _2699;
                        if (_2704 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2704;
                        }
                    }
                    frontier_phi_61_pred = _2629;
                    frontier_phi_61_pred_1 = _2634;
                    frontier_phi_61_pred_2 = _2633;
                    frontier_phi_61_pred_3 = _2632;
                    frontier_phi_61_pred_4 = _2631;
                    frontier_phi_61_pred_5 = _2630;
                }
                _2429 = frontier_phi_61_pred;
                _2439 = frontier_phi_61_pred_1;
                _2437 = frontier_phi_61_pred_2;
                _2435 = frontier_phi_61_pred_3;
                _2433 = frontier_phi_61_pred_4;
                _2431 = frontier_phi_61_pred_5;
                uint _2580 = _2579 + 1u;
                if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2573 = _2429;
                    _2574 = _2431;
                    _2575 = _2433;
                    _2576 = _2435;
                    _2577 = _2437;
                    _2578 = _2439;
                    _2579 = _2580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
        }
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.z;
        uint _2445 = (_2443 >> 8u) & 15u;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((4294967295u << _2445) & _2327) == 0u)
        {
            _2541 = _2428;
            _2543 = _2430;
            _2545 = _2432;
            _2547 = _2434;
            _2549 = _2436;
            _2551 = _2438;
        }
        else
        {
            float _2566 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
            float _2567 = _2566 * _2281;
            float _2568 = _2566 * _2282;
            float _2569 = _2566 * _2283;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2445 < ((_2443 >> 12u) & 15u))
            {
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2680 = _2428;
                float _2681 = _2430;
                float _2682 = _2432;
                float _2683 = _2434;
                float _2684 = _2436;
                float _2685 = _2438;
                uint _2686 = _2445;
                uint _2695;
                bool _2696;
                for (;;)
                {
                    _2695 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                    _2696 = _2695 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2696)
                    {
                        frontier_phi_67_pred = _2683;
                        frontier_phi_67_pred_1 = _2684;
                        frontier_phi_67_pred_2 = _2685;
                        frontier_phi_67_pred_3 = _2682;
                        frontier_phi_67_pred_4 = _2681;
                        frontier_phi_67_pred_5 = _2680;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        uint _2899 = _2695;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        vec3 _2953;
                        vec4 _2969;
                        vec4 _2985;
                        float _3032;
                        bool _3033;
                        for (;;)
                        {
                            uint _2910 = ((_2686 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2910 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2956 = (_2910 * 40u) + 16u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2972 = (_2910 * 40u) + 20u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2988 = (_2910 * 40u) + 24u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3007 = (_2910 * 40u) + 28u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3032 = fma(_2283, _3020.z, fma(_2282, _3020.y, _3020.x * _2281)) + _3020.w;
                            _3033 = !((fma(_2283, _3001.z, fma(_2282, _3001.y, _3001.x * _2281)) + _3001.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3033)
                            {
                                float _3060 = _2925.x - _2281;
                                float _3061 = _2925.y - _2282;
                                float _3062 = _2925.z - _2283;
                                float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                                float _3066 = inversesqrt(_3063);
                                float _3067 = _3066 * _3060;
                                float _3068 = _3066 * _3061;
                                float _3069 = _3066 * _3062;
                                float _3073 = 1.0 - (_3063 / (_2926 * _2926));
                                float _4131 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3078 = sqrt(_3063) * _2941.w;
                                float _3080 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                                float _3081 = _3080 * _3080;
                                float _3084 = ((1.0 - _3081) * dot(vec3(_3067, _3068, _3069), vec3(_541, _544, _547))) + _3081;
                                float _3087 = _3078 * _3078;
                                float _3091 = (fma(_2283, _2969.z, fma(_2282, _2969.y, _2969.x * _2281)) + _2969.w) / _3032;
                                float _3092 = (fma(_2283, _2985.z, fma(_2282, _2985.y, _2985.x * _2281)) + _2985.w) / _3032;
                                float _3096 = 1.0 - dot(vec2(_3091, _3092), vec2(_3091, _3092));
                                float _4147 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3098 = _3097 * (((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3074) / ((_3087 * 0.699999988079071044921875) + 1.0));
                                float _3110 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                                float _3111 = 1.0 - _616;
                                float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                                float _3119 = _3118 * _3118;
                                float _3120 = _3119 * _3119;
                                float _3121 = _3067 - _2567;
                                float _3122 = _3068 - _2568;
                                float _3123 = _3069 - _2569;
                                float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                                float _3131 = dot(vec3(_541, _544, _547), vec3((-0.0) - _2567, (-0.0) - _2568, (-0.0) - _2569));
                                float _4158 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3135 = dot(vec3(_541, _544, _547), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                                float _4169 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                                float _3143 = _3080 * _3119;
                                float _3144 = _3143 * _3143;
                                float _3150 = ((1.0 - _3144) * dot(vec3(_541, _544, _547), vec3(_3067, _3068, _3069))) + _3144;
                                float _4180 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3152 = 1.0 - _3119;
                                float _3162 = (0.5 / (((_3151 * ((_3134 * _3152) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3119) * _3134))) * _3151;
                                float _4191 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3172 = (_3097 * _3074) * (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) / ((_3142 * _3142) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3172 * _2953.x;
                                frontier_phi_73_pred_1 = _3172 * _2953.y;
                                frontier_phi_73_pred_2 = _3098 * _2941.z;
                                frontier_phi_73_pred_3 = _3098 * _2941.y;
                                frontier_phi_73_pred_4 = _3098 * _2941.x;
                                frontier_phi_73_pred_5 = _3172 * _2953.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3176 = frontier_phi_73_pred;
                            _3177 = frontier_phi_73_pred_1;
                            _3181 = frontier_phi_73_pred_2;
                            _3180 = frontier_phi_73_pred_3;
                            _3179 = frontier_phi_73_pred_4;
                            _3178 = frontier_phi_73_pred_5;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2883;
                        frontier_phi_67_pred_1 = _2884;
                        frontier_phi_67_pred_2 = _2885;
                        frontier_phi_67_pred_3 = _2882;
                        frontier_phi_67_pred_4 = _2881;
                        frontier_phi_67_pred_5 = _2880;
                    }
                    _2548 = frontier_phi_67_pred;
                    _2550 = frontier_phi_67_pred_1;
                    _2552 = frontier_phi_67_pred_2;
                    _2546 = frontier_phi_67_pred_3;
                    _2544 = frontier_phi_67_pred_4;
                    _2542 = frontier_phi_67_pred_5;
                    uint _2687 = _2686 + 1u;
                    if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2680 = _2542;
                        _2681 = _2544;
                        _2682 = _2546;
                        _2683 = _2548;
                        _2684 = _2550;
                        _2685 = _2552;
                        _2686 = _2687;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2550;
                frontier_phi_55_56_ladder_1 = _2552;
                frontier_phi_55_56_ladder_2 = _2548;
                frontier_phi_55_56_ladder_3 = _2546;
                frontier_phi_55_56_ladder_4 = _2544;
                frontier_phi_55_56_ladder_5 = _2542;
            }
            else
            {
                frontier_phi_55_56_ladder = _2436;
                frontier_phi_55_56_ladder_1 = _2438;
                frontier_phi_55_56_ladder_2 = _2434;
                frontier_phi_55_56_ladder_3 = _2432;
                frontier_phi_55_56_ladder_4 = _2430;
                frontier_phi_55_56_ladder_5 = _2428;
            }
            _2541 = frontier_phi_55_56_ladder_5;
            _2543 = frontier_phi_55_56_ladder_4;
            _2545 = frontier_phi_55_56_ladder_3;
            _2547 = frontier_phi_55_56_ladder_2;
            _2549 = frontier_phi_55_56_ladder;
            _2551 = frontier_phi_55_56_ladder_1;
        }
        float _2556 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
        _2340 = (_2556 * _2547) + _1776;
        _2342 = (_2556 * _2549) + _1778;
        _2344 = (_2556 * _2551) + _1780;
        _2346 = ((_2541 * _585) * _2556) + _2121;
        _2348 = ((_2543 * _587) * _2556) + _2123;
        _2350 = ((_2545 * _588) * _2556) + _2125;
    }
    else
    {
        _2340 = _1776;
        _2342 = _1778;
        _2344 = _1780;
        _2346 = _2121;
        _2348 = _2123;
        _2350 = _2125;
    }
    float _4207 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4218 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4229 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    uint _2370 = _560 + 6u;
    float _2378 = _521 / cbSceneParam._m0[86u].x;
    float _2379 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2393 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, (log2((isnan(cbSceneParam._m0[77u].w) ? _455 : (isnan(_455) ? cbSceneParam._m0[77u].w : min(_455, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2395 = _2393.x;
    float _2396 = _2393.y;
    float _2397 = _2393.z;
    float _2398 = _2393.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_455 > cbSceneParam._m0[78u].w)
    {
        float _2453 = isnan(_455) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _455 : min(cbSceneParam._m0[80u].w, _455));
        float _2454 = _2453 / _455;
        float _2465 = _2454 * _506;
        float _2466 = _507 * _2454;
        float _2467 = (-0.0) - _2466;
        float _2469 = _2454 * _508;
        float _2471 = (cbSceneParam._m0[77u].w * _2467) / _2453;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2466;
        float _2479 = sqrt(((_2465 * _2465) + (_2466 * _2466)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2453)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2467 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2602 = 1.0 / cbSceneParam._m0[80u].x;
            float _2603 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2604 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            _2642 = ((abs(_2479 / _2467) * cbSceneParam._m0[80u].y) * ((((_2613 - _2614) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))))) * _2602)) - ((exp2(_2489 * _2613) - exp2(_2489 * _2614)) * _2602))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2398);
        _2491 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2395;
        _2493 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2396;
        _2495 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2397;
        _2497 = _2653 * _2398;
    }
    else
    {
        _2491 = _2395;
        _2493 = _2396;
        _2495 = _2397;
        _2497 = _2398;
    }
    float _2509 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2510 = _2509 == 3.0;
    float _2511 = log2(_2497);
    float _2518 = exp2(_2511 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2340 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _600))) + ((_2346 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2519 = exp2(_2511 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2342 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _600))) + ((_2348 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2520 = exp2(_2511 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2344 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _600))) + ((_2350 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2529 = (_2509 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2529 * (_2510 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.y = _2529 * (_2510 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.z = _2529 * (_2510 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.w = cbInstanceData._m0[_2370].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2370].w;
}


