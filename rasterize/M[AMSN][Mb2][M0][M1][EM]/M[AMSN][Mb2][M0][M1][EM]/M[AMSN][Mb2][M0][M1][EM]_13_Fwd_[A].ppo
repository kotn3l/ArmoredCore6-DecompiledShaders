#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1050;
float _3439;
float _3440;
float _3441;
float _3442;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3451 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3462 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    float _336 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3473 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[14u].y - _321) * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) + _321;
    vec4 _369 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _395 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _410 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _424 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_369.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3484 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _451 = (_445.x * 2.0) + (-1.0);
    float _452 = (_445.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3495 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _469 = (_295 * (((cbMtdParam._m0[13u].z * _325) - _325) + _451)) + _325;
    float _470 = (_295 * (((cbMtdParam._m0[13u].z * _327) - _327) + _452)) + _327;
    float _471 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) - _333)) + _333;
    float _474 = fma(_471, _214 * NORMAL.x, fma(_470, _221 * TANGENT.x, (_207 * _199) * _469));
    float _477 = fma(_471, _214 * NORMAL.y, fma(_470, _221 * TANGENT.y, (_207 * _200) * _469));
    float _480 = fma(_471, _214 * NORMAL.z, fma(_470, _221 * TANGENT.z, (_207 * _201) * _469));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3506 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _488 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3528 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3539 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _557 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _547);
    float _558 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _547);
    float _559 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _547);
    float _563 = inversesqrt(dot(vec3(_557, _558, _559), vec3(_557, _558, _559)));
    float _564 = _557 * _563;
    float _565 = _558 * _563;
    float _566 = _559 * _563;
    vec4 _571 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _573 = _571.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _730 = sqrt(((_557 * _557) + (_558 * _558)) + (_559 * _559));
        float _736 = (cbMatDynParam._m0[5u].x * _730) + cbMatDynParam._m0[5u].y;
        float _3550 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _741 = (cbMatDynParam._m0[5u].z * _730) + cbMatDynParam._m0[5u].w;
        float _3561 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) - _737)) + _737) < ((_573 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _609 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _612 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _625 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = _625 + 9u;
    uint _627 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3572 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    vec4 _647 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _650 = _647.x * TEXCOORD_3.w;
    float _651 = dot(vec3(_485, _486, _487), vec3(_564, _565, _566));
    float _654 = _651 * 2.0;
    float _658 = (_654 * _485) - _564;
    float _659 = (_654 * _486) - _565;
    float _660 = (_654 * _487) - _566;
    float _664 = abs(dot(vec3(_564, _565, _566), vec3(_485, _486, _487)));
    float _3605 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = sqrt(_488);
    float _679 = exp2((_666 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_666 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1049;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _774 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _778 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _782 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _807 = _711 + _485;
        float _808 = _715 + _486;
        float _809 = _719 + _487;
        float _819 = fma(_809, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807)) - _774;
        float _820 = fma(_809, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807)) - _778;
        float _821 = fma(_809, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807)) - _782;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _838 = ((_825 * _819) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_774 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_825 * _820) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_778 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_825 * _821) / cbModelParam._m0[34u].z) + ((((((_782 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        float _877 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_843.x + (-0.5));
        float _879 = _877 * (_843.y + (-0.5));
        float _880 = _877 * (_843.z + (-0.5));
        float _887 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_850.x + (-0.5));
        float _889 = _887 * (_850.y + (-0.5));
        float _890 = _887 * (_850.z + (-0.5));
        float _897 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_857.x + (-0.5));
        float _899 = _897 * (_857.y + (-0.5));
        float _900 = _897 * (_857.z + (-0.5));
        float _907 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_864.x + (-0.5));
        float _909 = _907 * (_864.y + (-0.5));
        float _910 = _907 * (_864.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _931 = (dot(vec3(_485, _486, _487), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _941 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3653 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_943 + 1.0))) + _948) * _911;
        float _958 = _879 * 0.5;
        float _959 = _889 * 0.5;
        float _960 = _899 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_485, _486, _487), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3686 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_985 + 1.0))) + _990) * _912;
        float _1000 = _880 * 0.5;
        float _1001 = _890 * 0.5;
        float _1002 = _900 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_485, _486, _487), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3719 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1027 + 1.0))) + _1032) * _913;
        _1049 = _880;
        _1051 = _879;
        _1052 = _878;
        _1053 = _890;
        _1054 = _889;
        _1055 = _888;
        _1056 = _900;
        _1057 = _899;
        _1058 = _898;
        _1059 = _913;
        _1060 = _912;
        _1061 = _911;
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _1050;
        _1051 = _1050;
        _1052 = _1050;
        _1053 = _1050;
        _1054 = _1050;
        _1055 = _1050;
        _1056 = _1050;
        _1057 = _1050;
        _1058 = _1050;
        _1059 = _1050;
        _1060 = _1050;
        _1061 = _1050;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1093 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1097 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1101 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1124 = _711 + _485;
        float _1125 = _715 + _486;
        float _1126 = _719 + _487;
        float _1136 = fma(_1126, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1093 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1097 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[35u].z) + ((((((_1101 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1192 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1159.x + (-0.5));
        float _1194 = _1192 * (_1159.y + (-0.5));
        float _1195 = _1192 * (_1159.z + (-0.5));
        float _1202 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1166.x + (-0.5));
        float _1204 = _1202 * (_1166.y + (-0.5));
        float _1205 = _1202 * (_1166.z + (-0.5));
        float _1212 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1173.x + (-0.5));
        float _1214 = _1212 * (_1173.y + (-0.5));
        float _1215 = _1212 * (_1173.z + (-0.5));
        float _1222 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1180.x + (-0.5));
        float _1224 = _1222 * (_1180.y + (-0.5));
        float _1225 = _1222 * (_1180.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_485, _486, _487), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3782 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1256 + 1.0))) + _1261) * _1226;
        float _1271 = _1194 * 0.5;
        float _1272 = _1204 * 0.5;
        float _1273 = _1214 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_485, _486, _487), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3815 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1298 + 1.0))) + _1303) * _1227;
        float _1313 = _1195 * 0.5;
        float _1314 = _1205 * 0.5;
        float _1315 = _1215 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_485, _486, _487), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3848 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1340 + 1.0))) + _1345) * _1228;
        _1362 = _1195;
        _1363 = _1194;
        _1364 = _1193;
        _1365 = _1205;
        _1366 = _1204;
        _1367 = _1203;
        _1368 = _1215;
        _1369 = _1214;
        _1370 = _1213;
        _1371 = _1228;
        _1372 = _1227;
        _1373 = _1226;
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1050;
        _1363 = _1050;
        _1364 = _1050;
        _1365 = _1050;
        _1366 = _1050;
        _1367 = _1050;
        _1368 = _1050;
        _1369 = _1050;
        _1370 = _1050;
        _1371 = _1050;
        _1372 = _1050;
        _1373 = _1050;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1062)) + _1062;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1409 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1386));
    float _1430 = _658 * 0.5;
    float _1431 = _659 * 0.5;
    float _1432 = _660 * 0.5;
    float _1433 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1436 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1439 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1473;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1446 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1049, _1053, _1056, _1059));
        float _1450 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1454 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1461 = dot(vec4(cbModelParam._m0[39u]), vec4(_1430, _1431, _1432, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1484;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1475 = dot(vec4(cbModelParam._m0[40u]), vec4(_1430, _1431, _1432, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1488 = (_1484 * cbModelParam._m0[1u].x) + (_1473 * (1.0 - cbModelParam._m0[1u].x));
    float _1498 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _488);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1498 : min(cbModelParam._m0[25u].z, _1498));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1546 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1550 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1554 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1557 = fma(_660, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658));
        float _1560 = fma(_660, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658));
        float _1563 = fma(_660, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658));
        float _1591;
        if (_1557 > 0.0)
        {
            _1591 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1591 = frontier_phi_17_15_ladder;
        }
        float _1794;
        if (_1560 > 0.0)
        {
            _1794 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1794 = frontier_phi_26_22_ladder;
        }
        float _2037;
        if (_1563 > 0.0)
        {
            _2037 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2037 = frontier_phi_38_33_ladder;
        }
        float _2039 = isnan(_1794) ? _1591 : (isnan(_1591) ? _1794 : min(_1591, _1794));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1557) + _1546;
        float _2045 = (_2040 * _1560) + _1550;
        float _2046 = (_2040 * _1563) + _1554;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2047;
        float _2051 = _2047 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 > _2051) || ((_2045 < _2049) || ((_2044 < _2049) || (_2044 > _2051))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2046, cbModelParam._m0[9u].z, fma(_2045, cbModelParam._m0[9u].y, _2044 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2046, cbModelParam._m0[10u].z, fma(_2045, cbModelParam._m0[10u].y, _2044 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2046, cbModelParam._m0[11u].z, fma(_2045, cbModelParam._m0[11u].y, _2044 * cbModelParam._m0[11u].x))), _1499);
            frontier_phi_16_38_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1579 = frontier_phi_16_38_ladder_2;
        _1581 = frontier_phi_16_38_ladder_1;
        _1583 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_658, _659, _660), _1499);
        _1579 = _1567.x * cbModelParam._m0[1u].y;
        _1581 = _1567.y * cbModelParam._m0[1u].y;
        _1583 = _1567.z * cbModelParam._m0[1u].y;
    }
    float _1587 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _488);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1587 : min(cbModelParam._m0[25u].w, _1587));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1643 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1647 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1651 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1654 = fma(_660, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658));
        float _1657 = fma(_660, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658));
        float _1660 = fma(_660, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658));
        float _1799;
        if (_1654 > 0.0)
        {
            _1799 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1799 = frontier_phi_28_24_ladder;
        }
        float _2064;
        if (_1657 > 0.0)
        {
            _2064 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2064 = frontier_phi_40_35_ladder;
        }
        float _2269;
        if (_1660 > 0.0)
        {
            _2269 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2269 = frontier_phi_49_46_ladder;
        }
        float _2271 = isnan(_2064) ? _1799 : (isnan(_1799) ? _2064 : min(_1799, _2064));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1654) + _1643;
        float _2277 = (_2272 * _1657) + _1647;
        float _2278 = (_2272 * _1660) + _1651;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2278, cbModelParam._m0[17u].z, fma(_2277, cbModelParam._m0[17u].y, _2276 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2278, cbModelParam._m0[18u].z, fma(_2277, cbModelParam._m0[18u].y, _2276 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2278, cbModelParam._m0[19u].z, fma(_2277, cbModelParam._m0[19u].y, _2276 * cbModelParam._m0[19u].x))), _1588);
            frontier_phi_25_49_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1679 = frontier_phi_25_49_ladder_2;
        _1681 = frontier_phi_25_49_ladder_1;
        _1683 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_658, _659, _660), _1588);
        _1679 = _1663.x * cbModelParam._m0[1u].z;
        _1681 = _1663.y * cbModelParam._m0[1u].z;
        _1683 = _1663.z * cbModelParam._m0[1u].z;
    }
    float _1695 = ((((1.0 - _679) * ((_666 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _666)) * _650;
    float _1696 = _1695 * ((cbModelParam._m0[1u].w * (_1679 - _1579)) + _1579);
    float _1697 = _1695 * ((cbModelParam._m0[1u].w * (_1681 - _1581)) + _1581);
    float _1698 = _1695 * ((cbModelParam._m0[1u].w * (_1683 - _1583)) + _1583);
    float _1701 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1696 * cbSceneParam._m0[91u].x));
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_625 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1727 = _650 + (-1.0);
    float _1732 = (cbLight._m0[_1720].x * _1727) + 1.0;
    float _1733 = (cbLight._m0[_1720].y * _1727) + 1.0;
    float _1734 = (cbLight._m0[_1720].z * _1727) + 1.0;
    float _1735 = (cbLight._m0[_1720].w * _1727) + 1.0;
    uint _1736 = _1719 + 5u;
    float _1742 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1746 = _1719 + 4u;
    float _1753 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1757 = _1719 | 1u;
    float _1768 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_485, _486, _487));
    float _1771 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_485, _486, _487));
    float _3984 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _3995 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1776 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.3183098733425140380859375;
    float _1778 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1785 = ((cbLight._m0[_1736].x * _1742) * _1778) + ((cbLight._m0[_1746].x * _1753) * _1776);
    float _1786 = ((_1742 * cbLight._m0[_1736].y) * _1778) + ((_1753 * cbLight._m0[_1746].y) * _1776);
    float _1787 = ((_1742 * cbLight._m0[_1736].z) * _1778) + ((_1753 * cbLight._m0[_1746].z) * _1776);
    uvec4 _1791 = floatBitsToUint(cbLight._m0[_1719 + 12u]);
    bool _1793 = _1791.x == 0u;
    float _1804;
    float _1806;
    float _1808;
    if (_1793)
    {
        _1804 = _1785;
        _1806 = _1786;
        _1808 = _1787;
    }
    else
    {
        uint _1812 = _1719 + 6u;
        float _1828 = (dot(vec3(cbLight._m0[_1719 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _1829 = _1828 * _1828;
        float _4006 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1831 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _1804 = (((cbLight._m0[_1812].x * 0.3183098733425140380859375) * _1830) * _1831) + _1785;
        _1806 = (((cbLight._m0[_1812].y * 0.3183098733425140380859375) * _1830) * _1831) + _1786;
        _1808 = (((cbLight._m0[_1812].z * 0.3183098733425140380859375) * _1830) * _1831) + _1787;
    }
    bool _1811 = _1791.y == 0u;
    float _1849;
    float _1851;
    float _1853;
    if (_1811)
    {
        _1849 = _1804;
        _1851 = _1806;
        _1853 = _1808;
    }
    else
    {
        uint _2008 = _1719 + 7u;
        float _2024 = (dot(vec3(cbLight._m0[_1719 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _4022 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2027 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1849 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1804;
        _1851 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1806;
        _1853 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1808;
    }
    uint _1856 = _1719 + 8u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1719].w)) * _488) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1719].x + _564;
    float _1872 = cbLight._m0[_1719].y + _565;
    float _1873 = cbLight._m0[_1719].z + _566;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1719].xyz));
    float _4038 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _1885 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1886 = dot(vec3(_485, _486, _487), vec3(_1878, _1879, _1880));
    float _4060 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1878, _1879, _1880));
    float _4071 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1870 * _1870;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1910 = 1.0 - _1870;
    float _1921 = (0.5 / (((_1885 * ((_1884 * _1910) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1910) + _1870) * _1884))) * _1884;
    float _4082 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    uint _1934 = _1719 + 9u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _488) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1757].x + _564;
    float _1948 = cbLight._m0[_1757].y + _565;
    float _1949 = cbLight._m0[_1757].z + _566;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1757].xyz));
    float _4093 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1961 = dot(vec3(_485, _486, _487), vec3(_1954, _1955, _1956));
    float _4104 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1954, _1955, _1956));
    float _4115 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1946 * _1946;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1946;
    float _1993 = (0.5 / (((_1885 * ((_1960 * _1983) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _1983) + _1946) * _1960))) * _1960;
    float _4126 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    float _2005 = (((_1982 * cbLight._m0[_1934].x) * _1995) * _1742) + (((_1909 * cbLight._m0[_1856].x) * _1923) * _1753);
    float _2006 = (((_1982 * cbLight._m0[_1934].y) * _1995) * _1742) + (((_1909 * cbLight._m0[_1856].y) * _1923) * _1753);
    float _2007 = (((_1982 * cbLight._m0[_1934].z) * _1995) * _1742) + (((_1909 * cbLight._m0[_1856].z) * _1923) * _1753);
    float _2069;
    float _2071;
    float _2073;
    if (_1793)
    {
        _2069 = _2005;
        _2071 = _2006;
        _2073 = _2007;
    }
    else
    {
        uint _2075 = _1719 + 2u;
        uint _2079 = _1719 + 10u;
        float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _488) * 0.949999988079071044921875);
        float _2094 = _2093 * _2093;
        float _2095 = cbLight._m0[_2075].x + _564;
        float _2096 = cbLight._m0[_2075].y + _565;
        float _2097 = cbLight._m0[_2075].z + _566;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2102 = _2101 * _2095;
        float _2103 = _2101 * _2096;
        float _2104 = _2101 * _2097;
        float _2105 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2075].xyz));
        float _4137 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2109 = dot(vec3(_485, _486, _487), vec3(_2102, _2103, _2104));
        float _4148 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2113 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2102, _2103, _2104));
        float _4159 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2117 = _2094 * _2094;
        float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
        float _2130 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2131 = 1.0 - _2094;
        float _2141 = (0.5 / (((_1885 * ((_2108 * _2131) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _2131) + _2094) * _2108))) * _2108;
        float _4170 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _2069 = (((_2130 * cbLight._m0[_2079].x) * _2143) * _2144) + _2005;
        _2071 = (((_2130 * cbLight._m0[_2079].y) * _2143) * _2144) + _2006;
        _2073 = (((_2130 * cbLight._m0[_2079].z) * _2143) * _2144) + _2007;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1811)
    {
        _2179 = _2069;
        _2181 = _2071;
        _2183 = _2073;
    }
    else
    {
        uint _2190 = _1719 + 3u;
        uint _2194 = _1719 + 11u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _488) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _564;
        float _2211 = cbLight._m0[_2190].y + _565;
        float _2212 = cbLight._m0[_2190].z + _566;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2190].xyz));
        float _4186 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2224 = dot(vec3(_485, _486, _487), vec3(_2217, _2218, _2219));
        float _4197 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4208 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1885 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1885 * _2246) + _2209) * _2223))) * _2223;
        float _4219 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2179 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2069;
        _2181 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2071;
        _2183 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2073;
    }
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_1717.y == 0u)
    {
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2334;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2334;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2334;
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.x;
        uint _2361 = uint((float(_2349.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2350))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2350)));
        float _2371 = (log2(_2337 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2372 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        uint _2375 = uint(isnan(14.0) ? _2372 : (isnan(_2372) ? 14.0 : min(_2372, 14.0)));
        uvec4 _2380 = texelFetch(g_lightClusterGridBuffer, int(((_2375 << 2u) + (_2361 << 6u)) >> 2u));
        uint _2381 = _2380.x;
        uint _2382 = _2349.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2382 >> 4u) & 15u)) + 4294967295u) & _2381) == 0u) || ((_2382 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            uint _2666 = 0u;
            uint _2675;
            bool _2676;
            for (;;)
            {
                _2675 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                _2676 = _2675 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2676)
                {
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2665;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                else
                {
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    uint _2811;
                    _2805 = _2660;
                    _2806 = _2661;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2675;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2815 = uint(findLSB(_2811)) + (_2666 << 5u);
                        uint _2812 = (_2811 + 4294967295u) & _2811;
                        uint _2817 = _2815 * 48u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2837 = (_2815 * 48u) + 4u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2856 = (_2815 * 48u) + 8u;
                        vec3 _2867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x));
                        float _2871 = _2831.x - _2335;
                        float _2872 = _2831.y - _2336;
                        float _2873 = _2831.z - _2337;
                        float _2874 = dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873));
                        float _2877 = inversesqrt(_2874);
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2881 = dot(vec3(_606, _609, _612), vec3(_2878, _2879, _2880));
                        float _2886 = 1.0 - (_2874 * _2831.w);
                        float _4245 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2888 = sqrt(_2874) * _2850.w;
                        float _2891 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2881) + _2892;
                        float _2898 = _2888 * _2888;
                        float _2902 = ((isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))) * _2887) / ((_2898 * 0.699999988079071044921875) + 1.0);
                        float _2906 = (-0.0) - _2335;
                        float _2907 = (-0.0) - _2336;
                        float _2908 = (-0.0) - _2337;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2923 = exp2(log2(1.0 / ((_2898 * 3.5) + 5.0)) * 0.25);
                        float _2924 = 1.0 - _666;
                        float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                        float _2932 = _2931 * _2931;
                        float _2933 = _2932 * _2932;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2944 = dot(vec3(_606, _609, _612), vec3(_2913, _2914, _2915));
                        float _4261 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2948 = dot(vec3(_606, _609, _612), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                        float _4272 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                        float _2956 = _2891 * _2932;
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2881) + _2957;
                        float _4283 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2962 = 1.0 - _2932;
                        float _2972 = (0.5 / (((_2961 * ((_2947 * _2962) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2932) * _2947))) * _2961;
                        float _4294 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2983 = (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_2955 * _2955) * ((_2898 * 2.1991131305694580078125) + 3.141590118408203125))) * _2887;
                        _2735 = (_2902 * _2850.x) + _2808;
                        _2736 = (_2902 * _2850.y) + _2809;
                        _2737 = (_2902 * _2850.z) + _2810;
                        _2732 = (_2983 * _2867.x) + _2805;
                        _2733 = (_2983 * _2867.y) + _2806;
                        _2734 = (_2983 * _2867.z) + _2807;
                        if (_2812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2812;
                        }
                    }
                    frontier_phi_66_pred = _2732;
                    frontier_phi_66_pred_1 = _2737;
                    frontier_phi_66_pred_2 = _2736;
                    frontier_phi_66_pred_3 = _2735;
                    frontier_phi_66_pred_4 = _2734;
                    frontier_phi_66_pred_5 = _2733;
                }
                _2508 = frontier_phi_66_pred;
                _2518 = frontier_phi_66_pred_1;
                _2516 = frontier_phi_66_pred_2;
                _2514 = frontier_phi_66_pred_3;
                _2512 = frontier_phi_66_pred_4;
                _2510 = frontier_phi_66_pred_5;
                uint _2667 = _2666 + 1u;
                if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2660 = _2508;
                    _2661 = _2510;
                    _2662 = _2512;
                    _2663 = _2514;
                    _2664 = _2516;
                    _2665 = _2518;
                    _2666 = _2667;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((4294967295u << _2524) & _2381) == 0u)
        {
            _2628 = _2507;
            _2630 = _2509;
            _2632 = _2511;
            _2634 = _2513;
            _2636 = _2515;
            _2638 = _2517;
        }
        else
        {
            float _2653 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
            float _2654 = _2653 * _2335;
            float _2655 = _2653 * _2336;
            float _2656 = _2653 * _2337;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2788 = _2507;
                float _2789 = _2509;
                float _2790 = _2511;
                float _2791 = _2513;
                float _2792 = _2515;
                float _2793 = _2517;
                uint _2794 = _2524;
                uint _2803;
                bool _2804;
                for (;;)
                {
                    _2803 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                    _2804 = _2803 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2804)
                    {
                        frontier_phi_77_pred = _2793;
                        frontier_phi_77_pred_1 = _2792;
                        frontier_phi_77_pred_2 = _2791;
                        frontier_phi_77_pred_3 = _2790;
                        frontier_phi_77_pred_4 = _2789;
                        frontier_phi_77_pred_5 = _2788;
                    }
                    else
                    {
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3010 = _2788;
                        float _3011 = _2789;
                        float _3012 = _2790;
                        float _3013 = _2791;
                        float _3014 = _2792;
                        float _3015 = _2793;
                        uint _3016 = _2803;
                        uint _3017;
                        vec4 _3042;
                        float _3043;
                        vec4 _3058;
                        vec3 _3070;
                        vec4 _3085;
                        vec4 _3101;
                        float _3148;
                        bool _3149;
                        for (;;)
                        {
                            uint _3027 = ((_2794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3016));
                            _3017 = (_3016 + 4294967295u) & _3016;
                            uint _3029 = _3027 * 40u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3043 = _3042.w;
                            uint _3045 = (_3027 * 40u) + 4u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_3027 * 40u) + 8u;
                            _3070 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x));
                            uint _3072 = (_3027 * 40u) + 16u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_3027 * 40u) + 20u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3104 = (_3027 * 40u) + 24u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3123 = (_3027 * 40u) + 28u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3148 = fma(_2337, _3136.z, fma(_2336, _3136.y, _3136.x * _2335)) + _3136.w;
                            _3149 = !((fma(_2337, _3117.z, fma(_2336, _3117.y, _3117.x * _2335)) + _3117.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3149)
                            {
                                float _3176 = _3042.x - _2335;
                                float _3177 = _3042.y - _2336;
                                float _3178 = _3042.z - _2337;
                                float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                                float _3182 = inversesqrt(_3179);
                                float _3183 = _3182 * _3176;
                                float _3184 = _3182 * _3177;
                                float _3185 = _3182 * _3178;
                                float _3189 = 1.0 - (_3179 / (_3043 * _3043));
                                float _4305 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3194 = sqrt(_3179) * _3058.w;
                                float _3196 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                                float _3197 = _3196 * _3196;
                                float _3200 = ((1.0 - _3197) * dot(vec3(_3183, _3184, _3185), vec3(_606, _609, _612))) + _3197;
                                float _3203 = _3194 * _3194;
                                float _3207 = (fma(_2337, _3085.z, fma(_2336, _3085.y, _3085.x * _2335)) + _3085.w) / _3148;
                                float _3208 = (fma(_2337, _3101.z, fma(_2336, _3101.y, _3101.x * _2335)) + _3101.w) / _3148;
                                float _3212 = 1.0 - dot(vec2(_3207, _3208), vec2(_3207, _3208));
                                float _4321 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3214 = _3213 * (((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3190) / ((_3203 * 0.699999988079071044921875) + 1.0));
                                float _3226 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                                float _3227 = 1.0 - _666;
                                float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                                float _3235 = _3234 * _3234;
                                float _3236 = _3235 * _3235;
                                float _3237 = _3183 - _2654;
                                float _3238 = _3184 - _2655;
                                float _3239 = _3185 - _2656;
                                float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                                float _3247 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2654, (-0.0) - _2655, (-0.0) - _2656));
                                float _4332 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3251 = dot(vec3(_606, _609, _612), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                                float _4343 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                                float _3259 = _3196 * _3235;
                                float _3260 = _3259 * _3259;
                                float _3266 = ((1.0 - _3260) * dot(vec3(_606, _609, _612), vec3(_3183, _3184, _3185))) + _3260;
                                float _4354 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3268 = 1.0 - _3235;
                                float _3278 = (0.5 / (((_3267 * ((_3250 * _3268) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3235) * _3250))) * _3267;
                                float _4365 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3288 = (_3213 * _3190) * (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3258 * _3258) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3214 * _3058.y;
                                frontier_phi_83_pred_1 = _3214 * _3058.x;
                                frontier_phi_83_pred_2 = _3288 * _3070.z;
                                frontier_phi_83_pred_3 = _3288 * _3070.y;
                                frontier_phi_83_pred_4 = _3288 * _3070.x;
                                frontier_phi_83_pred_5 = _3214 * _3058.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3296 = frontier_phi_83_pred;
                            _3295 = frontier_phi_83_pred_1;
                            _3294 = frontier_phi_83_pred_2;
                            _3293 = frontier_phi_83_pred_3;
                            _3292 = frontier_phi_83_pred_4;
                            _3297 = frontier_phi_83_pred_5;
                            _3000 = _3295 + _3013;
                            _3001 = _3296 + _3014;
                            _3002 = _3297 + _3015;
                            _2997 = _3292 + _3010;
                            _2998 = _3293 + _3011;
                            _2999 = _3294 + _3012;
                            if (_3017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3017;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3002;
                        frontier_phi_77_pred_1 = _3001;
                        frontier_phi_77_pred_2 = _3000;
                        frontier_phi_77_pred_3 = _2999;
                        frontier_phi_77_pred_4 = _2998;
                        frontier_phi_77_pred_5 = _2997;
                    }
                    _2639 = frontier_phi_77_pred;
                    _2637 = frontier_phi_77_pred_1;
                    _2635 = frontier_phi_77_pred_2;
                    _2633 = frontier_phi_77_pred_3;
                    _2631 = frontier_phi_77_pred_4;
                    _2629 = frontier_phi_77_pred_5;
                    uint _2795 = _2794 + 1u;
                    if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2788 = _2629;
                        _2789 = _2631;
                        _2790 = _2633;
                        _2791 = _2635;
                        _2792 = _2637;
                        _2793 = _2639;
                        _2794 = _2795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2633;
                frontier_phi_58_59_ladder_1 = _2639;
                frontier_phi_58_59_ladder_2 = _2637;
                frontier_phi_58_59_ladder_3 = _2635;
                frontier_phi_58_59_ladder_4 = _2631;
                frontier_phi_58_59_ladder_5 = _2629;
            }
            else
            {
                frontier_phi_58_59_ladder = _2511;
                frontier_phi_58_59_ladder_1 = _2517;
                frontier_phi_58_59_ladder_2 = _2515;
                frontier_phi_58_59_ladder_3 = _2513;
                frontier_phi_58_59_ladder_4 = _2509;
                frontier_phi_58_59_ladder_5 = _2507;
            }
            _2628 = frontier_phi_58_59_ladder_5;
            _2630 = frontier_phi_58_59_ladder_4;
            _2632 = frontier_phi_58_59_ladder;
            _2634 = frontier_phi_58_59_ladder_3;
            _2636 = frontier_phi_58_59_ladder_2;
            _2638 = frontier_phi_58_59_ladder_1;
        }
        float _2643 = isnan(1.0) ? _650 : (isnan(_650) ? 1.0 : min(_650, 1.0));
        _2394 = (_2643 * _2634) + _1849;
        _2396 = (_2643 * _2636) + _1851;
        _2398 = (_2643 * _2638) + _1853;
        _2400 = ((_2628 * 0.039999999105930328369140625) * _2643) + _2179;
        _2402 = ((_2630 * 0.039999999105930328369140625) * _2643) + _2181;
        _2404 = ((_2632 * 0.039999999105930328369140625) * _2643) + _2183;
    }
    else
    {
        _2394 = _1849;
        _2396 = _1851;
        _2398 = _1853;
        _2400 = _2179;
        _2402 = _2181;
        _2404 = _2183;
    }
    uint _2410 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _4381 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4392 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4403 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2441 = (((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2394 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _650))) + ((_2400 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + (((_425 * cbMtdParam._m0[11u].x) * (_410.x + _395.x)) * cbInstanceData._m0[_2410].x);
    float _2443 = ((((_425 * cbMtdParam._m0[11u].y) * (_410.y + _395.y)) * cbInstanceData._m0[_2410].y) + ((_2402 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2396 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _650)));
    float _2445 = ((((_425 * cbMtdParam._m0[11u].z) * (_410.z + _395.z)) * cbInstanceData._m0[_2410].z) + ((_2404 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2398 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _650)));
    float _2446 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2447 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2448 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    uint _2449 = _625 + 6u;
    float _2457 = _585 / cbSceneParam._m0[86u].x;
    float _2458 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2533 = _2532 / _507;
        float _2544 = _2533 * _557;
        float _2545 = _558 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2548 = _2533 * _559;
        float _2550 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2551 = _2550 + cbSceneParam._m0[79u].w;
        float _2552 = cbSceneParam._m0[79u].w - _2545;
        float _2558 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2548 * _2548));
        float _2561 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2558;
        float _2566 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2568 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2546 - _2550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2551 > 0.0) ? exp2(_2566 * _2551) : (2.0 - exp2(_2568 * _2551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2561;
        }
        else
        {
            float _2689 = 1.0 / cbSceneParam._m0[80u].x;
            float _2690 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : max(_2551, _2552));
            float _2691 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : min(_2551, _2552));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            float _2701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : min(_2691, 0.0));
            _2745 = ((abs(_2558 / _2546) * cbSceneParam._m0[80u].y) * ((((_2700 - _2701) * 2.0) - ((exp2(_2566 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0)))) - exp2(_2566 * (isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))))) * _2689)) - ((exp2(_2568 * _2700) - exp2(_2568 * _2701)) * _2689))) + (_2561 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2477);
        _2570 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2572 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2574 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2576 = _2756 * _2477;
    }
    else
    {
        _2570 = _2474;
        _2572 = _2475;
        _2574 = _2476;
        _2576 = _2477;
    }
    bool _2783;
    vec4 _2586;
    vec4 _2608;
    float _2610;
    float _2614;
    float _2615;
    float _2616;
    float _2617;
    bool _2627;
    for (;;)
    {
        _2586 = cbMatDynParam._m0[0u];
        float _2588 = roundEven(_2586.y);
        bool _2589 = _2588 == 3.0;
        float _2590 = log2(_2576);
        float _2597 = exp2(_2590 * cbSceneParam._m0[78u].x) * _2446;
        float _2598 = exp2(_2590 * cbSceneParam._m0[78u].y) * _2447;
        float _2599 = exp2(_2590 * cbSceneParam._m0[78u].z) * _2448;
        float _2606 = _573 + (-0.5);
        _2608 = cbMtdParam._m0[1u];
        _2610 = _2608.y * _2606;
        float _2613 = (_2588 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2614 = _2613 * (_2589 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2570)));
        _2615 = _2613 * (_2589 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2572)));
        _2616 = _2613 * (_2589 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2574)));
        _2617 = _2606 * 0.999000012874603271484375;
        _2627 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2627)
        {
            if ((cbInstanceData._m0[_625 + 7u].x + _2617) < 0.5)
            {
                _2783 = true;
                break;
            }
        }
        uint _2724 = _626 + uint(_2586.w);
        if ((cbInstanceData._m0[_2724].w < 1.0) && ((cbInstanceData._m0[_2724].w + _2617) < 0.5))
        {
            _2783 = true;
            break;
        }
        if ((_2610 + 1.0) < _2608.x)
        {
            _2783 = true;
            break;
        }
        _2783 = false;
        break;
    }
    float _2988;
    if (_2783)
    {
        discard_state = true;
        _2988 = 0.0;
    }
    else
    {
        _2988 = cbInstanceData._m0[_2449].w;
    }
    SV_Target.x = _2614;
    SV_Target.y = _2615;
    SV_Target.z = _2616;
    SV_Target.w = _2988;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2449].w;
    discard_exit();
}


