#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1052;
float _3465;
float _3466;
float _3467;
float _3468;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _294 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_273.x + 0.00999999977648258209228515625));
    float _296 = _294 * (cbMtdParam._m0[15u].x + 1.0);
    float _3477 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _305 = ((((cbMtdParam._m0[12u].x - _251) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _297) + _251;
    float _306 = ((((cbMtdParam._m0[12u].y - _252) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _297) + _252;
    float _307 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _253)) * _297) + _253;
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _323 = _319.z;
    float _327 = (_319.x * 2.0) + (-1.0);
    float _329 = (_319.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3488 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    float _338 = _294 * (cbMtdParam._m0[14u].w + 1.0);
    float _3499 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _342 = ((cbMtdParam._m0[14u].y - _323) * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) + _323;
    vec4 _371 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _397 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _426 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_371.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3510 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _453 = (_447.x * 2.0) + (-1.0);
    float _454 = (_447.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3521 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _471 = (_297 * (((cbMtdParam._m0[13u].z * _327) - _327) + _453)) + _327;
    float _472 = (_297 * (((cbMtdParam._m0[13u].z * _329) - _329) + _454)) + _329;
    float _473 = (_297 * (sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) - _335)) + _335;
    float _476 = fma(_473, _216 * NORMAL.x, fma(_472, _223 * TANGENT.x, (_209 * _201) * _471));
    float _479 = fma(_473, _216 * NORMAL.y, fma(_472, _223 * TANGENT.y, (_209 * _202) * _471));
    float _482 = fma(_473, _216 * NORMAL.z, fma(_472, _223 * TANGENT.z, (_209 * _203) * _471));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3532 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _490 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3554 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3565 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _509 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _559 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _549);
    float _560 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _549);
    float _561 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _549);
    float _565 = inversesqrt(dot(vec3(_559, _560, _561), vec3(_559, _560, _561)));
    float _566 = _559 * _565;
    float _567 = _560 * _565;
    float _568 = _561 * _565;
    vec4 _573 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _575 = _573.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _732 = sqrt(((_559 * _559) + (_560 * _560)) + (_561 * _561));
        float _738 = (cbMatDynParam._m0[5u].x * _732) + cbMatDynParam._m0[5u].y;
        float _3576 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _743 = (cbMatDynParam._m0[5u].z * _732) + cbMatDynParam._m0[5u].w;
        float _3587 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) - _739)) + _739) < ((_575 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _611 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _614 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _627 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _627 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3598 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _652 = _649.x * TEXCOORD_3.w;
    float _653 = dot(vec3(_487, _488, _489), vec3(_566, _567, _568));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _487) - _566;
    float _661 = (_656 * _488) - _567;
    float _662 = (_656 * _489) - _568;
    float _666 = abs(dot(vec3(_566, _567, _568), vec3(_487, _488, _489)));
    float _3631 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_490);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _780 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _784 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _809 = _713 + _487;
        float _810 = _717 + _488;
        float _811 = _721 + _489;
        float _821 = fma(_811, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809)) - _776;
        float _822 = fma(_811, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809)) - _780;
        float _823 = fma(_811, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809)) - _784;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_776 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_780 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[34u].z) + ((((((_784 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _879 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_845.x + (-0.5));
        float _881 = _879 * (_845.y + (-0.5));
        float _882 = _879 * (_845.z + (-0.5));
        float _889 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_852.x + (-0.5));
        float _891 = _889 * (_852.y + (-0.5));
        float _892 = _889 * (_852.z + (-0.5));
        float _899 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_859.x + (-0.5));
        float _901 = _899 * (_859.y + (-0.5));
        float _902 = _899 * (_859.z + (-0.5));
        float _909 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_866.x + (-0.5));
        float _911 = _909 * (_866.y + (-0.5));
        float _912 = _909 * (_866.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(_487, _488, _489), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3679 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_487, _488, _489), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3712 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_487, _488, _489), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3745 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1099 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1103 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1126 = _713 + _487;
        float _1127 = _717 + _488;
        float _1128 = _721 + _489;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_487, _488, _489), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3808 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_487, _488, _489), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3841 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_487, _488, _489), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3874 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1052;
        _1365 = _1052;
        _1366 = _1052;
        _1367 = _1052;
        _1368 = _1052;
        _1369 = _1052;
        _1370 = _1052;
        _1371 = _1052;
        _1372 = _1052;
        _1373 = _1052;
        _1374 = _1052;
        _1375 = _1052;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1066)) + _1066;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _660 * 0.5;
    float _1433 = _661 * 0.5;
    float _1434 = _662 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1475;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1486;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1477 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1490 = (_1486 * cbModelParam._m0[1u].x) + (_1475 * (1.0 - cbModelParam._m0[1u].x));
    float _1500 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _490);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1500 : min(cbModelParam._m0[25u].z, _1500));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1562 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1565 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1593 = frontier_phi_17_15_ladder;
        }
        float _1817;
        if (_1562 > 0.0)
        {
            _1817 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1817 = frontier_phi_26_22_ladder;
        }
        float _2063;
        if (_1565 > 0.0)
        {
            _2063 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2063 = frontier_phi_38_33_ladder;
        }
        float _2065 = isnan(_1817) ? _1593 : (isnan(_1593) ? _1817 : min(_1593, _1817));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1559) + _1548;
        float _2071 = (_2066 * _1562) + _1552;
        float _2072 = (_2066 * _1565) + _1556;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2073;
        float _2077 = _2073 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 > _2077) || ((_2071 < _2075) || ((_2070 < _2075) || (_2070 > _2077))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2072, cbModelParam._m0[9u].z, fma(_2071, cbModelParam._m0[9u].y, _2070 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2072, cbModelParam._m0[10u].z, fma(_2071, cbModelParam._m0[10u].y, _2070 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2072, cbModelParam._m0[11u].z, fma(_2071, cbModelParam._m0[11u].y, _2070 * cbModelParam._m0[11u].x))), _1501);
            frontier_phi_16_38_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_16_38_ladder_2;
        _1583 = frontier_phi_16_38_ladder_1;
        _1585 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1501);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _490);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1645 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1649 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1653 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1656 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1659 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1662 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1822;
        if (_1656 > 0.0)
        {
            _1822 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1822 = frontier_phi_28_24_ladder;
        }
        float _2090;
        if (_1659 > 0.0)
        {
            _2090 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2090 = frontier_phi_40_35_ladder;
        }
        float _2295;
        if (_1662 > 0.0)
        {
            _2295 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2295 = frontier_phi_49_46_ladder;
        }
        float _2297 = isnan(_2090) ? _1822 : (isnan(_1822) ? _2090 : min(_1822, _2090));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1656) + _1645;
        float _2303 = (_2298 * _1659) + _1649;
        float _2304 = (_2298 * _1662) + _1653;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2305;
        float _2308 = _2305 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2304 > _2308) || ((_2304 < _2306) || ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 < _2306) || (_2302 > _2308))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2304, cbModelParam._m0[17u].z, fma(_2303, cbModelParam._m0[17u].y, _2302 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2304, cbModelParam._m0[18u].z, fma(_2303, cbModelParam._m0[18u].y, _2302 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2304, cbModelParam._m0[19u].z, fma(_2303, cbModelParam._m0[19u].y, _2302 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_25_49_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1681 = frontier_phi_25_49_ladder_2;
        _1683 = frontier_phi_25_49_ladder_1;
        _1685 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1590);
        _1681 = _1665.x * cbModelParam._m0[1u].z;
        _1683 = _1665.y * cbModelParam._m0[1u].z;
        _1685 = _1665.z * cbModelParam._m0[1u].z;
    }
    float _1697 = ((((1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _668)) * _652;
    float _1698 = _1697 * ((cbModelParam._m0[1u].w * (_1681 - _1581)) + _1581);
    float _1699 = _1697 * ((cbModelParam._m0[1u].w * (_1683 - _1583)) + _1583);
    float _1700 = _1697 * ((cbModelParam._m0[1u].w * (_1685 - _1585)) + _1585);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    vec4 _1717 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_587, _588));
    float _1719 = _1717.w;
    float _1731 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1719);
    float _1732 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1719);
    float _1733 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1719);
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_627 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1747 = _652 + (-1.0);
    float _1752 = (cbLight._m0[_1740].x * _1747) + 1.0;
    float _1753 = (cbLight._m0[_1740].y * _1747) + 1.0;
    float _1754 = (cbLight._m0[_1740].z * _1747) + 1.0;
    float _1755 = (cbLight._m0[_1740].w * _1747) + 1.0;
    uint _1756 = _1739 + 5u;
    float _1762 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1766 = _1739 + 4u;
    float _1776 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1780 = _1739 | 1u;
    float _1791 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_487, _488, _489));
    float _1794 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_487, _488, _489));
    float _4010 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _4021 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1799 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.3183098733425140380859375;
    float _1801 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1808 = ((cbLight._m0[_1756].x * _1762) * _1801) + (((cbLight._m0[_1766].x * _1731) * _1776) * _1799);
    float _1809 = ((_1762 * cbLight._m0[_1756].y) * _1801) + (((cbLight._m0[_1766].y * _1732) * _1776) * _1799);
    float _1810 = ((_1762 * cbLight._m0[_1756].z) * _1801) + (((cbLight._m0[_1766].z * _1733) * _1776) * _1799);
    uvec4 _1814 = floatBitsToUint(cbLight._m0[_1739 + 12u]);
    bool _1816 = _1814.x == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1816)
    {
        _1827 = _1808;
        _1829 = _1809;
        _1831 = _1810;
    }
    else
    {
        uint _1835 = _1739 + 6u;
        float _1851 = (dot(vec3(cbLight._m0[_1739 + 2u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _4032 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1854 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1827 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1808;
        _1829 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1809;
        _1831 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1810;
    }
    bool _1834 = _1814.y == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1834)
    {
        _1872 = _1827;
        _1874 = _1829;
        _1876 = _1831;
    }
    else
    {
        uint _2034 = _1739 + 7u;
        float _2050 = (dot(vec3(cbLight._m0[_1739 + 3u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4048 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2053 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1872 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1827;
        _1874 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1829;
        _1876 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1831;
    }
    uint _1879 = _1739 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _490) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1739].x + _566;
    float _1895 = cbLight._m0[_1739].y + _567;
    float _1896 = cbLight._m0[_1739].z + _568;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1739].xyz));
    float _4064 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _1908 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _1909 = dot(vec3(_487, _488, _489), vec3(_1901, _1902, _1903));
    float _4086 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1901, _1902, _1903));
    float _4097 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1893;
    float _1944 = (0.5 / (((_1908 * ((_1907 * _1933) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1933) + _1893) * _1907))) * _1907;
    float _4108 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1960 = _1739 + 9u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _490) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1780].x + _566;
    float _1974 = cbLight._m0[_1780].y + _567;
    float _1975 = cbLight._m0[_1780].z + _568;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1780].xyz));
    float _4119 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1987 = dot(vec3(_487, _488, _489), vec3(_1980, _1981, _1982));
    float _4130 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1991 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1980, _1981, _1982));
    float _4141 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = _1972 * _1972;
    float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
    float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2009 = 1.0 - _1972;
    float _2019 = (0.5 / (((_1908 * ((_1986 * _2009) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2009) + _1972) * _1986))) * _1986;
    float _4152 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
    float _2031 = (((_2008 * cbLight._m0[_1960].x) * _2021) * _1762) + ((((cbLight._m0[_1879].x * _1731) * _1932) * _1946) * _1776);
    float _2032 = (((_2008 * cbLight._m0[_1960].y) * _2021) * _1762) + ((((cbLight._m0[_1879].y * _1732) * _1932) * _1946) * _1776);
    float _2033 = (((_2008 * cbLight._m0[_1960].z) * _2021) * _1762) + ((((cbLight._m0[_1879].z * _1733) * _1932) * _1946) * _1776);
    float _2095;
    float _2097;
    float _2099;
    if (_1816)
    {
        _2095 = _2031;
        _2097 = _2032;
        _2099 = _2033;
    }
    else
    {
        uint _2101 = _1739 + 2u;
        uint _2105 = _1739 + 10u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _490) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _566;
        float _2122 = cbLight._m0[_2101].y + _567;
        float _2123 = cbLight._m0[_2101].z + _568;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2101].xyz));
        float _4163 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2135 = dot(vec3(_487, _488, _489), vec3(_2128, _2129, _2130));
        float _4174 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4185 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = 1.0 - _2120;
        float _2167 = (0.5 / (((_1908 * ((_2134 * _2157) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2157) + _2120) * _2134))) * _2134;
        float _4196 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2095 = (((_2156 * cbLight._m0[_2105].x) * _2169) * _2170) + _2031;
        _2097 = (((_2156 * cbLight._m0[_2105].y) * _2169) * _2170) + _2032;
        _2099 = (((_2156 * cbLight._m0[_2105].z) * _2169) * _2170) + _2033;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1834)
    {
        _2205 = _2095;
        _2207 = _2097;
        _2209 = _2099;
    }
    else
    {
        uint _2216 = _1739 + 3u;
        uint _2220 = _1739 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _490) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _566;
        float _2237 = cbLight._m0[_2216].y + _567;
        float _2238 = cbLight._m0[_2216].z + _568;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2216].xyz));
        float _4212 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2250 = dot(vec3(_487, _488, _489), vec3(_2243, _2244, _2245));
        float _4223 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4234 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_1908 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2272) + _2235) * _2249))) * _2249;
        float _4245 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2205 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2095;
        _2207 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2097;
        _2209 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2099;
    }
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_1737.y == 0u)
    {
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2360;
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2360;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2360;
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.x;
        uint _2387 = uint((float(_2375.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2376))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2376)));
        float _2397 = (log2(_2363 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2398 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        uint _2401 = uint(isnan(14.0) ? _2398 : (isnan(_2398) ? 14.0 : min(_2398, 14.0)));
        uvec4 _2406 = texelFetch(g_lightClusterGridBuffer, int(((_2401 << 2u) + (_2387 << 6u)) >> 2u));
        uint _2407 = _2406.x;
        uint _2408 = _2375.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2408 >> 4u) & 15u)) + 4294967295u) & _2407) == 0u) || ((_2408 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            uint _2692 = 0u;
            uint _2701;
            bool _2702;
            for (;;)
            {
                _2701 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                _2702 = _2701 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2702)
                {
                    frontier_phi_66_pred = _2686;
                    frontier_phi_66_pred_1 = _2691;
                    frontier_phi_66_pred_2 = _2690;
                    frontier_phi_66_pred_3 = _2689;
                    frontier_phi_66_pred_4 = _2688;
                    frontier_phi_66_pred_5 = _2687;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2686;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2701;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2692 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _2361;
                        float _2898 = _2857.y - _2362;
                        float _2899 = _2857.z - _2363;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_608, _611, _614), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4271 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _2361;
                        float _2933 = (-0.0) - _2362;
                        float _2934 = (-0.0) - _2363;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2949 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _668;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_608, _611, _614), vec3(_2939, _2940, _2941));
                        float _4287 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2974 = dot(vec3(_608, _611, _614), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4298 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2917 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2907) + _2983;
                        float _4309 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4320 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) / ((_2981 * _2981) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2761 = (_2928 * _2876.x) + _2834;
                        _2762 = (_2928 * _2876.y) + _2835;
                        _2763 = (_2928 * _2876.z) + _2836;
                        _2758 = (_3009 * _2893.x) + _2831;
                        _2759 = (_3009 * _2893.y) + _2832;
                        _2760 = (_3009 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2758;
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_66_pred = _2758;
                    frontier_phi_66_pred_1 = _2763;
                    frontier_phi_66_pred_2 = _2762;
                    frontier_phi_66_pred_3 = _2761;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                _2534 = frontier_phi_66_pred;
                _2544 = frontier_phi_66_pred_1;
                _2542 = frontier_phi_66_pred_2;
                _2540 = frontier_phi_66_pred_3;
                _2538 = frontier_phi_66_pred_4;
                _2536 = frontier_phi_66_pred_5;
                uint _2693 = _2692 + 1u;
                if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2686 = _2534;
                    _2687 = _2536;
                    _2688 = _2538;
                    _2689 = _2540;
                    _2690 = _2542;
                    _2691 = _2544;
                    _2692 = _2693;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((4294967295u << _2550) & _2407) == 0u)
        {
            _2654 = _2533;
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
        }
        else
        {
            float _2679 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
            float _2680 = _2679 * _2361;
            float _2681 = _2679 * _2362;
            float _2682 = _2679 * _2363;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2814 = _2533;
                float _2815 = _2535;
                float _2816 = _2537;
                float _2817 = _2539;
                float _2818 = _2541;
                float _2819 = _2543;
                uint _2820 = _2550;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2830)
                    {
                        frontier_phi_77_pred = _2819;
                        frontier_phi_77_pred_1 = _2818;
                        frontier_phi_77_pred_2 = _2817;
                        frontier_phi_77_pred_3 = _2816;
                        frontier_phi_77_pred_4 = _2815;
                        frontier_phi_77_pred_5 = _2814;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3036 = _2814;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        uint _3042 = _2829;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3111;
                        vec4 _3127;
                        float _3174;
                        bool _3175;
                        for (;;)
                        {
                            uint _3053 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3098 = (_3053 * 40u) + 16u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3114 = (_3053 * 40u) + 20u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3130 = (_3053 * 40u) + 24u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3149 = (_3053 * 40u) + 28u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3174 = fma(_2363, _3162.z, fma(_2362, _3162.y, _3162.x * _2361)) + _3162.w;
                            _3175 = !((fma(_2363, _3143.z, fma(_2362, _3143.y, _3143.x * _2361)) + _3143.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3175)
                            {
                                float _3202 = _3068.x - _2361;
                                float _3203 = _3068.y - _2362;
                                float _3204 = _3068.z - _2363;
                                float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                                float _3208 = inversesqrt(_3205);
                                float _3209 = _3208 * _3202;
                                float _3210 = _3208 * _3203;
                                float _3211 = _3208 * _3204;
                                float _3215 = 1.0 - (_3205 / (_3069 * _3069));
                                float _4331 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3220 = sqrt(_3205) * _3084.w;
                                float _3222 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                                float _3223 = _3222 * _3222;
                                float _3226 = ((1.0 - _3223) * dot(vec3(_3209, _3210, _3211), vec3(_608, _611, _614))) + _3223;
                                float _3229 = _3220 * _3220;
                                float _3233 = (fma(_2363, _3111.z, fma(_2362, _3111.y, _3111.x * _2361)) + _3111.w) / _3174;
                                float _3234 = (fma(_2363, _3127.z, fma(_2362, _3127.y, _3127.x * _2361)) + _3127.w) / _3174;
                                float _3238 = 1.0 - dot(vec2(_3233, _3234), vec2(_3233, _3234));
                                float _4347 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3240 = _3239 * (((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3216) / ((_3229 * 0.699999988079071044921875) + 1.0));
                                float _3252 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                                float _3253 = 1.0 - _668;
                                float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                                float _3261 = _3260 * _3260;
                                float _3262 = _3261 * _3261;
                                float _3263 = _3209 - _2680;
                                float _3264 = _3210 - _2681;
                                float _3265 = _3211 - _2682;
                                float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                                float _3273 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2680, (-0.0) - _2681, (-0.0) - _2682));
                                float _4358 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3277 = dot(vec3(_608, _611, _614), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                                float _4369 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                                float _3285 = _3222 * _3261;
                                float _3286 = _3285 * _3285;
                                float _3292 = ((1.0 - _3286) * dot(vec3(_608, _611, _614), vec3(_3209, _3210, _3211))) + _3286;
                                float _4380 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3294 = 1.0 - _3261;
                                float _3304 = (0.5 / (((_3293 * ((_3276 * _3294) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3261) * _3276))) * _3293;
                                float _4391 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3314 = (_3239 * _3216) * (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3284 * _3284) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3240 * _3084.y;
                                frontier_phi_83_pred_1 = _3240 * _3084.x;
                                frontier_phi_83_pred_2 = _3314 * _3096.z;
                                frontier_phi_83_pred_3 = _3314 * _3096.y;
                                frontier_phi_83_pred_4 = _3314 * _3096.x;
                                frontier_phi_83_pred_5 = _3240 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_83_pred;
                            _3321 = frontier_phi_83_pred_1;
                            _3320 = frontier_phi_83_pred_2;
                            _3319 = frontier_phi_83_pred_3;
                            _3318 = frontier_phi_83_pred_4;
                            _3323 = frontier_phi_83_pred_5;
                            _3026 = _3321 + _3039;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3023 = _3318 + _3036;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3028;
                        frontier_phi_77_pred_1 = _3027;
                        frontier_phi_77_pred_2 = _3026;
                        frontier_phi_77_pred_3 = _3025;
                        frontier_phi_77_pred_4 = _3024;
                        frontier_phi_77_pred_5 = _3023;
                    }
                    _2665 = frontier_phi_77_pred;
                    _2663 = frontier_phi_77_pred_1;
                    _2661 = frontier_phi_77_pred_2;
                    _2659 = frontier_phi_77_pred_3;
                    _2657 = frontier_phi_77_pred_4;
                    _2655 = frontier_phi_77_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2655;
                        _2815 = _2657;
                        _2816 = _2659;
                        _2817 = _2661;
                        _2818 = _2663;
                        _2819 = _2665;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2659;
                frontier_phi_58_59_ladder_1 = _2665;
                frontier_phi_58_59_ladder_2 = _2663;
                frontier_phi_58_59_ladder_3 = _2661;
                frontier_phi_58_59_ladder_4 = _2657;
                frontier_phi_58_59_ladder_5 = _2655;
            }
            else
            {
                frontier_phi_58_59_ladder = _2537;
                frontier_phi_58_59_ladder_1 = _2543;
                frontier_phi_58_59_ladder_2 = _2541;
                frontier_phi_58_59_ladder_3 = _2539;
                frontier_phi_58_59_ladder_4 = _2535;
                frontier_phi_58_59_ladder_5 = _2533;
            }
            _2654 = frontier_phi_58_59_ladder_5;
            _2656 = frontier_phi_58_59_ladder_4;
            _2658 = frontier_phi_58_59_ladder;
            _2660 = frontier_phi_58_59_ladder_3;
            _2662 = frontier_phi_58_59_ladder_2;
            _2664 = frontier_phi_58_59_ladder_1;
        }
        float _2669 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2420 = (_2669 * _2660) + _1872;
        _2422 = (_2669 * _2662) + _1874;
        _2424 = (_2669 * _2664) + _1876;
        _2426 = ((_2654 * 0.039999999105930328369140625) * _2669) + _2205;
        _2428 = ((_2656 * 0.039999999105930328369140625) * _2669) + _2207;
        _2430 = ((_2658 * 0.039999999105930328369140625) * _2669) + _2209;
    }
    else
    {
        _2420 = _1872;
        _2422 = _1874;
        _2424 = _1876;
        _2426 = _2205;
        _2428 = _2207;
        _2430 = _2209;
    }
    uint _2436 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _4407 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4418 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4429 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2467 = (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2420 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _652))) + ((_2426 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + (((_427 * cbMtdParam._m0[11u].x) * (_412.x + _397.x)) * cbInstanceData._m0[_2436].x);
    float _2469 = ((((_427 * cbMtdParam._m0[11u].y) * (_412.y + _397.y)) * cbInstanceData._m0[_2436].y) + ((_2428 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2422 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _652)));
    float _2471 = ((((_427 * cbMtdParam._m0[11u].z) * (_412.z + _397.z)) * cbInstanceData._m0[_2436].z) + ((_2430 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2424 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _652)));
    float _2472 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2473 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2474 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    uint _2475 = _627 + 6u;
    float _2483 = _587 / cbSceneParam._m0[86u].x;
    float _2484 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2559 = _2558 / _509;
        float _2570 = _2559 * _559;
        float _2571 = _560 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2574 = _2559 * _561;
        float _2576 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2577 = _2576 + cbSceneParam._m0[79u].w;
        float _2578 = cbSceneParam._m0[79u].w - _2571;
        float _2584 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2574 * _2574));
        float _2587 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2584;
        float _2592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2572 - _2576) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2577 > 0.0) ? exp2(_2592 * _2577) : (2.0 - exp2(_2594 * _2577))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2587;
        }
        else
        {
            float _2715 = 1.0 / cbSceneParam._m0[80u].x;
            float _2716 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : max(_2577, _2578));
            float _2717 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : min(_2577, _2578));
            float _2726 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : min(_2716, 0.0));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            _2771 = ((abs(_2584 / _2572) * cbSceneParam._m0[80u].y) * ((((_2726 - _2727) * 2.0) - ((exp2(_2592 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)))) - exp2(_2592 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))))) * _2715)) - ((exp2(_2594 * _2726) - exp2(_2594 * _2727)) * _2715))) + (_2587 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2503);
        _2596 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2598 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2600 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2602 = _2782 * _2503;
    }
    else
    {
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
        _2602 = _2503;
    }
    bool _2809;
    vec4 _2612;
    vec4 _2634;
    float _2636;
    float _2640;
    float _2641;
    float _2642;
    float _2643;
    bool _2653;
    for (;;)
    {
        _2612 = cbMatDynParam._m0[0u];
        float _2614 = roundEven(_2612.y);
        bool _2615 = _2614 == 3.0;
        float _2616 = log2(_2602);
        float _2623 = exp2(_2616 * cbSceneParam._m0[78u].x) * _2472;
        float _2624 = exp2(_2616 * cbSceneParam._m0[78u].y) * _2473;
        float _2625 = exp2(_2616 * cbSceneParam._m0[78u].z) * _2474;
        float _2632 = _575 + (-0.5);
        _2634 = cbMtdParam._m0[1u];
        _2636 = _2634.y * _2632;
        float _2639 = (_2614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2640 = _2639 * (_2615 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2596)));
        _2641 = _2639 * (_2615 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
        _2642 = _2639 * (_2615 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
        _2643 = _2632 * 0.999000012874603271484375;
        _2653 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2653)
        {
            if ((cbInstanceData._m0[_627 + 7u].x + _2643) < 0.5)
            {
                _2809 = true;
                break;
            }
        }
        uint _2750 = _628 + uint(_2612.w);
        if ((cbInstanceData._m0[_2750].w < 1.0) && ((cbInstanceData._m0[_2750].w + _2643) < 0.5))
        {
            _2809 = true;
            break;
        }
        if ((_2636 + 1.0) < _2634.x)
        {
            _2809 = true;
            break;
        }
        _2809 = false;
        break;
    }
    float _3014;
    if (_2809)
    {
        discard_state = true;
        _3014 = 0.0;
    }
    else
    {
        _3014 = cbInstanceData._m0[_2475].w;
    }
    SV_Target.x = _2640;
    SV_Target.y = _2641;
    SV_Target.z = _2642;
    SV_Target.w = _3014;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
    discard_exit();
}


