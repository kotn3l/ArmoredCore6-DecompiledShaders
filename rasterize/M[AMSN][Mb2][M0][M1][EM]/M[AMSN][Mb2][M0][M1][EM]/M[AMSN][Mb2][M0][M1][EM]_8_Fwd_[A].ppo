#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3403;
float _3404;
float _3405;
float _3406;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3415 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3426 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _332 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3437 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[14u].y - _317) * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) + _317;
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _378 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _414 = (_408.x * 2.0) + (-1.0);
    float _415 = (_408.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3448 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _432 = (_291 * (((cbMtdParam._m0[13u].z * _321) - _321) + _414)) + _321;
    float _433 = (_291 * (((cbMtdParam._m0[13u].z * _323) - _323) + _415)) + _323;
    float _434 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) - _329)) + _329;
    float _437 = fma(_434, _210 * NORMAL.x, fma(_433, _217 * TANGENT.x, (_203 * _195) * _432));
    float _440 = fma(_434, _210 * NORMAL.y, fma(_433, _217 * TANGENT.y, (_203 * _196) * _432));
    float _443 = fma(_434, _210 * NORMAL.z, fma(_433, _217 * TANGENT.z, (_203 * _197) * _432));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3459 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _451 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3481 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3492 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    vec4 _535 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _537 = _535.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _694 = sqrt(((_521 * _521) + (_522 * _522)) + (_523 * _523));
        float _700 = (cbMatDynParam._m0[5u].x * _694) + cbMatDynParam._m0[5u].y;
        float _3503 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _705 = (cbMatDynParam._m0[5u].z * _694) + cbMatDynParam._m0[5u].w;
        float _3514 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) - _701)) + _701) < ((_537 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _573 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _576 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _590 = _589 + 9u;
    uint _591 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3525 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _614 = _611.x * TEXCOORD_3.w;
    float _615 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _448) - _528;
    float _623 = (_618 * _449) - _529;
    float _624 = (_618 * _450) - _530;
    float _628 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3558 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_451);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _742 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _746 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _771 = _675 + _448;
        float _772 = _679 + _449;
        float _773 = _683 + _450;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_448, _449, _450), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3606 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_448, _449, _450), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3639 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_448, _449, _450), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3672 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1061 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1065 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1088 = _675 + _448;
        float _1089 = _679 + _449;
        float _1090 = _683 + _450;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_448, _449, _450), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3735 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_448, _449, _450), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3768 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_448, _449, _450), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3801 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = _1014;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1027)) + _1027;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _622 * 0.5;
    float _1395 = _623 * 0.5;
    float _1396 = _624 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1524 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1527 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1555 = frontier_phi_17_15_ladder;
        }
        float _1758;
        if (_1524 > 0.0)
        {
            _1758 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1758 = frontier_phi_26_22_ladder;
        }
        float _2001;
        if (_1527 > 0.0)
        {
            _2001 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2001 = frontier_phi_38_33_ladder;
        }
        float _2003 = isnan(_1758) ? _1555 : (isnan(_1555) ? _1758 : min(_1555, _1758));
        float _2004 = isnan(_2001) ? _2003 : (isnan(_2003) ? _2001 : min(_2003, _2001));
        float _2008 = (_2004 * _1521) + _1510;
        float _2009 = (_2004 * _1524) + _1514;
        float _2010 = (_2004 * _1527) + _1518;
        float _2011 = _2004 * 9.9999997473787516355514526367188e-05;
        float _2013 = (-1.0) - _2011;
        float _2015 = _2011 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2010 > _2015) || ((_2010 < _2013) || ((_2009 > _2015) || ((_2009 < _2013) || ((_2008 < _2013) || (_2008 > _2015))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2010, cbModelParam._m0[9u].z, fma(_2009, cbModelParam._m0[9u].y, _2008 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2010, cbModelParam._m0[10u].z, fma(_2009, cbModelParam._m0[10u].y, _2008 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2010, cbModelParam._m0[11u].z, fma(_2009, cbModelParam._m0[11u].y, _2008 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_16_38_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_16_38_ladder_2;
        _1545 = frontier_phi_16_38_ladder_1;
        _1547 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1463);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1621 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1624 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1763;
        if (_1618 > 0.0)
        {
            _1763 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2028;
        if (_1621 > 0.0)
        {
            _2028 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2028 = frontier_phi_40_35_ladder;
        }
        float _2233;
        if (_1624 > 0.0)
        {
            _2233 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2233 = frontier_phi_49_46_ladder;
        }
        float _2235 = isnan(_2028) ? _1763 : (isnan(_1763) ? _2028 : min(_1763, _2028));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1618) + _1607;
        float _2241 = (_2236 * _1621) + _1611;
        float _2242 = (_2236 * _1624) + _1615;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2243;
        float _2246 = _2243 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2242 > _2246) || ((_2242 < _2244) || ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 < _2244) || (_2240 > _2246))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2242, cbModelParam._m0[17u].z, fma(_2241, cbModelParam._m0[17u].y, _2240 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2242, cbModelParam._m0[18u].z, fma(_2241, cbModelParam._m0[18u].y, _2240 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2242, cbModelParam._m0[19u].z, fma(_2241, cbModelParam._m0[19u].y, _2240 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_25_49_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_25_49_ladder_2;
        _1645 = frontier_phi_25_49_ladder_1;
        _1647 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1552);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1659 = ((((1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _630)) * _614;
    float _1660 = _1659 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1661 = _1659 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1662 = _1659 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _614 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1683 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_448, _449, _450));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_448, _449, _450));
    float _3937 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3948 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1700].x * _1706) * _1742) + ((cbLight._m0[_1710].x * _1717) * _1740);
    float _1750 = ((_1706 * cbLight._m0[_1700].y) * _1742) + ((_1717 * cbLight._m0[_1710].y) * _1740);
    float _1751 = ((_1706 * cbLight._m0[_1700].z) * _1742) + ((_1717 * cbLight._m0[_1710].z) * _1740);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1749;
        _1770 = _1750;
        _1772 = _1751;
    }
    else
    {
        uint _1776 = _1683 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3959 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1795 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1751;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1972 = _1683 + 7u;
        float _1988 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _3975 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1991 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1813 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1768;
        _1815 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1770;
        _1817 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1772;
    }
    uint _1820 = _1683 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _451) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1683].x + _528;
    float _1836 = cbLight._m0[_1683].y + _529;
    float _1837 = cbLight._m0[_1683].z + _530;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1683].xyz));
    float _3991 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _1849 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1850 = dot(vec3(_448, _449, _450), vec3(_1842, _1843, _1844));
    float _4013 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1842, _1843, _1844));
    float _4024 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1873 = (exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1874 = 1.0 - _1834;
    float _1885 = (0.5 / (((_1849 * ((_1848 * _1874) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1874) + _1834) * _1848))) * _1848;
    float _4035 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1898 = _1683 + 9u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _451) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1721].x + _528;
    float _1912 = cbLight._m0[_1721].y + _529;
    float _1913 = cbLight._m0[_1721].z + _530;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1721].xyz));
    float _4046 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1925 = dot(vec3(_448, _449, _450), vec3(_1918, _1919, _1920));
    float _4057 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1918, _1919, _1920));
    float _4068 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1910 * _1910;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1910;
    float _1957 = (0.5 / (((_1849 * ((_1924 * _1947) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1947) + _1910) * _1924))) * _1924;
    float _4079 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    float _1969 = (((_1946 * cbLight._m0[_1898].x) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].x) * _1887) * _1717);
    float _1970 = (((_1946 * cbLight._m0[_1898].y) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].y) * _1887) * _1717);
    float _1971 = (((_1946 * cbLight._m0[_1898].z) * _1959) * _1706) + (((_1873 * cbLight._m0[_1820].z) * _1887) * _1717);
    float _2033;
    float _2035;
    float _2037;
    if (_1757)
    {
        _2033 = _1969;
        _2035 = _1970;
        _2037 = _1971;
    }
    else
    {
        uint _2039 = _1683 + 2u;
        uint _2043 = _1683 + 10u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _451) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _528;
        float _2060 = cbLight._m0[_2039].y + _529;
        float _2061 = cbLight._m0[_2039].z + _530;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2039].xyz));
        float _4090 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2073 = dot(vec3(_448, _449, _450), vec3(_2066, _2067, _2068));
        float _4101 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4112 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2095 = 1.0 - _2058;
        float _2105 = (0.5 / (((_1849 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2095) + _2058) * _2072))) * _2072;
        float _4123 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2033 = (((_2094 * cbLight._m0[_2043].x) * _2107) * _2108) + _1969;
        _2035 = (((_2094 * cbLight._m0[_2043].y) * _2107) * _2108) + _1970;
        _2037 = (((_2094 * cbLight._m0[_2043].z) * _2107) * _2108) + _1971;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1775)
    {
        _2143 = _2033;
        _2145 = _2035;
        _2147 = _2037;
    }
    else
    {
        uint _2154 = _1683 + 3u;
        uint _2158 = _1683 + 11u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _451) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _528;
        float _2175 = cbLight._m0[_2154].y + _529;
        float _2176 = cbLight._m0[_2154].z + _530;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2154].xyz));
        float _4139 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2188 = dot(vec3(_448, _449, _450), vec3(_2181, _2182, _2183));
        float _4150 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4161 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2210 = 1.0 - _2173;
        float _2220 = (0.5 / (((_1849 * ((_2187 * _2210) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2210) + _2173) * _2187))) * _2187;
        float _4172 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2222 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2223 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2143 = (((_2209 * cbLight._m0[_2158].x) * _2222) * _2223) + _2033;
        _2145 = (((_2209 * cbLight._m0[_2158].y) * _2222) * _2223) + _2035;
        _2147 = (((_2209 * cbLight._m0[_2158].z) * _2222) * _2223) + _2037;
    }
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_1681.y == 0u)
    {
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2298;
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2298;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2298;
        uvec4 _2313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2314 = _2313.x;
        uint _2325 = uint((float(_2313.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2314))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2314)));
        float _2335 = (log2(_2301 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2336 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        uint _2339 = uint(isnan(14.0) ? _2336 : (isnan(_2336) ? 14.0 : min(_2336, 14.0)));
        uvec4 _2344 = texelFetch(g_lightClusterGridBuffer, int(((_2339 << 2u) + (_2325 << 6u)) >> 2u));
        uint _2345 = _2344.x;
        uint _2346 = _2313.z;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((((1u << ((_2346 >> 4u) & 15u)) + 4294967295u) & _2345) == 0u) || ((_2346 & 240u) == 0u))
        {
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
        }
        else
        {
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            uint _2630 = 0u;
            uint _2639;
            bool _2640;
            for (;;)
            {
                _2639 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                _2640 = _2639 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2640)
                {
                    frontier_phi_66_pred = _2624;
                    frontier_phi_66_pred_1 = _2629;
                    frontier_phi_66_pred_2 = _2628;
                    frontier_phi_66_pred_3 = _2627;
                    frontier_phi_66_pred_4 = _2626;
                    frontier_phi_66_pred_5 = _2625;
                }
                else
                {
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    uint _2775;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2639;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    for (;;)
                    {
                        uint _2779 = uint(findLSB(_2775)) + (_2630 << 5u);
                        uint _2776 = (_2775 + 4294967295u) & _2775;
                        uint _2781 = _2779 * 48u;
                        vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2801 = (_2779 * 48u) + 4u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2820 = (_2779 * 48u) + 8u;
                        vec3 _2831 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x));
                        float _2835 = _2795.x - _2299;
                        float _2836 = _2795.y - _2300;
                        float _2837 = _2795.z - _2301;
                        float _2838 = dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837));
                        float _2841 = inversesqrt(_2838);
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2845 = dot(vec3(_570, _573, _576), vec3(_2842, _2843, _2844));
                        float _2850 = 1.0 - (_2838 * _2795.w);
                        float _4198 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2851 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2852 = sqrt(_2838) * _2814.w;
                        float _2855 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2845) + _2856;
                        float _2862 = _2852 * _2852;
                        float _2866 = ((isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))) * _2851) / ((_2862 * 0.699999988079071044921875) + 1.0);
                        float _2870 = (-0.0) - _2299;
                        float _2871 = (-0.0) - _2300;
                        float _2872 = (-0.0) - _2301;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2887 = exp2(log2(1.0 / ((_2862 * 3.5) + 5.0)) * 0.25);
                        float _2888 = 1.0 - _630;
                        float _2895 = sqrt(1.0 - ((1.0 - (_2888 * _2888)) * (1.0 - (_2887 * _2887))));
                        float _2896 = _2895 * _2895;
                        float _2897 = _2896 * _2896;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2908 = dot(vec3(_570, _573, _576), vec3(_2877, _2878, _2879));
                        float _4214 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2912 = dot(vec3(_570, _573, _576), vec3(_2904 * _2898, _2904 * _2899, _2904 * _2900));
                        float _4225 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2919 = ((_2915 * _2915) * (_2897 + (-1.0))) + 1.0;
                        float _2920 = _2855 * _2896;
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2845) + _2921;
                        float _4236 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2926 = 1.0 - _2896;
                        float _2936 = (0.5 / (((_2925 * ((_2911 * _2926) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2896) * _2911))) * _2925;
                        float _4247 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2947 = (((_2897 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_2919 * _2919) * ((_2862 * 2.1991131305694580078125) + 3.141590118408203125))) * _2851;
                        _2699 = (_2866 * _2814.x) + _2772;
                        _2700 = (_2866 * _2814.y) + _2773;
                        _2701 = (_2866 * _2814.z) + _2774;
                        _2696 = (_2947 * _2831.x) + _2769;
                        _2697 = (_2947 * _2831.y) + _2770;
                        _2698 = (_2947 * _2831.z) + _2771;
                        if (_2776 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2776;
                        }
                    }
                    frontier_phi_66_pred = _2696;
                    frontier_phi_66_pred_1 = _2701;
                    frontier_phi_66_pred_2 = _2700;
                    frontier_phi_66_pred_3 = _2699;
                    frontier_phi_66_pred_4 = _2698;
                    frontier_phi_66_pred_5 = _2697;
                }
                _2472 = frontier_phi_66_pred;
                _2482 = frontier_phi_66_pred_1;
                _2480 = frontier_phi_66_pred_2;
                _2478 = frontier_phi_66_pred_3;
                _2476 = frontier_phi_66_pred_4;
                _2474 = frontier_phi_66_pred_5;
                uint _2631 = _2630 + 1u;
                if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2624 = _2472;
                    _2625 = _2474;
                    _2626 = _2476;
                    _2627 = _2478;
                    _2628 = _2480;
                    _2629 = _2482;
                    _2630 = _2631;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
        }
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.z;
        uint _2488 = (_2486 >> 8u) & 15u;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((4294967295u << _2488) & _2345) == 0u)
        {
            _2592 = _2471;
            _2594 = _2473;
            _2596 = _2475;
            _2598 = _2477;
            _2600 = _2479;
            _2602 = _2481;
        }
        else
        {
            float _2617 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
            float _2618 = _2617 * _2299;
            float _2619 = _2617 * _2300;
            float _2620 = _2617 * _2301;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2488 < ((_2486 >> 12u) & 15u))
            {
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2752 = _2471;
                float _2753 = _2473;
                float _2754 = _2475;
                float _2755 = _2477;
                float _2756 = _2479;
                float _2757 = _2481;
                uint _2758 = _2488;
                uint _2767;
                bool _2768;
                for (;;)
                {
                    _2767 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                    _2768 = _2767 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2768)
                    {
                        frontier_phi_77_pred = _2757;
                        frontier_phi_77_pred_1 = _2756;
                        frontier_phi_77_pred_2 = _2755;
                        frontier_phi_77_pred_3 = _2754;
                        frontier_phi_77_pred_4 = _2753;
                        frontier_phi_77_pred_5 = _2752;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        uint _2980 = _2767;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3049;
                        vec4 _3065;
                        float _3112;
                        bool _3113;
                        for (;;)
                        {
                            uint _2991 = ((_2758 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3036 = (_2991 * 40u) + 16u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2991 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_2991 * 40u) + 24u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3087 = (_2991 * 40u) + 28u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3112 = fma(_2301, _3100.z, fma(_2300, _3100.y, _3100.x * _2299)) + _3100.w;
                            _3113 = !((fma(_2301, _3081.z, fma(_2300, _3081.y, _3081.x * _2299)) + _3081.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3113)
                            {
                                float _3140 = _3006.x - _2299;
                                float _3141 = _3006.y - _2300;
                                float _3142 = _3006.z - _2301;
                                float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                                float _3146 = inversesqrt(_3143);
                                float _3147 = _3146 * _3140;
                                float _3148 = _3146 * _3141;
                                float _3149 = _3146 * _3142;
                                float _3153 = 1.0 - (_3143 / (_3007 * _3007));
                                float _4258 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3158 = sqrt(_3143) * _3022.w;
                                float _3160 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                                float _3161 = _3160 * _3160;
                                float _3164 = ((1.0 - _3161) * dot(vec3(_3147, _3148, _3149), vec3(_570, _573, _576))) + _3161;
                                float _3167 = _3158 * _3158;
                                float _3171 = (fma(_2301, _3049.z, fma(_2300, _3049.y, _3049.x * _2299)) + _3049.w) / _3112;
                                float _3172 = (fma(_2301, _3065.z, fma(_2300, _3065.y, _3065.x * _2299)) + _3065.w) / _3112;
                                float _3176 = 1.0 - dot(vec2(_3171, _3172), vec2(_3171, _3172));
                                float _4274 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3178 = _3177 * (((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3154) / ((_3167 * 0.699999988079071044921875) + 1.0));
                                float _3190 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                                float _3191 = 1.0 - _630;
                                float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                                float _3199 = _3198 * _3198;
                                float _3200 = _3199 * _3199;
                                float _3201 = _3147 - _2618;
                                float _3202 = _3148 - _2619;
                                float _3203 = _3149 - _2620;
                                float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                                float _3211 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2618, (-0.0) - _2619, (-0.0) - _2620));
                                float _4285 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3215 = dot(vec3(_570, _573, _576), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                                float _4296 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                                float _3223 = _3160 * _3199;
                                float _3224 = _3223 * _3223;
                                float _3230 = ((1.0 - _3224) * dot(vec3(_570, _573, _576), vec3(_3147, _3148, _3149))) + _3224;
                                float _4307 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3232 = 1.0 - _3199;
                                float _3242 = (0.5 / (((_3231 * ((_3214 * _3232) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3199) * _3214))) * _3231;
                                float _4318 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3252 = (_3177 * _3154) * (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) / ((_3222 * _3222) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3178 * _3022.y;
                                frontier_phi_83_pred_1 = _3178 * _3022.x;
                                frontier_phi_83_pred_2 = _3252 * _3034.z;
                                frontier_phi_83_pred_3 = _3252 * _3034.y;
                                frontier_phi_83_pred_4 = _3252 * _3034.x;
                                frontier_phi_83_pred_5 = _3178 * _3022.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_83_pred;
                            _3259 = frontier_phi_83_pred_1;
                            _3258 = frontier_phi_83_pred_2;
                            _3257 = frontier_phi_83_pred_3;
                            _3256 = frontier_phi_83_pred_4;
                            _3261 = frontier_phi_83_pred_5;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2966 = _3261 + _2979;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2966;
                        frontier_phi_77_pred_1 = _2965;
                        frontier_phi_77_pred_2 = _2964;
                        frontier_phi_77_pred_3 = _2963;
                        frontier_phi_77_pred_4 = _2962;
                        frontier_phi_77_pred_5 = _2961;
                    }
                    _2603 = frontier_phi_77_pred;
                    _2601 = frontier_phi_77_pred_1;
                    _2599 = frontier_phi_77_pred_2;
                    _2597 = frontier_phi_77_pred_3;
                    _2595 = frontier_phi_77_pred_4;
                    _2593 = frontier_phi_77_pred_5;
                    uint _2759 = _2758 + 1u;
                    if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2752 = _2593;
                        _2753 = _2595;
                        _2754 = _2597;
                        _2755 = _2599;
                        _2756 = _2601;
                        _2757 = _2603;
                        _2758 = _2759;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2597;
                frontier_phi_58_59_ladder_1 = _2603;
                frontier_phi_58_59_ladder_2 = _2601;
                frontier_phi_58_59_ladder_3 = _2599;
                frontier_phi_58_59_ladder_4 = _2595;
                frontier_phi_58_59_ladder_5 = _2593;
            }
            else
            {
                frontier_phi_58_59_ladder = _2475;
                frontier_phi_58_59_ladder_1 = _2481;
                frontier_phi_58_59_ladder_2 = _2479;
                frontier_phi_58_59_ladder_3 = _2477;
                frontier_phi_58_59_ladder_4 = _2473;
                frontier_phi_58_59_ladder_5 = _2471;
            }
            _2592 = frontier_phi_58_59_ladder_5;
            _2594 = frontier_phi_58_59_ladder_4;
            _2596 = frontier_phi_58_59_ladder;
            _2598 = frontier_phi_58_59_ladder_3;
            _2600 = frontier_phi_58_59_ladder_2;
            _2602 = frontier_phi_58_59_ladder_1;
        }
        float _2607 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2358 = (_2607 * _2598) + _1813;
        _2360 = (_2607 * _2600) + _1815;
        _2362 = (_2607 * _2602) + _1817;
        _2364 = ((_2592 * 0.039999999105930328369140625) * _2607) + _2143;
        _2366 = ((_2594 * 0.039999999105930328369140625) * _2607) + _2145;
        _2368 = ((_2596 * 0.039999999105930328369140625) * _2607) + _2147;
    }
    else
    {
        _2358 = _1813;
        _2360 = _1815;
        _2362 = _1817;
        _2364 = _2143;
        _2366 = _2145;
        _2368 = _2147;
    }
    uint _2374 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _4334 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4345 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4356 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _2405 = (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2358 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _614))) + ((_2364 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + (((_291 * cbMtdParam._m0[11u].x) * (_378.x + _363.x)) * cbInstanceData._m0[_2374].x);
    float _2407 = ((((_291 * cbMtdParam._m0[11u].y) * (_378.y + _363.y)) * cbInstanceData._m0[_2374].y) + ((_2366 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2360 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _614)));
    float _2409 = ((((_291 * cbMtdParam._m0[11u].z) * (_378.z + _363.z)) * cbInstanceData._m0[_2374].z) + ((_2368 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2362 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _614)));
    float _2410 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2411 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2412 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    uint _2413 = _589 + 6u;
    float _2421 = _549 / cbSceneParam._m0[86u].x;
    float _2422 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2436 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2438 = _2436.x;
    float _2439 = _2436.y;
    float _2440 = _2436.z;
    float _2441 = _2436.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2496 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2497 = _2496 / _470;
        float _2508 = _2497 * _521;
        float _2509 = _522 * _2497;
        float _2510 = (-0.0) - _2509;
        float _2512 = _2497 * _523;
        float _2514 = (cbSceneParam._m0[77u].w * _2510) / _2496;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2509;
        float _2522 = sqrt(((_2508 * _2508) + (_2509 * _2509)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2496)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2709;
        if (abs((_2510 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2709 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2653 = 1.0 / cbSceneParam._m0[80u].x;
            float _2654 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2655 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2664 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : min(_2654, 0.0));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            _2709 = ((abs(_2522 / _2510) * cbSceneParam._m0[80u].y) * ((((_2664 - _2665) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0))))) * _2653)) - ((exp2(_2532 * _2664) - exp2(_2532 * _2665)) * _2653))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2711 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, 1.0), 0.0);
        float _2720 = exp2((_2709 * (-1.44269502162933349609375)) * (1.0 - _2711.w));
        float _2721 = log2(_2720);
        float _2737 = log2(_2441);
        _2534 = (exp2(_2737 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].x)) * _2711.x) / cbSceneParam._m0[78u].x)) + _2438;
        _2536 = (exp2(_2737 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].y)) * _2711.y) / cbSceneParam._m0[78u].y)) + _2439;
        _2538 = (exp2(_2737 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].z)) * _2711.z) / cbSceneParam._m0[78u].z)) + _2440;
        _2540 = _2720 * _2441;
    }
    else
    {
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
        _2540 = _2441;
    }
    bool _2747;
    vec4 _2550;
    vec4 _2572;
    float _2574;
    float _2578;
    float _2579;
    float _2580;
    float _2581;
    bool _2591;
    for (;;)
    {
        _2550 = cbMatDynParam._m0[0u];
        float _2552 = roundEven(_2550.y);
        bool _2553 = _2552 == 3.0;
        float _2554 = log2(_2540);
        float _2561 = exp2(_2554 * cbSceneParam._m0[78u].x) * _2410;
        float _2562 = exp2(_2554 * cbSceneParam._m0[78u].y) * _2411;
        float _2563 = exp2(_2554 * cbSceneParam._m0[78u].z) * _2412;
        float _2570 = _537 + (-0.5);
        _2572 = cbMtdParam._m0[1u];
        _2574 = _2572.y * _2570;
        float _2577 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2578 = _2577 * (_2553 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2534)));
        _2579 = _2577 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2536)));
        _2580 = _2577 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2538)));
        _2581 = _2570 * 0.999000012874603271484375;
        _2591 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2591)
        {
            if ((cbInstanceData._m0[_589 + 7u].x + _2581) < 0.5)
            {
                _2747 = true;
                break;
            }
        }
        uint _2688 = _590 + uint(_2550.w);
        if ((cbInstanceData._m0[_2688].w < 1.0) && ((cbInstanceData._m0[_2688].w + _2581) < 0.5))
        {
            _2747 = true;
            break;
        }
        if ((_2574 + 1.0) < _2572.x)
        {
            _2747 = true;
            break;
        }
        _2747 = false;
        break;
    }
    float _2952;
    if (_2747)
    {
        discard_state = true;
        _2952 = 0.0;
    }
    else
    {
        _2952 = cbInstanceData._m0[_2413].w;
    }
    SV_Target.x = _2578;
    SV_Target.y = _2579;
    SV_Target.z = _2580;
    SV_Target.w = _2952;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2413].w;
    discard_exit();
}


