#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1076;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3434 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _356 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_337.x + 0.00999999977648258209228515625));
    float _358 = _356 * (cbMtdParam._m0[15u].x + 1.0);
    float _3445 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _367 = ((((cbMtdParam._m0[12u].x - _315) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _359) + _315;
    float _368 = ((((cbMtdParam._m0[12u].y - _316) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _359) + _316;
    float _369 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _317)) * _359) + _317;
    vec4 _382 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _390 = (_382.x * 2.0) + (-1.0);
    float _392 = (_382.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_390, _392), vec2(_390, _392));
    float _3456 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    vec4 _410 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _414 = _410.z;
    float _417 = (_410.x * 2.0) + (-1.0);
    float _418 = (_410.y * 2.0) + (-1.0);
    float _419 = dot(vec2(_417, _418), vec2(_417, _418));
    float _3467 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))));
    float _427 = (_308 * (_382.z - _414)) + _414;
    float _430 = _356 * (cbMtdParam._m0[14u].w + 1.0);
    float _3478 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _434 = ((cbMtdParam._m0[14u].y - _427) * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) + _427;
    vec4 _461 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _476 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _490 = (_308 * (_390 - _417)) + _417;
    float _491 = (_308 * (_392 - _418)) + _418;
    float _492 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) - _424)) + _424;
    vec4 _511 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _517 = (_511.x * 2.0) + (-1.0);
    float _518 = (_511.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3489 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _535 = (_359 * (((_490 * cbMtdParam._m0[13u].z) - _490) + _517)) + _490;
    float _536 = (_359 * (((_491 * cbMtdParam._m0[13u].z) - _491) + _518)) + _491;
    float _537 = (_359 * (sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) - _492)) + _492;
    float _540 = fma(_537, _216 * NORMAL.x, fma(_536, _223 * TANGENT.x, (_209 * _201) * _535));
    float _543 = fma(_537, _216 * NORMAL.y, fma(_536, _223 * TANGENT.y, (_209 * _202) * _535));
    float _546 = fma(_537, _216 * NORMAL.z, fma(_536, _223 * TANGENT.z, (_209 * _203) * _535));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3500 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _554 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3522 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3533 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    float _639 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _640 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _660 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _663 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _666 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _679 = uint(roundEven(NORMAL.w)) * 13u;
    uint _680 = _679 + 9u;
    uint _681 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3544 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _639, cbSceneParam._m0[86u].y * _640));
    float _704 = _701.x * TEXCOORD_3.w;
    float _705 = dot(vec3(_551, _552, _553), vec3(_631, _632, _633));
    float _708 = _705 * 2.0;
    float _712 = (_708 * _551) - _631;
    float _713 = (_708 * _552) - _632;
    float _714 = (_708 * _553) - _633;
    float _718 = abs(dot(vec3(_631, _632, _633), vec3(_551, _552, _553)));
    float _3577 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _720 = sqrt(_554);
    float _733 = exp2((_720 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_720 * 3.0));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_773, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765));
        float _804 = fma(_773, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765));
        float _808 = fma(_773, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765));
        float _833 = _765 + _551;
        float _834 = _769 + _552;
        float _835 = _773 + _553;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _800;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _804;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _808;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_551, _552, _553), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3625 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_551, _552, _553), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3658 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_551, _552, _553), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3691 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = fma(_773, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _765));
        float _1120 = fma(_773, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _765));
        float _1124 = fma(_773, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _765));
        float _1147 = _765 + _551;
        float _1148 = _769 + _552;
        float _1149 = _773 + _553;
        float _1159 = fma(_1149, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147)) - _1116;
        float _1160 = fma(_1149, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147)) - _1120;
        float _1161 = fma(_1149, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147)) - _1124;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1116 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1120 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[35u].z) + ((((((_1124 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1215 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1182.x + (-0.5));
        float _1217 = _1215 * (_1182.y + (-0.5));
        float _1218 = _1215 * (_1182.z + (-0.5));
        float _1225 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1189.x + (-0.5));
        float _1227 = _1225 * (_1189.y + (-0.5));
        float _1228 = _1225 * (_1189.z + (-0.5));
        float _1235 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1196.x + (-0.5));
        float _1237 = _1235 * (_1196.y + (-0.5));
        float _1238 = _1235 * (_1196.z + (-0.5));
        float _1245 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1203.x + (-0.5));
        float _1247 = _1245 * (_1203.y + (-0.5));
        float _1248 = _1245 * (_1203.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_551, _552, _553), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3754 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1279 + 1.0))) + _1284) * _1249;
        float _1294 = _1217 * 0.5;
        float _1295 = _1227 * 0.5;
        float _1296 = _1237 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_551, _552, _553), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3787 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1321 + 1.0))) + _1326) * _1250;
        float _1336 = _1218 * 0.5;
        float _1337 = _1228 * 0.5;
        float _1338 = _1238 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_551, _552, _553), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3820 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1363 + 1.0))) + _1368) * _1251;
        _1385 = _1218;
        _1386 = _1217;
        _1387 = _1216;
        _1388 = _1228;
        _1389 = _1227;
        _1390 = _1226;
        _1391 = _1238;
        _1392 = _1237;
        _1393 = _1236;
        _1394 = _1251;
        _1395 = _1250;
        _1396 = _1249;
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1076;
        _1386 = _1076;
        _1387 = _1076;
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = _1076;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1088)) + _1088;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1089)) + _1089;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1090)) + _1090;
    float _1432 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1409));
    float _1453 = _712 * 0.5;
    float _1454 = _713 * 0.5;
    float _1455 = _714 * 0.5;
    float _1456 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1459 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1462 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1496;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1469 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1473 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1477 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1484 = dot(vec4(cbModelParam._m0[39u]), vec4(_1453, _1454, _1455, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1453, _1454, _1455, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1496 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_773, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_773, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_773, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_714, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712));
        float _1583 = fma(_714, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712));
        float _1586 = fma(_714, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1614 = frontier_phi_14_12_ladder;
        }
        float _1837;
        if (_1583 > 0.0)
        {
            _1837 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1837 = frontier_phi_23_19_ladder;
        }
        float _2083;
        if (_1586 > 0.0)
        {
            _2083 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2083 = frontier_phi_35_30_ladder;
        }
        float _2085 = isnan(_1837) ? _1614 : (isnan(_1614) ? _1837 : min(_1614, _1837));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1580) + _1569;
        float _2091 = (_2086 * _1583) + _1573;
        float _2092 = (_2086 * _1586) + _1577;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_13_35_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_13_35_ladder_2;
        _1604 = frontier_phi_13_35_ladder_1;
        _1606 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_712, _713, _714), _1522);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1666 = fma(_773, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765)) + cbModelParam._m0[21u].w;
        float _1670 = fma(_773, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765)) + cbModelParam._m0[22u].w;
        float _1674 = fma(_773, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765)) + cbModelParam._m0[23u].w;
        float _1677 = fma(_714, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712));
        float _1680 = fma(_714, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712));
        float _1683 = fma(_714, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712));
        float _1842;
        if (_1677 > 0.0)
        {
            _1842 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1842 = frontier_phi_25_21_ladder;
        }
        float _2110;
        if (_1680 > 0.0)
        {
            _2110 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2110 = frontier_phi_37_32_ladder;
        }
        float _2315;
        if (_1683 > 0.0)
        {
            _2315 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2315 = frontier_phi_46_43_ladder;
        }
        float _2317 = isnan(_2110) ? _1842 : (isnan(_1842) ? _2110 : min(_1842, _2110));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1677) + _1666;
        float _2323 = (_2318 * _1680) + _1670;
        float _2324 = (_2318 * _1683) + _1674;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_22_46_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1702 = frontier_phi_22_46_ladder_2;
        _1704 = frontier_phi_22_46_ladder_1;
        _1706 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_712, _713, _714), _1611);
        _1702 = _1686.x * cbModelParam._m0[1u].z;
        _1704 = _1686.y * cbModelParam._m0[1u].z;
        _1706 = _1686.z * cbModelParam._m0[1u].z;
    }
    float _1718 = ((((1.0 - _733) * ((_720 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_733 * _720)) * _704;
    float _1719 = _1718 * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1720 = _1718 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1721 = _1718 * ((cbModelParam._m0[1u].w * (_1706 - _1606)) + _1606);
    float _1724 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1719 * cbSceneParam._m0[91u].x));
    vec4 _1738 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_639, _640));
    float _1740 = _1738.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1740);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1740);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1740);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_679 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _704 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1796 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1800 = _1760 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_551, _552, _553));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_551, _552, _553));
    float _3956 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3967 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1777].x * _1783) * _1821) + (((cbLight._m0[_1787].x * _1752) * _1796) * _1819);
    float _1829 = ((_1783 * cbLight._m0[_1777].y) * _1821) + (((cbLight._m0[_1787].y * _1753) * _1796) * _1819);
    float _1830 = ((_1783 * cbLight._m0[_1777].z) * _1821) + (((cbLight._m0[_1787].z * _1754) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1760 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3978 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1874 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2054 = _1760 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _3994 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2073 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1892 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1847;
        _1894 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1849;
        _1896 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1851;
    }
    uint _1899 = _1760 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _554) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1760].x + _631;
    float _1915 = cbLight._m0[_1760].y + _632;
    float _1916 = cbLight._m0[_1760].z + _633;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1760].xyz));
    float _4010 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _1928 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1929 = dot(vec3(_551, _552, _553), vec3(_1921, _1922, _1923));
    float _4032 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1921, _1922, _1923));
    float _4043 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1928 * ((_1927 * _1953) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1953) + _1913) * _1927))) * _1927;
    float _4054 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1980 = _1760 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _554) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1800].x + _631;
    float _1994 = cbLight._m0[_1800].y + _632;
    float _1995 = cbLight._m0[_1800].z + _633;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1800].xyz));
    float _4065 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2007 = dot(vec3(_551, _552, _553), vec3(_2000, _2001, _2002));
    float _4076 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2000, _2001, _2002));
    float _4087 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1992;
    float _2039 = (0.5 / (((_1928 * ((_2006 * _2029) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2029) + _1992) * _2006))) * _2006;
    float _4098 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2051 = (((_2028 * cbLight._m0[_1980].x) * _2041) * _1783) + ((((cbLight._m0[_1899].x * _1752) * _1952) * _1966) * _1796);
    float _2052 = (((_2028 * cbLight._m0[_1980].y) * _2041) * _1783) + ((((cbLight._m0[_1899].y * _1753) * _1952) * _1966) * _1796);
    float _2053 = (((_2028 * cbLight._m0[_1980].z) * _2041) * _1783) + ((((cbLight._m0[_1899].z * _1754) * _1952) * _1966) * _1796);
    float _2115;
    float _2117;
    float _2119;
    if (_1836)
    {
        _2115 = _2051;
        _2117 = _2052;
        _2119 = _2053;
    }
    else
    {
        uint _2121 = _1760 + 2u;
        uint _2125 = _1760 + 10u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _554) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _631;
        float _2142 = cbLight._m0[_2121].y + _632;
        float _2143 = cbLight._m0[_2121].z + _633;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2121].xyz));
        float _4109 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2155 = dot(vec3(_551, _552, _553), vec3(_2148, _2149, _2150));
        float _4120 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4131 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1928 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2177) + _2140) * _2154))) * _2154;
        float _4142 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2115 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2051;
        _2117 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2052;
        _2119 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2053;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1854)
    {
        _2225 = _2115;
        _2227 = _2117;
        _2229 = _2119;
    }
    else
    {
        uint _2236 = _1760 + 3u;
        uint _2240 = _1760 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _554) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _631;
        float _2257 = cbLight._m0[_2236].y + _632;
        float _2258 = cbLight._m0[_2236].z + _633;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2236].xyz));
        float _4158 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2270 = dot(vec3(_551, _552, _553), vec3(_2263, _2264, _2265));
        float _4169 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4180 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = 1.0 - _2255;
        float _2302 = (0.5 / (((_1928 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2292) + _2255) * _2269))) * _2269;
        float _4191 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2225 = (((_2291 * cbLight._m0[_2240].x) * _2304) * _2305) + _2115;
        _2227 = (((_2291 * cbLight._m0[_2240].y) * _2304) * _2305) + _2117;
        _2229 = (((_2291 * cbLight._m0[_2240].z) * _2304) * _2305) + _2119;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1758.y == 0u)
    {
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2380;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2380;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2380;
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _640) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _639) / _2396)));
        float _2417 = (log2(_2383 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2714)
                {
                    frontier_phi_61_pred = _2698;
                    frontier_phi_61_pred_1 = _2703;
                    frontier_phi_61_pred_2 = _2702;
                    frontier_phi_61_pred_3 = _2701;
                    frontier_phi_61_pred_4 = _2700;
                    frontier_phi_61_pred_5 = _2699;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2713;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2704 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2381;
                        float _2889 = _2848.y - _2382;
                        float _2890 = _2848.z - _2383;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_660, _663, _666), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4217 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2381;
                        float _2924 = (-0.0) - _2382;
                        float _2925 = (-0.0) - _2383;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _720;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_660, _663, _666), vec3(_2930, _2931, _2932));
                        float _4233 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2965 = dot(vec3(_660, _663, _666), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4244 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4255 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4266 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2757 = (_2919 * _2867.x) + _2825;
                        _2758 = (_2919 * _2867.y) + _2826;
                        _2759 = (_2919 * _2867.z) + _2827;
                        _2754 = (_3000 * _2884.x) + _2822;
                        _2755 = (_3000 * _2884.y) + _2823;
                        _2756 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_61_pred = _2754;
                    frontier_phi_61_pred_1 = _2759;
                    frontier_phi_61_pred_2 = _2758;
                    frontier_phi_61_pred_3 = _2757;
                    frontier_phi_61_pred_4 = _2756;
                    frontier_phi_61_pred_5 = _2755;
                }
                _2554 = frontier_phi_61_pred;
                _2564 = frontier_phi_61_pred_1;
                _2562 = frontier_phi_61_pred_2;
                _2560 = frontier_phi_61_pred_3;
                _2558 = frontier_phi_61_pred_4;
                _2556 = frontier_phi_61_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2554;
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2570) & _2427) == 0u)
        {
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
            float _2692 = _2691 * _2381;
            float _2693 = _2691 * _2382;
            float _2694 = _2691 * _2383;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2805 = _2553;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                uint _2811 = _2570;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2821)
                    {
                        frontier_phi_67_pred = _2808;
                        frontier_phi_67_pred_1 = _2809;
                        frontier_phi_67_pred_2 = _2810;
                        frontier_phi_67_pred_3 = _2807;
                        frontier_phi_67_pred_4 = _2806;
                        frontier_phi_67_pred_5 = _2805;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        uint _3024 = _2820;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3093;
                        vec4 _3109;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3035 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3035 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3035 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3035 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3035 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_2383, _3144.z, fma(_2382, _3144.y, _3144.x * _2381)) + _3144.w;
                            _3157 = !((fma(_2383, _3125.z, fma(_2382, _3125.y, _3125.x * _2381)) + _3125.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3157)
                            {
                                float _3184 = _3050.x - _2381;
                                float _3185 = _3050.y - _2382;
                                float _3186 = _3050.z - _2383;
                                float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                                float _3190 = inversesqrt(_3187);
                                float _3191 = _3190 * _3184;
                                float _3192 = _3190 * _3185;
                                float _3193 = _3190 * _3186;
                                float _3197 = 1.0 - (_3187 / (_3051 * _3051));
                                float _4277 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3202 = sqrt(_3187) * _3066.w;
                                float _3204 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                                float _3205 = _3204 * _3204;
                                float _3208 = ((1.0 - _3205) * dot(vec3(_3191, _3192, _3193), vec3(_660, _663, _666))) + _3205;
                                float _3211 = _3202 * _3202;
                                float _3215 = (fma(_2383, _3093.z, fma(_2382, _3093.y, _3093.x * _2381)) + _3093.w) / _3156;
                                float _3216 = (fma(_2383, _3109.z, fma(_2382, _3109.y, _3109.x * _2381)) + _3109.w) / _3156;
                                float _3220 = 1.0 - dot(vec2(_3215, _3216), vec2(_3215, _3216));
                                float _4293 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3222 = _3221 * (((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3198) / ((_3211 * 0.699999988079071044921875) + 1.0));
                                float _3234 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                                float _3235 = 1.0 - _720;
                                float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                                float _3243 = _3242 * _3242;
                                float _3244 = _3243 * _3243;
                                float _3245 = _3191 - _2692;
                                float _3246 = _3192 - _2693;
                                float _3247 = _3193 - _2694;
                                float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                                float _3255 = dot(vec3(_660, _663, _666), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4304 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3259 = dot(vec3(_660, _663, _666), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                                float _4315 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                                float _3267 = _3204 * _3243;
                                float _3268 = _3267 * _3267;
                                float _3274 = ((1.0 - _3268) * dot(vec3(_660, _663, _666), vec3(_3191, _3192, _3193))) + _3268;
                                float _4326 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3276 = 1.0 - _3243;
                                float _3286 = (0.5 / (((_3275 * ((_3258 * _3276) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3243) * _3258))) * _3275;
                                float _4337 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = (_3221 * _3198) * (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3266 * _3266) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3296 * _3078.x;
                                frontier_phi_73_pred_1 = _3296 * _3078.y;
                                frontier_phi_73_pred_2 = _3222 * _3066.z;
                                frontier_phi_73_pred_3 = _3222 * _3066.y;
                                frontier_phi_73_pred_4 = _3222 * _3066.x;
                                frontier_phi_73_pred_5 = _3296 * _3078.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3300 = frontier_phi_73_pred;
                            _3301 = frontier_phi_73_pred_1;
                            _3305 = frontier_phi_73_pred_2;
                            _3304 = frontier_phi_73_pred_3;
                            _3303 = frontier_phi_73_pred_4;
                            _3302 = frontier_phi_73_pred_5;
                            _3008 = _3303 + _3021;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3008;
                        frontier_phi_67_pred_1 = _3009;
                        frontier_phi_67_pred_2 = _3010;
                        frontier_phi_67_pred_3 = _3007;
                        frontier_phi_67_pred_4 = _3006;
                        frontier_phi_67_pred_5 = _3005;
                    }
                    _2673 = frontier_phi_67_pred;
                    _2675 = frontier_phi_67_pred_1;
                    _2677 = frontier_phi_67_pred_2;
                    _2671 = frontier_phi_67_pred_3;
                    _2669 = frontier_phi_67_pred_4;
                    _2667 = frontier_phi_67_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2667;
                        _2806 = _2669;
                        _2807 = _2671;
                        _2808 = _2673;
                        _2809 = _2675;
                        _2810 = _2677;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2675;
                frontier_phi_55_56_ladder_1 = _2677;
                frontier_phi_55_56_ladder_2 = _2673;
                frontier_phi_55_56_ladder_3 = _2671;
                frontier_phi_55_56_ladder_4 = _2669;
                frontier_phi_55_56_ladder_5 = _2667;
            }
            else
            {
                frontier_phi_55_56_ladder = _2561;
                frontier_phi_55_56_ladder_1 = _2563;
                frontier_phi_55_56_ladder_2 = _2559;
                frontier_phi_55_56_ladder_3 = _2557;
                frontier_phi_55_56_ladder_4 = _2555;
                frontier_phi_55_56_ladder_5 = _2553;
            }
            _2666 = frontier_phi_55_56_ladder_5;
            _2668 = frontier_phi_55_56_ladder_4;
            _2670 = frontier_phi_55_56_ladder_3;
            _2672 = frontier_phi_55_56_ladder_2;
            _2674 = frontier_phi_55_56_ladder;
            _2676 = frontier_phi_55_56_ladder_1;
        }
        float _2681 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _2440 = (_2681 * _2672) + _1892;
        _2442 = (_2681 * _2674) + _1894;
        _2444 = (_2681 * _2676) + _1896;
        _2446 = ((_2666 * 0.039999999105930328369140625) * _2681) + _2225;
        _2448 = ((_2668 * 0.039999999105930328369140625) * _2681) + _2227;
        _2450 = ((_2670 * 0.039999999105930328369140625) * _2681) + _2229;
    }
    else
    {
        _2440 = _1892;
        _2442 = _1894;
        _2444 = _1896;
        _2446 = _2225;
        _2448 = _2227;
        _2450 = _2229;
    }
    uint _2456 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _4353 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4364 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4375 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2487 = (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2440 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _704))) + ((_2446 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + (((_359 * cbMtdParam._m0[11u].x) * (_476.x + _461.x)) * cbInstanceData._m0[_2456].x);
    float _2489 = ((((_359 * cbMtdParam._m0[11u].y) * (_476.y + _461.y)) * cbInstanceData._m0[_2456].y) + ((_2448 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2442 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _704)));
    float _2491 = ((((_359 * cbMtdParam._m0[11u].z) * (_476.z + _461.z)) * cbInstanceData._m0[_2456].z) + ((_2450 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2444 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _704)));
    uint _2495 = _679 + 6u;
    float _2503 = _639 / cbSceneParam._m0[86u].x;
    float _2504 = _640 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2579 = _2578 / _573;
        float _2590 = _2579 * _624;
        float _2591 = _625 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _626;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2729 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2767 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2614 * _2738) - exp2(_2614 * _2739)) * _2727))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2523);
        _2616 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2618 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2620 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2622 = _2778 * _2523;
    }
    else
    {
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
        _2622 = _2523;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0)));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2495].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
}


