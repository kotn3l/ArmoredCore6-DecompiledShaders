#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1054;
float _3726;
float _3727;
float _3728;
float _3729;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _296 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_275.x + 0.00999999977648258209228515625));
    float _298 = _296 * (cbMtdParam._m0[15u].x + 1.0);
    float _3738 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _307 = ((((cbMtdParam._m0[12u].x - _253) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _299) + _253;
    float _308 = ((((cbMtdParam._m0[12u].y - _254) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _299) + _254;
    float _309 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _255)) * _299) + _255;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _331 = (_321.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3749 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    float _340 = _296 * (cbMtdParam._m0[14u].w + 1.0);
    float _3760 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _344 = ((cbMtdParam._m0[14u].y - _325) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _325;
    vec4 _373 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _399 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _414 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _428 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_373.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3771 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _455 = (_449.x * 2.0) + (-1.0);
    float _456 = (_449.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3782 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _473 = (_299 * (((cbMtdParam._m0[13u].z * _329) - _329) + _455)) + _329;
    float _474 = (_299 * (((cbMtdParam._m0[13u].z * _331) - _331) + _456)) + _331;
    float _475 = (_299 * (sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) - _337)) + _337;
    float _478 = fma(_475, _218 * NORMAL.x, fma(_474, _225 * TANGENT.x, (_211 * _203) * _473));
    float _481 = fma(_475, _218 * NORMAL.y, fma(_474, _225 * TANGENT.y, (_211 * _204) * _473));
    float _484 = fma(_475, _218 * NORMAL.z, fma(_474, _225 * TANGENT.z, (_211 * _205) * _473));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _3793 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _492 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3815 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3826 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _511 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _561 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _551);
    float _562 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _551);
    float _563 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _551);
    float _567 = inversesqrt(dot(vec3(_561, _562, _563), vec3(_561, _562, _563)));
    float _568 = _561 * _567;
    float _569 = _562 * _567;
    float _570 = _563 * _567;
    vec4 _575 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _577 = _575.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _734 = sqrt(((_561 * _561) + (_562 * _562)) + (_563 * _563));
        float _740 = (cbMatDynParam._m0[5u].x * _734) + cbMatDynParam._m0[5u].y;
        float _3837 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _745 = (cbMatDynParam._m0[5u].z * _734) + cbMatDynParam._m0[5u].w;
        float _3848 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) - _741)) + _741) < ((_577 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_491, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _613 = fma(_491, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _616 = fma(_491, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _629 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = _629 + 9u;
    uint _631 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3859 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _654 = _651.x * TEXCOORD_3.w;
    float _655 = dot(vec3(_489, _490, _491), vec3(_568, _569, _570));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _489) - _568;
    float _663 = (_658 * _490) - _569;
    float _664 = (_658 * _491) - _570;
    float _668 = abs(dot(vec3(_568, _569, _570), vec3(_489, _490, _491)));
    float _3892 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(_492);
    float _683 = exp2((_670 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _782 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _786 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _811 = _715 + _489;
        float _812 = _719 + _490;
        float _813 = _723 + _491;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_489, _490, _491), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3940 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_489, _490, _491), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3973 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_489, _490, _491), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _4006 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1101 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1105 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1128 = _715 + _489;
        float _1129 = _719 + _490;
        float _1130 = _723 + _491;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_489, _490, _491), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4069 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_489, _490, _491), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4102 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_489, _490, _491), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4135 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = _1054;
        _1374 = _1054;
        _1375 = _1054;
        _1376 = _1054;
        _1377 = _1054;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1066)) + _1066;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1067)) + _1067;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _662 * 0.5;
    float _1435 = _663 * 0.5;
    float _1436 = _664 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _492);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1564 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1567 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1595 = frontier_phi_17_15_ladder;
        }
        float _1766;
        if (_1564 > 0.0)
        {
            _1766 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1766 = frontier_phi_26_22_ladder;
        }
        float _2062;
        if (_1567 > 0.0)
        {
            _2062 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2062 = frontier_phi_38_33_ladder;
        }
        float _2064 = isnan(_1766) ? _1595 : (isnan(_1595) ? _1766 : min(_1595, _1766));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1561) + _1550;
        float _2070 = (_2065 * _1564) + _1554;
        float _2071 = (_2065 * _1567) + _1558;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2072;
        float _2076 = _2072 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 > _2076) || ((_2070 < _2074) || ((_2069 < _2074) || (_2069 > _2076))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2071, cbModelParam._m0[9u].z, fma(_2070, cbModelParam._m0[9u].y, _2069 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2071, cbModelParam._m0[10u].z, fma(_2070, cbModelParam._m0[10u].y, _2069 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2071, cbModelParam._m0[11u].z, fma(_2070, cbModelParam._m0[11u].y, _2069 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_16_38_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_16_38_ladder_2;
        _1585 = frontier_phi_16_38_ladder_1;
        _1587 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1503);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _492);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1661 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1664 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1771;
        if (_1658 > 0.0)
        {
            _1771 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1771 = frontier_phi_28_24_ladder;
        }
        float _2089;
        if (_1661 > 0.0)
        {
            _2089 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2089 = frontier_phi_40_35_ladder;
        }
        float _2416;
        if (_1664 > 0.0)
        {
            _2416 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2416 = frontier_phi_50_47_ladder;
        }
        float _2418 = isnan(_2089) ? _1771 : (isnan(_1771) ? _2089 : min(_1771, _2089));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1658) + _1647;
        float _2424 = (_2419 * _1661) + _1651;
        float _2425 = (_2419 * _1664) + _1655;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2426;
        float _2429 = _2426 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2425 > _2429) || ((_2425 < _2427) || ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 < _2427) || (_2423 > _2429))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2425, cbModelParam._m0[17u].z, fma(_2424, cbModelParam._m0[17u].y, _2423 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2425, cbModelParam._m0[18u].z, fma(_2424, cbModelParam._m0[18u].y, _2423 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2425, cbModelParam._m0[19u].z, fma(_2424, cbModelParam._m0[19u].y, _2423 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_25_50_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_25_50_ladder_2;
        _1685 = frontier_phi_25_50_ladder_1;
        _1687 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1592);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1699 = ((((1.0 - _683) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_683 * _670)) * _654;
    float _1700 = _1699 * ((cbModelParam._m0[1u].w * (_1683 - _1583)) + _1583);
    float _1701 = _1699 * ((cbModelParam._m0[1u].w * (_1685 - _1585)) + _1585);
    float _1702 = _1699 * ((cbModelParam._m0[1u].w * (_1687 - _1587)) + _1587);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1753 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1757 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1758 = _1745 / _1757;
    float _1759 = _1749 / _1757;
    float _1760 = _1753 / _1757;
    float _1907;
    float _1908;
    float _1909;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1787 = ((uint(_1760 > cbSceneParam._m0[59u].y) + uint(_1760 > cbSceneParam._m0[59u].x)) + uint(_1760 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1788 = _1787 + 43u;
        uint _1796 = _1787 + 44u;
        uint _1804 = _1787 + 45u;
        uint _1812 = _1787 + 46u;
        float _1823 = fma(_1757, cbSceneParam._m0[_1788].w, fma(_1753, cbSceneParam._m0[_1788].z, fma(_1749, cbSceneParam._m0[_1788].y, _1745 * cbSceneParam._m0[_1788].x)));
        float _1827 = fma(_1757, cbSceneParam._m0[_1796].w, fma(_1753, cbSceneParam._m0[_1796].z, fma(_1749, cbSceneParam._m0[_1796].y, _1745 * cbSceneParam._m0[_1796].x)));
        float _1835 = fma(_1757, cbSceneParam._m0[_1812].w, fma(_1753, cbSceneParam._m0[_1812].z, fma(_1749, cbSceneParam._m0[_1812].y, _1745 * cbSceneParam._m0[_1812].x)));
        float _1840 = cbSceneParam._m0[33u].z * _1835;
        float _1842 = cbSceneParam._m0[33u].w * _1835;
        float _1845 = fma(_1757, cbSceneParam._m0[_1804].w, fma(_1753, cbSceneParam._m0[_1804].z, fma(_1749, cbSceneParam._m0[_1804].y, _1745 * cbSceneParam._m0[_1804].x))) / _1835;
        float _1893 = (cbSceneParam._m0[33u].x - sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760))) * cbSceneParam._m0[33u].y;
        float _4261 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1900 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1840 + _1823) / _1835, (_1842 + _1827) / _1835), _1845), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1842 + _1823) / _1835, (_1827 - _1840) / _1835), _1845), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 - _1840) / _1835, (_1827 - _1842) / _1835), _1845), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 - _1842) / _1835, (_1840 + _1827) / _1835), _1845), 0.0)).x), vec4(0.25)));
        _1907 = 1.0 - (_1900 * cbSceneParam._m0[34u].x);
        _1908 = 1.0 - (_1900 * cbSceneParam._m0[34u].y);
        _1909 = 1.0 - (_1900 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1907 = 1.0;
        _1908 = 1.0;
        _1909 = 1.0;
    }
    float _1973;
    float _1975;
    float _1977;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1961 = fma(_1757, cbSceneParam._m0[63u].w, fma(_1753, cbSceneParam._m0[63u].z, fma(_1749, cbSceneParam._m0[63u].y, _1745 * cbSceneParam._m0[63u].x)));
        float _1962 = fma(_1757, cbSceneParam._m0[60u].w, fma(_1753, cbSceneParam._m0[60u].z, fma(_1749, cbSceneParam._m0[60u].y, _1745 * cbSceneParam._m0[60u].x))) / _1961;
        float _1963 = fma(_1757, cbSceneParam._m0[61u].w, fma(_1753, cbSceneParam._m0[61u].z, fma(_1749, cbSceneParam._m0[61u].y, _1745 * cbSceneParam._m0[61u].x))) / _1961;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1962 >= cbSceneParam._m0[64u].x) && (_1963 >= cbSceneParam._m0[64u].y)) && (_1962 <= cbSceneParam._m0[64u].z)) && (_1963 <= cbSceneParam._m0[64u].w))
        {
            float _2102 = fma(_1757, cbSceneParam._m0[62u].w, fma(_1753, cbSceneParam._m0[62u].z, fma(_1749, cbSceneParam._m0[62u].y, _1745 * cbSceneParam._m0[62u].x))) / _1961;
            float _2106 = isnan(cbSceneParam._m0[41u].w) ? _2102 : (isnan(_2102) ? cbSceneParam._m0[41u].w : max(_2102, cbSceneParam._m0[41u].w));
            float _2149 = (cbSceneParam._m0[33u].x - sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760))) * cbSceneParam._m0[33u].y;
            float _4277 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
            float _2156 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1962, cbSceneParam._m0[33u].w + _1963), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1962, _1963 - cbSceneParam._m0[33u].z), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1962 - cbSceneParam._m0[33u].z, _1963 - cbSceneParam._m0[33u].w), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1962 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1963), _2106), 0.0)).x), vec4(0.25)));
            float _2160 = 1.0 - (_2156 * cbSceneParam._m0[34u].x);
            float _2161 = 1.0 - (_2156 * cbSceneParam._m0[34u].y);
            float _2162 = 1.0 - (_2156 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2162) ? _1909 : (isnan(_1909) ? _2162 : min(_1909, _2162));
            frontier_phi_37_36_ladder_1 = isnan(_2161) ? _1908 : (isnan(_1908) ? _2161 : min(_1908, _2161));
            frontier_phi_37_36_ladder_2 = isnan(_2160) ? _1907 : (isnan(_1907) ? _2160 : min(_1907, _2160));
        }
        else
        {
            frontier_phi_37_36_ladder = _1909;
            frontier_phi_37_36_ladder_1 = _1908;
            frontier_phi_37_36_ladder_2 = _1907;
        }
        _1973 = frontier_phi_37_36_ladder_2;
        _1975 = frontier_phi_37_36_ladder_1;
        _1977 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1973 = _1907;
        _1975 = _1908;
        _1977 = _1909;
    }
    uvec4 _1982 = floatBitsToUint(cbInstanceData._m0[_629 + 5u]);
    uint _1984 = _1982.x * 14u;
    uint _1985 = _1984 + 13u;
    float _1992 = _654 + (-1.0);
    float _1997 = (cbLight._m0[_1985].x * _1992) + 1.0;
    float _1998 = (cbLight._m0[_1985].y * _1992) + 1.0;
    float _1999 = (cbLight._m0[_1985].z * _1992) + 1.0;
    float _2000 = (cbLight._m0[_1985].w * _1992) + 1.0;
    uint _2001 = _1984 + 5u;
    float _2007 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2011 = _1984 + 4u;
    float _2021 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2025 = _1984 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_489, _490, _491));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_489, _490, _491));
    float _4313 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4324 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2001].x * _2007) * _2046) + (((cbLight._m0[_2011].x * _1973) * _2021) * _2044);
    float _2054 = ((_2007 * cbLight._m0[_2001].y) * _2046) + (((cbLight._m0[_2011].y * _1975) * _2021) * _2044);
    float _2055 = ((_2007 * cbLight._m0[_2001].z) * _2046) + (((cbLight._m0[_2011].z * _1977) * _2021) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1984 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2061)
    {
        _2163 = _2053;
        _2165 = _2054;
        _2167 = _2055;
    }
    else
    {
        uint _2171 = _1984 + 6u;
        float _2187 = (dot(vec3(cbLight._m0[_1984 + 2u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4335 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2190 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2163 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _2053;
        _2165 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _2054;
        _2167 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _2055;
    }
    bool _2170 = _2059.y == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2170)
    {
        _2225 = _2163;
        _2227 = _2165;
        _2229 = _2167;
    }
    else
    {
        uint _2387 = _1984 + 7u;
        float _2403 = (dot(vec3(cbLight._m0[_1984 + 3u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4351 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2406 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2225 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2163;
        _2227 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2165;
        _2229 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2167;
    }
    uint _2232 = _1984 + 8u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _492) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_1984].x + _568;
    float _2248 = cbLight._m0[_1984].y + _569;
    float _2249 = cbLight._m0[_1984].z + _570;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1984].xyz));
    float _4367 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2261 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2262 = dot(vec3(_489, _490, _491), vec3(_2254, _2255, _2256));
    float _4389 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2254, _2255, _2256));
    float _4400 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2246 * _2246;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2246;
    float _2297 = (0.5 / (((_2261 * ((_2260 * _2286) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2286) + _2246) * _2260))) * _2260;
    float _4411 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    uint _2313 = _1984 + 9u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _492) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2025].x + _568;
    float _2327 = cbLight._m0[_2025].y + _569;
    float _2328 = cbLight._m0[_2025].z + _570;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2025].xyz));
    float _4422 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2340 = dot(vec3(_489, _490, _491), vec3(_2333, _2334, _2335));
    float _4433 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2333, _2334, _2335));
    float _4444 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2325 * _2325;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2361 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2362 = 1.0 - _2325;
    float _2372 = (0.5 / (((_2261 * ((_2339 * _2362) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2362) + _2325) * _2339))) * _2339;
    float _4455 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    float _2384 = (((_2361 * cbLight._m0[_2313].x) * _2374) * _2007) + ((((cbLight._m0[_2232].x * _1973) * _2285) * _2299) * _2021);
    float _2385 = (((_2361 * cbLight._m0[_2313].y) * _2374) * _2007) + ((((cbLight._m0[_2232].y * _1975) * _2285) * _2299) * _2021);
    float _2386 = (((_2361 * cbLight._m0[_2313].z) * _2374) * _2007) + ((((cbLight._m0[_2232].z * _1977) * _2285) * _2299) * _2021);
    float _2442;
    float _2444;
    float _2446;
    if (_2061)
    {
        _2442 = _2384;
        _2444 = _2385;
        _2446 = _2386;
    }
    else
    {
        uint _2448 = _1984 + 2u;
        uint _2452 = _1984 + 10u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _492) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _568;
        float _2469 = cbLight._m0[_2448].y + _569;
        float _2470 = cbLight._m0[_2448].z + _570;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2448].xyz));
        float _4466 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2482 = dot(vec3(_489, _490, _491), vec3(_2475, _2476, _2477));
        float _4477 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4488 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2503 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2504 = 1.0 - _2467;
        float _2514 = (0.5 / (((_2261 * ((_2481 * _2504) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2504) + _2467) * _2481))) * _2481;
        float _4499 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2442 = (((_2503 * cbLight._m0[_2452].x) * _2516) * _2517) + _2384;
        _2444 = (((_2503 * cbLight._m0[_2452].y) * _2516) * _2517) + _2385;
        _2446 = (((_2503 * cbLight._m0[_2452].z) * _2516) * _2517) + _2386;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2170)
    {
        _2548 = _2442;
        _2550 = _2444;
        _2552 = _2446;
    }
    else
    {
        uint _2559 = _1984 + 3u;
        uint _2563 = _1984 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _492) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _568;
        float _2580 = cbLight._m0[_2559].y + _569;
        float _2581 = cbLight._m0[_2559].z + _570;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2559].xyz));
        float _4515 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2593 = dot(vec3(_489, _490, _491), vec3(_2586, _2587, _2588));
        float _4526 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4537 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2615 = 1.0 - _2578;
        float _2625 = (0.5 / (((_2261 * ((_2592 * _2615) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2615) + _2578) * _2592))) * _2592;
        float _4548 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2548 = (((_2614 * cbLight._m0[_2563].x) * _2627) * _2628) + _2442;
        _2550 = (((_2614 * cbLight._m0[_2563].y) * _2627) * _2628) + _2444;
        _2552 = (((_2614 * cbLight._m0[_2563].z) * _2627) * _2628) + _2446;
    }
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_1982.y == 0u)
    {
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.x;
        uint _2661 = uint((float(_2649.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2650))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2650)));
        float _2671 = (log2(_1760 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        uint _2675 = uint(isnan(14.0) ? _2672 : (isnan(_2672) ? 14.0 : min(_2672, 14.0)));
        uvec4 _2680 = texelFetch(g_lightClusterGridBuffer, int(((_2675 << 2u) + (_2661 << 6u)) >> 2u));
        uint _2681 = _2680.x;
        uint _2682 = _2649.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2682 >> 4u) & 15u)) + 4294967295u) & _2681) == 0u) || ((_2682 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2955)
                {
                    frontier_phi_71_pred = _2944;
                    frontier_phi_71_pred_1 = _2943;
                    frontier_phi_71_pred_2 = _2942;
                    frontier_phi_71_pred_3 = _2941;
                    frontier_phi_71_pred_4 = _2940;
                    frontier_phi_71_pred_5 = _2939;
                }
                else
                {
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    uint _3090;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2954;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3094 = uint(findLSB(_3090)) + (_2945 << 5u);
                        uint _3091 = (_3090 + 4294967295u) & _3090;
                        uint _3096 = _3094 * 48u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3116 = (_3094 * 48u) + 4u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3135 = (_3094 * 48u) + 8u;
                        vec3 _3146 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x));
                        float _3150 = _3110.x - _1758;
                        float _3151 = _3110.y - _1759;
                        float _3152 = _3110.z - _1760;
                        float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                        float _3156 = inversesqrt(_3153);
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3160 = dot(vec3(_610, _613, _616), vec3(_3157, _3158, _3159));
                        float _3165 = 1.0 - (_3153 * _3110.w);
                        float _4574 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3167 = sqrt(_3153) * _3129.w;
                        float _3170 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3160) + _3171;
                        float _3177 = _3167 * _3167;
                        float _3181 = ((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3166) / ((_3177 * 0.699999988079071044921875) + 1.0);
                        float _3185 = (-0.0) - _1758;
                        float _3186 = (-0.0) - _1759;
                        float _3187 = (-0.0) - _1760;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3192 = _3191 * _3185;
                        float _3193 = _3191 * _3186;
                        float _3194 = _3191 * _3187;
                        float _3201 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _670;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3192 + _3157;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_610, _613, _616), vec3(_3192, _3193, _3194));
                        float _4590 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3226 = dot(vec3(_610, _613, _616), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4601 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3170 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3160) + _3235;
                        float _4612 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4623 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3233 * _3233) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125))) * _3166;
                        _3014 = (_3181 * _3129.x) + _3087;
                        _3015 = (_3181 * _3129.y) + _3088;
                        _3016 = (_3181 * _3129.z) + _3089;
                        _3011 = (_3261 * _3146.x) + _3084;
                        _3012 = (_3261 * _3146.y) + _3085;
                        _3013 = (_3261 * _3146.z) + _3086;
                        if (_3091 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3091;
                        }
                    }
                    frontier_phi_71_pred = _3016;
                    frontier_phi_71_pred_1 = _3015;
                    frontier_phi_71_pred_2 = _3014;
                    frontier_phi_71_pred_3 = _3013;
                    frontier_phi_71_pred_4 = _3012;
                    frontier_phi_71_pred_5 = _3011;
                }
                _2797 = frontier_phi_71_pred;
                _2795 = frontier_phi_71_pred_1;
                _2793 = frontier_phi_71_pred_2;
                _2791 = frontier_phi_71_pred_3;
                _2789 = frontier_phi_71_pred_4;
                _2787 = frontier_phi_71_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2787;
                    _2940 = _2789;
                    _2941 = _2791;
                    _2942 = _2793;
                    _2943 = _2795;
                    _2944 = _2797;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2803) & _2681) == 0u)
        {
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
            float _2933 = _2932 * _1758;
            float _2934 = _2932 * _1759;
            float _2935 = _2932 * _1760;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3067 = _2786;
                float _3068 = _2788;
                float _3069 = _2790;
                float _3070 = _2792;
                float _3071 = _2794;
                float _3072 = _2796;
                uint _3073 = _2803;
                uint _3082;
                bool _3083;
                for (;;)
                {
                    _3082 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                    _3083 = _3082 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3083)
                    {
                        frontier_phi_82_pred = _3072;
                        frontier_phi_82_pred_1 = _3071;
                        frontier_phi_82_pred_2 = _3070;
                        frontier_phi_82_pred_3 = _3069;
                        frontier_phi_82_pred_4 = _3068;
                        frontier_phi_82_pred_5 = _3067;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3288 = _3067;
                        float _3289 = _3068;
                        float _3290 = _3069;
                        float _3291 = _3070;
                        float _3292 = _3071;
                        float _3293 = _3072;
                        uint _3294 = _3082;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3379;
                        float _3426;
                        bool _3427;
                        for (;;)
                        {
                            uint _3305 = ((_3073 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3366 = (_3305 * 40u) + 20u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3382 = (_3305 * 40u) + 24u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3401 = (_3305 * 40u) + 28u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3426 = fma(_1760, _3414.z, fma(_1759, _3414.y, _3414.x * _1758)) + _3414.w;
                            _3427 = !((fma(_1760, _3395.z, fma(_1759, _3395.y, _3395.x * _1758)) + _3395.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3427)
                            {
                                float _3454 = _3320.x - _1758;
                                float _3455 = _3320.y - _1759;
                                float _3456 = _3320.z - _1760;
                                float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                                float _3460 = inversesqrt(_3457);
                                float _3461 = _3460 * _3454;
                                float _3462 = _3460 * _3455;
                                float _3463 = _3460 * _3456;
                                float _3467 = 1.0 - (_3457 / (_3321 * _3321));
                                float _4634 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3472 = sqrt(_3457) * _3336.w;
                                float _3474 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                                float _3475 = _3474 * _3474;
                                float _3478 = ((1.0 - _3475) * dot(vec3(_3461, _3462, _3463), vec3(_610, _613, _616))) + _3475;
                                float _3481 = _3472 * _3472;
                                float _3485 = (fma(_1760, _3363.z, fma(_1759, _3363.y, _3363.x * _1758)) + _3363.w) / _3426;
                                float _3486 = (fma(_1760, _3379.z, fma(_1759, _3379.y, _3379.x * _1758)) + _3379.w) / _3426;
                                float _3490 = 1.0 - dot(vec2(_3485, _3486), vec2(_3485, _3486));
                                float _4650 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3492 = _3491 * (((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3468) / ((_3481 * 0.699999988079071044921875) + 1.0));
                                float _3504 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                                float _3505 = 1.0 - _670;
                                float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                                float _3513 = _3512 * _3512;
                                float _3514 = _3513 * _3513;
                                float _3515 = _3461 - _2933;
                                float _3516 = _3462 - _2934;
                                float _3517 = _3463 - _2935;
                                float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                                float _3525 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2933, (-0.0) - _2934, (-0.0) - _2935));
                                float _4661 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3529 = dot(vec3(_610, _613, _616), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                                float _4672 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                                float _3537 = _3474 * _3513;
                                float _3538 = _3537 * _3537;
                                float _3544 = ((1.0 - _3538) * dot(vec3(_610, _613, _616), vec3(_3461, _3462, _3463))) + _3538;
                                float _4683 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3546 = 1.0 - _3513;
                                float _3556 = (0.5 / (((_3545 * ((_3528 * _3546) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3513) * _3528))) * _3545;
                                float _4694 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3566 = (_3491 * _3468) * (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3536 * _3536) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3492 * _3336.z;
                                frontier_phi_88_pred_1 = _3492 * _3336.y;
                                frontier_phi_88_pred_2 = _3492 * _3336.x;
                                frontier_phi_88_pred_3 = _3566 * _3348.z;
                                frontier_phi_88_pred_4 = _3566 * _3348.y;
                                frontier_phi_88_pred_5 = _3566 * _3348.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_88_pred;
                            _3574 = frontier_phi_88_pred_1;
                            _3573 = frontier_phi_88_pred_2;
                            _3572 = frontier_phi_88_pred_3;
                            _3571 = frontier_phi_88_pred_4;
                            _3570 = frontier_phi_88_pred_5;
                            _3278 = _3573 + _3291;
                            _3279 = _3574 + _3292;
                            _3280 = _3575 + _3293;
                            _3275 = _3570 + _3288;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3280;
                        frontier_phi_82_pred_1 = _3279;
                        frontier_phi_82_pred_2 = _3278;
                        frontier_phi_82_pred_3 = _3277;
                        frontier_phi_82_pred_4 = _3276;
                        frontier_phi_82_pred_5 = _3275;
                    }
                    _2918 = frontier_phi_82_pred;
                    _2916 = frontier_phi_82_pred_1;
                    _2914 = frontier_phi_82_pred_2;
                    _2912 = frontier_phi_82_pred_3;
                    _2910 = frontier_phi_82_pred_4;
                    _2908 = frontier_phi_82_pred_5;
                    uint _3074 = _3073 + 1u;
                    if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3067 = _2908;
                        _3068 = _2910;
                        _3069 = _2912;
                        _3070 = _2914;
                        _3071 = _2916;
                        _3072 = _2918;
                        _3073 = _3074;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2914;
                frontier_phi_63_64_ladder_1 = _2918;
                frontier_phi_63_64_ladder_2 = _2916;
                frontier_phi_63_64_ladder_3 = _2912;
                frontier_phi_63_64_ladder_4 = _2910;
                frontier_phi_63_64_ladder_5 = _2908;
            }
            else
            {
                frontier_phi_63_64_ladder = _2792;
                frontier_phi_63_64_ladder_1 = _2796;
                frontier_phi_63_64_ladder_2 = _2794;
                frontier_phi_63_64_ladder_3 = _2790;
                frontier_phi_63_64_ladder_4 = _2788;
                frontier_phi_63_64_ladder_5 = _2786;
            }
            _2907 = frontier_phi_63_64_ladder_5;
            _2909 = frontier_phi_63_64_ladder_4;
            _2911 = frontier_phi_63_64_ladder_3;
            _2913 = frontier_phi_63_64_ladder;
            _2915 = frontier_phi_63_64_ladder_2;
            _2917 = frontier_phi_63_64_ladder_1;
        }
        float _2922 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2694 = (_2922 * _2913) + _2225;
        _2696 = (_2922 * _2915) + _2227;
        _2698 = (_2922 * _2917) + _2229;
        _2700 = ((_2907 * 0.039999999105930328369140625) * _2922) + _2548;
        _2702 = ((_2909 * 0.039999999105930328369140625) * _2922) + _2550;
        _2704 = ((_2911 * 0.039999999105930328369140625) * _2922) + _2552;
    }
    else
    {
        _2694 = _2225;
        _2696 = _2227;
        _2698 = _2229;
        _2700 = _2548;
        _2702 = _2550;
        _2704 = _2552;
    }
    uint _2710 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _4710 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4721 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4732 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _2741 = (((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2694 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _654))) + ((_2700 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + (((_429 * cbMtdParam._m0[11u].x) * (_414.x + _399.x)) * cbInstanceData._m0[_2710].x);
    float _2743 = ((((_429 * cbMtdParam._m0[11u].y) * (_414.y + _399.y)) * cbInstanceData._m0[_2710].y) + ((_2702 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2696 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _654)));
    float _2745 = ((((_429 * cbMtdParam._m0[11u].z) * (_414.z + _399.z)) * cbInstanceData._m0[_2710].z) + ((_2704 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2698 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _654)));
    float _2746 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2747 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2748 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    uint _2749 = _629 + 6u;
    float _2757 = _589 / cbSceneParam._m0[86u].x;
    float _2758 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _511 : (isnan(_511) ? cbSceneParam._m0[77u].w : min(_511, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_511 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_511) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _511 : min(cbSceneParam._m0[80u].w, _511));
        float _2812 = _2811 / _511;
        float _2823 = _2812 * _561;
        float _2824 = _562 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2827 = _2812 * _563;
        float _2829 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2830 = _2829 + cbSceneParam._m0[79u].w;
        float _2831 = cbSceneParam._m0[79u].w - _2824;
        float _2837 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2827 * _2827));
        float _2840 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2837;
        float _2845 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2847 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2825 - _2829) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2830 > 0.0) ? exp2(_2845 * _2830) : (2.0 - exp2(_2847 * _2830))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2840;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : max(_2830, _2831));
            float _2970 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : min(_2830, _2831));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3024 = ((abs(_2837 / _2825) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2845 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2845 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2847 * _2979) - exp2(_2847 * _2980)) * _2968))) + (_2840 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2777);
        _2849 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2851 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2853 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2855 = _3035 * _2777;
    }
    else
    {
        _2849 = _2774;
        _2851 = _2775;
        _2853 = _2776;
        _2855 = _2777;
    }
    bool _3062;
    vec4 _2865;
    vec4 _2887;
    float _2889;
    float _2893;
    float _2894;
    float _2895;
    float _2896;
    bool _2906;
    for (;;)
    {
        _2865 = cbMatDynParam._m0[0u];
        float _2867 = roundEven(_2865.y);
        bool _2868 = _2867 == 3.0;
        float _2869 = log2(_2855);
        float _2876 = exp2(_2869 * cbSceneParam._m0[78u].x) * _2746;
        float _2877 = exp2(_2869 * cbSceneParam._m0[78u].y) * _2747;
        float _2878 = exp2(_2869 * cbSceneParam._m0[78u].z) * _2748;
        float _2885 = _577 + (-0.5);
        _2887 = cbMtdParam._m0[1u];
        _2889 = _2887.y * _2885;
        float _2892 = (_2867 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2893 = _2892 * (_2868 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2849)));
        _2894 = _2892 * (_2868 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2851)));
        _2895 = _2892 * (_2868 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2853)));
        _2896 = _2885 * 0.999000012874603271484375;
        _2906 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2906)
        {
            if ((cbInstanceData._m0[_629 + 7u].x + _2896) < 0.5)
            {
                _3062 = true;
                break;
            }
        }
        uint _3003 = _630 + uint(_2865.w);
        if ((cbInstanceData._m0[_3003].w < 1.0) && ((cbInstanceData._m0[_3003].w + _2896) < 0.5))
        {
            _3062 = true;
            break;
        }
        if ((_2889 + 1.0) < _2887.x)
        {
            _3062 = true;
            break;
        }
        _3062 = false;
        break;
    }
    float _3266;
    if (_3062)
    {
        discard_state = true;
        _3266 = 0.0;
    }
    else
    {
        _3266 = cbInstanceData._m0[_2749].w;
    }
    SV_Target.x = _2893;
    SV_Target.y = _2894;
    SV_Target.z = _2895;
    SV_Target.w = _3266;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2749].w;
    discard_exit();
}


