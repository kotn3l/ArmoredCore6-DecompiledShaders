#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1008;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _290 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_269.x + 0.00999999977648258209228515625));
    float _292 = _290 * (cbMtdParam._m0[15u].x + 1.0);
    float _3367 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _301 = ((((cbMtdParam._m0[12u].x - _247) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _293) + _247;
    float _302 = ((((cbMtdParam._m0[12u].y - _248) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _293) + _248;
    float _303 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _249)) * _293) + _249;
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3378 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))));
    float _334 = _290 * (cbMtdParam._m0[14u].w + 1.0);
    float _3389 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = ((cbMtdParam._m0[14u].y - _319) * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) + _319;
    vec4 _367 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _393 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _422 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_367.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3400 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    vec4 _443 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _449 = (_443.x * 2.0) + (-1.0);
    float _450 = (_443.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_449, _450), vec2(_449, _450));
    float _3411 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _467 = (_293 * (((cbMtdParam._m0[13u].z * _323) - _323) + _449)) + _323;
    float _468 = (_293 * (((cbMtdParam._m0[13u].z * _325) - _325) + _450)) + _325;
    float _469 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) - _331)) + _331;
    float _472 = fma(_469, _212 * NORMAL.x, fma(_468, _219 * TANGENT.x, (_205 * _197) * _467));
    float _475 = fma(_469, _212 * NORMAL.y, fma(_468, _219 * TANGENT.y, (_205 * _198) * _467));
    float _478 = fma(_469, _212 * NORMAL.z, fma(_468, _219 * TANGENT.z, (_205 * _199) * _467));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    float _483 = _482 * _472;
    float _484 = _482 * _475;
    float _485 = _482 * _478;
    float _3422 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _486 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3444 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3455 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _505 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _555 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _545);
    float _556 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _545);
    float _557 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _545);
    float _561 = inversesqrt(dot(vec3(_555, _556, _557), vec3(_555, _556, _557)));
    float _562 = _555 * _561;
    float _563 = _556 * _561;
    float _564 = _557 * _561;
    float _570 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _571 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _592 = fma(_485, cbSceneParam._m0[5u].z, fma(_484, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _483));
    float _595 = fma(_485, cbSceneParam._m0[6u].z, fma(_484, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _483));
    float _598 = fma(_485, cbSceneParam._m0[7u].z, fma(_484, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _483));
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = _611 + 9u;
    uint _613 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _619 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_613].x;
    float _620 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_613].y;
    float _621 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_613].z;
    float _3466 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _633 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _570, cbSceneParam._m0[86u].y * _571));
    float _636 = _633.x * TEXCOORD_3.w;
    float _637 = dot(vec3(_483, _484, _485), vec3(_562, _563, _564));
    float _640 = _637 * 2.0;
    float _644 = (_640 * _483) - _562;
    float _645 = (_640 * _484) - _563;
    float _646 = (_640 * _485) - _564;
    float _650 = abs(dot(vec3(_562, _563, _564), vec3(_483, _484, _485)));
    float _3499 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _652 = sqrt(_486);
    float _665 = exp2((_652 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_652 * 3.0));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1007;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _732 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _736 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _740 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _765 = _697 + _483;
        float _766 = _701 + _484;
        float _767 = _705 + _485;
        float _777 = fma(_767, cbModelParam._m0[26u].z, fma(_766, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765)) - _732;
        float _778 = fma(_767, cbModelParam._m0[27u].z, fma(_766, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765)) - _736;
        float _779 = fma(_767, cbModelParam._m0[28u].z, fma(_766, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765)) - _740;
        float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
        float _796 = ((_783 * _777) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_732 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_783 * _778) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_736 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_783 * _779) / cbModelParam._m0[34u].z) + ((((((_740 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        float _835 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_801.x + (-0.5));
        float _837 = _835 * (_801.y + (-0.5));
        float _838 = _835 * (_801.z + (-0.5));
        float _845 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_808.x + (-0.5));
        float _847 = _845 * (_808.y + (-0.5));
        float _848 = _845 * (_808.z + (-0.5));
        float _855 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_815.x + (-0.5));
        float _857 = _855 * (_815.y + (-0.5));
        float _858 = _855 * (_815.z + (-0.5));
        float _865 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_822.x + (-0.5));
        float _867 = _865 * (_822.y + (-0.5));
        float _868 = _865 * (_822.z + (-0.5));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = _836 * 0.5;
        float _873 = _846 * 0.5;
        float _874 = _856 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _889 = (dot(vec3(_483, _484, _485), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _899 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3547 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_901 + 1.0))) + _906) * _869;
        float _916 = _837 * 0.5;
        float _917 = _847 * 0.5;
        float _918 = _857 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_483, _484, _485), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3580 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_943 + 1.0))) + _948) * _870;
        float _958 = _838 * 0.5;
        float _959 = _848 * 0.5;
        float _960 = _858 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_483, _484, _485), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3613 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_985 + 1.0))) + _990) * _871;
        _1007 = _838;
        _1009 = _837;
        _1010 = _836;
        _1011 = _848;
        _1012 = _847;
        _1013 = _846;
        _1014 = _858;
        _1015 = _857;
        _1016 = _856;
        _1017 = _871;
        _1018 = _870;
        _1019 = _869;
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
    }
    else
    {
        _1007 = _1008;
        _1009 = _1008;
        _1010 = _1008;
        _1011 = _1008;
        _1012 = _1008;
        _1013 = _1008;
        _1014 = _1008;
        _1015 = _1008;
        _1016 = _1008;
        _1017 = _1008;
        _1018 = _1008;
        _1019 = _1008;
        _1020 = 0.0;
        _1021 = 0.0;
        _1022 = 0.0;
    }
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1048 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1052 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1056 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1079 = _697 + _483;
        float _1080 = _701 + _484;
        float _1081 = _705 + _485;
        float _1091 = fma(_1081, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079)) - _1048;
        float _1092 = fma(_1081, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079)) - _1052;
        float _1093 = fma(_1081, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079)) - _1056;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1048 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1052 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[35u].z) + ((((((_1056 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1147 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1114.x + (-0.5));
        float _1149 = _1147 * (_1114.y + (-0.5));
        float _1150 = _1147 * (_1114.z + (-0.5));
        float _1157 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1121.x + (-0.5));
        float _1159 = _1157 * (_1121.y + (-0.5));
        float _1160 = _1157 * (_1121.z + (-0.5));
        float _1167 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1128.x + (-0.5));
        float _1169 = _1167 * (_1128.y + (-0.5));
        float _1170 = _1167 * (_1128.z + (-0.5));
        float _1177 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1135.x + (-0.5));
        float _1179 = _1177 * (_1135.y + (-0.5));
        float _1180 = _1177 * (_1135.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_483, _484, _485), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3676 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1211 + 1.0))) + _1216) * _1181;
        float _1226 = _1149 * 0.5;
        float _1227 = _1159 * 0.5;
        float _1228 = _1169 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_483, _484, _485), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3709 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1253 + 1.0))) + _1258) * _1182;
        float _1268 = _1150 * 0.5;
        float _1269 = _1160 * 0.5;
        float _1270 = _1170 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_483, _484, _485), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3742 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1295 + 1.0))) + _1300) * _1183;
        _1317 = _1150;
        _1318 = _1149;
        _1319 = _1148;
        _1320 = _1160;
        _1321 = _1159;
        _1322 = _1158;
        _1323 = _1170;
        _1324 = _1169;
        _1325 = _1168;
        _1326 = _1183;
        _1327 = _1182;
        _1328 = _1181;
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1008;
        _1318 = _1008;
        _1319 = _1008;
        _1320 = _1008;
        _1321 = _1008;
        _1322 = _1008;
        _1323 = _1008;
        _1324 = _1008;
        _1325 = _1008;
        _1326 = _1008;
        _1327 = _1008;
        _1328 = _1008;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1364 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1367 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1370 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1341));
    float _1385 = _644 * 0.5;
    float _1386 = _645 * 0.5;
    float _1387 = _646 * 0.5;
    float _1388 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1391 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1394 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1428;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1401 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1007, _1011, _1014, _1017));
        float _1405 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1409 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1416 = dot(vec4(cbModelParam._m0[39u]), vec4(_1385, _1386, _1387, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1439;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1430 = dot(vec4(cbModelParam._m0[40u]), vec4(_1385, _1386, _1387, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1443 = (_1439 * cbModelParam._m0[1u].x) + (_1428 * (1.0 - cbModelParam._m0[1u].x));
    float _1453 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _486);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1453 : min(cbModelParam._m0[25u].z, _1453));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_646, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644));
        float _1515 = fma(_646, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644));
        float _1518 = fma(_646, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1546 = frontier_phi_14_12_ladder;
        }
        float _1770;
        if (_1515 > 0.0)
        {
            _1770 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1770 = frontier_phi_23_19_ladder;
        }
        float _2016;
        if (_1518 > 0.0)
        {
            _2016 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2016 = frontier_phi_35_30_ladder;
        }
        float _2018 = isnan(_1770) ? _1546 : (isnan(_1546) ? _1770 : min(_1546, _1770));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1512) + _1501;
        float _2024 = (_2019 * _1515) + _1505;
        float _2025 = (_2019 * _1518) + _1509;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2026;
        float _2030 = _2026 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 > _2030) || ((_2024 < _2028) || ((_2023 < _2028) || (_2023 > _2030))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1454);
            frontier_phi_13_35_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_13_35_ladder_2;
        _1536 = frontier_phi_13_35_ladder_1;
        _1538 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_644, _645, _646), _1454);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _486);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_646, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644));
        float _1612 = fma(_646, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644));
        float _1615 = fma(_646, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644));
        float _1775;
        if (_1609 > 0.0)
        {
            _1775 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1775 = frontier_phi_25_21_ladder;
        }
        float _2043;
        if (_1612 > 0.0)
        {
            _2043 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2043 = frontier_phi_37_32_ladder;
        }
        float _2248;
        if (_1615 > 0.0)
        {
            _2248 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2248 = frontier_phi_46_43_ladder;
        }
        float _2250 = isnan(_2043) ? _1775 : (isnan(_1775) ? _2043 : min(_1775, _2043));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1609) + _1598;
        float _2256 = (_2251 * _1612) + _1602;
        float _2257 = (_2251 * _1615) + _1606;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2257, cbModelParam._m0[17u].z, fma(_2256, cbModelParam._m0[17u].y, _2255 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2257, cbModelParam._m0[18u].z, fma(_2256, cbModelParam._m0[18u].y, _2255 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2257, cbModelParam._m0[19u].z, fma(_2256, cbModelParam._m0[19u].y, _2255 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_22_46_ladder = _2481.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2481.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2481.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_22_46_ladder_2;
        _1636 = frontier_phi_22_46_ladder_1;
        _1638 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_644, _645, _646), _1543);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1650 = ((((1.0 - _665) * ((_652 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_665 * _652)) * _636;
    float _1651 = _1650 * ((cbModelParam._m0[1u].w * (_1634 - _1534)) + _1534);
    float _1652 = _1650 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1653 = _1650 * ((cbModelParam._m0[1u].w * (_1638 - _1538)) + _1538);
    float _1656 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    vec4 _1670 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_570, _571));
    float _1672 = _1670.w;
    float _1684 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1672);
    float _1685 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1672);
    float _1686 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1672);
    uvec4 _1690 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1692 = _1690.x * 14u;
    uint _1693 = _1692 + 13u;
    float _1700 = _636 + (-1.0);
    float _1705 = (cbLight._m0[_1693].x * _1700) + 1.0;
    float _1706 = (cbLight._m0[_1693].y * _1700) + 1.0;
    float _1707 = (cbLight._m0[_1693].z * _1700) + 1.0;
    float _1708 = (cbLight._m0[_1693].w * _1700) + 1.0;
    uint _1709 = _1692 + 5u;
    float _1715 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    uint _1719 = _1692 + 4u;
    float _1729 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1733 = _1692 | 1u;
    float _1744 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_483, _484, _485));
    float _1747 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_483, _484, _485));
    float _3878 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _3889 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1752 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1754 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1761 = ((cbLight._m0[_1709].x * _1715) * _1754) + (((cbLight._m0[_1719].x * _1684) * _1729) * _1752);
    float _1762 = ((_1715 * cbLight._m0[_1709].y) * _1754) + (((cbLight._m0[_1719].y * _1685) * _1729) * _1752);
    float _1763 = ((_1715 * cbLight._m0[_1709].z) * _1754) + (((cbLight._m0[_1719].z * _1686) * _1729) * _1752);
    uvec4 _1767 = floatBitsToUint(cbLight._m0[_1692 + 12u]);
    bool _1769 = _1767.x == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1769)
    {
        _1780 = _1761;
        _1782 = _1762;
        _1784 = _1763;
    }
    else
    {
        uint _1788 = _1692 + 6u;
        float _1804 = (dot(vec3(cbLight._m0[_1692 + 2u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _1805 = _1804 * _1804;
        float _3900 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1807 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _1780 = (((cbLight._m0[_1788].x * 0.3183098733425140380859375) * _1806) * _1807) + _1761;
        _1782 = (((cbLight._m0[_1788].y * 0.3183098733425140380859375) * _1806) * _1807) + _1762;
        _1784 = (((cbLight._m0[_1788].z * 0.3183098733425140380859375) * _1806) * _1807) + _1763;
    }
    bool _1787 = _1767.y == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1787)
    {
        _1825 = _1780;
        _1827 = _1782;
        _1829 = _1784;
    }
    else
    {
        uint _1987 = _1692 + 7u;
        float _2003 = (dot(vec3(cbLight._m0[_1692 + 3u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _3916 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2006 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _1825 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1780;
        _1827 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1782;
        _1829 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1784;
    }
    uint _1832 = _1692 + 8u;
    float _1845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1692].w)) * _486) * 0.949999988079071044921875);
    float _1846 = _1845 * _1845;
    float _1847 = cbLight._m0[_1692].x + _562;
    float _1848 = cbLight._m0[_1692].y + _563;
    float _1849 = cbLight._m0[_1692].z + _564;
    float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
    float _1854 = _1853 * _1847;
    float _1855 = _1853 * _1848;
    float _1856 = _1853 * _1849;
    float _1857 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1692].xyz));
    float _3932 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _1861 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1862 = dot(vec3(_483, _484, _485), vec3(_1854, _1855, _1856));
    float _3954 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1866 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_1854, _1855, _1856));
    float _3965 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = _1846 * _1846;
    float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
    float _1885 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1886 = 1.0 - _1846;
    float _1897 = (0.5 / (((_1861 * ((_1860 * _1886) + _1846)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _1886) + _1846) * _1860))) * _1860;
    float _3976 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
    uint _1913 = _1692 + 9u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _486) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1733].x + _562;
    float _1927 = cbLight._m0[_1733].y + _563;
    float _1928 = cbLight._m0[_1733].z + _564;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1733].xyz));
    float _3987 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1940 = dot(vec3(_483, _484, _485), vec3(_1933, _1934, _1935));
    float _3998 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1933, _1934, _1935));
    float _4009 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1925 * _1925;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1961 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1962 = 1.0 - _1925;
    float _1972 = (0.5 / (((_1861 * ((_1939 * _1962) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _1962) + _1925) * _1939))) * _1939;
    float _4020 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    float _1984 = (((_1961 * cbLight._m0[_1913].x) * _1974) * _1715) + ((((cbLight._m0[_1832].x * _1684) * _1885) * _1899) * _1729);
    float _1985 = (((_1961 * cbLight._m0[_1913].y) * _1974) * _1715) + ((((cbLight._m0[_1832].y * _1685) * _1885) * _1899) * _1729);
    float _1986 = (((_1961 * cbLight._m0[_1913].z) * _1974) * _1715) + ((((cbLight._m0[_1832].z * _1686) * _1885) * _1899) * _1729);
    float _2048;
    float _2050;
    float _2052;
    if (_1769)
    {
        _2048 = _1984;
        _2050 = _1985;
        _2052 = _1986;
    }
    else
    {
        uint _2054 = _1692 + 2u;
        uint _2058 = _1692 + 10u;
        float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _486) * 0.949999988079071044921875);
        float _2073 = _2072 * _2072;
        float _2074 = cbLight._m0[_2054].x + _562;
        float _2075 = cbLight._m0[_2054].y + _563;
        float _2076 = cbLight._m0[_2054].z + _564;
        float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
        float _2081 = _2080 * _2074;
        float _2082 = _2080 * _2075;
        float _2083 = _2080 * _2076;
        float _2084 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2054].xyz));
        float _4031 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2088 = dot(vec3(_483, _484, _485), vec3(_2081, _2082, _2083));
        float _4042 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2081, _2082, _2083));
        float _4053 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2096 = _2073 * _2073;
        float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
        float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2110 = 1.0 - _2073;
        float _2120 = (0.5 / (((_1861 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _2110) + _2073) * _2087))) * _2087;
        float _4064 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _2048 = (((_2109 * cbLight._m0[_2058].x) * _2122) * _2123) + _1984;
        _2050 = (((_2109 * cbLight._m0[_2058].y) * _2122) * _2123) + _1985;
        _2052 = (((_2109 * cbLight._m0[_2058].z) * _2122) * _2123) + _1986;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1787)
    {
        _2158 = _2048;
        _2160 = _2050;
        _2162 = _2052;
    }
    else
    {
        uint _2169 = _1692 + 3u;
        uint _2173 = _1692 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _486) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _562;
        float _2190 = cbLight._m0[_2169].y + _563;
        float _2191 = cbLight._m0[_2169].z + _564;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2169].xyz));
        float _4080 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2203 = dot(vec3(_483, _484, _485), vec3(_2196, _2197, _2198));
        float _4091 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4102 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = 1.0 - _2188;
        float _2235 = (0.5 / (((_1861 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _2225) + _2188) * _2202))) * _2202;
        float _4113 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _2158 = (((_2224 * cbLight._m0[_2173].x) * _2237) * _2238) + _2048;
        _2160 = (((_2224 * cbLight._m0[_2173].y) * _2237) * _2238) + _2050;
        _2162 = (((_2224 * cbLight._m0[_2173].z) * _2237) * _2238) + _2052;
    }
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_1690.y == 0u)
    {
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2313;
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2313;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2313;
        uvec4 _2328 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2329 = _2328.x;
        uint _2340 = uint((float(_2328.y) * floor(float(uint(cbSceneParam._m0[85u].y * _571) / _2329))) + floor(float(uint(cbSceneParam._m0[85u].x * _570) / _2329)));
        float _2350 = (log2(_2316 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2351 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        uint _2354 = uint(isnan(14.0) ? _2351 : (isnan(_2351) ? 14.0 : min(_2351, 14.0)));
        uvec4 _2359 = texelFetch(g_lightClusterGridBuffer, int(((_2354 << 2u) + (_2340 << 6u)) >> 2u));
        uint _2360 = _2359.x;
        uint _2361 = _2328.z;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((((1u << ((_2361 >> 4u) & 15u)) + 4294967295u) & _2360) == 0u) || ((_2361 & 240u) == 0u))
        {
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
        }
        else
        {
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            uint _2637 = 0u;
            uint _2646;
            bool _2647;
            for (;;)
            {
                _2646 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                _2647 = _2646 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2647)
                {
                    frontier_phi_61_pred = _2631;
                    frontier_phi_61_pred_1 = _2636;
                    frontier_phi_61_pred_2 = _2635;
                    frontier_phi_61_pred_3 = _2634;
                    frontier_phi_61_pred_4 = _2633;
                    frontier_phi_61_pred_5 = _2632;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2646;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2637 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _2314;
                        float _2822 = _2781.y - _2315;
                        float _2823 = _2781.z - _2316;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_592, _595, _598), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4139 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _2314;
                        float _2857 = (-0.0) - _2315;
                        float _2858 = (-0.0) - _2316;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2873 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _652;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_592, _595, _598), vec3(_2863, _2864, _2865));
                        float _4155 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2898 = dot(vec3(_592, _595, _598), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4166 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2841 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2831) + _2907;
                        float _4177 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4188 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) / ((_2905 * _2905) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2690 = (_2852 * _2800.x) + _2758;
                        _2691 = (_2852 * _2800.y) + _2759;
                        _2692 = (_2852 * _2800.z) + _2760;
                        _2687 = (_2933 * _2817.x) + _2755;
                        _2688 = (_2933 * _2817.y) + _2756;
                        _2689 = (_2933 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                _2487 = frontier_phi_61_pred;
                _2497 = frontier_phi_61_pred_1;
                _2495 = frontier_phi_61_pred_2;
                _2493 = frontier_phi_61_pred_3;
                _2491 = frontier_phi_61_pred_4;
                _2489 = frontier_phi_61_pred_5;
                uint _2638 = _2637 + 1u;
                if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2631 = _2487;
                    _2632 = _2489;
                    _2633 = _2491;
                    _2634 = _2493;
                    _2635 = _2495;
                    _2636 = _2497;
                    _2637 = _2638;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
        }
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.z;
        uint _2503 = (_2501 >> 8u) & 15u;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((4294967295u << _2503) & _2360) == 0u)
        {
            _2599 = _2486;
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
        }
        else
        {
            float _2624 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
            float _2625 = _2624 * _2314;
            float _2626 = _2624 * _2315;
            float _2627 = _2624 * _2316;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2503 < ((_2501 >> 12u) & 15u))
            {
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2738 = _2486;
                float _2739 = _2488;
                float _2740 = _2490;
                float _2741 = _2492;
                float _2742 = _2494;
                float _2743 = _2496;
                uint _2744 = _2503;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2754)
                    {
                        frontier_phi_67_pred = _2741;
                        frontier_phi_67_pred_1 = _2742;
                        frontier_phi_67_pred_2 = _2743;
                        frontier_phi_67_pred_3 = _2740;
                        frontier_phi_67_pred_4 = _2739;
                        frontier_phi_67_pred_5 = _2738;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        uint _2957 = _2753;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3026;
                        vec4 _3042;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2968 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3013 = (_2968 * 40u) + 16u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2968 * 40u) + 20u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2968 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2968 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2316, _3077.z, fma(_2315, _3077.y, _3077.x * _2314)) + _3077.w;
                            _3090 = !((fma(_2316, _3058.z, fma(_2315, _3058.y, _3058.x * _2314)) + _3058.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2983.x - _2314;
                                float _3118 = _2983.y - _2315;
                                float _3119 = _2983.z - _2316;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2984 * _2984));
                                float _4199 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3135 = sqrt(_3120) * _2999.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_592, _595, _598))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2316, _3026.z, fma(_2315, _3026.y, _3026.x * _2314)) + _3026.w) / _3089;
                                float _3149 = (fma(_2316, _3042.z, fma(_2315, _3042.y, _3042.x * _2314)) + _3042.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4215 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _652;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2625;
                                float _3179 = _3125 - _2626;
                                float _3180 = _3126 - _2627;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_592, _595, _598), vec3((-0.0) - _2625, (-0.0) - _2626, (-0.0) - _2627));
                                float _4226 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3192 = dot(vec3(_592, _595, _598), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4237 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_592, _595, _598), vec3(_3124, _3125, _3126))) + _3201;
                                float _4248 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4259 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3229 * _3011.x;
                                frontier_phi_73_pred_1 = _3229 * _3011.y;
                                frontier_phi_73_pred_2 = _3155 * _2999.z;
                                frontier_phi_73_pred_3 = _3155 * _2999.y;
                                frontier_phi_73_pred_4 = _3155 * _2999.x;
                                frontier_phi_73_pred_5 = _3229 * _3011.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3233 = frontier_phi_73_pred;
                            _3234 = frontier_phi_73_pred_1;
                            _3238 = frontier_phi_73_pred_2;
                            _3237 = frontier_phi_73_pred_3;
                            _3236 = frontier_phi_73_pred_4;
                            _3235 = frontier_phi_73_pred_5;
                            _2941 = _3236 + _2954;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2938 = _3233 + _2951;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2941;
                        frontier_phi_67_pred_1 = _2942;
                        frontier_phi_67_pred_2 = _2943;
                        frontier_phi_67_pred_3 = _2940;
                        frontier_phi_67_pred_4 = _2939;
                        frontier_phi_67_pred_5 = _2938;
                    }
                    _2606 = frontier_phi_67_pred;
                    _2608 = frontier_phi_67_pred_1;
                    _2610 = frontier_phi_67_pred_2;
                    _2604 = frontier_phi_67_pred_3;
                    _2602 = frontier_phi_67_pred_4;
                    _2600 = frontier_phi_67_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2600;
                        _2739 = _2602;
                        _2740 = _2604;
                        _2741 = _2606;
                        _2742 = _2608;
                        _2743 = _2610;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            else
            {
                frontier_phi_55_56_ladder = _2494;
                frontier_phi_55_56_ladder_1 = _2496;
                frontier_phi_55_56_ladder_2 = _2492;
                frontier_phi_55_56_ladder_3 = _2490;
                frontier_phi_55_56_ladder_4 = _2488;
                frontier_phi_55_56_ladder_5 = _2486;
            }
            _2599 = frontier_phi_55_56_ladder_5;
            _2601 = frontier_phi_55_56_ladder_4;
            _2603 = frontier_phi_55_56_ladder_3;
            _2605 = frontier_phi_55_56_ladder_2;
            _2607 = frontier_phi_55_56_ladder;
            _2609 = frontier_phi_55_56_ladder_1;
        }
        float _2614 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
        _2373 = (_2614 * _2605) + _1825;
        _2375 = (_2614 * _2607) + _1827;
        _2377 = (_2614 * _2609) + _1829;
        _2379 = ((_2599 * 0.039999999105930328369140625) * _2614) + _2158;
        _2381 = ((_2601 * 0.039999999105930328369140625) * _2614) + _2160;
        _2383 = ((_2603 * 0.039999999105930328369140625) * _2614) + _2162;
    }
    else
    {
        _2373 = _1825;
        _2375 = _1827;
        _2377 = _1829;
        _2379 = _2158;
        _2381 = _2160;
        _2383 = _2162;
    }
    uint _2389 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _4275 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4286 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4297 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2420 = (((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2373 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _636))) + ((_2379 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + (((_423 * cbMtdParam._m0[11u].x) * (_408.x + _393.x)) * cbInstanceData._m0[_2389].x);
    float _2422 = ((((_423 * cbMtdParam._m0[11u].y) * (_408.y + _393.y)) * cbInstanceData._m0[_2389].y) + ((_2381 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2375 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _636)));
    float _2424 = ((((_423 * cbMtdParam._m0[11u].z) * (_408.z + _393.z)) * cbInstanceData._m0[_2389].z) + ((_2383 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2377 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _636)));
    uint _2428 = _611 + 6u;
    float _2436 = _570 / cbSceneParam._m0[86u].x;
    float _2437 = _571 / cbSceneParam._m0[86u].y;
    vec4 _2451 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, (log2((isnan(cbSceneParam._m0[77u].w) ? _505 : (isnan(_505) ? cbSceneParam._m0[77u].w : min(_505, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2453 = _2451.x;
    float _2454 = _2451.y;
    float _2455 = _2451.z;
    float _2456 = _2451.w;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_505 > cbSceneParam._m0[78u].w)
    {
        float _2511 = isnan(_505) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _505 : min(cbSceneParam._m0[80u].w, _505));
        float _2512 = _2511 / _505;
        float _2523 = _2512 * _555;
        float _2524 = _556 * _2512;
        float _2525 = (-0.0) - _2524;
        float _2527 = _2512 * _557;
        float _2529 = (cbSceneParam._m0[77u].w * _2525) / _2511;
        float _2530 = _2529 + cbSceneParam._m0[79u].w;
        float _2531 = cbSceneParam._m0[79u].w - _2524;
        float _2537 = sqrt(((_2523 * _2523) + (_2524 * _2524)) + (_2527 * _2527));
        float _2540 = (1.0 - (cbSceneParam._m0[77u].w / _2511)) * _2537;
        float _2545 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2547 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2525 - _2529) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2530 > 0.0) ? exp2(_2545 * _2530) : (2.0 - exp2(_2547 * _2530))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2540;
        }
        else
        {
            float _2660 = 1.0 / cbSceneParam._m0[80u].x;
            float _2661 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : max(_2530, _2531));
            float _2662 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : min(_2530, _2531));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            _2700 = ((abs(_2537 / _2525) * cbSceneParam._m0[80u].y) * ((((_2671 - _2672) * 2.0) - ((exp2(_2545 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)))) - exp2(_2545 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))))) * _2660)) - ((exp2(_2547 * _2671) - exp2(_2547 * _2672)) * _2660))) + (_2540 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2456);
        _2549 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2453;
        _2551 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2454;
        _2553 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2455;
        _2555 = _2711 * _2456;
    }
    else
    {
        _2549 = _2453;
        _2551 = _2454;
        _2553 = _2455;
        _2555 = _2456;
    }
    float _2567 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2568 = _2567 == 3.0;
    float _2569 = log2(_2555);
    float _2576 = exp2(_2569 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0)));
    float _2577 = exp2(_2569 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0)));
    float _2578 = exp2(_2569 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0)));
    float _2587 = (_2567 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2587 * (_2568 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.y = _2587 * (_2568 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.z = _2587 * (_2568 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.w = cbInstanceData._m0[_2428].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2428].w;
}


