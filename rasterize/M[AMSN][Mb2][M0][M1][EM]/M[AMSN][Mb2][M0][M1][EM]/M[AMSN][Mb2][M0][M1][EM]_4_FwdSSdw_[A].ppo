#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1040;
float _3453;
float _3454;
float _3455;
float _3456;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3465 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _350 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3476 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    vec4 _378 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _382 = _378.z;
    float _385 = (_378.x * 2.0) + (-1.0);
    float _386 = (_378.y * 2.0) + (-1.0);
    float _387 = dot(vec2(_385, _386), vec2(_385, _386));
    float _3487 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _392 = sqrt(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))));
    float _395 = (_306 * (_350.z - _382)) + _382;
    vec4 _422 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _437 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _451 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_335.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3498 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _459 = (_306 * (_358 - _385)) + _385;
    float _460 = (_306 * (_360 - _386)) + _386;
    float _461 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) - _392)) + _392;
    float _464 = fma(_461, _214 * NORMAL.x, fma(_460, _221 * TANGENT.x, (_207 * _199) * _459));
    float _467 = fma(_461, _214 * NORMAL.y, fma(_460, _221 * TANGENT.y, (_207 * _200) * _459));
    float _470 = fma(_461, _214 * NORMAL.z, fma(_460, _221 * TANGENT.z, (_207 * _201) * _459));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3509 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _478 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3531 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3542 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    vec4 _562 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _564 = _562.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _720 = sqrt(((_548 * _548) + (_549 * _549)) + (_550 * _550));
        float _726 = (cbMatDynParam._m0[5u].x * _720) + cbMatDynParam._m0[5u].y;
        float _3553 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _731 = (cbMatDynParam._m0[5u].z * _720) + cbMatDynParam._m0[5u].w;
        float _3564 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) - _727)) + _727) < ((_564 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _599 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _602 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _615 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3575 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    vec4 _637 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _640 = _637.x * TEXCOORD_3.w;
    float _641 = dot(vec3(_475, _476, _477), vec3(_555, _556, _557));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _475) - _555;
    float _649 = (_644 * _476) - _556;
    float _650 = (_644 * _477) - _557;
    float _654 = abs(dot(vec3(_555, _556, _557), vec3(_475, _476, _477)));
    float _3608 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_478);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_709, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701));
        float _768 = fma(_709, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701));
        float _772 = fma(_709, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701));
        float _797 = _701 + _475;
        float _798 = _705 + _476;
        float _799 = _709 + _477;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _764;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _768;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _772;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_475, _476, _477), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3656 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_475, _476, _477), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3689 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_475, _476, _477), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3722 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1041 = _869;
        _1042 = _868;
        _1043 = _880;
        _1044 = _879;
        _1045 = _878;
        _1046 = _890;
        _1047 = _889;
        _1048 = _888;
        _1049 = _903;
        _1050 = _902;
        _1051 = _901;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _1040;
        _1041 = _1040;
        _1042 = _1040;
        _1043 = _1040;
        _1044 = _1040;
        _1045 = _1040;
        _1046 = _1040;
        _1047 = _1040;
        _1048 = _1040;
        _1049 = _1040;
        _1050 = _1040;
        _1051 = _1040;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_709, cbModelParam._m0[30u].z, fma(_705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _701));
        float _1087 = fma(_709, cbModelParam._m0[31u].z, fma(_705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _701));
        float _1091 = fma(_709, cbModelParam._m0[32u].z, fma(_705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _701));
        float _1114 = _701 + _475;
        float _1115 = _705 + _476;
        float _1116 = _709 + _477;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_475, _476, _477), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3785 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_475, _476, _477), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3818 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_475, _476, _477), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3851 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1040;
        _1353 = _1040;
        _1354 = _1040;
        _1355 = _1040;
        _1356 = _1040;
        _1357 = _1040;
        _1358 = _1040;
        _1359 = _1040;
        _1360 = _1040;
        _1361 = _1040;
        _1362 = _1040;
        _1363 = _1040;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1052)) + _1052;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1053)) + _1053;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _648 * 0.5;
    float _1421 = _649 * 0.5;
    float _1422 = _650 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1039, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_709, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_709, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_709, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1550 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1553 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1581 = frontier_phi_17_15_ladder;
        }
        float _1805;
        if (_1550 > 0.0)
        {
            _1805 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1805 = frontier_phi_26_22_ladder;
        }
        float _2051;
        if (_1553 > 0.0)
        {
            _2051 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2051 = frontier_phi_38_33_ladder;
        }
        float _2053 = isnan(_1805) ? _1581 : (isnan(_1581) ? _1805 : min(_1581, _1805));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1547) + _1536;
        float _2059 = (_2054 * _1550) + _1540;
        float _2060 = (_2054 * _1553) + _1544;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_16_38_ladder = _2184.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2184.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2184.x * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_16_38_ladder_2;
        _1571 = frontier_phi_16_38_ladder_1;
        _1573 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1489);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_709, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_709, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_709, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1647 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1650 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1810;
        if (_1644 > 0.0)
        {
            _1810 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1810 = frontier_phi_28_24_ladder;
        }
        float _2078;
        if (_1647 > 0.0)
        {
            _2078 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2078 = frontier_phi_40_35_ladder;
        }
        float _2283;
        if (_1650 > 0.0)
        {
            _2283 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2283 = frontier_phi_49_46_ladder;
        }
        float _2285 = isnan(_2078) ? _1810 : (isnan(_1810) ? _2078 : min(_1810, _2078));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1644) + _1633;
        float _2291 = (_2286 * _1647) + _1637;
        float _2292 = (_2286 * _1650) + _1641;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_25_49_ladder = _2516.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2516.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2516.x * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_25_49_ladder_2;
        _1671 = frontier_phi_25_49_ladder_1;
        _1673 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1578);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1685 = ((((1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_669 * _656)) * _640;
    float _1686 = _1685 * ((cbModelParam._m0[1u].w * (_1669 - _1569)) + _1569);
    float _1687 = _1685 * ((cbModelParam._m0[1u].w * (_1671 - _1571)) + _1571);
    float _1688 = _1685 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    vec4 _1705 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_576, _577));
    float _1707 = _1705.w;
    float _1719 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1707);
    float _1720 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1707);
    float _1721 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1707);
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _640 + (-1.0);
    float _1740 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1741 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1744 = _1727 + 5u;
    float _1750 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1754 = _1727 + 4u;
    float _1763 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1767 = _1727 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_475, _476, _477));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_475, _476, _477));
    float _3987 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _3998 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1744].x * _1750) * _1788) + (((cbLight._m0[_1754].x * _1719) * _1763) * _1786);
    float _1796 = ((_1750 * cbLight._m0[_1744].y) * _1788) + (((cbLight._m0[_1754].y * _1720) * _1763) * _1786);
    float _1797 = ((_1750 * cbLight._m0[_1744].z) * _1788) + (((cbLight._m0[_1754].z * _1721) * _1763) * _1786);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1795;
        _1817 = _1796;
        _1819 = _1797;
    }
    else
    {
        uint _1823 = _1727 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _4009 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1842 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1795;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2022 = _1727 + 7u;
        float _2038 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4025 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2041 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1860 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1815;
        _1862 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1817;
        _1864 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1819;
    }
    uint _1867 = _1727 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _478) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1727].x + _555;
    float _1883 = cbLight._m0[_1727].y + _556;
    float _1884 = cbLight._m0[_1727].z + _557;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1727].xyz));
    float _4041 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1896 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1897 = dot(vec3(_475, _476, _477), vec3(_1889, _1890, _1891));
    float _4063 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1889, _1890, _1891));
    float _4074 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1921 = 1.0 - _1881;
    float _1932 = (0.5 / (((_1896 * ((_1895 * _1921) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1921) + _1881) * _1895))) * _1895;
    float _4085 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1934 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1948 = _1727 + 9u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _478) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1767].x + _555;
    float _1962 = cbLight._m0[_1767].y + _556;
    float _1963 = cbLight._m0[_1767].z + _557;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1767].xyz));
    float _4096 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1975 = dot(vec3(_475, _476, _477), vec3(_1968, _1969, _1970));
    float _4107 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1968, _1969, _1970));
    float _4118 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1960 * _1960;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = 1.0 - _1960;
    float _2007 = (0.5 / (((_1896 * ((_1974 * _1997) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1997) + _1960) * _1974))) * _1974;
    float _4129 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    float _2019 = (((_1996 * cbLight._m0[_1948].x) * _2009) * _1750) + ((((cbLight._m0[_1867].x * _1719) * _1920) * _1934) * _1763);
    float _2020 = (((_1996 * cbLight._m0[_1948].y) * _2009) * _1750) + ((((cbLight._m0[_1867].y * _1720) * _1920) * _1934) * _1763);
    float _2021 = (((_1996 * cbLight._m0[_1948].z) * _2009) * _1750) + ((((cbLight._m0[_1867].z * _1721) * _1920) * _1934) * _1763);
    float _2083;
    float _2085;
    float _2087;
    if (_1804)
    {
        _2083 = _2019;
        _2085 = _2020;
        _2087 = _2021;
    }
    else
    {
        uint _2089 = _1727 + 2u;
        uint _2093 = _1727 + 10u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _478) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _555;
        float _2110 = cbLight._m0[_2089].y + _556;
        float _2111 = cbLight._m0[_2089].z + _557;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2089].xyz));
        float _4140 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2123 = dot(vec3(_475, _476, _477), vec3(_2116, _2117, _2118));
        float _4151 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4162 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2145 = 1.0 - _2108;
        float _2155 = (0.5 / (((_1896 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2145) + _2108) * _2122))) * _2122;
        float _4173 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2083 = (((_2144 * cbLight._m0[_2093].x) * _2157) * _2158) + _2019;
        _2085 = (((_2144 * cbLight._m0[_2093].y) * _2157) * _2158) + _2020;
        _2087 = (((_2144 * cbLight._m0[_2093].z) * _2157) * _2158) + _2021;
    }
    float _2193;
    float _2195;
    float _2197;
    if (_1822)
    {
        _2193 = _2083;
        _2195 = _2085;
        _2197 = _2087;
    }
    else
    {
        uint _2204 = _1727 + 3u;
        uint _2208 = _1727 + 11u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _478) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _555;
        float _2225 = cbLight._m0[_2204].y + _556;
        float _2226 = cbLight._m0[_2204].z + _557;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2204].xyz));
        float _4189 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2238 = dot(vec3(_475, _476, _477), vec3(_2231, _2232, _2233));
        float _4200 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4211 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2260 = 1.0 - _2223;
        float _2270 = (0.5 / (((_1896 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2260) + _2223) * _2237))) * _2237;
        float _4222 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2193 = (((_2259 * cbLight._m0[_2208].x) * _2272) * _2273) + _2083;
        _2195 = (((_2259 * cbLight._m0[_2208].y) * _2272) * _2273) + _2085;
        _2197 = (((_2259 * cbLight._m0[_2208].z) * _2272) * _2273) + _2087;
    }
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_1725.y == 0u)
    {
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2348;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2348;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2348;
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.x;
        uint _2375 = uint((float(_2363.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _2364))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _2364)));
        float _2385 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2386 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        uint _2389 = uint(isnan(14.0) ? _2386 : (isnan(_2386) ? 14.0 : min(_2386, 14.0)));
        uvec4 _2394 = texelFetch(g_lightClusterGridBuffer, int(((_2389 << 2u) + (_2375 << 6u)) >> 2u));
        uint _2395 = _2394.x;
        uint _2396 = _2363.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2396 >> 4u) & 15u)) + 4294967295u) & _2395) == 0u) || ((_2396 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2690)
                {
                    frontier_phi_66_pred = _2674;
                    frontier_phi_66_pred_1 = _2679;
                    frontier_phi_66_pred_2 = _2678;
                    frontier_phi_66_pred_3 = _2677;
                    frontier_phi_66_pred_4 = _2676;
                    frontier_phi_66_pred_5 = _2675;
                }
                else
                {
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    uint _2825;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2689;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2829 = uint(findLSB(_2825)) + (_2680 << 5u);
                        uint _2826 = (_2825 + 4294967295u) & _2825;
                        uint _2831 = _2829 * 48u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2851 = (_2829 * 48u) + 4u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2870 = (_2829 * 48u) + 8u;
                        vec3 _2881 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x));
                        float _2885 = _2845.x - _2349;
                        float _2886 = _2845.y - _2350;
                        float _2887 = _2845.z - _2351;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_596, _599, _602), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2845.w);
                        float _4248 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2902 = sqrt(_2888) * _2864.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2895) + _2906;
                        float _2912 = _2902 * _2902;
                        float _2916 = ((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2901) / ((_2912 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _2349;
                        float _2921 = (-0.0) - _2350;
                        float _2922 = (-0.0) - _2351;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2937 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                        float _2938 = 1.0 - _656;
                        float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                        float _2946 = _2945 * _2945;
                        float _2947 = _2946 * _2946;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2958 = dot(vec3(_596, _599, _602), vec3(_2927, _2928, _2929));
                        float _4264 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2962 = dot(vec3(_596, _599, _602), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                        float _4275 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                        float _2970 = _2905 * _2946;
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2895) + _2971;
                        float _4286 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _2976 = 1.0 - _2946;
                        float _2986 = (0.5 / (((_2975 * ((_2961 * _2976) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _2976) + _2946) * _2961))) * _2975;
                        float _4297 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2997 = (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_2969 * _2969) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2749 = (_2916 * _2864.x) + _2822;
                        _2750 = (_2916 * _2864.y) + _2823;
                        _2751 = (_2916 * _2864.z) + _2824;
                        _2746 = (_2997 * _2881.x) + _2819;
                        _2747 = (_2997 * _2881.y) + _2820;
                        _2748 = (_2997 * _2881.z) + _2821;
                        if (_2826 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2826;
                        }
                    }
                    frontier_phi_66_pred = _2746;
                    frontier_phi_66_pred_1 = _2751;
                    frontier_phi_66_pred_2 = _2750;
                    frontier_phi_66_pred_3 = _2749;
                    frontier_phi_66_pred_4 = _2748;
                    frontier_phi_66_pred_5 = _2747;
                }
                _2522 = frontier_phi_66_pred;
                _2532 = frontier_phi_66_pred_1;
                _2530 = frontier_phi_66_pred_2;
                _2528 = frontier_phi_66_pred_3;
                _2526 = frontier_phi_66_pred_4;
                _2524 = frontier_phi_66_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2522;
                    _2675 = _2524;
                    _2676 = _2526;
                    _2677 = _2528;
                    _2678 = _2530;
                    _2679 = _2532;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2538) & _2395) == 0u)
        {
            _2642 = _2521;
            _2644 = _2523;
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
            _2652 = _2531;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _2668 = _2667 * _2349;
            float _2669 = _2667 * _2350;
            float _2670 = _2667 * _2351;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2802 = _2521;
                float _2803 = _2523;
                float _2804 = _2525;
                float _2805 = _2527;
                float _2806 = _2529;
                float _2807 = _2531;
                uint _2808 = _2538;
                uint _2817;
                bool _2818;
                for (;;)
                {
                    _2817 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                    _2818 = _2817 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2818)
                    {
                        frontier_phi_77_pred = _2807;
                        frontier_phi_77_pred_1 = _2806;
                        frontier_phi_77_pred_2 = _2805;
                        frontier_phi_77_pred_3 = _2804;
                        frontier_phi_77_pred_4 = _2803;
                        frontier_phi_77_pred_5 = _2802;
                    }
                    else
                    {
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        uint _3030 = _2817;
                        uint _3031;
                        vec4 _3056;
                        float _3057;
                        vec4 _3072;
                        vec3 _3084;
                        vec4 _3099;
                        vec4 _3115;
                        float _3162;
                        bool _3163;
                        for (;;)
                        {
                            uint _3041 = ((_2808 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3030));
                            _3031 = (_3030 + 4294967295u) & _3030;
                            uint _3043 = _3041 * 40u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3057 = _3056.w;
                            uint _3059 = (_3041 * 40u) + 4u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_3041 * 40u) + 8u;
                            _3084 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x));
                            uint _3086 = (_3041 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3102 = (_3041 * 40u) + 20u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3118 = (_3041 * 40u) + 24u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3137 = (_3041 * 40u) + 28u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3162 = fma(_2351, _3150.z, fma(_2350, _3150.y, _3150.x * _2349)) + _3150.w;
                            _3163 = !((fma(_2351, _3131.z, fma(_2350, _3131.y, _3131.x * _2349)) + _3131.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3163)
                            {
                                float _3190 = _3056.x - _2349;
                                float _3191 = _3056.y - _2350;
                                float _3192 = _3056.z - _2351;
                                float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                                float _3196 = inversesqrt(_3193);
                                float _3197 = _3196 * _3190;
                                float _3198 = _3196 * _3191;
                                float _3199 = _3196 * _3192;
                                float _3203 = 1.0 - (_3193 / (_3057 * _3057));
                                float _4308 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3208 = sqrt(_3193) * _3072.w;
                                float _3210 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                                float _3211 = _3210 * _3210;
                                float _3214 = ((1.0 - _3211) * dot(vec3(_3197, _3198, _3199), vec3(_596, _599, _602))) + _3211;
                                float _3217 = _3208 * _3208;
                                float _3221 = (fma(_2351, _3099.z, fma(_2350, _3099.y, _3099.x * _2349)) + _3099.w) / _3162;
                                float _3222 = (fma(_2351, _3115.z, fma(_2350, _3115.y, _3115.x * _2349)) + _3115.w) / _3162;
                                float _3226 = 1.0 - dot(vec2(_3221, _3222), vec2(_3221, _3222));
                                float _4324 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3228 = _3227 * (((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3204) / ((_3217 * 0.699999988079071044921875) + 1.0));
                                float _3240 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                                float _3241 = 1.0 - _656;
                                float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                                float _3249 = _3248 * _3248;
                                float _3250 = _3249 * _3249;
                                float _3251 = _3197 - _2668;
                                float _3252 = _3198 - _2669;
                                float _3253 = _3199 - _2670;
                                float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                                float _3261 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4335 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3265 = dot(vec3(_596, _599, _602), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                                float _4346 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                                float _3273 = _3210 * _3249;
                                float _3274 = _3273 * _3273;
                                float _3280 = ((1.0 - _3274) * dot(vec3(_596, _599, _602), vec3(_3197, _3198, _3199))) + _3274;
                                float _4357 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3282 = 1.0 - _3249;
                                float _3292 = (0.5 / (((_3281 * ((_3264 * _3282) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3249) * _3264))) * _3281;
                                float _4368 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3302 = (_3227 * _3204) * (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3272 * _3272) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3228 * _3072.y;
                                frontier_phi_83_pred_1 = _3228 * _3072.x;
                                frontier_phi_83_pred_2 = _3302 * _3084.z;
                                frontier_phi_83_pred_3 = _3302 * _3084.y;
                                frontier_phi_83_pred_4 = _3302 * _3084.x;
                                frontier_phi_83_pred_5 = _3228 * _3072.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_83_pred;
                            _3309 = frontier_phi_83_pred_1;
                            _3308 = frontier_phi_83_pred_2;
                            _3307 = frontier_phi_83_pred_3;
                            _3306 = frontier_phi_83_pred_4;
                            _3311 = frontier_phi_83_pred_5;
                            _3014 = _3309 + _3027;
                            _3015 = _3310 + _3028;
                            _3016 = _3311 + _3029;
                            _3011 = _3306 + _3024;
                            _3012 = _3307 + _3025;
                            _3013 = _3308 + _3026;
                            if (_3031 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3031;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3016;
                        frontier_phi_77_pred_1 = _3015;
                        frontier_phi_77_pred_2 = _3014;
                        frontier_phi_77_pred_3 = _3013;
                        frontier_phi_77_pred_4 = _3012;
                        frontier_phi_77_pred_5 = _3011;
                    }
                    _2653 = frontier_phi_77_pred;
                    _2651 = frontier_phi_77_pred_1;
                    _2649 = frontier_phi_77_pred_2;
                    _2647 = frontier_phi_77_pred_3;
                    _2645 = frontier_phi_77_pred_4;
                    _2643 = frontier_phi_77_pred_5;
                    uint _2809 = _2808 + 1u;
                    if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2802 = _2643;
                        _2803 = _2645;
                        _2804 = _2647;
                        _2805 = _2649;
                        _2806 = _2651;
                        _2807 = _2653;
                        _2808 = _2809;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2647;
                frontier_phi_58_59_ladder_1 = _2653;
                frontier_phi_58_59_ladder_2 = _2651;
                frontier_phi_58_59_ladder_3 = _2649;
                frontier_phi_58_59_ladder_4 = _2645;
                frontier_phi_58_59_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_58_59_ladder = _2525;
                frontier_phi_58_59_ladder_1 = _2531;
                frontier_phi_58_59_ladder_2 = _2529;
                frontier_phi_58_59_ladder_3 = _2527;
                frontier_phi_58_59_ladder_4 = _2523;
                frontier_phi_58_59_ladder_5 = _2521;
            }
            _2642 = frontier_phi_58_59_ladder_5;
            _2644 = frontier_phi_58_59_ladder_4;
            _2646 = frontier_phi_58_59_ladder;
            _2648 = frontier_phi_58_59_ladder_3;
            _2650 = frontier_phi_58_59_ladder_2;
            _2652 = frontier_phi_58_59_ladder_1;
        }
        float _2657 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2408 = (_2657 * _2648) + _1860;
        _2410 = (_2657 * _2650) + _1862;
        _2412 = (_2657 * _2652) + _1864;
        _2414 = ((_2642 * 0.039999999105930328369140625) * _2657) + _2193;
        _2416 = ((_2644 * 0.039999999105930328369140625) * _2657) + _2195;
        _2418 = ((_2646 * 0.039999999105930328369140625) * _2657) + _2197;
    }
    else
    {
        _2408 = _1860;
        _2410 = _1862;
        _2412 = _1864;
        _2414 = _2193;
        _2416 = _2195;
        _2418 = _2197;
    }
    uint _2424 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _4384 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4395 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4406 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _2455 = (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2408 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _640))) + ((_2414 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + (((_452 * cbMtdParam._m0[11u].x) * (_437.x + _422.x)) * cbInstanceData._m0[_2424].x);
    float _2457 = ((((_452 * cbMtdParam._m0[11u].y) * (_437.y + _422.y)) * cbInstanceData._m0[_2424].y) + ((_2416 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2410 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _640)));
    float _2459 = ((((_452 * cbMtdParam._m0[11u].z) * (_437.z + _422.z)) * cbInstanceData._m0[_2424].z) + ((_2418 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2412 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _640)));
    float _2460 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2461 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2462 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    uint _2463 = _615 + 6u;
    float _2471 = _576 / cbSceneParam._m0[86u].x;
    float _2472 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2486 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2488 = _2486.x;
    float _2489 = _2486.y;
    float _2490 = _2486.z;
    float _2491 = _2486.w;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2546 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2547 = _2546 / _497;
        float _2558 = _2547 * _548;
        float _2559 = _549 * _2547;
        float _2560 = (-0.0) - _2559;
        float _2562 = _2547 * _550;
        float _2564 = (cbSceneParam._m0[77u].w * _2560) / _2546;
        float _2565 = _2564 + cbSceneParam._m0[79u].w;
        float _2566 = cbSceneParam._m0[79u].w - _2559;
        float _2572 = sqrt(((_2558 * _2558) + (_2559 * _2559)) + (_2562 * _2562));
        float _2575 = (1.0 - (cbSceneParam._m0[77u].w / _2546)) * _2572;
        float _2580 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2582 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2560 - _2564) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2565 > 0.0) ? exp2(_2580 * _2565) : (2.0 - exp2(_2582 * _2565))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2575;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2566) ? _2565 : (isnan(_2565) ? _2566 : max(_2565, _2566));
            float _2705 = isnan(_2566) ? _2565 : (isnan(_2565) ? _2566 : min(_2565, _2566));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2759 = ((abs(_2572 / _2560) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2580 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2580 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2582 * _2714) - exp2(_2582 * _2715)) * _2703))) + (_2575 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2491);
        _2584 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2488;
        _2586 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2489;
        _2588 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2490;
        _2590 = _2770 * _2491;
    }
    else
    {
        _2584 = _2488;
        _2586 = _2489;
        _2588 = _2490;
        _2590 = _2491;
    }
    bool _2797;
    vec4 _2600;
    vec4 _2622;
    float _2624;
    float _2628;
    float _2629;
    float _2630;
    float _2631;
    bool _2641;
    for (;;)
    {
        _2600 = cbMatDynParam._m0[0u];
        float _2602 = roundEven(_2600.y);
        bool _2603 = _2602 == 3.0;
        float _2604 = log2(_2590);
        float _2611 = exp2(_2604 * cbSceneParam._m0[78u].x) * _2460;
        float _2612 = exp2(_2604 * cbSceneParam._m0[78u].y) * _2461;
        float _2613 = exp2(_2604 * cbSceneParam._m0[78u].z) * _2462;
        float _2620 = _564 + (-0.5);
        _2622 = cbMtdParam._m0[1u];
        _2624 = _2622.y * _2620;
        float _2627 = (_2602 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2628 = _2627 * (_2603 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2584)));
        _2629 = _2627 * (_2603 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2586)));
        _2630 = _2627 * (_2603 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2588)));
        _2631 = _2620 * 0.999000012874603271484375;
        _2641 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2641)
        {
            if ((cbInstanceData._m0[_615 + 7u].x + _2631) < 0.5)
            {
                _2797 = true;
                break;
            }
        }
        uint _2738 = _616 + uint(_2600.w);
        if ((cbInstanceData._m0[_2738].w < 1.0) && ((cbInstanceData._m0[_2738].w + _2631) < 0.5))
        {
            _2797 = true;
            break;
        }
        if ((_2624 + 1.0) < _2622.x)
        {
            _2797 = true;
            break;
        }
        _2797 = false;
        break;
    }
    float _3002;
    if (_2797)
    {
        discard_state = true;
        _3002 = 0.0;
    }
    else
    {
        _3002 = cbInstanceData._m0[_2463].w;
    }
    SV_Target.x = _2628;
    SV_Target.y = _2629;
    SV_Target.z = _2630;
    SV_Target.w = _3002;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2463].w;
    discard_exit();
}


