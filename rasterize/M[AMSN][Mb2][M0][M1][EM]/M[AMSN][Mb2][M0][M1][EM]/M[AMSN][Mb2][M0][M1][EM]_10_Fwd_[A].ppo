#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3502;
float _3503;
float _3504;
float _3505;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3514 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _354 = _352.x;
    float _372 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _354) * _308) + _354;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_385.x * 2.0) + (-1.0);
    float _395 = (_385.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_393, _395), vec2(_393, _395));
    float _3525 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _417 = _413.z;
    float _420 = (_413.x * 2.0) + (-1.0);
    float _421 = (_413.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3536 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))));
    float _430 = (_308 * (_385.z - _417)) + _417;
    vec4 _457 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _486 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_337.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3547 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _494 = (_308 * (_393 - _420)) + _420;
    float _495 = (_308 * (_395 - _421)) + _421;
    float _496 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) - _427)) + _427;
    float _499 = fma(_496, _216 * NORMAL.x, fma(_495, _223 * TANGENT.x, (_209 * _201) * _494));
    float _502 = fma(_496, _216 * NORMAL.y, fma(_495, _223 * TANGENT.y, (_209 * _202) * _494));
    float _505 = fma(_496, _216 * NORMAL.z, fma(_495, _223 * TANGENT.z, (_209 * _203) * _494));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3558 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _513 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3580 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3591 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3602 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _517 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    vec4 _598 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _600 = _598.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _772 = sqrt(((_584 * _584) + (_585 * _585)) + (_586 * _586));
        float _778 = (cbMatDynParam._m0[5u].x * _772) + cbMatDynParam._m0[5u].y;
        float _3613 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _783 = (cbMatDynParam._m0[5u].z * _772) + cbMatDynParam._m0[5u].w;
        float _3624 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) - _779)) + _779) < ((_600 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _611 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _612 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _630 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _633 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _636 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _649 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = _649 + 9u;
    uint _651 = _650 + uint(cbMatDynParam._m0[0u].w);
    float _657 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_651].x;
    float _658 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_651].y;
    float _659 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_651].z;
    float _3635 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _663 = 1.0 - _517;
    float _664 = _660 * _663;
    float _665 = _661 * _663;
    float _666 = _662 * _663;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _517;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _517;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _517;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _611, cbSceneParam._m0[86u].y * _612));
    float _689 = _686.x * TEXCOORD_3.w;
    float _690 = dot(vec3(_510, _511, _512), vec3(_591, _592, _593));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _510) - _591;
    float _698 = (_693 * _511) - _592;
    float _699 = (_693 * _512) - _593;
    float _703 = abs(dot(vec3(_591, _592, _593), vec3(_510, _511, _512)));
    float _3668 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_513);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _724 = (1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _725 = _718 * _705;
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _820 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _824 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _849 = _753 + _510;
        float _850 = _757 + _511;
        float _851 = _761 + _512;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_510, _511, _512), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3716 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_510, _511, _512), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3749 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_510, _511, _512), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3782 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1139 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1143 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1166 = _753 + _510;
        float _1167 = _757 + _511;
        float _1168 = _761 + _512;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_510, _511, _512), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3845 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_510, _511, _512), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3878 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_510, _511, _512), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3911 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = _1092;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _697 * 0.5;
    float _1473 = _698 * 0.5;
    float _1474 = _699 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1602 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1605 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1633 = frontier_phi_17_15_ladder;
        }
        float _1838;
        if (_1602 > 0.0)
        {
            _1838 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1838 = frontier_phi_26_22_ladder;
        }
        float _2092;
        if (_1605 > 0.0)
        {
            _2092 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2092 = frontier_phi_38_33_ladder;
        }
        float _2094 = isnan(_1838) ? _1633 : (isnan(_1633) ? _1838 : min(_1633, _1838));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1599) + _1588;
        float _2100 = (_2095 * _1602) + _1592;
        float _2101 = (_2095 * _1605) + _1596;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_16_38_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_16_38_ladder_2;
        _1623 = frontier_phi_16_38_ladder_1;
        _1625 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1699 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1702 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1843;
        if (_1696 > 0.0)
        {
            _1843 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1843 = frontier_phi_28_24_ladder;
        }
        float _2119;
        if (_1699 > 0.0)
        {
            _2119 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2119 = frontier_phi_40_35_ladder;
        }
        float _2332;
        if (_1702 > 0.0)
        {
            _2332 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2332 = frontier_phi_49_46_ladder;
        }
        float _2334 = isnan(_2119) ? _1843 : (isnan(_1843) ? _2119 : min(_1843, _2119));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1696) + _1685;
        float _2340 = (_2335 * _1699) + _1689;
        float _2341 = (_2335 * _1702) + _1693;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_25_49_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_25_49_ladder_2;
        _1723 = frontier_phi_25_49_ladder_1;
        _1725 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1630);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1738 = (((_724 * _674) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1740 = (((_724 * _676) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_724 * _677) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_649 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1771 = _689 + (-1.0);
    float _1776 = (cbLight._m0[_1764].x * _1771) + 1.0;
    float _1777 = (cbLight._m0[_1764].y * _1771) + 1.0;
    float _1778 = (cbLight._m0[_1764].z * _1771) + 1.0;
    float _1779 = (cbLight._m0[_1764].w * _1771) + 1.0;
    uint _1780 = _1763 + 5u;
    float _1786 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1790 = _1763 + 4u;
    float _1796 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1800 = _1763 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_510, _511, _512));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_510, _511, _512));
    float _4047 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _4058 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1780].x * _1786) * _1821) + ((cbLight._m0[_1790].x * _1796) * _1819);
    float _1829 = ((_1786 * cbLight._m0[_1780].y) * _1821) + ((_1796 * cbLight._m0[_1790].y) * _1819);
    float _1830 = ((_1786 * cbLight._m0[_1780].z) * _1821) + ((_1796 * cbLight._m0[_1790].z) * _1819);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1763 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1837)
    {
        _1848 = _1828;
        _1850 = _1829;
        _1852 = _1830;
    }
    else
    {
        uint _1856 = _1763 + 6u;
        float _1872 = (dot(vec3(cbLight._m0[_1763 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _4069 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1875 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1848 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1828;
        _1850 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1829;
        _1852 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1830;
    }
    bool _1855 = _1835.y == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1855)
    {
        _1893 = _1848;
        _1895 = _1850;
        _1897 = _1852;
    }
    else
    {
        uint _2063 = _1763 + 7u;
        float _2079 = (dot(vec3(cbLight._m0[_1763 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4085 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2082 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1893 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _1848;
        _1895 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _1850;
        _1897 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _1852;
    }
    uint _1900 = _1763 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _513) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1763].x + _591;
    float _1916 = cbLight._m0[_1763].y + _592;
    float _1917 = cbLight._m0[_1763].z + _593;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1763].xyz));
    float _4101 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1929 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _1930 = dot(vec3(_510, _511, _512), vec3(_1922, _1923, _1924));
    float _4123 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1922, _1923, _1924));
    float _4134 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1950 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _1951 = 0.959999978542327880859375 - _671;
    float _1953 = 0.959999978542327880859375 - _672;
    float _1954 = 0.959999978542327880859375 - _673;
    float _1961 = 1.0 - _1914;
    float _1972 = (0.5 / (((_1929 * ((_1928 * _1961) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1961) + _1914) * _1928))) * _1928;
    float _4145 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1985 = _1763 + 9u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _513) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1800].x + _591;
    float _1999 = cbLight._m0[_1800].y + _592;
    float _2000 = cbLight._m0[_1800].z + _593;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1800].xyz));
    float _4156 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2012 = dot(vec3(_510, _511, _512), vec3(_2005, _2006, _2007));
    float _4167 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2005, _2006, _2007));
    float _4178 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1997 * _1997;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2038 = 1.0 - _1997;
    float _2048 = (0.5 / (((_1929 * ((_2011 * _2038) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2038) + _1997) * _2011))) * _2011;
    float _4189 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    float _2060 = (((((_2031 * _1951) + _674) * cbLight._m0[_1985].x) * _2050) * _1786) + (((((_1950 * _1951) + _674) * cbLight._m0[_1900].x) * _1974) * _1796);
    float _2061 = (((((_2031 * _1953) + _676) * cbLight._m0[_1985].y) * _2050) * _1786) + (((((_1950 * _1953) + _676) * cbLight._m0[_1900].y) * _1974) * _1796);
    float _2062 = (((((_2031 * _1954) + _677) * cbLight._m0[_1985].z) * _2050) * _1786) + (((((_1950 * _1954) + _677) * cbLight._m0[_1900].z) * _1974) * _1796);
    float _2124;
    float _2126;
    float _2128;
    if (_1837)
    {
        _2124 = _2060;
        _2126 = _2061;
        _2128 = _2062;
    }
    else
    {
        uint _2130 = _1763 + 2u;
        uint _2134 = _1763 + 10u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _513) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _591;
        float _2151 = cbLight._m0[_2130].y + _592;
        float _2152 = cbLight._m0[_2130].z + _593;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2130].xyz));
        float _4200 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2164 = dot(vec3(_510, _511, _512), vec3(_2157, _2158, _2159));
        float _4211 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4222 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
        float _2190 = 1.0 - _2149;
        float _2200 = (0.5 / (((_1929 * ((_2163 * _2190) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2190) + _2149) * _2163))) * _2163;
        float _4233 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2124 = (((((_2183 * _1951) + _674) * cbLight._m0[_2134].x) * _2202) * _2203) + _2060;
        _2126 = (((((_2183 * _1953) + _676) * cbLight._m0[_2134].y) * _2202) * _2203) + _2061;
        _2128 = (((((_2183 * _1954) + _677) * cbLight._m0[_2134].z) * _2202) * _2203) + _2062;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1855)
    {
        _2238 = _2124;
        _2240 = _2126;
        _2242 = _2128;
    }
    else
    {
        uint _2249 = _1763 + 3u;
        uint _2253 = _1763 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _513) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _591;
        float _2270 = cbLight._m0[_2249].y + _592;
        float _2271 = cbLight._m0[_2249].z + _593;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2249].xyz));
        float _4249 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2283 = dot(vec3(_510, _511, _512), vec3(_2276, _2277, _2278));
        float _4260 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4271 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_1929 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2309) + _2268) * _2282))) * _2282;
        float _4282 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2238 = (((((_2302 * _1951) + _674) * cbLight._m0[_2253].x) * _2321) * _2322) + _2124;
        _2240 = (((((_2302 * _1953) + _676) * cbLight._m0[_2253].y) * _2321) * _2322) + _2126;
        _2242 = (((((_2302 * _1954) + _677) * cbLight._m0[_2253].z) * _2321) * _2322) + _2128;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1761.y == 0u)
    {
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2397;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2397;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2397;
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _612) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _611) / _2413)));
        float _2434 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2739)
                {
                    frontier_phi_66_pred = _2723;
                    frontier_phi_66_pred_1 = _2728;
                    frontier_phi_66_pred_2 = _2727;
                    frontier_phi_66_pred_3 = _2726;
                    frontier_phi_66_pred_4 = _2725;
                    frontier_phi_66_pred_5 = _2724;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2738;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2729 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2398;
                        float _2935 = _2894.y - _2399;
                        float _2936 = _2894.z - _2400;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_630, _633, _636), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4308 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2398;
                        float _2970 = (-0.0) - _2399;
                        float _2971 = (-0.0) - _2400;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _705;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_630, _633, _636), vec3(_2976, _2977, _2978));
                        float _4324 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3011 = dot(vec3(_630, _633, _636), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4335 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4346 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4357 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2798 = (_2965 * _2913.x) + _2871;
                        _2799 = (_2965 * _2913.y) + _2872;
                        _2800 = (_2965 * _2913.z) + _2873;
                        _2795 = (_3046 * _2930.x) + _2868;
                        _2796 = (_3046 * _2930.y) + _2869;
                        _2797 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_66_pred = _2795;
                    frontier_phi_66_pred_1 = _2800;
                    frontier_phi_66_pred_2 = _2799;
                    frontier_phi_66_pred_3 = _2798;
                    frontier_phi_66_pred_4 = _2797;
                    frontier_phi_66_pred_5 = _2796;
                }
                _2571 = frontier_phi_66_pred;
                _2581 = frontier_phi_66_pred_1;
                _2579 = frontier_phi_66_pred_2;
                _2577 = frontier_phi_66_pred_3;
                _2575 = frontier_phi_66_pred_4;
                _2573 = frontier_phi_66_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2571;
                    _2724 = _2573;
                    _2725 = _2575;
                    _2726 = _2577;
                    _2727 = _2579;
                    _2728 = _2581;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2587) & _2444) == 0u)
        {
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _2717 = _2716 * _2398;
            float _2718 = _2716 * _2399;
            float _2719 = _2716 * _2400;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2851 = _2570;
                float _2852 = _2572;
                float _2853 = _2574;
                float _2854 = _2576;
                float _2855 = _2578;
                float _2856 = _2580;
                uint _2857 = _2587;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2867)
                    {
                        frontier_phi_77_pred = _2856;
                        frontier_phi_77_pred_1 = _2855;
                        frontier_phi_77_pred_2 = _2854;
                        frontier_phi_77_pred_3 = _2853;
                        frontier_phi_77_pred_4 = _2852;
                        frontier_phi_77_pred_5 = _2851;
                    }
                    else
                    {
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        uint _3079 = _2866;
                        uint _3080;
                        vec4 _3105;
                        float _3106;
                        vec4 _3121;
                        vec3 _3133;
                        vec4 _3148;
                        vec4 _3164;
                        float _3211;
                        bool _3212;
                        for (;;)
                        {
                            uint _3090 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3079));
                            _3080 = (_3079 + 4294967295u) & _3079;
                            uint _3092 = _3090 * 40u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3106 = _3105.w;
                            uint _3108 = (_3090 * 40u) + 4u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3090 * 40u) + 8u;
                            _3133 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x));
                            uint _3135 = (_3090 * 40u) + 16u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3151 = (_3090 * 40u) + 20u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3167 = (_3090 * 40u) + 24u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3186 = (_3090 * 40u) + 28u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3211 = fma(_2400, _3199.z, fma(_2399, _3199.y, _3199.x * _2398)) + _3199.w;
                            _3212 = !((fma(_2400, _3180.z, fma(_2399, _3180.y, _3180.x * _2398)) + _3180.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3212)
                            {
                                float _3239 = _3105.x - _2398;
                                float _3240 = _3105.y - _2399;
                                float _3241 = _3105.z - _2400;
                                float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                                float _3245 = inversesqrt(_3242);
                                float _3246 = _3245 * _3239;
                                float _3247 = _3245 * _3240;
                                float _3248 = _3245 * _3241;
                                float _3252 = 1.0 - (_3242 / (_3106 * _3106));
                                float _4368 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3257 = sqrt(_3242) * _3121.w;
                                float _3259 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                                float _3260 = _3259 * _3259;
                                float _3263 = ((1.0 - _3260) * dot(vec3(_3246, _3247, _3248), vec3(_630, _633, _636))) + _3260;
                                float _3266 = _3257 * _3257;
                                float _3270 = (fma(_2400, _3148.z, fma(_2399, _3148.y, _3148.x * _2398)) + _3148.w) / _3211;
                                float _3271 = (fma(_2400, _3164.z, fma(_2399, _3164.y, _3164.x * _2398)) + _3164.w) / _3211;
                                float _3275 = 1.0 - dot(vec2(_3270, _3271), vec2(_3270, _3271));
                                float _4384 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3277 = _3276 * (((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3253) / ((_3266 * 0.699999988079071044921875) + 1.0));
                                float _3289 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                                float _3290 = 1.0 - _705;
                                float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                                float _3298 = _3297 * _3297;
                                float _3299 = _3298 * _3298;
                                float _3300 = _3246 - _2717;
                                float _3301 = _3247 - _2718;
                                float _3302 = _3248 - _2719;
                                float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                                float _3310 = dot(vec3(_630, _633, _636), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4395 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3314 = dot(vec3(_630, _633, _636), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                                float _4406 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                                float _3322 = _3259 * _3298;
                                float _3323 = _3322 * _3322;
                                float _3329 = ((1.0 - _3323) * dot(vec3(_630, _633, _636), vec3(_3246, _3247, _3248))) + _3323;
                                float _4417 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3331 = 1.0 - _3298;
                                float _3341 = (0.5 / (((_3330 * ((_3313 * _3331) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3298) * _3313))) * _3330;
                                float _4428 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3351 = (_3276 * _3253) * (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3321 * _3321) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3277 * _3121.y;
                                frontier_phi_83_pred_1 = _3277 * _3121.x;
                                frontier_phi_83_pred_2 = _3351 * _3133.z;
                                frontier_phi_83_pred_3 = _3351 * _3133.y;
                                frontier_phi_83_pred_4 = _3351 * _3133.x;
                                frontier_phi_83_pred_5 = _3277 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3359 = frontier_phi_83_pred;
                            _3358 = frontier_phi_83_pred_1;
                            _3357 = frontier_phi_83_pred_2;
                            _3356 = frontier_phi_83_pred_3;
                            _3355 = frontier_phi_83_pred_4;
                            _3360 = frontier_phi_83_pred_5;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            _3065 = _3360 + _3078;
                            _3060 = _3355 + _3073;
                            _3061 = _3356 + _3074;
                            _3062 = _3357 + _3075;
                            if (_3080 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3080;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    _2702 = frontier_phi_77_pred;
                    _2700 = frontier_phi_77_pred_1;
                    _2698 = frontier_phi_77_pred_2;
                    _2696 = frontier_phi_77_pred_3;
                    _2694 = frontier_phi_77_pred_4;
                    _2692 = frontier_phi_77_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2692;
                        _2852 = _2694;
                        _2853 = _2696;
                        _2854 = _2698;
                        _2855 = _2700;
                        _2856 = _2702;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2696;
                frontier_phi_58_59_ladder_1 = _2702;
                frontier_phi_58_59_ladder_2 = _2700;
                frontier_phi_58_59_ladder_3 = _2698;
                frontier_phi_58_59_ladder_4 = _2694;
                frontier_phi_58_59_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_58_59_ladder = _2574;
                frontier_phi_58_59_ladder_1 = _2580;
                frontier_phi_58_59_ladder_2 = _2578;
                frontier_phi_58_59_ladder_3 = _2576;
                frontier_phi_58_59_ladder_4 = _2572;
                frontier_phi_58_59_ladder_5 = _2570;
            }
            _2691 = frontier_phi_58_59_ladder_5;
            _2693 = frontier_phi_58_59_ladder_4;
            _2695 = frontier_phi_58_59_ladder;
            _2697 = frontier_phi_58_59_ladder_3;
            _2699 = frontier_phi_58_59_ladder_2;
            _2701 = frontier_phi_58_59_ladder_1;
        }
        float _2706 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2457 = (_2706 * _2697) + _1893;
        _2459 = (_2706 * _2699) + _1895;
        _2461 = (_2706 * _2701) + _1897;
        _2463 = ((_2691 * _674) * _2706) + _2238;
        _2465 = ((_2693 * _676) * _2706) + _2240;
        _2467 = ((_2695 * _677) * _2706) + _2242;
    }
    else
    {
        _2457 = _1893;
        _2459 = _1895;
        _2461 = _1897;
        _2463 = _2238;
        _2465 = _2240;
        _2467 = _2242;
    }
    uint _2473 = _650 + uint(cbMatDynParam._m0[0u].w);
    float _4444 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4455 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4466 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2504 = (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2457 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _689))) + ((_2463 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + (((_487 * cbMtdParam._m0[11u].x) * (_472.x + _457.x)) * cbInstanceData._m0[_2473].x);
    float _2506 = ((((_487 * cbMtdParam._m0[11u].y) * (_472.y + _457.y)) * cbInstanceData._m0[_2473].y) + ((_2465 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2459 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _689)));
    float _2508 = ((((_487 * cbMtdParam._m0[11u].z) * (_472.z + _457.z)) * cbInstanceData._m0[_2473].z) + ((_2467 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2461 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _689)));
    float _2509 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2510 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2511 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    uint _2512 = _649 + 6u;
    float _2520 = _611 / cbSceneParam._m0[86u].x;
    float _2521 = _612 / cbSceneParam._m0[86u].y;
    vec4 _2535 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2537 = _2535.x;
    float _2538 = _2535.y;
    float _2539 = _2535.z;
    float _2540 = _2535.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2596 = _2595 / _533;
        float _2607 = _2596 * _584;
        float _2608 = _585 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2611 = _2596 * _586;
        float _2613 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2608;
        float _2621 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2609 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2754 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2808 = ((abs(_2621 / _2609) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2631 * _2763) - exp2(_2631 * _2764)) * _2752))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2540);
        _2633 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2537;
        _2635 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2538;
        _2637 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2539;
        _2639 = _2819 * _2540;
    }
    else
    {
        _2633 = _2537;
        _2635 = _2538;
        _2637 = _2539;
        _2639 = _2540;
    }
    bool _2846;
    vec4 _2649;
    vec4 _2671;
    float _2673;
    float _2677;
    float _2678;
    float _2679;
    float _2680;
    bool _2690;
    for (;;)
    {
        _2649 = cbMatDynParam._m0[0u];
        float _2651 = roundEven(_2649.y);
        bool _2652 = _2651 == 3.0;
        float _2653 = log2(_2639);
        float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * _2509;
        float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * _2510;
        float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * _2511;
        float _2669 = _600 + (-0.5);
        _2671 = cbMtdParam._m0[1u];
        _2673 = _2671.y * _2669;
        float _2676 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2677 = _2676 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
        _2678 = _2676 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
        _2679 = _2676 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
        _2680 = _2669 * 0.999000012874603271484375;
        _2690 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2690)
        {
            if ((cbInstanceData._m0[_649 + 7u].x + _2680) < 0.5)
            {
                _2846 = true;
                break;
            }
        }
        uint _2787 = _650 + uint(_2649.w);
        if ((cbInstanceData._m0[_2787].w < 1.0) && ((cbInstanceData._m0[_2787].w + _2680) < 0.5))
        {
            _2846 = true;
            break;
        }
        if ((_2673 + 1.0) < _2671.x)
        {
            _2846 = true;
            break;
        }
        _2846 = false;
        break;
    }
    float _3051;
    if (_2846)
    {
        discard_state = true;
        _3051 = 0.0;
    }
    else
    {
        _3051 = cbInstanceData._m0[_2512].w;
    }
    SV_Target.x = _2677;
    SV_Target.y = _2678;
    SV_Target.z = _2679;
    SV_Target.w = _3051;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2512].w;
    discard_exit();
}


