#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _892;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3511 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))));
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _349 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_261.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3522 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _353 = fma(_292, _204 * NORMAL.x, fma(_285, _211 * TANGENT.x, (_197 * _189) * _283));
    float _356 = fma(_292, _204 * NORMAL.y, fma(_285, _211 * TANGENT.y, (_197 * _190) * _283));
    float _359 = fma(_292, _204 * NORMAL.z, fma(_285, _211 * TANGENT.z, (_197 * _191) * _283));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    float _364 = _363 * _353;
    float _365 = _363 * _356;
    float _366 = _363 * _359;
    float _3533 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _367 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3555 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3566 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _386 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _438 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _428);
    float _439 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _428);
    float _440 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _428);
    float _444 = inversesqrt(dot(vec3(_438, _439, _440), vec3(_438, _439, _440)));
    float _445 = _438 * _444;
    float _446 = _439 * _444;
    float _447 = _440 * _444;
    float _453 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _454 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _475 = fma(_366, cbSceneParam._m0[5u].z, fma(_365, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _364));
    float _478 = fma(_366, cbSceneParam._m0[6u].z, fma(_365, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _364));
    float _481 = fma(_366, cbSceneParam._m0[7u].z, fma(_365, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _364));
    uint _494 = uint(roundEven(NORMAL.w)) * 13u;
    uint _496 = _494 + 9u;
    uint _497 = _496 + uint(cbMatDynParam._m0[0u].w);
    float _503 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_497].x;
    float _504 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_497].y;
    float _505 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_497].z;
    float _3577 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    vec4 _517 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _453, cbSceneParam._m0[86u].y * _454));
    float _520 = _517.x * TEXCOORD_3.w;
    float _521 = dot(vec3(_364, _365, _366), vec3(_445, _446, _447));
    float _524 = _521 * 2.0;
    float _528 = (_524 * _364) - _445;
    float _529 = (_524 * _365) - _446;
    float _530 = (_524 * _366) - _447;
    float _534 = abs(dot(vec3(_445, _446, _447), vec3(_364, _365, _366)));
    float _3610 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _536 = sqrt(_367);
    float _549 = exp2((_536 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_536 * 3.0));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = fma(_589, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581));
        float _620 = fma(_589, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581));
        float _624 = fma(_589, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581));
        float _649 = _581 + _364;
        float _650 = _585 + _365;
        float _651 = _589 + _366;
        float _661 = fma(_651, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649)) - _616;
        float _662 = fma(_651, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649)) - _620;
        float _663 = fma(_651, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649)) - _624;
        float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
        float _680 = ((_667 * _661) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_616 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_667 * _662) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_620 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_667 * _663) / cbModelParam._m0[34u].z) + ((((((_624 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _719 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_685.x + (-0.5));
        float _721 = _719 * (_685.y + (-0.5));
        float _722 = _719 * (_685.z + (-0.5));
        float _729 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_692.x + (-0.5));
        float _731 = _729 * (_692.y + (-0.5));
        float _732 = _729 * (_692.z + (-0.5));
        float _739 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_699.x + (-0.5));
        float _741 = _739 * (_699.y + (-0.5));
        float _742 = _739 * (_699.z + (-0.5));
        float _749 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_706.x + (-0.5));
        float _751 = _749 * (_706.y + (-0.5));
        float _752 = _749 * (_706.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = _720 * 0.5;
        float _757 = _730 * 0.5;
        float _758 = _740 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _773 = (dot(vec3(_364, _365, _366), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _783 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3658 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_785 + 1.0))) + _790) * _753;
        float _800 = _721 * 0.5;
        float _801 = _731 * 0.5;
        float _802 = _741 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_364, _365, _366), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3691 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_827 + 1.0))) + _832) * _754;
        float _842 = _722 * 0.5;
        float _843 = _732 * 0.5;
        float _844 = _742 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_364, _365, _366), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3724 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_869 + 1.0))) + _874) * _755;
        _891 = _722;
        _893 = _721;
        _894 = _720;
        _895 = _732;
        _896 = _731;
        _897 = _730;
        _898 = _742;
        _899 = _741;
        _900 = _740;
        _901 = _755;
        _902 = _754;
        _903 = _753;
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    }
    else
    {
        _891 = _892;
        _893 = _892;
        _894 = _892;
        _895 = _892;
        _896 = _892;
        _897 = _892;
        _898 = _892;
        _899 = _892;
        _900 = _892;
        _901 = _892;
        _902 = _892;
        _903 = _892;
        _904 = 0.0;
        _905 = 0.0;
        _906 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_589, cbModelParam._m0[30u].z, fma(_585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _581));
        float _936 = fma(_589, cbModelParam._m0[31u].z, fma(_585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _581));
        float _940 = fma(_589, cbModelParam._m0[32u].z, fma(_585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _581));
        float _963 = _581 + _364;
        float _964 = _585 + _365;
        float _965 = _589 + _366;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_364, _365, _366), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3787 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_364, _365, _366), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3820 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_364, _365, _366), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3853 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _892;
        _1202 = _892;
        _1203 = _892;
        _1204 = _892;
        _1205 = _892;
        _1206 = _892;
        _1207 = _892;
        _1208 = _892;
        _1209 = _892;
        _1210 = _892;
        _1211 = _892;
        _1212 = _892;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _528 * 0.5;
    float _1270 = _529 * 0.5;
    float _1271 = _530 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _895, _898, _901));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_893, _896, _899, _902));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_894, _897, _900, _903));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _367);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1385 = fma(_589, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581)) + cbModelParam._m0[13u].w;
        float _1389 = fma(_589, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581)) + cbModelParam._m0[14u].w;
        float _1393 = fma(_589, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581)) + cbModelParam._m0[15u].w;
        float _1396 = fma(_530, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528));
        float _1399 = fma(_530, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528));
        float _1402 = fma(_530, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528));
        float _1430;
        if (_1396 > 0.0)
        {
            _1430 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1430 = frontier_phi_14_12_ladder;
        }
        float _1602;
        if (_1399 > 0.0)
        {
            _1602 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1602 = frontier_phi_23_19_ladder;
        }
        float _1898;
        if (_1402 > 0.0)
        {
            _1898 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1898 = frontier_phi_35_30_ladder;
        }
        float _1900 = isnan(_1602) ? _1430 : (isnan(_1430) ? _1602 : min(_1430, _1602));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1396) + _1385;
        float _1906 = (_1901 * _1399) + _1389;
        float _1907 = (_1901 * _1402) + _1393;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_13_35_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1418 = frontier_phi_13_35_ladder_2;
        _1420 = frontier_phi_13_35_ladder_1;
        _1422 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_528, _529, _530), _1338);
        _1418 = _1406.x * cbModelParam._m0[1u].y;
        _1420 = _1406.y * cbModelParam._m0[1u].y;
        _1422 = _1406.z * cbModelParam._m0[1u].y;
    }
    float _1426 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _367);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1426 : min(cbModelParam._m0[25u].w, _1426));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1482 = fma(_589, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581)) + cbModelParam._m0[21u].w;
        float _1486 = fma(_589, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581)) + cbModelParam._m0[22u].w;
        float _1490 = fma(_589, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581)) + cbModelParam._m0[23u].w;
        float _1493 = fma(_530, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528));
        float _1496 = fma(_530, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528));
        float _1499 = fma(_530, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528));
        float _1607;
        if (_1493 > 0.0)
        {
            _1607 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1607 = frontier_phi_25_21_ladder;
        }
        float _1925;
        if (_1496 > 0.0)
        {
            _1925 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1925 = frontier_phi_37_32_ladder;
        }
        float _2252;
        if (_1499 > 0.0)
        {
            _2252 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2252 = frontier_phi_47_44_ladder;
        }
        float _2254 = isnan(_1925) ? _1607 : (isnan(_1607) ? _1925 : min(_1607, _1925));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1493) + _1482;
        float _2260 = (_2255 * _1496) + _1486;
        float _2261 = (_2255 * _1499) + _1490;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1427);
            frontier_phi_22_47_ladder = _2379.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2379.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2379.x * cbModelParam._m0[1u].z;
        }
        _1518 = frontier_phi_22_47_ladder_2;
        _1520 = frontier_phi_22_47_ladder_1;
        _1522 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_528, _529, _530), _1427);
        _1518 = _1502.x * cbModelParam._m0[1u].z;
        _1520 = _1502.y * cbModelParam._m0[1u].z;
        _1522 = _1502.z * cbModelParam._m0[1u].z;
    }
    float _1534 = ((((1.0 - _549) * ((_536 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_549 * _536)) * _520;
    float _1535 = _1534 * ((cbModelParam._m0[1u].w * (_1518 - _1418)) + _1418);
    float _1536 = _1534 * ((cbModelParam._m0[1u].w * (_1520 - _1420)) + _1420);
    float _1537 = _1534 * ((cbModelParam._m0[1u].w * (_1522 - _1422)) + _1422);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, _1535 * cbSceneParam._m0[91u].x));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1594 = _1581 / _1593;
    float _1595 = _1585 / _1593;
    float _1596 = _1589 / _1593;
    float _1743;
    float _1744;
    float _1745;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1623 = ((uint(_1596 > cbSceneParam._m0[59u].y) + uint(_1596 > cbSceneParam._m0[59u].x)) + uint(_1596 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1624 = _1623 + 43u;
        uint _1632 = _1623 + 44u;
        uint _1640 = _1623 + 45u;
        uint _1648 = _1623 + 46u;
        float _1659 = fma(_1593, cbSceneParam._m0[_1624].w, fma(_1589, cbSceneParam._m0[_1624].z, fma(_1585, cbSceneParam._m0[_1624].y, _1581 * cbSceneParam._m0[_1624].x)));
        float _1663 = fma(_1593, cbSceneParam._m0[_1632].w, fma(_1589, cbSceneParam._m0[_1632].z, fma(_1585, cbSceneParam._m0[_1632].y, _1581 * cbSceneParam._m0[_1632].x)));
        float _1671 = fma(_1593, cbSceneParam._m0[_1648].w, fma(_1589, cbSceneParam._m0[_1648].z, fma(_1585, cbSceneParam._m0[_1648].y, _1581 * cbSceneParam._m0[_1648].x)));
        float _1676 = cbSceneParam._m0[33u].z * _1671;
        float _1678 = cbSceneParam._m0[33u].w * _1671;
        float _1681 = fma(_1593, cbSceneParam._m0[_1640].w, fma(_1589, cbSceneParam._m0[_1640].z, fma(_1585, cbSceneParam._m0[_1640].y, _1581 * cbSceneParam._m0[_1640].x))) / _1671;
        float _1729 = (cbSceneParam._m0[33u].x - sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596))) * cbSceneParam._m0[33u].y;
        float _3979 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1736 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1676 + _1659) / _1671, (_1678 + _1663) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1678 + _1659) / _1671, (_1663 - _1676) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 - _1676) / _1671, (_1663 - _1678) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 - _1678) / _1671, (_1676 + _1663) / _1671), _1681), 0.0)).x), vec4(0.25)));
        _1743 = 1.0 - (_1736 * cbSceneParam._m0[34u].x);
        _1744 = 1.0 - (_1736 * cbSceneParam._m0[34u].y);
        _1745 = 1.0 - (_1736 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1743 = 1.0;
        _1744 = 1.0;
        _1745 = 1.0;
    }
    float _1809;
    float _1811;
    float _1813;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1797 = fma(_1593, cbSceneParam._m0[63u].w, fma(_1589, cbSceneParam._m0[63u].z, fma(_1585, cbSceneParam._m0[63u].y, _1581 * cbSceneParam._m0[63u].x)));
        float _1798 = fma(_1593, cbSceneParam._m0[60u].w, fma(_1589, cbSceneParam._m0[60u].z, fma(_1585, cbSceneParam._m0[60u].y, _1581 * cbSceneParam._m0[60u].x))) / _1797;
        float _1799 = fma(_1593, cbSceneParam._m0[61u].w, fma(_1589, cbSceneParam._m0[61u].z, fma(_1585, cbSceneParam._m0[61u].y, _1581 * cbSceneParam._m0[61u].x))) / _1797;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1798 >= cbSceneParam._m0[64u].x) && (_1799 >= cbSceneParam._m0[64u].y)) && (_1798 <= cbSceneParam._m0[64u].z)) && (_1799 <= cbSceneParam._m0[64u].w))
        {
            float _1938 = fma(_1593, cbSceneParam._m0[62u].w, fma(_1589, cbSceneParam._m0[62u].z, fma(_1585, cbSceneParam._m0[62u].y, _1581 * cbSceneParam._m0[62u].x))) / _1797;
            float _1942 = isnan(cbSceneParam._m0[41u].w) ? _1938 : (isnan(_1938) ? cbSceneParam._m0[41u].w : max(_1938, cbSceneParam._m0[41u].w));
            float _1985 = (cbSceneParam._m0[33u].x - sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596))) * cbSceneParam._m0[33u].y;
            float _3995 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
            float _1992 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1798, cbSceneParam._m0[33u].w + _1799), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1798, _1799 - cbSceneParam._m0[33u].z), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1798 - cbSceneParam._m0[33u].z, _1799 - cbSceneParam._m0[33u].w), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1798 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1799), _1942), 0.0)).x), vec4(0.25)));
            float _1996 = 1.0 - (_1992 * cbSceneParam._m0[34u].x);
            float _1997 = 1.0 - (_1992 * cbSceneParam._m0[34u].y);
            float _1998 = 1.0 - (_1992 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1998) ? _1745 : (isnan(_1745) ? _1998 : min(_1745, _1998));
            frontier_phi_34_33_ladder_1 = isnan(_1997) ? _1744 : (isnan(_1744) ? _1997 : min(_1744, _1997));
            frontier_phi_34_33_ladder_2 = isnan(_1996) ? _1743 : (isnan(_1743) ? _1996 : min(_1743, _1996));
        }
        else
        {
            frontier_phi_34_33_ladder = _1745;
            frontier_phi_34_33_ladder_1 = _1744;
            frontier_phi_34_33_ladder_2 = _1743;
        }
        _1809 = frontier_phi_34_33_ladder_2;
        _1811 = frontier_phi_34_33_ladder_1;
        _1813 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1809 = _1743;
        _1811 = _1744;
        _1813 = _1745;
    }
    uvec4 _1818 = floatBitsToUint(cbInstanceData._m0[_494 + 5u]);
    uint _1820 = _1818.x * 14u;
    uint _1821 = _1820 + 13u;
    float _1828 = _520 + (-1.0);
    float _1833 = (cbLight._m0[_1821].x * _1828) + 1.0;
    float _1834 = (cbLight._m0[_1821].y * _1828) + 1.0;
    float _1835 = (cbLight._m0[_1821].z * _1828) + 1.0;
    float _1836 = (cbLight._m0[_1821].w * _1828) + 1.0;
    uint _1837 = _1820 + 5u;
    float _1843 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1847 = _1820 + 4u;
    float _1857 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1861 = _1820 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_364, _365, _366));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_364, _365, _366));
    float _4031 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _4042 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1837].x * _1843) * _1882) + (((cbLight._m0[_1847].x * _1809) * _1857) * _1880);
    float _1890 = ((_1843 * cbLight._m0[_1837].y) * _1882) + (((cbLight._m0[_1847].y * _1811) * _1857) * _1880);
    float _1891 = ((_1843 * cbLight._m0[_1837].z) * _1882) + (((cbLight._m0[_1847].z * _1813) * _1857) * _1880);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1820 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1897)
    {
        _1999 = _1889;
        _2001 = _1890;
        _2003 = _1891;
    }
    else
    {
        uint _2007 = _1820 + 6u;
        float _2023 = (dot(vec3(cbLight._m0[_1820 + 2u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _4053 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2026 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1999 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1889;
        _2001 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1890;
        _2003 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1891;
    }
    bool _2006 = _1895.y == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2006)
    {
        _2061 = _1999;
        _2063 = _2001;
        _2065 = _2003;
    }
    else
    {
        uint _2223 = _1820 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1820 + 3u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4069 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2242 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2061 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _1999;
        _2063 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2001;
        _2065 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2003;
    }
    uint _2068 = _1820 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _367) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1820].x + _445;
    float _2084 = cbLight._m0[_1820].y + _446;
    float _2085 = cbLight._m0[_1820].z + _447;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1820].xyz));
    float _4085 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _2097 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2098 = dot(vec3(_364, _365, _366), vec3(_2090, _2091, _2092));
    float _4107 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_2090, _2091, _2092));
    float _4118 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2082 * _2082;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2082;
    float _2133 = (0.5 / (((_2097 * ((_2096 * _2122) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2122) + _2082) * _2096))) * _2096;
    float _4129 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    uint _2149 = _1820 + 9u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _367) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1861].x + _445;
    float _2163 = cbLight._m0[_1861].y + _446;
    float _2164 = cbLight._m0[_1861].z + _447;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1861].xyz));
    float _4140 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2176 = dot(vec3(_364, _365, _366), vec3(_2169, _2170, _2171));
    float _4151 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2169, _2170, _2171));
    float _4162 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2161 * _2161;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2198 = 1.0 - _2161;
    float _2208 = (0.5 / (((_2097 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2198) + _2161) * _2175))) * _2175;
    float _4173 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    float _2220 = (((_2197 * cbLight._m0[_2149].x) * _2210) * _1843) + ((((cbLight._m0[_2068].x * _1809) * _2121) * _2135) * _1857);
    float _2221 = (((_2197 * cbLight._m0[_2149].y) * _2210) * _1843) + ((((cbLight._m0[_2068].y * _1811) * _2121) * _2135) * _1857);
    float _2222 = (((_2197 * cbLight._m0[_2149].z) * _2210) * _1843) + ((((cbLight._m0[_2068].z * _1813) * _2121) * _2135) * _1857);
    float _2278;
    float _2280;
    float _2282;
    if (_1897)
    {
        _2278 = _2220;
        _2280 = _2221;
        _2282 = _2222;
    }
    else
    {
        uint _2284 = _1820 + 2u;
        uint _2288 = _1820 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _367) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _445;
        float _2305 = cbLight._m0[_2284].y + _446;
        float _2306 = cbLight._m0[_2284].z + _447;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2284].xyz));
        float _4184 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2318 = dot(vec3(_364, _365, _366), vec3(_2311, _2312, _2313));
        float _4195 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4206 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2340 = 1.0 - _2303;
        float _2350 = (0.5 / (((_2097 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2340) + _2303) * _2317))) * _2317;
        float _4217 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2278 = (((_2339 * cbLight._m0[_2288].x) * _2352) * _2353) + _2220;
        _2280 = (((_2339 * cbLight._m0[_2288].y) * _2352) * _2353) + _2221;
        _2282 = (((_2339 * cbLight._m0[_2288].z) * _2352) * _2353) + _2222;
    }
    float _2384;
    float _2386;
    float _2388;
    if (_2006)
    {
        _2384 = _2278;
        _2386 = _2280;
        _2388 = _2282;
    }
    else
    {
        uint _2395 = _1820 + 3u;
        uint _2399 = _1820 + 11u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _367) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _445;
        float _2416 = cbLight._m0[_2395].y + _446;
        float _2417 = cbLight._m0[_2395].z + _447;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2395].xyz));
        float _4233 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2429 = dot(vec3(_364, _365, _366), vec3(_2422, _2423, _2424));
        float _4244 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4255 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2097 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2451) + _2414) * _2428))) * _2428;
        float _4266 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2384 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2278;
        _2386 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2280;
        _2388 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2282;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1818.y == 0u)
    {
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _454) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _453) / _2486)));
        float _2507 = (log2(_1596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            uint _2773 = 0u;
            uint _2782;
            bool _2783;
            for (;;)
            {
                _2782 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                _2783 = _2782 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2783)
                {
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2782;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2773 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _1594;
                        float _2958 = _2917.y - _1595;
                        float _2959 = _2917.z - _1596;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_475, _478, _481), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4292 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _1594;
                        float _2993 = (-0.0) - _1595;
                        float _2994 = (-0.0) - _1596;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3008 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _536;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2999 + _2964;
                        float _3020 = _3000 + _2965;
                        float _3021 = _3001 + _2966;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_475, _478, _481), vec3(_2999, _3000, _3001));
                        float _4308 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3033 = dot(vec3(_475, _478, _481), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4319 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2977 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2967) + _3042;
                        float _4330 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4341 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3040 * _3040) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2826 = (_2988 * _2936.x) + _2894;
                        _2827 = (_2988 * _2936.y) + _2895;
                        _2828 = (_2988 * _2936.z) + _2896;
                        _2823 = (_3068 * _2953.x) + _2891;
                        _2824 = (_3068 * _2953.y) + _2892;
                        _2825 = (_3068 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_66_pred = _2828;
                    frontier_phi_66_pred_1 = _2827;
                    frontier_phi_66_pred_2 = _2826;
                    frontier_phi_66_pred_3 = _2825;
                    frontier_phi_66_pred_4 = _2824;
                    frontier_phi_66_pred_5 = _2823;
                }
                _2633 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2774 = _2773 + 1u;
                if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2767 = _2623;
                    _2768 = _2625;
                    _2769 = _2627;
                    _2770 = _2629;
                    _2771 = _2631;
                    _2772 = _2633;
                    _2773 = _2774;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((4294967295u << _2639) & _2517) == 0u)
        {
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
        }
        else
        {
            float _2760 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
            float _2761 = _2760 * _1594;
            float _2762 = _2760 * _1595;
            float _2763 = _2760 * _1596;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2874 = _2622;
                float _2875 = _2624;
                float _2876 = _2626;
                float _2877 = _2628;
                float _2878 = _2630;
                float _2879 = _2632;
                uint _2880 = _2639;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2890)
                    {
                        frontier_phi_72_pred = _2879;
                        frontier_phi_72_pred_1 = _2878;
                        frontier_phi_72_pred_2 = _2877;
                        frontier_phi_72_pred_3 = _2876;
                        frontier_phi_72_pred_4 = _2875;
                        frontier_phi_72_pred_5 = _2874;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3086 = _2874;
                        float _3087 = _2875;
                        float _3088 = _2876;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        uint _3092 = _2889;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3161;
                        vec4 _3177;
                        float _3224;
                        bool _3225;
                        for (;;)
                        {
                            uint _3103 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3148 = (_3103 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3103 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3180 = (_3103 * 40u) + 24u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3199 = (_3103 * 40u) + 28u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3224 = fma(_1596, _3212.z, fma(_1595, _3212.y, _3212.x * _1594)) + _3212.w;
                            _3225 = !((fma(_1596, _3193.z, fma(_1595, _3193.y, _3193.x * _1594)) + _3193.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3225)
                            {
                                float _3252 = _3118.x - _1594;
                                float _3253 = _3118.y - _1595;
                                float _3254 = _3118.z - _1596;
                                float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                                float _3258 = inversesqrt(_3255);
                                float _3259 = _3258 * _3252;
                                float _3260 = _3258 * _3253;
                                float _3261 = _3258 * _3254;
                                float _3265 = 1.0 - (_3255 / (_3119 * _3119));
                                float _4352 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3270 = sqrt(_3255) * _3134.w;
                                float _3272 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                                float _3273 = _3272 * _3272;
                                float _3276 = ((1.0 - _3273) * dot(vec3(_3259, _3260, _3261), vec3(_475, _478, _481))) + _3273;
                                float _3279 = _3270 * _3270;
                                float _3283 = (fma(_1596, _3161.z, fma(_1595, _3161.y, _3161.x * _1594)) + _3161.w) / _3224;
                                float _3284 = (fma(_1596, _3177.z, fma(_1595, _3177.y, _3177.x * _1594)) + _3177.w) / _3224;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4368 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3266) / ((_3279 * 0.699999988079071044921875) + 1.0));
                                float _3302 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _536;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3259 - _2761;
                                float _3314 = _3260 - _2762;
                                float _3315 = _3261 - _2763;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2761, (-0.0) - _2762, (-0.0) - _2763));
                                float _4379 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3327 = dot(vec3(_475, _478, _481), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4390 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3272 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_475, _478, _481), vec3(_3259, _3260, _3261))) + _3336;
                                float _4401 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4412 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3289 * _3266) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3334 * _3334) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3290 * _3134.y;
                                frontier_phi_78_pred_1 = _3290 * _3134.x;
                                frontier_phi_78_pred_2 = _3364 * _3146.z;
                                frontier_phi_78_pred_3 = _3364 * _3146.y;
                                frontier_phi_78_pred_4 = _3364 * _3146.x;
                                frontier_phi_78_pred_5 = _3290 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_78_pred;
                            _3371 = frontier_phi_78_pred_1;
                            _3370 = frontier_phi_78_pred_2;
                            _3369 = frontier_phi_78_pred_3;
                            _3368 = frontier_phi_78_pred_4;
                            _3373 = frontier_phi_78_pred_5;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3078;
                        frontier_phi_72_pred_1 = _3077;
                        frontier_phi_72_pred_2 = _3076;
                        frontier_phi_72_pred_3 = _3075;
                        frontier_phi_72_pred_4 = _3074;
                        frontier_phi_72_pred_5 = _3073;
                    }
                    _2746 = frontier_phi_72_pred;
                    _2744 = frontier_phi_72_pred_1;
                    _2742 = frontier_phi_72_pred_2;
                    _2740 = frontier_phi_72_pred_3;
                    _2738 = frontier_phi_72_pred_4;
                    _2736 = frontier_phi_72_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2736;
                        _2875 = _2738;
                        _2876 = _2740;
                        _2877 = _2742;
                        _2878 = _2744;
                        _2879 = _2746;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2746;
                frontier_phi_60_61_ladder_1 = _2744;
                frontier_phi_60_61_ladder_2 = _2740;
                frontier_phi_60_61_ladder_3 = _2738;
                frontier_phi_60_61_ladder_4 = _2736;
                frontier_phi_60_61_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_60_61_ladder = _2632;
                frontier_phi_60_61_ladder_1 = _2630;
                frontier_phi_60_61_ladder_2 = _2626;
                frontier_phi_60_61_ladder_3 = _2624;
                frontier_phi_60_61_ladder_4 = _2622;
                frontier_phi_60_61_ladder_5 = _2628;
            }
            _2735 = frontier_phi_60_61_ladder_4;
            _2737 = frontier_phi_60_61_ladder_3;
            _2739 = frontier_phi_60_61_ladder_2;
            _2741 = frontier_phi_60_61_ladder_5;
            _2743 = frontier_phi_60_61_ladder_1;
            _2745 = frontier_phi_60_61_ladder;
        }
        float _2750 = isnan(1.0) ? _520 : (isnan(_520) ? 1.0 : min(_520, 1.0));
        _2530 = (_2750 * _2741) + _2061;
        _2532 = (_2750 * _2743) + _2063;
        _2534 = (_2750 * _2745) + _2065;
        _2536 = ((_2735 * 0.039999999105930328369140625) * _2750) + _2384;
        _2538 = ((_2737 * 0.039999999105930328369140625) * _2750) + _2386;
        _2540 = ((_2739 * 0.039999999105930328369140625) * _2750) + _2388;
    }
    else
    {
        _2530 = _2061;
        _2532 = _2063;
        _2534 = _2065;
        _2536 = _2384;
        _2538 = _2386;
        _2540 = _2388;
    }
    uint _2546 = _496 + uint(cbMatDynParam._m0[0u].w);
    float _4428 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4439 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4450 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _2577 = (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2530 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _520))) + ((_2536 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + (((_350 * cbMtdParam._m0[11u].x) * (_334.x + _319.x)) * cbInstanceData._m0[_2546].x);
    float _2579 = ((((_350 * cbMtdParam._m0[11u].y) * (_334.y + _319.y)) * cbInstanceData._m0[_2546].y) + ((_2538 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2532 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _520)));
    float _2581 = ((((_350 * cbMtdParam._m0[11u].z) * (_334.z + _319.z)) * cbInstanceData._m0[_2546].z) + ((_2540 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2534 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _520)));
    uint _2585 = _494 + 6u;
    float _2593 = _453 / cbSceneParam._m0[86u].x;
    float _2594 = _454 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _386 : (isnan(_386) ? cbSceneParam._m0[77u].w : min(_386, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_386 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_386) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _386 : min(cbSceneParam._m0[80u].w, _386));
        float _2648 = _2647 / _386;
        float _2659 = _2648 * _438;
        float _2660 = _439 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _440;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2796 = 1.0 / cbSceneParam._m0[80u].x;
            float _2797 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2798 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            _2836 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2807 - _2808) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))))) * _2796)) - ((exp2(_2683 * _2807) - exp2(_2683 * _2808)) * _2796))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2613);
        _2685 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2687 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2689 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2691 = _2847 * _2613;
    }
    else
    {
        _2685 = _2610;
        _2687 = _2611;
        _2689 = _2612;
        _2691 = _2613;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)));
    float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


