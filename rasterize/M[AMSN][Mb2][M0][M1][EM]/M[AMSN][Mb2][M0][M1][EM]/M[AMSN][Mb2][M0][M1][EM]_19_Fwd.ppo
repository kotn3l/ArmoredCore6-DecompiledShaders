#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1164;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3519 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _362 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_343.x + 0.00999999977648258209228515625));
    float _364 = _362 * (cbMtdParam._m0[15u].x + 1.0);
    float _3530 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _373 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _365) + _321;
    float _374 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _365) + _322;
    float _375 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _365) + _323;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _390 = _388.x;
    float _408 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _390) * _314) + _390;
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _431 = (_421.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3541 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _453 = _449.z;
    float _456 = (_449.x * 2.0) + (-1.0);
    float _457 = (_449.y * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3552 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))));
    float _466 = (_314 * (_421.z - _453)) + _453;
    float _469 = _362 * (cbMtdParam._m0[14u].w + 1.0);
    float _3563 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _473 = ((cbMtdParam._m0[14u].y - _466) * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) + _466;
    vec4 _499 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _525 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _540 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _554 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_499.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3574 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _562 = (_314 * (_429 - _456)) + _456;
    float _563 = (_314 * (_431 - _457)) + _457;
    float _564 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) - _463)) + _463;
    vec4 _583 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _589 = (_583.x * 2.0) + (-1.0);
    float _590 = (_583.y * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _3585 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _607 = (_365 * (((_562 * cbMtdParam._m0[13u].z) - _562) + _589)) + _562;
    float _608 = (_365 * (((_563 * cbMtdParam._m0[13u].z) - _563) + _590)) + _563;
    float _609 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) - _564)) + _564;
    float _612 = fma(_609, _222 * NORMAL.x, fma(_608, _229 * TANGENT.x, (_215 * _207) * _607));
    float _615 = fma(_609, _222 * NORMAL.y, fma(_608, _229 * TANGENT.y, (_215 * _208) * _607));
    float _618 = fma(_609, _222 * NORMAL.z, fma(_608, _229 * TANGENT.z, (_215 * _209) * _607));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3596 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _626 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3618 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3629 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3640 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _630 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _696 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _686);
    float _697 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _686);
    float _698 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _686);
    float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
    float _703 = _696 * _702;
    float _704 = _697 * _702;
    float _705 = _698 * _702;
    float _711 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _712 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _730 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _733 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _736 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _749 = uint(roundEven(NORMAL.w)) * 13u;
    uint _750 = _749 + 9u;
    uint _751 = _750 + uint(cbMatDynParam._m0[0u].w);
    float _757 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_751].x;
    float _758 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_751].y;
    float _759 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_751].z;
    float _3651 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _763 = 1.0 - _630;
    float _764 = _760 * _763;
    float _765 = _761 * _763;
    float _766 = _762 * _763;
    float _771 = (_760 + (-0.039999999105930328369140625)) * _630;
    float _772 = (_761 + (-0.039999999105930328369140625)) * _630;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _630;
    float _774 = _771 + 0.039999999105930328369140625;
    float _776 = _772 + 0.039999999105930328369140625;
    float _777 = _773 + 0.039999999105930328369140625;
    vec4 _786 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _711, cbSceneParam._m0[86u].y * _712));
    float _789 = _786.x * TEXCOORD_3.w;
    float _790 = dot(vec3(_623, _624, _625), vec3(_703, _704, _705));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _623) - _703;
    float _798 = (_793 * _624) - _704;
    float _799 = (_793 * _625) - _705;
    float _803 = abs(dot(vec3(_703, _704, _705), vec3(_623, _624, _625)));
    float _3684 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_626);
    float _818 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _824 = (1.0 - _818) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _825 = _818 * _805;
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1163;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _888 = fma(_861, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853));
        float _892 = fma(_861, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853));
        float _896 = fma(_861, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853));
        float _921 = _853 + _623;
        float _922 = _857 + _624;
        float _923 = _861 + _625;
        float _933 = fma(_923, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921)) - _888;
        float _934 = fma(_923, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921)) - _892;
        float _935 = fma(_923, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921)) - _896;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_888 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_892 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[34u].z) + ((((((_896 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _991 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_957.x + (-0.5));
        float _993 = _991 * (_957.y + (-0.5));
        float _994 = _991 * (_957.z + (-0.5));
        float _1001 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_964.x + (-0.5));
        float _1003 = _1001 * (_964.y + (-0.5));
        float _1004 = _1001 * (_964.z + (-0.5));
        float _1011 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_971.x + (-0.5));
        float _1013 = _1011 * (_971.y + (-0.5));
        float _1014 = _1011 * (_971.z + (-0.5));
        float _1021 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_978.x + (-0.5));
        float _1023 = _1021 * (_978.y + (-0.5));
        float _1024 = _1021 * (_978.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1045 = (dot(vec3(_623, _624, _625), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1055 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3732 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1057 + 1.0))) + _1062) * _1025;
        float _1072 = _993 * 0.5;
        float _1073 = _1003 * 0.5;
        float _1074 = _1013 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_623, _624, _625), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3765 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1099 + 1.0))) + _1104) * _1026;
        float _1114 = _994 * 0.5;
        float _1115 = _1004 * 0.5;
        float _1116 = _1014 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_623, _624, _625), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3798 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1141 + 1.0))) + _1146) * _1027;
        _1163 = _994;
        _1165 = _993;
        _1166 = _992;
        _1167 = _1004;
        _1168 = _1003;
        _1169 = _1002;
        _1170 = _1014;
        _1171 = _1013;
        _1172 = _1012;
        _1173 = _1027;
        _1174 = _1026;
        _1175 = _1025;
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _1164;
        _1165 = _1164;
        _1166 = _1164;
        _1167 = _1164;
        _1168 = _1164;
        _1169 = _1164;
        _1170 = _1164;
        _1171 = _1164;
        _1172 = _1164;
        _1173 = _1164;
        _1174 = _1164;
        _1175 = _1164;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1204 = fma(_861, cbModelParam._m0[30u].z, fma(_857, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853));
        float _1208 = fma(_861, cbModelParam._m0[31u].z, fma(_857, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853));
        float _1212 = fma(_861, cbModelParam._m0[32u].z, fma(_857, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853));
        float _1235 = _853 + _623;
        float _1236 = _857 + _624;
        float _1237 = _861 + _625;
        float _1247 = fma(_1237, cbModelParam._m0[30u].z, fma(_1236, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235)) - _1204;
        float _1248 = fma(_1237, cbModelParam._m0[31u].z, fma(_1236, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235)) - _1208;
        float _1249 = fma(_1237, cbModelParam._m0[32u].z, fma(_1236, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235)) - _1212;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1204 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1208 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[35u].z) + ((((((_1212 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1303 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1270.x + (-0.5));
        float _1305 = _1303 * (_1270.y + (-0.5));
        float _1306 = _1303 * (_1270.z + (-0.5));
        float _1313 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1277.x + (-0.5));
        float _1315 = _1313 * (_1277.y + (-0.5));
        float _1316 = _1313 * (_1277.z + (-0.5));
        float _1323 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1284.x + (-0.5));
        float _1325 = _1323 * (_1284.y + (-0.5));
        float _1326 = _1323 * (_1284.z + (-0.5));
        float _1333 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1291.x + (-0.5));
        float _1335 = _1333 * (_1291.y + (-0.5));
        float _1336 = _1333 * (_1291.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_623, _624, _625), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3861 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1367 + 1.0))) + _1372) * _1337;
        float _1382 = _1305 * 0.5;
        float _1383 = _1315 * 0.5;
        float _1384 = _1325 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_623, _624, _625), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3894 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1409 + 1.0))) + _1414) * _1338;
        float _1424 = _1306 * 0.5;
        float _1425 = _1316 * 0.5;
        float _1426 = _1326 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_623, _624, _625), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3927 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1451 + 1.0))) + _1456) * _1339;
        _1473 = _1306;
        _1474 = _1305;
        _1475 = _1304;
        _1476 = _1316;
        _1477 = _1315;
        _1478 = _1314;
        _1479 = _1326;
        _1480 = _1325;
        _1481 = _1324;
        _1482 = _1339;
        _1483 = _1338;
        _1484 = _1337;
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1164;
        _1474 = _1164;
        _1475 = _1164;
        _1476 = _1164;
        _1477 = _1164;
        _1478 = _1164;
        _1479 = _1164;
        _1480 = _1164;
        _1481 = _1164;
        _1482 = _1164;
        _1483 = _1164;
        _1484 = _1164;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1176)) + _1176;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1177)) + _1177;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1178)) + _1178;
    float _1520 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1523 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1526 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1497));
    float _1541 = _797 * 0.5;
    float _1542 = _798 * 0.5;
    float _1543 = _799 * 0.5;
    float _1544 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1547 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1550 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1584;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1557 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1163, _1167, _1170, _1173));
        float _1561 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1565 = dot(vec4(_1541, _1542, _1543, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1572 = dot(vec4(cbModelParam._m0[39u]), vec4(_1541, _1542, _1543, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1572) ? 0.0 : (isnan(0.0) ? _1572 : max(0.0, _1572))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1595;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1586 = dot(vec4(cbModelParam._m0[40u]), vec4(_1541, _1542, _1543, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1599 = (_1595 * cbModelParam._m0[1u].x) + (_1584 * (1.0 - cbModelParam._m0[1u].x));
    float _1609 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1609 : min(cbModelParam._m0[25u].z, _1609));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1657 = fma(_861, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853)) + cbModelParam._m0[13u].w;
        float _1661 = fma(_861, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853)) + cbModelParam._m0[14u].w;
        float _1665 = fma(_861, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853)) + cbModelParam._m0[15u].w;
        float _1668 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1671 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1674 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1702;
        if (_1668 > 0.0)
        {
            _1702 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1702 = frontier_phi_14_12_ladder;
        }
        float _1906;
        if (_1671 > 0.0)
        {
            _1906 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1906 = frontier_phi_23_19_ladder;
        }
        float _2160;
        if (_1674 > 0.0)
        {
            _2160 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2160 = frontier_phi_35_30_ladder;
        }
        float _2162 = isnan(_1906) ? _1702 : (isnan(_1702) ? _1906 : min(_1702, _1906));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1668) + _1657;
        float _2168 = (_2163 * _1671) + _1661;
        float _2169 = (_2163 * _1674) + _1665;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2170;
        float _2174 = _2170 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 > _2174) || ((_2168 < _2172) || ((_2167 < _2172) || (_2167 > _2174))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1610);
            frontier_phi_13_35_ladder = _2297.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2297.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2297.x * cbModelParam._m0[1u].y;
        }
        _1690 = frontier_phi_13_35_ladder_2;
        _1692 = frontier_phi_13_35_ladder_1;
        _1694 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1610);
        _1690 = _1678.x * cbModelParam._m0[1u].y;
        _1692 = _1678.y * cbModelParam._m0[1u].y;
        _1694 = _1678.z * cbModelParam._m0[1u].y;
    }
    float _1698 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1698 : min(cbModelParam._m0[25u].w, _1698));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1754 = fma(_861, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853)) + cbModelParam._m0[21u].w;
        float _1758 = fma(_861, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853)) + cbModelParam._m0[22u].w;
        float _1762 = fma(_861, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853)) + cbModelParam._m0[23u].w;
        float _1765 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1768 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1771 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1911;
        if (_1765 > 0.0)
        {
            _1911 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2187;
        if (_1768 > 0.0)
        {
            _2187 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2187 = frontier_phi_37_32_ladder;
        }
        float _2400;
        if (_1771 > 0.0)
        {
            _2400 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2400 = frontier_phi_46_43_ladder;
        }
        float _2402 = isnan(_2187) ? _1911 : (isnan(_1911) ? _2187 : min(_1911, _2187));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1765) + _1754;
        float _2408 = (_2403 * _1768) + _1758;
        float _2409 = (_2403 * _1771) + _1762;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1699);
            frontier_phi_22_46_ladder = _2633.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2633.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2633.x * cbModelParam._m0[1u].z;
        }
        _1790 = frontier_phi_22_46_ladder_2;
        _1792 = frontier_phi_22_46_ladder_1;
        _1794 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1699);
        _1790 = _1774.x * cbModelParam._m0[1u].z;
        _1792 = _1774.y * cbModelParam._m0[1u].z;
        _1794 = _1774.z * cbModelParam._m0[1u].z;
    }
    float _1807 = (((_824 * _774) + _825) * _789) * ((cbModelParam._m0[1u].w * (_1790 - _1690)) + _1690);
    float _1809 = (((_824 * _776) + _825) * _789) * ((cbModelParam._m0[1u].w * (_1792 - _1692)) + _1692);
    float _1811 = (((_824 * _777) + _825) * _789) * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1814 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, _1807 * cbSceneParam._m0[91u].x));
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_749 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _789 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1865 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1869 = _1832 | 1u;
    float _1880 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_623, _624, _625));
    float _1883 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_623, _624, _625));
    float _4063 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _4074 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1888 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1890 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1897 = ((cbLight._m0[_1849].x * _1855) * _1890) + ((cbLight._m0[_1859].x * _1865) * _1888);
    float _1898 = ((_1855 * cbLight._m0[_1849].y) * _1890) + ((_1865 * cbLight._m0[_1859].y) * _1888);
    float _1899 = ((_1855 * cbLight._m0[_1849].z) * _1890) + ((_1865 * cbLight._m0[_1859].z) * _1888);
    uvec4 _1903 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1905 = _1903.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1905)
    {
        _1916 = _1897;
        _1918 = _1898;
        _1920 = _1899;
    }
    else
    {
        uint _1924 = _1832 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4085 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1943 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1897;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1898;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1899;
    }
    bool _1923 = _1903.y == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1923)
    {
        _1961 = _1916;
        _1963 = _1918;
        _1965 = _1920;
    }
    else
    {
        uint _2131 = _1832 + 7u;
        float _2147 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_623, _624, _625)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _4101 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2150 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1961 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _1916;
        _1963 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _1918;
        _1965 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _1920;
    }
    uint _1968 = _1832 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _626) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1832].x + _703;
    float _1984 = cbLight._m0[_1832].y + _704;
    float _1985 = cbLight._m0[_1832].z + _705;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1832].xyz));
    float _4117 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _1997 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _1998 = dot(vec3(_623, _624, _625), vec3(_1990, _1991, _1992));
    float _4139 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1990, _1991, _1992));
    float _4150 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
    float _2019 = 0.959999978542327880859375 - _771;
    float _2021 = 0.959999978542327880859375 - _772;
    float _2022 = 0.959999978542327880859375 - _773;
    float _2029 = 1.0 - _1982;
    float _2040 = (0.5 / (((_1997 * ((_1996 * _2029) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2029) + _1982) * _1996))) * _1996;
    float _4161 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2053 = _1832 + 9u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _626) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1869].x + _703;
    float _2067 = cbLight._m0[_1869].y + _704;
    float _2068 = cbLight._m0[_1869].z + _705;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1869].xyz));
    float _4172 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2080 = dot(vec3(_623, _624, _625), vec3(_2073, _2074, _2075));
    float _4183 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2073, _2074, _2075));
    float _4194 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2065 * _2065;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
    float _2106 = 1.0 - _2065;
    float _2116 = (0.5 / (((_1997 * ((_2079 * _2106) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2106) + _2065) * _2079))) * _2079;
    float _4205 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    float _2128 = (((((_2099 * _2019) + _774) * cbLight._m0[_2053].x) * _2118) * _1855) + (((((_2018 * _2019) + _774) * cbLight._m0[_1968].x) * _2042) * _1865);
    float _2129 = (((((_2099 * _2021) + _776) * cbLight._m0[_2053].y) * _2118) * _1855) + (((((_2018 * _2021) + _776) * cbLight._m0[_1968].y) * _2042) * _1865);
    float _2130 = (((((_2099 * _2022) + _777) * cbLight._m0[_2053].z) * _2118) * _1855) + (((((_2018 * _2022) + _777) * cbLight._m0[_1968].z) * _2042) * _1865);
    float _2192;
    float _2194;
    float _2196;
    if (_1905)
    {
        _2192 = _2128;
        _2194 = _2129;
        _2196 = _2130;
    }
    else
    {
        uint _2198 = _1832 + 2u;
        uint _2202 = _1832 + 10u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _626) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _703;
        float _2219 = cbLight._m0[_2198].y + _704;
        float _2220 = cbLight._m0[_2198].z + _705;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2198].xyz));
        float _4216 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2232 = dot(vec3(_623, _624, _625), vec3(_2225, _2226, _2227));
        float _4227 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4238 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0);
        float _2258 = 1.0 - _2217;
        float _2268 = (0.5 / (((_1997 * ((_2231 * _2258) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2258) + _2217) * _2231))) * _2231;
        float _4249 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2192 = (((((_2251 * _2019) + _774) * cbLight._m0[_2202].x) * _2270) * _2271) + _2128;
        _2194 = (((((_2251 * _2021) + _776) * cbLight._m0[_2202].y) * _2270) * _2271) + _2129;
        _2196 = (((((_2251 * _2022) + _777) * cbLight._m0[_2202].z) * _2270) * _2271) + _2130;
    }
    float _2306;
    float _2308;
    float _2310;
    if (_1923)
    {
        _2306 = _2192;
        _2308 = _2194;
        _2310 = _2196;
    }
    else
    {
        uint _2317 = _1832 + 3u;
        uint _2321 = _1832 + 11u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _626) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _703;
        float _2338 = cbLight._m0[_2317].y + _704;
        float _2339 = cbLight._m0[_2317].z + _705;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2317].xyz));
        float _4265 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2351 = dot(vec3(_623, _624, _625), vec3(_2344, _2345, _2346));
        float _4276 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4287 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
        float _2377 = 1.0 - _2336;
        float _2387 = (0.5 / (((_1997 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2377) + _2336) * _2350))) * _2350;
        float _4298 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2306 = (((((_2370 * _2019) + _774) * cbLight._m0[_2321].x) * _2389) * _2390) + _2192;
        _2308 = (((((_2370 * _2021) + _776) * cbLight._m0[_2321].y) * _2389) * _2390) + _2194;
        _2310 = (((((_2370 * _2022) + _777) * cbLight._m0[_2321].z) * _2389) * _2390) + _2196;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1830.y == 0u)
    {
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2465;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2465;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2465;
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.x;
        uint _2492 = uint((float(_2480.y) * floor(float(uint(cbSceneParam._m0[85u].y * _712) / _2481))) + floor(float(uint(cbSceneParam._m0[85u].x * _711) / _2481)));
        float _2502 = (log2(_2468 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2503 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        uint _2506 = uint(isnan(14.0) ? _2503 : (isnan(_2503) ? 14.0 : min(_2503, 14.0)));
        uvec4 _2511 = texelFetch(g_lightClusterGridBuffer, int(((_2506 << 2u) + (_2492 << 6u)) >> 2u));
        uint _2512 = _2511.x;
        uint _2513 = _2480.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2513 >> 4u) & 15u)) + 4294967295u) & _2512) == 0u) || ((_2513 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2799)
                {
                    frontier_phi_61_pred = _2783;
                    frontier_phi_61_pred_1 = _2788;
                    frontier_phi_61_pred_2 = _2787;
                    frontier_phi_61_pred_3 = _2786;
                    frontier_phi_61_pred_4 = _2785;
                    frontier_phi_61_pred_5 = _2784;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2798;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2789 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _2466;
                        float _2974 = _2933.y - _2467;
                        float _2975 = _2933.z - _2468;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_730, _733, _736), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4324 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _2466;
                        float _3009 = (-0.0) - _2467;
                        float _3010 = (-0.0) - _2468;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3025 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3026 = 1.0 - _805;
                        float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                        float _3034 = _3033 * _3033;
                        float _3035 = _3034 * _3034;
                        float _3036 = _3015 + _2980;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3046 = dot(vec3(_730, _733, _736), vec3(_3015, _3016, _3017));
                        float _4340 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3050 = dot(vec3(_730, _733, _736), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                        float _4351 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                        float _3058 = _2993 * _3034;
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _2983) + _3059;
                        float _4362 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3064 = 1.0 - _3034;
                        float _3074 = (0.5 / (((_3063 * ((_3049 * _3064) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3034) * _3049))) * _3063;
                        float _4373 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3085 = (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3057 * _3057) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2842 = (_3004 * _2952.x) + _2910;
                        _2843 = (_3004 * _2952.y) + _2911;
                        _2844 = (_3004 * _2952.z) + _2912;
                        _2839 = (_3085 * _2969.x) + _2907;
                        _2840 = (_3085 * _2969.y) + _2908;
                        _2841 = (_3085 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_61_pred = _2839;
                    frontier_phi_61_pred_1 = _2844;
                    frontier_phi_61_pred_2 = _2843;
                    frontier_phi_61_pred_3 = _2842;
                    frontier_phi_61_pred_4 = _2841;
                    frontier_phi_61_pred_5 = _2840;
                }
                _2639 = frontier_phi_61_pred;
                _2649 = frontier_phi_61_pred_1;
                _2647 = frontier_phi_61_pred_2;
                _2645 = frontier_phi_61_pred_3;
                _2643 = frontier_phi_61_pred_4;
                _2641 = frontier_phi_61_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2639;
                    _2784 = _2641;
                    _2785 = _2643;
                    _2786 = _2645;
                    _2787 = _2647;
                    _2788 = _2649;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2655) & _2512) == 0u)
        {
            _2751 = _2638;
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
            float _2777 = _2776 * _2466;
            float _2778 = _2776 * _2467;
            float _2779 = _2776 * _2468;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2890 = _2638;
                float _2891 = _2640;
                float _2892 = _2642;
                float _2893 = _2644;
                float _2894 = _2646;
                float _2895 = _2648;
                uint _2896 = _2655;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2906)
                    {
                        frontier_phi_67_pred = _2893;
                        frontier_phi_67_pred_1 = _2894;
                        frontier_phi_67_pred_2 = _2895;
                        frontier_phi_67_pred_3 = _2892;
                        frontier_phi_67_pred_4 = _2891;
                        frontier_phi_67_pred_5 = _2890;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        uint _3109 = _2905;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3194;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3120 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3120 * 40u) + 20u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3120 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3120 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2468, _3229.z, fma(_2467, _3229.y, _3229.x * _2466)) + _3229.w;
                            _3242 = !((fma(_2468, _3210.z, fma(_2467, _3210.y, _3210.x * _2466)) + _3210.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3135.x - _2466;
                                float _3270 = _3135.y - _2467;
                                float _3271 = _3135.z - _2468;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3136 * _3136));
                                float _4384 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3287 = sqrt(_3272) * _3151.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_730, _733, _736))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2468, _3178.z, fma(_2467, _3178.y, _3178.x * _2466)) + _3178.w) / _3241;
                                float _3301 = (fma(_2468, _3194.z, fma(_2467, _3194.y, _3194.x * _2466)) + _3194.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4400 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _805;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2777;
                                float _3331 = _3277 - _2778;
                                float _3332 = _3278 - _2779;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_730, _733, _736), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4411 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3344 = dot(vec3(_730, _733, _736), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4422 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_730, _733, _736), vec3(_3276, _3277, _3278))) + _3353;
                                float _4433 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4444 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3381 * _3163.x;
                                frontier_phi_73_pred_1 = _3381 * _3163.y;
                                frontier_phi_73_pred_2 = _3307 * _3151.z;
                                frontier_phi_73_pred_3 = _3307 * _3151.y;
                                frontier_phi_73_pred_4 = _3307 * _3151.x;
                                frontier_phi_73_pred_5 = _3381 * _3163.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_73_pred;
                            _3386 = frontier_phi_73_pred_1;
                            _3390 = frontier_phi_73_pred_2;
                            _3389 = frontier_phi_73_pred_3;
                            _3388 = frontier_phi_73_pred_4;
                            _3387 = frontier_phi_73_pred_5;
                            _3093 = _3388 + _3106;
                            _3094 = _3389 + _3107;
                            _3095 = _3390 + _3108;
                            _3090 = _3385 + _3103;
                            _3091 = _3386 + _3104;
                            _3092 = _3387 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3093;
                        frontier_phi_67_pred_1 = _3094;
                        frontier_phi_67_pred_2 = _3095;
                        frontier_phi_67_pred_3 = _3092;
                        frontier_phi_67_pred_4 = _3091;
                        frontier_phi_67_pred_5 = _3090;
                    }
                    _2758 = frontier_phi_67_pred;
                    _2760 = frontier_phi_67_pred_1;
                    _2762 = frontier_phi_67_pred_2;
                    _2756 = frontier_phi_67_pred_3;
                    _2754 = frontier_phi_67_pred_4;
                    _2752 = frontier_phi_67_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2752;
                        _2891 = _2754;
                        _2892 = _2756;
                        _2893 = _2758;
                        _2894 = _2760;
                        _2895 = _2762;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2760;
                frontier_phi_55_56_ladder_1 = _2762;
                frontier_phi_55_56_ladder_2 = _2758;
                frontier_phi_55_56_ladder_3 = _2756;
                frontier_phi_55_56_ladder_4 = _2754;
                frontier_phi_55_56_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_55_56_ladder = _2646;
                frontier_phi_55_56_ladder_1 = _2648;
                frontier_phi_55_56_ladder_2 = _2644;
                frontier_phi_55_56_ladder_3 = _2642;
                frontier_phi_55_56_ladder_4 = _2640;
                frontier_phi_55_56_ladder_5 = _2638;
            }
            _2751 = frontier_phi_55_56_ladder_5;
            _2753 = frontier_phi_55_56_ladder_4;
            _2755 = frontier_phi_55_56_ladder_3;
            _2757 = frontier_phi_55_56_ladder_2;
            _2759 = frontier_phi_55_56_ladder;
            _2761 = frontier_phi_55_56_ladder_1;
        }
        float _2766 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2525 = (_2766 * _2757) + _1961;
        _2527 = (_2766 * _2759) + _1963;
        _2529 = (_2766 * _2761) + _1965;
        _2531 = ((_2751 * _774) * _2766) + _2306;
        _2533 = ((_2753 * _776) * _2766) + _2308;
        _2535 = ((_2755 * _777) * _2766) + _2310;
    }
    else
    {
        _2525 = _1961;
        _2527 = _1963;
        _2529 = _1965;
        _2531 = _2306;
        _2533 = _2308;
        _2535 = _2310;
    }
    uint _2541 = _750 + uint(cbMatDynParam._m0[0u].w);
    float _4460 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4471 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4482 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2572 = (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2525 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _789))) + ((_2531 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1599)) * cbPerFrame._m0[3u].x)) + (((_555 * cbMtdParam._m0[11u].x) * (_540.x + _525.x)) * cbInstanceData._m0[_2541].x);
    float _2574 = ((((_555 * cbMtdParam._m0[11u].y) * (_540.y + _525.y)) * cbInstanceData._m0[_2541].y) + ((_2533 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1599)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2527 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _789)));
    float _2576 = ((((_555 * cbMtdParam._m0[11u].z) * (_540.z + _525.z)) * cbInstanceData._m0[_2541].z) + ((_2535 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1599)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2529 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _789)));
    uint _2580 = _749 + 6u;
    float _2588 = _711 / cbSceneParam._m0[86u].x;
    float _2589 = _712 / cbSceneParam._m0[86u].y;
    vec4 _2603 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2605 = _2603.x;
    float _2606 = _2603.y;
    float _2607 = _2603.z;
    float _2608 = _2603.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2664 = _2663 / _646;
        float _2675 = _2664 * _696;
        float _2676 = _697 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2679 = _2664 * _698;
        float _2681 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2676;
        float _2689 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2852;
        if (abs((_2677 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2852 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2814 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2852 = ((abs(_2689 / _2677) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2699 * _2823) - exp2(_2699 * _2824)) * _2812))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, 1.0), 0.0);
        float _2863 = exp2((_2852 * (-1.44269502162933349609375)) * (1.0 - _2854.w));
        float _2864 = log2(_2863);
        float _2880 = log2(_2608);
        _2701 = (exp2(_2880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].x)) * _2854.x) / cbSceneParam._m0[78u].x)) + _2605;
        _2703 = (exp2(_2880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].y)) * _2854.y) / cbSceneParam._m0[78u].y)) + _2606;
        _2705 = (exp2(_2880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].z)) * _2854.z) / cbSceneParam._m0[78u].z)) + _2607;
        _2707 = _2863 * _2608;
    }
    else
    {
        _2701 = _2605;
        _2703 = _2606;
        _2705 = _2607;
        _2707 = _2608;
    }
    float _2719 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2720 = _2719 == 3.0;
    float _2721 = log2(_2707);
    float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)));
    float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)));
    float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2739 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2739 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.y = _2739 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.z = _2739 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.w = cbInstanceData._m0[_2580].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2580].w;
}


