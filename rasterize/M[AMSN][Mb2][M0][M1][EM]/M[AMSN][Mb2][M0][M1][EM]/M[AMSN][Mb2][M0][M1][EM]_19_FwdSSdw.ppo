#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1166;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3545 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _364 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_345.x + 0.00999999977648258209228515625));
    float _366 = _364 * (cbMtdParam._m0[15u].x + 1.0);
    float _3556 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _375 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _367) + _323;
    float _376 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _367) + _324;
    float _377 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _367) + _325;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _392 = _390.x;
    float _410 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _392) * _316) + _392;
    vec4 _423 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _431 = (_423.x * 2.0) + (-1.0);
    float _433 = (_423.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_431, _433), vec2(_431, _433));
    float _3567 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    vec4 _451 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _455 = _451.z;
    float _458 = (_451.x * 2.0) + (-1.0);
    float _459 = (_451.y * 2.0) + (-1.0);
    float _460 = dot(vec2(_458, _459), vec2(_458, _459));
    float _3578 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _468 = (_316 * (_423.z - _455)) + _455;
    float _471 = _364 * (cbMtdParam._m0[14u].w + 1.0);
    float _3589 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _475 = ((cbMtdParam._m0[14u].y - _468) * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) + _468;
    vec4 _501 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _527 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _542 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _556 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_501.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3600 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _564 = (_316 * (_431 - _458)) + _458;
    float _565 = (_316 * (_433 - _459)) + _459;
    float _566 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) - _465)) + _465;
    vec4 _585 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _591 = (_585.x * 2.0) + (-1.0);
    float _592 = (_585.y * 2.0) + (-1.0);
    float _593 = dot(vec2(_591, _592), vec2(_591, _592));
    float _3611 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _609 = (_367 * (((_564 * cbMtdParam._m0[13u].z) - _564) + _591)) + _564;
    float _610 = (_367 * (((_565 * cbMtdParam._m0[13u].z) - _565) + _592)) + _565;
    float _611 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) - _566)) + _566;
    float _614 = fma(_611, _224 * NORMAL.x, fma(_610, _231 * TANGENT.x, (_217 * _209) * _609));
    float _617 = fma(_611, _224 * NORMAL.y, fma(_610, _231 * TANGENT.y, (_217 * _210) * _609));
    float _620 = fma(_611, _224 * NORMAL.z, fma(_610, _231 * TANGENT.z, (_217 * _211) * _609));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3622 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _628 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3644 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3655 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3666 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _632 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _698 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _688);
    float _699 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _688);
    float _700 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _688);
    float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
    float _705 = _698 * _704;
    float _706 = _699 * _704;
    float _707 = _700 * _704;
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _732 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _735 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _738 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _751 = uint(roundEven(NORMAL.w)) * 13u;
    uint _752 = _751 + 9u;
    uint _753 = _752 + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3677 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _765 = 1.0 - _632;
    float _766 = _762 * _765;
    float _767 = _763 * _765;
    float _768 = _764 * _765;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _632;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _632;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _632;
    float _776 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _791 = _788.x * TEXCOORD_3.w;
    float _792 = dot(vec3(_625, _626, _627), vec3(_705, _706, _707));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _625) - _705;
    float _800 = (_795 * _626) - _706;
    float _801 = (_795 * _627) - _707;
    float _805 = abs(dot(vec3(_705, _706, _707), vec3(_625, _626, _627)));
    float _3710 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_628);
    float _820 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _826 = (1.0 - _820) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _807;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _894 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _898 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _923 = _855 + _625;
        float _924 = _859 + _626;
        float _925 = _863 + _627;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _890;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _894;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _898;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_625, _626, _627), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3758 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_625, _626, _627), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3791 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_625, _626, _627), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3824 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1210 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1214 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1237 = _855 + _625;
        float _1238 = _859 + _626;
        float _1239 = _863 + _627;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_625, _626, _627), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3887 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_625, _626, _627), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3920 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_625, _626, _627), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3953 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1166;
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = _1166;
        _1486 = _1166;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1178)) + _1178;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _799 * 0.5;
    float _1544 = _800 * 0.5;
    float _1545 = _801 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1673 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1676 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1704 = frontier_phi_14_12_ladder;
        }
        float _1929;
        if (_1673 > 0.0)
        {
            _1929 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1929 = frontier_phi_23_19_ladder;
        }
        float _2186;
        if (_1676 > 0.0)
        {
            _2186 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2186 = frontier_phi_35_30_ladder;
        }
        float _2188 = isnan(_1929) ? _1704 : (isnan(_1704) ? _1929 : min(_1704, _1929));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1670) + _1659;
        float _2194 = (_2189 * _1673) + _1663;
        float _2195 = (_2189 * _1676) + _1667;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_13_35_ladder = _2323.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2323.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_13_35_ladder_2;
        _1694 = frontier_phi_13_35_ladder_1;
        _1696 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1612);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1770 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1773 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1934;
        if (_1767 > 0.0)
        {
            _1934 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2213;
        if (_1770 > 0.0)
        {
            _2213 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2213 = frontier_phi_37_32_ladder;
        }
        float _2426;
        if (_1773 > 0.0)
        {
            _2426 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2426 = frontier_phi_46_43_ladder;
        }
        float _2428 = isnan(_2213) ? _1934 : (isnan(_1934) ? _2213 : min(_1934, _2213));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1767) + _1756;
        float _2434 = (_2429 * _1770) + _1760;
        float _2435 = (_2429 * _1773) + _1764;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_22_46_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_22_46_ladder_2;
        _1794 = frontier_phi_22_46_ladder_1;
        _1796 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1701);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1809 = (((_826 * _776) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1792 - _1692)) + _1692);
    float _1811 = (((_826 * _778) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1813 = (((_826 * _779) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    vec4 _1830 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_713, _714));
    float _1832 = _1830.w;
    float _1844 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1832);
    float _1845 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1832);
    float _1846 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1832);
    uvec4 _1850 = floatBitsToUint(cbInstanceData._m0[_751 + 5u]);
    uint _1852 = _1850.x * 14u;
    uint _1853 = _1852 + 13u;
    float _1860 = _791 + (-1.0);
    float _1865 = (cbLight._m0[_1853].x * _1860) + 1.0;
    float _1866 = (cbLight._m0[_1853].y * _1860) + 1.0;
    float _1867 = (cbLight._m0[_1853].z * _1860) + 1.0;
    float _1868 = (cbLight._m0[_1853].w * _1860) + 1.0;
    uint _1869 = _1852 + 5u;
    float _1875 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1879 = _1852 + 4u;
    float _1888 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1892 = _1852 | 1u;
    float _1903 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_625, _626, _627));
    float _1906 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_625, _626, _627));
    float _4089 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _4100 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1911 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1913 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1920 = ((cbLight._m0[_1869].x * _1875) * _1913) + (((cbLight._m0[_1879].x * _1844) * _1888) * _1911);
    float _1921 = ((_1875 * cbLight._m0[_1869].y) * _1913) + (((cbLight._m0[_1879].y * _1845) * _1888) * _1911);
    float _1922 = ((_1875 * cbLight._m0[_1869].z) * _1913) + (((cbLight._m0[_1879].z * _1846) * _1888) * _1911);
    uvec4 _1926 = floatBitsToUint(cbLight._m0[_1852 + 12u]);
    bool _1928 = _1926.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1928)
    {
        _1939 = _1920;
        _1941 = _1921;
        _1943 = _1922;
    }
    else
    {
        uint _1947 = _1852 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1852 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _4111 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1966 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1920;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1921;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1922;
    }
    bool _1946 = _1926.y == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1946)
    {
        _1984 = _1939;
        _1986 = _1941;
        _1988 = _1943;
    }
    else
    {
        uint _2157 = _1852 + 7u;
        float _2173 = (dot(vec3(cbLight._m0[_1852 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4127 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2176 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1984 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _1939;
        _1986 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _1941;
        _1988 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _1943;
    }
    uint _1991 = _1852 + 8u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _628) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1852].x + _705;
    float _2007 = cbLight._m0[_1852].y + _706;
    float _2008 = cbLight._m0[_1852].z + _707;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1852].xyz));
    float _4143 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2020 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2021 = dot(vec3(_625, _626, _627), vec3(_2013, _2014, _2015));
    float _4165 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2013, _2014, _2015));
    float _4176 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2005 * _2005;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2041 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
    float _2042 = 0.959999978542327880859375 - _773;
    float _2044 = 0.959999978542327880859375 - _774;
    float _2045 = 0.959999978542327880859375 - _775;
    float _2052 = 1.0 - _2005;
    float _2063 = (0.5 / (((_2020 * ((_2019 * _2052) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2052) + _2005) * _2019))) * _2019;
    float _4187 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    uint _2079 = _1852 + 9u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _628) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1892].x + _705;
    float _2093 = cbLight._m0[_1892].y + _706;
    float _2094 = cbLight._m0[_1892].z + _707;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1892].xyz));
    float _4198 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2106 = dot(vec3(_625, _626, _627), vec3(_2099, _2100, _2101));
    float _4209 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2099, _2100, _2101));
    float _4220 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2091 * _2091;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
    float _2132 = 1.0 - _2091;
    float _2142 = (0.5 / (((_2020 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2132) + _2091) * _2105))) * _2105;
    float _4231 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    float _2154 = (((((_2125 * _2042) + _776) * cbLight._m0[_2079].x) * _2144) * _1875) + ((((cbLight._m0[_1991].x * _1844) * ((_2041 * _2042) + _776)) * _2065) * _1888);
    float _2155 = (((((_2125 * _2044) + _778) * cbLight._m0[_2079].y) * _2144) * _1875) + ((((cbLight._m0[_1991].y * _1845) * ((_2041 * _2044) + _778)) * _2065) * _1888);
    float _2156 = (((((_2125 * _2045) + _779) * cbLight._m0[_2079].z) * _2144) * _1875) + ((((cbLight._m0[_1991].z * _1846) * ((_2041 * _2045) + _779)) * _2065) * _1888);
    float _2218;
    float _2220;
    float _2222;
    if (_1928)
    {
        _2218 = _2154;
        _2220 = _2155;
        _2222 = _2156;
    }
    else
    {
        uint _2224 = _1852 + 2u;
        uint _2228 = _1852 + 10u;
        float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _628) * 0.949999988079071044921875);
        float _2243 = _2242 * _2242;
        float _2244 = cbLight._m0[_2224].x + _705;
        float _2245 = cbLight._m0[_2224].y + _706;
        float _2246 = cbLight._m0[_2224].z + _707;
        float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
        float _2251 = _2250 * _2244;
        float _2252 = _2250 * _2245;
        float _2253 = _2250 * _2246;
        float _2254 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2224].xyz));
        float _4242 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2258 = dot(vec3(_625, _626, _627), vec3(_2251, _2252, _2253));
        float _4253 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2262 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2251, _2252, _2253));
        float _4264 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2266 = _2243 * _2243;
        float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
        float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
        float _2284 = 1.0 - _2243;
        float _2294 = (0.5 / (((_2020 * ((_2257 * _2284) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2284) + _2243) * _2257))) * _2257;
        float _4275 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2218 = (((((_2277 * _2042) + _776) * cbLight._m0[_2228].x) * _2296) * _2297) + _2154;
        _2220 = (((((_2277 * _2044) + _778) * cbLight._m0[_2228].y) * _2296) * _2297) + _2155;
        _2222 = (((((_2277 * _2045) + _779) * cbLight._m0[_2228].z) * _2296) * _2297) + _2156;
    }
    float _2332;
    float _2334;
    float _2336;
    if (_1946)
    {
        _2332 = _2218;
        _2334 = _2220;
        _2336 = _2222;
    }
    else
    {
        uint _2343 = _1852 + 3u;
        uint _2347 = _1852 + 11u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _628) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _705;
        float _2364 = cbLight._m0[_2343].y + _706;
        float _2365 = cbLight._m0[_2343].z + _707;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2343].xyz));
        float _4291 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2377 = dot(vec3(_625, _626, _627), vec3(_2370, _2371, _2372));
        float _4302 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4313 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
        float _2403 = 1.0 - _2362;
        float _2413 = (0.5 / (((_2020 * ((_2376 * _2403) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2403) + _2362) * _2376))) * _2376;
        float _4324 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2332 = (((((_2396 * _2042) + _776) * cbLight._m0[_2347].x) * _2415) * _2416) + _2218;
        _2334 = (((((_2396 * _2044) + _778) * cbLight._m0[_2347].y) * _2415) * _2416) + _2220;
        _2336 = (((((_2396 * _2045) + _779) * cbLight._m0[_2347].z) * _2415) * _2416) + _2222;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1850.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            uint _2815 = 0u;
            uint _2824;
            bool _2825;
            for (;;)
            {
                _2824 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                _2825 = _2824 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2825)
                {
                    frontier_phi_61_pred = _2809;
                    frontier_phi_61_pred_1 = _2814;
                    frontier_phi_61_pred_2 = _2813;
                    frontier_phi_61_pred_3 = _2812;
                    frontier_phi_61_pred_4 = _2811;
                    frontier_phi_61_pred_5 = _2810;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2824;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2815 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _2492;
                        float _3000 = _2959.y - _2493;
                        float _3001 = _2959.z - _2494;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_732, _735, _738), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4350 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _2492;
                        float _3035 = (-0.0) - _2493;
                        float _3036 = (-0.0) - _2494;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3051 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _807;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_732, _735, _738), vec3(_3041, _3042, _3043));
                        float _4366 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3076 = dot(vec3(_732, _735, _738), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4377 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3019 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3009) + _3085;
                        float _4388 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4399 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3083 * _3083) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2868 = (_3030 * _2978.x) + _2936;
                        _2869 = (_3030 * _2978.y) + _2937;
                        _2870 = (_3030 * _2978.z) + _2938;
                        _2865 = (_3111 * _2995.x) + _2933;
                        _2866 = (_3111 * _2995.y) + _2934;
                        _2867 = (_3111 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_61_pred = _2865;
                    frontier_phi_61_pred_1 = _2870;
                    frontier_phi_61_pred_2 = _2869;
                    frontier_phi_61_pred_3 = _2868;
                    frontier_phi_61_pred_4 = _2867;
                    frontier_phi_61_pred_5 = _2866;
                }
                _2665 = frontier_phi_61_pred;
                _2675 = frontier_phi_61_pred_1;
                _2673 = frontier_phi_61_pred_2;
                _2671 = frontier_phi_61_pred_3;
                _2669 = frontier_phi_61_pred_4;
                _2667 = frontier_phi_61_pred_5;
                uint _2816 = _2815 + 1u;
                if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2809 = _2665;
                    _2810 = _2667;
                    _2811 = _2669;
                    _2812 = _2671;
                    _2813 = _2673;
                    _2814 = _2675;
                    _2815 = _2816;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((4294967295u << _2681) & _2538) == 0u)
        {
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
        }
        else
        {
            float _2802 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2803 = _2802 * _2492;
            float _2804 = _2802 * _2493;
            float _2805 = _2802 * _2494;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2916 = _2664;
                float _2917 = _2666;
                float _2918 = _2668;
                float _2919 = _2670;
                float _2920 = _2672;
                float _2921 = _2674;
                uint _2922 = _2681;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2932)
                    {
                        frontier_phi_67_pred = _2919;
                        frontier_phi_67_pred_1 = _2920;
                        frontier_phi_67_pred_2 = _2921;
                        frontier_phi_67_pred_3 = _2918;
                        frontier_phi_67_pred_4 = _2917;
                        frontier_phi_67_pred_5 = _2916;
                    }
                    else
                    {
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        uint _3135 = _2931;
                        uint _3136;
                        vec4 _3161;
                        float _3162;
                        vec4 _3177;
                        vec3 _3189;
                        vec4 _3204;
                        vec4 _3220;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3146 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 4u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3146 * 40u) + 8u;
                            _3189 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x));
                            uint _3191 = (_3146 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3146 * 40u) + 20u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3146 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3146 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_2494, _3255.z, fma(_2493, _3255.y, _3255.x * _2492)) + _3255.w;
                            _3268 = !((fma(_2494, _3236.z, fma(_2493, _3236.y, _3236.x * _2492)) + _3236.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3161.x - _2492;
                                float _3296 = _3161.y - _2493;
                                float _3297 = _3161.z - _2494;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3162 * _3162));
                                float _4410 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3313 = sqrt(_3298) * _3177.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_732, _735, _738))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_2494, _3204.z, fma(_2493, _3204.y, _3204.x * _2492)) + _3204.w) / _3267;
                                float _3327 = (fma(_2494, _3220.z, fma(_2493, _3220.y, _3220.x * _2492)) + _3220.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4426 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _807;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2803;
                                float _3357 = _3303 - _2804;
                                float _3358 = _3304 - _2805;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_732, _735, _738), vec3((-0.0) - _2803, (-0.0) - _2804, (-0.0) - _2805));
                                float _4437 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3370 = dot(vec3(_732, _735, _738), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4448 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_732, _735, _738), vec3(_3302, _3303, _3304))) + _3379;
                                float _4459 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4470 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3407 * _3189.x;
                                frontier_phi_73_pred_1 = _3407 * _3189.y;
                                frontier_phi_73_pred_2 = _3333 * _3177.z;
                                frontier_phi_73_pred_3 = _3333 * _3177.y;
                                frontier_phi_73_pred_4 = _3333 * _3177.x;
                                frontier_phi_73_pred_5 = _3407 * _3189.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_73_pred;
                            _3412 = frontier_phi_73_pred_1;
                            _3416 = frontier_phi_73_pred_2;
                            _3415 = frontier_phi_73_pred_3;
                            _3414 = frontier_phi_73_pred_4;
                            _3413 = frontier_phi_73_pred_5;
                            _3119 = _3414 + _3132;
                            _3120 = _3415 + _3133;
                            _3121 = _3416 + _3134;
                            _3116 = _3411 + _3129;
                            _3117 = _3412 + _3130;
                            _3118 = _3413 + _3131;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3119;
                        frontier_phi_67_pred_1 = _3120;
                        frontier_phi_67_pred_2 = _3121;
                        frontier_phi_67_pred_3 = _3118;
                        frontier_phi_67_pred_4 = _3117;
                        frontier_phi_67_pred_5 = _3116;
                    }
                    _2784 = frontier_phi_67_pred;
                    _2786 = frontier_phi_67_pred_1;
                    _2788 = frontier_phi_67_pred_2;
                    _2782 = frontier_phi_67_pred_3;
                    _2780 = frontier_phi_67_pred_4;
                    _2778 = frontier_phi_67_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2778;
                        _2917 = _2780;
                        _2918 = _2782;
                        _2919 = _2784;
                        _2920 = _2786;
                        _2921 = _2788;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2786;
                frontier_phi_55_56_ladder_1 = _2788;
                frontier_phi_55_56_ladder_2 = _2784;
                frontier_phi_55_56_ladder_3 = _2782;
                frontier_phi_55_56_ladder_4 = _2780;
                frontier_phi_55_56_ladder_5 = _2778;
            }
            else
            {
                frontier_phi_55_56_ladder = _2672;
                frontier_phi_55_56_ladder_1 = _2674;
                frontier_phi_55_56_ladder_2 = _2670;
                frontier_phi_55_56_ladder_3 = _2668;
                frontier_phi_55_56_ladder_4 = _2666;
                frontier_phi_55_56_ladder_5 = _2664;
            }
            _2777 = frontier_phi_55_56_ladder_5;
            _2779 = frontier_phi_55_56_ladder_4;
            _2781 = frontier_phi_55_56_ladder_3;
            _2783 = frontier_phi_55_56_ladder_2;
            _2785 = frontier_phi_55_56_ladder;
            _2787 = frontier_phi_55_56_ladder_1;
        }
        float _2792 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2551 = (_2792 * _2783) + _1984;
        _2553 = (_2792 * _2785) + _1986;
        _2555 = (_2792 * _2787) + _1988;
        _2557 = ((_2777 * _776) * _2792) + _2332;
        _2559 = ((_2779 * _778) * _2792) + _2334;
        _2561 = ((_2781 * _779) * _2792) + _2336;
    }
    else
    {
        _2551 = _1984;
        _2553 = _1986;
        _2555 = _1988;
        _2557 = _2332;
        _2559 = _2334;
        _2561 = _2336;
    }
    uint _2567 = _752 + uint(cbMatDynParam._m0[0u].w);
    float _4486 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4497 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4508 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2598 = (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2551 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _791))) + ((_2557 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + (((_557 * cbMtdParam._m0[11u].x) * (_542.x + _527.x)) * cbInstanceData._m0[_2567].x);
    float _2600 = ((((_557 * cbMtdParam._m0[11u].y) * (_542.y + _527.y)) * cbInstanceData._m0[_2567].y) + ((_2559 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2553 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _791)));
    float _2602 = ((((_557 * cbMtdParam._m0[11u].z) * (_542.z + _527.z)) * cbInstanceData._m0[_2567].z) + ((_2561 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2555 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _791)));
    uint _2606 = _751 + 6u;
    float _2614 = _713 / cbSceneParam._m0[86u].x;
    float _2615 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2690 = _2689 / _648;
        float _2701 = _2690 * _698;
        float _2702 = _699 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2705 = _2690 * _700;
        float _2707 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2702;
        float _2715 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2878;
        if (abs((_2703 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2878 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2840 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _2878 = ((abs(_2715 / _2703) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2725 * _2849) - exp2(_2725 * _2850)) * _2838))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2880 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2889 = exp2((_2878 * (-1.44269502162933349609375)) * (1.0 - _2880.w));
        float _2890 = log2(_2889);
        float _2906 = log2(_2634);
        _2727 = (exp2(_2906 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].x)) * _2880.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2729 = (exp2(_2906 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].y)) * _2880.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2731 = (exp2(_2906 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].z)) * _2880.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2733 = _2889 * _2634;
    }
    else
    {
        _2727 = _2631;
        _2729 = _2632;
        _2731 = _2633;
        _2733 = _2634;
    }
    float _2745 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2746 = _2745 == 3.0;
    float _2747 = log2(_2733);
    float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0)));
    float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)));
    float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)));
    float _2765 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2765 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.y = _2765 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.z = _2765 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.w = cbInstanceData._m0[_2606].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2606].w;
}


