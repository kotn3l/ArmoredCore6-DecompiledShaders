#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1042;
float _3714;
float _3715;
float _3716;
float _3717;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _307 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3726 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _315 = (((_291.x * cbMtdParam._m0[10u].x) - _251) * _308) + _251;
    float _316 = (((_291.y * cbMtdParam._m0[10u].y) - _252) * _308) + _252;
    float _317 = (((_291.z * cbMtdParam._m0[10u].z) - _253) * _308) + _253;
    vec4 _337 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _360 = (_352.x * 2.0) + (-1.0);
    float _362 = (_352.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_360, _362), vec2(_360, _362));
    float _3737 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    vec4 _380 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _384 = _380.z;
    float _387 = (_380.x * 2.0) + (-1.0);
    float _388 = (_380.y * 2.0) + (-1.0);
    float _389 = dot(vec2(_387, _388), vec2(_387, _388));
    float _3748 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _394 = sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))));
    float _397 = (_308 * (_352.z - _384)) + _384;
    vec4 _424 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _439 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _453 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_337.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3759 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _461 = (_308 * (_360 - _387)) + _387;
    float _462 = (_308 * (_362 - _388)) + _388;
    float _463 = (_308 * (sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) - _394)) + _394;
    float _466 = fma(_463, _216 * NORMAL.x, fma(_462, _223 * TANGENT.x, (_209 * _201) * _461));
    float _469 = fma(_463, _216 * NORMAL.y, fma(_462, _223 * TANGENT.y, (_209 * _202) * _461));
    float _472 = fma(_463, _216 * NORMAL.z, fma(_462, _223 * TANGENT.z, (_209 * _203) * _461));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _479 = _476 * _472;
    float _3770 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _480 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3792 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3803 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _550 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _540);
    float _551 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _540);
    float _552 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _540);
    float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
    float _557 = _550 * _556;
    float _558 = _551 * _556;
    float _559 = _552 * _556;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _722 = sqrt(((_550 * _550) + (_551 * _551)) + (_552 * _552));
        float _728 = (cbMatDynParam._m0[5u].x * _722) + cbMatDynParam._m0[5u].y;
        float _3814 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _733 = (cbMatDynParam._m0[5u].z * _722) + cbMatDynParam._m0[5u].w;
        float _3825 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) - _729)) + _729) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_479, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _601 = fma(_479, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _604 = fma(_479, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3836 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    vec4 _639 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _642 = _639.x * TEXCOORD_3.w;
    float _643 = dot(vec3(_477, _478, _479), vec3(_557, _558, _559));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _477) - _557;
    float _651 = (_646 * _478) - _558;
    float _652 = (_646 * _479) - _559;
    float _656 = abs(dot(vec3(_557, _558, _559), vec3(_477, _478, _479)));
    float _3869 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_480);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_711, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703));
        float _770 = fma(_711, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703));
        float _774 = fma(_711, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703));
        float _799 = _703 + _477;
        float _800 = _707 + _478;
        float _801 = _711 + _479;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _766;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _770;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _774;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_477, _478, _479), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3917 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_477, _478, _479), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3950 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_477, _478, _479), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3983 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_711, cbModelParam._m0[30u].z, fma(_707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _703));
        float _1089 = fma(_711, cbModelParam._m0[31u].z, fma(_707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _703));
        float _1093 = fma(_711, cbModelParam._m0[32u].z, fma(_707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _703));
        float _1116 = _703 + _477;
        float _1117 = _707 + _478;
        float _1118 = _711 + _479;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_477, _478, _479), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4046 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_477, _478, _479), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4079 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_477, _478, _479), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4112 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = _1042;
        _1364 = _1042;
        _1365 = _1042;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _650 * 0.5;
    float _1423 = _651 * 0.5;
    float _1424 = _652 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _480);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_711, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_711, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_711, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1552 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1555 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1583 = frontier_phi_17_15_ladder;
        }
        float _1755;
        if (_1552 > 0.0)
        {
            _1755 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1755 = frontier_phi_26_22_ladder;
        }
        float _2050;
        if (_1555 > 0.0)
        {
            _2050 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2050 = frontier_phi_38_33_ladder;
        }
        float _2052 = isnan(_1755) ? _1583 : (isnan(_1583) ? _1755 : min(_1583, _1755));
        float _2053 = isnan(_2050) ? _2052 : (isnan(_2052) ? _2050 : min(_2052, _2050));
        float _2057 = (_2053 * _1549) + _1538;
        float _2058 = (_2053 * _1552) + _1542;
        float _2059 = (_2053 * _1555) + _1546;
        float _2060 = _2053 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2060;
        float _2064 = _2060 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 > _2064) || ((_2058 < _2062) || ((_2057 < _2062) || (_2057 > _2064))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2204 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2059, cbModelParam._m0[9u].z, fma(_2058, cbModelParam._m0[9u].y, _2057 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2059, cbModelParam._m0[10u].z, fma(_2058, cbModelParam._m0[10u].y, _2057 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2059, cbModelParam._m0[11u].z, fma(_2058, cbModelParam._m0[11u].y, _2057 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_16_38_ladder = _2204.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2204.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2204.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_16_38_ladder_2;
        _1573 = frontier_phi_16_38_ladder_1;
        _1575 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _480);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1635 = fma(_711, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703)) + cbModelParam._m0[21u].w;
        float _1639 = fma(_711, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703)) + cbModelParam._m0[22u].w;
        float _1643 = fma(_711, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703)) + cbModelParam._m0[23u].w;
        float _1646 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1649 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1652 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1760;
        if (_1646 > 0.0)
        {
            _1760 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1760 = frontier_phi_28_24_ladder;
        }
        float _2077;
        if (_1649 > 0.0)
        {
            _2077 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2077 = frontier_phi_40_35_ladder;
        }
        float _2404;
        if (_1652 > 0.0)
        {
            _2404 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2404 = frontier_phi_50_47_ladder;
        }
        float _2406 = isnan(_2077) ? _1760 : (isnan(_1760) ? _2077 : min(_1760, _2077));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1646) + _1635;
        float _2412 = (_2407 * _1649) + _1639;
        float _2413 = (_2407 * _1652) + _1643;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_25_50_ladder = _2531.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2531.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2531.x * cbModelParam._m0[1u].z;
        }
        _1671 = frontier_phi_25_50_ladder_2;
        _1673 = frontier_phi_25_50_ladder_1;
        _1675 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1580);
        _1671 = _1655.x * cbModelParam._m0[1u].z;
        _1673 = _1655.y * cbModelParam._m0[1u].z;
        _1675 = _1655.z * cbModelParam._m0[1u].z;
    }
    float _1687 = ((((1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_671 * _658)) * _642;
    float _1688 = _1687 * ((cbModelParam._m0[1u].w * (_1671 - _1571)) + _1571);
    float _1689 = _1687 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1690 = _1687 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, _1688 * cbSceneParam._m0[91u].x));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1747 = _1734 / _1746;
    float _1748 = _1738 / _1746;
    float _1749 = _1742 / _1746;
    float _1896;
    float _1897;
    float _1898;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1776 = ((uint(_1749 > cbSceneParam._m0[59u].y) + uint(_1749 > cbSceneParam._m0[59u].x)) + uint(_1749 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1777 = _1776 + 43u;
        uint _1785 = _1776 + 44u;
        uint _1793 = _1776 + 45u;
        uint _1801 = _1776 + 46u;
        float _1812 = fma(_1746, cbSceneParam._m0[_1777].w, fma(_1742, cbSceneParam._m0[_1777].z, fma(_1738, cbSceneParam._m0[_1777].y, _1734 * cbSceneParam._m0[_1777].x)));
        float _1816 = fma(_1746, cbSceneParam._m0[_1785].w, fma(_1742, cbSceneParam._m0[_1785].z, fma(_1738, cbSceneParam._m0[_1785].y, _1734 * cbSceneParam._m0[_1785].x)));
        float _1824 = fma(_1746, cbSceneParam._m0[_1801].w, fma(_1742, cbSceneParam._m0[_1801].z, fma(_1738, cbSceneParam._m0[_1801].y, _1734 * cbSceneParam._m0[_1801].x)));
        float _1829 = cbSceneParam._m0[33u].z * _1824;
        float _1831 = cbSceneParam._m0[33u].w * _1824;
        float _1834 = fma(_1746, cbSceneParam._m0[_1793].w, fma(_1742, cbSceneParam._m0[_1793].z, fma(_1738, cbSceneParam._m0[_1793].y, _1734 * cbSceneParam._m0[_1793].x))) / _1824;
        float _1882 = (cbSceneParam._m0[33u].x - sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749))) * cbSceneParam._m0[33u].y;
        float _4238 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1889 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 + _1812) / _1824, (_1831 + _1816) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1831 + _1812) / _1824, (_1816 - _1829) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 - _1829) / _1824, (_1816 - _1831) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 - _1831) / _1824, (_1829 + _1816) / _1824), _1834), 0.0)).x), vec4(0.25)));
        _1896 = 1.0 - (_1889 * cbSceneParam._m0[34u].x);
        _1897 = 1.0 - (_1889 * cbSceneParam._m0[34u].y);
        _1898 = 1.0 - (_1889 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1896 = 1.0;
        _1897 = 1.0;
        _1898 = 1.0;
    }
    float _1962;
    float _1964;
    float _1966;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1950 = fma(_1746, cbSceneParam._m0[63u].w, fma(_1742, cbSceneParam._m0[63u].z, fma(_1738, cbSceneParam._m0[63u].y, _1734 * cbSceneParam._m0[63u].x)));
        float _1951 = fma(_1746, cbSceneParam._m0[60u].w, fma(_1742, cbSceneParam._m0[60u].z, fma(_1738, cbSceneParam._m0[60u].y, _1734 * cbSceneParam._m0[60u].x))) / _1950;
        float _1952 = fma(_1746, cbSceneParam._m0[61u].w, fma(_1742, cbSceneParam._m0[61u].z, fma(_1738, cbSceneParam._m0[61u].y, _1734 * cbSceneParam._m0[61u].x))) / _1950;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1951 >= cbSceneParam._m0[64u].x) && (_1952 >= cbSceneParam._m0[64u].y)) && (_1951 <= cbSceneParam._m0[64u].z)) && (_1952 <= cbSceneParam._m0[64u].w))
        {
            float _2090 = fma(_1746, cbSceneParam._m0[62u].w, fma(_1742, cbSceneParam._m0[62u].z, fma(_1738, cbSceneParam._m0[62u].y, _1734 * cbSceneParam._m0[62u].x))) / _1950;
            float _2094 = isnan(cbSceneParam._m0[41u].w) ? _2090 : (isnan(_2090) ? cbSceneParam._m0[41u].w : max(_2090, cbSceneParam._m0[41u].w));
            float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749))) * cbSceneParam._m0[33u].y;
            float _4254 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
            float _2144 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1951, cbSceneParam._m0[33u].w + _1952), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1951, _1952 - cbSceneParam._m0[33u].z), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1951 - cbSceneParam._m0[33u].z, _1952 - cbSceneParam._m0[33u].w), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1951 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1952), _2094), 0.0)).x), vec4(0.25)));
            float _2148 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
            float _2149 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
            float _2150 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2150) ? _1898 : (isnan(_1898) ? _2150 : min(_1898, _2150));
            frontier_phi_37_36_ladder_1 = isnan(_2149) ? _1897 : (isnan(_1897) ? _2149 : min(_1897, _2149));
            frontier_phi_37_36_ladder_2 = isnan(_2148) ? _1896 : (isnan(_1896) ? _2148 : min(_1896, _2148));
        }
        else
        {
            frontier_phi_37_36_ladder = _1898;
            frontier_phi_37_36_ladder_1 = _1897;
            frontier_phi_37_36_ladder_2 = _1896;
        }
        _1962 = frontier_phi_37_36_ladder_2;
        _1964 = frontier_phi_37_36_ladder_1;
        _1966 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1962 = _1896;
        _1964 = _1897;
        _1966 = _1898;
    }
    uvec4 _1971 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1973 = _1971.x * 14u;
    uint _1974 = _1973 + 13u;
    float _1981 = _642 + (-1.0);
    float _1986 = (cbLight._m0[_1974].x * _1981) + 1.0;
    float _1987 = (cbLight._m0[_1974].y * _1981) + 1.0;
    float _1988 = (cbLight._m0[_1974].z * _1981) + 1.0;
    float _1989 = (cbLight._m0[_1974].w * _1981) + 1.0;
    uint _1990 = _1973 + 5u;
    float _1996 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2000 = _1973 + 4u;
    float _2009 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2013 = _1973 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_477, _478, _479));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_477, _478, _479));
    float _4290 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4301 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1990].x * _1996) * _2034) + (((cbLight._m0[_2000].x * _1962) * _2009) * _2032);
    float _2042 = ((_1996 * cbLight._m0[_1990].y) * _2034) + (((cbLight._m0[_2000].y * _1964) * _2009) * _2032);
    float _2043 = ((_1996 * cbLight._m0[_1990].z) * _2034) + (((cbLight._m0[_2000].z * _1966) * _2009) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1973 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2049)
    {
        _2151 = _2041;
        _2153 = _2042;
        _2155 = _2043;
    }
    else
    {
        uint _2159 = _1973 + 6u;
        float _2175 = (dot(vec3(cbLight._m0[_1973 + 2u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4312 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2178 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2151 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _2041;
        _2153 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _2042;
        _2155 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _2043;
    }
    bool _2158 = _2047.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2158)
    {
        _2213 = _2151;
        _2215 = _2153;
        _2217 = _2155;
    }
    else
    {
        uint _2375 = _1973 + 7u;
        float _2391 = (dot(vec3(cbLight._m0[_1973 + 3u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4328 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2394 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2213 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2151;
        _2215 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2153;
        _2217 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2155;
    }
    uint _2220 = _1973 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _480) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_1973].x + _557;
    float _2236 = cbLight._m0[_1973].y + _558;
    float _2237 = cbLight._m0[_1973].z + _559;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1973].xyz));
    float _4344 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2249 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2250 = dot(vec3(_477, _478, _479), vec3(_2242, _2243, _2244));
    float _4366 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2242, _2243, _2244));
    float _4377 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2234;
    float _2285 = (0.5 / (((_2249 * ((_2248 * _2274) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2274) + _2234) * _2248))) * _2248;
    float _4388 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2301 = _1973 + 9u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _480) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2013].x + _557;
    float _2315 = cbLight._m0[_2013].y + _558;
    float _2316 = cbLight._m0[_2013].z + _559;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2013].xyz));
    float _4399 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2328 = dot(vec3(_477, _478, _479), vec3(_2321, _2322, _2323));
    float _4410 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2321, _2322, _2323));
    float _4421 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2313 * _2313;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2350 = 1.0 - _2313;
    float _2360 = (0.5 / (((_2249 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2350) + _2313) * _2327))) * _2327;
    float _4432 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    float _2372 = (((_2349 * cbLight._m0[_2301].x) * _2362) * _1996) + ((((cbLight._m0[_2220].x * _1962) * _2273) * _2287) * _2009);
    float _2373 = (((_2349 * cbLight._m0[_2301].y) * _2362) * _1996) + ((((cbLight._m0[_2220].y * _1964) * _2273) * _2287) * _2009);
    float _2374 = (((_2349 * cbLight._m0[_2301].z) * _2362) * _1996) + ((((cbLight._m0[_2220].z * _1966) * _2273) * _2287) * _2009);
    float _2430;
    float _2432;
    float _2434;
    if (_2049)
    {
        _2430 = _2372;
        _2432 = _2373;
        _2434 = _2374;
    }
    else
    {
        uint _2436 = _1973 + 2u;
        uint _2440 = _1973 + 10u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _480) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _557;
        float _2457 = cbLight._m0[_2436].y + _558;
        float _2458 = cbLight._m0[_2436].z + _559;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2436].xyz));
        float _4443 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2470 = dot(vec3(_477, _478, _479), vec3(_2463, _2464, _2465));
        float _4454 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4465 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2492 = 1.0 - _2455;
        float _2502 = (0.5 / (((_2249 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2492) + _2455) * _2469))) * _2469;
        float _4476 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2430 = (((_2491 * cbLight._m0[_2440].x) * _2504) * _2505) + _2372;
        _2432 = (((_2491 * cbLight._m0[_2440].y) * _2504) * _2505) + _2373;
        _2434 = (((_2491 * cbLight._m0[_2440].z) * _2504) * _2505) + _2374;
    }
    float _2536;
    float _2538;
    float _2540;
    if (_2158)
    {
        _2536 = _2430;
        _2538 = _2432;
        _2540 = _2434;
    }
    else
    {
        uint _2547 = _1973 + 3u;
        uint _2551 = _1973 + 11u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _480) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _557;
        float _2568 = cbLight._m0[_2547].y + _558;
        float _2569 = cbLight._m0[_2547].z + _559;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2547].xyz));
        float _4492 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2581 = dot(vec3(_477, _478, _479), vec3(_2574, _2575, _2576));
        float _4503 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4514 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2249 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2603) + _2566) * _2580))) * _2580;
        float _4525 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2536 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2430;
        _2538 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2432;
        _2540 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2434;
    }
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_1971.y == 0u)
    {
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2638)));
        float _2659 = (log2(_1749 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2943)
                {
                    frontier_phi_71_pred = _2932;
                    frontier_phi_71_pred_1 = _2931;
                    frontier_phi_71_pred_2 = _2930;
                    frontier_phi_71_pred_3 = _2929;
                    frontier_phi_71_pred_4 = _2928;
                    frontier_phi_71_pred_5 = _2927;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2942;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2933 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _1747;
                        float _3139 = _3098.y - _1748;
                        float _3140 = _3098.z - _1749;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_598, _601, _604), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4551 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _1747;
                        float _3174 = (-0.0) - _1748;
                        float _3175 = (-0.0) - _1749;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3189 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _658;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_598, _601, _604), vec3(_3180, _3181, _3182));
                        float _4567 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3214 = dot(vec3(_598, _601, _604), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4578 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3158 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3148) + _3223;
                        float _4589 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4600 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) / ((_3221 * _3221) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3002 = (_3169 * _3117.x) + _3075;
                        _3003 = (_3169 * _3117.y) + _3076;
                        _3004 = (_3169 * _3117.z) + _3077;
                        _2999 = (_3249 * _3134.x) + _3072;
                        _3000 = (_3249 * _3134.y) + _3073;
                        _3001 = (_3249 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_71_pred = _3004;
                    frontier_phi_71_pred_1 = _3003;
                    frontier_phi_71_pred_2 = _3002;
                    frontier_phi_71_pred_3 = _3001;
                    frontier_phi_71_pred_4 = _3000;
                    frontier_phi_71_pred_5 = _2999;
                }
                _2785 = frontier_phi_71_pred;
                _2783 = frontier_phi_71_pred_1;
                _2781 = frontier_phi_71_pred_2;
                _2779 = frontier_phi_71_pred_3;
                _2777 = frontier_phi_71_pred_4;
                _2775 = frontier_phi_71_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2775;
                    _2928 = _2777;
                    _2929 = _2779;
                    _2930 = _2781;
                    _2931 = _2783;
                    _2932 = _2785;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2791) & _2669) == 0u)
        {
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
            float _2921 = _2920 * _1747;
            float _2922 = _2920 * _1748;
            float _2923 = _2920 * _1749;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3055 = _2774;
                float _3056 = _2776;
                float _3057 = _2778;
                float _3058 = _2780;
                float _3059 = _2782;
                float _3060 = _2784;
                uint _3061 = _2791;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3071)
                    {
                        frontier_phi_82_pred = _3060;
                        frontier_phi_82_pred_1 = _3059;
                        frontier_phi_82_pred_2 = _3058;
                        frontier_phi_82_pred_3 = _3057;
                        frontier_phi_82_pred_4 = _3056;
                        frontier_phi_82_pred_5 = _3055;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        uint _3282 = _3070;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3351;
                        vec4 _3367;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3293 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3338 = (_3293 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3354 = (_3293 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3370 = (_3293 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3293 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_1749, _3402.z, fma(_1748, _3402.y, _3402.x * _1747)) + _3402.w;
                            _3415 = !((fma(_1749, _3383.z, fma(_1748, _3383.y, _3383.x * _1747)) + _3383.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3308.x - _1747;
                                float _3443 = _3308.y - _1748;
                                float _3444 = _3308.z - _1749;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3309 * _3309));
                                float _4611 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3460 = sqrt(_3445) * _3324.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_598, _601, _604))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_1749, _3351.z, fma(_1748, _3351.y, _3351.x * _1747)) + _3351.w) / _3414;
                                float _3474 = (fma(_1749, _3367.z, fma(_1748, _3367.y, _3367.x * _1747)) + _3367.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4627 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _658;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2921;
                                float _3504 = _3450 - _2922;
                                float _3505 = _3451 - _2923;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4638 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3517 = dot(vec3(_598, _601, _604), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4649 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_598, _601, _604), vec3(_3449, _3450, _3451))) + _3526;
                                float _4660 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4671 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3480 * _3324.z;
                                frontier_phi_88_pred_1 = _3480 * _3324.y;
                                frontier_phi_88_pred_2 = _3480 * _3324.x;
                                frontier_phi_88_pred_3 = _3554 * _3336.z;
                                frontier_phi_88_pred_4 = _3554 * _3336.y;
                                frontier_phi_88_pred_5 = _3554 * _3336.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_88_pred;
                            _3562 = frontier_phi_88_pred_1;
                            _3561 = frontier_phi_88_pred_2;
                            _3560 = frontier_phi_88_pred_3;
                            _3559 = frontier_phi_88_pred_4;
                            _3558 = frontier_phi_88_pred_5;
                            _3266 = _3561 + _3279;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            _3263 = _3558 + _3276;
                            _3264 = _3559 + _3277;
                            _3265 = _3560 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3268;
                        frontier_phi_82_pred_1 = _3267;
                        frontier_phi_82_pred_2 = _3266;
                        frontier_phi_82_pred_3 = _3265;
                        frontier_phi_82_pred_4 = _3264;
                        frontier_phi_82_pred_5 = _3263;
                    }
                    _2906 = frontier_phi_82_pred;
                    _2904 = frontier_phi_82_pred_1;
                    _2902 = frontier_phi_82_pred_2;
                    _2900 = frontier_phi_82_pred_3;
                    _2898 = frontier_phi_82_pred_4;
                    _2896 = frontier_phi_82_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2896;
                        _3056 = _2898;
                        _3057 = _2900;
                        _3058 = _2902;
                        _3059 = _2904;
                        _3060 = _2906;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2902;
                frontier_phi_63_64_ladder_1 = _2906;
                frontier_phi_63_64_ladder_2 = _2904;
                frontier_phi_63_64_ladder_3 = _2900;
                frontier_phi_63_64_ladder_4 = _2898;
                frontier_phi_63_64_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_63_64_ladder = _2780;
                frontier_phi_63_64_ladder_1 = _2784;
                frontier_phi_63_64_ladder_2 = _2782;
                frontier_phi_63_64_ladder_3 = _2778;
                frontier_phi_63_64_ladder_4 = _2776;
                frontier_phi_63_64_ladder_5 = _2774;
            }
            _2895 = frontier_phi_63_64_ladder_5;
            _2897 = frontier_phi_63_64_ladder_4;
            _2899 = frontier_phi_63_64_ladder_3;
            _2901 = frontier_phi_63_64_ladder;
            _2903 = frontier_phi_63_64_ladder_2;
            _2905 = frontier_phi_63_64_ladder_1;
        }
        float _2910 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2682 = (_2910 * _2901) + _2213;
        _2684 = (_2910 * _2903) + _2215;
        _2686 = (_2910 * _2905) + _2217;
        _2688 = ((_2895 * 0.039999999105930328369140625) * _2910) + _2536;
        _2690 = ((_2897 * 0.039999999105930328369140625) * _2910) + _2538;
        _2692 = ((_2899 * 0.039999999105930328369140625) * _2910) + _2540;
    }
    else
    {
        _2682 = _2213;
        _2684 = _2215;
        _2686 = _2217;
        _2688 = _2536;
        _2690 = _2538;
        _2692 = _2540;
    }
    uint _2698 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _4687 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4698 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4709 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2729 = (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2682 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _642))) + ((_2688 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + (((_454 * cbMtdParam._m0[11u].x) * (_439.x + _424.x)) * cbInstanceData._m0[_2698].x);
    float _2731 = ((((_454 * cbMtdParam._m0[11u].y) * (_439.y + _424.y)) * cbInstanceData._m0[_2698].y) + ((_2690 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2684 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _642)));
    float _2733 = ((((_454 * cbMtdParam._m0[11u].z) * (_439.z + _424.z)) * cbInstanceData._m0[_2698].z) + ((_2692 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2686 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _642)));
    float _2734 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2735 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2736 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    uint _2737 = _617 + 6u;
    float _2745 = _578 / cbSceneParam._m0[86u].x;
    float _2746 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2800 = _2799 / _499;
        float _2811 = _2800 * _550;
        float _2812 = _551 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2815 = _2800 * _552;
        float _2817 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2818 = _2817 + cbSceneParam._m0[79u].w;
        float _2819 = cbSceneParam._m0[79u].w - _2812;
        float _2825 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2815 * _2815));
        float _2828 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2825;
        float _2833 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2835 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2813 - _2817) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2818 > 0.0) ? exp2(_2833 * _2818) : (2.0 - exp2(_2835 * _2818))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2828;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : max(_2818, _2819));
            float _2958 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : min(_2818, _2819));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _3012 = ((abs(_2825 / _2813) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2833 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2833 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2835 * _2967) - exp2(_2835 * _2968)) * _2956))) + (_2828 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2765);
        _2837 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2839 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2841 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2843 = _3023 * _2765;
    }
    else
    {
        _2837 = _2762;
        _2839 = _2763;
        _2841 = _2764;
        _2843 = _2765;
    }
    bool _3050;
    vec4 _2853;
    vec4 _2875;
    float _2877;
    float _2881;
    float _2882;
    float _2883;
    float _2884;
    bool _2894;
    for (;;)
    {
        _2853 = cbMatDynParam._m0[0u];
        float _2855 = roundEven(_2853.y);
        bool _2856 = _2855 == 3.0;
        float _2857 = log2(_2843);
        float _2864 = exp2(_2857 * cbSceneParam._m0[78u].x) * _2734;
        float _2865 = exp2(_2857 * cbSceneParam._m0[78u].y) * _2735;
        float _2866 = exp2(_2857 * cbSceneParam._m0[78u].z) * _2736;
        float _2873 = _566 + (-0.5);
        _2875 = cbMtdParam._m0[1u];
        _2877 = _2875.y * _2873;
        float _2880 = (_2855 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2881 = _2880 * (_2856 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2837)));
        _2882 = _2880 * (_2856 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2839)));
        _2883 = _2880 * (_2856 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2841)));
        _2884 = _2873 * 0.999000012874603271484375;
        _2894 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2894)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2884) < 0.5)
            {
                _3050 = true;
                break;
            }
        }
        uint _2991 = _618 + uint(_2853.w);
        if ((cbInstanceData._m0[_2991].w < 1.0) && ((cbInstanceData._m0[_2991].w + _2884) < 0.5))
        {
            _3050 = true;
            break;
        }
        if ((_2877 + 1.0) < _2875.x)
        {
            _3050 = true;
            break;
        }
        _3050 = false;
        break;
    }
    float _3254;
    if (_3050)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = cbInstanceData._m0[_2737].w;
    }
    SV_Target.x = _2881;
    SV_Target.y = _2882;
    SV_Target.z = _2883;
    SV_Target.w = _3254;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
    discard_exit();
}


