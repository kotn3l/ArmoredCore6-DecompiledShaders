#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1006;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3341 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3352 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))));
    float _332 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3363 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[14u].y - _317) * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) + _317;
    vec4 _365 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _406 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _420 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_365.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3374 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    vec4 _441 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _447 = (_441.x * 2.0) + (-1.0);
    float _448 = (_441.y * 2.0) + (-1.0);
    float _449 = dot(vec2(_447, _448), vec2(_447, _448));
    float _3385 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _465 = (_291 * (((cbMtdParam._m0[13u].z * _321) - _321) + _447)) + _321;
    float _466 = (_291 * (((cbMtdParam._m0[13u].z * _323) - _323) + _448)) + _323;
    float _467 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) - _329)) + _329;
    float _470 = fma(_467, _210 * NORMAL.x, fma(_466, _217 * TANGENT.x, (_203 * _195) * _465));
    float _473 = fma(_467, _210 * NORMAL.y, fma(_466, _217 * TANGENT.y, (_203 * _196) * _465));
    float _476 = fma(_467, _210 * NORMAL.z, fma(_466, _217 * TANGENT.z, (_203 * _197) * _465));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    float _481 = _480 * _470;
    float _482 = _480 * _473;
    float _483 = _480 * _476;
    float _3396 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _484 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3418 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3429 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _503 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    float _568 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _569 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_483, cbSceneParam._m0[5u].z, fma(_482, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _481));
    float _593 = fma(_483, cbSceneParam._m0[6u].z, fma(_482, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _481));
    float _596 = fma(_483, cbSceneParam._m0[7u].z, fma(_482, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _481));
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = _609 + 9u;
    uint _611 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _617 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_611].x;
    float _618 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_611].y;
    float _619 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_611].z;
    float _3440 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _631 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _568, cbSceneParam._m0[86u].y * _569));
    float _634 = _631.x * TEXCOORD_3.w;
    float _635 = dot(vec3(_481, _482, _483), vec3(_560, _561, _562));
    float _638 = _635 * 2.0;
    float _642 = (_638 * _481) - _560;
    float _643 = (_638 * _482) - _561;
    float _644 = (_638 * _483) - _562;
    float _648 = abs(dot(vec3(_560, _561, _562), vec3(_481, _482, _483)));
    float _3473 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _650 = sqrt(_484);
    float _663 = exp2((_650 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1005;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _730 = fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695));
        float _734 = fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695));
        float _738 = fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695));
        float _763 = _695 + _481;
        float _764 = _699 + _482;
        float _765 = _703 + _483;
        float _775 = fma(_765, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763)) - _730;
        float _776 = fma(_765, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763)) - _734;
        float _777 = fma(_765, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763)) - _738;
        float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
        float _794 = ((_781 * _775) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_730 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_781 * _776) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_734 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_781 * _777) / cbModelParam._m0[34u].z) + ((((((_738 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        float _833 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_799.x + (-0.5));
        float _835 = _833 * (_799.y + (-0.5));
        float _836 = _833 * (_799.z + (-0.5));
        float _843 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_806.x + (-0.5));
        float _845 = _843 * (_806.y + (-0.5));
        float _846 = _843 * (_806.z + (-0.5));
        float _853 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_813.x + (-0.5));
        float _855 = _853 * (_813.y + (-0.5));
        float _856 = _853 * (_813.z + (-0.5));
        float _863 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_820.x + (-0.5));
        float _865 = _863 * (_820.y + (-0.5));
        float _866 = _863 * (_820.z + (-0.5));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = _834 * 0.5;
        float _871 = _844 * 0.5;
        float _872 = _854 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _887 = (dot(vec3(_481, _482, _483), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _897 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3521 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_899 + 1.0))) + _904) * _867;
        float _914 = _835 * 0.5;
        float _915 = _845 * 0.5;
        float _916 = _855 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_481, _482, _483), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3554 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_941 + 1.0))) + _946) * _868;
        float _956 = _836 * 0.5;
        float _957 = _846 * 0.5;
        float _958 = _856 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_481, _482, _483), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3587 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_983 + 1.0))) + _988) * _869;
        _1005 = _836;
        _1007 = _835;
        _1008 = _834;
        _1009 = _846;
        _1010 = _845;
        _1011 = _844;
        _1012 = _856;
        _1013 = _855;
        _1014 = _854;
        _1015 = _869;
        _1016 = _868;
        _1017 = _867;
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
    }
    else
    {
        _1005 = _1006;
        _1007 = _1006;
        _1008 = _1006;
        _1009 = _1006;
        _1010 = _1006;
        _1011 = _1006;
        _1012 = _1006;
        _1013 = _1006;
        _1014 = _1006;
        _1015 = _1006;
        _1016 = _1006;
        _1017 = _1006;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1046 = fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695));
        float _1050 = fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695));
        float _1054 = fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695));
        float _1077 = _695 + _481;
        float _1078 = _699 + _482;
        float _1079 = _703 + _483;
        float _1089 = fma(_1079, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077)) - _1046;
        float _1090 = fma(_1079, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077)) - _1050;
        float _1091 = fma(_1079, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077)) - _1054;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1046 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1050 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[35u].z) + ((((((_1054 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1112.x + (-0.5));
        float _1147 = _1145 * (_1112.y + (-0.5));
        float _1148 = _1145 * (_1112.z + (-0.5));
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1119.x + (-0.5));
        float _1157 = _1155 * (_1119.y + (-0.5));
        float _1158 = _1155 * (_1119.z + (-0.5));
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1126.x + (-0.5));
        float _1167 = _1165 * (_1126.y + (-0.5));
        float _1168 = _1165 * (_1126.z + (-0.5));
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_481, _482, _483), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3650 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1209 + 1.0))) + _1214) * _1179;
        float _1224 = _1147 * 0.5;
        float _1225 = _1157 * 0.5;
        float _1226 = _1167 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_481, _482, _483), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3683 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1251 + 1.0))) + _1256) * _1180;
        float _1266 = _1148 * 0.5;
        float _1267 = _1158 * 0.5;
        float _1268 = _1168 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_481, _482, _483), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3716 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1293 + 1.0))) + _1298) * _1181;
        _1315 = _1148;
        _1316 = _1147;
        _1317 = _1146;
        _1318 = _1158;
        _1319 = _1157;
        _1320 = _1156;
        _1321 = _1168;
        _1322 = _1167;
        _1323 = _1166;
        _1324 = _1181;
        _1325 = _1180;
        _1326 = _1179;
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1006;
        _1316 = _1006;
        _1317 = _1006;
        _1318 = _1006;
        _1319 = _1006;
        _1320 = _1006;
        _1321 = _1006;
        _1322 = _1006;
        _1323 = _1006;
        _1324 = _1006;
        _1325 = _1006;
        _1326 = _1006;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1339));
    float _1383 = _642 * 0.5;
    float _1384 = _643 * 0.5;
    float _1385 = _644 * 0.5;
    float _1386 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1389 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1392 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1426;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1399 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1005, _1009, _1012, _1015));
        float _1403 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1407 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1414 = dot(vec4(cbModelParam._m0[39u]), vec4(_1383, _1384, _1385, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1437;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1428 = dot(vec4(cbModelParam._m0[40u]), vec4(_1383, _1384, _1385, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1441 = (_1437 * cbModelParam._m0[1u].x) + (_1426 * (1.0 - cbModelParam._m0[1u].x));
    float _1451 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _484);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1451 : min(cbModelParam._m0[25u].z, _1451));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_644, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642));
        float _1513 = fma(_644, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642));
        float _1516 = fma(_644, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1544 = frontier_phi_14_12_ladder;
        }
        float _1747;
        if (_1513 > 0.0)
        {
            _1747 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1747 = frontier_phi_23_19_ladder;
        }
        float _1990;
        if (_1516 > 0.0)
        {
            _1990 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1990 = frontier_phi_35_30_ladder;
        }
        float _1992 = isnan(_1747) ? _1544 : (isnan(_1544) ? _1747 : min(_1544, _1747));
        float _1993 = isnan(_1990) ? _1992 : (isnan(_1992) ? _1990 : min(_1992, _1990));
        float _1997 = (_1993 * _1510) + _1499;
        float _1998 = (_1993 * _1513) + _1503;
        float _1999 = (_1993 * _1516) + _1507;
        float _2000 = _1993 * 9.9999997473787516355514526367188e-05;
        float _2002 = (-1.0) - _2000;
        float _2004 = _2000 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1999 > _2004) || ((_1999 < _2002) || ((_1998 > _2004) || ((_1998 < _2002) || ((_1997 < _2002) || (_1997 > _2004))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1999, cbModelParam._m0[9u].z, fma(_1998, cbModelParam._m0[9u].y, _1997 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1999, cbModelParam._m0[10u].z, fma(_1998, cbModelParam._m0[10u].y, _1997 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1999, cbModelParam._m0[11u].z, fma(_1998, cbModelParam._m0[11u].y, _1997 * cbModelParam._m0[11u].x))), _1452);
            frontier_phi_13_35_ladder = _2123.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2123.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2123.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_13_35_ladder_2;
        _1534 = frontier_phi_13_35_ladder_1;
        _1536 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_642, _643, _644), _1452);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _484);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_644, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642));
        float _1610 = fma(_644, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642));
        float _1613 = fma(_644, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642));
        float _1752;
        if (_1607 > 0.0)
        {
            _1752 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1752 = frontier_phi_25_21_ladder;
        }
        float _2017;
        if (_1610 > 0.0)
        {
            _2017 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2017 = frontier_phi_37_32_ladder;
        }
        float _2222;
        if (_1613 > 0.0)
        {
            _2222 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2222 = frontier_phi_46_43_ladder;
        }
        float _2224 = isnan(_2017) ? _1752 : (isnan(_1752) ? _2017 : min(_1752, _2017));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1607) + _1596;
        float _2230 = (_2225 * _1610) + _1600;
        float _2231 = (_2225 * _1613) + _1604;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2231, cbModelParam._m0[17u].z, fma(_2230, cbModelParam._m0[17u].y, _2229 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2231, cbModelParam._m0[18u].z, fma(_2230, cbModelParam._m0[18u].y, _2229 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2231, cbModelParam._m0[19u].z, fma(_2230, cbModelParam._m0[19u].y, _2229 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_22_46_ladder = _2455.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2455.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2455.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_22_46_ladder_2;
        _1634 = frontier_phi_22_46_ladder_1;
        _1636 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_642, _643, _644), _1541);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1648 = ((((1.0 - _663) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_663 * _650)) * _634;
    float _1649 = _1648 * ((cbModelParam._m0[1u].w * (_1632 - _1532)) + _1532);
    float _1650 = _1648 * ((cbModelParam._m0[1u].w * (_1634 - _1534)) + _1534);
    float _1651 = _1648 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    uvec4 _1670 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1672 = _1670.x * 14u;
    uint _1673 = _1672 + 13u;
    float _1680 = _634 + (-1.0);
    float _1685 = (cbLight._m0[_1673].x * _1680) + 1.0;
    float _1686 = (cbLight._m0[_1673].y * _1680) + 1.0;
    float _1687 = (cbLight._m0[_1673].z * _1680) + 1.0;
    float _1688 = (cbLight._m0[_1673].w * _1680) + 1.0;
    uint _1689 = _1672 + 5u;
    float _1695 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1699 = _1672 + 4u;
    float _1706 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
    uint _1710 = _1672 | 1u;
    float _1721 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_481, _482, _483));
    float _1724 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_481, _482, _483));
    float _3852 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _3863 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1729 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1731 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1738 = ((cbLight._m0[_1689].x * _1695) * _1731) + ((cbLight._m0[_1699].x * _1706) * _1729);
    float _1739 = ((_1695 * cbLight._m0[_1689].y) * _1731) + ((_1706 * cbLight._m0[_1699].y) * _1729);
    float _1740 = ((_1695 * cbLight._m0[_1689].z) * _1731) + ((_1706 * cbLight._m0[_1699].z) * _1729);
    uvec4 _1744 = floatBitsToUint(cbLight._m0[_1672 + 12u]);
    bool _1746 = _1744.x == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1746)
    {
        _1757 = _1738;
        _1759 = _1739;
        _1761 = _1740;
    }
    else
    {
        uint _1765 = _1672 + 6u;
        float _1781 = (dot(vec3(cbLight._m0[_1672 + 2u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _1782 = _1781 * _1781;
        float _3874 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1784 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
        _1757 = (((cbLight._m0[_1765].x * 0.3183098733425140380859375) * _1783) * _1784) + _1738;
        _1759 = (((cbLight._m0[_1765].y * 0.3183098733425140380859375) * _1783) * _1784) + _1739;
        _1761 = (((cbLight._m0[_1765].z * 0.3183098733425140380859375) * _1783) * _1784) + _1740;
    }
    bool _1764 = _1744.y == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1764)
    {
        _1802 = _1757;
        _1804 = _1759;
        _1806 = _1761;
    }
    else
    {
        uint _1961 = _1672 + 7u;
        float _1977 = (dot(vec3(cbLight._m0[_1672 + 3u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _3890 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1980 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _1802 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1757;
        _1804 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1759;
        _1806 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1761;
    }
    uint _1809 = _1672 + 8u;
    float _1822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1672].w)) * _484) * 0.949999988079071044921875);
    float _1823 = _1822 * _1822;
    float _1824 = cbLight._m0[_1672].x + _560;
    float _1825 = cbLight._m0[_1672].y + _561;
    float _1826 = cbLight._m0[_1672].z + _562;
    float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
    float _1831 = _1830 * _1824;
    float _1832 = _1830 * _1825;
    float _1833 = _1830 * _1826;
    float _1834 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1672].xyz));
    float _3906 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1838 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1839 = dot(vec3(_481, _482, _483), vec3(_1831, _1832, _1833));
    float _3928 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1831, _1832, _1833));
    float _3939 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1823 * _1823;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1823;
    float _1874 = (0.5 / (((_1838 * ((_1837 * _1863) + _1823)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1863) + _1823) * _1837))) * _1837;
    float _3950 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    uint _1887 = _1672 + 9u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _484) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1710].x + _560;
    float _1901 = cbLight._m0[_1710].y + _561;
    float _1902 = cbLight._m0[_1710].z + _562;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1710].xyz));
    float _3961 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1914 = dot(vec3(_481, _482, _483), vec3(_1907, _1908, _1909));
    float _3972 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1907, _1908, _1909));
    float _3983 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1899 * _1899;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = 1.0 - _1899;
    float _1946 = (0.5 / (((_1838 * ((_1913 * _1936) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1936) + _1899) * _1913))) * _1913;
    float _3994 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    float _1958 = (((_1935 * cbLight._m0[_1887].x) * _1948) * _1695) + (((_1862 * cbLight._m0[_1809].x) * _1876) * _1706);
    float _1959 = (((_1935 * cbLight._m0[_1887].y) * _1948) * _1695) + (((_1862 * cbLight._m0[_1809].y) * _1876) * _1706);
    float _1960 = (((_1935 * cbLight._m0[_1887].z) * _1948) * _1695) + (((_1862 * cbLight._m0[_1809].z) * _1876) * _1706);
    float _2022;
    float _2024;
    float _2026;
    if (_1746)
    {
        _2022 = _1958;
        _2024 = _1959;
        _2026 = _1960;
    }
    else
    {
        uint _2028 = _1672 + 2u;
        uint _2032 = _1672 + 10u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _484) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _560;
        float _2049 = cbLight._m0[_2028].y + _561;
        float _2050 = cbLight._m0[_2028].z + _562;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2028].xyz));
        float _4005 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2062 = dot(vec3(_481, _482, _483), vec3(_2055, _2056, _2057));
        float _4016 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _4027 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2084 = 1.0 - _2047;
        float _2094 = (0.5 / (((_1838 * ((_2061 * _2084) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2084) + _2047) * _2061))) * _2061;
        float _4038 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
        _2022 = (((_2083 * cbLight._m0[_2032].x) * _2096) * _2097) + _1958;
        _2024 = (((_2083 * cbLight._m0[_2032].y) * _2096) * _2097) + _1959;
        _2026 = (((_2083 * cbLight._m0[_2032].z) * _2096) * _2097) + _1960;
    }
    float _2132;
    float _2134;
    float _2136;
    if (_1764)
    {
        _2132 = _2022;
        _2134 = _2024;
        _2136 = _2026;
    }
    else
    {
        uint _2143 = _1672 + 3u;
        uint _2147 = _1672 + 11u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _484) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _560;
        float _2164 = cbLight._m0[_2143].y + _561;
        float _2165 = cbLight._m0[_2143].z + _562;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2143].xyz));
        float _4054 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2177 = dot(vec3(_481, _482, _483), vec3(_2170, _2171, _2172));
        float _4065 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4076 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1838 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2199) + _2162) * _2176))) * _2176;
        float _4087 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _2132 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2022;
        _2134 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2024;
        _2136 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2026;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1670.y == 0u)
    {
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2287;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2287;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2287;
        uvec4 _2302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2303 = _2302.x;
        uint _2314 = uint((float(_2302.y) * floor(float(uint(cbSceneParam._m0[85u].y * _569) / _2303))) + floor(float(uint(cbSceneParam._m0[85u].x * _568) / _2303)));
        float _2324 = (log2(_2290 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2325 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        uint _2328 = uint(isnan(14.0) ? _2325 : (isnan(_2325) ? 14.0 : min(_2325, 14.0)));
        uvec4 _2333 = texelFetch(g_lightClusterGridBuffer, int(((_2328 << 2u) + (_2314 << 6u)) >> 2u));
        uint _2334 = _2333.x;
        uint _2335 = _2302.z;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((((1u << ((_2335 >> 4u) & 15u)) + 4294967295u) & _2334) == 0u) || ((_2335 & 240u) == 0u))
        {
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
        }
        else
        {
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            uint _2611 = 0u;
            uint _2620;
            bool _2621;
            for (;;)
            {
                _2620 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2611 << 2u)) >> 2u)).x;
                _2621 = _2620 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2621)
                {
                    frontier_phi_61_pred = _2605;
                    frontier_phi_61_pred_1 = _2610;
                    frontier_phi_61_pred_2 = _2609;
                    frontier_phi_61_pred_3 = _2608;
                    frontier_phi_61_pred_4 = _2607;
                    frontier_phi_61_pred_5 = _2606;
                }
                else
                {
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    uint _2735;
                    _2729 = _2605;
                    _2730 = _2606;
                    _2731 = _2607;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2620;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2739 = uint(findLSB(_2735)) + (_2611 << 5u);
                        uint _2736 = (_2735 + 4294967295u) & _2735;
                        uint _2741 = _2739 * 48u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2761 = (_2739 * 48u) + 4u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2780 = (_2739 * 48u) + 8u;
                        vec3 _2791 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x));
                        float _2795 = _2755.x - _2288;
                        float _2796 = _2755.y - _2289;
                        float _2797 = _2755.z - _2290;
                        float _2798 = dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797));
                        float _2801 = inversesqrt(_2798);
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2805 = dot(vec3(_590, _593, _596), vec3(_2802, _2803, _2804));
                        float _2810 = 1.0 - (_2798 * _2755.w);
                        float _4113 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2812 = sqrt(_2798) * _2774.w;
                        float _2815 = 1.39999997615814208984375 / (_2812 + 1.39999997615814208984375);
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2805) + _2816;
                        float _2822 = _2812 * _2812;
                        float _2826 = ((isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))) * _2811) / ((_2822 * 0.699999988079071044921875) + 1.0);
                        float _2830 = (-0.0) - _2288;
                        float _2831 = (-0.0) - _2289;
                        float _2832 = (-0.0) - _2290;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2847 = exp2(log2(1.0 / ((_2822 * 3.5) + 5.0)) * 0.25);
                        float _2848 = 1.0 - _650;
                        float _2855 = sqrt(1.0 - ((1.0 - (_2848 * _2848)) * (1.0 - (_2847 * _2847))));
                        float _2856 = _2855 * _2855;
                        float _2857 = _2856 * _2856;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2868 = dot(vec3(_590, _593, _596), vec3(_2837, _2838, _2839));
                        float _4129 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2872 = dot(vec3(_590, _593, _596), vec3(_2864 * _2858, _2864 * _2859, _2864 * _2860));
                        float _4140 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2879 = ((_2875 * _2875) * (_2857 + (-1.0))) + 1.0;
                        float _2880 = _2815 * _2856;
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2805) + _2881;
                        float _4151 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2886 = 1.0 - _2856;
                        float _2896 = (0.5 / (((_2885 * ((_2871 * _2886) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2885 * _2886) + _2856) * _2871))) * _2885;
                        float _4162 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2907 = (((_2857 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_2879 * _2879) * ((_2822 * 2.1991131305694580078125) + 3.141590118408203125))) * _2811;
                        _2664 = (_2826 * _2774.x) + _2732;
                        _2665 = (_2826 * _2774.y) + _2733;
                        _2666 = (_2826 * _2774.z) + _2734;
                        _2661 = (_2907 * _2791.x) + _2729;
                        _2662 = (_2907 * _2791.y) + _2730;
                        _2663 = (_2907 * _2791.z) + _2731;
                        if (_2736 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2736;
                        }
                    }
                    frontier_phi_61_pred = _2661;
                    frontier_phi_61_pred_1 = _2666;
                    frontier_phi_61_pred_2 = _2665;
                    frontier_phi_61_pred_3 = _2664;
                    frontier_phi_61_pred_4 = _2663;
                    frontier_phi_61_pred_5 = _2662;
                }
                _2461 = frontier_phi_61_pred;
                _2471 = frontier_phi_61_pred_1;
                _2469 = frontier_phi_61_pred_2;
                _2467 = frontier_phi_61_pred_3;
                _2465 = frontier_phi_61_pred_4;
                _2463 = frontier_phi_61_pred_5;
                uint _2612 = _2611 + 1u;
                if (_2612 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2605 = _2461;
                    _2606 = _2463;
                    _2607 = _2465;
                    _2608 = _2467;
                    _2609 = _2469;
                    _2610 = _2471;
                    _2611 = _2612;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
        }
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.z;
        uint _2477 = (_2475 >> 8u) & 15u;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((4294967295u << _2477) & _2334) == 0u)
        {
            _2573 = _2460;
            _2575 = _2462;
            _2577 = _2464;
            _2579 = _2466;
            _2581 = _2468;
            _2583 = _2470;
        }
        else
        {
            float _2598 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
            float _2599 = _2598 * _2288;
            float _2600 = _2598 * _2289;
            float _2601 = _2598 * _2290;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2477 < ((_2475 >> 12u) & 15u))
            {
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2712 = _2460;
                float _2713 = _2462;
                float _2714 = _2464;
                float _2715 = _2466;
                float _2716 = _2468;
                float _2717 = _2470;
                uint _2718 = _2477;
                uint _2727;
                bool _2728;
                for (;;)
                {
                    _2727 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                    _2728 = _2727 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2728)
                    {
                        frontier_phi_67_pred = _2715;
                        frontier_phi_67_pred_1 = _2716;
                        frontier_phi_67_pred_2 = _2717;
                        frontier_phi_67_pred_3 = _2714;
                        frontier_phi_67_pred_4 = _2713;
                        frontier_phi_67_pred_5 = _2712;
                    }
                    else
                    {
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2925 = _2712;
                        float _2926 = _2713;
                        float _2927 = _2714;
                        float _2928 = _2715;
                        float _2929 = _2716;
                        float _2930 = _2717;
                        uint _2931 = _2727;
                        uint _2932;
                        vec4 _2957;
                        float _2958;
                        vec4 _2973;
                        vec3 _2985;
                        vec4 _3000;
                        vec4 _3016;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2942 = ((_2718 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2931));
                            _2932 = (_2931 + 4294967295u) & _2931;
                            uint _2944 = _2942 * 40u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2958 = _2957.w;
                            uint _2960 = (_2942 * 40u) + 4u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2975 = (_2942 * 40u) + 8u;
                            _2985 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x));
                            uint _2987 = (_2942 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2942 * 40u) + 20u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2942 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2942 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2290, _3051.z, fma(_2289, _3051.y, _3051.x * _2288)) + _3051.w;
                            _3064 = !((fma(_2290, _3032.z, fma(_2289, _3032.y, _3032.x * _2288)) + _3032.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2957.x - _2288;
                                float _3092 = _2957.y - _2289;
                                float _3093 = _2957.z - _2290;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2958 * _2958));
                                float _4173 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3109 = sqrt(_3094) * _2973.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_590, _593, _596))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_2290, _3000.z, fma(_2289, _3000.y, _3000.x * _2288)) + _3000.w) / _3063;
                                float _3123 = (fma(_2290, _3016.z, fma(_2289, _3016.y, _3016.x * _2288)) + _3016.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4189 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _650;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2599;
                                float _3153 = _3099 - _2600;
                                float _3154 = _3100 - _2601;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2599, (-0.0) - _2600, (-0.0) - _2601));
                                float _4200 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3166 = dot(vec3(_590, _593, _596), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4211 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_590, _593, _596), vec3(_3098, _3099, _3100))) + _3175;
                                float _4222 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4233 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3203 * _2985.x;
                                frontier_phi_73_pred_1 = _3203 * _2985.y;
                                frontier_phi_73_pred_2 = _3129 * _2973.z;
                                frontier_phi_73_pred_3 = _3129 * _2973.y;
                                frontier_phi_73_pred_4 = _3129 * _2973.x;
                                frontier_phi_73_pred_5 = _3203 * _2985.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3207 = frontier_phi_73_pred;
                            _3208 = frontier_phi_73_pred_1;
                            _3212 = frontier_phi_73_pred_2;
                            _3211 = frontier_phi_73_pred_3;
                            _3210 = frontier_phi_73_pred_4;
                            _3209 = frontier_phi_73_pred_5;
                            _2915 = _3210 + _2928;
                            _2916 = _3211 + _2929;
                            _2917 = _3212 + _2930;
                            _2912 = _3207 + _2925;
                            _2913 = _3208 + _2926;
                            _2914 = _3209 + _2927;
                            if (_2932 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2932;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2915;
                        frontier_phi_67_pred_1 = _2916;
                        frontier_phi_67_pred_2 = _2917;
                        frontier_phi_67_pred_3 = _2914;
                        frontier_phi_67_pred_4 = _2913;
                        frontier_phi_67_pred_5 = _2912;
                    }
                    _2580 = frontier_phi_67_pred;
                    _2582 = frontier_phi_67_pred_1;
                    _2584 = frontier_phi_67_pred_2;
                    _2578 = frontier_phi_67_pred_3;
                    _2576 = frontier_phi_67_pred_4;
                    _2574 = frontier_phi_67_pred_5;
                    uint _2719 = _2718 + 1u;
                    if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2712 = _2574;
                        _2713 = _2576;
                        _2714 = _2578;
                        _2715 = _2580;
                        _2716 = _2582;
                        _2717 = _2584;
                        _2718 = _2719;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2582;
                frontier_phi_55_56_ladder_1 = _2584;
                frontier_phi_55_56_ladder_2 = _2580;
                frontier_phi_55_56_ladder_3 = _2578;
                frontier_phi_55_56_ladder_4 = _2576;
                frontier_phi_55_56_ladder_5 = _2574;
            }
            else
            {
                frontier_phi_55_56_ladder = _2468;
                frontier_phi_55_56_ladder_1 = _2470;
                frontier_phi_55_56_ladder_2 = _2466;
                frontier_phi_55_56_ladder_3 = _2464;
                frontier_phi_55_56_ladder_4 = _2462;
                frontier_phi_55_56_ladder_5 = _2460;
            }
            _2573 = frontier_phi_55_56_ladder_5;
            _2575 = frontier_phi_55_56_ladder_4;
            _2577 = frontier_phi_55_56_ladder_3;
            _2579 = frontier_phi_55_56_ladder_2;
            _2581 = frontier_phi_55_56_ladder;
            _2583 = frontier_phi_55_56_ladder_1;
        }
        float _2588 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        _2347 = (_2588 * _2579) + _1802;
        _2349 = (_2588 * _2581) + _1804;
        _2351 = (_2588 * _2583) + _1806;
        _2353 = ((_2573 * 0.039999999105930328369140625) * _2588) + _2132;
        _2355 = ((_2575 * 0.039999999105930328369140625) * _2588) + _2134;
        _2357 = ((_2577 * 0.039999999105930328369140625) * _2588) + _2136;
    }
    else
    {
        _2347 = _1802;
        _2349 = _1804;
        _2351 = _1806;
        _2353 = _2132;
        _2355 = _2134;
        _2357 = _2136;
    }
    uint _2363 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _4249 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4260 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4271 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2394 = (((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2347 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _634))) + ((_2353 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + (((_421 * cbMtdParam._m0[11u].x) * (_406.x + _391.x)) * cbInstanceData._m0[_2363].x);
    float _2396 = ((((_421 * cbMtdParam._m0[11u].y) * (_406.y + _391.y)) * cbInstanceData._m0[_2363].y) + ((_2355 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2349 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _634)));
    float _2398 = ((((_421 * cbMtdParam._m0[11u].z) * (_406.z + _391.z)) * cbInstanceData._m0[_2363].z) + ((_2357 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2351 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _634)));
    uint _2402 = _609 + 6u;
    float _2410 = _568 / cbSceneParam._m0[86u].x;
    float _2411 = _569 / cbSceneParam._m0[86u].y;
    vec4 _2425 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, (log2((isnan(cbSceneParam._m0[77u].w) ? _503 : (isnan(_503) ? cbSceneParam._m0[77u].w : min(_503, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2427 = _2425.x;
    float _2428 = _2425.y;
    float _2429 = _2425.z;
    float _2430 = _2425.w;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_503 > cbSceneParam._m0[78u].w)
    {
        float _2485 = isnan(_503) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _503 : min(cbSceneParam._m0[80u].w, _503));
        float _2486 = _2485 / _503;
        float _2497 = _2486 * _553;
        float _2498 = _554 * _2486;
        float _2499 = (-0.0) - _2498;
        float _2501 = _2486 * _555;
        float _2503 = (cbSceneParam._m0[77u].w * _2499) / _2485;
        float _2504 = _2503 + cbSceneParam._m0[79u].w;
        float _2505 = cbSceneParam._m0[79u].w - _2498;
        float _2511 = sqrt(((_2497 * _2497) + (_2498 * _2498)) + (_2501 * _2501));
        float _2514 = (1.0 - (cbSceneParam._m0[77u].w / _2485)) * _2511;
        float _2519 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2521 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2674;
        if (abs((_2499 - _2503) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2674 = ((((_2504 > 0.0) ? exp2(_2519 * _2504) : (2.0 - exp2(_2521 * _2504))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2514;
        }
        else
        {
            float _2634 = 1.0 / cbSceneParam._m0[80u].x;
            float _2635 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : max(_2504, _2505));
            float _2636 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : min(_2504, _2505));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            _2674 = ((abs(_2511 / _2499) * cbSceneParam._m0[80u].y) * ((((_2645 - _2646) * 2.0) - ((exp2(_2519 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0)))) - exp2(_2519 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0))))) * _2634)) - ((exp2(_2521 * _2645) - exp2(_2521 * _2646)) * _2634))) + (_2514 * cbSceneParam._m0[80u].z);
        }
        vec4 _2676 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, 1.0), 0.0);
        float _2685 = exp2((_2674 * (-1.44269502162933349609375)) * (1.0 - _2676.w));
        float _2686 = log2(_2685);
        float _2702 = log2(_2430);
        _2523 = (exp2(_2702 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].x)) * _2676.x) / cbSceneParam._m0[78u].x)) + _2427;
        _2525 = (exp2(_2702 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].y)) * _2676.y) / cbSceneParam._m0[78u].y)) + _2428;
        _2527 = (exp2(_2702 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].z)) * _2676.z) / cbSceneParam._m0[78u].z)) + _2429;
        _2529 = _2685 * _2430;
    }
    else
    {
        _2523 = _2427;
        _2525 = _2428;
        _2527 = _2429;
        _2529 = _2430;
    }
    float _2541 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2542 = _2541 == 3.0;
    float _2543 = log2(_2529);
    float _2550 = exp2(_2543 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0)));
    float _2551 = exp2(_2543 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0)));
    float _2552 = exp2(_2543 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0)));
    float _2561 = (_2541 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2561 * (_2542 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2523)));
    SV_Target.y = _2561 * (_2542 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.z = _2561 * (_2542 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2527)));
    SV_Target.w = cbInstanceData._m0[_2402].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2402].w;
}


