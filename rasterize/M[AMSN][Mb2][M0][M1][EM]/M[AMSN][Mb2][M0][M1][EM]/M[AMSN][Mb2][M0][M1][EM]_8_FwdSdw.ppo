#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _974;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _288 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_267.x + 0.00999999977648258209228515625));
    float _290 = _288 * (cbMtdParam._m0[15u].x + 1.0);
    float _3592 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _299 = ((((cbMtdParam._m0[12u].x - _245) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _291) + _245;
    float _300 = ((((cbMtdParam._m0[12u].y - _246) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _291) + _246;
    float _301 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _247)) * _291) + _247;
    vec4 _313 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3603 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))));
    float _332 = _288 * (cbMtdParam._m0[14u].w + 1.0);
    float _3614 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = ((cbMtdParam._m0[14u].y - _317) * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) + _317;
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _378 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _414 = (_408.x * 2.0) + (-1.0);
    float _415 = (_408.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3625 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _432 = (_291 * (((cbMtdParam._m0[13u].z * _321) - _321) + _414)) + _321;
    float _433 = (_291 * (((cbMtdParam._m0[13u].z * _323) - _323) + _415)) + _323;
    float _434 = (_291 * (sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) - _329)) + _329;
    float _437 = fma(_434, _210 * NORMAL.x, fma(_433, _217 * TANGENT.x, (_203 * _195) * _432));
    float _440 = fma(_434, _210 * NORMAL.y, fma(_433, _217 * TANGENT.y, (_203 * _196) * _432));
    float _443 = fma(_434, _210 * NORMAL.z, fma(_433, _217 * TANGENT.z, (_203 * _197) * _432));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3636 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _451 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3658 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3669 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _561 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _564 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = _577 + 9u;
    uint _579 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3680 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _602 = _599.x * TEXCOORD_3.w;
    float _603 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _448) - _528;
    float _611 = (_606 * _449) - _529;
    float _612 = (_606 * _450) - _530;
    float _616 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3713 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _618 = sqrt(_451);
    float _631 = exp2((_618 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_618 * 3.0));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _973;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _702 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _706 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _731 = _663 + _448;
        float _732 = _667 + _449;
        float _733 = _671 + _450;
        float _743 = fma(_733, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) - _698;
        float _744 = fma(_733, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) - _702;
        float _745 = fma(_733, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) - _706;
        float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
        float _762 = ((_749 * _743) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_749 * _744) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_749 * _745) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_767.x + (-0.5));
        float _803 = _801 * (_767.y + (-0.5));
        float _804 = _801 * (_767.z + (-0.5));
        float _811 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_774.x + (-0.5));
        float _813 = _811 * (_774.y + (-0.5));
        float _814 = _811 * (_774.z + (-0.5));
        float _821 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_781.x + (-0.5));
        float _823 = _821 * (_781.y + (-0.5));
        float _824 = _821 * (_781.z + (-0.5));
        float _831 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_788.x + (-0.5));
        float _833 = _831 * (_788.y + (-0.5));
        float _834 = _831 * (_788.z + (-0.5));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = _802 * 0.5;
        float _839 = _812 * 0.5;
        float _840 = _822 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _855 = (dot(vec3(_448, _449, _450), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _865 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3761 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_867 + 1.0))) + _872) * _835;
        float _882 = _803 * 0.5;
        float _883 = _813 * 0.5;
        float _884 = _823 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_448, _449, _450), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3794 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_909 + 1.0))) + _914) * _836;
        float _924 = _804 * 0.5;
        float _925 = _814 * 0.5;
        float _926 = _824 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_448, _449, _450), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3827 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_951 + 1.0))) + _956) * _837;
        _973 = _804;
        _975 = _803;
        _976 = _802;
        _977 = _814;
        _978 = _813;
        _979 = _812;
        _980 = _824;
        _981 = _823;
        _982 = _822;
        _983 = _837;
        _984 = _836;
        _985 = _835;
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
    }
    else
    {
        _973 = _974;
        _975 = _974;
        _976 = _974;
        _977 = _974;
        _978 = _974;
        _979 = _974;
        _980 = _974;
        _981 = _974;
        _982 = _974;
        _983 = _974;
        _984 = _974;
        _985 = _974;
        _986 = 0.0;
        _987 = 0.0;
        _988 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1018 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1022 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1045 = _663 + _448;
        float _1046 = _667 + _449;
        float _1047 = _671 + _450;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_448, _449, _450), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3890 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_448, _449, _450), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3923 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_448, _449, _450), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3956 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _974;
        _1284 = _974;
        _1285 = _974;
        _1286 = _974;
        _1287 = _974;
        _1288 = _974;
        _1289 = _974;
        _1290 = _974;
        _1291 = _974;
        _1292 = _974;
        _1293 = _974;
        _1294 = _974;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _610 * 0.5;
    float _1352 = _611 * 0.5;
    float _1353 = _612 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_973, _977, _980, _983));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_975, _978, _981, _984));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_976, _979, _982, _985));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1481 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1484 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1512 = frontier_phi_14_12_ladder;
        }
        float _1683;
        if (_1481 > 0.0)
        {
            _1683 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1683 = frontier_phi_23_19_ladder;
        }
        float _1979;
        if (_1484 > 0.0)
        {
            _1979 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1979 = frontier_phi_35_30_ladder;
        }
        float _1981 = isnan(_1683) ? _1512 : (isnan(_1512) ? _1683 : min(_1512, _1683));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1478) + _1467;
        float _1987 = (_1982 * _1481) + _1471;
        float _1988 = (_1982 * _1484) + _1475;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_13_35_ladder = _2133.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2133.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2133.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_13_35_ladder_2;
        _1502 = frontier_phi_13_35_ladder_1;
        _1504 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1420);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1578 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1581 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1688;
        if (_1575 > 0.0)
        {
            _1688 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1688 = frontier_phi_25_21_ladder;
        }
        float _2006;
        if (_1578 > 0.0)
        {
            _2006 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2006 = frontier_phi_37_32_ladder;
        }
        float _2333;
        if (_1581 > 0.0)
        {
            _2333 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2333 = frontier_phi_47_44_ladder;
        }
        float _2335 = isnan(_2006) ? _1688 : (isnan(_1688) ? _2006 : min(_1688, _2006));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1575) + _1564;
        float _2341 = (_2336 * _1578) + _1568;
        float _2342 = (_2336 * _1581) + _1572;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2343;
        float _2346 = _2343 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2342 > _2346) || ((_2342 < _2344) || ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 < _2344) || (_2340 > _2346))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2342, cbModelParam._m0[17u].z, fma(_2341, cbModelParam._m0[17u].y, _2340 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2342, cbModelParam._m0[18u].z, fma(_2341, cbModelParam._m0[18u].y, _2340 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2342, cbModelParam._m0[19u].z, fma(_2341, cbModelParam._m0[19u].y, _2340 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_22_47_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_22_47_ladder_2;
        _1602 = frontier_phi_22_47_ladder_1;
        _1604 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1509);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1616 = ((((1.0 - _631) * ((_618 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_631 * _618)) * _602;
    float _1617 = _1616 * ((cbModelParam._m0[1u].w * (_1600 - _1500)) + _1500);
    float _1618 = _1616 * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1619 = _1616 * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1675 = _1662 / _1674;
    float _1676 = _1666 / _1674;
    float _1677 = _1670 / _1674;
    float _1824;
    float _1825;
    float _1826;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1704 = ((uint(_1677 > cbSceneParam._m0[59u].y) + uint(_1677 > cbSceneParam._m0[59u].x)) + uint(_1677 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1705 = _1704 + 43u;
        uint _1713 = _1704 + 44u;
        uint _1721 = _1704 + 45u;
        uint _1729 = _1704 + 46u;
        float _1740 = fma(_1674, cbSceneParam._m0[_1705].w, fma(_1670, cbSceneParam._m0[_1705].z, fma(_1666, cbSceneParam._m0[_1705].y, _1662 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1674, cbSceneParam._m0[_1713].w, fma(_1670, cbSceneParam._m0[_1713].z, fma(_1666, cbSceneParam._m0[_1713].y, _1662 * cbSceneParam._m0[_1713].x)));
        float _1752 = fma(_1674, cbSceneParam._m0[_1729].w, fma(_1670, cbSceneParam._m0[_1729].z, fma(_1666, cbSceneParam._m0[_1729].y, _1662 * cbSceneParam._m0[_1729].x)));
        float _1757 = cbSceneParam._m0[33u].z * _1752;
        float _1759 = cbSceneParam._m0[33u].w * _1752;
        float _1762 = fma(_1674, cbSceneParam._m0[_1721].w, fma(_1670, cbSceneParam._m0[_1721].z, fma(_1666, cbSceneParam._m0[_1721].y, _1662 * cbSceneParam._m0[_1721].x))) / _1752;
        float _1810 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
        float _4082 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1817 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 + _1740) / _1752, (_1759 + _1744) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1759 + _1740) / _1752, (_1744 - _1757) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1757) / _1752, (_1744 - _1759) / _1752), _1762), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 - _1759) / _1752, (_1757 + _1744) / _1752), _1762), 0.0)).x), vec4(0.25)));
        _1824 = 1.0 - (_1817 * cbSceneParam._m0[34u].x);
        _1825 = 1.0 - (_1817 * cbSceneParam._m0[34u].y);
        _1826 = 1.0 - (_1817 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1824 = 1.0;
        _1825 = 1.0;
        _1826 = 1.0;
    }
    float _1890;
    float _1892;
    float _1894;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1878 = fma(_1674, cbSceneParam._m0[63u].w, fma(_1670, cbSceneParam._m0[63u].z, fma(_1666, cbSceneParam._m0[63u].y, _1662 * cbSceneParam._m0[63u].x)));
        float _1879 = fma(_1674, cbSceneParam._m0[60u].w, fma(_1670, cbSceneParam._m0[60u].z, fma(_1666, cbSceneParam._m0[60u].y, _1662 * cbSceneParam._m0[60u].x))) / _1878;
        float _1880 = fma(_1674, cbSceneParam._m0[61u].w, fma(_1670, cbSceneParam._m0[61u].z, fma(_1666, cbSceneParam._m0[61u].y, _1662 * cbSceneParam._m0[61u].x))) / _1878;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1879 >= cbSceneParam._m0[64u].x) && (_1880 >= cbSceneParam._m0[64u].y)) && (_1879 <= cbSceneParam._m0[64u].z)) && (_1880 <= cbSceneParam._m0[64u].w))
        {
            float _2019 = fma(_1674, cbSceneParam._m0[62u].w, fma(_1670, cbSceneParam._m0[62u].z, fma(_1666, cbSceneParam._m0[62u].y, _1662 * cbSceneParam._m0[62u].x))) / _1878;
            float _2023 = isnan(cbSceneParam._m0[41u].w) ? _2019 : (isnan(_2019) ? cbSceneParam._m0[41u].w : max(_2019, cbSceneParam._m0[41u].w));
            float _2066 = (cbSceneParam._m0[33u].x - sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677))) * cbSceneParam._m0[33u].y;
            float _4098 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
            float _2073 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1879, cbSceneParam._m0[33u].w + _1880), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1879, _1880 - cbSceneParam._m0[33u].z), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].z, _1880 - cbSceneParam._m0[33u].w), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1879 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1880), _2023), 0.0)).x), vec4(0.25)));
            float _2077 = 1.0 - (_2073 * cbSceneParam._m0[34u].x);
            float _2078 = 1.0 - (_2073 * cbSceneParam._m0[34u].y);
            float _2079 = 1.0 - (_2073 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2079) ? _1826 : (isnan(_1826) ? _2079 : min(_1826, _2079));
            frontier_phi_34_33_ladder_1 = isnan(_2078) ? _1825 : (isnan(_1825) ? _2078 : min(_1825, _2078));
            frontier_phi_34_33_ladder_2 = isnan(_2077) ? _1824 : (isnan(_1824) ? _2077 : min(_1824, _2077));
        }
        else
        {
            frontier_phi_34_33_ladder = _1826;
            frontier_phi_34_33_ladder_1 = _1825;
            frontier_phi_34_33_ladder_2 = _1824;
        }
        _1890 = frontier_phi_34_33_ladder_2;
        _1892 = frontier_phi_34_33_ladder_1;
        _1894 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1890 = _1824;
        _1892 = _1825;
        _1894 = _1826;
    }
    uvec4 _1899 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1901 = _1899.x * 14u;
    uint _1902 = _1901 + 13u;
    float _1909 = _602 + (-1.0);
    float _1914 = (cbLight._m0[_1902].x * _1909) + 1.0;
    float _1915 = (cbLight._m0[_1902].y * _1909) + 1.0;
    float _1916 = (cbLight._m0[_1902].z * _1909) + 1.0;
    float _1917 = (cbLight._m0[_1902].w * _1909) + 1.0;
    uint _1918 = _1901 + 5u;
    float _1924 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1928 = _1901 + 4u;
    float _1938 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1942 = _1901 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_448, _449, _450));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_448, _449, _450));
    float _4134 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4145 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1918].x * _1924) * _1963) + (((cbLight._m0[_1928].x * _1890) * _1938) * _1961);
    float _1971 = ((_1924 * cbLight._m0[_1918].y) * _1963) + (((cbLight._m0[_1928].y * _1892) * _1938) * _1961);
    float _1972 = ((_1924 * cbLight._m0[_1918].z) * _1963) + (((cbLight._m0[_1928].z * _1894) * _1938) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1901 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_1978)
    {
        _2080 = _1970;
        _2082 = _1971;
        _2084 = _1972;
    }
    else
    {
        uint _2088 = _1901 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1901 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4156 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2107 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1970;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1971;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1972;
    }
    bool _2087 = _1976.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2087)
    {
        _2142 = _2080;
        _2144 = _2082;
        _2146 = _2084;
    }
    else
    {
        uint _2304 = _1901 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_1901 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4172 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2323 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2142 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2080;
        _2144 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2082;
        _2146 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2084;
    }
    uint _2149 = _1901 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _451) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1901].x + _528;
    float _2165 = cbLight._m0[_1901].y + _529;
    float _2166 = cbLight._m0[_1901].z + _530;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1901].xyz));
    float _4188 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2178 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2179 = dot(vec3(_448, _449, _450), vec3(_2171, _2172, _2173));
    float _4210 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2171, _2172, _2173));
    float _4221 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2178 * ((_2177 * _2203) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2203) + _2163) * _2177))) * _2177;
    float _4232 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2230 = _1901 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _451) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_1942].x + _528;
    float _2244 = cbLight._m0[_1942].y + _529;
    float _2245 = cbLight._m0[_1942].z + _530;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1942].xyz));
    float _4243 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2257 = dot(vec3(_448, _449, _450), vec3(_2250, _2251, _2252));
    float _4254 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2250, _2251, _2252));
    float _4265 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2242;
    float _2289 = (0.5 / (((_2178 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2279) + _2242) * _2256))) * _2256;
    float _4276 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2301 = (((_2278 * cbLight._m0[_2230].x) * _2291) * _1924) + ((((cbLight._m0[_2149].x * _1890) * _2202) * _2216) * _1938);
    float _2302 = (((_2278 * cbLight._m0[_2230].y) * _2291) * _1924) + ((((cbLight._m0[_2149].y * _1892) * _2202) * _2216) * _1938);
    float _2303 = (((_2278 * cbLight._m0[_2230].z) * _2291) * _1924) + ((((cbLight._m0[_2149].z * _1894) * _2202) * _2216) * _1938);
    float _2359;
    float _2361;
    float _2363;
    if (_1978)
    {
        _2359 = _2301;
        _2361 = _2302;
        _2363 = _2303;
    }
    else
    {
        uint _2365 = _1901 + 2u;
        uint _2369 = _1901 + 10u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _451) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _528;
        float _2386 = cbLight._m0[_2365].y + _529;
        float _2387 = cbLight._m0[_2365].z + _530;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2365].xyz));
        float _4287 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2399 = dot(vec3(_448, _449, _450), vec3(_2392, _2393, _2394));
        float _4298 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4309 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2421 = 1.0 - _2384;
        float _2431 = (0.5 / (((_2178 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2421) + _2384) * _2398))) * _2398;
        float _4320 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2359 = (((_2420 * cbLight._m0[_2369].x) * _2433) * _2434) + _2301;
        _2361 = (((_2420 * cbLight._m0[_2369].y) * _2433) * _2434) + _2302;
        _2363 = (((_2420 * cbLight._m0[_2369].z) * _2433) * _2434) + _2303;
    }
    float _2465;
    float _2467;
    float _2469;
    if (_2087)
    {
        _2465 = _2359;
        _2467 = _2361;
        _2469 = _2363;
    }
    else
    {
        uint _2476 = _1901 + 3u;
        uint _2480 = _1901 + 11u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _451) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _528;
        float _2497 = cbLight._m0[_2476].y + _529;
        float _2498 = cbLight._m0[_2476].z + _530;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2476].xyz));
        float _4336 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2510 = dot(vec3(_448, _449, _450), vec3(_2503, _2504, _2505));
        float _4347 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4358 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2532 = 1.0 - _2495;
        float _2542 = (0.5 / (((_2178 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2532) + _2495) * _2509))) * _2509;
        float _4369 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2465 = (((_2531 * cbLight._m0[_2480].x) * _2544) * _2545) + _2359;
        _2467 = (((_2531 * cbLight._m0[_2480].y) * _2544) * _2545) + _2361;
        _2469 = (((_2531 * cbLight._m0[_2480].z) * _2544) * _2545) + _2363;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1899.y == 0u)
    {
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2567)));
        float _2588 = (log2(_1677 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2864)
                {
                    frontier_phi_66_pred = _2853;
                    frontier_phi_66_pred_1 = _2852;
                    frontier_phi_66_pred_2 = _2851;
                    frontier_phi_66_pred_3 = _2850;
                    frontier_phi_66_pred_4 = _2849;
                    frontier_phi_66_pred_5 = _2848;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _1675;
                        float _3039 = _2998.y - _1676;
                        float _3040 = _2998.z - _1677;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_558, _561, _564), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4395 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _1675;
                        float _3074 = (-0.0) - _1676;
                        float _3075 = (-0.0) - _1677;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3089 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _618;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3080 + _3045;
                        float _3101 = _3081 + _3046;
                        float _3102 = _3082 + _3047;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_558, _561, _564), vec3(_3080, _3081, _3082));
                        float _4411 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3114 = dot(vec3(_558, _561, _564), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4422 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3058 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3048) + _3123;
                        float _4433 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4444 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3121 * _3121) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3149 * _3034.x) + _2972;
                        _2905 = (_3149 * _3034.y) + _2973;
                        _2906 = (_3149 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_66_pred = _2909;
                    frontier_phi_66_pred_1 = _2908;
                    frontier_phi_66_pred_2 = _2907;
                    frontier_phi_66_pred_3 = _2906;
                    frontier_phi_66_pred_4 = _2905;
                    frontier_phi_66_pred_5 = _2904;
                }
                _2714 = frontier_phi_66_pred;
                _2712 = frontier_phi_66_pred_1;
                _2710 = frontier_phi_66_pred_2;
                _2708 = frontier_phi_66_pred_3;
                _2706 = frontier_phi_66_pred_4;
                _2704 = frontier_phi_66_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2704;
                    _2849 = _2706;
                    _2850 = _2708;
                    _2851 = _2710;
                    _2852 = _2712;
                    _2853 = _2714;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2720) & _2598) == 0u)
        {
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
            float _2842 = _2841 * _1675;
            float _2843 = _2841 * _1676;
            float _2844 = _2841 * _1677;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2703;
                float _2956 = _2705;
                float _2957 = _2707;
                float _2958 = _2709;
                float _2959 = _2711;
                float _2960 = _2713;
                uint _2961 = _2720;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2971)
                    {
                        frontier_phi_72_pred = _2960;
                        frontier_phi_72_pred_1 = _2959;
                        frontier_phi_72_pred_2 = _2958;
                        frontier_phi_72_pred_3 = _2957;
                        frontier_phi_72_pred_4 = _2956;
                        frontier_phi_72_pred_5 = _2955;
                    }
                    else
                    {
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3167 = _2955;
                        float _3168 = _2956;
                        float _3169 = _2957;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        uint _3173 = _2970;
                        uint _3174;
                        vec4 _3199;
                        float _3200;
                        vec4 _3215;
                        vec3 _3227;
                        vec4 _3242;
                        vec4 _3258;
                        float _3305;
                        bool _3306;
                        for (;;)
                        {
                            uint _3184 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3173));
                            _3174 = (_3173 + 4294967295u) & _3173;
                            uint _3186 = _3184 * 40u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3200 = _3199.w;
                            uint _3202 = (_3184 * 40u) + 4u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3184 * 40u) + 8u;
                            _3227 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x));
                            uint _3229 = (_3184 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3245 = (_3184 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3261 = (_3184 * 40u) + 24u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3280 = (_3184 * 40u) + 28u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3305 = fma(_1677, _3293.z, fma(_1676, _3293.y, _3293.x * _1675)) + _3293.w;
                            _3306 = !((fma(_1677, _3274.z, fma(_1676, _3274.y, _3274.x * _1675)) + _3274.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3306)
                            {
                                float _3333 = _3199.x - _1675;
                                float _3334 = _3199.y - _1676;
                                float _3335 = _3199.z - _1677;
                                float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                                float _3339 = inversesqrt(_3336);
                                float _3340 = _3339 * _3333;
                                float _3341 = _3339 * _3334;
                                float _3342 = _3339 * _3335;
                                float _3346 = 1.0 - (_3336 / (_3200 * _3200));
                                float _4455 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3351 = sqrt(_3336) * _3215.w;
                                float _3353 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                                float _3354 = _3353 * _3353;
                                float _3357 = ((1.0 - _3354) * dot(vec3(_3340, _3341, _3342), vec3(_558, _561, _564))) + _3354;
                                float _3360 = _3351 * _3351;
                                float _3364 = (fma(_1677, _3242.z, fma(_1676, _3242.y, _3242.x * _1675)) + _3242.w) / _3305;
                                float _3365 = (fma(_1677, _3258.z, fma(_1676, _3258.y, _3258.x * _1675)) + _3258.w) / _3305;
                                float _3369 = 1.0 - dot(vec2(_3364, _3365), vec2(_3364, _3365));
                                float _4471 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3371 = _3370 * (((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3347) / ((_3360 * 0.699999988079071044921875) + 1.0));
                                float _3383 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _618;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3340 - _2842;
                                float _3395 = _3341 - _2843;
                                float _3396 = _3342 - _2844;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4482 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3408 = dot(vec3(_558, _561, _564), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4493 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = _3353 * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_558, _561, _564), vec3(_3340, _3341, _3342))) + _3417;
                                float _4504 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4515 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = (_3370 * _3347) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3415 * _3415) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3371 * _3215.y;
                                frontier_phi_78_pred_1 = _3371 * _3215.x;
                                frontier_phi_78_pred_2 = _3445 * _3227.z;
                                frontier_phi_78_pred_3 = _3445 * _3227.y;
                                frontier_phi_78_pred_4 = _3445 * _3227.x;
                                frontier_phi_78_pred_5 = _3371 * _3215.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3453 = frontier_phi_78_pred;
                            _3452 = frontier_phi_78_pred_1;
                            _3451 = frontier_phi_78_pred_2;
                            _3450 = frontier_phi_78_pred_3;
                            _3449 = frontier_phi_78_pred_4;
                            _3454 = frontier_phi_78_pred_5;
                            _3157 = _3452 + _3170;
                            _3158 = _3453 + _3171;
                            _3159 = _3454 + _3172;
                            _3154 = _3449 + _3167;
                            _3155 = _3450 + _3168;
                            _3156 = _3451 + _3169;
                            if (_3174 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3174;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3159;
                        frontier_phi_72_pred_1 = _3158;
                        frontier_phi_72_pred_2 = _3157;
                        frontier_phi_72_pred_3 = _3156;
                        frontier_phi_72_pred_4 = _3155;
                        frontier_phi_72_pred_5 = _3154;
                    }
                    _2827 = frontier_phi_72_pred;
                    _2825 = frontier_phi_72_pred_1;
                    _2823 = frontier_phi_72_pred_2;
                    _2821 = frontier_phi_72_pred_3;
                    _2819 = frontier_phi_72_pred_4;
                    _2817 = frontier_phi_72_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2827;
                frontier_phi_60_61_ladder_1 = _2825;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2819;
                frontier_phi_60_61_ladder_4 = _2817;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_60_61_ladder = _2713;
                frontier_phi_60_61_ladder_1 = _2711;
                frontier_phi_60_61_ladder_2 = _2707;
                frontier_phi_60_61_ladder_3 = _2705;
                frontier_phi_60_61_ladder_4 = _2703;
                frontier_phi_60_61_ladder_5 = _2709;
            }
            _2816 = frontier_phi_60_61_ladder_4;
            _2818 = frontier_phi_60_61_ladder_3;
            _2820 = frontier_phi_60_61_ladder_2;
            _2822 = frontier_phi_60_61_ladder_5;
            _2824 = frontier_phi_60_61_ladder_1;
            _2826 = frontier_phi_60_61_ladder;
        }
        float _2831 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2611 = (_2831 * _2822) + _2142;
        _2613 = (_2831 * _2824) + _2144;
        _2615 = (_2831 * _2826) + _2146;
        _2617 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2465;
        _2619 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2467;
        _2621 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2469;
    }
    else
    {
        _2611 = _2142;
        _2613 = _2144;
        _2615 = _2146;
        _2617 = _2465;
        _2619 = _2467;
        _2621 = _2469;
    }
    uint _2627 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _4531 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4542 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4553 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2658 = (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2611 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _602))) + ((_2617 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + (((_291 * cbMtdParam._m0[11u].x) * (_378.x + _363.x)) * cbInstanceData._m0[_2627].x);
    float _2660 = ((((_291 * cbMtdParam._m0[11u].y) * (_378.y + _363.y)) * cbInstanceData._m0[_2627].y) + ((_2619 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2613 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _602)));
    float _2662 = ((((_291 * cbMtdParam._m0[11u].z) * (_378.z + _363.z)) * cbInstanceData._m0[_2627].z) + ((_2621 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1409)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2615 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _602)));
    uint _2666 = _577 + 6u;
    float _2674 = _536 / cbSceneParam._m0[86u].x;
    float _2675 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2729 = _2728 / _470;
        float _2740 = _2729 * _521;
        float _2741 = _522 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _523;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2694);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2772 = _2928 * _2694;
    }
    else
    {
        _2766 = _2691;
        _2768 = _2692;
        _2770 = _2693;
        _2772 = _2694;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0)));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2666].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2666].w;
}


