#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1176;
float _3868;
float _3869;
float _3870;
float _3871;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _261 = _255.x * cbMtdParam._m0[9u].x;
    float _262 = _255.y * cbMtdParam._m0[9u].y;
    float _263 = _255.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _317 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3880 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _325 = (((_301.x * cbMtdParam._m0[10u].x) - _261) * _318) + _261;
    float _326 = (((_301.y * cbMtdParam._m0[10u].y) - _262) * _318) + _262;
    float _327 = (((_301.z * cbMtdParam._m0[10u].z) - _263) * _318) + _263;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _366 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_347.x + 0.00999999977648258209228515625));
    float _368 = _366 * (cbMtdParam._m0[15u].x + 1.0);
    float _3891 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _377 = ((((cbMtdParam._m0[12u].x - _325) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _369) + _325;
    float _378 = ((((cbMtdParam._m0[12u].y - _326) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _369) + _326;
    float _379 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _327)) * _369) + _327;
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _394 = _392.x;
    float _412 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _394) * _318) + _394;
    vec4 _425 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _433 = (_425.x * 2.0) + (-1.0);
    float _435 = (_425.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3902 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    vec4 _453 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _457 = _453.z;
    float _460 = (_453.x * 2.0) + (-1.0);
    float _461 = (_453.y * 2.0) + (-1.0);
    float _462 = dot(vec2(_460, _461), vec2(_460, _461));
    float _3913 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    float _470 = (_318 * (_425.z - _457)) + _457;
    float _473 = _366 * (cbMtdParam._m0[14u].w + 1.0);
    float _3924 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _477 = ((cbMtdParam._m0[14u].y - _470) * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) + _470;
    vec4 _504 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _519 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _533 = (_318 * (_433 - _460)) + _460;
    float _534 = (_318 * (_435 - _461)) + _461;
    float _535 = (_318 * (sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) - _467)) + _467;
    vec4 _554 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _560 = (_554.x * 2.0) + (-1.0);
    float _561 = (_554.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3935 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _578 = (_369 * (((_533 * cbMtdParam._m0[13u].z) - _533) + _560)) + _533;
    float _579 = (_369 * (((_534 * cbMtdParam._m0[13u].z) - _534) + _561)) + _534;
    float _580 = (_369 * (sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) - _535)) + _535;
    float _583 = fma(_580, _226 * NORMAL.x, fma(_579, _233 * TANGENT.x, (_219 * _211) * _578));
    float _586 = fma(_580, _226 * NORMAL.y, fma(_579, _233 * TANGENT.y, (_219 * _212) * _578));
    float _589 = fma(_580, _226 * NORMAL.z, fma(_579, _233 * TANGENT.z, (_219 * _213) * _578));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _594 = _593 * _583;
    float _595 = _593 * _586;
    float _596 = _593 * _589;
    float _3946 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _597 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3968 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3979 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3990 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _601 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _617 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _658);
    float _669 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _658);
    float _670 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _658);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    vec4 _682 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _684 = _682.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _856 = sqrt(((_668 * _668) + (_669 * _669)) + (_670 * _670));
        float _862 = (cbMatDynParam._m0[5u].x * _856) + cbMatDynParam._m0[5u].y;
        float _4001 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _867 = (cbMatDynParam._m0[5u].z * _856) + cbMatDynParam._m0[5u].w;
        float _4012 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) - _863)) + _863) < ((_684 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_596, cbSceneParam._m0[5u].z, fma(_595, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _594));
    float _717 = fma(_596, cbSceneParam._m0[6u].z, fma(_595, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _594));
    float _720 = fma(_596, cbSceneParam._m0[7u].z, fma(_595, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _594));
    uint _733 = uint(roundEven(NORMAL.w)) * 13u;
    uint _734 = _733 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_735].z;
    float _4023 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _747 = 1.0 - _601;
    float _748 = _744 * _747;
    float _749 = _745 * _747;
    float _750 = _746 * _747;
    float _755 = (_744 + (-0.039999999105930328369140625)) * _601;
    float _756 = (_745 + (-0.039999999105930328369140625)) * _601;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _601;
    float _758 = _755 + 0.039999999105930328369140625;
    float _760 = _756 + 0.039999999105930328369140625;
    float _761 = _757 + 0.039999999105930328369140625;
    vec4 _770 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _773 = _770.x * TEXCOORD_3.w;
    float _774 = dot(vec3(_594, _595, _596), vec3(_675, _676, _677));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _594) - _675;
    float _782 = (_777 * _595) - _676;
    float _783 = (_777 * _596) - _677;
    float _787 = abs(dot(vec3(_675, _676, _677), vec3(_594, _595, _596)));
    float _4056 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_597);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _808 = (1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _809 = _802 * _789;
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837));
        float _904 = fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837));
        float _908 = fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837));
        float _933 = _837 + _594;
        float _934 = _841 + _595;
        float _935 = _845 + _596;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_594, _595, _596), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4104 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_594, _595, _596), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4137 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_594, _595, _596), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4170 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837));
        float _1223 = fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837));
        float _1227 = fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837));
        float _1250 = _837 + _594;
        float _1251 = _841 + _595;
        float _1252 = _845 + _596;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_594, _595, _596), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4233 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_594, _595, _596), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4266 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_594, _595, _596), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4299 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = _1176;
        _1498 = _1176;
        _1499 = _1176;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1188)) + _1188;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1189)) + _1189;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1190)) + _1190;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _781 * 0.5;
    float _1557 = _782 * 0.5;
    float _1558 = _783 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1686 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1689 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1717 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1686 > 0.0)
        {
            _1890 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2185;
        if (_1689 > 0.0)
        {
            _2185 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2185 = frontier_phi_38_33_ladder;
        }
        float _2187 = isnan(_1890) ? _1717 : (isnan(_1717) ? _1890 : min(_1717, _1890));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1683) + _1672;
        float _2193 = (_2188 * _1686) + _1676;
        float _2194 = (_2188 * _1689) + _1680;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2195;
        float _2199 = _2195 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 > _2199) || ((_2193 < _2197) || ((_2192 < _2197) || (_2192 > _2199))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_16_38_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_16_38_ladder_2;
        _1707 = frontier_phi_16_38_ladder_1;
        _1709 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1625);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1783 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1786 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1895;
        if (_1780 > 0.0)
        {
            _1895 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2212;
        if (_1783 > 0.0)
        {
            _2212 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2212 = frontier_phi_40_35_ladder;
        }
        float _2550;
        if (_1786 > 0.0)
        {
            _2550 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2550 = frontier_phi_50_47_ladder;
        }
        float _2552 = isnan(_2212) ? _1895 : (isnan(_1895) ? _2212 : min(_1895, _2212));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1780) + _1769;
        float _2558 = (_2553 * _1783) + _1773;
        float _2559 = (_2553 * _1786) + _1777;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2560;
        float _2563 = _2560 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2559 > _2563) || ((_2559 < _2561) || ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 < _2561) || (_2557 > _2563))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2559, cbModelParam._m0[17u].z, fma(_2558, cbModelParam._m0[17u].y, _2557 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2559, cbModelParam._m0[18u].z, fma(_2558, cbModelParam._m0[18u].y, _2557 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2559, cbModelParam._m0[19u].z, fma(_2558, cbModelParam._m0[19u].y, _2557 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_25_50_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_25_50_ladder_2;
        _1807 = frontier_phi_25_50_ladder_1;
        _1809 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1714);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1822 = (((_808 * _758) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1824 = (((_808 * _760) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1807 - _1707)) + _1707);
    float _1826 = (((_808 * _761) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1809 - _1709)) + _1709);
    float _1829 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1882 = _1869 / _1881;
    float _1883 = _1873 / _1881;
    float _1884 = _1877 / _1881;
    float _2031;
    float _2032;
    float _2033;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1911 = ((uint(_1884 > cbSceneParam._m0[59u].y) + uint(_1884 > cbSceneParam._m0[59u].x)) + uint(_1884 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1912 = _1911 + 43u;
        uint _1920 = _1911 + 44u;
        uint _1928 = _1911 + 45u;
        uint _1936 = _1911 + 46u;
        float _1947 = fma(_1881, cbSceneParam._m0[_1912].w, fma(_1877, cbSceneParam._m0[_1912].z, fma(_1873, cbSceneParam._m0[_1912].y, _1869 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1881, cbSceneParam._m0[_1920].w, fma(_1877, cbSceneParam._m0[_1920].z, fma(_1873, cbSceneParam._m0[_1920].y, _1869 * cbSceneParam._m0[_1920].x)));
        float _1959 = fma(_1881, cbSceneParam._m0[_1936].w, fma(_1877, cbSceneParam._m0[_1936].z, fma(_1873, cbSceneParam._m0[_1936].y, _1869 * cbSceneParam._m0[_1936].x)));
        float _1964 = cbSceneParam._m0[33u].z * _1959;
        float _1966 = cbSceneParam._m0[33u].w * _1959;
        float _1969 = fma(_1881, cbSceneParam._m0[_1928].w, fma(_1877, cbSceneParam._m0[_1928].z, fma(_1873, cbSceneParam._m0[_1928].y, _1869 * cbSceneParam._m0[_1928].x))) / _1959;
        float _2017 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
        float _4425 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2024 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1947) / _1959, (_1966 + _1951) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1947) / _1959, (_1951 - _1964) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1964) / _1959, (_1951 - _1966) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1966) / _1959, (_1964 + _1951) / _1959), _1969), 0.0)).x), vec4(0.25)));
        _2031 = 1.0 - (_2024 * cbSceneParam._m0[34u].x);
        _2032 = 1.0 - (_2024 * cbSceneParam._m0[34u].y);
        _2033 = 1.0 - (_2024 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2031 = 1.0;
        _2032 = 1.0;
        _2033 = 1.0;
    }
    float _2097;
    float _2099;
    float _2101;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2085 = fma(_1881, cbSceneParam._m0[63u].w, fma(_1877, cbSceneParam._m0[63u].z, fma(_1873, cbSceneParam._m0[63u].y, _1869 * cbSceneParam._m0[63u].x)));
        float _2086 = fma(_1881, cbSceneParam._m0[60u].w, fma(_1877, cbSceneParam._m0[60u].z, fma(_1873, cbSceneParam._m0[60u].y, _1869 * cbSceneParam._m0[60u].x))) / _2085;
        float _2087 = fma(_1881, cbSceneParam._m0[61u].w, fma(_1877, cbSceneParam._m0[61u].z, fma(_1873, cbSceneParam._m0[61u].y, _1869 * cbSceneParam._m0[61u].x))) / _2085;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2086 >= cbSceneParam._m0[64u].x) && (_2087 >= cbSceneParam._m0[64u].y)) && (_2086 <= cbSceneParam._m0[64u].z)) && (_2087 <= cbSceneParam._m0[64u].w))
        {
            float _2225 = fma(_1881, cbSceneParam._m0[62u].w, fma(_1877, cbSceneParam._m0[62u].z, fma(_1873, cbSceneParam._m0[62u].y, _1869 * cbSceneParam._m0[62u].x))) / _2085;
            float _2229 = isnan(cbSceneParam._m0[41u].w) ? _2225 : (isnan(_2225) ? cbSceneParam._m0[41u].w : max(_2225, cbSceneParam._m0[41u].w));
            float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
            float _4441 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
            float _2279 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2086, cbSceneParam._m0[33u].w + _2087), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2086, _2087 - cbSceneParam._m0[33u].z), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].z, _2087 - cbSceneParam._m0[33u].w), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2087), _2229), 0.0)).x), vec4(0.25)));
            float _2283 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
            float _2284 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
            float _2285 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
            frontier_phi_37_36_ladder_1 = isnan(_2284) ? _2032 : (isnan(_2032) ? _2284 : min(_2032, _2284));
            frontier_phi_37_36_ladder_2 = isnan(_2283) ? _2031 : (isnan(_2031) ? _2283 : min(_2031, _2283));
        }
        else
        {
            frontier_phi_37_36_ladder = _2033;
            frontier_phi_37_36_ladder_1 = _2032;
            frontier_phi_37_36_ladder_2 = _2031;
        }
        _2097 = frontier_phi_37_36_ladder_2;
        _2099 = frontier_phi_37_36_ladder_1;
        _2101 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2097 = _2031;
        _2099 = _2032;
        _2101 = _2033;
    }
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_733 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _773 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2144 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2148 = _2108 | 1u;
    float _2159 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_594, _595, _596));
    float _2162 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_594, _595, _596));
    float _4477 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _4488 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2167 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2169 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2176 = ((cbLight._m0[_2125].x * _2131) * _2169) + (((cbLight._m0[_2135].x * _2097) * _2144) * _2167);
    float _2177 = ((_2131 * cbLight._m0[_2125].y) * _2169) + (((cbLight._m0[_2135].y * _2099) * _2144) * _2167);
    float _2178 = ((_2131 * cbLight._m0[_2125].z) * _2169) + (((cbLight._m0[_2135].z * _2101) * _2144) * _2167);
    uvec4 _2182 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2184 = _2182.x == 0u;
    float _2286;
    float _2288;
    float _2290;
    if (_2184)
    {
        _2286 = _2176;
        _2288 = _2177;
        _2290 = _2178;
    }
    else
    {
        uint _2294 = _2108 + 6u;
        float _2310 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4499 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2313 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2286 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2176;
        _2288 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2177;
        _2290 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2178;
    }
    bool _2293 = _2182.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2293)
    {
        _2348 = _2286;
        _2350 = _2288;
        _2352 = _2290;
    }
    else
    {
        uint _2521 = _2108 + 7u;
        float _2537 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4515 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2540 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2348 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2286;
        _2350 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2288;
        _2352 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2290;
    }
    uint _2355 = _2108 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _597) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2108].x + _675;
    float _2371 = cbLight._m0[_2108].y + _676;
    float _2372 = cbLight._m0[_2108].z + _677;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2108].xyz));
    float _4531 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2384 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2385 = dot(vec3(_594, _595, _596), vec3(_2377, _2378, _2379));
    float _4553 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2377, _2378, _2379));
    float _4564 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2406 = 0.959999978542327880859375 - _755;
    float _2408 = 0.959999978542327880859375 - _756;
    float _2409 = 0.959999978542327880859375 - _757;
    float _2416 = 1.0 - _2369;
    float _2427 = (0.5 / (((_2384 * ((_2383 * _2416) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2416) + _2369) * _2383))) * _2383;
    float _4575 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2443 = _2108 + 9u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _597) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2148].x + _675;
    float _2457 = cbLight._m0[_2148].y + _676;
    float _2458 = cbLight._m0[_2148].z + _677;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2148].xyz));
    float _4586 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2470 = dot(vec3(_594, _595, _596), vec3(_2463, _2464, _2465));
    float _4597 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2463, _2464, _2465));
    float _4608 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2455 * _2455;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2496 = 1.0 - _2455;
    float _2506 = (0.5 / (((_2384 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2496) + _2455) * _2469))) * _2469;
    float _4619 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    float _2518 = (((((_2489 * _2406) + _758) * cbLight._m0[_2443].x) * _2508) * _2131) + ((((cbLight._m0[_2355].x * _2097) * ((_2405 * _2406) + _758)) * _2429) * _2144);
    float _2519 = (((((_2489 * _2408) + _760) * cbLight._m0[_2443].y) * _2508) * _2131) + ((((cbLight._m0[_2355].y * _2099) * ((_2405 * _2408) + _760)) * _2429) * _2144);
    float _2520 = (((((_2489 * _2409) + _761) * cbLight._m0[_2443].z) * _2508) * _2131) + ((((cbLight._m0[_2355].z * _2101) * ((_2405 * _2409) + _761)) * _2429) * _2144);
    float _2576;
    float _2578;
    float _2580;
    if (_2184)
    {
        _2576 = _2518;
        _2578 = _2519;
        _2580 = _2520;
    }
    else
    {
        uint _2582 = _2108 + 2u;
        uint _2586 = _2108 + 10u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _597) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _675;
        float _2603 = cbLight._m0[_2582].y + _676;
        float _2604 = cbLight._m0[_2582].z + _677;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2582].xyz));
        float _4630 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2616 = dot(vec3(_594, _595, _596), vec3(_2609, _2610, _2611));
        float _4641 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4652 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2384 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2642) + _2601) * _2615))) * _2615;
        float _4663 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2576 = (((((_2635 * _2406) + _758) * cbLight._m0[_2586].x) * _2654) * _2655) + _2518;
        _2578 = (((((_2635 * _2408) + _760) * cbLight._m0[_2586].y) * _2654) * _2655) + _2519;
        _2580 = (((((_2635 * _2409) + _761) * cbLight._m0[_2586].z) * _2654) * _2655) + _2520;
    }
    float _2686;
    float _2688;
    float _2690;
    if (_2293)
    {
        _2686 = _2576;
        _2688 = _2578;
        _2690 = _2580;
    }
    else
    {
        uint _2697 = _2108 + 3u;
        uint _2701 = _2108 + 11u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _597) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _675;
        float _2718 = cbLight._m0[_2697].y + _676;
        float _2719 = cbLight._m0[_2697].z + _677;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2697].xyz));
        float _4679 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2731 = dot(vec3(_594, _595, _596), vec3(_2724, _2725, _2726));
        float _4690 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4701 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2384 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2757) + _2716) * _2730))) * _2730;
        float _4712 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2686 = (((((_2750 * _2406) + _758) * cbLight._m0[_2701].x) * _2769) * _2770) + _2576;
        _2688 = (((((_2750 * _2408) + _760) * cbLight._m0[_2701].y) * _2769) * _2770) + _2578;
        _2690 = (((((_2750 * _2409) + _761) * cbLight._m0[_2701].z) * _2769) * _2770) + _2580;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2106.y == 0u)
    {
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.x;
        uint _2803 = uint((float(_2791.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2792))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2792)));
        float _2813 = (log2(_1884 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2814 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        uint _2817 = uint(isnan(14.0) ? _2814 : (isnan(_2814) ? 14.0 : min(_2814, 14.0)));
        uvec4 _2822 = texelFetch(g_lightClusterGridBuffer, int(((_2817 << 2u) + (_2803 << 6u)) >> 2u));
        uint _2823 = _2822.x;
        uint _2824 = _2791.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2824 >> 4u) & 15u)) + 4294967295u) & _2823) == 0u) || ((_2824 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3097)
                {
                    frontier_phi_71_pred = _3086;
                    frontier_phi_71_pred_1 = _3085;
                    frontier_phi_71_pred_2 = _3084;
                    frontier_phi_71_pred_3 = _3083;
                    frontier_phi_71_pred_4 = _3082;
                    frontier_phi_71_pred_5 = _3081;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3096;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3087 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _1882;
                        float _3293 = _3252.y - _1883;
                        float _3294 = _3252.z - _1884;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_714, _717, _720), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4738 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _1882;
                        float _3328 = (-0.0) - _1883;
                        float _3329 = (-0.0) - _1884;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3343 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3344 = 1.0 - _789;
                        float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                        float _3352 = _3351 * _3351;
                        float _3353 = _3352 * _3352;
                        float _3354 = _3334 + _3299;
                        float _3355 = _3335 + _3300;
                        float _3356 = _3336 + _3301;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3364 = dot(vec3(_714, _717, _720), vec3(_3334, _3335, _3336));
                        float _4754 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3368 = dot(vec3(_714, _717, _720), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                        float _4765 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                        float _3376 = _3312 * _3352;
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3302) + _3377;
                        float _4776 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3382 = 1.0 - _3352;
                        float _3392 = (0.5 / (((_3381 * ((_3367 * _3382) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3352) * _3367))) * _3381;
                        float _4787 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3403 = (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3375 * _3375) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3156 = (_3323 * _3271.x) + _3229;
                        _3157 = (_3323 * _3271.y) + _3230;
                        _3158 = (_3323 * _3271.z) + _3231;
                        _3153 = (_3403 * _3288.x) + _3226;
                        _3154 = (_3403 * _3288.y) + _3227;
                        _3155 = (_3403 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_71_pred = _3158;
                    frontier_phi_71_pred_1 = _3157;
                    frontier_phi_71_pred_2 = _3156;
                    frontier_phi_71_pred_3 = _3155;
                    frontier_phi_71_pred_4 = _3154;
                    frontier_phi_71_pred_5 = _3153;
                }
                _2939 = frontier_phi_71_pred;
                _2937 = frontier_phi_71_pred_1;
                _2935 = frontier_phi_71_pred_2;
                _2933 = frontier_phi_71_pred_3;
                _2931 = frontier_phi_71_pred_4;
                _2929 = frontier_phi_71_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2929;
                    _3082 = _2931;
                    _3083 = _2933;
                    _3084 = _2935;
                    _3085 = _2937;
                    _3086 = _2939;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2945) & _2823) == 0u)
        {
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
            float _3075 = _3074 * _1882;
            float _3076 = _3074 * _1883;
            float _3077 = _3074 * _1884;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3209 = _2928;
                float _3210 = _2930;
                float _3211 = _2932;
                float _3212 = _2934;
                float _3213 = _2936;
                float _3214 = _2938;
                uint _3215 = _2945;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3225)
                    {
                        frontier_phi_82_pred = _3214;
                        frontier_phi_82_pred_1 = _3213;
                        frontier_phi_82_pred_2 = _3212;
                        frontier_phi_82_pred_3 = _3211;
                        frontier_phi_82_pred_4 = _3210;
                        frontier_phi_82_pred_5 = _3209;
                    }
                    else
                    {
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        uint _3436 = _3224;
                        uint _3437;
                        vec4 _3462;
                        float _3463;
                        vec4 _3478;
                        vec3 _3490;
                        vec4 _3505;
                        vec4 _3521;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3447 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3436));
                            _3437 = (_3436 + 4294967295u) & _3436;
                            uint _3449 = _3447 * 40u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3463 = _3462.w;
                            uint _3465 = (_3447 * 40u) + 4u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3447 * 40u) + 8u;
                            _3490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x));
                            uint _3492 = (_3447 * 40u) + 16u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3508 = (_3447 * 40u) + 20u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3524 = (_3447 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3447 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_1884, _3556.z, fma(_1883, _3556.y, _3556.x * _1882)) + _3556.w;
                            _3569 = !((fma(_1884, _3537.z, fma(_1883, _3537.y, _3537.x * _1882)) + _3537.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3462.x - _1882;
                                float _3597 = _3462.y - _1883;
                                float _3598 = _3462.z - _1884;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3463 * _3463));
                                float _4798 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3614 = sqrt(_3599) * _3478.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_714, _717, _720))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_1884, _3505.z, fma(_1883, _3505.y, _3505.x * _1882)) + _3505.w) / _3568;
                                float _3628 = (fma(_1884, _3521.z, fma(_1883, _3521.y, _3521.x * _1882)) + _3521.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4814 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _789;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3075;
                                float _3658 = _3604 - _3076;
                                float _3659 = _3605 - _3077;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_714, _717, _720), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4825 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3671 = dot(vec3(_714, _717, _720), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4836 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_714, _717, _720), vec3(_3603, _3604, _3605))) + _3680;
                                float _4847 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4858 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3634 * _3478.z;
                                frontier_phi_88_pred_1 = _3634 * _3478.y;
                                frontier_phi_88_pred_2 = _3634 * _3478.x;
                                frontier_phi_88_pred_3 = _3708 * _3490.z;
                                frontier_phi_88_pred_4 = _3708 * _3490.y;
                                frontier_phi_88_pred_5 = _3708 * _3490.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_88_pred;
                            _3716 = frontier_phi_88_pred_1;
                            _3715 = frontier_phi_88_pred_2;
                            _3714 = frontier_phi_88_pred_3;
                            _3713 = frontier_phi_88_pred_4;
                            _3712 = frontier_phi_88_pred_5;
                            _3420 = _3715 + _3433;
                            _3421 = _3716 + _3434;
                            _3422 = _3717 + _3435;
                            _3417 = _3712 + _3430;
                            _3418 = _3713 + _3431;
                            _3419 = _3714 + _3432;
                            if (_3437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3437;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3422;
                        frontier_phi_82_pred_1 = _3421;
                        frontier_phi_82_pred_2 = _3420;
                        frontier_phi_82_pred_3 = _3419;
                        frontier_phi_82_pred_4 = _3418;
                        frontier_phi_82_pred_5 = _3417;
                    }
                    _3060 = frontier_phi_82_pred;
                    _3058 = frontier_phi_82_pred_1;
                    _3056 = frontier_phi_82_pred_2;
                    _3054 = frontier_phi_82_pred_3;
                    _3052 = frontier_phi_82_pred_4;
                    _3050 = frontier_phi_82_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3050;
                        _3210 = _3052;
                        _3211 = _3054;
                        _3212 = _3056;
                        _3213 = _3058;
                        _3214 = _3060;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3056;
                frontier_phi_63_64_ladder_1 = _3060;
                frontier_phi_63_64_ladder_2 = _3058;
                frontier_phi_63_64_ladder_3 = _3054;
                frontier_phi_63_64_ladder_4 = _3052;
                frontier_phi_63_64_ladder_5 = _3050;
            }
            else
            {
                frontier_phi_63_64_ladder = _2934;
                frontier_phi_63_64_ladder_1 = _2938;
                frontier_phi_63_64_ladder_2 = _2936;
                frontier_phi_63_64_ladder_3 = _2932;
                frontier_phi_63_64_ladder_4 = _2930;
                frontier_phi_63_64_ladder_5 = _2928;
            }
            _3049 = frontier_phi_63_64_ladder_5;
            _3051 = frontier_phi_63_64_ladder_4;
            _3053 = frontier_phi_63_64_ladder_3;
            _3055 = frontier_phi_63_64_ladder;
            _3057 = frontier_phi_63_64_ladder_2;
            _3059 = frontier_phi_63_64_ladder_1;
        }
        float _3064 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2836 = (_3064 * _3055) + _2348;
        _2838 = (_3064 * _3057) + _2350;
        _2840 = (_3064 * _3059) + _2352;
        _2842 = ((_3049 * _758) * _3064) + _2686;
        _2844 = ((_3051 * _760) * _3064) + _2688;
        _2846 = ((_3053 * _761) * _3064) + _2690;
    }
    else
    {
        _2836 = _2348;
        _2838 = _2350;
        _2840 = _2352;
        _2842 = _2686;
        _2844 = _2688;
        _2846 = _2690;
    }
    uint _2852 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _4874 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4885 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4896 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2883 = (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2836 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _773))) + ((_2842 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1614)) * cbPerFrame._m0[3u].x)) + (((_369 * cbMtdParam._m0[11u].x) * (_519.x + _504.x)) * cbInstanceData._m0[_2852].x);
    float _2885 = ((((_369 * cbMtdParam._m0[11u].y) * (_519.y + _504.y)) * cbInstanceData._m0[_2852].y) + ((_2844 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1614)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2838 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _773)));
    float _2887 = ((((_369 * cbMtdParam._m0[11u].z) * (_519.z + _504.z)) * cbInstanceData._m0[_2852].z) + ((_2846 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1614)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2840 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _773)));
    float _2888 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2889 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    float _2890 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    uint _2891 = _733 + 6u;
    float _2899 = _695 / cbSceneParam._m0[86u].x;
    float _2900 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2914 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, (log2((isnan(cbSceneParam._m0[77u].w) ? _617 : (isnan(_617) ? cbSceneParam._m0[77u].w : min(_617, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2916 = _2914.x;
    float _2917 = _2914.y;
    float _2918 = _2914.z;
    float _2919 = _2914.w;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_617 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_617) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _617 : min(cbSceneParam._m0[80u].w, _617));
        float _2954 = _2953 / _617;
        float _2965 = _2954 * _668;
        float _2966 = _669 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2969 = _2954 * _670;
        float _2971 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2972 = _2971 + cbSceneParam._m0[79u].w;
        float _2973 = cbSceneParam._m0[79u].w - _2966;
        float _2979 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2969 * _2969));
        float _2982 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2979;
        float _2987 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2989 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3166;
        if (abs((_2967 - _2971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3166 = ((((_2972 > 0.0) ? exp2(_2987 * _2972) : (2.0 - exp2(_2989 * _2972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2982;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : max(_2972, _2973));
            float _3112 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : min(_2972, _2973));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3166 = ((abs(_2979 / _2967) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2987 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2987 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2989 * _3121) - exp2(_2989 * _3122)) * _3110))) + (_2982 * cbSceneParam._m0[80u].z);
        }
        vec4 _3168 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2899, _2900, 1.0), 0.0);
        float _3177 = exp2((_3166 * (-1.44269502162933349609375)) * (1.0 - _3168.w));
        float _3178 = log2(_3177);
        float _3194 = log2(_2919);
        _2991 = (exp2(_3194 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].x)) * _3168.x) / cbSceneParam._m0[78u].x)) + _2916;
        _2993 = (exp2(_3194 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].y)) * _3168.y) / cbSceneParam._m0[78u].y)) + _2917;
        _2995 = (exp2(_3194 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].z)) * _3168.z) / cbSceneParam._m0[78u].z)) + _2918;
        _2997 = _3177 * _2919;
    }
    else
    {
        _2991 = _2916;
        _2993 = _2917;
        _2995 = _2918;
        _2997 = _2919;
    }
    bool _3204;
    vec4 _3007;
    vec4 _3029;
    float _3031;
    float _3035;
    float _3036;
    float _3037;
    float _3038;
    bool _3048;
    for (;;)
    {
        _3007 = cbMatDynParam._m0[0u];
        float _3009 = roundEven(_3007.y);
        bool _3010 = _3009 == 3.0;
        float _3011 = log2(_2997);
        float _3018 = exp2(_3011 * cbSceneParam._m0[78u].x) * _2888;
        float _3019 = exp2(_3011 * cbSceneParam._m0[78u].y) * _2889;
        float _3020 = exp2(_3011 * cbSceneParam._m0[78u].z) * _2890;
        float _3027 = _684 + (-0.5);
        _3029 = cbMtdParam._m0[1u];
        _3031 = _3029.y * _3027;
        float _3034 = (_3009 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3035 = _3034 * (_3010 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2991)));
        _3036 = _3034 * (_3010 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2993)));
        _3037 = _3034 * (_3010 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2995)));
        _3038 = _3027 * 0.999000012874603271484375;
        _3048 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3048)
        {
            if ((cbInstanceData._m0[_733 + 7u].x + _3038) < 0.5)
            {
                _3204 = true;
                break;
            }
        }
        uint _3145 = _734 + uint(_3007.w);
        if ((cbInstanceData._m0[_3145].w < 1.0) && ((cbInstanceData._m0[_3145].w + _3038) < 0.5))
        {
            _3204 = true;
            break;
        }
        if ((_3031 + 1.0) < _3029.x)
        {
            _3204 = true;
            break;
        }
        _3204 = false;
        break;
    }
    float _3408;
    if (_3204)
    {
        discard_state = true;
        _3408 = 0.0;
    }
    else
    {
        _3408 = cbInstanceData._m0[_2891].w;
    }
    SV_Target.x = _3035;
    SV_Target.y = _3036;
    SV_Target.z = _3037;
    SV_Target.w = _3408;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2891].w;
    discard_exit();
}


