#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1010;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3628 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3639 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))));
    float _336 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3650 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[14u].y - _321) * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) + _321;
    vec4 _369 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _395 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _410 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _424 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_369.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3661 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _451 = (_445.x * 2.0) + (-1.0);
    float _452 = (_445.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3672 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _469 = (_295 * (((cbMtdParam._m0[13u].z * _325) - _325) + _451)) + _325;
    float _470 = (_295 * (((cbMtdParam._m0[13u].z * _327) - _327) + _452)) + _327;
    float _471 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) - _333)) + _333;
    float _474 = fma(_471, _214 * NORMAL.x, fma(_470, _221 * TANGENT.x, (_207 * _199) * _469));
    float _477 = fma(_471, _214 * NORMAL.y, fma(_470, _221 * TANGENT.y, (_207 * _200) * _469));
    float _480 = fma(_471, _214 * NORMAL.z, fma(_470, _221 * TANGENT.z, (_207 * _201) * _469));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3683 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _488 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3705 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3716 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _557 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _547);
    float _558 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _547);
    float _559 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _547);
    float _563 = inversesqrt(dot(vec3(_557, _558, _559), vec3(_557, _558, _559)));
    float _564 = _557 * _563;
    float _565 = _558 * _563;
    float _566 = _559 * _563;
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _597 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _600 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _613 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_615].x;
    float _622 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_615].y;
    float _623 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_615].z;
    float _3727 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    vec4 _635 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _638 = _635.x * TEXCOORD_3.w;
    float _639 = dot(vec3(_485, _486, _487), vec3(_564, _565, _566));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _485) - _564;
    float _647 = (_642 * _486) - _565;
    float _648 = (_642 * _487) - _566;
    float _652 = abs(dot(vec3(_564, _565, _566), vec3(_485, _486, _487)));
    float _3760 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_488);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1009;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _734 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _738 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _742 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _767 = _699 + _485;
        float _768 = _703 + _486;
        float _769 = _707 + _487;
        float _779 = fma(_769, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767)) - _734;
        float _780 = fma(_769, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767)) - _738;
        float _781 = fma(_769, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767)) - _742;
        float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
        float _798 = ((_785 * _779) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_734 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_785 * _780) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_738 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_785 * _781) / cbModelParam._m0[34u].z) + ((((((_742 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        float _837 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_803.x + (-0.5));
        float _839 = _837 * (_803.y + (-0.5));
        float _840 = _837 * (_803.z + (-0.5));
        float _847 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_810.x + (-0.5));
        float _849 = _847 * (_810.y + (-0.5));
        float _850 = _847 * (_810.z + (-0.5));
        float _857 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_817.x + (-0.5));
        float _859 = _857 * (_817.y + (-0.5));
        float _860 = _857 * (_817.z + (-0.5));
        float _867 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_824.x + (-0.5));
        float _869 = _867 * (_824.y + (-0.5));
        float _870 = _867 * (_824.z + (-0.5));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = _838 * 0.5;
        float _875 = _848 * 0.5;
        float _876 = _858 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _891 = (dot(vec3(_485, _486, _487), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _901 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3808 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_903 + 1.0))) + _908) * _871;
        float _918 = _839 * 0.5;
        float _919 = _849 * 0.5;
        float _920 = _859 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_485, _486, _487), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3841 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_945 + 1.0))) + _950) * _872;
        float _960 = _840 * 0.5;
        float _961 = _850 * 0.5;
        float _962 = _860 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_485, _486, _487), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3874 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_987 + 1.0))) + _992) * _873;
        _1009 = _840;
        _1011 = _839;
        _1012 = _838;
        _1013 = _850;
        _1014 = _849;
        _1015 = _848;
        _1016 = _860;
        _1017 = _859;
        _1018 = _858;
        _1019 = _873;
        _1020 = _872;
        _1021 = _871;
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
    }
    else
    {
        _1009 = _1010;
        _1011 = _1010;
        _1012 = _1010;
        _1013 = _1010;
        _1014 = _1010;
        _1015 = _1010;
        _1016 = _1010;
        _1017 = _1010;
        _1018 = _1010;
        _1019 = _1010;
        _1020 = _1010;
        _1021 = _1010;
        _1022 = 0.0;
        _1023 = 0.0;
        _1024 = 0.0;
    }
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1050 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1054 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1058 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1081 = _699 + _485;
        float _1082 = _703 + _486;
        float _1083 = _707 + _487;
        float _1093 = fma(_1083, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081)) - _1050;
        float _1094 = fma(_1083, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081)) - _1054;
        float _1095 = fma(_1083, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081)) - _1058;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1050 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1054 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[35u].z) + ((((((_1058 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1149 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1116.x + (-0.5));
        float _1151 = _1149 * (_1116.y + (-0.5));
        float _1152 = _1149 * (_1116.z + (-0.5));
        float _1159 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1123.x + (-0.5));
        float _1161 = _1159 * (_1123.y + (-0.5));
        float _1162 = _1159 * (_1123.z + (-0.5));
        float _1169 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1130.x + (-0.5));
        float _1171 = _1169 * (_1130.y + (-0.5));
        float _1172 = _1169 * (_1130.z + (-0.5));
        float _1179 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1137.x + (-0.5));
        float _1181 = _1179 * (_1137.y + (-0.5));
        float _1182 = _1179 * (_1137.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_485, _486, _487), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3937 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1213 + 1.0))) + _1218) * _1183;
        float _1228 = _1151 * 0.5;
        float _1229 = _1161 * 0.5;
        float _1230 = _1171 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_485, _486, _487), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3970 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1255 + 1.0))) + _1260) * _1184;
        float _1270 = _1152 * 0.5;
        float _1271 = _1162 * 0.5;
        float _1272 = _1172 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_485, _486, _487), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4003 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1297 + 1.0))) + _1302) * _1185;
        _1319 = _1152;
        _1320 = _1151;
        _1321 = _1150;
        _1322 = _1162;
        _1323 = _1161;
        _1324 = _1160;
        _1325 = _1172;
        _1326 = _1171;
        _1327 = _1170;
        _1328 = _1185;
        _1329 = _1184;
        _1330 = _1183;
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1010;
        _1320 = _1010;
        _1321 = _1010;
        _1322 = _1010;
        _1323 = _1010;
        _1324 = _1010;
        _1325 = _1010;
        _1326 = _1010;
        _1327 = _1010;
        _1328 = _1010;
        _1329 = _1010;
        _1330 = _1010;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1024)) + _1024;
    float _1366 = fma(_1345, cbSceneParam._m0[89u].z, fma(_1344, cbSceneParam._m0[89u].y, _1343 * cbSceneParam._m0[89u].x));
    float _1369 = fma(_1345, cbSceneParam._m0[90u].z, fma(_1344, cbSceneParam._m0[90u].y, _1343 * cbSceneParam._m0[90u].x));
    float _1372 = fma(_1345, cbSceneParam._m0[91u].z, fma(_1344, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1343));
    float _1387 = _646 * 0.5;
    float _1388 = _647 * 0.5;
    float _1389 = _648 * 0.5;
    float _1390 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1393 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1396 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1430;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1403 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1009, _1013, _1016, _1019));
        float _1407 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1411 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1418 = dot(vec4(cbModelParam._m0[39u]), vec4(_1387, _1388, _1389, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1441;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1432 = dot(vec4(cbModelParam._m0[40u]), vec4(_1387, _1388, _1389, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1445 = (_1441 * cbModelParam._m0[1u].x) + (_1430 * (1.0 - cbModelParam._m0[1u].x));
    float _1455 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _488);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1455 : min(cbModelParam._m0[25u].z, _1455));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1517 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1520 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1548;
        if (_1514 > 0.0)
        {
            _1548 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1548 = frontier_phi_14_12_ladder;
        }
        float _1719;
        if (_1517 > 0.0)
        {
            _1719 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1719 = frontier_phi_23_19_ladder;
        }
        float _2015;
        if (_1520 > 0.0)
        {
            _2015 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2015 = frontier_phi_35_30_ladder;
        }
        float _2017 = isnan(_1719) ? _1548 : (isnan(_1548) ? _1719 : min(_1548, _1719));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1514) + _1503;
        float _2023 = (_2018 * _1517) + _1507;
        float _2024 = (_2018 * _1520) + _1511;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2169 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1456);
            frontier_phi_13_35_ladder = _2169.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2169.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2169.x * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_13_35_ladder_2;
        _1538 = frontier_phi_13_35_ladder_1;
        _1540 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1456);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1544 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _488);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1544 : min(cbModelParam._m0[25u].w, _1544));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1614 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1617 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1724;
        if (_1611 > 0.0)
        {
            _1724 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _2042;
        if (_1614 > 0.0)
        {
            _2042 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2042 = frontier_phi_37_32_ladder;
        }
        float _2369;
        if (_1617 > 0.0)
        {
            _2369 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2369 = frontier_phi_47_44_ladder;
        }
        float _2371 = isnan(_2042) ? _1724 : (isnan(_1724) ? _2042 : min(_1724, _2042));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1611) + _1600;
        float _2377 = (_2372 * _1614) + _1604;
        float _2378 = (_2372 * _1617) + _1608;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2379;
        float _2382 = _2379 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2378 > _2382) || ((_2378 < _2380) || ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 < _2380) || (_2376 > _2382))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2378, cbModelParam._m0[17u].z, fma(_2377, cbModelParam._m0[17u].y, _2376 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2378, cbModelParam._m0[18u].z, fma(_2377, cbModelParam._m0[18u].y, _2376 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2378, cbModelParam._m0[19u].z, fma(_2377, cbModelParam._m0[19u].y, _2376 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_22_47_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_22_47_ladder_2;
        _1638 = frontier_phi_22_47_ladder_1;
        _1640 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1545);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1652 = ((((1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_667 * _654)) * _638;
    float _1653 = _1652 * ((cbModelParam._m0[1u].w * (_1636 - _1536)) + _1536);
    float _1654 = _1652 * ((cbModelParam._m0[1u].w * (_1638 - _1538)) + _1538);
    float _1655 = _1652 * ((cbModelParam._m0[1u].w * (_1640 - _1540)) + _1540);
    float _1658 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, _1653 * cbSceneParam._m0[91u].x));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1711 = _1698 / _1710;
    float _1712 = _1702 / _1710;
    float _1713 = _1706 / _1710;
    float _1860;
    float _1861;
    float _1862;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1740 = ((uint(_1713 > cbSceneParam._m0[59u].y) + uint(_1713 > cbSceneParam._m0[59u].x)) + uint(_1713 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1741 = _1740 + 43u;
        uint _1749 = _1740 + 44u;
        uint _1757 = _1740 + 45u;
        uint _1765 = _1740 + 46u;
        float _1776 = fma(_1710, cbSceneParam._m0[_1741].w, fma(_1706, cbSceneParam._m0[_1741].z, fma(_1702, cbSceneParam._m0[_1741].y, _1698 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1710, cbSceneParam._m0[_1749].w, fma(_1706, cbSceneParam._m0[_1749].z, fma(_1702, cbSceneParam._m0[_1749].y, _1698 * cbSceneParam._m0[_1749].x)));
        float _1788 = fma(_1710, cbSceneParam._m0[_1765].w, fma(_1706, cbSceneParam._m0[_1765].z, fma(_1702, cbSceneParam._m0[_1765].y, _1698 * cbSceneParam._m0[_1765].x)));
        float _1793 = cbSceneParam._m0[33u].z * _1788;
        float _1795 = cbSceneParam._m0[33u].w * _1788;
        float _1798 = fma(_1710, cbSceneParam._m0[_1757].w, fma(_1706, cbSceneParam._m0[_1757].z, fma(_1702, cbSceneParam._m0[_1757].y, _1698 * cbSceneParam._m0[_1757].x))) / _1788;
        float _1846 = (cbSceneParam._m0[33u].x - sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713))) * cbSceneParam._m0[33u].y;
        float _4129 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1853 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1793 + _1776) / _1788, (_1795 + _1780) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 + _1776) / _1788, (_1780 - _1793) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 - _1793) / _1788, (_1780 - _1795) / _1788), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 - _1795) / _1788, (_1793 + _1780) / _1788), _1798), 0.0)).x), vec4(0.25)));
        _1860 = 1.0 - (_1853 * cbSceneParam._m0[34u].x);
        _1861 = 1.0 - (_1853 * cbSceneParam._m0[34u].y);
        _1862 = 1.0 - (_1853 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1860 = 1.0;
        _1861 = 1.0;
        _1862 = 1.0;
    }
    float _1926;
    float _1928;
    float _1930;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1914 = fma(_1710, cbSceneParam._m0[63u].w, fma(_1706, cbSceneParam._m0[63u].z, fma(_1702, cbSceneParam._m0[63u].y, _1698 * cbSceneParam._m0[63u].x)));
        float _1915 = fma(_1710, cbSceneParam._m0[60u].w, fma(_1706, cbSceneParam._m0[60u].z, fma(_1702, cbSceneParam._m0[60u].y, _1698 * cbSceneParam._m0[60u].x))) / _1914;
        float _1916 = fma(_1710, cbSceneParam._m0[61u].w, fma(_1706, cbSceneParam._m0[61u].z, fma(_1702, cbSceneParam._m0[61u].y, _1698 * cbSceneParam._m0[61u].x))) / _1914;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1915 >= cbSceneParam._m0[64u].x) && (_1916 >= cbSceneParam._m0[64u].y)) && (_1915 <= cbSceneParam._m0[64u].z)) && (_1916 <= cbSceneParam._m0[64u].w))
        {
            float _2055 = fma(_1710, cbSceneParam._m0[62u].w, fma(_1706, cbSceneParam._m0[62u].z, fma(_1702, cbSceneParam._m0[62u].y, _1698 * cbSceneParam._m0[62u].x))) / _1914;
            float _2059 = isnan(cbSceneParam._m0[41u].w) ? _2055 : (isnan(_2055) ? cbSceneParam._m0[41u].w : max(_2055, cbSceneParam._m0[41u].w));
            float _2102 = (cbSceneParam._m0[33u].x - sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713))) * cbSceneParam._m0[33u].y;
            float _4145 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
            float _2109 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1915, cbSceneParam._m0[33u].w + _1916), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1915, _1916 - cbSceneParam._m0[33u].z), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].z, _1916 - cbSceneParam._m0[33u].w), _2059), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1916), _2059), 0.0)).x), vec4(0.25)));
            float _2113 = 1.0 - (_2109 * cbSceneParam._m0[34u].x);
            float _2114 = 1.0 - (_2109 * cbSceneParam._m0[34u].y);
            float _2115 = 1.0 - (_2109 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2115) ? _1862 : (isnan(_1862) ? _2115 : min(_1862, _2115));
            frontier_phi_34_33_ladder_1 = isnan(_2114) ? _1861 : (isnan(_1861) ? _2114 : min(_1861, _2114));
            frontier_phi_34_33_ladder_2 = isnan(_2113) ? _1860 : (isnan(_1860) ? _2113 : min(_1860, _2113));
        }
        else
        {
            frontier_phi_34_33_ladder = _1862;
            frontier_phi_34_33_ladder_1 = _1861;
            frontier_phi_34_33_ladder_2 = _1860;
        }
        _1926 = frontier_phi_34_33_ladder_2;
        _1928 = frontier_phi_34_33_ladder_1;
        _1930 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1926 = _1860;
        _1928 = _1861;
        _1930 = _1862;
    }
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _638 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1974 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1978 = _1937 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_485, _486, _487));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_485, _486, _487));
    float _4181 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4192 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1954].x * _1960) * _1999) + (((cbLight._m0[_1964].x * _1926) * _1974) * _1997);
    float _2007 = ((_1960 * cbLight._m0[_1954].y) * _1999) + (((cbLight._m0[_1964].y * _1928) * _1974) * _1997);
    float _2008 = ((_1960 * cbLight._m0[_1954].z) * _1999) + (((cbLight._m0[_1964].z * _1930) * _1974) * _1997);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2014)
    {
        _2116 = _2006;
        _2118 = _2007;
        _2120 = _2008;
    }
    else
    {
        uint _2124 = _1937 + 6u;
        float _2140 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4203 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2143 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2116 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _2006;
        _2118 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _2007;
        _2120 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _2008;
    }
    bool _2123 = _2012.y == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2123)
    {
        _2178 = _2116;
        _2180 = _2118;
        _2182 = _2120;
    }
    else
    {
        uint _2340 = _1937 + 7u;
        float _2356 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4219 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2359 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2178 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2116;
        _2180 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2118;
        _2182 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2120;
    }
    uint _2185 = _1937 + 8u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _488) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_1937].x + _564;
    float _2201 = cbLight._m0[_1937].y + _565;
    float _2202 = cbLight._m0[_1937].z + _566;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1937].xyz));
    float _4235 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2214 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2215 = dot(vec3(_485, _486, _487), vec3(_2207, _2208, _2209));
    float _4257 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2207, _2208, _2209));
    float _4268 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2199 * _2199;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2239 = 1.0 - _2199;
    float _2250 = (0.5 / (((_2214 * ((_2213 * _2239) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2239) + _2199) * _2213))) * _2213;
    float _4279 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    uint _2266 = _1937 + 9u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _488) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_1978].x + _564;
    float _2280 = cbLight._m0[_1978].y + _565;
    float _2281 = cbLight._m0[_1978].z + _566;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1978].xyz));
    float _4290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2293 = dot(vec3(_485, _486, _487), vec3(_2286, _2287, _2288));
    float _4301 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2286, _2287, _2288));
    float _4312 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2278 * _2278;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2314 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2315 = 1.0 - _2278;
    float _2325 = (0.5 / (((_2214 * ((_2292 * _2315) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2315) + _2278) * _2292))) * _2292;
    float _4323 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    float _2337 = (((_2314 * cbLight._m0[_2266].x) * _2327) * _1960) + ((((cbLight._m0[_2185].x * _1926) * _2238) * _2252) * _1974);
    float _2338 = (((_2314 * cbLight._m0[_2266].y) * _2327) * _1960) + ((((cbLight._m0[_2185].y * _1928) * _2238) * _2252) * _1974);
    float _2339 = (((_2314 * cbLight._m0[_2266].z) * _2327) * _1960) + ((((cbLight._m0[_2185].z * _1930) * _2238) * _2252) * _1974);
    float _2395;
    float _2397;
    float _2399;
    if (_2014)
    {
        _2395 = _2337;
        _2397 = _2338;
        _2399 = _2339;
    }
    else
    {
        uint _2401 = _1937 + 2u;
        uint _2405 = _1937 + 10u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _488) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _564;
        float _2422 = cbLight._m0[_2401].y + _565;
        float _2423 = cbLight._m0[_2401].z + _566;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2401].xyz));
        float _4334 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2435 = dot(vec3(_485, _486, _487), vec3(_2428, _2429, _2430));
        float _4345 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4356 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2214 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2457) + _2420) * _2434))) * _2434;
        float _4367 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2395 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2337;
        _2397 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2338;
        _2399 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2339;
    }
    float _2501;
    float _2503;
    float _2505;
    if (_2123)
    {
        _2501 = _2395;
        _2503 = _2397;
        _2505 = _2399;
    }
    else
    {
        uint _2512 = _1937 + 3u;
        uint _2516 = _1937 + 11u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _488) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _564;
        float _2533 = cbLight._m0[_2512].y + _565;
        float _2534 = cbLight._m0[_2512].z + _566;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2512].xyz));
        float _4383 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2546 = dot(vec3(_485, _486, _487), vec3(_2539, _2540, _2541));
        float _4394 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4405 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2568 = 1.0 - _2531;
        float _2578 = (0.5 / (((_2214 * ((_2545 * _2568) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2568) + _2531) * _2545))) * _2545;
        float _4416 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2501 = (((_2567 * cbLight._m0[_2516].x) * _2580) * _2581) + _2395;
        _2503 = (((_2567 * cbLight._m0[_2516].y) * _2580) * _2581) + _2397;
        _2505 = (((_2567 * cbLight._m0[_2516].z) * _2580) * _2581) + _2399;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1935.y == 0u)
    {
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _2603)));
        float _2624 = (log2(_1713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
        }
        else
        {
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            uint _2890 = 0u;
            uint _2899;
            bool _2900;
            for (;;)
            {
                _2899 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                _2900 = _2899 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2900)
                {
                    frontier_phi_66_pred = _2889;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2886;
                    frontier_phi_66_pred_4 = _2885;
                    frontier_phi_66_pred_5 = _2884;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2899;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2890 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _1711;
                        float _3075 = _3034.y - _1712;
                        float _3076 = _3034.z - _1713;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_594, _597, _600), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4442 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _1711;
                        float _3110 = (-0.0) - _1712;
                        float _3111 = (-0.0) - _1713;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3125 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3126 = 1.0 - _654;
                        float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                        float _3134 = _3133 * _3133;
                        float _3135 = _3134 * _3134;
                        float _3136 = _3116 + _3081;
                        float _3137 = _3117 + _3082;
                        float _3138 = _3118 + _3083;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3146 = dot(vec3(_594, _597, _600), vec3(_3116, _3117, _3118));
                        float _4458 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3150 = dot(vec3(_594, _597, _600), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                        float _4469 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                        float _3158 = _3094 * _3134;
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3084) + _3159;
                        float _4480 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3164 = 1.0 - _3134;
                        float _3174 = (0.5 / (((_3163 * ((_3149 * _3164) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3134) * _3149))) * _3163;
                        float _4491 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3185 = (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3157 * _3157) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2943 = (_3105 * _3053.x) + _3011;
                        _2944 = (_3105 * _3053.y) + _3012;
                        _2945 = (_3105 * _3053.z) + _3013;
                        _2940 = (_3185 * _3070.x) + _3008;
                        _2941 = (_3185 * _3070.y) + _3009;
                        _2942 = (_3185 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_66_pred = _2945;
                    frontier_phi_66_pred_1 = _2944;
                    frontier_phi_66_pred_2 = _2943;
                    frontier_phi_66_pred_3 = _2942;
                    frontier_phi_66_pred_4 = _2941;
                    frontier_phi_66_pred_5 = _2940;
                }
                _2750 = frontier_phi_66_pred;
                _2748 = frontier_phi_66_pred_1;
                _2746 = frontier_phi_66_pred_2;
                _2744 = frontier_phi_66_pred_3;
                _2742 = frontier_phi_66_pred_4;
                _2740 = frontier_phi_66_pred_5;
                uint _2891 = _2890 + 1u;
                if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2884 = _2740;
                    _2885 = _2742;
                    _2886 = _2744;
                    _2887 = _2746;
                    _2888 = _2748;
                    _2889 = _2750;
                    _2890 = _2891;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
        }
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.z;
        uint _2756 = (_2754 >> 8u) & 15u;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((4294967295u << _2756) & _2634) == 0u)
        {
            _2852 = _2739;
            _2854 = _2741;
            _2856 = _2743;
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
        }
        else
        {
            float _2877 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
            float _2878 = _2877 * _1711;
            float _2879 = _2877 * _1712;
            float _2880 = _2877 * _1713;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2756 < ((_2754 >> 12u) & 15u))
            {
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2991 = _2739;
                float _2992 = _2741;
                float _2993 = _2743;
                float _2994 = _2745;
                float _2995 = _2747;
                float _2996 = _2749;
                uint _2997 = _2756;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3007)
                    {
                        frontier_phi_72_pred = _2996;
                        frontier_phi_72_pred_1 = _2995;
                        frontier_phi_72_pred_2 = _2994;
                        frontier_phi_72_pred_3 = _2993;
                        frontier_phi_72_pred_4 = _2992;
                        frontier_phi_72_pred_5 = _2991;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3203 = _2991;
                        float _3204 = _2992;
                        float _3205 = _2993;
                        float _3206 = _2994;
                        float _3207 = _2995;
                        float _3208 = _2996;
                        uint _3209 = _3006;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3294;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3220 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3220 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3220 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3220 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_1713, _3329.z, fma(_1712, _3329.y, _3329.x * _1711)) + _3329.w;
                            _3342 = !((fma(_1713, _3310.z, fma(_1712, _3310.y, _3310.x * _1711)) + _3310.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3235.x - _1711;
                                float _3370 = _3235.y - _1712;
                                float _3371 = _3235.z - _1713;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3236 * _3236));
                                float _4502 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3387 = sqrt(_3372) * _3251.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_594, _597, _600))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_1713, _3278.z, fma(_1712, _3278.y, _3278.x * _1711)) + _3278.w) / _3341;
                                float _3401 = (fma(_1713, _3294.z, fma(_1712, _3294.y, _3294.x * _1711)) + _3294.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4518 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _654;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2878;
                                float _3431 = _3377 - _2879;
                                float _3432 = _3378 - _2880;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2878, (-0.0) - _2879, (-0.0) - _2880));
                                float _4529 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3444 = dot(vec3(_594, _597, _600), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4540 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_594, _597, _600), vec3(_3376, _3377, _3378))) + _3453;
                                float _4551 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4562 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3407 * _3251.y;
                                frontier_phi_78_pred_1 = _3407 * _3251.x;
                                frontier_phi_78_pred_2 = _3481 * _3263.z;
                                frontier_phi_78_pred_3 = _3481 * _3263.y;
                                frontier_phi_78_pred_4 = _3481 * _3263.x;
                                frontier_phi_78_pred_5 = _3407 * _3251.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3489 = frontier_phi_78_pred;
                            _3488 = frontier_phi_78_pred_1;
                            _3487 = frontier_phi_78_pred_2;
                            _3486 = frontier_phi_78_pred_3;
                            _3485 = frontier_phi_78_pred_4;
                            _3490 = frontier_phi_78_pred_5;
                            _3193 = _3488 + _3206;
                            _3194 = _3489 + _3207;
                            _3195 = _3490 + _3208;
                            _3190 = _3485 + _3203;
                            _3191 = _3486 + _3204;
                            _3192 = _3487 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3195;
                        frontier_phi_72_pred_1 = _3194;
                        frontier_phi_72_pred_2 = _3193;
                        frontier_phi_72_pred_3 = _3192;
                        frontier_phi_72_pred_4 = _3191;
                        frontier_phi_72_pred_5 = _3190;
                    }
                    _2863 = frontier_phi_72_pred;
                    _2861 = frontier_phi_72_pred_1;
                    _2859 = frontier_phi_72_pred_2;
                    _2857 = frontier_phi_72_pred_3;
                    _2855 = frontier_phi_72_pred_4;
                    _2853 = frontier_phi_72_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2853;
                        _2992 = _2855;
                        _2993 = _2857;
                        _2994 = _2859;
                        _2995 = _2861;
                        _2996 = _2863;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2863;
                frontier_phi_60_61_ladder_1 = _2861;
                frontier_phi_60_61_ladder_2 = _2857;
                frontier_phi_60_61_ladder_3 = _2855;
                frontier_phi_60_61_ladder_4 = _2853;
                frontier_phi_60_61_ladder_5 = _2859;
            }
            else
            {
                frontier_phi_60_61_ladder = _2749;
                frontier_phi_60_61_ladder_1 = _2747;
                frontier_phi_60_61_ladder_2 = _2743;
                frontier_phi_60_61_ladder_3 = _2741;
                frontier_phi_60_61_ladder_4 = _2739;
                frontier_phi_60_61_ladder_5 = _2745;
            }
            _2852 = frontier_phi_60_61_ladder_4;
            _2854 = frontier_phi_60_61_ladder_3;
            _2856 = frontier_phi_60_61_ladder_2;
            _2858 = frontier_phi_60_61_ladder_5;
            _2860 = frontier_phi_60_61_ladder_1;
            _2862 = frontier_phi_60_61_ladder;
        }
        float _2867 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2647 = (_2867 * _2858) + _2178;
        _2649 = (_2867 * _2860) + _2180;
        _2651 = (_2867 * _2862) + _2182;
        _2653 = ((_2852 * 0.039999999105930328369140625) * _2867) + _2501;
        _2655 = ((_2854 * 0.039999999105930328369140625) * _2867) + _2503;
        _2657 = ((_2856 * 0.039999999105930328369140625) * _2867) + _2505;
    }
    else
    {
        _2647 = _2178;
        _2649 = _2180;
        _2651 = _2182;
        _2653 = _2501;
        _2655 = _2503;
        _2657 = _2505;
    }
    uint _2663 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _4578 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4589 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4600 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _2694 = (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2647 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _638))) + ((_2653 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1445)) * cbPerFrame._m0[3u].x)) + (((_425 * cbMtdParam._m0[11u].x) * (_410.x + _395.x)) * cbInstanceData._m0[_2663].x);
    float _2696 = ((((_425 * cbMtdParam._m0[11u].y) * (_410.y + _395.y)) * cbInstanceData._m0[_2663].y) + ((_2655 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1445)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2649 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _638)));
    float _2698 = ((((_425 * cbMtdParam._m0[11u].z) * (_410.z + _395.z)) * cbInstanceData._m0[_2663].z) + ((_2657 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1445)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2651 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _638)));
    uint _2702 = _613 + 6u;
    float _2710 = _572 / cbSceneParam._m0[86u].x;
    float _2711 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2725 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2727 = _2725.x;
    float _2728 = _2725.y;
    float _2729 = _2725.z;
    float _2730 = _2725.w;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2764 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2765 = _2764 / _507;
        float _2776 = _2765 * _557;
        float _2777 = _558 * _2765;
        float _2778 = (-0.0) - _2777;
        float _2780 = _2765 * _559;
        float _2782 = (cbSceneParam._m0[77u].w * _2778) / _2764;
        float _2783 = _2782 + cbSceneParam._m0[79u].w;
        float _2784 = cbSceneParam._m0[79u].w - _2777;
        float _2790 = sqrt(((_2776 * _2776) + (_2777 * _2777)) + (_2780 * _2780));
        float _2793 = (1.0 - (cbSceneParam._m0[77u].w / _2764)) * _2790;
        float _2798 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2800 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2953;
        if (abs((_2778 - _2782) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2953 = ((((_2783 > 0.0) ? exp2(_2798 * _2783) : (2.0 - exp2(_2800 * _2783))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2793;
        }
        else
        {
            float _2913 = 1.0 / cbSceneParam._m0[80u].x;
            float _2914 = isnan(_2784) ? _2783 : (isnan(_2783) ? _2784 : max(_2783, _2784));
            float _2915 = isnan(_2784) ? _2783 : (isnan(_2783) ? _2784 : min(_2783, _2784));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            _2953 = ((abs(_2790 / _2778) * cbSceneParam._m0[80u].y) * ((((_2924 - _2925) * 2.0) - ((exp2(_2798 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0)))) - exp2(_2798 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))))) * _2913)) - ((exp2(_2800 * _2924) - exp2(_2800 * _2925)) * _2913))) + (_2793 * cbSceneParam._m0[80u].z);
        }
        vec4 _2955 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, 1.0), 0.0);
        float _2964 = exp2((_2953 * (-1.44269502162933349609375)) * (1.0 - _2955.w));
        float _2965 = log2(_2964);
        float _2981 = log2(_2730);
        _2802 = (exp2(_2981 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].x)) * _2955.x) / cbSceneParam._m0[78u].x)) + _2727;
        _2804 = (exp2(_2981 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].y)) * _2955.y) / cbSceneParam._m0[78u].y)) + _2728;
        _2806 = (exp2(_2981 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].z)) * _2955.z) / cbSceneParam._m0[78u].z)) + _2729;
        _2808 = _2964 * _2730;
    }
    else
    {
        _2802 = _2727;
        _2804 = _2728;
        _2806 = _2729;
        _2808 = _2730;
    }
    float _2820 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2821 = _2820 == 3.0;
    float _2822 = log2(_2808);
    float _2829 = exp2(_2822 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)));
    float _2830 = exp2(_2822 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)));
    float _2831 = exp2(_2822 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)));
    float _2840 = (_2820 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2840 * (_2821 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2802)));
    SV_Target.y = _2840 * (_2821 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2804)));
    SV_Target.z = _2840 * (_2821 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2806)));
    SV_Target.w = cbInstanceData._m0[_2702].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2702].w;
}


