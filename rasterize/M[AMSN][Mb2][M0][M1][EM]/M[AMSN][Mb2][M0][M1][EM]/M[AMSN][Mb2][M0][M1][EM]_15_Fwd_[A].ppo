#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1154;
float _3542;
float _3543;
float _3544;
float _3545;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3554 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _362 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_343.x + 0.00999999977648258209228515625));
    float _364 = _362 * (cbMtdParam._m0[15u].x + 1.0);
    float _3565 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _373 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _365) + _321;
    float _374 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _365) + _322;
    float _375 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _365) + _323;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _396 = (_388.x * 2.0) + (-1.0);
    float _398 = (_388.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_396, _398), vec2(_396, _398));
    float _3576 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _420 = _416.z;
    float _423 = (_416.x * 2.0) + (-1.0);
    float _424 = (_416.y * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3587 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))));
    float _433 = (_314 * (_388.z - _420)) + _420;
    float _436 = _362 * (cbMtdParam._m0[14u].w + 1.0);
    float _3598 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _440 = ((cbMtdParam._m0[14u].y - _433) * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) + _433;
    vec4 _466 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _492 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _507 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _521 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_466.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3609 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _529 = (_314 * (_396 - _423)) + _423;
    float _530 = (_314 * (_398 - _424)) + _424;
    float _531 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) - _430)) + _430;
    vec4 _550 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _556 = (_550.x * 2.0) + (-1.0);
    float _557 = (_550.y * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3620 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _574 = (_365 * (((_529 * cbMtdParam._m0[13u].z) - _529) + _556)) + _529;
    float _575 = (_365 * (((_530 * cbMtdParam._m0[13u].z) - _530) + _557)) + _530;
    float _576 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) - _531)) + _531;
    float _579 = fma(_576, _222 * NORMAL.x, fma(_575, _229 * TANGENT.x, (_215 * _207) * _574));
    float _582 = fma(_576, _222 * NORMAL.y, fma(_575, _229 * TANGENT.y, (_215 * _208) * _574));
    float _585 = fma(_576, _222 * NORMAL.z, fma(_575, _229 * TANGENT.z, (_215 * _209) * _574));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3631 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _593 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3653 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3664 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _662 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _652);
    float _663 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _652);
    float _664 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _652);
    float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
    float _669 = _662 * _668;
    float _670 = _663 * _668;
    float _671 = _664 * _668;
    vec4 _676 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _678 = _676.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _834 = sqrt(((_662 * _662) + (_663 * _663)) + (_664 * _664));
        float _840 = (cbMatDynParam._m0[5u].x * _834) + cbMatDynParam._m0[5u].y;
        float _3675 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _845 = (cbMatDynParam._m0[5u].z * _834) + cbMatDynParam._m0[5u].w;
        float _3686 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) - _841)) + _841) < ((_678 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _713 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _716 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _730 = _729 + 9u;
    uint _731 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3697 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _754 = _751.x * TEXCOORD_3.w;
    float _755 = dot(vec3(_590, _591, _592), vec3(_669, _670, _671));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _590) - _669;
    float _763 = (_758 * _591) - _670;
    float _764 = (_758 * _592) - _671;
    float _768 = abs(dot(vec3(_669, _670, _671), vec3(_590, _591, _592)));
    float _3730 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_593);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _882 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _886 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _911 = _815 + _590;
        float _912 = _819 + _591;
        float _913 = _823 + _592;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_590, _591, _592), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3778 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_590, _591, _592), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3811 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_590, _591, _592), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3844 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1201 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1205 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1228 = _815 + _590;
        float _1229 = _819 + _591;
        float _1230 = _823 + _592;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_590, _591, _592), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3907 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_590, _591, _592), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3940 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_590, _591, _592), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3973 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = _1154;
        _1475 = _1154;
        _1476 = _1154;
        _1477 = _1154;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1166)) + _1166;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1167)) + _1167;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1168)) + _1168;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _762 * 0.5;
    float _1535 = _763 * 0.5;
    float _1536 = _764 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1664 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1667 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1695 = frontier_phi_17_15_ladder;
        }
        float _1897;
        if (_1664 > 0.0)
        {
            _1897 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1897 = frontier_phi_26_22_ladder;
        }
        float _2140;
        if (_1667 > 0.0)
        {
            _2140 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2140 = frontier_phi_38_33_ladder;
        }
        float _2142 = isnan(_1897) ? _1695 : (isnan(_1695) ? _1897 : min(_1695, _1897));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1661) + _1650;
        float _2148 = (_2143 * _1664) + _1654;
        float _2149 = (_2143 * _1667) + _1658;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_16_38_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_16_38_ladder_2;
        _1685 = frontier_phi_16_38_ladder_1;
        _1687 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1603);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1761 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1764 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1902;
        if (_1758 > 0.0)
        {
            _1902 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2167;
        if (_1761 > 0.0)
        {
            _2167 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2167 = frontier_phi_40_35_ladder;
        }
        float _2372;
        if (_1764 > 0.0)
        {
            _2372 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2372 = frontier_phi_49_46_ladder;
        }
        float _2374 = isnan(_2167) ? _1902 : (isnan(_1902) ? _2167 : min(_1902, _2167));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1758) + _1747;
        float _2380 = (_2375 * _1761) + _1751;
        float _2381 = (_2375 * _1764) + _1755;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_25_49_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_25_49_ladder_2;
        _1785 = frontier_phi_25_49_ladder_1;
        _1787 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1692);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1799 = ((((1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_783 * _770)) * _754;
    float _1800 = _1799 * ((cbModelParam._m0[1u].w * (_1783 - _1683)) + _1683);
    float _1801 = _1799 * ((cbModelParam._m0[1u].w * (_1785 - _1685)) + _1685);
    float _1802 = _1799 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _754 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1856 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1860 = _1823 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_590, _591, _592));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_590, _591, _592));
    float _4109 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4120 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1840].x * _1846) * _1881) + ((cbLight._m0[_1850].x * _1856) * _1879);
    float _1889 = ((_1846 * cbLight._m0[_1840].y) * _1881) + ((_1856 * cbLight._m0[_1850].y) * _1879);
    float _1890 = ((_1846 * cbLight._m0[_1840].z) * _1881) + ((_1856 * cbLight._m0[_1850].z) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1823 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4131 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1934 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2111 = _1823 + 7u;
        float _2127 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4147 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2130 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1952 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _1907;
        _1954 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _1909;
        _1956 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _1911;
    }
    uint _1959 = _1823 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _593) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1823].x + _669;
    float _1975 = cbLight._m0[_1823].y + _670;
    float _1976 = cbLight._m0[_1823].z + _671;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1823].xyz));
    float _4163 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1988 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _1989 = dot(vec3(_590, _591, _592), vec3(_1981, _1982, _1983));
    float _4185 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1981, _1982, _1983));
    float _4196 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = 1.0 - _1973;
    float _2024 = (0.5 / (((_1988 * ((_1987 * _2013) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2013) + _1973) * _1987))) * _1987;
    float _4207 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2037 = _1823 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _593) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1860].x + _669;
    float _2051 = cbLight._m0[_1860].y + _670;
    float _2052 = cbLight._m0[_1860].z + _671;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1860].xyz));
    float _4218 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2064 = dot(vec3(_590, _591, _592), vec3(_2057, _2058, _2059));
    float _4229 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2057, _2058, _2059));
    float _4240 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2049;
    float _2096 = (0.5 / (((_1988 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2086) + _2049) * _2063))) * _2063;
    float _4251 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2108 = (((_2085 * cbLight._m0[_2037].x) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].x) * _2026) * _1856);
    float _2109 = (((_2085 * cbLight._m0[_2037].y) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].y) * _2026) * _1856);
    float _2110 = (((_2085 * cbLight._m0[_2037].z) * _2098) * _1846) + (((_2012 * cbLight._m0[_1959].z) * _2026) * _1856);
    float _2172;
    float _2174;
    float _2176;
    if (_1896)
    {
        _2172 = _2108;
        _2174 = _2109;
        _2176 = _2110;
    }
    else
    {
        uint _2178 = _1823 + 2u;
        uint _2182 = _1823 + 10u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _593) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _669;
        float _2199 = cbLight._m0[_2178].y + _670;
        float _2200 = cbLight._m0[_2178].z + _671;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2178].xyz));
        float _4262 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2212 = dot(vec3(_590, _591, _592), vec3(_2205, _2206, _2207));
        float _4273 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4284 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1988 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2234) + _2197) * _2211))) * _2211;
        float _4295 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2172 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2108;
        _2174 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2109;
        _2176 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2110;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1914)
    {
        _2282 = _2172;
        _2284 = _2174;
        _2286 = _2176;
    }
    else
    {
        uint _2293 = _1823 + 3u;
        uint _2297 = _1823 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _593) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _669;
        float _2314 = cbLight._m0[_2293].y + _670;
        float _2315 = cbLight._m0[_2293].z + _671;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2293].xyz));
        float _4311 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2327 = dot(vec3(_590, _591, _592), vec3(_2320, _2321, _2322));
        float _4322 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4333 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2348 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2349 = 1.0 - _2312;
        float _2359 = (0.5 / (((_1988 * ((_2326 * _2349) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2349) + _2312) * _2326))) * _2326;
        float _4344 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2282 = (((_2348 * cbLight._m0[_2297].x) * _2361) * _2362) + _2172;
        _2284 = (((_2348 * cbLight._m0[_2297].y) * _2361) * _2362) + _2174;
        _2286 = (((_2348 * cbLight._m0[_2297].z) * _2361) * _2362) + _2176;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1821.y == 0u)
    {
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2437;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2437;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2437;
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2453)));
        float _2474 = (log2(_2440 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            uint _2769 = 0u;
            uint _2778;
            bool _2779;
            for (;;)
            {
                _2778 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                _2779 = _2778 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2779)
                {
                    frontier_phi_66_pred = _2763;
                    frontier_phi_66_pred_1 = _2768;
                    frontier_phi_66_pred_2 = _2767;
                    frontier_phi_66_pred_3 = _2766;
                    frontier_phi_66_pred_4 = _2765;
                    frontier_phi_66_pred_5 = _2764;
                }
                else
                {
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    uint _2914;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2778;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    for (;;)
                    {
                        uint _2918 = uint(findLSB(_2914)) + (_2769 << 5u);
                        uint _2915 = (_2914 + 4294967295u) & _2914;
                        uint _2920 = _2918 * 48u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2940 = (_2918 * 48u) + 4u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2959 = (_2918 * 48u) + 8u;
                        vec3 _2970 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x));
                        float _2974 = _2934.x - _2438;
                        float _2975 = _2934.y - _2439;
                        float _2976 = _2934.z - _2440;
                        float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                        float _2980 = inversesqrt(_2977);
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2984 = dot(vec3(_710, _713, _716), vec3(_2981, _2982, _2983));
                        float _2989 = 1.0 - (_2977 * _2934.w);
                        float _4370 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _2991 = sqrt(_2977) * _2953.w;
                        float _2994 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2984) + _2995;
                        float _3001 = _2991 * _2991;
                        float _3005 = ((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2990) / ((_3001 * 0.699999988079071044921875) + 1.0);
                        float _3009 = (-0.0) - _2438;
                        float _3010 = (-0.0) - _2439;
                        float _3011 = (-0.0) - _2440;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3026 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _770;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_710, _713, _716), vec3(_3016, _3017, _3018));
                        float _4386 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3051 = dot(vec3(_710, _713, _716), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4397 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2994 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2984) + _3060;
                        float _4408 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4419 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3058 * _3058) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125))) * _2990;
                        _2838 = (_3005 * _2953.x) + _2911;
                        _2839 = (_3005 * _2953.y) + _2912;
                        _2840 = (_3005 * _2953.z) + _2913;
                        _2835 = (_3086 * _2970.x) + _2908;
                        _2836 = (_3086 * _2970.y) + _2909;
                        _2837 = (_3086 * _2970.z) + _2910;
                        if (_2915 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2915;
                        }
                    }
                    frontier_phi_66_pred = _2835;
                    frontier_phi_66_pred_1 = _2840;
                    frontier_phi_66_pred_2 = _2839;
                    frontier_phi_66_pred_3 = _2838;
                    frontier_phi_66_pred_4 = _2837;
                    frontier_phi_66_pred_5 = _2836;
                }
                _2611 = frontier_phi_66_pred;
                _2621 = frontier_phi_66_pred_1;
                _2619 = frontier_phi_66_pred_2;
                _2617 = frontier_phi_66_pred_3;
                _2615 = frontier_phi_66_pred_4;
                _2613 = frontier_phi_66_pred_5;
                uint _2770 = _2769 + 1u;
                if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2763 = _2611;
                    _2764 = _2613;
                    _2765 = _2615;
                    _2766 = _2617;
                    _2767 = _2619;
                    _2768 = _2621;
                    _2769 = _2770;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((4294967295u << _2627) & _2484) == 0u)
        {
            _2731 = _2610;
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
        }
        else
        {
            float _2756 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
            float _2757 = _2756 * _2438;
            float _2758 = _2756 * _2439;
            float _2759 = _2756 * _2440;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2891 = _2610;
                float _2892 = _2612;
                float _2893 = _2614;
                float _2894 = _2616;
                float _2895 = _2618;
                float _2896 = _2620;
                uint _2897 = _2627;
                uint _2906;
                bool _2907;
                for (;;)
                {
                    _2906 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                    _2907 = _2906 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2907)
                    {
                        frontier_phi_77_pred = _2896;
                        frontier_phi_77_pred_1 = _2895;
                        frontier_phi_77_pred_2 = _2894;
                        frontier_phi_77_pred_3 = _2893;
                        frontier_phi_77_pred_4 = _2892;
                        frontier_phi_77_pred_5 = _2891;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3113 = _2891;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        uint _3119 = _2906;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3188;
                        vec4 _3204;
                        float _3251;
                        bool _3252;
                        for (;;)
                        {
                            uint _3130 = ((_2897 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3175 = (_3130 * 40u) + 16u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3191 = (_3130 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3130 * 40u) + 24u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3226 = (_3130 * 40u) + 28u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3251 = fma(_2440, _3239.z, fma(_2439, _3239.y, _3239.x * _2438)) + _3239.w;
                            _3252 = !((fma(_2440, _3220.z, fma(_2439, _3220.y, _3220.x * _2438)) + _3220.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3252)
                            {
                                float _3279 = _3145.x - _2438;
                                float _3280 = _3145.y - _2439;
                                float _3281 = _3145.z - _2440;
                                float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                                float _3285 = inversesqrt(_3282);
                                float _3286 = _3285 * _3279;
                                float _3287 = _3285 * _3280;
                                float _3288 = _3285 * _3281;
                                float _3292 = 1.0 - (_3282 / (_3146 * _3146));
                                float _4430 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3297 = sqrt(_3282) * _3161.w;
                                float _3299 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                                float _3300 = _3299 * _3299;
                                float _3303 = ((1.0 - _3300) * dot(vec3(_3286, _3287, _3288), vec3(_710, _713, _716))) + _3300;
                                float _3306 = _3297 * _3297;
                                float _3310 = (fma(_2440, _3188.z, fma(_2439, _3188.y, _3188.x * _2438)) + _3188.w) / _3251;
                                float _3311 = (fma(_2440, _3204.z, fma(_2439, _3204.y, _3204.x * _2438)) + _3204.w) / _3251;
                                float _3315 = 1.0 - dot(vec2(_3310, _3311), vec2(_3310, _3311));
                                float _4446 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3317 = _3316 * (((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3293) / ((_3306 * 0.699999988079071044921875) + 1.0));
                                float _3329 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                                float _3330 = 1.0 - _770;
                                float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                                float _3338 = _3337 * _3337;
                                float _3339 = _3338 * _3338;
                                float _3340 = _3286 - _2757;
                                float _3341 = _3287 - _2758;
                                float _3342 = _3288 - _2759;
                                float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                                float _3350 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2757, (-0.0) - _2758, (-0.0) - _2759));
                                float _4457 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3354 = dot(vec3(_710, _713, _716), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                                float _4468 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                                float _3362 = _3299 * _3338;
                                float _3363 = _3362 * _3362;
                                float _3369 = ((1.0 - _3363) * dot(vec3(_710, _713, _716), vec3(_3286, _3287, _3288))) + _3363;
                                float _4479 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3371 = 1.0 - _3338;
                                float _3381 = (0.5 / (((_3370 * ((_3353 * _3371) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3338) * _3353))) * _3370;
                                float _4490 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3391 = (_3316 * _3293) * (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) / ((_3361 * _3361) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3317 * _3161.y;
                                frontier_phi_83_pred_1 = _3317 * _3161.x;
                                frontier_phi_83_pred_2 = _3391 * _3173.z;
                                frontier_phi_83_pred_3 = _3391 * _3173.y;
                                frontier_phi_83_pred_4 = _3391 * _3173.x;
                                frontier_phi_83_pred_5 = _3317 * _3161.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_83_pred;
                            _3398 = frontier_phi_83_pred_1;
                            _3397 = frontier_phi_83_pred_2;
                            _3396 = frontier_phi_83_pred_3;
                            _3395 = frontier_phi_83_pred_4;
                            _3400 = frontier_phi_83_pred_5;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            _3105 = _3400 + _3118;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            _3102 = _3397 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3105;
                        frontier_phi_77_pred_1 = _3104;
                        frontier_phi_77_pred_2 = _3103;
                        frontier_phi_77_pred_3 = _3102;
                        frontier_phi_77_pred_4 = _3101;
                        frontier_phi_77_pred_5 = _3100;
                    }
                    _2742 = frontier_phi_77_pred;
                    _2740 = frontier_phi_77_pred_1;
                    _2738 = frontier_phi_77_pred_2;
                    _2736 = frontier_phi_77_pred_3;
                    _2734 = frontier_phi_77_pred_4;
                    _2732 = frontier_phi_77_pred_5;
                    uint _2898 = _2897 + 1u;
                    if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2891 = _2732;
                        _2892 = _2734;
                        _2893 = _2736;
                        _2894 = _2738;
                        _2895 = _2740;
                        _2896 = _2742;
                        _2897 = _2898;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2736;
                frontier_phi_58_59_ladder_1 = _2742;
                frontier_phi_58_59_ladder_2 = _2740;
                frontier_phi_58_59_ladder_3 = _2738;
                frontier_phi_58_59_ladder_4 = _2734;
                frontier_phi_58_59_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_58_59_ladder = _2614;
                frontier_phi_58_59_ladder_1 = _2620;
                frontier_phi_58_59_ladder_2 = _2618;
                frontier_phi_58_59_ladder_3 = _2616;
                frontier_phi_58_59_ladder_4 = _2612;
                frontier_phi_58_59_ladder_5 = _2610;
            }
            _2731 = frontier_phi_58_59_ladder_5;
            _2733 = frontier_phi_58_59_ladder_4;
            _2735 = frontier_phi_58_59_ladder;
            _2737 = frontier_phi_58_59_ladder_3;
            _2739 = frontier_phi_58_59_ladder_2;
            _2741 = frontier_phi_58_59_ladder_1;
        }
        float _2746 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2497 = (_2746 * _2737) + _1952;
        _2499 = (_2746 * _2739) + _1954;
        _2501 = (_2746 * _2741) + _1956;
        _2503 = ((_2731 * 0.039999999105930328369140625) * _2746) + _2282;
        _2505 = ((_2733 * 0.039999999105930328369140625) * _2746) + _2284;
        _2507 = ((_2735 * 0.039999999105930328369140625) * _2746) + _2286;
    }
    else
    {
        _2497 = _1952;
        _2499 = _1954;
        _2501 = _1956;
        _2503 = _2282;
        _2505 = _2284;
        _2507 = _2286;
    }
    uint _2513 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _4506 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4517 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4528 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _2544 = (((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2497 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _754))) + ((_2503 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + (((_522 * cbMtdParam._m0[11u].x) * (_507.x + _492.x)) * cbInstanceData._m0[_2513].x);
    float _2546 = ((((_522 * cbMtdParam._m0[11u].y) * (_507.y + _492.y)) * cbInstanceData._m0[_2513].y) + ((_2505 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2499 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _754)));
    float _2548 = ((((_522 * cbMtdParam._m0[11u].z) * (_507.z + _492.z)) * cbInstanceData._m0[_2513].z) + ((_2507 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2501 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _754)));
    float _2549 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2550 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2551 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    uint _2552 = _729 + 6u;
    float _2560 = _690 / cbSceneParam._m0[86u].x;
    float _2561 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2577 = _2575.x;
    float _2578 = _2575.y;
    float _2579 = _2575.z;
    float _2580 = _2575.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2636 = _2635 / _612;
        float _2647 = _2636 * _662;
        float _2648 = _663 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2651 = _2636 * _664;
        float _2653 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2648;
        float _2661 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2848;
        if (abs((_2649 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2848 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2792 = 1.0 / cbSceneParam._m0[80u].x;
            float _2793 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2794 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            _2848 = ((abs(_2661 / _2649) * cbSceneParam._m0[80u].y) * ((((_2803 - _2804) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))))) * _2792)) - ((exp2(_2671 * _2803) - exp2(_2671 * _2804)) * _2792))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2850 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, 1.0), 0.0);
        float _2859 = exp2((_2848 * (-1.44269502162933349609375)) * (1.0 - _2850.w));
        float _2860 = log2(_2859);
        float _2876 = log2(_2580);
        _2673 = (exp2(_2876 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].x)) * _2850.x) / cbSceneParam._m0[78u].x)) + _2577;
        _2675 = (exp2(_2876 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].y)) * _2850.y) / cbSceneParam._m0[78u].y)) + _2578;
        _2677 = (exp2(_2876 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].z)) * _2850.z) / cbSceneParam._m0[78u].z)) + _2579;
        _2679 = _2859 * _2580;
    }
    else
    {
        _2673 = _2577;
        _2675 = _2578;
        _2677 = _2579;
        _2679 = _2580;
    }
    bool _2886;
    vec4 _2689;
    vec4 _2711;
    float _2713;
    float _2717;
    float _2718;
    float _2719;
    float _2720;
    bool _2730;
    for (;;)
    {
        _2689 = cbMatDynParam._m0[0u];
        float _2691 = roundEven(_2689.y);
        bool _2692 = _2691 == 3.0;
        float _2693 = log2(_2679);
        float _2700 = exp2(_2693 * cbSceneParam._m0[78u].x) * _2549;
        float _2701 = exp2(_2693 * cbSceneParam._m0[78u].y) * _2550;
        float _2702 = exp2(_2693 * cbSceneParam._m0[78u].z) * _2551;
        float _2709 = _678 + (-0.5);
        _2711 = cbMtdParam._m0[1u];
        _2713 = _2711.y * _2709;
        float _2716 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2717 = _2716 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
        _2718 = _2716 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
        _2719 = _2716 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
        _2720 = _2709 * 0.999000012874603271484375;
        _2730 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2730)
        {
            if ((cbInstanceData._m0[_729 + 7u].x + _2720) < 0.5)
            {
                _2886 = true;
                break;
            }
        }
        uint _2827 = _730 + uint(_2689.w);
        if ((cbInstanceData._m0[_2827].w < 1.0) && ((cbInstanceData._m0[_2827].w + _2720) < 0.5))
        {
            _2886 = true;
            break;
        }
        if ((_2713 + 1.0) < _2711.x)
        {
            _2886 = true;
            break;
        }
        _2886 = false;
        break;
    }
    float _3091;
    if (_2886)
    {
        discard_state = true;
        _3091 = 0.0;
    }
    else
    {
        _3091 = cbInstanceData._m0[_2552].w;
    }
    SV_Target.x = _2717;
    SV_Target.y = _2718;
    SV_Target.z = _2719;
    SV_Target.w = _3091;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2552].w;
    discard_exit();
}


