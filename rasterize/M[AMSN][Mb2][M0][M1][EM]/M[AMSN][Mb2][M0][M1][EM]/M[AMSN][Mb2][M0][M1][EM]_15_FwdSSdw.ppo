#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1112;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3470 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _341 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _360 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_341.x + 0.00999999977648258209228515625));
    float _362 = _360 * (cbMtdParam._m0[15u].x + 1.0);
    float _3481 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _371 = ((((cbMtdParam._m0[12u].x - _319) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _363) + _319;
    float _372 = ((((cbMtdParam._m0[12u].y - _320) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _363) + _320;
    float _373 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _321)) * _363) + _321;
    vec4 _386 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _394 = (_386.x * 2.0) + (-1.0);
    float _396 = (_386.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_394, _396), vec2(_394, _396));
    float _3492 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    vec4 _414 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _418 = _414.z;
    float _421 = (_414.x * 2.0) + (-1.0);
    float _422 = (_414.y * 2.0) + (-1.0);
    float _423 = dot(vec2(_421, _422), vec2(_421, _422));
    float _3503 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    float _431 = (_312 * (_386.z - _418)) + _418;
    float _434 = _360 * (cbMtdParam._m0[14u].w + 1.0);
    float _3514 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _438 = ((cbMtdParam._m0[14u].y - _431) * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) + _431;
    vec4 _464 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _490 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _505 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _519 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_464.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3525 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _527 = (_312 * (_394 - _421)) + _421;
    float _528 = (_312 * (_396 - _422)) + _422;
    float _529 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) - _428)) + _428;
    vec4 _548 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _554 = (_548.x * 2.0) + (-1.0);
    float _555 = (_548.y * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3536 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _572 = (_363 * (((_527 * cbMtdParam._m0[13u].z) - _527) + _554)) + _527;
    float _573 = (_363 * (((_528 * cbMtdParam._m0[13u].z) - _528) + _555)) + _528;
    float _574 = (_363 * (sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) - _529)) + _529;
    float _577 = fma(_574, _220 * NORMAL.x, fma(_573, _227 * TANGENT.x, (_213 * _205) * _572));
    float _580 = fma(_574, _220 * NORMAL.y, fma(_573, _227 * TANGENT.y, (_213 * _206) * _572));
    float _583 = fma(_574, _220 * NORMAL.z, fma(_573, _227 * TANGENT.z, (_213 * _207) * _572));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3547 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _591 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3569 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3580 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _610 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _699 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _702 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _715 = uint(roundEven(NORMAL.w)) * 13u;
    uint _716 = _715 + 9u;
    uint _717 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3591 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _740 = _737.x * TEXCOORD_3.w;
    float _741 = dot(vec3(_588, _589, _590), vec3(_667, _668, _669));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _588) - _667;
    float _749 = (_744 * _589) - _668;
    float _750 = (_744 * _590) - _669;
    float _754 = abs(dot(vec3(_667, _668, _669), vec3(_588, _589, _590)));
    float _3624 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_591);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _840 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _844 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _869 = _801 + _588;
        float _870 = _805 + _589;
        float _871 = _809 + _590;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _836;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _840;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _844;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_836 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_840 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_844 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_588, _589, _590), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3672 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_588, _589, _590), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3705 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_588, _589, _590), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3738 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1113 = _941;
        _1114 = _940;
        _1115 = _952;
        _1116 = _951;
        _1117 = _950;
        _1118 = _962;
        _1119 = _961;
        _1120 = _960;
        _1121 = _975;
        _1122 = _974;
        _1123 = _973;
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _1112;
        _1113 = _1112;
        _1114 = _1112;
        _1115 = _1112;
        _1116 = _1112;
        _1117 = _1112;
        _1118 = _1112;
        _1119 = _1112;
        _1120 = _1112;
        _1121 = _1112;
        _1122 = _1112;
        _1123 = _1112;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1156 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1160 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1183 = _801 + _588;
        float _1184 = _805 + _589;
        float _1185 = _809 + _590;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_588, _589, _590), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3801 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_588, _589, _590), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3834 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_588, _589, _590), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3867 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1112;
        _1422 = _1112;
        _1423 = _1112;
        _1424 = _1112;
        _1425 = _1112;
        _1426 = _1112;
        _1427 = _1112;
        _1428 = _1112;
        _1429 = _1112;
        _1430 = _1112;
        _1431 = _1112;
        _1432 = _1112;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1124)) + _1124;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1125)) + _1125;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1126)) + _1126;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _748 * 0.5;
    float _1490 = _749 * 0.5;
    float _1491 = _750 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1111, _1115, _1118, _1121));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1619 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1622 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1650 = frontier_phi_14_12_ladder;
        }
        float _1873;
        if (_1619 > 0.0)
        {
            _1873 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1873 = frontier_phi_23_19_ladder;
        }
        float _2119;
        if (_1622 > 0.0)
        {
            _2119 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2119 = frontier_phi_35_30_ladder;
        }
        float _2121 = isnan(_1873) ? _1650 : (isnan(_1650) ? _1873 : min(_1650, _1873));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1616) + _1605;
        float _2127 = (_2122 * _1619) + _1609;
        float _2128 = (_2122 * _1622) + _1613;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_13_35_ladder_2;
        _1640 = frontier_phi_13_35_ladder_1;
        _1642 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1558);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1716 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1719 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1878;
        if (_1713 > 0.0)
        {
            _1878 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1878 = frontier_phi_25_21_ladder;
        }
        float _2146;
        if (_1716 > 0.0)
        {
            _2146 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2146 = frontier_phi_37_32_ladder;
        }
        float _2351;
        if (_1719 > 0.0)
        {
            _2351 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2351 = frontier_phi_46_43_ladder;
        }
        float _2353 = isnan(_2146) ? _1878 : (isnan(_1878) ? _2146 : min(_1878, _2146));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1713) + _1702;
        float _2359 = (_2354 * _1716) + _1706;
        float _2360 = (_2354 * _1719) + _1710;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_22_46_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_22_46_ladder_2;
        _1740 = frontier_phi_22_46_ladder_1;
        _1742 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1647);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_769 * _756)) * _740;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    vec4 _1774 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_675, _676));
    float _1776 = _1774.w;
    float _1788 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1776);
    float _1789 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1776);
    float _1790 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1776);
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_715 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _740 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1832 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1836 = _1796 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_588, _589, _590));
    float _1850 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_588, _589, _590));
    float _4003 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _4014 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1857 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1864 = ((cbLight._m0[_1813].x * _1819) * _1857) + (((cbLight._m0[_1823].x * _1788) * _1832) * _1855);
    float _1865 = ((_1819 * cbLight._m0[_1813].y) * _1857) + (((cbLight._m0[_1823].y * _1789) * _1832) * _1855);
    float _1866 = ((_1819 * cbLight._m0[_1813].z) * _1857) + (((cbLight._m0[_1823].z * _1790) * _1832) * _1855);
    uvec4 _1870 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1872 = _1870.x == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1872)
    {
        _1883 = _1864;
        _1885 = _1865;
        _1887 = _1866;
    }
    else
    {
        uint _1891 = _1796 + 6u;
        float _1907 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _4025 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1910 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1883 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1864;
        _1885 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1865;
        _1887 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1866;
    }
    bool _1890 = _1870.y == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1890)
    {
        _1928 = _1883;
        _1930 = _1885;
        _1932 = _1887;
    }
    else
    {
        uint _2090 = _1796 + 7u;
        float _2106 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4041 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2109 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1928 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1883;
        _1930 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1885;
        _1932 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1887;
    }
    uint _1935 = _1796 + 8u;
    float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _591) * 0.949999988079071044921875);
    float _1949 = _1948 * _1948;
    float _1950 = cbLight._m0[_1796].x + _667;
    float _1951 = cbLight._m0[_1796].y + _668;
    float _1952 = cbLight._m0[_1796].z + _669;
    float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
    float _1957 = _1956 * _1950;
    float _1958 = _1956 * _1951;
    float _1959 = _1956 * _1952;
    float _1960 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1796].xyz));
    float _4057 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1964 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1965 = dot(vec3(_588, _589, _590), vec3(_1957, _1958, _1959));
    float _4079 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1957, _1958, _1959));
    float _4090 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1949 * _1949;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = 1.0 - _1949;
    float _2000 = (0.5 / (((_1964 * ((_1963 * _1989) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _1989) + _1949) * _1963))) * _1963;
    float _4101 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    uint _2016 = _1796 + 9u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _591) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1836].x + _667;
    float _2030 = cbLight._m0[_1836].y + _668;
    float _2031 = cbLight._m0[_1836].z + _669;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1836].xyz));
    float _4112 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2043 = dot(vec3(_588, _589, _590), vec3(_2036, _2037, _2038));
    float _4123 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2036, _2037, _2038));
    float _4134 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2028 * _2028;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2028;
    float _2075 = (0.5 / (((_1964 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2065) + _2028) * _2042))) * _2042;
    float _4145 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    float _2087 = (((_2064 * cbLight._m0[_2016].x) * _2077) * _1819) + ((((cbLight._m0[_1935].x * _1788) * _1988) * _2002) * _1832);
    float _2088 = (((_2064 * cbLight._m0[_2016].y) * _2077) * _1819) + ((((cbLight._m0[_1935].y * _1789) * _1988) * _2002) * _1832);
    float _2089 = (((_2064 * cbLight._m0[_2016].z) * _2077) * _1819) + ((((cbLight._m0[_1935].z * _1790) * _1988) * _2002) * _1832);
    float _2151;
    float _2153;
    float _2155;
    if (_1872)
    {
        _2151 = _2087;
        _2153 = _2088;
        _2155 = _2089;
    }
    else
    {
        uint _2157 = _1796 + 2u;
        uint _2161 = _1796 + 10u;
        float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _591) * 0.949999988079071044921875);
        float _2176 = _2175 * _2175;
        float _2177 = cbLight._m0[_2157].x + _667;
        float _2178 = cbLight._m0[_2157].y + _668;
        float _2179 = cbLight._m0[_2157].z + _669;
        float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
        float _2184 = _2183 * _2177;
        float _2185 = _2183 * _2178;
        float _2186 = _2183 * _2179;
        float _2187 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2157].xyz));
        float _4156 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2191 = dot(vec3(_588, _589, _590), vec3(_2184, _2185, _2186));
        float _4167 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2184, _2185, _2186));
        float _4178 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2199 = _2176 * _2176;
        float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2213 = 1.0 - _2176;
        float _2223 = (0.5 / (((_1964 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2213) + _2176) * _2190))) * _2190;
        float _4189 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2151 = (((_2212 * cbLight._m0[_2161].x) * _2225) * _2226) + _2087;
        _2153 = (((_2212 * cbLight._m0[_2161].y) * _2225) * _2226) + _2088;
        _2155 = (((_2212 * cbLight._m0[_2161].z) * _2225) * _2226) + _2089;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1890)
    {
        _2261 = _2151;
        _2263 = _2153;
        _2265 = _2155;
    }
    else
    {
        uint _2272 = _1796 + 3u;
        uint _2276 = _1796 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _591) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _667;
        float _2293 = cbLight._m0[_2272].y + _668;
        float _2294 = cbLight._m0[_2272].z + _669;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2272].xyz));
        float _4205 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2306 = dot(vec3(_588, _589, _590), vec3(_2299, _2300, _2301));
        float _4216 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4227 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2328 = 1.0 - _2291;
        float _2338 = (0.5 / (((_1964 * ((_2305 * _2328) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1964 * _2328) + _2291) * _2305))) * _2305;
        float _4238 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2261 = (((_2327 * cbLight._m0[_2276].x) * _2340) * _2341) + _2151;
        _2263 = (((_2327 * cbLight._m0[_2276].y) * _2340) * _2341) + _2153;
        _2265 = (((_2327 * cbLight._m0[_2276].z) * _2340) * _2341) + _2155;
    }
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_1794.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2750)
                {
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2749;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2740 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2417;
                        float _2925 = _2884.y - _2418;
                        float _2926 = _2884.z - _2419;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_696, _699, _702), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4264 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2417;
                        float _2960 = (-0.0) - _2418;
                        float _2961 = (-0.0) - _2419;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _756;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_696, _699, _702), vec3(_2966, _2967, _2968));
                        float _4280 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3001 = dot(vec3(_696, _699, _702), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4291 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4302 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4313 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3036 * _2920.x) + _2858;
                        _2791 = (_3036 * _2920.y) + _2859;
                        _2792 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_61_pred = _2790;
                    frontier_phi_61_pred_1 = _2795;
                    frontier_phi_61_pred_2 = _2794;
                    frontier_phi_61_pred_3 = _2793;
                    frontier_phi_61_pred_4 = _2792;
                    frontier_phi_61_pred_5 = _2791;
                }
                _2590 = frontier_phi_61_pred;
                _2600 = frontier_phi_61_pred_1;
                _2598 = frontier_phi_61_pred_2;
                _2596 = frontier_phi_61_pred_3;
                _2594 = frontier_phi_61_pred_4;
                _2592 = frontier_phi_61_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2590;
                    _2735 = _2592;
                    _2736 = _2594;
                    _2737 = _2596;
                    _2738 = _2598;
                    _2739 = _2600;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2606) & _2463) == 0u)
        {
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
            _2710 = _2597;
            _2712 = _2599;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2728 = _2727 * _2417;
            float _2729 = _2727 * _2418;
            float _2730 = _2727 * _2419;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2841 = _2589;
                float _2842 = _2591;
                float _2843 = _2593;
                float _2844 = _2595;
                float _2845 = _2597;
                float _2846 = _2599;
                uint _2847 = _2606;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2857)
                    {
                        frontier_phi_67_pred = _2844;
                        frontier_phi_67_pred_1 = _2845;
                        frontier_phi_67_pred_2 = _2846;
                        frontier_phi_67_pred_3 = _2843;
                        frontier_phi_67_pred_4 = _2842;
                        frontier_phi_67_pred_5 = _2841;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        float _3059 = _2846;
                        uint _3060 = _2856;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3129;
                        vec4 _3145;
                        float _3192;
                        bool _3193;
                        for (;;)
                        {
                            uint _3071 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3116 = (_3071 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3071 * 40u) + 20u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3148 = (_3071 * 40u) + 24u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3167 = (_3071 * 40u) + 28u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3192 = fma(_2419, _3180.z, fma(_2418, _3180.y, _3180.x * _2417)) + _3180.w;
                            _3193 = !((fma(_2419, _3161.z, fma(_2418, _3161.y, _3161.x * _2417)) + _3161.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3193)
                            {
                                float _3220 = _3086.x - _2417;
                                float _3221 = _3086.y - _2418;
                                float _3222 = _3086.z - _2419;
                                float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                                float _3226 = inversesqrt(_3223);
                                float _3227 = _3226 * _3220;
                                float _3228 = _3226 * _3221;
                                float _3229 = _3226 * _3222;
                                float _3233 = 1.0 - (_3223 / (_3087 * _3087));
                                float _4324 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3238 = sqrt(_3223) * _3102.w;
                                float _3240 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                                float _3241 = _3240 * _3240;
                                float _3244 = ((1.0 - _3241) * dot(vec3(_3227, _3228, _3229), vec3(_696, _699, _702))) + _3241;
                                float _3247 = _3238 * _3238;
                                float _3251 = (fma(_2419, _3129.z, fma(_2418, _3129.y, _3129.x * _2417)) + _3129.w) / _3192;
                                float _3252 = (fma(_2419, _3145.z, fma(_2418, _3145.y, _3145.x * _2417)) + _3145.w) / _3192;
                                float _3256 = 1.0 - dot(vec2(_3251, _3252), vec2(_3251, _3252));
                                float _4340 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3258 = _3257 * (((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3234) / ((_3247 * 0.699999988079071044921875) + 1.0));
                                float _3270 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                                float _3271 = 1.0 - _756;
                                float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                                float _3279 = _3278 * _3278;
                                float _3280 = _3279 * _3279;
                                float _3281 = _3227 - _2728;
                                float _3282 = _3228 - _2729;
                                float _3283 = _3229 - _2730;
                                float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                                float _3291 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4351 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3295 = dot(vec3(_696, _699, _702), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                                float _4362 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                                float _3303 = _3240 * _3279;
                                float _3304 = _3303 * _3303;
                                float _3310 = ((1.0 - _3304) * dot(vec3(_696, _699, _702), vec3(_3227, _3228, _3229))) + _3304;
                                float _4373 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3312 = 1.0 - _3279;
                                float _3322 = (0.5 / (((_3311 * ((_3294 * _3312) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3279) * _3294))) * _3311;
                                float _4384 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3332 = (_3257 * _3234) * (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3302 * _3302) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3332 * _3114.x;
                                frontier_phi_73_pred_1 = _3332 * _3114.y;
                                frontier_phi_73_pred_2 = _3258 * _3102.z;
                                frontier_phi_73_pred_3 = _3258 * _3102.y;
                                frontier_phi_73_pred_4 = _3258 * _3102.x;
                                frontier_phi_73_pred_5 = _3332 * _3114.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_73_pred;
                            _3337 = frontier_phi_73_pred_1;
                            _3341 = frontier_phi_73_pred_2;
                            _3340 = frontier_phi_73_pred_3;
                            _3339 = frontier_phi_73_pred_4;
                            _3338 = frontier_phi_73_pred_5;
                            _3044 = _3339 + _3057;
                            _3045 = _3340 + _3058;
                            _3046 = _3341 + _3059;
                            _3041 = _3336 + _3054;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    _2709 = frontier_phi_67_pred;
                    _2711 = frontier_phi_67_pred_1;
                    _2713 = frontier_phi_67_pred_2;
                    _2707 = frontier_phi_67_pred_3;
                    _2705 = frontier_phi_67_pred_4;
                    _2703 = frontier_phi_67_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2703;
                        _2842 = _2705;
                        _2843 = _2707;
                        _2844 = _2709;
                        _2845 = _2711;
                        _2846 = _2713;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            _2702 = frontier_phi_55_56_ladder_5;
            _2704 = frontier_phi_55_56_ladder_4;
            _2706 = frontier_phi_55_56_ladder_3;
            _2708 = frontier_phi_55_56_ladder_2;
            _2710 = frontier_phi_55_56_ladder;
            _2712 = frontier_phi_55_56_ladder_1;
        }
        float _2717 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2476 = (_2717 * _2708) + _1928;
        _2478 = (_2717 * _2710) + _1930;
        _2480 = (_2717 * _2712) + _1932;
        _2482 = ((_2702 * 0.039999999105930328369140625) * _2717) + _2261;
        _2484 = ((_2704 * 0.039999999105930328369140625) * _2717) + _2263;
        _2486 = ((_2706 * 0.039999999105930328369140625) * _2717) + _2265;
    }
    else
    {
        _2476 = _1928;
        _2478 = _1930;
        _2480 = _1932;
        _2482 = _2261;
        _2484 = _2263;
        _2486 = _2265;
    }
    uint _2492 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _4400 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4411 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4422 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _2523 = (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2476 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _740))) + ((_2482 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + (((_520 * cbMtdParam._m0[11u].x) * (_505.x + _490.x)) * cbInstanceData._m0[_2492].x);
    float _2525 = ((((_520 * cbMtdParam._m0[11u].y) * (_505.y + _490.y)) * cbInstanceData._m0[_2492].y) + ((_2484 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2478 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _740)));
    float _2527 = ((((_520 * cbMtdParam._m0[11u].z) * (_505.z + _490.z)) * cbInstanceData._m0[_2492].z) + ((_2486 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2480 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _740)));
    uint _2531 = _715 + 6u;
    float _2539 = _675 / cbSceneParam._m0[86u].x;
    float _2540 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _610 : (isnan(_610) ? cbSceneParam._m0[77u].w : min(_610, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_610 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_610) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _610 : min(cbSceneParam._m0[80u].w, _610));
        float _2615 = _2614 / _610;
        float _2626 = _2615 * _660;
        float _2627 = _661 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2630 = _2615 * _662;
        float _2632 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2627;
        float _2640 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2628 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2765 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2803 = ((abs(_2640 / _2628) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2650 * _2774) - exp2(_2650 * _2775)) * _2763))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2559);
        _2652 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2654 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2656 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2658 = _2814 * _2559;
    }
    else
    {
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
        _2658 = _2559;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2658);
    float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0)));
    float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)));
    float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.w = cbInstanceData._m0[_2531].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
}


