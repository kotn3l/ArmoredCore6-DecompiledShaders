#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1130;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3509 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _319 = (((_295.x * cbMtdParam._m0[10u].x) - _255) * _312) + _255;
    float _320 = (((_295.y * cbMtdParam._m0[10u].y) - _256) * _312) + _256;
    float _321 = (((_295.z * cbMtdParam._m0[10u].z) - _257) * _312) + _257;
    vec4 _341 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _360 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_341.x + 0.00999999977648258209228515625));
    float _362 = _360 * (cbMtdParam._m0[15u].x + 1.0);
    float _3520 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _371 = ((((cbMtdParam._m0[12u].x - _319) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _363) + _319;
    float _372 = ((((cbMtdParam._m0[12u].y - _320) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _363) + _320;
    float _373 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _321)) * _363) + _321;
    vec4 _386 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _388 = _386.x;
    float _406 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _388) * _312) + _388;
    vec4 _419 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _427 = (_419.x * 2.0) + (-1.0);
    float _429 = (_419.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3531 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _451 = _447.z;
    float _454 = (_447.x * 2.0) + (-1.0);
    float _455 = (_447.y * 2.0) + (-1.0);
    float _456 = dot(vec2(_454, _455), vec2(_454, _455));
    float _3542 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    float _464 = (_312 * (_419.z - _451)) + _451;
    float _467 = _360 * (cbMtdParam._m0[14u].w + 1.0);
    float _3553 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _471 = ((cbMtdParam._m0[14u].y - _464) * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) + _464;
    vec4 _498 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _513 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _527 = (_312 * (_427 - _454)) + _454;
    float _528 = (_312 * (_429 - _455)) + _455;
    float _529 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) - _461)) + _461;
    vec4 _548 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _554 = (_548.x * 2.0) + (-1.0);
    float _555 = (_548.y * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3564 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _572 = (_363 * (((_527 * cbMtdParam._m0[13u].z) - _527) + _554)) + _527;
    float _573 = (_363 * (((_528 * cbMtdParam._m0[13u].z) - _528) + _555)) + _528;
    float _574 = (_363 * (sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) - _529)) + _529;
    float _577 = fma(_574, _220 * NORMAL.x, fma(_573, _227 * TANGENT.x, (_213 * _205) * _572));
    float _580 = fma(_574, _220 * NORMAL.y, fma(_573, _227 * TANGENT.y, (_213 * _206) * _572));
    float _583 = fma(_574, _220 * NORMAL.z, fma(_573, _227 * TANGENT.z, (_213 * _207) * _572));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3575 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _591 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3597 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3608 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3619 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _595 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _662 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _652);
    float _663 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _652);
    float _664 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _652);
    float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
    float _669 = _662 * _668;
    float _670 = _663 * _668;
    float _671 = _664 * _668;
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _699 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _702 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _715 = uint(roundEven(NORMAL.w)) * 13u;
    uint _716 = _715 + 9u;
    uint _717 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3630 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _729 = 1.0 - _595;
    float _730 = _726 * _729;
    float _731 = _727 * _729;
    float _732 = _728 * _729;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _595;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _595;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _595;
    float _740 = _737 + 0.039999999105930328369140625;
    float _742 = _738 + 0.039999999105930328369140625;
    float _743 = _739 + 0.039999999105930328369140625;
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _755 = _752.x * TEXCOORD_3.w;
    float _756 = dot(vec3(_588, _589, _590), vec3(_669, _670, _671));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _588) - _669;
    float _764 = (_759 * _589) - _670;
    float _765 = (_759 * _590) - _671;
    float _769 = abs(dot(vec3(_669, _670, _671), vec3(_588, _589, _590)));
    float _3663 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_591);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _790 = (1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _791 = _784 * _771;
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _858 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _862 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _887 = _819 + _588;
        float _888 = _823 + _589;
        float _889 = _827 + _590;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _854;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _858;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _862;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_588, _589, _590), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3711 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_588, _589, _590), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3744 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_588, _589, _590), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3777 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1174 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1178 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1201 = _819 + _588;
        float _1202 = _823 + _589;
        float _1203 = _827 + _590;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_588, _589, _590), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3840 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_588, _589, _590), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3873 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_588, _589, _590), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3906 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1130;
        _1440 = _1130;
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = _1130;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _763 * 0.5;
    float _1508 = _764 * 0.5;
    float _1509 = _765 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1637 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1640 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1668 = frontier_phi_14_12_ladder;
        }
        float _1893;
        if (_1637 > 0.0)
        {
            _1893 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1893 = frontier_phi_23_19_ladder;
        }
        float _2150;
        if (_1640 > 0.0)
        {
            _2150 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2150 = frontier_phi_35_30_ladder;
        }
        float _2152 = isnan(_1893) ? _1668 : (isnan(_1668) ? _1893 : min(_1668, _1893));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1634) + _1623;
        float _2158 = (_2153 * _1637) + _1627;
        float _2159 = (_2153 * _1640) + _1631;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2160;
        float _2164 = _2160 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 > _2164) || ((_2158 < _2162) || ((_2157 < _2162) || (_2157 > _2164))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2159, cbModelParam._m0[9u].z, fma(_2158, cbModelParam._m0[9u].y, _2157 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2159, cbModelParam._m0[10u].z, fma(_2158, cbModelParam._m0[10u].y, _2157 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2159, cbModelParam._m0[11u].z, fma(_2158, cbModelParam._m0[11u].y, _2157 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_13_35_ladder = _2287.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2287.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2287.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_13_35_ladder_2;
        _1658 = frontier_phi_13_35_ladder_1;
        _1660 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1576);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1734 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1737 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1898;
        if (_1731 > 0.0)
        {
            _1898 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1898 = frontier_phi_25_21_ladder;
        }
        float _2177;
        if (_1734 > 0.0)
        {
            _2177 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2177 = frontier_phi_37_32_ladder;
        }
        float _2390;
        if (_1737 > 0.0)
        {
            _2390 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2390 = frontier_phi_46_43_ladder;
        }
        float _2392 = isnan(_2177) ? _1898 : (isnan(_1898) ? _2177 : min(_1898, _2177));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1731) + _1720;
        float _2398 = (_2393 * _1734) + _1724;
        float _2399 = (_2393 * _1737) + _1728;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_22_46_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_22_46_ladder_2;
        _1758 = frontier_phi_22_46_ladder_1;
        _1760 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1665);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1773 = (((_790 * _740) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1756 - _1656)) + _1656);
    float _1775 = (((_790 * _742) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1777 = (((_790 * _743) + _791) * _755) * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    vec4 _1794 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_677, _678));
    float _1796 = _1794.w;
    float _1808 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1796);
    float _1809 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1796);
    float _1810 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1796);
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_715 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _755 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1852 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1856 = _1816 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_588, _589, _590));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_588, _589, _590));
    float _4042 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4053 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1833].x * _1839) * _1877) + (((cbLight._m0[_1843].x * _1808) * _1852) * _1875);
    float _1885 = ((_1839 * cbLight._m0[_1833].y) * _1877) + (((cbLight._m0[_1843].y * _1809) * _1852) * _1875);
    float _1886 = ((_1839 * cbLight._m0[_1833].z) * _1877) + (((cbLight._m0[_1843].z * _1810) * _1852) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1816 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4064 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1930 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2121 = _1816 + 7u;
        float _2137 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4080 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2140 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1948 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _1903;
        _1950 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _1905;
        _1952 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _1907;
    }
    uint _1955 = _1816 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _591) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1816].x + _669;
    float _1971 = cbLight._m0[_1816].y + _670;
    float _1972 = cbLight._m0[_1816].z + _671;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1816].xyz));
    float _4096 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1984 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1985 = dot(vec3(_588, _589, _590), vec3(_1977, _1978, _1979));
    float _4118 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1977, _1978, _1979));
    float _4129 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _2006 = 0.959999978542327880859375 - _737;
    float _2008 = 0.959999978542327880859375 - _738;
    float _2009 = 0.959999978542327880859375 - _739;
    float _2016 = 1.0 - _1969;
    float _2027 = (0.5 / (((_1984 * ((_1983 * _2016) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2016) + _1969) * _1983))) * _1983;
    float _4140 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2043 = _1816 + 9u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _591) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1856].x + _669;
    float _2057 = cbLight._m0[_1856].y + _670;
    float _2058 = cbLight._m0[_1856].z + _671;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1856].xyz));
    float _4151 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2070 = dot(vec3(_588, _589, _590), vec3(_2063, _2064, _2065));
    float _4162 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2063, _2064, _2065));
    float _4173 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2055 * _2055;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2096 = 1.0 - _2055;
    float _2106 = (0.5 / (((_1984 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2096) + _2055) * _2069))) * _2069;
    float _4184 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    float _2118 = (((((_2089 * _2006) + _740) * cbLight._m0[_2043].x) * _2108) * _1839) + ((((cbLight._m0[_1955].x * _1808) * ((_2005 * _2006) + _740)) * _2029) * _1852);
    float _2119 = (((((_2089 * _2008) + _742) * cbLight._m0[_2043].y) * _2108) * _1839) + ((((cbLight._m0[_1955].y * _1809) * ((_2005 * _2008) + _742)) * _2029) * _1852);
    float _2120 = (((((_2089 * _2009) + _743) * cbLight._m0[_2043].z) * _2108) * _1839) + ((((cbLight._m0[_1955].z * _1810) * ((_2005 * _2009) + _743)) * _2029) * _1852);
    float _2182;
    float _2184;
    float _2186;
    if (_1892)
    {
        _2182 = _2118;
        _2184 = _2119;
        _2186 = _2120;
    }
    else
    {
        uint _2188 = _1816 + 2u;
        uint _2192 = _1816 + 10u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _591) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _669;
        float _2209 = cbLight._m0[_2188].y + _670;
        float _2210 = cbLight._m0[_2188].z + _671;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2188].xyz));
        float _4195 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2222 = dot(vec3(_588, _589, _590), vec3(_2215, _2216, _2217));
        float _4206 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4217 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2248 = 1.0 - _2207;
        float _2258 = (0.5 / (((_1984 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2248) + _2207) * _2221))) * _2221;
        float _4228 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2182 = (((((_2241 * _2006) + _740) * cbLight._m0[_2192].x) * _2260) * _2261) + _2118;
        _2184 = (((((_2241 * _2008) + _742) * cbLight._m0[_2192].y) * _2260) * _2261) + _2119;
        _2186 = (((((_2241 * _2009) + _743) * cbLight._m0[_2192].z) * _2260) * _2261) + _2120;
    }
    float _2296;
    float _2298;
    float _2300;
    if (_1910)
    {
        _2296 = _2182;
        _2298 = _2184;
        _2300 = _2186;
    }
    else
    {
        uint _2307 = _1816 + 3u;
        uint _2311 = _1816 + 11u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _591) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _669;
        float _2328 = cbLight._m0[_2307].y + _670;
        float _2329 = cbLight._m0[_2307].z + _671;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2307].xyz));
        float _4244 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2341 = dot(vec3(_588, _589, _590), vec3(_2334, _2335, _2336));
        float _4255 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4266 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2367 = 1.0 - _2326;
        float _2377 = (0.5 / (((_1984 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2367) + _2326) * _2340))) * _2340;
        float _4277 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2296 = (((((_2360 * _2006) + _740) * cbLight._m0[_2311].x) * _2379) * _2380) + _2182;
        _2298 = (((((_2360 * _2008) + _742) * cbLight._m0[_2311].y) * _2379) * _2380) + _2184;
        _2300 = (((((_2360 * _2009) + _743) * cbLight._m0[_2311].z) * _2379) * _2380) + _2186;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1814.y == 0u)
    {
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2455;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2455;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2455;
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2471)));
        float _2492 = (log2(_2458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            uint _2779 = 0u;
            uint _2788;
            bool _2789;
            for (;;)
            {
                _2788 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                _2789 = _2788 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2789)
                {
                    frontier_phi_61_pred = _2773;
                    frontier_phi_61_pred_1 = _2778;
                    frontier_phi_61_pred_2 = _2777;
                    frontier_phi_61_pred_3 = _2776;
                    frontier_phi_61_pred_4 = _2775;
                    frontier_phi_61_pred_5 = _2774;
                }
                else
                {
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    uint _2903;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2788;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    for (;;)
                    {
                        uint _2907 = uint(findLSB(_2903)) + (_2779 << 5u);
                        uint _2904 = (_2903 + 4294967295u) & _2903;
                        uint _2909 = _2907 * 48u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2929 = (_2907 * 48u) + 4u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2948 = (_2907 * 48u) + 8u;
                        vec3 _2959 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x));
                        float _2963 = _2923.x - _2456;
                        float _2964 = _2923.y - _2457;
                        float _2965 = _2923.z - _2458;
                        float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                        float _2969 = inversesqrt(_2966);
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2973 = dot(vec3(_696, _699, _702), vec3(_2970, _2971, _2972));
                        float _2978 = 1.0 - (_2966 * _2923.w);
                        float _4303 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2980 = sqrt(_2966) * _2942.w;
                        float _2983 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2973) + _2984;
                        float _2990 = _2980 * _2980;
                        float _2994 = ((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2979) / ((_2990 * 0.699999988079071044921875) + 1.0);
                        float _2998 = (-0.0) - _2456;
                        float _2999 = (-0.0) - _2457;
                        float _3000 = (-0.0) - _2458;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3015 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                        float _3016 = 1.0 - _771;
                        float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                        float _3024 = _3023 * _3023;
                        float _3025 = _3024 * _3024;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3036 = dot(vec3(_696, _699, _702), vec3(_3005, _3006, _3007));
                        float _4319 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3040 = dot(vec3(_696, _699, _702), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                        float _4330 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                        float _3048 = _2983 * _3024;
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _2973) + _3049;
                        float _4341 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3054 = 1.0 - _3024;
                        float _3064 = (0.5 / (((_3053 * ((_3039 * _3054) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3024) * _3039))) * _3053;
                        float _4352 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3075 = (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3047 * _3047) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125))) * _2979;
                        _2832 = (_2994 * _2942.x) + _2900;
                        _2833 = (_2994 * _2942.y) + _2901;
                        _2834 = (_2994 * _2942.z) + _2902;
                        _2829 = (_3075 * _2959.x) + _2897;
                        _2830 = (_3075 * _2959.y) + _2898;
                        _2831 = (_3075 * _2959.z) + _2899;
                        if (_2904 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2904;
                        }
                    }
                    frontier_phi_61_pred = _2829;
                    frontier_phi_61_pred_1 = _2834;
                    frontier_phi_61_pred_2 = _2833;
                    frontier_phi_61_pred_3 = _2832;
                    frontier_phi_61_pred_4 = _2831;
                    frontier_phi_61_pred_5 = _2830;
                }
                _2629 = frontier_phi_61_pred;
                _2639 = frontier_phi_61_pred_1;
                _2637 = frontier_phi_61_pred_2;
                _2635 = frontier_phi_61_pred_3;
                _2633 = frontier_phi_61_pred_4;
                _2631 = frontier_phi_61_pred_5;
                uint _2780 = _2779 + 1u;
                if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2773 = _2629;
                    _2774 = _2631;
                    _2775 = _2633;
                    _2776 = _2635;
                    _2777 = _2637;
                    _2778 = _2639;
                    _2779 = _2780;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((4294967295u << _2645) & _2502) == 0u)
        {
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
            _2747 = _2634;
            _2749 = _2636;
            _2751 = _2638;
        }
        else
        {
            float _2766 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
            float _2767 = _2766 * _2456;
            float _2768 = _2766 * _2457;
            float _2769 = _2766 * _2458;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2880 = _2628;
                float _2881 = _2630;
                float _2882 = _2632;
                float _2883 = _2634;
                float _2884 = _2636;
                float _2885 = _2638;
                uint _2886 = _2645;
                uint _2895;
                bool _2896;
                for (;;)
                {
                    _2895 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                    _2896 = _2895 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2896)
                    {
                        frontier_phi_67_pred = _2883;
                        frontier_phi_67_pred_1 = _2884;
                        frontier_phi_67_pred_2 = _2885;
                        frontier_phi_67_pred_3 = _2882;
                        frontier_phi_67_pred_4 = _2881;
                        frontier_phi_67_pred_5 = _2880;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        uint _3099 = _2895;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3168;
                        vec4 _3184;
                        float _3231;
                        bool _3232;
                        for (;;)
                        {
                            uint _3110 = ((_2886 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3155 = (_3110 * 40u) + 16u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3171 = (_3110 * 40u) + 20u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3110 * 40u) + 24u;
                            vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3206 = (_3110 * 40u) + 28u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3231 = fma(_2458, _3219.z, fma(_2457, _3219.y, _3219.x * _2456)) + _3219.w;
                            _3232 = !((fma(_2458, _3200.z, fma(_2457, _3200.y, _3200.x * _2456)) + _3200.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3232)
                            {
                                float _3259 = _3125.x - _2456;
                                float _3260 = _3125.y - _2457;
                                float _3261 = _3125.z - _2458;
                                float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                                float _3265 = inversesqrt(_3262);
                                float _3266 = _3265 * _3259;
                                float _3267 = _3265 * _3260;
                                float _3268 = _3265 * _3261;
                                float _3272 = 1.0 - (_3262 / (_3126 * _3126));
                                float _4363 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3277 = sqrt(_3262) * _3141.w;
                                float _3279 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                                float _3280 = _3279 * _3279;
                                float _3283 = ((1.0 - _3280) * dot(vec3(_3266, _3267, _3268), vec3(_696, _699, _702))) + _3280;
                                float _3286 = _3277 * _3277;
                                float _3290 = (fma(_2458, _3168.z, fma(_2457, _3168.y, _3168.x * _2456)) + _3168.w) / _3231;
                                float _3291 = (fma(_2458, _3184.z, fma(_2457, _3184.y, _3184.x * _2456)) + _3184.w) / _3231;
                                float _3295 = 1.0 - dot(vec2(_3290, _3291), vec2(_3290, _3291));
                                float _4379 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3297 = _3296 * (((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3273) / ((_3286 * 0.699999988079071044921875) + 1.0));
                                float _3309 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                                float _3310 = 1.0 - _771;
                                float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                                float _3318 = _3317 * _3317;
                                float _3319 = _3318 * _3318;
                                float _3320 = _3266 - _2767;
                                float _3321 = _3267 - _2768;
                                float _3322 = _3268 - _2769;
                                float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                                float _3330 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2767, (-0.0) - _2768, (-0.0) - _2769));
                                float _4390 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3334 = dot(vec3(_696, _699, _702), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                                float _4401 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                                float _3342 = _3279 * _3318;
                                float _3343 = _3342 * _3342;
                                float _3349 = ((1.0 - _3343) * dot(vec3(_696, _699, _702), vec3(_3266, _3267, _3268))) + _3343;
                                float _4412 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3351 = 1.0 - _3318;
                                float _3361 = (0.5 / (((_3350 * ((_3333 * _3351) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3318) * _3333))) * _3350;
                                float _4423 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3371 = (_3296 * _3273) * (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3341 * _3341) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3371 * _3153.x;
                                frontier_phi_73_pred_1 = _3371 * _3153.y;
                                frontier_phi_73_pred_2 = _3297 * _3141.z;
                                frontier_phi_73_pred_3 = _3297 * _3141.y;
                                frontier_phi_73_pred_4 = _3297 * _3141.x;
                                frontier_phi_73_pred_5 = _3371 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3375 = frontier_phi_73_pred;
                            _3376 = frontier_phi_73_pred_1;
                            _3380 = frontier_phi_73_pred_2;
                            _3379 = frontier_phi_73_pred_3;
                            _3378 = frontier_phi_73_pred_4;
                            _3377 = frontier_phi_73_pred_5;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            _3085 = _3380 + _3098;
                            _3080 = _3375 + _3093;
                            _3081 = _3376 + _3094;
                            _3082 = _3377 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3083;
                        frontier_phi_67_pred_1 = _3084;
                        frontier_phi_67_pred_2 = _3085;
                        frontier_phi_67_pred_3 = _3082;
                        frontier_phi_67_pred_4 = _3081;
                        frontier_phi_67_pred_5 = _3080;
                    }
                    _2748 = frontier_phi_67_pred;
                    _2750 = frontier_phi_67_pred_1;
                    _2752 = frontier_phi_67_pred_2;
                    _2746 = frontier_phi_67_pred_3;
                    _2744 = frontier_phi_67_pred_4;
                    _2742 = frontier_phi_67_pred_5;
                    uint _2887 = _2886 + 1u;
                    if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2880 = _2742;
                        _2881 = _2744;
                        _2882 = _2746;
                        _2883 = _2748;
                        _2884 = _2750;
                        _2885 = _2752;
                        _2886 = _2887;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2750;
                frontier_phi_55_56_ladder_1 = _2752;
                frontier_phi_55_56_ladder_2 = _2748;
                frontier_phi_55_56_ladder_3 = _2746;
                frontier_phi_55_56_ladder_4 = _2744;
                frontier_phi_55_56_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_55_56_ladder = _2636;
                frontier_phi_55_56_ladder_1 = _2638;
                frontier_phi_55_56_ladder_2 = _2634;
                frontier_phi_55_56_ladder_3 = _2632;
                frontier_phi_55_56_ladder_4 = _2630;
                frontier_phi_55_56_ladder_5 = _2628;
            }
            _2741 = frontier_phi_55_56_ladder_5;
            _2743 = frontier_phi_55_56_ladder_4;
            _2745 = frontier_phi_55_56_ladder_3;
            _2747 = frontier_phi_55_56_ladder_2;
            _2749 = frontier_phi_55_56_ladder;
            _2751 = frontier_phi_55_56_ladder_1;
        }
        float _2756 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2515 = (_2756 * _2747) + _1948;
        _2517 = (_2756 * _2749) + _1950;
        _2519 = (_2756 * _2751) + _1952;
        _2521 = ((_2741 * _740) * _2756) + _2296;
        _2523 = ((_2743 * _742) * _2756) + _2298;
        _2525 = ((_2745 * _743) * _2756) + _2300;
    }
    else
    {
        _2515 = _1948;
        _2517 = _1950;
        _2519 = _1952;
        _2521 = _2296;
        _2523 = _2298;
        _2525 = _2300;
    }
    uint _2531 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _4439 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4450 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4461 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2562 = (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2515 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _755))) + ((_2521 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + (((_363 * cbMtdParam._m0[11u].x) * (_513.x + _498.x)) * cbInstanceData._m0[_2531].x);
    float _2564 = ((((_363 * cbMtdParam._m0[11u].y) * (_513.y + _498.y)) * cbInstanceData._m0[_2531].y) + ((_2523 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2517 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _755)));
    float _2566 = ((((_363 * cbMtdParam._m0[11u].z) * (_513.z + _498.z)) * cbInstanceData._m0[_2531].z) + ((_2525 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2519 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _755)));
    uint _2570 = _715 + 6u;
    float _2578 = _677 / cbSceneParam._m0[86u].x;
    float _2579 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2593 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2595 = _2593.x;
    float _2596 = _2593.y;
    float _2597 = _2593.z;
    float _2598 = _2593.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2654 = _2653 / _611;
        float _2665 = _2654 * _662;
        float _2666 = _663 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2669 = _2654 * _664;
        float _2671 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2666;
        float _2679 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2667 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2802 = 1.0 / cbSceneParam._m0[80u].x;
            float _2803 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2804 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            _2842 = ((abs(_2679 / _2667) * cbSceneParam._m0[80u].y) * ((((_2813 - _2814) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))))) * _2802)) - ((exp2(_2689 * _2813) - exp2(_2689 * _2814)) * _2802))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2598);
        _2691 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2595;
        _2693 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2596;
        _2695 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2597;
        _2697 = _2853 * _2598;
    }
    else
    {
        _2691 = _2595;
        _2693 = _2596;
        _2695 = _2597;
        _2697 = _2598;
    }
    float _2709 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2710 = _2709 == 3.0;
    float _2711 = log2(_2697);
    float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)));
    float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)));
    float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)));
    float _2729 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2729 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.y = _2729 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.z = _2729 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.w = cbInstanceData._m0[_2570].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2570].w;
}


