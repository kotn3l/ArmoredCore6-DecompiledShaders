#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _998;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _303 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3616 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _311 = (((_287.x * cbMtdParam._m0[10u].x) - _247) * _304) + _247;
    float _312 = (((_287.y * cbMtdParam._m0[10u].y) - _248) * _304) + _248;
    float _313 = (((_287.z * cbMtdParam._m0[10u].z) - _249) * _304) + _249;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3627 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    vec4 _376 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _380 = _376.z;
    float _383 = (_376.x * 2.0) + (-1.0);
    float _384 = (_376.y * 2.0) + (-1.0);
    float _385 = dot(vec2(_383, _384), vec2(_383, _384));
    float _3638 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _390 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _393 = (_304 * (_348.z - _380)) + _380;
    vec4 _420 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _435 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _449 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_333.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3649 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _457 = (_304 * (_356 - _383)) + _383;
    float _458 = (_304 * (_358 - _384)) + _384;
    float _459 = (_304 * (sqrt(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) - _390)) + _390;
    float _462 = fma(_459, _212 * NORMAL.x, fma(_458, _219 * TANGENT.x, (_205 * _197) * _457));
    float _465 = fma(_459, _212 * NORMAL.y, fma(_458, _219 * TANGENT.y, (_205 * _198) * _457));
    float _468 = fma(_459, _212 * NORMAL.z, fma(_458, _219 * TANGENT.z, (_205 * _199) * _457));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3660 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _476 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3682 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3693 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _585 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _588 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _602 = _601 + 9u;
    uint _603 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3704 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _626 = _623.x * TEXCOORD_3.w;
    float _627 = dot(vec3(_473, _474, _475), vec3(_553, _554, _555));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _473) - _553;
    float _635 = (_630 * _474) - _554;
    float _636 = (_630 * _475) - _555;
    float _640 = abs(dot(vec3(_553, _554, _555), vec3(_473, _474, _475)));
    float _3737 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_476);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _997;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _722 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _726 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _730 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _755 = _687 + _473;
        float _756 = _691 + _474;
        float _757 = _695 + _475;
        float _767 = fma(_757, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) - _722;
        float _768 = fma(_757, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) - _726;
        float _769 = fma(_757, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) - _730;
        float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
        float _786 = ((_773 * _767) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_722 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_773 * _768) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_726 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_773 * _769) / cbModelParam._m0[34u].z) + ((((((_730 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_791.x + (-0.5));
        float _827 = _825 * (_791.y + (-0.5));
        float _828 = _825 * (_791.z + (-0.5));
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_798.x + (-0.5));
        float _837 = _835 * (_798.y + (-0.5));
        float _838 = _835 * (_798.z + (-0.5));
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_805.x + (-0.5));
        float _847 = _845 * (_805.y + (-0.5));
        float _848 = _845 * (_805.z + (-0.5));
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = _826 * 0.5;
        float _863 = _836 * 0.5;
        float _864 = _846 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _879 = (dot(vec3(_473, _474, _475), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _889 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3785 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_891 + 1.0))) + _896) * _859;
        float _906 = _827 * 0.5;
        float _907 = _837 * 0.5;
        float _908 = _847 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_473, _474, _475), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3818 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_933 + 1.0))) + _938) * _860;
        float _948 = _828 * 0.5;
        float _949 = _838 * 0.5;
        float _950 = _848 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_473, _474, _475), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3851 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_975 + 1.0))) + _980) * _861;
        _997 = _828;
        _999 = _827;
        _1000 = _826;
        _1001 = _838;
        _1002 = _837;
        _1003 = _836;
        _1004 = _848;
        _1005 = _847;
        _1006 = _846;
        _1007 = _861;
        _1008 = _860;
        _1009 = _859;
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
    }
    else
    {
        _997 = _998;
        _999 = _998;
        _1000 = _998;
        _1001 = _998;
        _1002 = _998;
        _1003 = _998;
        _1004 = _998;
        _1005 = _998;
        _1006 = _998;
        _1007 = _998;
        _1008 = _998;
        _1009 = _998;
        _1010 = 0.0;
        _1011 = 0.0;
        _1012 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1042 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1046 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1069 = _687 + _473;
        float _1070 = _691 + _474;
        float _1071 = _695 + _475;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_473, _474, _475), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3914 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_473, _474, _475), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3947 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_473, _474, _475), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3980 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _998;
        _1308 = _998;
        _1309 = _998;
        _1310 = _998;
        _1311 = _998;
        _1312 = _998;
        _1313 = _998;
        _1314 = _998;
        _1315 = _998;
        _1316 = _998;
        _1317 = _998;
        _1318 = _998;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _634 * 0.5;
    float _1376 = _635 * 0.5;
    float _1377 = _636 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1001, _1004, _1007));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1505 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1508 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1536 = frontier_phi_14_12_ladder;
        }
        float _1708;
        if (_1505 > 0.0)
        {
            _1708 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1708 = frontier_phi_23_19_ladder;
        }
        float _2003;
        if (_1508 > 0.0)
        {
            _2003 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2003 = frontier_phi_35_30_ladder;
        }
        float _2005 = isnan(_1708) ? _1536 : (isnan(_1536) ? _1708 : min(_1536, _1708));
        float _2006 = isnan(_2003) ? _2005 : (isnan(_2005) ? _2003 : min(_2005, _2003));
        float _2010 = (_2006 * _1502) + _1491;
        float _2011 = (_2006 * _1505) + _1495;
        float _2012 = (_2006 * _1508) + _1499;
        float _2013 = _2006 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2013;
        float _2017 = _2013 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 > _2017) || ((_2011 < _2015) || ((_2010 < _2015) || (_2010 > _2017))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2012, cbModelParam._m0[9u].z, fma(_2011, cbModelParam._m0[9u].y, _2010 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2012, cbModelParam._m0[10u].z, fma(_2011, cbModelParam._m0[10u].y, _2010 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2012, cbModelParam._m0[11u].z, fma(_2011, cbModelParam._m0[11u].y, _2010 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_13_35_ladder = _2157.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2157.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2157.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_13_35_ladder_2;
        _1526 = frontier_phi_13_35_ladder_1;
        _1528 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1444);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1602 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1605 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1713;
        if (_1599 > 0.0)
        {
            _1713 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1713 = frontier_phi_25_21_ladder;
        }
        float _2030;
        if (_1602 > 0.0)
        {
            _2030 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2030 = frontier_phi_37_32_ladder;
        }
        float _2357;
        if (_1605 > 0.0)
        {
            _2357 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2357 = frontier_phi_47_44_ladder;
        }
        float _2359 = isnan(_2030) ? _1713 : (isnan(_1713) ? _2030 : min(_1713, _2030));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1599) + _1588;
        float _2365 = (_2360 * _1602) + _1592;
        float _2366 = (_2360 * _1605) + _1596;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_22_47_ladder = _2484.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2484.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2484.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_22_47_ladder_2;
        _1626 = frontier_phi_22_47_ladder_1;
        _1628 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1533);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1526)) + _1526);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1528)) + _1528);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1700 = _1687 / _1699;
    float _1701 = _1691 / _1699;
    float _1702 = _1695 / _1699;
    float _1849;
    float _1850;
    float _1851;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1729 = ((uint(_1702 > cbSceneParam._m0[59u].y) + uint(_1702 > cbSceneParam._m0[59u].x)) + uint(_1702 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1730 = _1729 + 43u;
        uint _1738 = _1729 + 44u;
        uint _1746 = _1729 + 45u;
        uint _1754 = _1729 + 46u;
        float _1765 = fma(_1699, cbSceneParam._m0[_1730].w, fma(_1695, cbSceneParam._m0[_1730].z, fma(_1691, cbSceneParam._m0[_1730].y, _1687 * cbSceneParam._m0[_1730].x)));
        float _1769 = fma(_1699, cbSceneParam._m0[_1738].w, fma(_1695, cbSceneParam._m0[_1738].z, fma(_1691, cbSceneParam._m0[_1738].y, _1687 * cbSceneParam._m0[_1738].x)));
        float _1777 = fma(_1699, cbSceneParam._m0[_1754].w, fma(_1695, cbSceneParam._m0[_1754].z, fma(_1691, cbSceneParam._m0[_1754].y, _1687 * cbSceneParam._m0[_1754].x)));
        float _1782 = cbSceneParam._m0[33u].z * _1777;
        float _1784 = cbSceneParam._m0[33u].w * _1777;
        float _1787 = fma(_1699, cbSceneParam._m0[_1746].w, fma(_1695, cbSceneParam._m0[_1746].z, fma(_1691, cbSceneParam._m0[_1746].y, _1687 * cbSceneParam._m0[_1746].x))) / _1777;
        float _1835 = (cbSceneParam._m0[33u].x - sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702))) * cbSceneParam._m0[33u].y;
        float _4106 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1842 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 + _1765) / _1777, (_1784 + _1769) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 + _1765) / _1777, (_1769 - _1782) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 - _1782) / _1777, (_1769 - _1784) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 - _1784) / _1777, (_1782 + _1769) / _1777), _1787), 0.0)).x), vec4(0.25)));
        _1849 = 1.0 - (_1842 * cbSceneParam._m0[34u].x);
        _1850 = 1.0 - (_1842 * cbSceneParam._m0[34u].y);
        _1851 = 1.0 - (_1842 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1849 = 1.0;
        _1850 = 1.0;
        _1851 = 1.0;
    }
    float _1915;
    float _1917;
    float _1919;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1903 = fma(_1699, cbSceneParam._m0[63u].w, fma(_1695, cbSceneParam._m0[63u].z, fma(_1691, cbSceneParam._m0[63u].y, _1687 * cbSceneParam._m0[63u].x)));
        float _1904 = fma(_1699, cbSceneParam._m0[60u].w, fma(_1695, cbSceneParam._m0[60u].z, fma(_1691, cbSceneParam._m0[60u].y, _1687 * cbSceneParam._m0[60u].x))) / _1903;
        float _1905 = fma(_1699, cbSceneParam._m0[61u].w, fma(_1695, cbSceneParam._m0[61u].z, fma(_1691, cbSceneParam._m0[61u].y, _1687 * cbSceneParam._m0[61u].x))) / _1903;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1904 >= cbSceneParam._m0[64u].x) && (_1905 >= cbSceneParam._m0[64u].y)) && (_1904 <= cbSceneParam._m0[64u].z)) && (_1905 <= cbSceneParam._m0[64u].w))
        {
            float _2043 = fma(_1699, cbSceneParam._m0[62u].w, fma(_1695, cbSceneParam._m0[62u].z, fma(_1691, cbSceneParam._m0[62u].y, _1687 * cbSceneParam._m0[62u].x))) / _1903;
            float _2047 = isnan(cbSceneParam._m0[41u].w) ? _2043 : (isnan(_2043) ? cbSceneParam._m0[41u].w : max(_2043, cbSceneParam._m0[41u].w));
            float _2090 = (cbSceneParam._m0[33u].x - sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702))) * cbSceneParam._m0[33u].y;
            float _4122 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
            float _2097 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1904, cbSceneParam._m0[33u].w + _1905), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1904, _1905 - cbSceneParam._m0[33u].z), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1904 - cbSceneParam._m0[33u].z, _1905 - cbSceneParam._m0[33u].w), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1904 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1905), _2047), 0.0)).x), vec4(0.25)));
            float _2101 = 1.0 - (_2097 * cbSceneParam._m0[34u].x);
            float _2102 = 1.0 - (_2097 * cbSceneParam._m0[34u].y);
            float _2103 = 1.0 - (_2097 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2103) ? _1851 : (isnan(_1851) ? _2103 : min(_1851, _2103));
            frontier_phi_34_33_ladder_1 = isnan(_2102) ? _1850 : (isnan(_1850) ? _2102 : min(_1850, _2102));
            frontier_phi_34_33_ladder_2 = isnan(_2101) ? _1849 : (isnan(_1849) ? _2101 : min(_1849, _2101));
        }
        else
        {
            frontier_phi_34_33_ladder = _1851;
            frontier_phi_34_33_ladder_1 = _1850;
            frontier_phi_34_33_ladder_2 = _1849;
        }
        _1915 = frontier_phi_34_33_ladder_2;
        _1917 = frontier_phi_34_33_ladder_1;
        _1919 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1915 = _1849;
        _1917 = _1850;
        _1919 = _1851;
    }
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _626 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1962 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1966 = _1926 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_473, _474, _475));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_473, _474, _475));
    float _4158 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _4169 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1943].x * _1949) * _1987) + (((cbLight._m0[_1953].x * _1915) * _1962) * _1985);
    float _1995 = ((_1949 * cbLight._m0[_1943].y) * _1987) + (((cbLight._m0[_1953].y * _1917) * _1962) * _1985);
    float _1996 = ((_1949 * cbLight._m0[_1943].z) * _1987) + (((cbLight._m0[_1953].z * _1919) * _1962) * _1985);
    uvec4 _2000 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _2002 = _2000.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2002)
    {
        _2104 = _1994;
        _2106 = _1995;
        _2108 = _1996;
    }
    else
    {
        uint _2112 = _1926 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4180 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2131 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1994;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1995;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1996;
    }
    bool _2111 = _2000.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2111)
    {
        _2166 = _2104;
        _2168 = _2106;
        _2170 = _2108;
    }
    else
    {
        uint _2328 = _1926 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4196 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2347 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2166 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2104;
        _2168 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2106;
        _2170 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2108;
    }
    uint _2173 = _1926 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _476) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_1926].x + _553;
    float _2189 = cbLight._m0[_1926].y + _554;
    float _2190 = cbLight._m0[_1926].z + _555;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1926].xyz));
    float _4212 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2202 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2203 = dot(vec3(_473, _474, _475), vec3(_2195, _2196, _2197));
    float _4234 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2195, _2196, _2197));
    float _4245 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2202 * ((_2201 * _2227) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2227) + _2187) * _2201))) * _2201;
    float _4256 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2254 = _1926 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _476) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_1966].x + _553;
    float _2268 = cbLight._m0[_1966].y + _554;
    float _2269 = cbLight._m0[_1966].z + _555;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1966].xyz));
    float _4267 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2281 = dot(vec3(_473, _474, _475), vec3(_2274, _2275, _2276));
    float _4278 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2274, _2275, _2276));
    float _4289 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2266;
    float _2313 = (0.5 / (((_2202 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2303) + _2266) * _2280))) * _2280;
    float _4300 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2325 = (((_2302 * cbLight._m0[_2254].x) * _2315) * _1949) + ((((cbLight._m0[_2173].x * _1915) * _2226) * _2240) * _1962);
    float _2326 = (((_2302 * cbLight._m0[_2254].y) * _2315) * _1949) + ((((cbLight._m0[_2173].y * _1917) * _2226) * _2240) * _1962);
    float _2327 = (((_2302 * cbLight._m0[_2254].z) * _2315) * _1949) + ((((cbLight._m0[_2173].z * _1919) * _2226) * _2240) * _1962);
    float _2383;
    float _2385;
    float _2387;
    if (_2002)
    {
        _2383 = _2325;
        _2385 = _2326;
        _2387 = _2327;
    }
    else
    {
        uint _2389 = _1926 + 2u;
        uint _2393 = _1926 + 10u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _476) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _553;
        float _2410 = cbLight._m0[_2389].y + _554;
        float _2411 = cbLight._m0[_2389].z + _555;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2389].xyz));
        float _4311 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2423 = dot(vec3(_473, _474, _475), vec3(_2416, _2417, _2418));
        float _4322 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4333 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2445 = 1.0 - _2408;
        float _2455 = (0.5 / (((_2202 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2445) + _2408) * _2422))) * _2422;
        float _4344 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2383 = (((_2444 * cbLight._m0[_2393].x) * _2457) * _2458) + _2325;
        _2385 = (((_2444 * cbLight._m0[_2393].y) * _2457) * _2458) + _2326;
        _2387 = (((_2444 * cbLight._m0[_2393].z) * _2457) * _2458) + _2327;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2111)
    {
        _2489 = _2383;
        _2491 = _2385;
        _2493 = _2387;
    }
    else
    {
        uint _2500 = _1926 + 3u;
        uint _2504 = _1926 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _476) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _553;
        float _2521 = cbLight._m0[_2500].y + _554;
        float _2522 = cbLight._m0[_2500].z + _555;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2500].xyz));
        float _4360 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2534 = dot(vec3(_473, _474, _475), vec3(_2527, _2528, _2529));
        float _4371 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4382 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2202 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2556) + _2519) * _2533))) * _2533;
        float _4393 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2489 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2383;
        _2491 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2385;
        _2493 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2387;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1924.y == 0u)
    {
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2591)));
        float _2612 = (log2(_1702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            uint _2878 = 0u;
            uint _2887;
            bool _2888;
            for (;;)
            {
                _2887 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                _2888 = _2887 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2888)
                {
                    frontier_phi_66_pred = _2877;
                    frontier_phi_66_pred_1 = _2876;
                    frontier_phi_66_pred_2 = _2875;
                    frontier_phi_66_pred_3 = _2874;
                    frontier_phi_66_pred_4 = _2873;
                    frontier_phi_66_pred_5 = _2872;
                }
                else
                {
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    uint _3002;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2887;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    for (;;)
                    {
                        uint _3006 = uint(findLSB(_3002)) + (_2878 << 5u);
                        uint _3003 = (_3002 + 4294967295u) & _3002;
                        uint _3008 = _3006 * 48u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3028 = (_3006 * 48u) + 4u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3047 = (_3006 * 48u) + 8u;
                        vec3 _3058 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x));
                        float _3062 = _3022.x - _1700;
                        float _3063 = _3022.y - _1701;
                        float _3064 = _3022.z - _1702;
                        float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                        float _3068 = inversesqrt(_3065);
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3072 = dot(vec3(_582, _585, _588), vec3(_3069, _3070, _3071));
                        float _3077 = 1.0 - (_3065 * _3022.w);
                        float _4419 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3079 = sqrt(_3065) * _3041.w;
                        float _3082 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3072) + _3083;
                        float _3089 = _3079 * _3079;
                        float _3093 = ((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3078) / ((_3089 * 0.699999988079071044921875) + 1.0);
                        float _3097 = (-0.0) - _1700;
                        float _3098 = (-0.0) - _1701;
                        float _3099 = (-0.0) - _1702;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3113 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                        float _3114 = 1.0 - _642;
                        float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                        float _3122 = _3121 * _3121;
                        float _3123 = _3122 * _3122;
                        float _3124 = _3104 + _3069;
                        float _3125 = _3105 + _3070;
                        float _3126 = _3106 + _3071;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3134 = dot(vec3(_582, _585, _588), vec3(_3104, _3105, _3106));
                        float _4435 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3138 = dot(vec3(_582, _585, _588), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                        float _4446 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                        float _3146 = _3082 * _3122;
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3072) + _3147;
                        float _4457 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3152 = 1.0 - _3122;
                        float _3162 = (0.5 / (((_3151 * ((_3137 * _3152) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3122) * _3137))) * _3151;
                        float _4468 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3173 = (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3145 * _3145) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125))) * _3078;
                        _2931 = (_3093 * _3041.x) + _2999;
                        _2932 = (_3093 * _3041.y) + _3000;
                        _2933 = (_3093 * _3041.z) + _3001;
                        _2928 = (_3173 * _3058.x) + _2996;
                        _2929 = (_3173 * _3058.y) + _2997;
                        _2930 = (_3173 * _3058.z) + _2998;
                        if (_3003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _3003;
                        }
                    }
                    frontier_phi_66_pred = _2933;
                    frontier_phi_66_pred_1 = _2932;
                    frontier_phi_66_pred_2 = _2931;
                    frontier_phi_66_pred_3 = _2930;
                    frontier_phi_66_pred_4 = _2929;
                    frontier_phi_66_pred_5 = _2928;
                }
                _2738 = frontier_phi_66_pred;
                _2736 = frontier_phi_66_pred_1;
                _2734 = frontier_phi_66_pred_2;
                _2732 = frontier_phi_66_pred_3;
                _2730 = frontier_phi_66_pred_4;
                _2728 = frontier_phi_66_pred_5;
                uint _2879 = _2878 + 1u;
                if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2872 = _2728;
                    _2873 = _2730;
                    _2874 = _2732;
                    _2875 = _2734;
                    _2876 = _2736;
                    _2877 = _2738;
                    _2878 = _2879;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((4294967295u << _2744) & _2622) == 0u)
        {
            _2840 = _2727;
            _2842 = _2729;
            _2844 = _2731;
            _2846 = _2733;
            _2848 = _2735;
            _2850 = _2737;
        }
        else
        {
            float _2865 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
            float _2866 = _2865 * _1700;
            float _2867 = _2865 * _1701;
            float _2868 = _2865 * _1702;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2979 = _2727;
                float _2980 = _2729;
                float _2981 = _2731;
                float _2982 = _2733;
                float _2983 = _2735;
                float _2984 = _2737;
                uint _2985 = _2744;
                uint _2994;
                bool _2995;
                for (;;)
                {
                    _2994 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                    _2995 = _2994 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2995)
                    {
                        frontier_phi_72_pred = _2984;
                        frontier_phi_72_pred_1 = _2983;
                        frontier_phi_72_pred_2 = _2982;
                        frontier_phi_72_pred_3 = _2981;
                        frontier_phi_72_pred_4 = _2980;
                        frontier_phi_72_pred_5 = _2979;
                    }
                    else
                    {
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        uint _3197 = _2994;
                        uint _3198;
                        vec4 _3223;
                        float _3224;
                        vec4 _3239;
                        vec3 _3251;
                        vec4 _3266;
                        vec4 _3282;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3208 = ((_2985 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3197));
                            _3198 = (_3197 + 4294967295u) & _3197;
                            uint _3210 = _3208 * 40u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3224 = _3223.w;
                            uint _3226 = (_3208 * 40u) + 4u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3208 * 40u) + 8u;
                            _3251 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x));
                            uint _3253 = (_3208 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3208 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3208 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3208 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_1702, _3317.z, fma(_1701, _3317.y, _3317.x * _1700)) + _3317.w;
                            _3330 = !((fma(_1702, _3298.z, fma(_1701, _3298.y, _3298.x * _1700)) + _3298.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3223.x - _1700;
                                float _3358 = _3223.y - _1701;
                                float _3359 = _3223.z - _1702;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3224 * _3224));
                                float _4479 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3375 = sqrt(_3360) * _3239.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_582, _585, _588))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_1702, _3266.z, fma(_1701, _3266.y, _3266.x * _1700)) + _3266.w) / _3329;
                                float _3389 = (fma(_1702, _3282.z, fma(_1701, _3282.y, _3282.x * _1700)) + _3282.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4495 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _642;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2866;
                                float _3419 = _3365 - _2867;
                                float _3420 = _3366 - _2868;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2866, (-0.0) - _2867, (-0.0) - _2868));
                                float _4506 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3432 = dot(vec3(_582, _585, _588), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4517 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_582, _585, _588), vec3(_3364, _3365, _3366))) + _3441;
                                float _4528 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4539 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3395 * _3239.y;
                                frontier_phi_78_pred_1 = _3395 * _3239.x;
                                frontier_phi_78_pred_2 = _3469 * _3251.z;
                                frontier_phi_78_pred_3 = _3469 * _3251.y;
                                frontier_phi_78_pred_4 = _3469 * _3251.x;
                                frontier_phi_78_pred_5 = _3395 * _3239.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_78_pred;
                            _3476 = frontier_phi_78_pred_1;
                            _3475 = frontier_phi_78_pred_2;
                            _3474 = frontier_phi_78_pred_3;
                            _3473 = frontier_phi_78_pred_4;
                            _3478 = frontier_phi_78_pred_5;
                            _3181 = _3476 + _3194;
                            _3182 = _3477 + _3195;
                            _3183 = _3478 + _3196;
                            _3178 = _3473 + _3191;
                            _3179 = _3474 + _3192;
                            _3180 = _3475 + _3193;
                            if (_3198 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3198;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3183;
                        frontier_phi_72_pred_1 = _3182;
                        frontier_phi_72_pred_2 = _3181;
                        frontier_phi_72_pred_3 = _3180;
                        frontier_phi_72_pred_4 = _3179;
                        frontier_phi_72_pred_5 = _3178;
                    }
                    _2851 = frontier_phi_72_pred;
                    _2849 = frontier_phi_72_pred_1;
                    _2847 = frontier_phi_72_pred_2;
                    _2845 = frontier_phi_72_pred_3;
                    _2843 = frontier_phi_72_pred_4;
                    _2841 = frontier_phi_72_pred_5;
                    uint _2986 = _2985 + 1u;
                    if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2979 = _2841;
                        _2980 = _2843;
                        _2981 = _2845;
                        _2982 = _2847;
                        _2983 = _2849;
                        _2984 = _2851;
                        _2985 = _2986;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2851;
                frontier_phi_60_61_ladder_1 = _2849;
                frontier_phi_60_61_ladder_2 = _2845;
                frontier_phi_60_61_ladder_3 = _2843;
                frontier_phi_60_61_ladder_4 = _2841;
                frontier_phi_60_61_ladder_5 = _2847;
            }
            else
            {
                frontier_phi_60_61_ladder = _2737;
                frontier_phi_60_61_ladder_1 = _2735;
                frontier_phi_60_61_ladder_2 = _2731;
                frontier_phi_60_61_ladder_3 = _2729;
                frontier_phi_60_61_ladder_4 = _2727;
                frontier_phi_60_61_ladder_5 = _2733;
            }
            _2840 = frontier_phi_60_61_ladder_4;
            _2842 = frontier_phi_60_61_ladder_3;
            _2844 = frontier_phi_60_61_ladder_2;
            _2846 = frontier_phi_60_61_ladder_5;
            _2848 = frontier_phi_60_61_ladder_1;
            _2850 = frontier_phi_60_61_ladder;
        }
        float _2855 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2635 = (_2855 * _2846) + _2166;
        _2637 = (_2855 * _2848) + _2168;
        _2639 = (_2855 * _2850) + _2170;
        _2641 = ((_2840 * 0.039999999105930328369140625) * _2855) + _2489;
        _2643 = ((_2842 * 0.039999999105930328369140625) * _2855) + _2491;
        _2645 = ((_2844 * 0.039999999105930328369140625) * _2855) + _2493;
    }
    else
    {
        _2635 = _2166;
        _2637 = _2168;
        _2639 = _2170;
        _2641 = _2489;
        _2643 = _2491;
        _2645 = _2493;
    }
    uint _2651 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _4555 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4566 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4577 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2682 = (((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2635 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _626))) + ((_2641 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1433)) * cbPerFrame._m0[3u].x)) + (((_450 * cbMtdParam._m0[11u].x) * (_435.x + _420.x)) * cbInstanceData._m0[_2651].x);
    float _2684 = ((((_450 * cbMtdParam._m0[11u].y) * (_435.y + _420.y)) * cbInstanceData._m0[_2651].y) + ((_2643 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1433)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2637 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _626)));
    float _2686 = ((((_450 * cbMtdParam._m0[11u].z) * (_435.z + _420.z)) * cbInstanceData._m0[_2651].z) + ((_2645 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1433)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2639 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _626)));
    uint _2690 = _601 + 6u;
    float _2698 = _561 / cbSceneParam._m0[86u].x;
    float _2699 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2753 = _2752 / _495;
        float _2764 = _2753 * _546;
        float _2765 = _547 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2768 = _2753 * _548;
        float _2770 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2765;
        float _2778 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2941;
        if (abs((_2766 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2941 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2901 = 1.0 / cbSceneParam._m0[80u].x;
            float _2902 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2903 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            _2941 = ((abs(_2778 / _2766) * cbSceneParam._m0[80u].y) * ((((_2912 - _2913) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))))) * _2901)) - ((exp2(_2788 * _2912) - exp2(_2788 * _2913)) * _2901))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2952 = exp2((_2941 * (-1.44269502162933349609375)) * (1.0 - _2943.w));
        float _2953 = log2(_2952);
        float _2969 = log2(_2718);
        _2790 = (exp2(_2969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].x)) * _2943.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2792 = (exp2(_2969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].y)) * _2943.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2794 = (exp2(_2969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].z)) * _2943.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2796 = _2952 * _2718;
    }
    else
    {
        _2790 = _2715;
        _2792 = _2716;
        _2794 = _2717;
        _2796 = _2718;
    }
    float _2808 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2809 = _2808 == 3.0;
    float _2810 = log2(_2796);
    float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0)));
    float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)));
    float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0)));
    float _2828 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2828 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.y = _2828 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
    SV_Target.z = _2828 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
    SV_Target.w = cbInstanceData._m0[_2690].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
}


