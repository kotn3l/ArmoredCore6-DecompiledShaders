#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _994;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _299 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3329 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _307 = (((_283.x * cbMtdParam._m0[10u].x) - _243) * _300) + _243;
    float _308 = (((_283.y * cbMtdParam._m0[10u].y) - _244) * _300) + _244;
    float _309 = (((_283.z * cbMtdParam._m0[10u].z) - _245) * _300) + _245;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _344 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _352 = (_344.x * 2.0) + (-1.0);
    float _354 = (_344.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3340 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    vec4 _372 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _376 = _372.z;
    float _379 = (_372.x * 2.0) + (-1.0);
    float _380 = (_372.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3351 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))));
    float _389 = (_300 * (_344.z - _376)) + _376;
    vec4 _416 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _431 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _445 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_329.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3362 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _453 = (_300 * (_352 - _379)) + _379;
    float _454 = (_300 * (_354 - _380)) + _380;
    float _455 = (_300 * (sqrt(1.0 - (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) - _386)) + _386;
    float _458 = fma(_455, _208 * NORMAL.x, fma(_454, _215 * TANGENT.x, (_201 * _193) * _453));
    float _461 = fma(_455, _208 * NORMAL.y, fma(_454, _215 * TANGENT.y, (_201 * _194) * _453));
    float _464 = fma(_455, _208 * NORMAL.z, fma(_454, _215 * TANGENT.z, (_201 * _195) * _453));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    float _469 = _468 * _458;
    float _470 = _468 * _461;
    float _471 = _468 * _464;
    float _3373 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _472 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3395 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3406 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_471, cbSceneParam._m0[5u].z, fma(_470, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _469));
    float _581 = fma(_471, cbSceneParam._m0[6u].z, fma(_470, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _469));
    float _584 = fma(_471, cbSceneParam._m0[7u].z, fma(_470, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _469));
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = _597 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3417 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    vec4 _619 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _622 = _619.x * TEXCOORD_3.w;
    float _623 = dot(vec3(_469, _470, _471), vec3(_549, _550, _551));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _469) - _549;
    float _631 = (_626 * _470) - _550;
    float _632 = (_626 * _471) - _551;
    float _636 = abs(dot(vec3(_549, _550, _551), vec3(_469, _470, _471)));
    float _3450 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_472);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _722 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _726 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _751 = _683 + _469;
        float _752 = _687 + _470;
        float _753 = _691 + _471;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _718;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _722;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _726;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_469, _470, _471), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3498 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_469, _470, _471), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3531 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_469, _470, _471), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3564 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1038 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1042 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1065 = _683 + _469;
        float _1066 = _687 + _470;
        float _1067 = _691 + _471;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_469, _470, _471), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3627 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_469, _470, _471), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3660 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_469, _470, _471), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3693 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _994;
        _1304 = _994;
        _1305 = _994;
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _630 * 0.5;
    float _1372 = _631 * 0.5;
    float _1373 = _632 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _997, _1000, _1003));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_995, _998, _1001, _1004));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_996, _999, _1002, _1005));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _472);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1487 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1491 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1495 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1498 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1501 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1504 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1532;
        if (_1498 > 0.0)
        {
            _1532 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1532 = frontier_phi_14_12_ladder;
        }
        float _1735;
        if (_1501 > 0.0)
        {
            _1735 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1735 = frontier_phi_23_19_ladder;
        }
        float _1978;
        if (_1504 > 0.0)
        {
            _1978 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1978 = frontier_phi_35_30_ladder;
        }
        float _1980 = isnan(_1735) ? _1532 : (isnan(_1532) ? _1735 : min(_1532, _1735));
        float _1981 = isnan(_1978) ? _1980 : (isnan(_1980) ? _1978 : min(_1980, _1978));
        float _1985 = (_1981 * _1498) + _1487;
        float _1986 = (_1981 * _1501) + _1491;
        float _1987 = (_1981 * _1504) + _1495;
        float _1988 = _1981 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1988;
        float _1992 = _1988 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 > _1992) || ((_1986 < _1990) || ((_1985 < _1990) || (_1985 > _1992))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1987, cbModelParam._m0[9u].z, fma(_1986, cbModelParam._m0[9u].y, _1985 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1987, cbModelParam._m0[10u].z, fma(_1986, cbModelParam._m0[10u].y, _1985 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1987, cbModelParam._m0[11u].z, fma(_1986, cbModelParam._m0[11u].y, _1985 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_13_35_ladder = _2111.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2111.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2111.x * cbModelParam._m0[1u].y;
        }
        _1520 = frontier_phi_13_35_ladder_2;
        _1522 = frontier_phi_13_35_ladder_1;
        _1524 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1440);
        _1520 = _1508.x * cbModelParam._m0[1u].y;
        _1522 = _1508.y * cbModelParam._m0[1u].y;
        _1524 = _1508.z * cbModelParam._m0[1u].y;
    }
    float _1528 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _472);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1528 : min(cbModelParam._m0[25u].w, _1528));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1598 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1601 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1740;
        if (_1595 > 0.0)
        {
            _1740 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1740 = frontier_phi_25_21_ladder;
        }
        float _2005;
        if (_1598 > 0.0)
        {
            _2005 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2005 = frontier_phi_37_32_ladder;
        }
        float _2210;
        if (_1601 > 0.0)
        {
            _2210 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2210 = frontier_phi_46_43_ladder;
        }
        float _2212 = isnan(_2005) ? _1740 : (isnan(_1740) ? _2005 : min(_1740, _2005));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1595) + _1584;
        float _2218 = (_2213 * _1598) + _1588;
        float _2219 = (_2213 * _1601) + _1592;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2219, cbModelParam._m0[17u].z, fma(_2218, cbModelParam._m0[17u].y, _2217 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2219, cbModelParam._m0[18u].z, fma(_2218, cbModelParam._m0[18u].y, _2217 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2219, cbModelParam._m0[19u].z, fma(_2218, cbModelParam._m0[19u].y, _2217 * cbModelParam._m0[19u].x))), _1529);
            frontier_phi_22_46_ladder = _2443.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2443.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2443.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_22_46_ladder_2;
        _1622 = frontier_phi_22_46_ladder_1;
        _1624 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1529);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1636 = ((((1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _638)) * _622;
    float _1637 = _1636 * ((cbModelParam._m0[1u].w * (_1620 - _1520)) + _1520);
    float _1638 = _1636 * ((cbModelParam._m0[1u].w * (_1622 - _1522)) + _1522);
    float _1639 = _1636 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    uvec4 _1658 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1660 = _1658.x * 14u;
    uint _1661 = _1660 + 13u;
    float _1668 = _622 + (-1.0);
    float _1673 = (cbLight._m0[_1661].x * _1668) + 1.0;
    float _1674 = (cbLight._m0[_1661].y * _1668) + 1.0;
    float _1675 = (cbLight._m0[_1661].z * _1668) + 1.0;
    float _1676 = (cbLight._m0[_1661].w * _1668) + 1.0;
    uint _1677 = _1660 + 5u;
    float _1683 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1687 = _1660 + 4u;
    float _1693 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1697 = _1660 | 1u;
    float _1708 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_469, _470, _471));
    float _1711 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_469, _470, _471));
    float _3829 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _3840 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1716 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
    float _1718 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.3183098733425140380859375;
    float _1725 = ((cbLight._m0[_1677].x * _1683) * _1718) + ((cbLight._m0[_1687].x * _1693) * _1716);
    float _1726 = ((_1683 * cbLight._m0[_1677].y) * _1718) + ((_1693 * cbLight._m0[_1687].y) * _1716);
    float _1727 = ((_1683 * cbLight._m0[_1677].z) * _1718) + ((_1693 * cbLight._m0[_1687].z) * _1716);
    uvec4 _1732 = floatBitsToUint(cbLight._m0[_1660 + 12u]);
    bool _1734 = _1732.x == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1734)
    {
        _1745 = _1725;
        _1747 = _1726;
        _1749 = _1727;
    }
    else
    {
        uint _1753 = _1660 + 6u;
        float _1769 = (dot(vec3(cbLight._m0[_1660 + 2u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _1770 = _1769 * _1769;
        float _3851 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1772 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1745 = (((cbLight._m0[_1753].x * 0.3183098733425140380859375) * _1771) * _1772) + _1725;
        _1747 = (((cbLight._m0[_1753].y * 0.3183098733425140380859375) * _1771) * _1772) + _1726;
        _1749 = (((cbLight._m0[_1753].z * 0.3183098733425140380859375) * _1771) * _1772) + _1727;
    }
    bool _1752 = _1732.y == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1752)
    {
        _1790 = _1745;
        _1792 = _1747;
        _1794 = _1749;
    }
    else
    {
        uint _1949 = _1660 + 7u;
        float _1965 = (dot(vec3(cbLight._m0[_1660 + 3u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _3867 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1968 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1790 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1745;
        _1792 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1747;
        _1794 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1749;
    }
    uint _1797 = _1660 + 8u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _472) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1660].x + _549;
    float _1813 = cbLight._m0[_1660].y + _550;
    float _1814 = cbLight._m0[_1660].z + _551;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1660].xyz));
    float _3883 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1826 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1827 = dot(vec3(_469, _470, _471), vec3(_1819, _1820, _1821));
    float _3905 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1819, _1820, _1821));
    float _3916 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1811 * _1811;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1826 * ((_1825 * _1851) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1851) + _1811) * _1825))) * _1825;
    float _3927 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    uint _1875 = _1660 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _472) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1697].x + _549;
    float _1889 = cbLight._m0[_1697].y + _550;
    float _1890 = cbLight._m0[_1697].z + _551;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_1697].xyz));
    float _3938 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1902 = dot(vec3(_469, _470, _471), vec3(_1895, _1896, _1897));
    float _3949 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1895, _1896, _1897));
    float _3960 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1924 = 1.0 - _1887;
    float _1934 = (0.5 / (((_1826 * ((_1901 * _1924) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1924) + _1887) * _1901))) * _1901;
    float _3971 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1946 = (((_1923 * cbLight._m0[_1875].x) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].x) * _1864) * _1693);
    float _1947 = (((_1923 * cbLight._m0[_1875].y) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].y) * _1864) * _1693);
    float _1948 = (((_1923 * cbLight._m0[_1875].z) * _1936) * _1683) + (((_1850 * cbLight._m0[_1797].z) * _1864) * _1693);
    float _2010;
    float _2012;
    float _2014;
    if (_1734)
    {
        _2010 = _1946;
        _2012 = _1947;
        _2014 = _1948;
    }
    else
    {
        uint _2016 = _1660 + 2u;
        uint _2020 = _1660 + 10u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _472) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _549;
        float _2037 = cbLight._m0[_2016].y + _550;
        float _2038 = cbLight._m0[_2016].z + _551;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2016].xyz));
        float _3982 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2050 = dot(vec3(_469, _470, _471), vec3(_2043, _2044, _2045));
        float _3993 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _4004 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2072 = 1.0 - _2035;
        float _2082 = (0.5 / (((_1826 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2072) + _2035) * _2049))) * _2049;
        float _4015 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2084 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2085 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2010 = (((_2071 * cbLight._m0[_2020].x) * _2084) * _2085) + _1946;
        _2012 = (((_2071 * cbLight._m0[_2020].y) * _2084) * _2085) + _1947;
        _2014 = (((_2071 * cbLight._m0[_2020].z) * _2084) * _2085) + _1948;
    }
    float _2120;
    float _2122;
    float _2124;
    if (_1752)
    {
        _2120 = _2010;
        _2122 = _2012;
        _2124 = _2014;
    }
    else
    {
        uint _2131 = _1660 + 3u;
        uint _2135 = _1660 + 11u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _472) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _549;
        float _2152 = cbLight._m0[_2131].y + _550;
        float _2153 = cbLight._m0[_2131].z + _551;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2131].xyz));
        float _4031 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2165 = dot(vec3(_469, _470, _471), vec3(_2158, _2159, _2160));
        float _4042 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4053 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2187 = 1.0 - _2150;
        float _2197 = (0.5 / (((_1826 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2187) + _2150) * _2164))) * _2164;
        float _4064 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2120 = (((_2186 * cbLight._m0[_2135].x) * _2199) * _2200) + _2010;
        _2122 = (((_2186 * cbLight._m0[_2135].y) * _2199) * _2200) + _2012;
        _2124 = (((_2186 * cbLight._m0[_2135].z) * _2199) * _2200) + _2014;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1658.y == 0u)
    {
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2275;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2275;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2275;
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2291)));
        float _2312 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
        }
        else
        {
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            uint _2599 = 0u;
            uint _2608;
            bool _2609;
            for (;;)
            {
                _2608 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                _2609 = _2608 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2609)
                {
                    frontier_phi_61_pred = _2593;
                    frontier_phi_61_pred_1 = _2598;
                    frontier_phi_61_pred_2 = _2597;
                    frontier_phi_61_pred_3 = _2596;
                    frontier_phi_61_pred_4 = _2595;
                    frontier_phi_61_pred_5 = _2594;
                }
                else
                {
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    uint _2723;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2608;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2727 = uint(findLSB(_2723)) + (_2599 << 5u);
                        uint _2724 = (_2723 + 4294967295u) & _2723;
                        uint _2729 = _2727 * 48u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2749 = (_2727 * 48u) + 4u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2768 = (_2727 * 48u) + 8u;
                        vec3 _2779 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x));
                        float _2783 = _2743.x - _2276;
                        float _2784 = _2743.y - _2277;
                        float _2785 = _2743.z - _2278;
                        float _2786 = dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785));
                        float _2789 = inversesqrt(_2786);
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2793 = dot(vec3(_578, _581, _584), vec3(_2790, _2791, _2792));
                        float _2798 = 1.0 - (_2786 * _2743.w);
                        float _4090 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2800 = sqrt(_2786) * _2762.w;
                        float _2803 = 1.39999997615814208984375 / (_2800 + 1.39999997615814208984375);
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2793) + _2804;
                        float _2810 = _2800 * _2800;
                        float _2814 = ((isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))) * _2799) / ((_2810 * 0.699999988079071044921875) + 1.0);
                        float _2818 = (-0.0) - _2276;
                        float _2819 = (-0.0) - _2277;
                        float _2820 = (-0.0) - _2278;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2835 = exp2(log2(1.0 / ((_2810 * 3.5) + 5.0)) * 0.25);
                        float _2836 = 1.0 - _638;
                        float _2843 = sqrt(1.0 - ((1.0 - (_2836 * _2836)) * (1.0 - (_2835 * _2835))));
                        float _2844 = _2843 * _2843;
                        float _2845 = _2844 * _2844;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2856 = dot(vec3(_578, _581, _584), vec3(_2825, _2826, _2827));
                        float _4106 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2860 = dot(vec3(_578, _581, _584), vec3(_2852 * _2846, _2852 * _2847, _2852 * _2848));
                        float _4117 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2867 = ((_2863 * _2863) * (_2845 + (-1.0))) + 1.0;
                        float _2868 = _2803 * _2844;
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2793) + _2869;
                        float _4128 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2874 = 1.0 - _2844;
                        float _2884 = (0.5 / (((_2873 * ((_2859 * _2874) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2873 * _2874) + _2844) * _2859))) * _2873;
                        float _4139 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2895 = (((_2845 * 3.1415927410125732421875) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) / ((_2867 * _2867) * ((_2810 * 2.1991131305694580078125) + 3.141590118408203125))) * _2799;
                        _2652 = (_2814 * _2762.x) + _2720;
                        _2653 = (_2814 * _2762.y) + _2721;
                        _2654 = (_2814 * _2762.z) + _2722;
                        _2649 = (_2895 * _2779.x) + _2717;
                        _2650 = (_2895 * _2779.y) + _2718;
                        _2651 = (_2895 * _2779.z) + _2719;
                        if (_2724 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2724;
                        }
                    }
                    frontier_phi_61_pred = _2649;
                    frontier_phi_61_pred_1 = _2654;
                    frontier_phi_61_pred_2 = _2653;
                    frontier_phi_61_pred_3 = _2652;
                    frontier_phi_61_pred_4 = _2651;
                    frontier_phi_61_pred_5 = _2650;
                }
                _2449 = frontier_phi_61_pred;
                _2459 = frontier_phi_61_pred_1;
                _2457 = frontier_phi_61_pred_2;
                _2455 = frontier_phi_61_pred_3;
                _2453 = frontier_phi_61_pred_4;
                _2451 = frontier_phi_61_pred_5;
                uint _2600 = _2599 + 1u;
                if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2593 = _2449;
                    _2594 = _2451;
                    _2595 = _2453;
                    _2596 = _2455;
                    _2597 = _2457;
                    _2598 = _2459;
                    _2599 = _2600;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
        }
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.z;
        uint _2465 = (_2463 >> 8u) & 15u;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((4294967295u << _2465) & _2322) == 0u)
        {
            _2561 = _2448;
            _2563 = _2450;
            _2565 = _2452;
            _2567 = _2454;
            _2569 = _2456;
            _2571 = _2458;
        }
        else
        {
            float _2586 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _2587 = _2586 * _2276;
            float _2588 = _2586 * _2277;
            float _2589 = _2586 * _2278;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2465 < ((_2463 >> 12u) & 15u))
            {
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2700 = _2448;
                float _2701 = _2450;
                float _2702 = _2452;
                float _2703 = _2454;
                float _2704 = _2456;
                float _2705 = _2458;
                uint _2706 = _2465;
                uint _2715;
                bool _2716;
                for (;;)
                {
                    _2715 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                    _2716 = _2715 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2716)
                    {
                        frontier_phi_67_pred = _2703;
                        frontier_phi_67_pred_1 = _2704;
                        frontier_phi_67_pred_2 = _2705;
                        frontier_phi_67_pred_3 = _2702;
                        frontier_phi_67_pred_4 = _2701;
                        frontier_phi_67_pred_5 = _2700;
                    }
                    else
                    {
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        uint _2919 = _2715;
                        uint _2920;
                        vec4 _2945;
                        float _2946;
                        vec4 _2961;
                        vec3 _2973;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2930 = ((_2706 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2919));
                            _2920 = (_2919 + 4294967295u) & _2919;
                            uint _2932 = _2930 * 40u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2946 = _2945.w;
                            uint _2948 = (_2930 * 40u) + 4u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2963 = (_2930 * 40u) + 8u;
                            _2973 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x));
                            uint _2975 = (_2930 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2930 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2930 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2930 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2278, _3039.z, fma(_2277, _3039.y, _3039.x * _2276)) + _3039.w;
                            _3052 = !((fma(_2278, _3020.z, fma(_2277, _3020.y, _3020.x * _2276)) + _3020.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2945.x - _2276;
                                float _3080 = _2945.y - _2277;
                                float _3081 = _2945.z - _2278;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2946 * _2946));
                                float _4150 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3097 = sqrt(_3082) * _2961.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_578, _581, _584))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2278, _2988.z, fma(_2277, _2988.y, _2988.x * _2276)) + _2988.w) / _3051;
                                float _3111 = (fma(_2278, _3004.z, fma(_2277, _3004.y, _3004.x * _2276)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4166 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _638;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2587;
                                float _3141 = _3087 - _2588;
                                float _3142 = _3088 - _2589;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2587, (-0.0) - _2588, (-0.0) - _2589));
                                float _4177 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3154 = dot(vec3(_578, _581, _584), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4188 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_578, _581, _584), vec3(_3086, _3087, _3088))) + _3163;
                                float _4199 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4210 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3191 * _2973.x;
                                frontier_phi_73_pred_1 = _3191 * _2973.y;
                                frontier_phi_73_pred_2 = _3117 * _2961.z;
                                frontier_phi_73_pred_3 = _3117 * _2961.y;
                                frontier_phi_73_pred_4 = _3117 * _2961.x;
                                frontier_phi_73_pred_5 = _3191 * _2973.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_73_pred;
                            _3196 = frontier_phi_73_pred_1;
                            _3200 = frontier_phi_73_pred_2;
                            _3199 = frontier_phi_73_pred_3;
                            _3198 = frontier_phi_73_pred_4;
                            _3197 = frontier_phi_73_pred_5;
                            _2903 = _3198 + _2916;
                            _2904 = _3199 + _2917;
                            _2905 = _3200 + _2918;
                            _2900 = _3195 + _2913;
                            _2901 = _3196 + _2914;
                            _2902 = _3197 + _2915;
                            if (_2920 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2920;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2903;
                        frontier_phi_67_pred_1 = _2904;
                        frontier_phi_67_pred_2 = _2905;
                        frontier_phi_67_pred_3 = _2902;
                        frontier_phi_67_pred_4 = _2901;
                        frontier_phi_67_pred_5 = _2900;
                    }
                    _2568 = frontier_phi_67_pred;
                    _2570 = frontier_phi_67_pred_1;
                    _2572 = frontier_phi_67_pred_2;
                    _2566 = frontier_phi_67_pred_3;
                    _2564 = frontier_phi_67_pred_4;
                    _2562 = frontier_phi_67_pred_5;
                    uint _2707 = _2706 + 1u;
                    if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2700 = _2562;
                        _2701 = _2564;
                        _2702 = _2566;
                        _2703 = _2568;
                        _2704 = _2570;
                        _2705 = _2572;
                        _2706 = _2707;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2570;
                frontier_phi_55_56_ladder_1 = _2572;
                frontier_phi_55_56_ladder_2 = _2568;
                frontier_phi_55_56_ladder_3 = _2566;
                frontier_phi_55_56_ladder_4 = _2564;
                frontier_phi_55_56_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_55_56_ladder = _2456;
                frontier_phi_55_56_ladder_1 = _2458;
                frontier_phi_55_56_ladder_2 = _2454;
                frontier_phi_55_56_ladder_3 = _2452;
                frontier_phi_55_56_ladder_4 = _2450;
                frontier_phi_55_56_ladder_5 = _2448;
            }
            _2561 = frontier_phi_55_56_ladder_5;
            _2563 = frontier_phi_55_56_ladder_4;
            _2565 = frontier_phi_55_56_ladder_3;
            _2567 = frontier_phi_55_56_ladder_2;
            _2569 = frontier_phi_55_56_ladder;
            _2571 = frontier_phi_55_56_ladder_1;
        }
        float _2576 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2335 = (_2576 * _2567) + _1790;
        _2337 = (_2576 * _2569) + _1792;
        _2339 = (_2576 * _2571) + _1794;
        _2341 = ((_2561 * 0.039999999105930328369140625) * _2576) + _2120;
        _2343 = ((_2563 * 0.039999999105930328369140625) * _2576) + _2122;
        _2345 = ((_2565 * 0.039999999105930328369140625) * _2576) + _2124;
    }
    else
    {
        _2335 = _1790;
        _2337 = _1792;
        _2339 = _1794;
        _2341 = _2120;
        _2343 = _2122;
        _2345 = _2124;
    }
    uint _2351 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _4226 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4237 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4248 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2382 = (((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2335 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _622))) + ((_2341 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + (((_446 * cbMtdParam._m0[11u].x) * (_431.x + _416.x)) * cbInstanceData._m0[_2351].x);
    float _2384 = ((((_446 * cbMtdParam._m0[11u].y) * (_431.y + _416.y)) * cbInstanceData._m0[_2351].y) + ((_2343 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2337 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _622)));
    float _2386 = ((((_446 * cbMtdParam._m0[11u].z) * (_431.z + _416.z)) * cbInstanceData._m0[_2351].z) + ((_2345 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2339 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _622)));
    uint _2390 = _597 + 6u;
    float _2398 = _557 / cbSceneParam._m0[86u].x;
    float _2399 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2413 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, (log2((isnan(cbSceneParam._m0[77u].w) ? _491 : (isnan(_491) ? cbSceneParam._m0[77u].w : min(_491, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2415 = _2413.x;
    float _2416 = _2413.y;
    float _2417 = _2413.z;
    float _2418 = _2413.w;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_491 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_491) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _491 : min(cbSceneParam._m0[80u].w, _491));
        float _2474 = _2473 / _491;
        float _2485 = _2474 * _542;
        float _2486 = _543 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2489 = _2474 * _544;
        float _2491 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2492 = _2491 + cbSceneParam._m0[79u].w;
        float _2493 = cbSceneParam._m0[79u].w - _2486;
        float _2499 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2489 * _2489));
        float _2502 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2499;
        float _2507 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2509 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2487 - _2491) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2492 > 0.0) ? exp2(_2507 * _2492) : (2.0 - exp2(_2509 * _2492))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2502;
        }
        else
        {
            float _2622 = 1.0 / cbSceneParam._m0[80u].x;
            float _2623 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : max(_2492, _2493));
            float _2624 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : min(_2492, _2493));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            _2662 = ((abs(_2499 / _2487) * cbSceneParam._m0[80u].y) * ((((_2633 - _2634) * 2.0) - ((exp2(_2507 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)))) - exp2(_2507 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))))) * _2622)) - ((exp2(_2509 * _2633) - exp2(_2509 * _2634)) * _2622))) + (_2502 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2418);
        _2511 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2415;
        _2513 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2416;
        _2515 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2417;
        _2517 = _2673 * _2418;
    }
    else
    {
        _2511 = _2415;
        _2513 = _2416;
        _2515 = _2417;
        _2517 = _2418;
    }
    float _2529 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2530 = _2529 == 3.0;
    float _2531 = log2(_2517);
    float _2538 = exp2(_2531 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)));
    float _2539 = exp2(_2531 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2540 = exp2(_2531 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)));
    float _2549 = (_2529 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2549 * (_2530 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2511)));
    SV_Target.y = _2549 * (_2530 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2513)));
    SV_Target.z = _2549 * (_2530 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2515)));
    SV_Target.w = cbInstanceData._m0[_2390].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2390].w;
}


