#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1210;
float _3643;
float _3644;
float _3645;
float _3646;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _319 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3655 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _327 = (((_303.x * cbMtdParam._m0[10u].x) - _263) * _320) + _263;
    float _328 = (((_303.y * cbMtdParam._m0[10u].y) - _264) * _320) + _264;
    float _329 = (((_303.z * cbMtdParam._m0[10u].z) - _265) * _320) + _265;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _368 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_349.x + 0.00999999977648258209228515625));
    float _370 = _368 * (cbMtdParam._m0[15u].x + 1.0);
    float _3666 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _379 = ((((cbMtdParam._m0[12u].x - _327) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _371) + _327;
    float _380 = ((((cbMtdParam._m0[12u].y - _328) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _371) + _328;
    float _381 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _329)) * _371) + _329;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _396 = _394.x;
    float _414 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _396) * _320) + _396;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _435 = (_427.x * 2.0) + (-1.0);
    float _437 = (_427.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3677 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    vec4 _455 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _459 = _455.z;
    float _462 = (_455.x * 2.0) + (-1.0);
    float _463 = (_455.y * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3688 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _472 = (_320 * (_427.z - _459)) + _459;
    float _475 = _368 * (cbMtdParam._m0[14u].w + 1.0);
    float _3699 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _479 = ((cbMtdParam._m0[14u].y - _472) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _472;
    vec4 _505 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _531 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _546 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _560 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_505.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3710 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _568 = (_320 * (_435 - _462)) + _462;
    float _569 = (_320 * (_437 - _463)) + _463;
    float _570 = (_320 * (sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) - _469)) + _469;
    vec4 _589 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _595 = (_589.x * 2.0) + (-1.0);
    float _596 = (_589.y * 2.0) + (-1.0);
    float _597 = dot(vec2(_595, _596), vec2(_595, _596));
    float _3721 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _613 = (_371 * (((_568 * cbMtdParam._m0[13u].z) - _568) + _595)) + _568;
    float _614 = (_371 * (((_569 * cbMtdParam._m0[13u].z) - _569) + _596)) + _569;
    float _615 = (_371 * (sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) - _570)) + _570;
    float _618 = fma(_615, _228 * NORMAL.x, fma(_614, _235 * TANGENT.x, (_221 * _213) * _613));
    float _621 = fma(_615, _228 * NORMAL.y, fma(_614, _235 * TANGENT.y, (_221 * _214) * _613));
    float _624 = fma(_615, _228 * NORMAL.z, fma(_614, _235 * TANGENT.z, (_221 * _215) * _613));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3732 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _632 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3754 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3765 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3776 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _636 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    vec4 _716 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _718 = _716.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _890 = sqrt(((_702 * _702) + (_703 * _703)) + (_704 * _704));
        float _896 = (cbMatDynParam._m0[5u].x * _890) + cbMatDynParam._m0[5u].y;
        float _3787 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _901 = (cbMatDynParam._m0[5u].z * _890) + cbMatDynParam._m0[5u].w;
        float _3798 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) - _897)) + _897) < ((_718 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _729 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _730 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _748 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _751 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _754 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _767 = uint(roundEven(NORMAL.w)) * 13u;
    uint _768 = _767 + 9u;
    uint _769 = _768 + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3809 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _781 = 1.0 - _636;
    float _782 = _778 * _781;
    float _783 = _779 * _781;
    float _784 = _780 * _781;
    float _789 = (_778 + (-0.039999999105930328369140625)) * _636;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _636;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _636;
    float _792 = _789 + 0.039999999105930328369140625;
    float _794 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _729, cbSceneParam._m0[86u].y * _730));
    float _807 = _804.x * TEXCOORD_3.w;
    float _808 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _811 = _808 * 2.0;
    float _815 = (_811 * _629) - _709;
    float _816 = (_811 * _630) - _710;
    float _817 = (_811 * _631) - _711;
    float _821 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3842 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _823 = sqrt(_632);
    float _836 = exp2((_823 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_823 * 3.0));
    float _842 = (1.0 - _836) * ((_823 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _843 = _836 * _823;
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _938 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _942 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _967 = _871 + _629;
        float _968 = _875 + _630;
        float _969 = _879 + _631;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_629, _630, _631), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3890 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_629, _630, _631), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3923 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_629, _630, _631), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3956 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1257 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1261 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1284 = _871 + _629;
        float _1285 = _875 + _630;
        float _1286 = _879 + _631;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_629, _630, _631), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4019 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_629, _630, _631), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4052 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_629, _630, _631), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4085 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = _1210;
        _1531 = _1210;
        _1532 = _1210;
        _1533 = _1210;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1222)) + _1222;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1223)) + _1223;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _815 * 0.5;
    float _1591 = _816 * 0.5;
    float _1592 = _817 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1720 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1723 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1751 = frontier_phi_17_15_ladder;
        }
        float _1976;
        if (_1720 > 0.0)
        {
            _1976 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1976 = frontier_phi_26_22_ladder;
        }
        float _2233;
        if (_1723 > 0.0)
        {
            _2233 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2233 = frontier_phi_38_33_ladder;
        }
        float _2235 = isnan(_1976) ? _1751 : (isnan(_1751) ? _1976 : min(_1751, _1976));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1717) + _1706;
        float _2241 = (_2236 * _1720) + _1710;
        float _2242 = (_2236 * _1723) + _1714;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_16_38_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_16_38_ladder_2;
        _1741 = frontier_phi_16_38_ladder_1;
        _1743 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1803 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1807 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1811 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1814 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1817 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1820 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1981;
        if (_1814 > 0.0)
        {
            _1981 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1981 = frontier_phi_28_24_ladder;
        }
        float _2260;
        if (_1817 > 0.0)
        {
            _2260 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2260 = frontier_phi_40_35_ladder;
        }
        float _2473;
        if (_1820 > 0.0)
        {
            _2473 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2473 = frontier_phi_49_46_ladder;
        }
        float _2475 = isnan(_2260) ? _1981 : (isnan(_1981) ? _2260 : min(_1981, _2260));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1814) + _1803;
        float _2481 = (_2476 * _1817) + _1807;
        float _2482 = (_2476 * _1820) + _1811;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_25_49_ladder = _2706.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2706.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2706.x * cbModelParam._m0[1u].z;
        }
        _1839 = frontier_phi_25_49_ladder_2;
        _1841 = frontier_phi_25_49_ladder_1;
        _1843 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1748);
        _1839 = _1823.x * cbModelParam._m0[1u].z;
        _1841 = _1823.y * cbModelParam._m0[1u].z;
        _1843 = _1823.z * cbModelParam._m0[1u].z;
    }
    float _1856 = (((_842 * _792) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1839 - _1739)) + _1739);
    float _1858 = (((_842 * _794) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1841 - _1741)) + _1741);
    float _1860 = (((_842 * _795) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1843 - _1743)) + _1743);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, _1856 * cbSceneParam._m0[91u].x));
    vec4 _1877 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_729, _730));
    float _1879 = _1877.w;
    float _1891 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1879);
    float _1892 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1879);
    float _1893 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1879);
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_767 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _807 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1935 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1939 = _1899 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_629, _630, _631));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_629, _630, _631));
    float _4221 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4232 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1916].x * _1922) * _1960) + (((cbLight._m0[_1926].x * _1891) * _1935) * _1958);
    float _1968 = ((_1922 * cbLight._m0[_1916].y) * _1960) + (((cbLight._m0[_1926].y * _1892) * _1935) * _1958);
    float _1969 = ((_1922 * cbLight._m0[_1916].z) * _1960) + (((cbLight._m0[_1926].z * _1893) * _1935) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1899 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4243 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2013 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2204 = _1899 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4259 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2223 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2031 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1986;
        _2033 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1988;
        _2035 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _1990;
    }
    uint _2038 = _1899 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _632) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1899].x + _709;
    float _2054 = cbLight._m0[_1899].y + _710;
    float _2055 = cbLight._m0[_1899].z + _711;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1899].xyz));
    float _4275 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2067 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2068 = dot(vec3(_629, _630, _631), vec3(_2060, _2061, _2062));
    float _4297 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2060, _2061, _2062));
    float _4308 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
    float _2089 = 0.959999978542327880859375 - _789;
    float _2091 = 0.959999978542327880859375 - _790;
    float _2092 = 0.959999978542327880859375 - _791;
    float _2099 = 1.0 - _2052;
    float _2110 = (0.5 / (((_2067 * ((_2066 * _2099) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2099) + _2052) * _2066))) * _2066;
    float _4319 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2126 = _1899 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _632) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1939].x + _709;
    float _2140 = cbLight._m0[_1939].y + _710;
    float _2141 = cbLight._m0[_1939].z + _711;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1939].xyz));
    float _4330 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2153 = dot(vec3(_629, _630, _631), vec3(_2146, _2147, _2148));
    float _4341 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2146, _2147, _2148));
    float _4352 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
    float _2179 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2067 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2179) + _2138) * _2152))) * _2152;
    float _4363 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2201 = (((((_2172 * _2089) + _792) * cbLight._m0[_2126].x) * _2191) * _1922) + ((((cbLight._m0[_2038].x * _1891) * ((_2088 * _2089) + _792)) * _2112) * _1935);
    float _2202 = (((((_2172 * _2091) + _794) * cbLight._m0[_2126].y) * _2191) * _1922) + ((((cbLight._m0[_2038].y * _1892) * ((_2088 * _2091) + _794)) * _2112) * _1935);
    float _2203 = (((((_2172 * _2092) + _795) * cbLight._m0[_2126].z) * _2191) * _1922) + ((((cbLight._m0[_2038].z * _1893) * ((_2088 * _2092) + _795)) * _2112) * _1935);
    float _2265;
    float _2267;
    float _2269;
    if (_1975)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1899 + 2u;
        uint _2275 = _1899 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _632) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _709;
        float _2292 = cbLight._m0[_2271].y + _710;
        float _2293 = cbLight._m0[_2271].z + _711;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2271].xyz));
        float _4374 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2305 = dot(vec3(_629, _630, _631), vec3(_2298, _2299, _2300));
        float _4385 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4396 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2067 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2331) + _2290) * _2304))) * _2304;
        float _4407 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2265 = (((((_2324 * _2089) + _792) * cbLight._m0[_2275].x) * _2343) * _2344) + _2201;
        _2267 = (((((_2324 * _2091) + _794) * cbLight._m0[_2275].y) * _2343) * _2344) + _2202;
        _2269 = (((((_2324 * _2092) + _795) * cbLight._m0[_2275].z) * _2343) * _2344) + _2203;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_1993)
    {
        _2379 = _2265;
        _2381 = _2267;
        _2383 = _2269;
    }
    else
    {
        uint _2390 = _1899 + 3u;
        uint _2394 = _1899 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _632) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _709;
        float _2411 = cbLight._m0[_2390].y + _710;
        float _2412 = cbLight._m0[_2390].z + _711;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2390].xyz));
        float _4423 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2424 = dot(vec3(_629, _630, _631), vec3(_2417, _2418, _2419));
        float _4434 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4445 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2067 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2450) + _2409) * _2423))) * _2423;
        float _4456 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2379 = (((((_2443 * _2089) + _792) * cbLight._m0[_2394].x) * _2462) * _2463) + _2265;
        _2381 = (((((_2443 * _2091) + _794) * cbLight._m0[_2394].y) * _2462) * _2463) + _2267;
        _2383 = (((((_2443 * _2092) + _795) * cbLight._m0[_2394].z) * _2462) * _2463) + _2269;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1897.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _730) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _729) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2880)
                {
                    frontier_phi_66_pred = _2864;
                    frontier_phi_66_pred_1 = _2869;
                    frontier_phi_66_pred_2 = _2868;
                    frontier_phi_66_pred_3 = _2867;
                    frontier_phi_66_pred_4 = _2866;
                    frontier_phi_66_pred_5 = _2865;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2879;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2870 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2539;
                        float _3076 = _3035.y - _2540;
                        float _3077 = _3035.z - _2541;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_748, _751, _754), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4482 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2539;
                        float _3111 = (-0.0) - _2540;
                        float _3112 = (-0.0) - _2541;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _823;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_748, _751, _754), vec3(_3117, _3118, _3119));
                        float _4498 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3152 = dot(vec3(_748, _751, _754), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4509 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4520 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4531 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2939 = (_3106 * _3054.x) + _3012;
                        _2940 = (_3106 * _3054.y) + _3013;
                        _2941 = (_3106 * _3054.z) + _3014;
                        _2936 = (_3187 * _3071.x) + _3009;
                        _2937 = (_3187 * _3071.y) + _3010;
                        _2938 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_66_pred = _2936;
                    frontier_phi_66_pred_1 = _2941;
                    frontier_phi_66_pred_2 = _2940;
                    frontier_phi_66_pred_3 = _2939;
                    frontier_phi_66_pred_4 = _2938;
                    frontier_phi_66_pred_5 = _2937;
                }
                _2712 = frontier_phi_66_pred;
                _2722 = frontier_phi_66_pred_1;
                _2720 = frontier_phi_66_pred_2;
                _2718 = frontier_phi_66_pred_3;
                _2716 = frontier_phi_66_pred_4;
                _2714 = frontier_phi_66_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2712;
                    _2865 = _2714;
                    _2866 = _2716;
                    _2867 = _2718;
                    _2868 = _2720;
                    _2869 = _2722;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2728) & _2585) == 0u)
        {
            _2832 = _2711;
            _2834 = _2713;
            _2836 = _2715;
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2858 = _2857 * _2539;
            float _2859 = _2857 * _2540;
            float _2860 = _2857 * _2541;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2992 = _2711;
                float _2993 = _2713;
                float _2994 = _2715;
                float _2995 = _2717;
                float _2996 = _2719;
                float _2997 = _2721;
                uint _2998 = _2728;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3008)
                    {
                        frontier_phi_77_pred = _2997;
                        frontier_phi_77_pred_1 = _2996;
                        frontier_phi_77_pred_2 = _2995;
                        frontier_phi_77_pred_3 = _2994;
                        frontier_phi_77_pred_4 = _2993;
                        frontier_phi_77_pred_5 = _2992;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        uint _3220 = _3007;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3289;
                        vec4 _3305;
                        float _3352;
                        bool _3353;
                        for (;;)
                        {
                            uint _3231 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3276 = (_3231 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3292 = (_3231 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3231 * 40u) + 24u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3327 = (_3231 * 40u) + 28u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3352 = fma(_2541, _3340.z, fma(_2540, _3340.y, _3340.x * _2539)) + _3340.w;
                            _3353 = !((fma(_2541, _3321.z, fma(_2540, _3321.y, _3321.x * _2539)) + _3321.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3353)
                            {
                                float _3380 = _3246.x - _2539;
                                float _3381 = _3246.y - _2540;
                                float _3382 = _3246.z - _2541;
                                float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                                float _3386 = inversesqrt(_3383);
                                float _3387 = _3386 * _3380;
                                float _3388 = _3386 * _3381;
                                float _3389 = _3386 * _3382;
                                float _3393 = 1.0 - (_3383 / (_3247 * _3247));
                                float _4542 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3398 = sqrt(_3383) * _3262.w;
                                float _3400 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                                float _3401 = _3400 * _3400;
                                float _3404 = ((1.0 - _3401) * dot(vec3(_3387, _3388, _3389), vec3(_748, _751, _754))) + _3401;
                                float _3407 = _3398 * _3398;
                                float _3411 = (fma(_2541, _3289.z, fma(_2540, _3289.y, _3289.x * _2539)) + _3289.w) / _3352;
                                float _3412 = (fma(_2541, _3305.z, fma(_2540, _3305.y, _3305.x * _2539)) + _3305.w) / _3352;
                                float _3416 = 1.0 - dot(vec2(_3411, _3412), vec2(_3411, _3412));
                                float _4558 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3418 = _3417 * (((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3394) / ((_3407 * 0.699999988079071044921875) + 1.0));
                                float _3430 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                                float _3431 = 1.0 - _823;
                                float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                                float _3439 = _3438 * _3438;
                                float _3440 = _3439 * _3439;
                                float _3441 = _3387 - _2858;
                                float _3442 = _3388 - _2859;
                                float _3443 = _3389 - _2860;
                                float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                                float _3451 = dot(vec3(_748, _751, _754), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4569 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3455 = dot(vec3(_748, _751, _754), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                                float _4580 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                                float _3463 = _3400 * _3439;
                                float _3464 = _3463 * _3463;
                                float _3470 = ((1.0 - _3464) * dot(vec3(_748, _751, _754), vec3(_3387, _3388, _3389))) + _3464;
                                float _4591 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3472 = 1.0 - _3439;
                                float _3482 = (0.5 / (((_3471 * ((_3454 * _3472) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3439) * _3454))) * _3471;
                                float _4602 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3492 = (_3417 * _3394) * (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3462 * _3462) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3418 * _3262.y;
                                frontier_phi_83_pred_1 = _3418 * _3262.x;
                                frontier_phi_83_pred_2 = _3492 * _3274.z;
                                frontier_phi_83_pred_3 = _3492 * _3274.y;
                                frontier_phi_83_pred_4 = _3492 * _3274.x;
                                frontier_phi_83_pred_5 = _3418 * _3262.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_83_pred;
                            _3499 = frontier_phi_83_pred_1;
                            _3498 = frontier_phi_83_pred_2;
                            _3497 = frontier_phi_83_pred_3;
                            _3496 = frontier_phi_83_pred_4;
                            _3501 = frontier_phi_83_pred_5;
                            _3204 = _3499 + _3217;
                            _3205 = _3500 + _3218;
                            _3206 = _3501 + _3219;
                            _3201 = _3496 + _3214;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3206;
                        frontier_phi_77_pred_1 = _3205;
                        frontier_phi_77_pred_2 = _3204;
                        frontier_phi_77_pred_3 = _3203;
                        frontier_phi_77_pred_4 = _3202;
                        frontier_phi_77_pred_5 = _3201;
                    }
                    _2843 = frontier_phi_77_pred;
                    _2841 = frontier_phi_77_pred_1;
                    _2839 = frontier_phi_77_pred_2;
                    _2837 = frontier_phi_77_pred_3;
                    _2835 = frontier_phi_77_pred_4;
                    _2833 = frontier_phi_77_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2833;
                        _2993 = _2835;
                        _2994 = _2837;
                        _2995 = _2839;
                        _2996 = _2841;
                        _2997 = _2843;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2837;
                frontier_phi_58_59_ladder_1 = _2843;
                frontier_phi_58_59_ladder_2 = _2841;
                frontier_phi_58_59_ladder_3 = _2839;
                frontier_phi_58_59_ladder_4 = _2835;
                frontier_phi_58_59_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_58_59_ladder = _2715;
                frontier_phi_58_59_ladder_1 = _2721;
                frontier_phi_58_59_ladder_2 = _2719;
                frontier_phi_58_59_ladder_3 = _2717;
                frontier_phi_58_59_ladder_4 = _2713;
                frontier_phi_58_59_ladder_5 = _2711;
            }
            _2832 = frontier_phi_58_59_ladder_5;
            _2834 = frontier_phi_58_59_ladder_4;
            _2836 = frontier_phi_58_59_ladder;
            _2838 = frontier_phi_58_59_ladder_3;
            _2840 = frontier_phi_58_59_ladder_2;
            _2842 = frontier_phi_58_59_ladder_1;
        }
        float _2847 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2598 = (_2847 * _2838) + _2031;
        _2600 = (_2847 * _2840) + _2033;
        _2602 = (_2847 * _2842) + _2035;
        _2604 = ((_2832 * _792) * _2847) + _2379;
        _2606 = ((_2834 * _794) * _2847) + _2381;
        _2608 = ((_2836 * _795) * _2847) + _2383;
    }
    else
    {
        _2598 = _2031;
        _2600 = _2033;
        _2602 = _2035;
        _2604 = _2379;
        _2606 = _2381;
        _2608 = _2383;
    }
    uint _2614 = _768 + uint(cbMatDynParam._m0[0u].w);
    float _4618 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4629 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4640 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2645 = (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2598 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _807))) + ((_2604 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + (((_561 * cbMtdParam._m0[11u].x) * (_546.x + _531.x)) * cbInstanceData._m0[_2614].x);
    float _2647 = ((((_561 * cbMtdParam._m0[11u].y) * (_546.y + _531.y)) * cbInstanceData._m0[_2614].y) + ((_2606 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2600 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _807)));
    float _2649 = ((((_561 * cbMtdParam._m0[11u].z) * (_546.z + _531.z)) * cbInstanceData._m0[_2614].z) + ((_2608 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2602 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _807)));
    float _2650 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2651 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2652 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    uint _2653 = _767 + 6u;
    float _2661 = _729 / cbSceneParam._m0[86u].x;
    float _2662 = _730 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2737 = _2736 / _652;
        float _2748 = _2737 * _702;
        float _2749 = _703 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2752 = _2737 * _704;
        float _2754 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2755 = _2754 + cbSceneParam._m0[79u].w;
        float _2756 = cbSceneParam._m0[79u].w - _2749;
        float _2762 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2752 * _2752));
        float _2765 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2762;
        float _2770 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2772 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2750 - _2754) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2755 > 0.0) ? exp2(_2770 * _2755) : (2.0 - exp2(_2772 * _2755))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2765;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : max(_2755, _2756));
            float _2895 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : min(_2755, _2756));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2949 = ((abs(_2762 / _2750) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2770 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2770 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2772 * _2904) - exp2(_2772 * _2905)) * _2893))) + (_2765 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2681);
        _2774 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2776 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2778 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2780 = _2960 * _2681;
    }
    else
    {
        _2774 = _2678;
        _2776 = _2679;
        _2778 = _2680;
        _2780 = _2681;
    }
    bool _2987;
    vec4 _2790;
    vec4 _2812;
    float _2814;
    float _2818;
    float _2819;
    float _2820;
    float _2821;
    bool _2831;
    for (;;)
    {
        _2790 = cbMatDynParam._m0[0u];
        float _2792 = roundEven(_2790.y);
        bool _2793 = _2792 == 3.0;
        float _2794 = log2(_2780);
        float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * _2650;
        float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * _2651;
        float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * _2652;
        float _2810 = _718 + (-0.5);
        _2812 = cbMtdParam._m0[1u];
        _2814 = _2812.y * _2810;
        float _2817 = (_2792 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2818 = _2817 * (_2793 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2774)));
        _2819 = _2817 * (_2793 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2776)));
        _2820 = _2817 * (_2793 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2778)));
        _2821 = _2810 * 0.999000012874603271484375;
        _2831 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2831)
        {
            if ((cbInstanceData._m0[_767 + 7u].x + _2821) < 0.5)
            {
                _2987 = true;
                break;
            }
        }
        uint _2928 = _768 + uint(_2790.w);
        if ((cbInstanceData._m0[_2928].w < 1.0) && ((cbInstanceData._m0[_2928].w + _2821) < 0.5))
        {
            _2987 = true;
            break;
        }
        if ((_2814 + 1.0) < _2812.x)
        {
            _2987 = true;
            break;
        }
        _2987 = false;
        break;
    }
    float _3192;
    if (_2987)
    {
        discard_state = true;
        _3192 = 0.0;
    }
    else
    {
        _3192 = cbInstanceData._m0[_2653].w;
    }
    SV_Target.x = _2818;
    SV_Target.y = _2819;
    SV_Target.z = _2820;
    SV_Target.w = _3192;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2653].w;
    discard_exit();
}


