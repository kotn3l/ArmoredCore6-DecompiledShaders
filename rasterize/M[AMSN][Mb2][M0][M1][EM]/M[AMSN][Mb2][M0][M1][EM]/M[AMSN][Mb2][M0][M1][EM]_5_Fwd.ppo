#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1074;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _305 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3408 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _313 = (((_289.x * cbMtdParam._m0[10u].x) - _249) * _306) + _249;
    float _314 = (((_289.y * cbMtdParam._m0[10u].y) - _250) * _306) + _250;
    float _315 = (((_289.z * cbMtdParam._m0[10u].z) - _251) * _306) + _251;
    vec4 _335 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _354 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_335.x + 0.00999999977648258209228515625));
    float _356 = _354 * (cbMtdParam._m0[15u].x + 1.0);
    float _3419 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _365 = ((((cbMtdParam._m0[12u].x - _313) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _357) + _313;
    float _366 = ((((cbMtdParam._m0[12u].y - _314) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _357) + _314;
    float _367 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _315)) * _357) + _315;
    vec4 _380 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _388 = (_380.x * 2.0) + (-1.0);
    float _390 = (_380.y * 2.0) + (-1.0);
    float _391 = dot(vec2(_388, _390), vec2(_388, _390));
    float _3430 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    vec4 _408 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _412 = _408.z;
    float _415 = (_408.x * 2.0) + (-1.0);
    float _416 = (_408.y * 2.0) + (-1.0);
    float _417 = dot(vec2(_415, _416), vec2(_415, _416));
    float _3441 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))));
    float _425 = (_306 * (_380.z - _412)) + _412;
    float _428 = _354 * (cbMtdParam._m0[14u].w + 1.0);
    float _3452 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _432 = ((cbMtdParam._m0[14u].y - _425) * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) + _425;
    vec4 _459 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _474 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _488 = (_306 * (_388 - _415)) + _415;
    float _489 = (_306 * (_390 - _416)) + _416;
    float _490 = (_306 * (sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) - _422)) + _422;
    vec4 _509 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _515 = (_509.x * 2.0) + (-1.0);
    float _516 = (_509.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3463 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _533 = (_357 * (((_488 * cbMtdParam._m0[13u].z) - _488) + _515)) + _488;
    float _534 = (_357 * (((_489 * cbMtdParam._m0[13u].z) - _489) + _516)) + _489;
    float _535 = (_357 * (sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) - _490)) + _490;
    float _538 = fma(_535, _214 * NORMAL.x, fma(_534, _221 * TANGENT.x, (_207 * _199) * _533));
    float _541 = fma(_535, _214 * NORMAL.y, fma(_534, _221 * TANGENT.y, (_207 * _200) * _533));
    float _544 = fma(_535, _214 * NORMAL.z, fma(_534, _221 * TANGENT.z, (_207 * _201) * _533));
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    float _549 = _548 * _538;
    float _550 = _548 * _541;
    float _551 = _548 * _544;
    float _3474 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _552 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3496 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3507 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _658 = fma(_551, cbSceneParam._m0[5u].z, fma(_550, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _549));
    float _661 = fma(_551, cbSceneParam._m0[6u].z, fma(_550, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _549));
    float _664 = fma(_551, cbSceneParam._m0[7u].z, fma(_550, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _549));
    uint _677 = uint(roundEven(NORMAL.w)) * 13u;
    uint _678 = _677 + 9u;
    uint _679 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3518 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _702 = _699.x * TEXCOORD_3.w;
    float _703 = dot(vec3(_549, _550, _551), vec3(_629, _630, _631));
    float _706 = _703 * 2.0;
    float _710 = (_706 * _549) - _629;
    float _711 = (_706 * _550) - _630;
    float _712 = (_706 * _551) - _631;
    float _716 = abs(dot(vec3(_629, _630, _631), vec3(_549, _550, _551)));
    float _3551 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _718 = sqrt(_552);
    float _731 = exp2((_718 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_718 * 3.0));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1073;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _798 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _802 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _806 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _831 = _763 + _549;
        float _832 = _767 + _550;
        float _833 = _771 + _551;
        float _843 = fma(_833, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831)) - _798;
        float _844 = fma(_833, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831)) - _802;
        float _845 = fma(_833, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831)) - _806;
        float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
        float _862 = ((_849 * _843) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_798 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_849 * _844) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_802 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_849 * _845) / cbModelParam._m0[34u].z) + ((((((_806 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        float _901 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_867.x + (-0.5));
        float _903 = _901 * (_867.y + (-0.5));
        float _904 = _901 * (_867.z + (-0.5));
        float _911 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_874.x + (-0.5));
        float _913 = _911 * (_874.y + (-0.5));
        float _914 = _911 * (_874.z + (-0.5));
        float _921 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_881.x + (-0.5));
        float _923 = _921 * (_881.y + (-0.5));
        float _924 = _921 * (_881.z + (-0.5));
        float _931 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_888.x + (-0.5));
        float _933 = _931 * (_888.y + (-0.5));
        float _934 = _931 * (_888.z + (-0.5));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = _902 * 0.5;
        float _939 = _912 * 0.5;
        float _940 = _922 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _955 = (dot(vec3(_549, _550, _551), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _965 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3599 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_967 + 1.0))) + _972) * _935;
        float _982 = _903 * 0.5;
        float _983 = _913 * 0.5;
        float _984 = _923 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_549, _550, _551), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3632 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1009 + 1.0))) + _1014) * _936;
        float _1024 = _904 * 0.5;
        float _1025 = _914 * 0.5;
        float _1026 = _924 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_549, _550, _551), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3665 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1051 + 1.0))) + _1056) * _937;
        _1073 = _904;
        _1075 = _903;
        _1076 = _902;
        _1077 = _914;
        _1078 = _913;
        _1079 = _912;
        _1080 = _924;
        _1081 = _923;
        _1082 = _922;
        _1083 = _937;
        _1084 = _936;
        _1085 = _935;
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
    }
    else
    {
        _1073 = _1074;
        _1075 = _1074;
        _1076 = _1074;
        _1077 = _1074;
        _1078 = _1074;
        _1079 = _1074;
        _1080 = _1074;
        _1081 = _1074;
        _1082 = _1074;
        _1083 = _1074;
        _1084 = _1074;
        _1085 = _1074;
        _1086 = 0.0;
        _1087 = 0.0;
        _1088 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1118 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1122 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1145 = _763 + _549;
        float _1146 = _767 + _550;
        float _1147 = _771 + _551;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_549, _550, _551), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3728 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_549, _550, _551), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3761 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_549, _550, _551), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3794 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1074;
        _1384 = _1074;
        _1385 = _1074;
        _1386 = _1074;
        _1387 = _1074;
        _1388 = _1074;
        _1389 = _1074;
        _1390 = _1074;
        _1391 = _1074;
        _1392 = _1074;
        _1393 = _1074;
        _1394 = _1074;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1086)) + _1086;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1087)) + _1087;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1088)) + _1088;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _710 * 0.5;
    float _1452 = _711 * 0.5;
    float _1453 = _712 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1073, _1077, _1080, _1083));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_712, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710));
        float _1581 = fma(_712, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710));
        float _1584 = fma(_712, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1814;
        if (_1581 > 0.0)
        {
            _1814 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1814 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1584 > 0.0)
        {
            _2057 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1814) ? _1612 : (isnan(_1612) ? _1814 : min(_1612, _1814));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1578) + _1567;
        float _2065 = (_2060 * _1581) + _1571;
        float _2066 = (_2060 * _1584) + _1575;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_710, _711, _712), _1520);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_712, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710));
        float _1678 = fma(_712, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710));
        float _1681 = fma(_712, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710));
        float _1819;
        if (_1675 > 0.0)
        {
            _1819 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1678 > 0.0)
        {
            _2084 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2289;
        if (_1681 > 0.0)
        {
            _2289 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2289 = frontier_phi_46_43_ladder;
        }
        float _2291 = isnan(_2084) ? _1819 : (isnan(_1819) ? _2084 : min(_1819, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1675) + _1664;
        float _2297 = (_2292 * _1678) + _1668;
        float _2298 = (_2292 * _1681) + _1672;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_46_ladder = _2522.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2522.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2522.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_22_46_ladder_2;
        _1702 = frontier_phi_22_46_ladder_1;
        _1704 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_710, _711, _712), _1609);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1716 = ((((1.0 - _731) * ((_718 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_731 * _718)) * _702;
    float _1717 = _1716 * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1718 = _1716 * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1719 = _1716 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1722 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1717 * cbSceneParam._m0[91u].x));
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_677 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _702 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1773 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1777 = _1740 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_549, _550, _551));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_549, _550, _551));
    float _3930 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3941 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1757].x * _1763) * _1798) + ((cbLight._m0[_1767].x * _1773) * _1796);
    float _1806 = ((_1763 * cbLight._m0[_1757].y) * _1798) + ((_1773 * cbLight._m0[_1767].y) * _1796);
    float _1807 = ((_1763 * cbLight._m0[_1757].z) * _1798) + ((_1773 * cbLight._m0[_1767].z) * _1796);
    uvec4 _1811 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1813 = _1811.x == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1813)
    {
        _1824 = _1805;
        _1826 = _1806;
        _1828 = _1807;
    }
    else
    {
        uint _1832 = _1740 + 6u;
        float _1848 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3952 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1851 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1824 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1805;
        _1826 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1806;
        _1828 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1807;
    }
    bool _1831 = _1811.y == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1831)
    {
        _1869 = _1824;
        _1871 = _1826;
        _1873 = _1828;
    }
    else
    {
        uint _2028 = _1740 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3968 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2047 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1869 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1824;
        _1871 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1826;
        _1873 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1828;
    }
    uint _1876 = _1740 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _552) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1740].x + _629;
    float _1892 = cbLight._m0[_1740].y + _630;
    float _1893 = cbLight._m0[_1740].z + _631;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1740].xyz));
    float _3984 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _1905 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1906 = dot(vec3(_549, _550, _551), vec3(_1898, _1899, _1900));
    float _4006 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1898, _1899, _1900));
    float _4017 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1905 * ((_1904 * _1930) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1930) + _1890) * _1904))) * _1904;
    float _4028 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1954 = _1740 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _552) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1777].x + _629;
    float _1968 = cbLight._m0[_1777].y + _630;
    float _1969 = cbLight._m0[_1777].z + _631;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1777].xyz));
    float _4039 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1981 = dot(vec3(_549, _550, _551), vec3(_1974, _1975, _1976));
    float _4050 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1974, _1975, _1976));
    float _4061 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1905 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2003) + _1966) * _1980))) * _1980;
    float _4072 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].x) * _1943) * _1773);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].y) * _1943) * _1773);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].z) * _1943) * _1773);
    float _2089;
    float _2091;
    float _2093;
    if (_1813)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1740 + 2u;
        uint _2099 = _1740 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _552) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _629;
        float _2116 = cbLight._m0[_2095].y + _630;
        float _2117 = cbLight._m0[_2095].z + _631;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2095].xyz));
        float _4083 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2129 = dot(vec3(_549, _550, _551), vec3(_2122, _2123, _2124));
        float _4094 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4105 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1905 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2151) + _2114) * _2128))) * _2128;
        float _4116 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1831)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1740 + 3u;
        uint _2214 = _1740 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _552) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _629;
        float _2231 = cbLight._m0[_2210].y + _630;
        float _2232 = cbLight._m0[_2210].z + _631;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2210].xyz));
        float _4132 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2244 = dot(vec3(_549, _550, _551), vec3(_2237, _2238, _2239));
        float _4143 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4154 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1905 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2266) + _2229) * _2243))) * _2243;
        float _4165 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1738.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
        }
        else
        {
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2688)
                {
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2677;
                    frontier_phi_61_pred_2 = _2676;
                    frontier_phi_61_pred_3 = _2675;
                    frontier_phi_61_pred_4 = _2674;
                    frontier_phi_61_pred_5 = _2673;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2687;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2678 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2355;
                        float _2863 = _2822.y - _2356;
                        float _2864 = _2822.z - _2357;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_658, _661, _664), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4191 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2355;
                        float _2898 = (-0.0) - _2356;
                        float _2899 = (-0.0) - _2357;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _718;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_658, _661, _664), vec3(_2904, _2905, _2906));
                        float _4207 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2939 = dot(vec3(_658, _661, _664), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4218 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4229 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4240 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2731 = (_2893 * _2841.x) + _2799;
                        _2732 = (_2893 * _2841.y) + _2800;
                        _2733 = (_2893 * _2841.z) + _2801;
                        _2728 = (_2974 * _2858.x) + _2796;
                        _2729 = (_2974 * _2858.y) + _2797;
                        _2730 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_61_pred = _2728;
                    frontier_phi_61_pred_1 = _2733;
                    frontier_phi_61_pred_2 = _2732;
                    frontier_phi_61_pred_3 = _2731;
                    frontier_phi_61_pred_4 = _2730;
                    frontier_phi_61_pred_5 = _2729;
                }
                _2528 = frontier_phi_61_pred;
                _2538 = frontier_phi_61_pred_1;
                _2536 = frontier_phi_61_pred_2;
                _2534 = frontier_phi_61_pred_3;
                _2532 = frontier_phi_61_pred_4;
                _2530 = frontier_phi_61_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2528;
                    _2673 = _2530;
                    _2674 = _2532;
                    _2675 = _2534;
                    _2676 = _2536;
                    _2677 = _2538;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
        }
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.z;
        uint _2544 = (_2542 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2544) & _2401) == 0u)
        {
            _2640 = _2527;
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2666 = _2665 * _2355;
            float _2667 = _2665 * _2356;
            float _2668 = _2665 * _2357;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2544 < ((_2542 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2779 = _2527;
                float _2780 = _2529;
                float _2781 = _2531;
                float _2782 = _2533;
                float _2783 = _2535;
                float _2784 = _2537;
                uint _2785 = _2544;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2795)
                    {
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        uint _2998 = _2794;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3009 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3009 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_3009 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3009 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2357, _3118.z, fma(_2356, _3118.y, _3118.x * _2355)) + _3118.w;
                            _3131 = !((fma(_2357, _3099.z, fma(_2356, _3099.y, _3099.x * _2355)) + _3099.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3024.x - _2355;
                                float _3159 = _3024.y - _2356;
                                float _3160 = _3024.z - _2357;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3025 * _3025));
                                float _4251 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3176 = sqrt(_3161) * _3040.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_658, _661, _664))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2357, _3067.z, fma(_2356, _3067.y, _3067.x * _2355)) + _3067.w) / _3130;
                                float _3190 = (fma(_2357, _3083.z, fma(_2356, _3083.y, _3083.x * _2355)) + _3083.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4267 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _718;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2666;
                                float _3220 = _3166 - _2667;
                                float _3221 = _3167 - _2668;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_658, _661, _664), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4278 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3233 = dot(vec3(_658, _661, _664), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4289 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_658, _661, _664), vec3(_3165, _3166, _3167))) + _3242;
                                float _4300 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4311 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3270 * _3052.x;
                                frontier_phi_73_pred_1 = _3270 * _3052.y;
                                frontier_phi_73_pred_2 = _3196 * _3040.z;
                                frontier_phi_73_pred_3 = _3196 * _3040.y;
                                frontier_phi_73_pred_4 = _3196 * _3040.x;
                                frontier_phi_73_pred_5 = _3270 * _3052.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3274 = frontier_phi_73_pred;
                            _3275 = frontier_phi_73_pred_1;
                            _3279 = frontier_phi_73_pred_2;
                            _3278 = frontier_phi_73_pred_3;
                            _3277 = frontier_phi_73_pred_4;
                            _3276 = frontier_phi_73_pred_5;
                            _2982 = _3277 + _2995;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2979 = _3274 + _2992;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2982;
                        frontier_phi_67_pred_1 = _2983;
                        frontier_phi_67_pred_2 = _2984;
                        frontier_phi_67_pred_3 = _2981;
                        frontier_phi_67_pred_4 = _2980;
                        frontier_phi_67_pred_5 = _2979;
                    }
                    _2647 = frontier_phi_67_pred;
                    _2649 = frontier_phi_67_pred_1;
                    _2651 = frontier_phi_67_pred_2;
                    _2645 = frontier_phi_67_pred_3;
                    _2643 = frontier_phi_67_pred_4;
                    _2641 = frontier_phi_67_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2641;
                        _2780 = _2643;
                        _2781 = _2645;
                        _2782 = _2647;
                        _2783 = _2649;
                        _2784 = _2651;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_55_56_ladder = _2535;
                frontier_phi_55_56_ladder_1 = _2537;
                frontier_phi_55_56_ladder_2 = _2533;
                frontier_phi_55_56_ladder_3 = _2531;
                frontier_phi_55_56_ladder_4 = _2529;
                frontier_phi_55_56_ladder_5 = _2527;
            }
            _2640 = frontier_phi_55_56_ladder_5;
            _2642 = frontier_phi_55_56_ladder_4;
            _2644 = frontier_phi_55_56_ladder_3;
            _2646 = frontier_phi_55_56_ladder_2;
            _2648 = frontier_phi_55_56_ladder;
            _2650 = frontier_phi_55_56_ladder_1;
        }
        float _2655 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _2414 = (_2655 * _2646) + _1869;
        _2416 = (_2655 * _2648) + _1871;
        _2418 = (_2655 * _2650) + _1873;
        _2420 = ((_2640 * 0.039999999105930328369140625) * _2655) + _2199;
        _2422 = ((_2642 * 0.039999999105930328369140625) * _2655) + _2201;
        _2424 = ((_2644 * 0.039999999105930328369140625) * _2655) + _2203;
    }
    else
    {
        _2414 = _1869;
        _2416 = _1871;
        _2418 = _1873;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    uint _2430 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _4327 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4338 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4349 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2461 = (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2414 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _702))) + ((_2420 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + (((_357 * cbMtdParam._m0[11u].x) * (_474.x + _459.x)) * cbInstanceData._m0[_2430].x);
    float _2463 = ((((_357 * cbMtdParam._m0[11u].y) * (_474.y + _459.y)) * cbInstanceData._m0[_2430].y) + ((_2422 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2416 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _702)));
    float _2465 = ((((_357 * cbMtdParam._m0[11u].z) * (_474.z + _459.z)) * cbInstanceData._m0[_2430].z) + ((_2424 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2418 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _702)));
    uint _2469 = _677 + 6u;
    float _2477 = _637 / cbSceneParam._m0[86u].x;
    float _2478 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2492 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2494 = _2492.x;
    float _2495 = _2492.y;
    float _2496 = _2492.z;
    float _2497 = _2492.w;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2552 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2553 = _2552 / _571;
        float _2564 = _2553 * _622;
        float _2565 = _623 * _2553;
        float _2566 = (-0.0) - _2565;
        float _2568 = _2553 * _624;
        float _2570 = (cbSceneParam._m0[77u].w * _2566) / _2552;
        float _2571 = _2570 + cbSceneParam._m0[79u].w;
        float _2572 = cbSceneParam._m0[79u].w - _2565;
        float _2578 = sqrt(((_2564 * _2564) + (_2565 * _2565)) + (_2568 * _2568));
        float _2581 = (1.0 - (cbSceneParam._m0[77u].w / _2552)) * _2578;
        float _2586 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2588 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2741;
        if (abs((_2566 - _2570) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2741 = ((((_2571 > 0.0) ? exp2(_2586 * _2571) : (2.0 - exp2(_2588 * _2571))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2581;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : max(_2571, _2572));
            float _2703 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : min(_2571, _2572));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2741 = ((abs(_2578 / _2566) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2586 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2586 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2588 * _2712) - exp2(_2588 * _2713)) * _2701))) + (_2581 * cbSceneParam._m0[80u].z);
        }
        vec4 _2743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, 1.0), 0.0);
        float _2752 = exp2((_2741 * (-1.44269502162933349609375)) * (1.0 - _2743.w));
        float _2753 = log2(_2752);
        float _2769 = log2(_2497);
        _2590 = (exp2(_2769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].x)) * _2743.x) / cbSceneParam._m0[78u].x)) + _2494;
        _2592 = (exp2(_2769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].y)) * _2743.y) / cbSceneParam._m0[78u].y)) + _2495;
        _2594 = (exp2(_2769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].z)) * _2743.z) / cbSceneParam._m0[78u].z)) + _2496;
        _2596 = _2752 * _2497;
    }
    else
    {
        _2590 = _2494;
        _2592 = _2495;
        _2594 = _2496;
        _2596 = _2497;
    }
    float _2608 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2609 = _2608 == 3.0;
    float _2610 = log2(_2596);
    float _2617 = exp2(_2610 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)));
    float _2618 = exp2(_2610 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)));
    float _2619 = exp2(_2610 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0)));
    float _2628 = (_2608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2628 * (_2609 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.y = _2628 * (_2609 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.z = _2628 * (_2609 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.w = cbInstanceData._m0[_2469].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2469].w;
}


