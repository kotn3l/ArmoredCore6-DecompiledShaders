#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _292 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_271.x + 0.00999999977648258209228515625));
    float _294 = _292 * (cbMtdParam._m0[15u].x + 1.0);
    float _3702 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _303 = ((((cbMtdParam._m0[12u].x - _249) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _295) + _249;
    float _304 = ((((cbMtdParam._m0[12u].y - _250) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _295) + _250;
    float _305 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _251)) * _295) + _251;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3713 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _336 = _292 * (cbMtdParam._m0[14u].w + 1.0);
    float _3724 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = ((cbMtdParam._m0[14u].y - _321) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _321;
    vec4 _367 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _382 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _418 = (_412.x * 2.0) + (-1.0);
    float _419 = (_412.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3735 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _436 = (_295 * (((cbMtdParam._m0[13u].z * _325) - _325) + _418)) + _325;
    float _437 = (_295 * (((cbMtdParam._m0[13u].z * _327) - _327) + _419)) + _327;
    float _438 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _333)) + _333;
    float _441 = fma(_438, _214 * NORMAL.x, fma(_437, _221 * TANGENT.x, (_207 * _199) * _436));
    float _444 = fma(_438, _214 * NORMAL.y, fma(_437, _221 * TANGENT.y, (_207 * _200) * _436));
    float _447 = fma(_438, _214 * NORMAL.z, fma(_437, _221 * TANGENT.z, (_207 * _201) * _436));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3746 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _455 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3768 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3779 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _525 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _515);
    float _526 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _515);
    float _527 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _515);
    float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
    float _532 = _525 * _531;
    float _533 = _526 * _531;
    float _534 = _527 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _698 = sqrt(((_525 * _525) + (_526 * _526)) + (_527 * _527));
        float _704 = (cbMatDynParam._m0[5u].x * _698) + cbMatDynParam._m0[5u].y;
        float _3790 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _709 = (cbMatDynParam._m0[5u].z * _698) + cbMatDynParam._m0[5u].w;
        float _3801 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) - _705)) + _705) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _577 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _580 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3812 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _618 = _615.x * TEXCOORD_3.w;
    float _619 = dot(vec3(_452, _453, _454), vec3(_532, _533, _534));
    float _622 = _619 * 2.0;
    float _626 = (_622 * _452) - _532;
    float _627 = (_622 * _453) - _533;
    float _628 = (_622 * _454) - _534;
    float _632 = abs(dot(vec3(_532, _533, _534), vec3(_452, _453, _454)));
    float _3845 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _634 = sqrt(_455);
    float _647 = exp2((_634 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_634 * 3.0));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _746 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _750 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _775 = _679 + _452;
        float _776 = _683 + _453;
        float _777 = _687 + _454;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_452, _453, _454), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3893 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_452, _453, _454), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3926 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_452, _453, _454), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3959 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1065 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1069 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1092 = _679 + _452;
        float _1093 = _683 + _453;
        float _1094 = _687 + _454;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_452, _453, _454), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4022 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_452, _453, _454), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4055 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_452, _453, _454), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4088 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = _1018;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1031)) + _1031;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1032)) + _1032;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _626 * 0.5;
    float _1399 = _627 * 0.5;
    float _1400 = _628 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _455);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_628, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626));
        float _1528 = fma(_628, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626));
        float _1531 = fma(_628, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1559 = frontier_phi_17_15_ladder;
        }
        float _1730;
        if (_1528 > 0.0)
        {
            _1730 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1730 = frontier_phi_26_22_ladder;
        }
        float _2026;
        if (_1531 > 0.0)
        {
            _2026 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2026 = frontier_phi_38_33_ladder;
        }
        float _2028 = isnan(_1730) ? _1559 : (isnan(_1559) ? _1730 : min(_1559, _1730));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1525) + _1514;
        float _2034 = (_2029 * _1528) + _1518;
        float _2035 = (_2029 * _1531) + _1522;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2036;
        float _2040 = _2036 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 > _2040) || ((_2034 < _2038) || ((_2033 < _2038) || (_2033 > _2040))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2035, cbModelParam._m0[9u].z, fma(_2034, cbModelParam._m0[9u].y, _2033 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2035, cbModelParam._m0[10u].z, fma(_2034, cbModelParam._m0[10u].y, _2033 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2035, cbModelParam._m0[11u].z, fma(_2034, cbModelParam._m0[11u].y, _2033 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_16_38_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_16_38_ladder_2;
        _1549 = frontier_phi_16_38_ladder_1;
        _1551 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_626, _627, _628), _1467);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _455);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_628, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626));
        float _1625 = fma(_628, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626));
        float _1628 = fma(_628, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626));
        float _1735;
        if (_1622 > 0.0)
        {
            _1735 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1735 = frontier_phi_28_24_ladder;
        }
        float _2053;
        if (_1625 > 0.0)
        {
            _2053 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2053 = frontier_phi_40_35_ladder;
        }
        float _2380;
        if (_1628 > 0.0)
        {
            _2380 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2380 = frontier_phi_50_47_ladder;
        }
        float _2382 = isnan(_2053) ? _1735 : (isnan(_1735) ? _2053 : min(_1735, _2053));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1622) + _1611;
        float _2388 = (_2383 * _1625) + _1615;
        float _2389 = (_2383 * _1628) + _1619;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2390;
        float _2393 = _2390 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2389 > _2393) || ((_2389 < _2391) || ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 < _2391) || (_2387 > _2393))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2389, cbModelParam._m0[17u].z, fma(_2388, cbModelParam._m0[17u].y, _2387 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2389, cbModelParam._m0[18u].z, fma(_2388, cbModelParam._m0[18u].y, _2387 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2389, cbModelParam._m0[19u].z, fma(_2388, cbModelParam._m0[19u].y, _2387 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_25_50_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_25_50_ladder_2;
        _1649 = frontier_phi_25_50_ladder_1;
        _1651 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_626, _627, _628), _1556);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _647) * ((_634 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_647 * _634)) * _618;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    float _1709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1722 = _1709 / _1721;
    float _1723 = _1713 / _1721;
    float _1724 = _1717 / _1721;
    float _1871;
    float _1872;
    float _1873;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1751 = ((uint(_1724 > cbSceneParam._m0[59u].y) + uint(_1724 > cbSceneParam._m0[59u].x)) + uint(_1724 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1752 = _1751 + 43u;
        uint _1760 = _1751 + 44u;
        uint _1768 = _1751 + 45u;
        uint _1776 = _1751 + 46u;
        float _1787 = fma(_1721, cbSceneParam._m0[_1752].w, fma(_1717, cbSceneParam._m0[_1752].z, fma(_1713, cbSceneParam._m0[_1752].y, _1709 * cbSceneParam._m0[_1752].x)));
        float _1791 = fma(_1721, cbSceneParam._m0[_1760].w, fma(_1717, cbSceneParam._m0[_1760].z, fma(_1713, cbSceneParam._m0[_1760].y, _1709 * cbSceneParam._m0[_1760].x)));
        float _1799 = fma(_1721, cbSceneParam._m0[_1776].w, fma(_1717, cbSceneParam._m0[_1776].z, fma(_1713, cbSceneParam._m0[_1776].y, _1709 * cbSceneParam._m0[_1776].x)));
        float _1804 = cbSceneParam._m0[33u].z * _1799;
        float _1806 = cbSceneParam._m0[33u].w * _1799;
        float _1809 = fma(_1721, cbSceneParam._m0[_1768].w, fma(_1717, cbSceneParam._m0[_1768].z, fma(_1713, cbSceneParam._m0[_1768].y, _1709 * cbSceneParam._m0[_1768].x))) / _1799;
        float _1857 = (cbSceneParam._m0[33u].x - sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724))) * cbSceneParam._m0[33u].y;
        float _4214 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1864 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1804 + _1787) / _1799, (_1806 + _1791) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 + _1787) / _1799, (_1791 - _1804) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 - _1804) / _1799, (_1791 - _1806) / _1799), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 - _1806) / _1799, (_1804 + _1791) / _1799), _1809), 0.0)).x), vec4(0.25)));
        _1871 = 1.0 - (_1864 * cbSceneParam._m0[34u].x);
        _1872 = 1.0 - (_1864 * cbSceneParam._m0[34u].y);
        _1873 = 1.0 - (_1864 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1871 = 1.0;
        _1872 = 1.0;
        _1873 = 1.0;
    }
    float _1937;
    float _1939;
    float _1941;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1925 = fma(_1721, cbSceneParam._m0[63u].w, fma(_1717, cbSceneParam._m0[63u].z, fma(_1713, cbSceneParam._m0[63u].y, _1709 * cbSceneParam._m0[63u].x)));
        float _1926 = fma(_1721, cbSceneParam._m0[60u].w, fma(_1717, cbSceneParam._m0[60u].z, fma(_1713, cbSceneParam._m0[60u].y, _1709 * cbSceneParam._m0[60u].x))) / _1925;
        float _1927 = fma(_1721, cbSceneParam._m0[61u].w, fma(_1717, cbSceneParam._m0[61u].z, fma(_1713, cbSceneParam._m0[61u].y, _1709 * cbSceneParam._m0[61u].x))) / _1925;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1926 >= cbSceneParam._m0[64u].x) && (_1927 >= cbSceneParam._m0[64u].y)) && (_1926 <= cbSceneParam._m0[64u].z)) && (_1927 <= cbSceneParam._m0[64u].w))
        {
            float _2066 = fma(_1721, cbSceneParam._m0[62u].w, fma(_1717, cbSceneParam._m0[62u].z, fma(_1713, cbSceneParam._m0[62u].y, _1709 * cbSceneParam._m0[62u].x))) / _1925;
            float _2070 = isnan(cbSceneParam._m0[41u].w) ? _2066 : (isnan(_2066) ? cbSceneParam._m0[41u].w : max(_2066, cbSceneParam._m0[41u].w));
            float _2113 = (cbSceneParam._m0[33u].x - sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724))) * cbSceneParam._m0[33u].y;
            float _4230 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
            float _2120 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1926, cbSceneParam._m0[33u].w + _1927), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1926, _1927 - cbSceneParam._m0[33u].z), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1926 - cbSceneParam._m0[33u].z, _1927 - cbSceneParam._m0[33u].w), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1926 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1927), _2070), 0.0)).x), vec4(0.25)));
            float _2124 = 1.0 - (_2120 * cbSceneParam._m0[34u].x);
            float _2125 = 1.0 - (_2120 * cbSceneParam._m0[34u].y);
            float _2126 = 1.0 - (_2120 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2126) ? _1873 : (isnan(_1873) ? _2126 : min(_1873, _2126));
            frontier_phi_37_36_ladder_1 = isnan(_2125) ? _1872 : (isnan(_1872) ? _2125 : min(_1872, _2125));
            frontier_phi_37_36_ladder_2 = isnan(_2124) ? _1871 : (isnan(_1871) ? _2124 : min(_1871, _2124));
        }
        else
        {
            frontier_phi_37_36_ladder = _1873;
            frontier_phi_37_36_ladder_1 = _1872;
            frontier_phi_37_36_ladder_2 = _1871;
        }
        _1937 = frontier_phi_37_36_ladder_2;
        _1939 = frontier_phi_37_36_ladder_1;
        _1941 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1937 = _1871;
        _1939 = _1872;
        _1941 = _1873;
    }
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1956 = _618 + (-1.0);
    float _1961 = (cbLight._m0[_1949].x * _1956) + 1.0;
    float _1962 = (cbLight._m0[_1949].y * _1956) + 1.0;
    float _1963 = (cbLight._m0[_1949].z * _1956) + 1.0;
    float _1964 = (cbLight._m0[_1949].w * _1956) + 1.0;
    uint _1965 = _1948 + 5u;
    float _1971 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1975 = _1948 + 4u;
    float _1985 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1989 = _1948 | 1u;
    float _2000 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_452, _453, _454));
    float _2003 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_452, _453, _454));
    float _4266 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _4277 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2008 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2010 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2017 = ((cbLight._m0[_1965].x * _1971) * _2010) + (((cbLight._m0[_1975].x * _1937) * _1985) * _2008);
    float _2018 = ((_1971 * cbLight._m0[_1965].y) * _2010) + (((cbLight._m0[_1975].y * _1939) * _1985) * _2008);
    float _2019 = ((_1971 * cbLight._m0[_1965].z) * _2010) + (((cbLight._m0[_1975].z * _1941) * _1985) * _2008);
    uvec4 _2023 = floatBitsToUint(cbLight._m0[_1948 + 12u]);
    bool _2025 = _2023.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2025)
    {
        _2127 = _2017;
        _2129 = _2018;
        _2131 = _2019;
    }
    else
    {
        uint _2135 = _1948 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_1948 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4288 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2154 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2017;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2018;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2019;
    }
    bool _2134 = _2023.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2134)
    {
        _2189 = _2127;
        _2191 = _2129;
        _2193 = _2131;
    }
    else
    {
        uint _2351 = _1948 + 7u;
        float _2367 = (dot(vec3(cbLight._m0[_1948 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4304 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2370 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2189 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2127;
        _2191 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2129;
        _2193 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2131;
    }
    uint _2196 = _1948 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _455) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_1948].x + _532;
    float _2212 = cbLight._m0[_1948].y + _533;
    float _2213 = cbLight._m0[_1948].z + _534;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1948].xyz));
    float _4320 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _2225 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2226 = dot(vec3(_452, _453, _454), vec3(_2218, _2219, _2220));
    float _4342 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2218, _2219, _2220));
    float _4353 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2250 = 1.0 - _2210;
    float _2261 = (0.5 / (((_2225 * ((_2224 * _2250) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2250) + _2210) * _2224))) * _2224;
    float _4364 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2277 = _1948 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _455) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_1989].x + _532;
    float _2291 = cbLight._m0[_1989].y + _533;
    float _2292 = cbLight._m0[_1989].z + _534;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1989].xyz));
    float _4375 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2304 = dot(vec3(_452, _453, _454), vec3(_2297, _2298, _2299));
    float _4386 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2297, _2298, _2299));
    float _4397 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2326 = 1.0 - _2289;
    float _2336 = (0.5 / (((_2225 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2326) + _2289) * _2303))) * _2303;
    float _4408 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2348 = (((_2325 * cbLight._m0[_2277].x) * _2338) * _1971) + ((((cbLight._m0[_2196].x * _1937) * _2249) * _2263) * _1985);
    float _2349 = (((_2325 * cbLight._m0[_2277].y) * _2338) * _1971) + ((((cbLight._m0[_2196].y * _1939) * _2249) * _2263) * _1985);
    float _2350 = (((_2325 * cbLight._m0[_2277].z) * _2338) * _1971) + ((((cbLight._m0[_2196].z * _1941) * _2249) * _2263) * _1985);
    float _2406;
    float _2408;
    float _2410;
    if (_2025)
    {
        _2406 = _2348;
        _2408 = _2349;
        _2410 = _2350;
    }
    else
    {
        uint _2412 = _1948 + 2u;
        uint _2416 = _1948 + 10u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _455) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _532;
        float _2433 = cbLight._m0[_2412].y + _533;
        float _2434 = cbLight._m0[_2412].z + _534;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2412].xyz));
        float _4419 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2446 = dot(vec3(_452, _453, _454), vec3(_2439, _2440, _2441));
        float _4430 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4441 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2468 = 1.0 - _2431;
        float _2478 = (0.5 / (((_2225 * ((_2445 * _2468) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2468) + _2431) * _2445))) * _2445;
        float _4452 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2406 = (((_2467 * cbLight._m0[_2416].x) * _2480) * _2481) + _2348;
        _2408 = (((_2467 * cbLight._m0[_2416].y) * _2480) * _2481) + _2349;
        _2410 = (((_2467 * cbLight._m0[_2416].z) * _2480) * _2481) + _2350;
    }
    float _2512;
    float _2514;
    float _2516;
    if (_2134)
    {
        _2512 = _2406;
        _2514 = _2408;
        _2516 = _2410;
    }
    else
    {
        uint _2523 = _1948 + 3u;
        uint _2527 = _1948 + 11u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _455) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _532;
        float _2544 = cbLight._m0[_2523].y + _533;
        float _2545 = cbLight._m0[_2523].z + _534;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2523].xyz));
        float _4468 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2557 = dot(vec3(_452, _453, _454), vec3(_2550, _2551, _2552));
        float _4479 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4490 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2579 = 1.0 - _2542;
        float _2589 = (0.5 / (((_2225 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2579) + _2542) * _2556))) * _2556;
        float _4501 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2512 = (((_2578 * cbLight._m0[_2527].x) * _2591) * _2592) + _2406;
        _2514 = (((_2578 * cbLight._m0[_2527].y) * _2591) * _2592) + _2408;
        _2516 = (((_2578 * cbLight._m0[_2527].z) * _2591) * _2592) + _2410;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1946.y == 0u)
    {
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.x;
        uint _2625 = uint((float(_2613.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2614))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2614)));
        float _2635 = (log2(_1724 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2636 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        uint _2639 = uint(isnan(14.0) ? _2636 : (isnan(_2636) ? 14.0 : min(_2636, 14.0)));
        uvec4 _2644 = texelFetch(g_lightClusterGridBuffer, int(((_2639 << 2u) + (_2625 << 6u)) >> 2u));
        uint _2645 = _2644.x;
        uint _2646 = _2613.z;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((((1u << ((_2646 >> 4u) & 15u)) + 4294967295u) & _2645) == 0u) || ((_2646 & 240u) == 0u))
        {
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
        }
        else
        {
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2919)
                {
                    frontier_phi_71_pred = _2908;
                    frontier_phi_71_pred_1 = _2907;
                    frontier_phi_71_pred_2 = _2906;
                    frontier_phi_71_pred_3 = _2905;
                    frontier_phi_71_pred_4 = _2904;
                    frontier_phi_71_pred_5 = _2903;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2918;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2909 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _1722;
                        float _3115 = _3074.y - _1723;
                        float _3116 = _3074.z - _1724;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_574, _577, _580), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4527 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _1722;
                        float _3150 = (-0.0) - _1723;
                        float _3151 = (-0.0) - _1724;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3165 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3166 = 1.0 - _634;
                        float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                        float _3174 = _3173 * _3173;
                        float _3175 = _3174 * _3174;
                        float _3176 = _3156 + _3121;
                        float _3177 = _3157 + _3122;
                        float _3178 = _3158 + _3123;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3186 = dot(vec3(_574, _577, _580), vec3(_3156, _3157, _3158));
                        float _4543 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3190 = dot(vec3(_574, _577, _580), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                        float _4554 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                        float _3198 = _3134 * _3174;
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3124) + _3199;
                        float _4565 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3204 = 1.0 - _3174;
                        float _3214 = (0.5 / (((_3203 * ((_3189 * _3204) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3174) * _3189))) * _3203;
                        float _4576 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3225 = (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3197 * _3197) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2978 = (_3145 * _3093.x) + _3051;
                        _2979 = (_3145 * _3093.y) + _3052;
                        _2980 = (_3145 * _3093.z) + _3053;
                        _2975 = (_3225 * _3110.x) + _3048;
                        _2976 = (_3225 * _3110.y) + _3049;
                        _2977 = (_3225 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_71_pred = _2980;
                    frontier_phi_71_pred_1 = _2979;
                    frontier_phi_71_pred_2 = _2978;
                    frontier_phi_71_pred_3 = _2977;
                    frontier_phi_71_pred_4 = _2976;
                    frontier_phi_71_pred_5 = _2975;
                }
                _2761 = frontier_phi_71_pred;
                _2759 = frontier_phi_71_pred_1;
                _2757 = frontier_phi_71_pred_2;
                _2755 = frontier_phi_71_pred_3;
                _2753 = frontier_phi_71_pred_4;
                _2751 = frontier_phi_71_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2751;
                    _2904 = _2753;
                    _2905 = _2755;
                    _2906 = _2757;
                    _2907 = _2759;
                    _2908 = _2761;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
        }
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.z;
        uint _2767 = (_2765 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2767) & _2645) == 0u)
        {
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
            float _2897 = _2896 * _1722;
            float _2898 = _2896 * _1723;
            float _2899 = _2896 * _1724;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2767 < ((_2765 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3031 = _2750;
                float _3032 = _2752;
                float _3033 = _2754;
                float _3034 = _2756;
                float _3035 = _2758;
                float _3036 = _2760;
                uint _3037 = _2767;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3047)
                    {
                        frontier_phi_82_pred = _3036;
                        frontier_phi_82_pred_1 = _3035;
                        frontier_phi_82_pred_2 = _3034;
                        frontier_phi_82_pred_3 = _3033;
                        frontier_phi_82_pred_4 = _3032;
                        frontier_phi_82_pred_5 = _3031;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3252 = _3031;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        uint _3258 = _3046;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3343;
                        float _3390;
                        bool _3391;
                        for (;;)
                        {
                            uint _3269 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3330 = (_3269 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3346 = (_3269 * 40u) + 24u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3365 = (_3269 * 40u) + 28u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            _3390 = fma(_1724, _3378.z, fma(_1723, _3378.y, _3378.x * _1722)) + _3378.w;
                            _3391 = !((fma(_1724, _3359.z, fma(_1723, _3359.y, _3359.x * _1722)) + _3359.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3391)
                            {
                                float _3418 = _3284.x - _1722;
                                float _3419 = _3284.y - _1723;
                                float _3420 = _3284.z - _1724;
                                float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                                float _3424 = inversesqrt(_3421);
                                float _3425 = _3424 * _3418;
                                float _3426 = _3424 * _3419;
                                float _3427 = _3424 * _3420;
                                float _3431 = 1.0 - (_3421 / (_3285 * _3285));
                                float _4587 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3436 = sqrt(_3421) * _3300.w;
                                float _3438 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                                float _3439 = _3438 * _3438;
                                float _3442 = ((1.0 - _3439) * dot(vec3(_3425, _3426, _3427), vec3(_574, _577, _580))) + _3439;
                                float _3445 = _3436 * _3436;
                                float _3449 = (fma(_1724, _3327.z, fma(_1723, _3327.y, _3327.x * _1722)) + _3327.w) / _3390;
                                float _3450 = (fma(_1724, _3343.z, fma(_1723, _3343.y, _3343.x * _1722)) + _3343.w) / _3390;
                                float _3454 = 1.0 - dot(vec2(_3449, _3450), vec2(_3449, _3450));
                                float _4603 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3456 = _3455 * (((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3432) / ((_3445 * 0.699999988079071044921875) + 1.0));
                                float _3468 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                                float _3469 = 1.0 - _634;
                                float _3476 = sqrt(1.0 - ((1.0 - (_3469 * _3469)) * (1.0 - (_3468 * _3468))));
                                float _3477 = _3476 * _3476;
                                float _3478 = _3477 * _3477;
                                float _3479 = _3425 - _2897;
                                float _3480 = _3426 - _2898;
                                float _3481 = _3427 - _2899;
                                float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                                float _3489 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4614 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3493 = dot(vec3(_574, _577, _580), vec3(_3485 * _3479, _3485 * _3480, _3485 * _3481));
                                float _4625 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3500 = ((_3496 * _3496) * (_3478 + (-1.0))) + 1.0;
                                float _3501 = _3438 * _3477;
                                float _3502 = _3501 * _3501;
                                float _3508 = ((1.0 - _3502) * dot(vec3(_574, _577, _580), vec3(_3425, _3426, _3427))) + _3502;
                                float _4636 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3510 = 1.0 - _3477;
                                float _3520 = (0.5 / (((_3509 * ((_3492 * _3510) + _3477)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3477) * _3492))) * _3509;
                                float _4647 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3530 = (_3455 * _3432) * (((_3478 * 3.1415927410125732421875) * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) / ((_3500 * _3500) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3456 * _3300.z;
                                frontier_phi_88_pred_1 = _3456 * _3300.y;
                                frontier_phi_88_pred_2 = _3456 * _3300.x;
                                frontier_phi_88_pred_3 = _3530 * _3312.z;
                                frontier_phi_88_pred_4 = _3530 * _3312.y;
                                frontier_phi_88_pred_5 = _3530 * _3312.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_88_pred;
                            _3538 = frontier_phi_88_pred_1;
                            _3537 = frontier_phi_88_pred_2;
                            _3536 = frontier_phi_88_pred_3;
                            _3535 = frontier_phi_88_pred_4;
                            _3534 = frontier_phi_88_pred_5;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3244;
                        frontier_phi_82_pred_1 = _3243;
                        frontier_phi_82_pred_2 = _3242;
                        frontier_phi_82_pred_3 = _3241;
                        frontier_phi_82_pred_4 = _3240;
                        frontier_phi_82_pred_5 = _3239;
                    }
                    _2882 = frontier_phi_82_pred;
                    _2880 = frontier_phi_82_pred_1;
                    _2878 = frontier_phi_82_pred_2;
                    _2876 = frontier_phi_82_pred_3;
                    _2874 = frontier_phi_82_pred_4;
                    _2872 = frontier_phi_82_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2872;
                        _3032 = _2874;
                        _3033 = _2876;
                        _3034 = _2878;
                        _3035 = _2880;
                        _3036 = _2882;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2878;
                frontier_phi_63_64_ladder_1 = _2882;
                frontier_phi_63_64_ladder_2 = _2880;
                frontier_phi_63_64_ladder_3 = _2876;
                frontier_phi_63_64_ladder_4 = _2874;
                frontier_phi_63_64_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_63_64_ladder = _2756;
                frontier_phi_63_64_ladder_1 = _2760;
                frontier_phi_63_64_ladder_2 = _2758;
                frontier_phi_63_64_ladder_3 = _2754;
                frontier_phi_63_64_ladder_4 = _2752;
                frontier_phi_63_64_ladder_5 = _2750;
            }
            _2871 = frontier_phi_63_64_ladder_5;
            _2873 = frontier_phi_63_64_ladder_4;
            _2875 = frontier_phi_63_64_ladder_3;
            _2877 = frontier_phi_63_64_ladder;
            _2879 = frontier_phi_63_64_ladder_2;
            _2881 = frontier_phi_63_64_ladder_1;
        }
        float _2886 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2658 = (_2886 * _2877) + _2189;
        _2660 = (_2886 * _2879) + _2191;
        _2662 = (_2886 * _2881) + _2193;
        _2664 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2512;
        _2666 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2514;
        _2668 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2516;
    }
    else
    {
        _2658 = _2189;
        _2660 = _2191;
        _2662 = _2193;
        _2664 = _2512;
        _2666 = _2514;
        _2668 = _2516;
    }
    uint _2674 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _4663 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4674 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4685 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2705 = (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2658 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _618))) + ((_2664 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + (((_295 * cbMtdParam._m0[11u].x) * (_382.x + _367.x)) * cbInstanceData._m0[_2674].x);
    float _2707 = ((((_295 * cbMtdParam._m0[11u].y) * (_382.y + _367.y)) * cbInstanceData._m0[_2674].y) + ((_2666 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2660 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _618)));
    float _2709 = ((((_295 * cbMtdParam._m0[11u].z) * (_382.z + _367.z)) * cbInstanceData._m0[_2674].z) + ((_2668 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2662 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _618)));
    float _2710 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2711 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2712 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    uint _2713 = _593 + 6u;
    float _2721 = _553 / cbSceneParam._m0[86u].x;
    float _2722 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2775 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2776 = _2775 / _474;
        float _2787 = _2776 * _525;
        float _2788 = _526 * _2776;
        float _2789 = (-0.0) - _2788;
        float _2791 = _2776 * _527;
        float _2793 = (cbSceneParam._m0[77u].w * _2789) / _2775;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2788;
        float _2801 = sqrt(((_2787 * _2787) + (_2788 * _2788)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2775)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2988;
        if (abs((_2789 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2988 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2934 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2988 = ((abs(_2801 / _2789) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2811 * _2943) - exp2(_2811 * _2944)) * _2932))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _2990 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _2999 = exp2((_2988 * (-1.44269502162933349609375)) * (1.0 - _2990.w));
        float _3000 = log2(_2999);
        float _3016 = log2(_2741);
        _2813 = (exp2(_3016 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].x)) * _2990.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2815 = (exp2(_3016 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].y)) * _2990.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2817 = (exp2(_3016 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].z)) * _2990.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2819 = _2999 * _2741;
    }
    else
    {
        _2813 = _2738;
        _2815 = _2739;
        _2817 = _2740;
        _2819 = _2741;
    }
    bool _3026;
    vec4 _2829;
    vec4 _2851;
    float _2853;
    float _2857;
    float _2858;
    float _2859;
    float _2860;
    bool _2870;
    for (;;)
    {
        _2829 = cbMatDynParam._m0[0u];
        float _2831 = roundEven(_2829.y);
        bool _2832 = _2831 == 3.0;
        float _2833 = log2(_2819);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2710;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2711;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2712;
        float _2849 = _541 + (-0.5);
        _2851 = cbMtdParam._m0[1u];
        _2853 = _2851.y * _2849;
        float _2856 = (_2831 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2857 = _2856 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2813)));
        _2858 = _2856 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
        _2859 = _2856 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
        _2860 = _2849 * 0.999000012874603271484375;
        _2870 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2870)
        {
            if ((cbInstanceData._m0[_593 + 7u].x + _2860) < 0.5)
            {
                _3026 = true;
                break;
            }
        }
        uint _2967 = _594 + uint(_2829.w);
        if ((cbInstanceData._m0[_2967].w < 1.0) && ((cbInstanceData._m0[_2967].w + _2860) < 0.5))
        {
            _3026 = true;
            break;
        }
        if ((_2853 + 1.0) < _2851.x)
        {
            _3026 = true;
            break;
        }
        _3026 = false;
        break;
    }
    float _3230;
    if (_3026)
    {
        discard_state = true;
        _3230 = 0.0;
    }
    else
    {
        _3230 = cbInstanceData._m0[_2713].w;
    }
    SV_Target.x = _2857;
    SV_Target.y = _2858;
    SV_Target.z = _2859;
    SV_Target.w = _3230;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
    discard_exit();
}


