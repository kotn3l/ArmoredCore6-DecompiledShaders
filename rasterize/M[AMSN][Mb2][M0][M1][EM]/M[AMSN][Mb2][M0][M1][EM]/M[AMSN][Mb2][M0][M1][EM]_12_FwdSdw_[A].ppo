#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _848;
float _3503;
float _3504;
float _3505;
float _3506;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _251 = _247.z;
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3515 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))));
    float _267 = fma(_264, _197 * NORMAL.x, fma(_257, _204 * TANGENT.x, (_190 * _182) * _255));
    float _270 = fma(_264, _197 * NORMAL.y, fma(_257, _204 * TANGENT.y, (_190 * _183) * _255));
    float _273 = fma(_264, _197 * NORMAL.z, fma(_257, _204 * TANGENT.z, (_190 * _184) * _255));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _3526 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _281 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3548 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3559 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _369 = _367.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _527 = sqrt(((_353 * _353) + (_354 * _354)) + (_355 * _355));
        float _533 = (cbMatDynParam._m0[5u].x * _527) + cbMatDynParam._m0[5u].y;
        float _3570 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        float _534 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _538 = (cbMatDynParam._m0[5u].z * _527) + cbMatDynParam._m0[5u].w;
        float _3581 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) - _534)) + _534) < ((_369 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _402 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _405 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _408 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _421 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _421 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3592 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _447 = _444.x * TEXCOORD_3.w;
    float _448 = dot(vec3(_278, _279, _280), vec3(_360, _361, _362));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _278) - _360;
    float _456 = (_451 * _279) - _361;
    float _457 = (_451 * _280) - _362;
    float _461 = abs(dot(vec3(_360, _361, _362), vec3(_278, _279, _280)));
    float _3625 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_281);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _576 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _580 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _605 = _508 + _278;
        float _606 = _512 + _279;
        float _607 = _516 + _280;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_278, _279, _280), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3673 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_278, _279, _280), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3706 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_278, _279, _280), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3739 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _895 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _899 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _922 = _508 + _278;
        float _923 = _512 + _279;
        float _924 = _516 + _280;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_278, _279, _280), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3802 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_278, _279, _280), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3835 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_278, _279, _280), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3868 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = _848;
        _1170 = _848;
        _1171 = _848;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _861)) + _861;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _455 * 0.5;
    float _1229 = _456 * 0.5;
    float _1230 = _457 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_847, _851, _854, _857));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_849, _852, _855, _858));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _853, _856, _859));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _281);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1360 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1363 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1391 = frontier_phi_17_15_ladder;
        }
        float _1564;
        if (_1360 > 0.0)
        {
            _1564 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1564 = frontier_phi_26_22_ladder;
        }
        float _1860;
        if (_1363 > 0.0)
        {
            _1860 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1860 = frontier_phi_38_33_ladder;
        }
        float _1862 = isnan(_1564) ? _1391 : (isnan(_1391) ? _1564 : min(_1391, _1564));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1357) + _1346;
        float _1868 = (_1863 * _1360) + _1350;
        float _1869 = (_1863 * _1363) + _1354;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_16_38_ladder = _2014.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2014.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2014.x * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_16_38_ladder_2;
        _1381 = frontier_phi_16_38_ladder_1;
        _1383 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _281);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1458 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1461 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1569;
        if (_1455 > 0.0)
        {
            _1569 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1569 = frontier_phi_28_24_ladder;
        }
        float _1887;
        if (_1458 > 0.0)
        {
            _1887 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1887 = frontier_phi_40_35_ladder;
        }
        float _2214;
        if (_1461 > 0.0)
        {
            _2214 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2214 = frontier_phi_50_47_ladder;
        }
        float _2216 = isnan(_1887) ? _1569 : (isnan(_1569) ? _1887 : min(_1569, _1887));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1455) + _1444;
        float _2222 = (_2217 * _1458) + _1448;
        float _2223 = (_2217 * _1461) + _1452;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_25_50_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_25_50_ladder_2;
        _1482 = frontier_phi_25_50_ladder_1;
        _1484 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1388);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1496 = ((((1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_476 * _463)) * _447;
    float _1497 = _1496 * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1498 = _1496 * ((cbModelParam._m0[1u].w * (_1482 - _1381)) + _1381);
    float _1499 = _1496 * ((cbModelParam._m0[1u].w * (_1484 - _1383)) + _1383);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1556 = _1543 / _1555;
    float _1557 = _1547 / _1555;
    float _1558 = _1551 / _1555;
    float _1705;
    float _1706;
    float _1707;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1585 = ((uint(_1558 > cbSceneParam._m0[59u].y) + uint(_1558 > cbSceneParam._m0[59u].x)) + uint(_1558 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1586 = _1585 + 43u;
        uint _1594 = _1585 + 44u;
        uint _1602 = _1585 + 45u;
        uint _1610 = _1585 + 46u;
        float _1621 = fma(_1555, cbSceneParam._m0[_1586].w, fma(_1551, cbSceneParam._m0[_1586].z, fma(_1547, cbSceneParam._m0[_1586].y, _1543 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1555, cbSceneParam._m0[_1594].w, fma(_1551, cbSceneParam._m0[_1594].z, fma(_1547, cbSceneParam._m0[_1594].y, _1543 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1555, cbSceneParam._m0[_1610].w, fma(_1551, cbSceneParam._m0[_1610].z, fma(_1547, cbSceneParam._m0[_1610].y, _1543 * cbSceneParam._m0[_1610].x)));
        float _1638 = cbSceneParam._m0[33u].z * _1633;
        float _1640 = cbSceneParam._m0[33u].w * _1633;
        float _1643 = fma(_1555, cbSceneParam._m0[_1602].w, fma(_1551, cbSceneParam._m0[_1602].z, fma(_1547, cbSceneParam._m0[_1602].y, _1543 * cbSceneParam._m0[_1602].x))) / _1633;
        float _1691 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
        float _3994 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1698 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 + _1621) / _1633, (_1640 + _1625) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1621) / _1633, (_1625 - _1638) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1638) / _1633, (_1625 - _1640) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1640) / _1633, (_1638 + _1625) / _1633), _1643), 0.0)).x), vec4(0.25)));
        _1705 = 1.0 - (_1698 * cbSceneParam._m0[34u].x);
        _1706 = 1.0 - (_1698 * cbSceneParam._m0[34u].y);
        _1707 = 1.0 - (_1698 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1705 = 1.0;
        _1706 = 1.0;
        _1707 = 1.0;
    }
    float _1771;
    float _1773;
    float _1775;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1759 = fma(_1555, cbSceneParam._m0[63u].w, fma(_1551, cbSceneParam._m0[63u].z, fma(_1547, cbSceneParam._m0[63u].y, _1543 * cbSceneParam._m0[63u].x)));
        float _1760 = fma(_1555, cbSceneParam._m0[60u].w, fma(_1551, cbSceneParam._m0[60u].z, fma(_1547, cbSceneParam._m0[60u].y, _1543 * cbSceneParam._m0[60u].x))) / _1759;
        float _1761 = fma(_1555, cbSceneParam._m0[61u].w, fma(_1551, cbSceneParam._m0[61u].z, fma(_1547, cbSceneParam._m0[61u].y, _1543 * cbSceneParam._m0[61u].x))) / _1759;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1760 >= cbSceneParam._m0[64u].x) && (_1761 >= cbSceneParam._m0[64u].y)) && (_1760 <= cbSceneParam._m0[64u].z)) && (_1761 <= cbSceneParam._m0[64u].w))
        {
            float _1900 = fma(_1555, cbSceneParam._m0[62u].w, fma(_1551, cbSceneParam._m0[62u].z, fma(_1547, cbSceneParam._m0[62u].y, _1543 * cbSceneParam._m0[62u].x))) / _1759;
            float _1904 = isnan(cbSceneParam._m0[41u].w) ? _1900 : (isnan(_1900) ? cbSceneParam._m0[41u].w : max(_1900, cbSceneParam._m0[41u].w));
            float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
            float _4010 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
            float _1954 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1760, cbSceneParam._m0[33u].w + _1761), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1760, _1761 - cbSceneParam._m0[33u].z), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].z, _1761 - cbSceneParam._m0[33u].w), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1761), _1904), 0.0)).x), vec4(0.25)));
            float _1958 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
            float _1959 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
            float _1960 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_37_36_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_37_36_ladder_2 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
        }
        else
        {
            frontier_phi_37_36_ladder = _1707;
            frontier_phi_37_36_ladder_1 = _1706;
            frontier_phi_37_36_ladder_2 = _1705;
        }
        _1771 = frontier_phi_37_36_ladder_2;
        _1773 = frontier_phi_37_36_ladder_1;
        _1775 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1771 = _1705;
        _1773 = _1706;
        _1775 = _1707;
    }
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_421 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _447 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_278, _279, _280));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_278, _279, _280));
    float _4046 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4057 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1799].x * _1805) * _1844) + (((cbLight._m0[_1809].x * _1771) * _1819) * _1842);
    float _1852 = ((_1805 * cbLight._m0[_1799].y) * _1844) + (((cbLight._m0[_1809].y * _1773) * _1819) * _1842);
    float _1853 = ((_1805 * cbLight._m0[_1799].z) * _1844) + (((cbLight._m0[_1809].z * _1775) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1859)
    {
        _1961 = _1851;
        _1963 = _1852;
        _1965 = _1853;
    }
    else
    {
        uint _1969 = _1782 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4068 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1988 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1851;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1852;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1853;
    }
    bool _1968 = _1857.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1968)
    {
        _2023 = _1961;
        _2025 = _1963;
        _2027 = _1965;
    }
    else
    {
        uint _2185 = _1782 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4084 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2204 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2023 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1961;
        _2025 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1963;
        _2027 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1965;
    }
    uint _2030 = _1782 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _281) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1782].x + _360;
    float _2046 = cbLight._m0[_1782].y + _361;
    float _2047 = cbLight._m0[_1782].z + _362;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1782].xyz));
    float _4100 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2059 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2060 = dot(vec3(_278, _279, _280), vec3(_2052, _2053, _2054));
    float _4122 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2052, _2053, _2054));
    float _4133 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2084 = 1.0 - _2044;
    float _2095 = (0.5 / (((_2059 * ((_2058 * _2084) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2084) + _2044) * _2058))) * _2058;
    float _4144 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2111 = _1782 + 9u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _281) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1823].x + _360;
    float _2125 = cbLight._m0[_1823].y + _361;
    float _2126 = cbLight._m0[_1823].z + _362;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1823].xyz));
    float _4155 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2138 = dot(vec3(_278, _279, _280), vec3(_2131, _2132, _2133));
    float _4166 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2131, _2132, _2133));
    float _4177 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2123 * _2123;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2123;
    float _2170 = (0.5 / (((_2059 * ((_2137 * _2160) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2160) + _2123) * _2137))) * _2137;
    float _4188 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    float _2182 = (((_2159 * cbLight._m0[_2111].x) * _2172) * _1805) + ((((cbLight._m0[_2030].x * _1771) * _2083) * _2097) * _1819);
    float _2183 = (((_2159 * cbLight._m0[_2111].y) * _2172) * _1805) + ((((cbLight._m0[_2030].y * _1773) * _2083) * _2097) * _1819);
    float _2184 = (((_2159 * cbLight._m0[_2111].z) * _2172) * _1805) + ((((cbLight._m0[_2030].z * _1775) * _2083) * _2097) * _1819);
    float _2240;
    float _2242;
    float _2244;
    if (_1859)
    {
        _2240 = _2182;
        _2242 = _2183;
        _2244 = _2184;
    }
    else
    {
        uint _2246 = _1782 + 2u;
        uint _2250 = _1782 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _281) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _360;
        float _2267 = cbLight._m0[_2246].y + _361;
        float _2268 = cbLight._m0[_2246].z + _362;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2246].xyz));
        float _4199 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2280 = dot(vec3(_278, _279, _280), vec3(_2273, _2274, _2275));
        float _4210 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4221 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2302 = 1.0 - _2265;
        float _2312 = (0.5 / (((_2059 * ((_2279 * _2302) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2302) + _2265) * _2279))) * _2279;
        float _4232 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2240 = (((_2301 * cbLight._m0[_2250].x) * _2314) * _2315) + _2182;
        _2242 = (((_2301 * cbLight._m0[_2250].y) * _2314) * _2315) + _2183;
        _2244 = (((_2301 * cbLight._m0[_2250].z) * _2314) * _2315) + _2184;
    }
    float _2346;
    float _2348;
    float _2350;
    if (_1968)
    {
        _2346 = _2240;
        _2348 = _2242;
        _2350 = _2244;
    }
    else
    {
        uint _2357 = _1782 + 3u;
        uint _2361 = _1782 + 11u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _281) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _360;
        float _2378 = cbLight._m0[_2357].y + _361;
        float _2379 = cbLight._m0[_2357].z + _362;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2357].xyz));
        float _4248 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2391 = dot(vec3(_278, _279, _280), vec3(_2384, _2385, _2386));
        float _4259 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4270 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2059 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2413) + _2376) * _2390))) * _2390;
        float _4281 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2346 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2240;
        _2348 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2242;
        _2350 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2244;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1780.y == 0u)
    {
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.x;
        uint _2459 = uint((float(_2447.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2448))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2448)));
        float _2469 = (log2(_1558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2470 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        uint _2473 = uint(isnan(14.0) ? _2470 : (isnan(_2470) ? 14.0 : min(_2470, 14.0)));
        uvec4 _2478 = texelFetch(g_lightClusterGridBuffer, int(((_2473 << 2u) + (_2459 << 6u)) >> 2u));
        uint _2479 = _2478.x;
        uint _2480 = _2447.z;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((((1u << ((_2480 >> 4u) & 15u)) + 4294967295u) & _2479) == 0u) || ((_2480 & 240u) == 0u))
        {
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
        }
        else
        {
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2731)
                {
                    frontier_phi_71_pred = _2720;
                    frontier_phi_71_pred_1 = _2719;
                    frontier_phi_71_pred_2 = _2718;
                    frontier_phi_71_pred_3 = _2717;
                    frontier_phi_71_pred_4 = _2716;
                    frontier_phi_71_pred_5 = _2715;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _1556;
                        float _2927 = _2886.y - _1557;
                        float _2928 = _2886.z - _1558;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_402, _405, _408), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4307 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _1556;
                        float _2962 = (-0.0) - _1557;
                        float _2963 = (-0.0) - _1558;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2977 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _463;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2968 + _2933;
                        float _2989 = _2969 + _2934;
                        float _2990 = _2970 + _2935;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_402, _405, _408), vec3(_2968, _2969, _2970));
                        float _4323 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3002 = dot(vec3(_402, _405, _408), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4334 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2946 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2936) + _3011;
                        float _4345 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4356 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3009 * _3009) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2790 = (_2957 * _2905.x) + _2863;
                        _2791 = (_2957 * _2905.y) + _2864;
                        _2792 = (_2957 * _2905.z) + _2865;
                        _2787 = (_3037 * _2922.x) + _2860;
                        _2788 = (_3037 * _2922.y) + _2861;
                        _2789 = (_3037 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_71_pred = _2792;
                    frontier_phi_71_pred_1 = _2791;
                    frontier_phi_71_pred_2 = _2790;
                    frontier_phi_71_pred_3 = _2789;
                    frontier_phi_71_pred_4 = _2788;
                    frontier_phi_71_pred_5 = _2787;
                }
                _2573 = frontier_phi_71_pred;
                _2571 = frontier_phi_71_pred_1;
                _2569 = frontier_phi_71_pred_2;
                _2567 = frontier_phi_71_pred_3;
                _2565 = frontier_phi_71_pred_4;
                _2563 = frontier_phi_71_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2563;
                    _2716 = _2565;
                    _2717 = _2567;
                    _2718 = _2569;
                    _2719 = _2571;
                    _2720 = _2573;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
        }
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.z;
        uint _2579 = (_2577 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2579) & _2479) == 0u)
        {
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
            float _2709 = _2708 * _1556;
            float _2710 = _2708 * _1557;
            float _2711 = _2708 * _1558;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2579 < ((_2577 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2562;
                float _2844 = _2564;
                float _2845 = _2566;
                float _2846 = _2568;
                float _2847 = _2570;
                float _2848 = _2572;
                uint _2849 = _2579;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2859)
                    {
                        frontier_phi_82_pred = _2848;
                        frontier_phi_82_pred_1 = _2847;
                        frontier_phi_82_pred_2 = _2846;
                        frontier_phi_82_pred_3 = _2845;
                        frontier_phi_82_pred_4 = _2844;
                        frontier_phi_82_pred_5 = _2843;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3064 = _2843;
                        float _3065 = _2844;
                        float _3066 = _2845;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        uint _3070 = _2858;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3140;
                        vec4 _3156;
                        float _3203;
                        bool _3204;
                        for (;;)
                        {
                            uint _3081 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3127 = (_3081 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3081 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3081 * 40u) + 24u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3178 = (_3081 * 40u) + 28u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3203 = fma(_1558, _3191.z, fma(_1557, _3191.y, _3191.x * _1556)) + _3191.w;
                            _3204 = !((fma(_1558, _3172.z, fma(_1557, _3172.y, _3172.x * _1556)) + _3172.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3204)
                            {
                                float _3231 = _3096.x - _1556;
                                float _3232 = _3096.y - _1557;
                                float _3233 = _3096.z - _1558;
                                float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                                float _3237 = inversesqrt(_3234);
                                float _3238 = _3237 * _3231;
                                float _3239 = _3237 * _3232;
                                float _3240 = _3237 * _3233;
                                float _3244 = 1.0 - (_3234 / (_3097 * _3097));
                                float _4367 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3249 = sqrt(_3234) * _3112.w;
                                float _3251 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                                float _3252 = _3251 * _3251;
                                float _3255 = ((1.0 - _3252) * dot(vec3(_3238, _3239, _3240), vec3(_402, _405, _408))) + _3252;
                                float _3258 = _3249 * _3249;
                                float _3262 = (fma(_1558, _3140.z, fma(_1557, _3140.y, _3140.x * _1556)) + _3140.w) / _3203;
                                float _3263 = (fma(_1558, _3156.z, fma(_1557, _3156.y, _3156.x * _1556)) + _3156.w) / _3203;
                                float _3267 = 1.0 - dot(vec2(_3262, _3263), vec2(_3262, _3263));
                                float _4383 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3269 = _3268 * (((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3245) / ((_3258 * 0.699999988079071044921875) + 1.0));
                                float _3281 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                                float _3282 = 1.0 - _463;
                                float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                                float _3290 = _3289 * _3289;
                                float _3291 = _3290 * _3290;
                                float _3292 = _3238 - _2709;
                                float _3293 = _3239 - _2710;
                                float _3294 = _3240 - _2711;
                                float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                                float _3302 = dot(vec3(_402, _405, _408), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4394 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3306 = dot(vec3(_402, _405, _408), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                                float _4405 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                                float _3314 = _3251 * _3290;
                                float _3315 = _3314 * _3314;
                                float _3321 = ((1.0 - _3315) * dot(vec3(_402, _405, _408), vec3(_3238, _3239, _3240))) + _3315;
                                float _4416 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3323 = 1.0 - _3290;
                                float _3333 = (0.5 / (((_3322 * ((_3305 * _3323) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3290) * _3305))) * _3322;
                                float _4427 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3343 = (_3268 * _3245) * (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3313 * _3313) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3269 * _3112.z;
                                frontier_phi_88_pred_1 = _3269 * _3112.y;
                                frontier_phi_88_pred_2 = _3269 * _3112.x;
                                frontier_phi_88_pred_3 = _3343 * _3124.z;
                                frontier_phi_88_pred_4 = _3343 * _3124.y;
                                frontier_phi_88_pred_5 = _3343 * _3124.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3352 = frontier_phi_88_pred;
                            _3351 = frontier_phi_88_pred_1;
                            _3350 = frontier_phi_88_pred_2;
                            _3349 = frontier_phi_88_pred_3;
                            _3348 = frontier_phi_88_pred_4;
                            _3347 = frontier_phi_88_pred_5;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3056;
                        frontier_phi_82_pred_1 = _3055;
                        frontier_phi_82_pred_2 = _3054;
                        frontier_phi_82_pred_3 = _3053;
                        frontier_phi_82_pred_4 = _3052;
                        frontier_phi_82_pred_5 = _3051;
                    }
                    _2694 = frontier_phi_82_pred;
                    _2692 = frontier_phi_82_pred_1;
                    _2690 = frontier_phi_82_pred_2;
                    _2688 = frontier_phi_82_pred_3;
                    _2686 = frontier_phi_82_pred_4;
                    _2684 = frontier_phi_82_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2690;
                frontier_phi_63_64_ladder_1 = _2694;
                frontier_phi_63_64_ladder_2 = _2692;
                frontier_phi_63_64_ladder_3 = _2688;
                frontier_phi_63_64_ladder_4 = _2686;
                frontier_phi_63_64_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_63_64_ladder = _2568;
                frontier_phi_63_64_ladder_1 = _2572;
                frontier_phi_63_64_ladder_2 = _2570;
                frontier_phi_63_64_ladder_3 = _2566;
                frontier_phi_63_64_ladder_4 = _2564;
                frontier_phi_63_64_ladder_5 = _2562;
            }
            _2683 = frontier_phi_63_64_ladder_5;
            _2685 = frontier_phi_63_64_ladder_4;
            _2687 = frontier_phi_63_64_ladder_3;
            _2689 = frontier_phi_63_64_ladder;
            _2691 = frontier_phi_63_64_ladder_2;
            _2693 = frontier_phi_63_64_ladder_1;
        }
        float _2698 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2492 = (_2698 * _2689) + _2023;
        _2494 = (_2698 * _2691) + _2025;
        _2496 = (_2698 * _2693) + _2027;
        _2498 = ((_2683 * 0.039999999105930328369140625) * _2698) + _2346;
        _2500 = ((_2685 * 0.039999999105930328369140625) * _2698) + _2348;
        _2502 = ((_2687 * 0.039999999105930328369140625) * _2698) + _2350;
    }
    else
    {
        _2492 = _2023;
        _2494 = _2025;
        _2496 = _2027;
        _2498 = _2346;
        _2500 = _2348;
        _2502 = _2350;
    }
    float _4443 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4454 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4465 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _2519 = ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2492 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _447))) + ((_2498 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2494 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447))) + ((_2500 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2496 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _447))) + ((_2502 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2522 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    uint _2525 = _421 + 6u;
    float _2533 = _381 / cbSceneParam._m0[86u].x;
    float _2534 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2587 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2588 = _2587 / _300;
        float _2599 = _2588 * _353;
        float _2600 = _354 * _2588;
        float _2601 = (-0.0) - _2600;
        float _2603 = _2588 * _355;
        float _2605 = (cbSceneParam._m0[77u].w * _2601) / _2587;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2600;
        float _2613 = sqrt(((_2599 * _2599) + (_2600 * _2600)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2587)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2601 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2746 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2800 = ((abs(_2613 / _2601) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2623 * _2755) - exp2(_2623 * _2756)) * _2744))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2553);
        _2625 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2627 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2629 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2631 = _2811 * _2553;
    }
    else
    {
        _2625 = _2550;
        _2627 = _2551;
        _2629 = _2552;
        _2631 = _2553;
    }
    bool _2838;
    vec4 _2641;
    vec4 _2663;
    float _2665;
    float _2669;
    float _2670;
    float _2671;
    float _2672;
    bool _2682;
    for (;;)
    {
        _2641 = cbMatDynParam._m0[0u];
        float _2643 = roundEven(_2641.y);
        bool _2644 = _2643 == 3.0;
        float _2645 = log2(_2631);
        float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * _2522;
        float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * _2523;
        float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * _2524;
        float _2661 = _369 + (-0.5);
        _2663 = cbMtdParam._m0[1u];
        _2665 = _2663.y * _2661;
        float _2668 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2669 = _2668 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
        _2670 = _2668 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
        _2671 = _2668 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
        _2672 = _2661 * 0.999000012874603271484375;
        _2682 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2682)
        {
            if ((cbInstanceData._m0[_421 + 7u].x + _2672) < 0.5)
            {
                _2838 = true;
                break;
            }
        }
        uint _2779 = _423 + uint(_2641.w);
        if ((cbInstanceData._m0[_2779].w < 1.0) && ((cbInstanceData._m0[_2779].w + _2672) < 0.5))
        {
            _2838 = true;
            break;
        }
        if ((_2665 + 1.0) < _2663.x)
        {
            _2838 = true;
            break;
        }
        _2838 = false;
        break;
    }
    float _3042;
    if (_2838)
    {
        discard_state = true;
        _3042 = 0.0;
    }
    else
    {
        _3042 = cbInstanceData._m0[_2525].w;
    }
    SV_Target.x = _2669;
    SV_Target.y = _2670;
    SV_Target.z = _2671;
    SV_Target.w = _3042;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2525].w;
    discard_exit();
}


