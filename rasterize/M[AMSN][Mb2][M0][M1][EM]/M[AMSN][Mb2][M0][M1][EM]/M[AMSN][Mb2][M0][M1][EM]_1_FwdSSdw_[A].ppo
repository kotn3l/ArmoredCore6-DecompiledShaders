#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3348;
float _3349;
float _3350;
float _3351;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3360 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))));
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _351 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_263.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3371 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _355 = fma(_294, _206 * NORMAL.x, fma(_287, _213 * TANGENT.x, (_199 * _191) * _285));
    float _358 = fma(_294, _206 * NORMAL.y, fma(_287, _213 * TANGENT.y, (_199 * _192) * _285));
    float _361 = fma(_294, _206 * NORMAL.z, fma(_287, _213 * TANGENT.z, (_199 * _193) * _285));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    float _366 = _365 * _355;
    float _367 = _365 * _358;
    float _368 = _365 * _361;
    float _3382 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _369 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3404 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3415 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _388 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _440 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _430);
    float _441 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _430);
    float _442 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _430);
    float _446 = inversesqrt(dot(vec3(_440, _441, _442), vec3(_440, _441, _442)));
    float _447 = _440 * _446;
    float _448 = _441 * _446;
    float _449 = _442 * _446;
    vec4 _454 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _456 = _454.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _614 = sqrt(((_440 * _440) + (_441 * _441)) + (_442 * _442));
        float _620 = (cbMatDynParam._m0[5u].x * _614) + cbMatDynParam._m0[5u].y;
        float _3426 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _621 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _625 = (cbMatDynParam._m0[5u].z * _614) + cbMatDynParam._m0[5u].w;
        float _3437 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) - _621)) + _621) < ((_456 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _468 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _469 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _489 = fma(_368, cbSceneParam._m0[5u].z, fma(_367, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _366));
    float _492 = fma(_368, cbSceneParam._m0[6u].z, fma(_367, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _366));
    float _495 = fma(_368, cbSceneParam._m0[7u].z, fma(_367, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _366));
    uint _508 = uint(roundEven(NORMAL.w)) * 13u;
    uint _510 = _508 + 9u;
    uint _511 = _510 + uint(cbMatDynParam._m0[0u].w);
    float _517 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_511].x;
    float _518 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_511].y;
    float _519 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_511].z;
    float _3448 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _468, cbSceneParam._m0[86u].y * _469));
    float _534 = _531.x * TEXCOORD_3.w;
    float _535 = dot(vec3(_366, _367, _368), vec3(_447, _448, _449));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _366) - _447;
    float _543 = (_538 * _367) - _448;
    float _544 = (_538 * _368) - _449;
    float _548 = abs(dot(vec3(_447, _448, _449), vec3(_366, _367, _368)));
    float _3481 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_369);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_603, cbModelParam._m0[26u].z, fma(_599, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _595));
        float _662 = fma(_603, cbModelParam._m0[27u].z, fma(_599, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _595));
        float _666 = fma(_603, cbModelParam._m0[28u].z, fma(_599, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _595));
        float _691 = _595 + _366;
        float _692 = _599 + _367;
        float _693 = _603 + _368;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_366, _367, _368), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3529 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_366, _367, _368), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3562 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_366, _367, _368), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3595 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_603, cbModelParam._m0[30u].z, fma(_599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _595));
        float _981 = fma(_603, cbModelParam._m0[31u].z, fma(_599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _595));
        float _985 = fma(_603, cbModelParam._m0[32u].z, fma(_599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _595));
        float _1008 = _595 + _366;
        float _1009 = _599 + _367;
        float _1010 = _603 + _368;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_366, _367, _368), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3658 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_366, _367, _368), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3691 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_366, _367, _368), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3724 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = _934;
        _1256 = _934;
        _1257 = _934;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _542 * 0.5;
    float _1315 = _543 * 0.5;
    float _1316 = _544 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_933, _937, _940, _943));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_935, _938, _941, _944));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _939, _942, _945));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _369);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_603, cbModelParam._m0[13u].z, fma(_599, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _595)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_603, cbModelParam._m0[14u].z, fma(_599, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _595)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_603, cbModelParam._m0[15u].z, fma(_599, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _595)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1444 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1447 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1475 = frontier_phi_17_15_ladder;
        }
        float _1700;
        if (_1444 > 0.0)
        {
            _1700 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1700 = frontier_phi_26_22_ladder;
        }
        float _1946;
        if (_1447 > 0.0)
        {
            _1946 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1946 = frontier_phi_38_33_ladder;
        }
        float _1948 = isnan(_1700) ? _1475 : (isnan(_1475) ? _1700 : min(_1475, _1700));
        float _1949 = isnan(_1946) ? _1948 : (isnan(_1948) ? _1946 : min(_1948, _1946));
        float _1953 = (_1949 * _1441) + _1430;
        float _1954 = (_1949 * _1444) + _1434;
        float _1955 = (_1949 * _1447) + _1438;
        float _1956 = _1949 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1956;
        float _1960 = _1956 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 > _1960) || ((_1954 < _1958) || ((_1953 < _1958) || (_1953 > _1960))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1955, cbModelParam._m0[9u].z, fma(_1954, cbModelParam._m0[9u].y, _1953 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1955, cbModelParam._m0[10u].z, fma(_1954, cbModelParam._m0[10u].y, _1953 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1955, cbModelParam._m0[11u].z, fma(_1954, cbModelParam._m0[11u].y, _1953 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_16_38_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_16_38_ladder_2;
        _1465 = frontier_phi_16_38_ladder_1;
        _1467 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1383);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _369);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_603, cbModelParam._m0[21u].z, fma(_599, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _595)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_603, cbModelParam._m0[22u].z, fma(_599, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _595)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_603, cbModelParam._m0[23u].z, fma(_599, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _595)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1541 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1544 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1705;
        if (_1538 > 0.0)
        {
            _1705 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1705 = frontier_phi_28_24_ladder;
        }
        float _1973;
        if (_1541 > 0.0)
        {
            _1973 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1973 = frontier_phi_40_35_ladder;
        }
        float _2178;
        if (_1544 > 0.0)
        {
            _2178 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2178 = frontier_phi_49_46_ladder;
        }
        float _2180 = isnan(_1973) ? _1705 : (isnan(_1705) ? _1973 : min(_1705, _1973));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1538) + _1527;
        float _2186 = (_2181 * _1541) + _1531;
        float _2187 = (_2181 * _1544) + _1535;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_25_49_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_25_49_ladder_2;
        _1565 = frontier_phi_25_49_ladder_1;
        _1567 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1472);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1579 = ((((1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_563 * _550)) * _534;
    float _1580 = _1579 * ((cbModelParam._m0[1u].w * (_1563 - _1463)) + _1463);
    float _1581 = _1579 * ((cbModelParam._m0[1u].w * (_1565 - _1465)) + _1465);
    float _1582 = _1579 * ((cbModelParam._m0[1u].w * (_1567 - _1467)) + _1467);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    vec4 _1599 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_468, _469));
    float _1601 = _1599.w;
    float _1613 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1601);
    float _1614 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1601);
    float _1615 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1601);
    uvec4 _1619 = floatBitsToUint(cbInstanceData._m0[_508 + 5u]);
    uint _1621 = _1619.x * 14u;
    uint _1622 = _1621 + 13u;
    float _1629 = _534 + (-1.0);
    float _1634 = (cbLight._m0[_1622].x * _1629) + 1.0;
    float _1635 = (cbLight._m0[_1622].y * _1629) + 1.0;
    float _1636 = (cbLight._m0[_1622].z * _1629) + 1.0;
    float _1637 = (cbLight._m0[_1622].w * _1629) + 1.0;
    uint _1638 = _1621 + 5u;
    float _1644 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1648 = _1621 + 4u;
    float _1658 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    uint _1662 = _1621 | 1u;
    float _1673 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_366, _367, _368));
    float _1676 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_366, _367, _368));
    float _3860 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _3871 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1681 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _1683 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1690 = ((cbLight._m0[_1638].x * _1644) * _1683) + (((cbLight._m0[_1648].x * _1613) * _1658) * _1681);
    float _1691 = ((_1644 * cbLight._m0[_1638].y) * _1683) + (((cbLight._m0[_1648].y * _1614) * _1658) * _1681);
    float _1692 = ((_1644 * cbLight._m0[_1638].z) * _1683) + (((cbLight._m0[_1648].z * _1615) * _1658) * _1681);
    uvec4 _1697 = floatBitsToUint(cbLight._m0[_1621 + 12u]);
    bool _1699 = _1697.x == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1699)
    {
        _1710 = _1690;
        _1712 = _1691;
        _1714 = _1692;
    }
    else
    {
        uint _1718 = _1621 + 6u;
        float _1734 = (dot(vec3(cbLight._m0[_1621 + 2u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1735 = _1734 * _1734;
        float _3882 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1737 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1710 = (((cbLight._m0[_1718].x * 0.3183098733425140380859375) * _1736) * _1737) + _1690;
        _1712 = (((cbLight._m0[_1718].y * 0.3183098733425140380859375) * _1736) * _1737) + _1691;
        _1714 = (((cbLight._m0[_1718].z * 0.3183098733425140380859375) * _1736) * _1737) + _1692;
    }
    bool _1717 = _1697.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1717)
    {
        _1755 = _1710;
        _1757 = _1712;
        _1759 = _1714;
    }
    else
    {
        uint _1917 = _1621 + 7u;
        float _1933 = (dot(vec3(cbLight._m0[_1621 + 3u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _3898 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1936 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1755 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1710;
        _1757 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1712;
        _1759 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1714;
    }
    uint _1762 = _1621 + 8u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _369) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1621].x + _447;
    float _1778 = cbLight._m0[_1621].y + _448;
    float _1779 = cbLight._m0[_1621].z + _449;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1621].xyz));
    float _3914 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1791 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1792 = dot(vec3(_366, _367, _368), vec3(_1784, _1785, _1786));
    float _3936 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1784, _1785, _1786));
    float _3947 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1776 * _1776;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1791 * ((_1790 * _1816) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1816) + _1776) * _1790))) * _1790;
    float _3958 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    uint _1843 = _1621 + 9u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _369) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1662].x + _447;
    float _1857 = cbLight._m0[_1662].y + _448;
    float _1858 = cbLight._m0[_1662].z + _449;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1662].xyz));
    float _3969 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1870 = dot(vec3(_366, _367, _368), vec3(_1863, _1864, _1865));
    float _3980 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1863, _1864, _1865));
    float _3991 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1855 * _1855;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1855;
    float _1902 = (0.5 / (((_1791 * ((_1869 * _1892) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1892) + _1855) * _1869))) * _1869;
    float _4002 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    float _1914 = (((_1891 * cbLight._m0[_1843].x) * _1904) * _1644) + ((((cbLight._m0[_1762].x * _1613) * _1815) * _1829) * _1658);
    float _1915 = (((_1891 * cbLight._m0[_1843].y) * _1904) * _1644) + ((((cbLight._m0[_1762].y * _1614) * _1815) * _1829) * _1658);
    float _1916 = (((_1891 * cbLight._m0[_1843].z) * _1904) * _1644) + ((((cbLight._m0[_1762].z * _1615) * _1815) * _1829) * _1658);
    float _1978;
    float _1980;
    float _1982;
    if (_1699)
    {
        _1978 = _1914;
        _1980 = _1915;
        _1982 = _1916;
    }
    else
    {
        uint _1984 = _1621 + 2u;
        uint _1988 = _1621 + 10u;
        float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _369) * 0.949999988079071044921875);
        float _2003 = _2002 * _2002;
        float _2004 = cbLight._m0[_1984].x + _447;
        float _2005 = cbLight._m0[_1984].y + _448;
        float _2006 = cbLight._m0[_1984].z + _449;
        float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
        float _2011 = _2010 * _2004;
        float _2012 = _2010 * _2005;
        float _2013 = _2010 * _2006;
        float _2014 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1984].xyz));
        float _4013 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2018 = dot(vec3(_366, _367, _368), vec3(_2011, _2012, _2013));
        float _4024 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2022 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2011, _2012, _2013));
        float _4035 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = _2003 * _2003;
        float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
        float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2040 = 1.0 - _2003;
        float _2050 = (0.5 / (((_1791 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2040) + _2003) * _2017))) * _2017;
        float _4046 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2052 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
        float _2053 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1978 = (((_2039 * cbLight._m0[_1988].x) * _2052) * _2053) + _1914;
        _1980 = (((_2039 * cbLight._m0[_1988].y) * _2052) * _2053) + _1915;
        _1982 = (((_2039 * cbLight._m0[_1988].z) * _2052) * _2053) + _1916;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1717)
    {
        _2088 = _1978;
        _2090 = _1980;
        _2092 = _1982;
    }
    else
    {
        uint _2099 = _1621 + 3u;
        uint _2103 = _1621 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _369) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _447;
        float _2120 = cbLight._m0[_2099].y + _448;
        float _2121 = cbLight._m0[_2099].z + _449;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_2099].xyz));
        float _4062 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2133 = dot(vec3(_366, _367, _368), vec3(_2126, _2127, _2128));
        float _4073 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4084 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1791 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2155) + _2118) * _2132))) * _2132;
        float _4095 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1978;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1980;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1982;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1619.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _469) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _468) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2585)
                {
                    frontier_phi_66_pred = _2569;
                    frontier_phi_66_pred_1 = _2574;
                    frontier_phi_66_pred_2 = _2573;
                    frontier_phi_66_pred_3 = _2572;
                    frontier_phi_66_pred_4 = _2571;
                    frontier_phi_66_pred_5 = _2570;
                }
                else
                {
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    uint _2720;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2584;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2724 = uint(findLSB(_2720)) + (_2575 << 5u);
                        uint _2721 = (_2720 + 4294967295u) & _2720;
                        uint _2726 = _2724 * 48u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2746 = (_2724 * 48u) + 4u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2765 = (_2724 * 48u) + 8u;
                        vec3 _2776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x));
                        float _2780 = _2740.x - _2244;
                        float _2781 = _2740.y - _2245;
                        float _2782 = _2740.z - _2246;
                        float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                        float _2786 = inversesqrt(_2783);
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2790 = dot(vec3(_489, _492, _495), vec3(_2787, _2788, _2789));
                        float _2795 = 1.0 - (_2783 * _2740.w);
                        float _4121 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2797 = sqrt(_2783) * _2759.w;
                        float _2800 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2790) + _2801;
                        float _2807 = _2797 * _2797;
                        float _2811 = ((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2796) / ((_2807 * 0.699999988079071044921875) + 1.0);
                        float _2815 = (-0.0) - _2244;
                        float _2816 = (-0.0) - _2245;
                        float _2817 = (-0.0) - _2246;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2832 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _550;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_489, _492, _495), vec3(_2822, _2823, _2824));
                        float _4137 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2857 = dot(vec3(_489, _492, _495), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4148 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2800 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2790) + _2866;
                        float _4159 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4170 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) / ((_2864 * _2864) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2796;
                        _2644 = (_2811 * _2759.x) + _2717;
                        _2645 = (_2811 * _2759.y) + _2718;
                        _2646 = (_2811 * _2759.z) + _2719;
                        _2641 = (_2892 * _2776.x) + _2714;
                        _2642 = (_2892 * _2776.y) + _2715;
                        _2643 = (_2892 * _2776.z) + _2716;
                        if (_2721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2721;
                        }
                    }
                    frontier_phi_66_pred = _2641;
                    frontier_phi_66_pred_1 = _2646;
                    frontier_phi_66_pred_2 = _2645;
                    frontier_phi_66_pred_3 = _2644;
                    frontier_phi_66_pred_4 = _2643;
                    frontier_phi_66_pred_5 = _2642;
                }
                _2417 = frontier_phi_66_pred;
                _2427 = frontier_phi_66_pred_1;
                _2425 = frontier_phi_66_pred_2;
                _2423 = frontier_phi_66_pred_3;
                _2421 = frontier_phi_66_pred_4;
                _2419 = frontier_phi_66_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2417;
                    _2570 = _2419;
                    _2571 = _2421;
                    _2572 = _2423;
                    _2573 = _2425;
                    _2574 = _2427;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2433) & _2290) == 0u)
        {
            _2537 = _2416;
            _2539 = _2418;
            _2541 = _2420;
            _2543 = _2422;
            _2545 = _2424;
            _2547 = _2426;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2563 = _2562 * _2244;
            float _2564 = _2562 * _2245;
            float _2565 = _2562 * _2246;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2697 = _2416;
                float _2698 = _2418;
                float _2699 = _2420;
                float _2700 = _2422;
                float _2701 = _2424;
                float _2702 = _2426;
                uint _2703 = _2433;
                uint _2712;
                bool _2713;
                for (;;)
                {
                    _2712 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                    _2713 = _2712 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2713)
                    {
                        frontier_phi_77_pred = _2702;
                        frontier_phi_77_pred_1 = _2701;
                        frontier_phi_77_pred_2 = _2700;
                        frontier_phi_77_pred_3 = _2699;
                        frontier_phi_77_pred_4 = _2698;
                        frontier_phi_77_pred_5 = _2697;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        uint _2925 = _2712;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2994;
                        vec4 _3010;
                        float _3057;
                        bool _3058;
                        for (;;)
                        {
                            uint _2936 = ((_2703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2981 = (_2936 * 40u) + 16u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2936 * 40u) + 20u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2936 * 40u) + 24u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3032 = (_2936 * 40u) + 28u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3057 = fma(_2246, _3045.z, fma(_2245, _3045.y, _3045.x * _2244)) + _3045.w;
                            _3058 = !((fma(_2246, _3026.z, fma(_2245, _3026.y, _3026.x * _2244)) + _3026.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3058)
                            {
                                float _3085 = _2951.x - _2244;
                                float _3086 = _2951.y - _2245;
                                float _3087 = _2951.z - _2246;
                                float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                                float _3091 = inversesqrt(_3088);
                                float _3092 = _3091 * _3085;
                                float _3093 = _3091 * _3086;
                                float _3094 = _3091 * _3087;
                                float _3098 = 1.0 - (_3088 / (_2952 * _2952));
                                float _4181 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3103 = sqrt(_3088) * _2967.w;
                                float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                                float _3106 = _3105 * _3105;
                                float _3109 = ((1.0 - _3106) * dot(vec3(_3092, _3093, _3094), vec3(_489, _492, _495))) + _3106;
                                float _3112 = _3103 * _3103;
                                float _3116 = (fma(_2246, _2994.z, fma(_2245, _2994.y, _2994.x * _2244)) + _2994.w) / _3057;
                                float _3117 = (fma(_2246, _3010.z, fma(_2245, _3010.y, _3010.x * _2244)) + _3010.w) / _3057;
                                float _3121 = 1.0 - dot(vec2(_3116, _3117), vec2(_3116, _3117));
                                float _4197 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3123 = _3122 * (((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3099) / ((_3112 * 0.699999988079071044921875) + 1.0));
                                float _3135 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                                float _3136 = 1.0 - _550;
                                float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                                float _3144 = _3143 * _3143;
                                float _3145 = _3144 * _3144;
                                float _3146 = _3092 - _2563;
                                float _3147 = _3093 - _2564;
                                float _3148 = _3094 - _2565;
                                float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                                float _3156 = dot(vec3(_489, _492, _495), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4208 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3160 = dot(vec3(_489, _492, _495), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                                float _4219 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                                float _3168 = _3105 * _3144;
                                float _3169 = _3168 * _3168;
                                float _3175 = ((1.0 - _3169) * dot(vec3(_489, _492, _495), vec3(_3092, _3093, _3094))) + _3169;
                                float _4230 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3177 = 1.0 - _3144;
                                float _3187 = (0.5 / (((_3176 * ((_3159 * _3177) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3144) * _3159))) * _3176;
                                float _4241 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3197 = (_3122 * _3099) * (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_3167 * _3167) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3123 * _2967.y;
                                frontier_phi_83_pred_1 = _3123 * _2967.x;
                                frontier_phi_83_pred_2 = _3197 * _2979.z;
                                frontier_phi_83_pred_3 = _3197 * _2979.y;
                                frontier_phi_83_pred_4 = _3197 * _2979.x;
                                frontier_phi_83_pred_5 = _3123 * _2967.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3205 = frontier_phi_83_pred;
                            _3204 = frontier_phi_83_pred_1;
                            _3203 = frontier_phi_83_pred_2;
                            _3202 = frontier_phi_83_pred_3;
                            _3201 = frontier_phi_83_pred_4;
                            _3206 = frontier_phi_83_pred_5;
                            _2909 = _3204 + _2922;
                            _2910 = _3205 + _2923;
                            _2911 = _3206 + _2924;
                            _2906 = _3201 + _2919;
                            _2907 = _3202 + _2920;
                            _2908 = _3203 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2911;
                        frontier_phi_77_pred_1 = _2910;
                        frontier_phi_77_pred_2 = _2909;
                        frontier_phi_77_pred_3 = _2908;
                        frontier_phi_77_pred_4 = _2907;
                        frontier_phi_77_pred_5 = _2906;
                    }
                    _2548 = frontier_phi_77_pred;
                    _2546 = frontier_phi_77_pred_1;
                    _2544 = frontier_phi_77_pred_2;
                    _2542 = frontier_phi_77_pred_3;
                    _2540 = frontier_phi_77_pred_4;
                    _2538 = frontier_phi_77_pred_5;
                    uint _2704 = _2703 + 1u;
                    if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2697 = _2538;
                        _2698 = _2540;
                        _2699 = _2542;
                        _2700 = _2544;
                        _2701 = _2546;
                        _2702 = _2548;
                        _2703 = _2704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2542;
                frontier_phi_58_59_ladder_1 = _2548;
                frontier_phi_58_59_ladder_2 = _2546;
                frontier_phi_58_59_ladder_3 = _2544;
                frontier_phi_58_59_ladder_4 = _2540;
                frontier_phi_58_59_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_58_59_ladder = _2420;
                frontier_phi_58_59_ladder_1 = _2426;
                frontier_phi_58_59_ladder_2 = _2424;
                frontier_phi_58_59_ladder_3 = _2422;
                frontier_phi_58_59_ladder_4 = _2418;
                frontier_phi_58_59_ladder_5 = _2416;
            }
            _2537 = frontier_phi_58_59_ladder_5;
            _2539 = frontier_phi_58_59_ladder_4;
            _2541 = frontier_phi_58_59_ladder;
            _2543 = frontier_phi_58_59_ladder_3;
            _2545 = frontier_phi_58_59_ladder_2;
            _2547 = frontier_phi_58_59_ladder_1;
        }
        float _2552 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2303 = (_2552 * _2543) + _1755;
        _2305 = (_2552 * _2545) + _1757;
        _2307 = (_2552 * _2547) + _1759;
        _2309 = ((_2537 * 0.039999999105930328369140625) * _2552) + _2088;
        _2311 = ((_2539 * 0.039999999105930328369140625) * _2552) + _2090;
        _2313 = ((_2541 * 0.039999999105930328369140625) * _2552) + _2092;
    }
    else
    {
        _2303 = _1755;
        _2305 = _1757;
        _2307 = _1759;
        _2309 = _2088;
        _2311 = _2090;
        _2313 = _2092;
    }
    uint _2319 = _510 + uint(cbMatDynParam._m0[0u].w);
    float _4257 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4268 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4279 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2350 = (((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2303 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _534))) + ((_2309 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + (((_352 * cbMtdParam._m0[11u].x) * (_336.x + _321.x)) * cbInstanceData._m0[_2319].x);
    float _2352 = ((((_352 * cbMtdParam._m0[11u].y) * (_336.y + _321.y)) * cbInstanceData._m0[_2319].y) + ((_2311 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2305 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _534)));
    float _2354 = ((((_352 * cbMtdParam._m0[11u].z) * (_336.z + _321.z)) * cbInstanceData._m0[_2319].z) + ((_2313 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2307 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _534)));
    float _2355 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2356 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    uint _2358 = _508 + 6u;
    float _2366 = _468 / cbSceneParam._m0[86u].x;
    float _2367 = _469 / cbSceneParam._m0[86u].y;
    vec4 _2381 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, (log2((isnan(cbSceneParam._m0[77u].w) ? _388 : (isnan(_388) ? cbSceneParam._m0[77u].w : min(_388, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2383 = _2381.x;
    float _2384 = _2381.y;
    float _2385 = _2381.z;
    float _2386 = _2381.w;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_388 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_388) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _388 : min(cbSceneParam._m0[80u].w, _388));
        float _2442 = _2441 / _388;
        float _2453 = _2442 * _440;
        float _2454 = _441 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2457 = _2442 * _442;
        float _2459 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2460 = _2459 + cbSceneParam._m0[79u].w;
        float _2461 = cbSceneParam._m0[79u].w - _2454;
        float _2467 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2457 * _2457));
        float _2470 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2467;
        float _2475 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2477 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2455 - _2459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2460 > 0.0) ? exp2(_2475 * _2460) : (2.0 - exp2(_2477 * _2460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2470;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : max(_2460, _2461));
            float _2600 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : min(_2460, _2461));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2654 = ((abs(_2467 / _2455) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2475 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2475 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2477 * _2609) - exp2(_2477 * _2610)) * _2598))) + (_2470 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2386);
        _2479 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2383;
        _2481 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2384;
        _2483 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2385;
        _2485 = _2665 * _2386;
    }
    else
    {
        _2479 = _2383;
        _2481 = _2384;
        _2483 = _2385;
        _2485 = _2386;
    }
    bool _2692;
    vec4 _2495;
    vec4 _2517;
    float _2519;
    float _2523;
    float _2524;
    float _2525;
    float _2526;
    bool _2536;
    for (;;)
    {
        _2495 = cbMatDynParam._m0[0u];
        float _2497 = roundEven(_2495.y);
        bool _2498 = _2497 == 3.0;
        float _2499 = log2(_2485);
        float _2506 = exp2(_2499 * cbSceneParam._m0[78u].x) * _2355;
        float _2507 = exp2(_2499 * cbSceneParam._m0[78u].y) * _2356;
        float _2508 = exp2(_2499 * cbSceneParam._m0[78u].z) * _2357;
        float _2515 = _456 + (-0.5);
        _2517 = cbMtdParam._m0[1u];
        _2519 = _2517.y * _2515;
        float _2522 = (_2497 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2523 = _2522 * (_2498 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2479)));
        _2524 = _2522 * (_2498 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2481)));
        _2525 = _2522 * (_2498 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2483)));
        _2526 = _2515 * 0.999000012874603271484375;
        _2536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2536)
        {
            if ((cbInstanceData._m0[_508 + 7u].x + _2526) < 0.5)
            {
                _2692 = true;
                break;
            }
        }
        uint _2633 = _510 + uint(_2495.w);
        if ((cbInstanceData._m0[_2633].w < 1.0) && ((cbInstanceData._m0[_2633].w + _2526) < 0.5))
        {
            _2692 = true;
            break;
        }
        if ((_2519 + 1.0) < _2517.x)
        {
            _2692 = true;
            break;
        }
        _2692 = false;
        break;
    }
    float _2897;
    if (_2692)
    {
        discard_state = true;
        _2897 = 0.0;
    }
    else
    {
        _2897 = cbInstanceData._m0[_2358].w;
    }
    SV_Target.x = _2523;
    SV_Target.y = _2524;
    SV_Target.z = _2525;
    SV_Target.w = _2897;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2358].w;
    discard_exit();
}


