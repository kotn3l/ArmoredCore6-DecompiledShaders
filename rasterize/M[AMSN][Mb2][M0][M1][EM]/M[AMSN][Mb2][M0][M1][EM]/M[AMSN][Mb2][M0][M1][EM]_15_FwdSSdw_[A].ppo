#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1156;
float _3568;
float _3569;
float _3570;
float _3571;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3580 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _323 = (((_299.x * cbMtdParam._m0[10u].x) - _259) * _316) + _259;
    float _324 = (((_299.y * cbMtdParam._m0[10u].y) - _260) * _316) + _260;
    float _325 = (((_299.z * cbMtdParam._m0[10u].z) - _261) * _316) + _261;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _364 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_345.x + 0.00999999977648258209228515625));
    float _366 = _364 * (cbMtdParam._m0[15u].x + 1.0);
    float _3591 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _375 = ((((cbMtdParam._m0[12u].x - _323) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _367) + _323;
    float _376 = ((((cbMtdParam._m0[12u].y - _324) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _367) + _324;
    float _377 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _325)) * _367) + _325;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _398 = (_390.x * 2.0) + (-1.0);
    float _400 = (_390.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_398, _400), vec2(_398, _400));
    float _3602 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    vec4 _418 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _422 = _418.z;
    float _425 = (_418.x * 2.0) + (-1.0);
    float _426 = (_418.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3613 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))));
    float _435 = (_316 * (_390.z - _422)) + _422;
    float _438 = _364 * (cbMtdParam._m0[14u].w + 1.0);
    float _3624 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = ((cbMtdParam._m0[14u].y - _435) * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) + _435;
    vec4 _468 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _494 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _509 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _523 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_468.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3635 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _531 = (_316 * (_398 - _425)) + _425;
    float _532 = (_316 * (_400 - _426)) + _426;
    float _533 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) - _432)) + _432;
    vec4 _552 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _558 = (_552.x * 2.0) + (-1.0);
    float _559 = (_552.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3646 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _576 = (_367 * (((_531 * cbMtdParam._m0[13u].z) - _531) + _558)) + _531;
    float _577 = (_367 * (((_532 * cbMtdParam._m0[13u].z) - _532) + _559)) + _532;
    float _578 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) - _533)) + _533;
    float _581 = fma(_578, _224 * NORMAL.x, fma(_577, _231 * TANGENT.x, (_217 * _209) * _576));
    float _584 = fma(_578, _224 * NORMAL.y, fma(_577, _231 * TANGENT.y, (_217 * _210) * _576));
    float _587 = fma(_578, _224 * NORMAL.z, fma(_577, _231 * TANGENT.z, (_217 * _211) * _576));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3657 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _595 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3679 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3690 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    vec4 _678 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _680 = _678.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _836 = sqrt(((_664 * _664) + (_665 * _665)) + (_666 * _666));
        float _842 = (cbMatDynParam._m0[5u].x * _836) + cbMatDynParam._m0[5u].y;
        float _3701 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _847 = (cbMatDynParam._m0[5u].z * _836) + cbMatDynParam._m0[5u].w;
        float _3712 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) - _843)) + _843) < ((_680 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _715 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _718 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _731 = uint(roundEven(NORMAL.w)) * 13u;
    uint _732 = _731 + 9u;
    uint _733 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3723 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _756 = _753.x * TEXCOORD_3.w;
    float _757 = dot(vec3(_592, _593, _594), vec3(_671, _672, _673));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _592) - _671;
    float _765 = (_760 * _593) - _672;
    float _766 = (_760 * _594) - _673;
    float _770 = abs(dot(vec3(_671, _672, _673), vec3(_592, _593, _594)));
    float _3756 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_595);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _884 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _888 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _913 = _817 + _592;
        float _914 = _821 + _593;
        float _915 = _825 + _594;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_592, _593, _594), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3804 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_592, _593, _594), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3837 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_592, _593, _594), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3870 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1203 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1207 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1230 = _817 + _592;
        float _1231 = _821 + _593;
        float _1232 = _825 + _594;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_592, _593, _594), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3933 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_592, _593, _594), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3966 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_592, _593, _594), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3999 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = _1156;
        _1478 = _1156;
        _1479 = _1156;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1168)) + _1168;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1169)) + _1169;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1170)) + _1170;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _764 * 0.5;
    float _1537 = _765 * 0.5;
    float _1538 = _766 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1666 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1669 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1697 = frontier_phi_17_15_ladder;
        }
        float _1920;
        if (_1666 > 0.0)
        {
            _1920 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1920 = frontier_phi_26_22_ladder;
        }
        float _2166;
        if (_1669 > 0.0)
        {
            _2166 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2166 = frontier_phi_38_33_ladder;
        }
        float _2168 = isnan(_1920) ? _1697 : (isnan(_1697) ? _1920 : min(_1697, _1920));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1663) + _1652;
        float _2174 = (_2169 * _1666) + _1656;
        float _2175 = (_2169 * _1669) + _1660;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2176;
        float _2180 = _2176 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 > _2180) || ((_2174 < _2178) || ((_2173 < _2178) || (_2173 > _2180))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2175, cbModelParam._m0[9u].z, fma(_2174, cbModelParam._m0[9u].y, _2173 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2175, cbModelParam._m0[10u].z, fma(_2174, cbModelParam._m0[10u].y, _2173 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2175, cbModelParam._m0[11u].z, fma(_2174, cbModelParam._m0[11u].y, _2173 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_16_38_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_16_38_ladder_2;
        _1687 = frontier_phi_16_38_ladder_1;
        _1689 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1605);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1763 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1766 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1925;
        if (_1760 > 0.0)
        {
            _1925 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1925 = frontier_phi_28_24_ladder;
        }
        float _2193;
        if (_1763 > 0.0)
        {
            _2193 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2193 = frontier_phi_40_35_ladder;
        }
        float _2398;
        if (_1766 > 0.0)
        {
            _2398 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2398 = frontier_phi_49_46_ladder;
        }
        float _2400 = isnan(_2193) ? _1925 : (isnan(_1925) ? _2193 : min(_1925, _2193));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1760) + _1749;
        float _2406 = (_2401 * _1763) + _1753;
        float _2407 = (_2401 * _1766) + _1757;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_25_49_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_49_ladder_2;
        _1787 = frontier_phi_25_49_ladder_1;
        _1789 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1694);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1801 = ((((1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_785 * _772)) * _756;
    float _1802 = _1801 * ((cbModelParam._m0[1u].w * (_1785 - _1685)) + _1685);
    float _1803 = _1801 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1804 = _1801 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    vec4 _1821 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_692, _693));
    float _1823 = _1821.w;
    float _1835 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1823);
    float _1836 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1823);
    float _1837 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1823);
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_731 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _756 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1879 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1883 = _1843 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_592, _593, _594));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_592, _593, _594));
    float _4135 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4146 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1860].x * _1866) * _1904) + (((cbLight._m0[_1870].x * _1835) * _1879) * _1902);
    float _1912 = ((_1866 * cbLight._m0[_1860].y) * _1904) + (((cbLight._m0[_1870].y * _1836) * _1879) * _1902);
    float _1913 = ((_1866 * cbLight._m0[_1860].z) * _1904) + (((cbLight._m0[_1870].z * _1837) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1919)
    {
        _1930 = _1911;
        _1932 = _1912;
        _1934 = _1913;
    }
    else
    {
        uint _1938 = _1843 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _4157 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1957 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1911;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1912;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1913;
    }
    bool _1937 = _1917.y == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1937)
    {
        _1975 = _1930;
        _1977 = _1932;
        _1979 = _1934;
    }
    else
    {
        uint _2137 = _1843 + 7u;
        float _2153 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4173 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2156 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1975 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _1930;
        _1977 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _1932;
        _1979 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _1934;
    }
    uint _1982 = _1843 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _595) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1843].x + _671;
    float _1998 = cbLight._m0[_1843].y + _672;
    float _1999 = cbLight._m0[_1843].z + _673;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1843].xyz));
    float _4189 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _2011 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2012 = dot(vec3(_592, _593, _594), vec3(_2004, _2005, _2006));
    float _4211 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2004, _2005, _2006));
    float _4222 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1996;
    float _2047 = (0.5 / (((_2011 * ((_2010 * _2036) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2036) + _1996) * _2010))) * _2010;
    float _4233 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2063 = _1843 + 9u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _595) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1883].x + _671;
    float _2077 = cbLight._m0[_1883].y + _672;
    float _2078 = cbLight._m0[_1883].z + _673;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1883].xyz));
    float _4244 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2090 = dot(vec3(_592, _593, _594), vec3(_2083, _2084, _2085));
    float _4255 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2083, _2084, _2085));
    float _4266 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2075 * _2075;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = 1.0 - _2075;
    float _2122 = (0.5 / (((_2011 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2112) + _2075) * _2089))) * _2089;
    float _4277 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    float _2134 = (((_2111 * cbLight._m0[_2063].x) * _2124) * _1866) + ((((cbLight._m0[_1982].x * _1835) * _2035) * _2049) * _1879);
    float _2135 = (((_2111 * cbLight._m0[_2063].y) * _2124) * _1866) + ((((cbLight._m0[_1982].y * _1836) * _2035) * _2049) * _1879);
    float _2136 = (((_2111 * cbLight._m0[_2063].z) * _2124) * _1866) + ((((cbLight._m0[_1982].z * _1837) * _2035) * _2049) * _1879);
    float _2198;
    float _2200;
    float _2202;
    if (_1919)
    {
        _2198 = _2134;
        _2200 = _2135;
        _2202 = _2136;
    }
    else
    {
        uint _2204 = _1843 + 2u;
        uint _2208 = _1843 + 10u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _595) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _671;
        float _2225 = cbLight._m0[_2204].y + _672;
        float _2226 = cbLight._m0[_2204].z + _673;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2204].xyz));
        float _4288 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2238 = dot(vec3(_592, _593, _594), vec3(_2231, _2232, _2233));
        float _4299 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4310 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2260 = 1.0 - _2223;
        float _2270 = (0.5 / (((_2011 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2260) + _2223) * _2237))) * _2237;
        float _4321 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2198 = (((_2259 * cbLight._m0[_2208].x) * _2272) * _2273) + _2134;
        _2200 = (((_2259 * cbLight._m0[_2208].y) * _2272) * _2273) + _2135;
        _2202 = (((_2259 * cbLight._m0[_2208].z) * _2272) * _2273) + _2136;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1937)
    {
        _2308 = _2198;
        _2310 = _2200;
        _2312 = _2202;
    }
    else
    {
        uint _2319 = _1843 + 3u;
        uint _2323 = _1843 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _595) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _671;
        float _2340 = cbLight._m0[_2319].y + _672;
        float _2341 = cbLight._m0[_2319].z + _673;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2319].xyz));
        float _4337 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2353 = dot(vec3(_592, _593, _594), vec3(_2346, _2347, _2348));
        float _4348 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4359 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2011 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2375) + _2338) * _2352))) * _2352;
        float _4370 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2308 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2198;
        _2310 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2200;
        _2312 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2202;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1841.y == 0u)
    {
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2463;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2463;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2463;
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2479)));
        float _2500 = (log2(_2466 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2805)
                {
                    frontier_phi_66_pred = _2789;
                    frontier_phi_66_pred_1 = _2794;
                    frontier_phi_66_pred_2 = _2793;
                    frontier_phi_66_pred_3 = _2792;
                    frontier_phi_66_pred_4 = _2791;
                    frontier_phi_66_pred_5 = _2790;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2804;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2795 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _2464;
                        float _3001 = _2960.y - _2465;
                        float _3002 = _2960.z - _2466;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_712, _715, _718), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4396 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _2464;
                        float _3036 = (-0.0) - _2465;
                        float _3037 = (-0.0) - _2466;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3052 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3053 = 1.0 - _772;
                        float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                        float _3061 = _3060 * _3060;
                        float _3062 = _3061 * _3061;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3073 = dot(vec3(_712, _715, _718), vec3(_3042, _3043, _3044));
                        float _4412 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3077 = dot(vec3(_712, _715, _718), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                        float _4423 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                        float _3085 = _3020 * _3061;
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3010) + _3086;
                        float _4434 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3091 = 1.0 - _3061;
                        float _3101 = (0.5 / (((_3090 * ((_3076 * _3091) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3061) * _3076))) * _3090;
                        float _4445 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3112 = (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3084 * _3084) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2864 = (_3031 * _2979.x) + _2937;
                        _2865 = (_3031 * _2979.y) + _2938;
                        _2866 = (_3031 * _2979.z) + _2939;
                        _2861 = (_3112 * _2996.x) + _2934;
                        _2862 = (_3112 * _2996.y) + _2935;
                        _2863 = (_3112 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_66_pred = _2861;
                    frontier_phi_66_pred_1 = _2866;
                    frontier_phi_66_pred_2 = _2865;
                    frontier_phi_66_pred_3 = _2864;
                    frontier_phi_66_pred_4 = _2863;
                    frontier_phi_66_pred_5 = _2862;
                }
                _2637 = frontier_phi_66_pred;
                _2647 = frontier_phi_66_pred_1;
                _2645 = frontier_phi_66_pred_2;
                _2643 = frontier_phi_66_pred_3;
                _2641 = frontier_phi_66_pred_4;
                _2639 = frontier_phi_66_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2637;
                    _2790 = _2639;
                    _2791 = _2641;
                    _2792 = _2643;
                    _2793 = _2645;
                    _2794 = _2647;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2653) & _2510) == 0u)
        {
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
            float _2783 = _2782 * _2464;
            float _2784 = _2782 * _2465;
            float _2785 = _2782 * _2466;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2917 = _2636;
                float _2918 = _2638;
                float _2919 = _2640;
                float _2920 = _2642;
                float _2921 = _2644;
                float _2922 = _2646;
                uint _2923 = _2653;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2933)
                    {
                        frontier_phi_77_pred = _2922;
                        frontier_phi_77_pred_1 = _2921;
                        frontier_phi_77_pred_2 = _2920;
                        frontier_phi_77_pred_3 = _2919;
                        frontier_phi_77_pred_4 = _2918;
                        frontier_phi_77_pred_5 = _2917;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        float _3144 = _2922;
                        uint _3145 = _2932;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3230;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3156 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3156 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3156 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3156 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_2466, _3265.z, fma(_2465, _3265.y, _3265.x * _2464)) + _3265.w;
                            _3278 = !((fma(_2466, _3246.z, fma(_2465, _3246.y, _3246.x * _2464)) + _3246.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3171.x - _2464;
                                float _3306 = _3171.y - _2465;
                                float _3307 = _3171.z - _2466;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3172 * _3172));
                                float _4456 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3323 = sqrt(_3308) * _3187.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_712, _715, _718))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_2466, _3214.z, fma(_2465, _3214.y, _3214.x * _2464)) + _3214.w) / _3277;
                                float _3337 = (fma(_2466, _3230.z, fma(_2465, _3230.y, _3230.x * _2464)) + _3230.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4472 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _772;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2783;
                                float _3367 = _3313 - _2784;
                                float _3368 = _3314 - _2785;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4483 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3380 = dot(vec3(_712, _715, _718), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4494 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_712, _715, _718), vec3(_3312, _3313, _3314))) + _3389;
                                float _4505 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4516 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3343 * _3187.y;
                                frontier_phi_83_pred_1 = _3343 * _3187.x;
                                frontier_phi_83_pred_2 = _3417 * _3199.z;
                                frontier_phi_83_pred_3 = _3417 * _3199.y;
                                frontier_phi_83_pred_4 = _3417 * _3199.x;
                                frontier_phi_83_pred_5 = _3343 * _3187.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_83_pred;
                            _3424 = frontier_phi_83_pred_1;
                            _3423 = frontier_phi_83_pred_2;
                            _3422 = frontier_phi_83_pred_3;
                            _3421 = frontier_phi_83_pred_4;
                            _3426 = frontier_phi_83_pred_5;
                            _3129 = _3424 + _3142;
                            _3130 = _3425 + _3143;
                            _3131 = _3426 + _3144;
                            _3126 = _3421 + _3139;
                            _3127 = _3422 + _3140;
                            _3128 = _3423 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3131;
                        frontier_phi_77_pred_1 = _3130;
                        frontier_phi_77_pred_2 = _3129;
                        frontier_phi_77_pred_3 = _3128;
                        frontier_phi_77_pred_4 = _3127;
                        frontier_phi_77_pred_5 = _3126;
                    }
                    _2768 = frontier_phi_77_pred;
                    _2766 = frontier_phi_77_pred_1;
                    _2764 = frontier_phi_77_pred_2;
                    _2762 = frontier_phi_77_pred_3;
                    _2760 = frontier_phi_77_pred_4;
                    _2758 = frontier_phi_77_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2758;
                        _2918 = _2760;
                        _2919 = _2762;
                        _2920 = _2764;
                        _2921 = _2766;
                        _2922 = _2768;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2762;
                frontier_phi_58_59_ladder_1 = _2768;
                frontier_phi_58_59_ladder_2 = _2766;
                frontier_phi_58_59_ladder_3 = _2764;
                frontier_phi_58_59_ladder_4 = _2760;
                frontier_phi_58_59_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_58_59_ladder = _2640;
                frontier_phi_58_59_ladder_1 = _2646;
                frontier_phi_58_59_ladder_2 = _2644;
                frontier_phi_58_59_ladder_3 = _2642;
                frontier_phi_58_59_ladder_4 = _2638;
                frontier_phi_58_59_ladder_5 = _2636;
            }
            _2757 = frontier_phi_58_59_ladder_5;
            _2759 = frontier_phi_58_59_ladder_4;
            _2761 = frontier_phi_58_59_ladder;
            _2763 = frontier_phi_58_59_ladder_3;
            _2765 = frontier_phi_58_59_ladder_2;
            _2767 = frontier_phi_58_59_ladder_1;
        }
        float _2772 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2523 = (_2772 * _2763) + _1975;
        _2525 = (_2772 * _2765) + _1977;
        _2527 = (_2772 * _2767) + _1979;
        _2529 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2308;
        _2531 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2310;
        _2533 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2312;
    }
    else
    {
        _2523 = _1975;
        _2525 = _1977;
        _2527 = _1979;
        _2529 = _2308;
        _2531 = _2310;
        _2533 = _2312;
    }
    uint _2539 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _4532 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4543 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4554 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2570 = (((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2523 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _756))) + ((_2529 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + (((_524 * cbMtdParam._m0[11u].x) * (_509.x + _494.x)) * cbInstanceData._m0[_2539].x);
    float _2572 = ((((_524 * cbMtdParam._m0[11u].y) * (_509.y + _494.y)) * cbInstanceData._m0[_2539].y) + ((_2531 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2525 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _756)));
    float _2574 = ((((_524 * cbMtdParam._m0[11u].z) * (_509.z + _494.z)) * cbInstanceData._m0[_2539].z) + ((_2533 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2527 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _756)));
    float _2575 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2576 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2577 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    uint _2578 = _731 + 6u;
    float _2586 = _692 / cbSceneParam._m0[86u].x;
    float _2587 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2603 = _2601.x;
    float _2604 = _2601.y;
    float _2605 = _2601.z;
    float _2606 = _2601.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2662 = _2661 / _614;
        float _2673 = _2662 * _664;
        float _2674 = _665 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2677 = _2662 * _666;
        float _2679 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2674;
        float _2687 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2675 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2820 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2874 = ((abs(_2687 / _2675) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2697 * _2829) - exp2(_2697 * _2830)) * _2818))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2606);
        _2699 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2603;
        _2701 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2604;
        _2703 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2605;
        _2705 = _2885 * _2606;
    }
    else
    {
        _2699 = _2603;
        _2701 = _2604;
        _2703 = _2605;
        _2705 = _2606;
    }
    bool _2912;
    vec4 _2715;
    vec4 _2737;
    float _2739;
    float _2743;
    float _2744;
    float _2745;
    float _2746;
    bool _2756;
    for (;;)
    {
        _2715 = cbMatDynParam._m0[0u];
        float _2717 = roundEven(_2715.y);
        bool _2718 = _2717 == 3.0;
        float _2719 = log2(_2705);
        float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * _2575;
        float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * _2576;
        float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * _2577;
        float _2735 = _680 + (-0.5);
        _2737 = cbMtdParam._m0[1u];
        _2739 = _2737.y * _2735;
        float _2742 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2743 = _2742 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
        _2744 = _2742 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
        _2745 = _2742 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
        _2746 = _2735 * 0.999000012874603271484375;
        _2756 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2756)
        {
            if ((cbInstanceData._m0[_731 + 7u].x + _2746) < 0.5)
            {
                _2912 = true;
                break;
            }
        }
        uint _2853 = _732 + uint(_2715.w);
        if ((cbInstanceData._m0[_2853].w < 1.0) && ((cbInstanceData._m0[_2853].w + _2746) < 0.5))
        {
            _2912 = true;
            break;
        }
        if ((_2739 + 1.0) < _2737.x)
        {
            _2912 = true;
            break;
        }
        _2912 = false;
        break;
    }
    float _3117;
    if (_2912)
    {
        discard_state = true;
        _3117 = 0.0;
    }
    else
    {
        _3117 = cbInstanceData._m0[_2578].w;
    }
    SV_Target.x = _2743;
    SV_Target.y = _2744;
    SV_Target.z = _2745;
    SV_Target.w = _3117;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2578].w;
    discard_exit();
}


