#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1132;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3770 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _362 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_343.x + 0.00999999977648258209228515625));
    float _364 = _362 * (cbMtdParam._m0[15u].x + 1.0);
    float _3781 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _373 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _365) + _321;
    float _374 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _365) + _322;
    float _375 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _365) + _323;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _390 = _388.x;
    float _408 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _390) * _314) + _390;
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _431 = (_421.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3792 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _453 = _449.z;
    float _456 = (_449.x * 2.0) + (-1.0);
    float _457 = (_449.y * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3803 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))));
    float _466 = (_314 * (_421.z - _453)) + _453;
    float _469 = _362 * (cbMtdParam._m0[14u].w + 1.0);
    float _3814 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _473 = ((cbMtdParam._m0[14u].y - _466) * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) + _466;
    vec4 _500 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _515 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _529 = (_314 * (_429 - _456)) + _456;
    float _530 = (_314 * (_431 - _457)) + _457;
    float _531 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _463)) + _463;
    vec4 _550 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _556 = (_550.x * 2.0) + (-1.0);
    float _557 = (_550.y * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3825 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _574 = (_365 * (((_529 * cbMtdParam._m0[13u].z) - _529) + _556)) + _529;
    float _575 = (_365 * (((_530 * cbMtdParam._m0[13u].z) - _530) + _557)) + _530;
    float _576 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) - _531)) + _531;
    float _579 = fma(_576, _222 * NORMAL.x, fma(_575, _229 * TANGENT.x, (_215 * _207) * _574));
    float _582 = fma(_576, _222 * NORMAL.y, fma(_575, _229 * TANGENT.y, (_215 * _208) * _574));
    float _585 = fma(_576, _222 * NORMAL.z, fma(_575, _229 * TANGENT.z, (_215 * _209) * _574));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3836 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _593 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3858 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3869 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3880 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _597 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _701 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _704 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _718 = _717 + 9u;
    uint _719 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3891 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _731 = 1.0 - _597;
    float _732 = _728 * _731;
    float _733 = _729 * _731;
    float _734 = _730 * _731;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _597;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _597;
    float _741 = (_730 + (-0.039999999105930328369140625)) * _597;
    float _742 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    float _745 = _741 + 0.039999999105930328369140625;
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _757 = _754.x * TEXCOORD_3.w;
    float _758 = dot(vec3(_590, _591, _592), vec3(_671, _672, _673));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _590) - _671;
    float _766 = (_761 * _591) - _672;
    float _767 = (_761 * _592) - _673;
    float _771 = abs(dot(vec3(_671, _672, _673), vec3(_590, _591, _592)));
    float _3924 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_593);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _792 = (1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _793 = _786 * _773;
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_829, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821));
        float _860 = fma(_829, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821));
        float _864 = fma(_829, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821));
        float _889 = _821 + _590;
        float _890 = _825 + _591;
        float _891 = _829 + _592;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _856;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _860;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _864;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_590, _591, _592), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3972 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_590, _591, _592), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _4005 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_590, _591, _592), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4038 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_829, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821));
        float _1176 = fma(_829, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821));
        float _1180 = fma(_829, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821));
        float _1203 = _821 + _590;
        float _1204 = _825 + _591;
        float _1205 = _829 + _592;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_590, _591, _592), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4101 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_590, _591, _592), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4134 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_590, _591, _592), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4167 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1132;
        _1442 = _1132;
        _1443 = _1132;
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = _1132;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1146)) + _1146;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _765 * 0.5;
    float _1510 = _766 * 0.5;
    float _1511 = _767 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_829, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_829, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_829, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1639 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1642 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1670 = frontier_phi_14_12_ladder;
        }
        float _1843;
        if (_1639 > 0.0)
        {
            _1843 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1843 = frontier_phi_23_19_ladder;
        }
        float _2138;
        if (_1642 > 0.0)
        {
            _2138 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2138 = frontier_phi_35_30_ladder;
        }
        float _2140 = isnan(_1843) ? _1670 : (isnan(_1670) ? _1843 : min(_1670, _1843));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1636) + _1625;
        float _2146 = (_2141 * _1639) + _1629;
        float _2147 = (_2141 * _1642) + _1633;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2148;
        float _2152 = _2148 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 > _2152) || ((_2146 < _2150) || ((_2145 < _2150) || (_2145 > _2152))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2147, cbModelParam._m0[9u].z, fma(_2146, cbModelParam._m0[9u].y, _2145 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2147, cbModelParam._m0[10u].z, fma(_2146, cbModelParam._m0[10u].y, _2145 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2147, cbModelParam._m0[11u].z, fma(_2146, cbModelParam._m0[11u].y, _2145 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_13_35_ladder = _2292.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2292.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2292.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_13_35_ladder_2;
        _1660 = frontier_phi_13_35_ladder_1;
        _1662 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1578);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_829, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_829, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_829, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1736 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1739 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1848;
        if (_1733 > 0.0)
        {
            _1848 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_21_ladder;
        }
        float _2165;
        if (_1736 > 0.0)
        {
            _2165 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2165 = frontier_phi_37_32_ladder;
        }
        float _2503;
        if (_1739 > 0.0)
        {
            _2503 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2503 = frontier_phi_47_44_ladder;
        }
        float _2505 = isnan(_2165) ? _1848 : (isnan(_1848) ? _2165 : min(_1848, _2165));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1733) + _1722;
        float _2511 = (_2506 * _1736) + _1726;
        float _2512 = (_2506 * _1739) + _1730;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_22_47_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_22_47_ladder_2;
        _1760 = frontier_phi_22_47_ladder_1;
        _1762 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1667);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1775 = (((_792 * _742) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1777 = (((_792 * _744) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1779 = (((_792 * _745) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1835 = _1822 / _1834;
    float _1836 = _1826 / _1834;
    float _1837 = _1830 / _1834;
    float _1984;
    float _1985;
    float _1986;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1864 = ((uint(_1837 > cbSceneParam._m0[59u].y) + uint(_1837 > cbSceneParam._m0[59u].x)) + uint(_1837 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1865 = _1864 + 43u;
        uint _1873 = _1864 + 44u;
        uint _1881 = _1864 + 45u;
        uint _1889 = _1864 + 46u;
        float _1900 = fma(_1834, cbSceneParam._m0[_1865].w, fma(_1830, cbSceneParam._m0[_1865].z, fma(_1826, cbSceneParam._m0[_1865].y, _1822 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1834, cbSceneParam._m0[_1873].w, fma(_1830, cbSceneParam._m0[_1873].z, fma(_1826, cbSceneParam._m0[_1873].y, _1822 * cbSceneParam._m0[_1873].x)));
        float _1912 = fma(_1834, cbSceneParam._m0[_1889].w, fma(_1830, cbSceneParam._m0[_1889].z, fma(_1826, cbSceneParam._m0[_1889].y, _1822 * cbSceneParam._m0[_1889].x)));
        float _1917 = cbSceneParam._m0[33u].z * _1912;
        float _1919 = cbSceneParam._m0[33u].w * _1912;
        float _1922 = fma(_1834, cbSceneParam._m0[_1881].w, fma(_1830, cbSceneParam._m0[_1881].z, fma(_1826, cbSceneParam._m0[_1881].y, _1822 * cbSceneParam._m0[_1881].x))) / _1912;
        float _1970 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
        float _4293 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1977 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1917 + _1900) / _1912, (_1919 + _1904) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 + _1900) / _1912, (_1904 - _1917) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1917) / _1912, (_1904 - _1919) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1919) / _1912, (_1917 + _1904) / _1912), _1922), 0.0)).x), vec4(0.25)));
        _1984 = 1.0 - (_1977 * cbSceneParam._m0[34u].x);
        _1985 = 1.0 - (_1977 * cbSceneParam._m0[34u].y);
        _1986 = 1.0 - (_1977 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1984 = 1.0;
        _1985 = 1.0;
        _1986 = 1.0;
    }
    float _2050;
    float _2052;
    float _2054;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2038 = fma(_1834, cbSceneParam._m0[63u].w, fma(_1830, cbSceneParam._m0[63u].z, fma(_1826, cbSceneParam._m0[63u].y, _1822 * cbSceneParam._m0[63u].x)));
        float _2039 = fma(_1834, cbSceneParam._m0[60u].w, fma(_1830, cbSceneParam._m0[60u].z, fma(_1826, cbSceneParam._m0[60u].y, _1822 * cbSceneParam._m0[60u].x))) / _2038;
        float _2040 = fma(_1834, cbSceneParam._m0[61u].w, fma(_1830, cbSceneParam._m0[61u].z, fma(_1826, cbSceneParam._m0[61u].y, _1822 * cbSceneParam._m0[61u].x))) / _2038;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2039 >= cbSceneParam._m0[64u].x) && (_2040 >= cbSceneParam._m0[64u].y)) && (_2039 <= cbSceneParam._m0[64u].z)) && (_2040 <= cbSceneParam._m0[64u].w))
        {
            float _2178 = fma(_1834, cbSceneParam._m0[62u].w, fma(_1830, cbSceneParam._m0[62u].z, fma(_1826, cbSceneParam._m0[62u].y, _1822 * cbSceneParam._m0[62u].x))) / _2038;
            float _2182 = isnan(cbSceneParam._m0[41u].w) ? _2178 : (isnan(_2178) ? cbSceneParam._m0[41u].w : max(_2178, cbSceneParam._m0[41u].w));
            float _2225 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
            float _4309 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
            float _2232 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2039, cbSceneParam._m0[33u].w + _2040), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2039, _2040 - cbSceneParam._m0[33u].z), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].z, _2040 - cbSceneParam._m0[33u].w), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2040), _2182), 0.0)).x), vec4(0.25)));
            float _2236 = 1.0 - (_2232 * cbSceneParam._m0[34u].x);
            float _2237 = 1.0 - (_2232 * cbSceneParam._m0[34u].y);
            float _2238 = 1.0 - (_2232 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2238) ? _1986 : (isnan(_1986) ? _2238 : min(_1986, _2238));
            frontier_phi_34_33_ladder_1 = isnan(_2237) ? _1985 : (isnan(_1985) ? _2237 : min(_1985, _2237));
            frontier_phi_34_33_ladder_2 = isnan(_2236) ? _1984 : (isnan(_1984) ? _2236 : min(_1984, _2236));
        }
        else
        {
            frontier_phi_34_33_ladder = _1986;
            frontier_phi_34_33_ladder_1 = _1985;
            frontier_phi_34_33_ladder_2 = _1984;
        }
        _2050 = frontier_phi_34_33_ladder_2;
        _2052 = frontier_phi_34_33_ladder_1;
        _2054 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2050 = _1984;
        _2052 = _1985;
        _2054 = _1986;
    }
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _757 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2097 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2101 = _2061 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_590, _591, _592));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_590, _591, _592));
    float _4345 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4356 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2078].x * _2084) * _2122) + (((cbLight._m0[_2088].x * _2050) * _2097) * _2120);
    float _2130 = ((_2084 * cbLight._m0[_2078].y) * _2122) + (((cbLight._m0[_2088].y * _2052) * _2097) * _2120);
    float _2131 = ((_2084 * cbLight._m0[_2078].z) * _2122) + (((cbLight._m0[_2088].z * _2054) * _2097) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2137)
    {
        _2239 = _2129;
        _2241 = _2130;
        _2243 = _2131;
    }
    else
    {
        uint _2247 = _2061 + 6u;
        float _2263 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4367 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2266 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2239 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2129;
        _2241 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2130;
        _2243 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2131;
    }
    bool _2246 = _2135.y == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2246)
    {
        _2301 = _2239;
        _2303 = _2241;
        _2305 = _2243;
    }
    else
    {
        uint _2474 = _2061 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4383 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2493 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2301 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2239;
        _2303 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2241;
        _2305 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2243;
    }
    uint _2308 = _2061 + 8u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _593) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2061].x + _671;
    float _2324 = cbLight._m0[_2061].y + _672;
    float _2325 = cbLight._m0[_2061].z + _673;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2061].xyz));
    float _4399 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2337 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2338 = dot(vec3(_590, _591, _592), vec3(_2330, _2331, _2332));
    float _4421 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2330, _2331, _2332));
    float _4432 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2322 * _2322;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2359 = 0.959999978542327880859375 - _739;
    float _2361 = 0.959999978542327880859375 - _740;
    float _2362 = 0.959999978542327880859375 - _741;
    float _2369 = 1.0 - _2322;
    float _2380 = (0.5 / (((_2337 * ((_2336 * _2369) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2369) + _2322) * _2336))) * _2336;
    float _4443 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    uint _2396 = _2061 + 9u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _593) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2101].x + _671;
    float _2410 = cbLight._m0[_2101].y + _672;
    float _2411 = cbLight._m0[_2101].z + _673;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2101].xyz));
    float _4454 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2423 = dot(vec3(_590, _591, _592), vec3(_2416, _2417, _2418));
    float _4465 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2416, _2417, _2418));
    float _4476 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2408 * _2408;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2449 = 1.0 - _2408;
    float _2459 = (0.5 / (((_2337 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2449) + _2408) * _2422))) * _2422;
    float _4487 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    float _2471 = (((((_2442 * _2359) + _742) * cbLight._m0[_2396].x) * _2461) * _2084) + ((((cbLight._m0[_2308].x * _2050) * ((_2358 * _2359) + _742)) * _2382) * _2097);
    float _2472 = (((((_2442 * _2361) + _744) * cbLight._m0[_2396].y) * _2461) * _2084) + ((((cbLight._m0[_2308].y * _2052) * ((_2358 * _2361) + _744)) * _2382) * _2097);
    float _2473 = (((((_2442 * _2362) + _745) * cbLight._m0[_2396].z) * _2461) * _2084) + ((((cbLight._m0[_2308].z * _2054) * ((_2358 * _2362) + _745)) * _2382) * _2097);
    float _2529;
    float _2531;
    float _2533;
    if (_2137)
    {
        _2529 = _2471;
        _2531 = _2472;
        _2533 = _2473;
    }
    else
    {
        uint _2535 = _2061 + 2u;
        uint _2539 = _2061 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _593) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _671;
        float _2556 = cbLight._m0[_2535].y + _672;
        float _2557 = cbLight._m0[_2535].z + _673;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2535].xyz));
        float _4498 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2569 = dot(vec3(_590, _591, _592), vec3(_2562, _2563, _2564));
        float _4509 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4520 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2337 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2595) + _2554) * _2568))) * _2568;
        float _4531 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2529 = (((((_2588 * _2359) + _742) * cbLight._m0[_2539].x) * _2607) * _2608) + _2471;
        _2531 = (((((_2588 * _2361) + _744) * cbLight._m0[_2539].y) * _2607) * _2608) + _2472;
        _2533 = (((((_2588 * _2362) + _745) * cbLight._m0[_2539].z) * _2607) * _2608) + _2473;
    }
    float _2639;
    float _2641;
    float _2643;
    if (_2246)
    {
        _2639 = _2529;
        _2641 = _2531;
        _2643 = _2533;
    }
    else
    {
        uint _2650 = _2061 + 3u;
        uint _2654 = _2061 + 11u;
        float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2650].w)) * _593) * 0.949999988079071044921875);
        float _2669 = _2668 * _2668;
        float _2670 = cbLight._m0[_2650].x + _671;
        float _2671 = cbLight._m0[_2650].y + _672;
        float _2672 = cbLight._m0[_2650].z + _673;
        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
        float _2677 = _2676 * _2670;
        float _2678 = _2676 * _2671;
        float _2679 = _2676 * _2672;
        float _2680 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2650].xyz));
        float _4547 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2684 = dot(vec3(_590, _591, _592), vec3(_2677, _2678, _2679));
        float _4558 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2688 = dot(vec3(cbLight._m0[_2650].xyz), vec3(_2677, _2678, _2679));
        float _4569 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2692 = _2669 * _2669;
        float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
        float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2710 = 1.0 - _2669;
        float _2720 = (0.5 / (((_2337 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2710) + _2669) * _2683))) * _2683;
        float _4580 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2639 = (((((_2703 * _2359) + _742) * cbLight._m0[_2654].x) * _2722) * _2723) + _2529;
        _2641 = (((((_2703 * _2361) + _744) * cbLight._m0[_2654].y) * _2722) * _2723) + _2531;
        _2643 = (((((_2703 * _2362) + _745) * cbLight._m0[_2654].z) * _2722) * _2723) + _2533;
    }
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_2059.y == 0u)
    {
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2745)));
        float _2766 = (log2(_1837 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
        }
        else
        {
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            uint _3032 = 0u;
            uint _3041;
            bool _3042;
            for (;;)
            {
                _3041 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                _3042 = _3041 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3042)
                {
                    frontier_phi_66_pred = _3031;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                else
                {
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    uint _3156;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3041;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    for (;;)
                    {
                        uint _3160 = uint(findLSB(_3156)) + (_3032 << 5u);
                        uint _3157 = (_3156 + 4294967295u) & _3156;
                        uint _3162 = _3160 * 48u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3182 = (_3160 * 48u) + 4u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3201 = (_3160 * 48u) + 8u;
                        vec3 _3212 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x));
                        float _3216 = _3176.x - _1835;
                        float _3217 = _3176.y - _1836;
                        float _3218 = _3176.z - _1837;
                        float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                        float _3222 = inversesqrt(_3219);
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3226 = dot(vec3(_698, _701, _704), vec3(_3223, _3224, _3225));
                        float _3231 = 1.0 - (_3219 * _3176.w);
                        float _4606 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3233 = sqrt(_3219) * _3195.w;
                        float _3236 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3226) + _3237;
                        float _3243 = _3233 * _3233;
                        float _3247 = ((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3232) / ((_3243 * 0.699999988079071044921875) + 1.0);
                        float _3251 = (-0.0) - _1835;
                        float _3252 = (-0.0) - _1836;
                        float _3253 = (-0.0) - _1837;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3258 = _3257 * _3251;
                        float _3259 = _3257 * _3252;
                        float _3260 = _3257 * _3253;
                        float _3267 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _773;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3258 + _3223;
                        float _3279 = _3259 + _3224;
                        float _3280 = _3260 + _3225;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_698, _701, _704), vec3(_3258, _3259, _3260));
                        float _4622 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3292 = dot(vec3(_698, _701, _704), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4633 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3236 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3226) + _3301;
                        float _4644 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4655 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3299 * _3299) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125))) * _3232;
                        _3085 = (_3247 * _3195.x) + _3153;
                        _3086 = (_3247 * _3195.y) + _3154;
                        _3087 = (_3247 * _3195.z) + _3155;
                        _3082 = (_3327 * _3212.x) + _3150;
                        _3083 = (_3327 * _3212.y) + _3151;
                        _3084 = (_3327 * _3212.z) + _3152;
                        if (_3157 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3157;
                        }
                    }
                    frontier_phi_66_pred = _3087;
                    frontier_phi_66_pred_1 = _3086;
                    frontier_phi_66_pred_2 = _3085;
                    frontier_phi_66_pred_3 = _3084;
                    frontier_phi_66_pred_4 = _3083;
                    frontier_phi_66_pred_5 = _3082;
                }
                _2892 = frontier_phi_66_pred;
                _2890 = frontier_phi_66_pred_1;
                _2888 = frontier_phi_66_pred_2;
                _2886 = frontier_phi_66_pred_3;
                _2884 = frontier_phi_66_pred_4;
                _2882 = frontier_phi_66_pred_5;
                uint _3033 = _3032 + 1u;
                if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3026 = _2882;
                    _3027 = _2884;
                    _3028 = _2886;
                    _3029 = _2888;
                    _3030 = _2890;
                    _3031 = _2892;
                    _3032 = _3033;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
        }
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.z;
        uint _2898 = (_2896 >> 8u) & 15u;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((4294967295u << _2898) & _2776) == 0u)
        {
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
            _3004 = _2891;
        }
        else
        {
            float _3019 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
            float _3020 = _3019 * _1835;
            float _3021 = _3019 * _1836;
            float _3022 = _3019 * _1837;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2898 < ((_2896 >> 12u) & 15u))
            {
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3133 = _2881;
                float _3134 = _2883;
                float _3135 = _2885;
                float _3136 = _2887;
                float _3137 = _2889;
                float _3138 = _2891;
                uint _3139 = _2898;
                uint _3148;
                bool _3149;
                for (;;)
                {
                    _3148 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                    _3149 = _3148 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3149)
                    {
                        frontier_phi_72_pred = _3138;
                        frontier_phi_72_pred_1 = _3137;
                        frontier_phi_72_pred_2 = _3136;
                        frontier_phi_72_pred_3 = _3135;
                        frontier_phi_72_pred_4 = _3134;
                        frontier_phi_72_pred_5 = _3133;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        uint _3351 = _3148;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3420;
                        vec4 _3436;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3362 = ((_3139 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3407 = (_3362 * 40u) + 16u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3423 = (_3362 * 40u) + 20u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3439 = (_3362 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3362 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_1837, _3471.z, fma(_1836, _3471.y, _3471.x * _1835)) + _3471.w;
                            _3484 = !((fma(_1837, _3452.z, fma(_1836, _3452.y, _3452.x * _1835)) + _3452.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3377.x - _1835;
                                float _3512 = _3377.y - _1836;
                                float _3513 = _3377.z - _1837;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3378 * _3378));
                                float _4666 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3529 = sqrt(_3514) * _3393.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_698, _701, _704))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_1837, _3420.z, fma(_1836, _3420.y, _3420.x * _1835)) + _3420.w) / _3483;
                                float _3543 = (fma(_1837, _3436.z, fma(_1836, _3436.y, _3436.x * _1835)) + _3436.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4682 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _773;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _3020;
                                float _3573 = _3519 - _3021;
                                float _3574 = _3520 - _3022;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_698, _701, _704), vec3((-0.0) - _3020, (-0.0) - _3021, (-0.0) - _3022));
                                float _4693 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3586 = dot(vec3(_698, _701, _704), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4704 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_698, _701, _704), vec3(_3518, _3519, _3520))) + _3595;
                                float _4715 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4726 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3549 * _3393.y;
                                frontier_phi_78_pred_1 = _3549 * _3393.x;
                                frontier_phi_78_pred_2 = _3623 * _3405.z;
                                frontier_phi_78_pred_3 = _3623 * _3405.y;
                                frontier_phi_78_pred_4 = _3623 * _3405.x;
                                frontier_phi_78_pred_5 = _3549 * _3393.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_78_pred;
                            _3630 = frontier_phi_78_pred_1;
                            _3629 = frontier_phi_78_pred_2;
                            _3628 = frontier_phi_78_pred_3;
                            _3627 = frontier_phi_78_pred_4;
                            _3632 = frontier_phi_78_pred_5;
                            _3335 = _3630 + _3348;
                            _3336 = _3631 + _3349;
                            _3337 = _3632 + _3350;
                            _3332 = _3627 + _3345;
                            _3333 = _3628 + _3346;
                            _3334 = _3629 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3337;
                        frontier_phi_72_pred_1 = _3336;
                        frontier_phi_72_pred_2 = _3335;
                        frontier_phi_72_pred_3 = _3334;
                        frontier_phi_72_pred_4 = _3333;
                        frontier_phi_72_pred_5 = _3332;
                    }
                    _3005 = frontier_phi_72_pred;
                    _3003 = frontier_phi_72_pred_1;
                    _3001 = frontier_phi_72_pred_2;
                    _2999 = frontier_phi_72_pred_3;
                    _2997 = frontier_phi_72_pred_4;
                    _2995 = frontier_phi_72_pred_5;
                    uint _3140 = _3139 + 1u;
                    if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3133 = _2995;
                        _3134 = _2997;
                        _3135 = _2999;
                        _3136 = _3001;
                        _3137 = _3003;
                        _3138 = _3005;
                        _3139 = _3140;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3005;
                frontier_phi_60_61_ladder_1 = _3003;
                frontier_phi_60_61_ladder_2 = _2999;
                frontier_phi_60_61_ladder_3 = _2997;
                frontier_phi_60_61_ladder_4 = _2995;
                frontier_phi_60_61_ladder_5 = _3001;
            }
            else
            {
                frontier_phi_60_61_ladder = _2891;
                frontier_phi_60_61_ladder_1 = _2889;
                frontier_phi_60_61_ladder_2 = _2885;
                frontier_phi_60_61_ladder_3 = _2883;
                frontier_phi_60_61_ladder_4 = _2881;
                frontier_phi_60_61_ladder_5 = _2887;
            }
            _2994 = frontier_phi_60_61_ladder_4;
            _2996 = frontier_phi_60_61_ladder_3;
            _2998 = frontier_phi_60_61_ladder_2;
            _3000 = frontier_phi_60_61_ladder_5;
            _3002 = frontier_phi_60_61_ladder_1;
            _3004 = frontier_phi_60_61_ladder;
        }
        float _3009 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2789 = (_3009 * _3000) + _2301;
        _2791 = (_3009 * _3002) + _2303;
        _2793 = (_3009 * _3004) + _2305;
        _2795 = ((_2994 * _742) * _3009) + _2639;
        _2797 = ((_2996 * _744) * _3009) + _2641;
        _2799 = ((_2998 * _745) * _3009) + _2643;
    }
    else
    {
        _2789 = _2301;
        _2791 = _2303;
        _2793 = _2305;
        _2795 = _2639;
        _2797 = _2641;
        _2799 = _2643;
    }
    uint _2805 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _4742 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4753 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4764 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2836 = (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2789 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _757))) + ((_2795 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + (((_365 * cbMtdParam._m0[11u].x) * (_515.x + _500.x)) * cbInstanceData._m0[_2805].x);
    float _2838 = ((((_365 * cbMtdParam._m0[11u].y) * (_515.y + _500.y)) * cbInstanceData._m0[_2805].y) + ((_2797 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2791 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _757)));
    float _2840 = ((((_365 * cbMtdParam._m0[11u].z) * (_515.z + _500.z)) * cbInstanceData._m0[_2805].z) + ((_2799 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2793 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _757)));
    uint _2844 = _717 + 6u;
    float _2852 = _679 / cbSceneParam._m0[86u].x;
    float _2853 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2869 = _2867.x;
    float _2870 = _2867.y;
    float _2871 = _2867.z;
    float _2872 = _2867.w;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2906 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2907 = _2906 / _613;
        float _2918 = _2907 * _664;
        float _2919 = _665 * _2907;
        float _2920 = (-0.0) - _2919;
        float _2922 = _2907 * _666;
        float _2924 = (cbSceneParam._m0[77u].w * _2920) / _2906;
        float _2925 = _2924 + cbSceneParam._m0[79u].w;
        float _2926 = cbSceneParam._m0[79u].w - _2919;
        float _2932 = sqrt(((_2918 * _2918) + (_2919 * _2919)) + (_2922 * _2922));
        float _2935 = (1.0 - (cbSceneParam._m0[77u].w / _2906)) * _2932;
        float _2940 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2942 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3095;
        if (abs((_2920 - _2924) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3095 = ((((_2925 > 0.0) ? exp2(_2940 * _2925) : (2.0 - exp2(_2942 * _2925))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2935;
        }
        else
        {
            float _3055 = 1.0 / cbSceneParam._m0[80u].x;
            float _3056 = isnan(_2926) ? _2925 : (isnan(_2925) ? _2926 : max(_2925, _2926));
            float _3057 = isnan(_2926) ? _2925 : (isnan(_2925) ? _2926 : min(_2925, _2926));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            _3095 = ((abs(_2932 / _2920) * cbSceneParam._m0[80u].y) * ((((_3066 - _3067) * 2.0) - ((exp2(_2940 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0)))) - exp2(_2940 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))))) * _3055)) - ((exp2(_2942 * _3066) - exp2(_2942 * _3067)) * _3055))) + (_2935 * cbSceneParam._m0[80u].z);
        }
        vec4 _3097 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, 1.0), 0.0);
        float _3106 = exp2((_3095 * (-1.44269502162933349609375)) * (1.0 - _3097.w));
        float _3107 = log2(_3106);
        float _3123 = log2(_2872);
        _2944 = (exp2(_3123 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].x)) * _3097.x) / cbSceneParam._m0[78u].x)) + _2869;
        _2946 = (exp2(_3123 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].y)) * _3097.y) / cbSceneParam._m0[78u].y)) + _2870;
        _2948 = (exp2(_3123 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].z)) * _3097.z) / cbSceneParam._m0[78u].z)) + _2871;
        _2950 = _3106 * _2872;
    }
    else
    {
        _2944 = _2869;
        _2946 = _2870;
        _2948 = _2871;
        _2950 = _2872;
    }
    float _2962 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2963 = _2962 == 3.0;
    float _2964 = log2(_2950);
    float _2971 = exp2(_2964 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)));
    float _2972 = exp2(_2964 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)));
    float _2973 = exp2(_2964 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0)));
    float _2982 = (_2962 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2982 * (_2963 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.y = _2982 * (_2963 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.z = _2982 * (_2963 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.w = cbInstanceData._m0[_2844].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2844].w;
}


