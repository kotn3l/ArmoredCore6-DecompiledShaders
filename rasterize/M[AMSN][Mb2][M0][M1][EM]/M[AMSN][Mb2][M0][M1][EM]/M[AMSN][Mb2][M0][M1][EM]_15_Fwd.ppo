#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1110;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3444 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _358 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_339.x + 0.00999999977648258209228515625));
    float _360 = _358 * (cbMtdParam._m0[15u].x + 1.0);
    float _3455 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _369 = ((((cbMtdParam._m0[12u].x - _317) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _361) + _317;
    float _370 = ((((cbMtdParam._m0[12u].y - _318) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _361) + _318;
    float _371 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _319)) * _361) + _319;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _392 = (_384.x * 2.0) + (-1.0);
    float _394 = (_384.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_392, _394), vec2(_392, _394));
    float _3466 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    vec4 _412 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _416 = _412.z;
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3477 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _429 = (_310 * (_384.z - _416)) + _416;
    float _432 = _358 * (cbMtdParam._m0[14u].w + 1.0);
    float _3488 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _436 = ((cbMtdParam._m0[14u].y - _429) * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) + _429;
    vec4 _462 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_5, SS_WrapLinear), vec2((((cbMtdParam._m0[16u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _503 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _517 = (TEXCOORD_6.x - ((cbMtdParam._m0[13u].w * (1.0 - TEXCOORD_6.x)) * (_462.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].x + 1.0);
    float _3499 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _525 = (_310 * (_392 - _419)) + _419;
    float _526 = (_310 * (_394 - _420)) + _420;
    float _527 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) - _426)) + _426;
    vec4 _546 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _552 = (_546.x * 2.0) + (-1.0);
    float _553 = (_546.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3510 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _570 = (_361 * (((_525 * cbMtdParam._m0[13u].z) - _525) + _552)) + _525;
    float _571 = (_361 * (((_526 * cbMtdParam._m0[13u].z) - _526) + _553)) + _526;
    float _572 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) - _527)) + _527;
    float _575 = fma(_572, _218 * NORMAL.x, fma(_571, _225 * TANGENT.x, (_211 * _203) * _570));
    float _578 = fma(_572, _218 * NORMAL.y, fma(_571, _225 * TANGENT.y, (_211 * _204) * _570));
    float _581 = fma(_572, _218 * NORMAL.z, fma(_571, _225 * TANGENT.z, (_211 * _205) * _570));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3521 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _589 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3543 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3554 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _658 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _648);
    float _659 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _648);
    float _660 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _648);
    float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
    float _665 = _658 * _664;
    float _666 = _659 * _664;
    float _667 = _660 * _664;
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _697 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _700 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _714 = _713 + 9u;
    uint _715 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3565 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _738 = _735.x * TEXCOORD_3.w;
    float _739 = dot(vec3(_586, _587, _588), vec3(_665, _666, _667));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _586) - _665;
    float _747 = (_742 * _587) - _666;
    float _748 = (_742 * _588) - _667;
    float _752 = abs(dot(vec3(_665, _666, _667), vec3(_586, _587, _588)));
    float _3598 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_589);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _838 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _842 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _867 = _799 + _586;
        float _868 = _803 + _587;
        float _869 = _807 + _588;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_586, _587, _588), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3646 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_586, _587, _588), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3679 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_586, _587, _588), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3712 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1154 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1158 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1181 = _799 + _586;
        float _1182 = _803 + _587;
        float _1183 = _807 + _588;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_586, _587, _588), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3775 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_586, _587, _588), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3808 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_586, _587, _588), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3841 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1110;
        _1420 = _1110;
        _1421 = _1110;
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1122)) + _1122;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1123)) + _1123;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1124)) + _1124;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _746 * 0.5;
    float _1488 = _747 * 0.5;
    float _1489 = _748 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1617 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1620 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1648 = frontier_phi_14_12_ladder;
        }
        float _1850;
        if (_1617 > 0.0)
        {
            _1850 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1850 = frontier_phi_23_19_ladder;
        }
        float _2093;
        if (_1620 > 0.0)
        {
            _2093 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2093 = frontier_phi_35_30_ladder;
        }
        float _2095 = isnan(_1850) ? _1648 : (isnan(_1648) ? _1850 : min(_1648, _1850));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1614) + _1603;
        float _2101 = (_2096 * _1617) + _1607;
        float _2102 = (_2096 * _1620) + _1611;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2103;
        float _2107 = _2103 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 > _2107) || ((_2101 < _2105) || ((_2100 < _2105) || (_2100 > _2107))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2102, cbModelParam._m0[9u].z, fma(_2101, cbModelParam._m0[9u].y, _2100 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2102, cbModelParam._m0[10u].z, fma(_2101, cbModelParam._m0[10u].y, _2100 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2102, cbModelParam._m0[11u].z, fma(_2101, cbModelParam._m0[11u].y, _2100 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_13_35_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_13_35_ladder_2;
        _1638 = frontier_phi_13_35_ladder_1;
        _1640 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1556);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1700 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1704 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1708 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1711 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1714 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1717 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1855;
        if (_1711 > 0.0)
        {
            _1855 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1855 = frontier_phi_25_21_ladder;
        }
        float _2120;
        if (_1714 > 0.0)
        {
            _2120 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2120 = frontier_phi_37_32_ladder;
        }
        float _2325;
        if (_1717 > 0.0)
        {
            _2325 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2325 = frontier_phi_46_43_ladder;
        }
        float _2327 = isnan(_2120) ? _1855 : (isnan(_1855) ? _2120 : min(_1855, _2120));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1711) + _1700;
        float _2333 = (_2328 * _1714) + _1704;
        float _2334 = (_2328 * _1717) + _1708;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_22_46_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1736 = frontier_phi_22_46_ladder_2;
        _1738 = frontier_phi_22_46_ladder_1;
        _1740 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1645);
        _1736 = _1720.x * cbModelParam._m0[1u].z;
        _1738 = _1720.y * cbModelParam._m0[1u].z;
        _1740 = _1720.z * cbModelParam._m0[1u].z;
    }
    float _1752 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1753 = _1752 * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1754 = _1752 * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1755 = _1752 * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1758 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1753 * cbSceneParam._m0[91u].x));
    uvec4 _1774 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1776 = _1774.x * 14u;
    uint _1777 = _1776 + 13u;
    float _1784 = _738 + (-1.0);
    float _1789 = (cbLight._m0[_1777].x * _1784) + 1.0;
    float _1790 = (cbLight._m0[_1777].y * _1784) + 1.0;
    float _1791 = (cbLight._m0[_1777].z * _1784) + 1.0;
    float _1792 = (cbLight._m0[_1777].w * _1784) + 1.0;
    uint _1793 = _1776 + 5u;
    float _1799 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1803 = _1776 + 4u;
    float _1809 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1813 = _1776 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_586, _587, _588));
    float _1827 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_586, _587, _588));
    float _3977 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _3988 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1832 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1834 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1841 = ((cbLight._m0[_1793].x * _1799) * _1834) + ((cbLight._m0[_1803].x * _1809) * _1832);
    float _1842 = ((_1799 * cbLight._m0[_1793].y) * _1834) + ((_1809 * cbLight._m0[_1803].y) * _1832);
    float _1843 = ((_1799 * cbLight._m0[_1793].z) * _1834) + ((_1809 * cbLight._m0[_1803].z) * _1832);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1776 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1849)
    {
        _1860 = _1841;
        _1862 = _1842;
        _1864 = _1843;
    }
    else
    {
        uint _1868 = _1776 + 6u;
        float _1884 = (dot(vec3(cbLight._m0[_1776 + 2u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3999 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1887 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1860 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1841;
        _1862 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1842;
        _1864 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1843;
    }
    bool _1867 = _1847.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1867)
    {
        _1905 = _1860;
        _1907 = _1862;
        _1909 = _1864;
    }
    else
    {
        uint _2064 = _1776 + 7u;
        float _2080 = (dot(vec3(cbLight._m0[_1776 + 3u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _4015 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2083 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1905 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _1860;
        _1907 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _1862;
        _1909 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _1864;
    }
    uint _1912 = _1776 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _589) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1776].x + _665;
    float _1928 = cbLight._m0[_1776].y + _666;
    float _1929 = cbLight._m0[_1776].z + _667;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1776].xyz));
    float _4031 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1941 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1942 = dot(vec3(_586, _587, _588), vec3(_1934, _1935, _1936));
    float _4053 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1934, _1935, _1936));
    float _4064 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1941 * ((_1940 * _1966) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1966) + _1926) * _1940))) * _1940;
    float _4075 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _1990 = _1776 + 9u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _589) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1813].x + _665;
    float _2004 = cbLight._m0[_1813].y + _666;
    float _2005 = cbLight._m0[_1813].z + _667;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1813].xyz));
    float _4086 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2017 = dot(vec3(_586, _587, _588), vec3(_2010, _2011, _2012));
    float _4097 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_2010, _2011, _2012));
    float _4108 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2002 * _2002;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = 1.0 - _2002;
    float _2049 = (0.5 / (((_1941 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2039) + _2002) * _2016))) * _2016;
    float _4119 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    float _2061 = (((_2038 * cbLight._m0[_1990].x) * _2051) * _1799) + (((_1965 * cbLight._m0[_1912].x) * _1979) * _1809);
    float _2062 = (((_2038 * cbLight._m0[_1990].y) * _2051) * _1799) + (((_1965 * cbLight._m0[_1912].y) * _1979) * _1809);
    float _2063 = (((_2038 * cbLight._m0[_1990].z) * _2051) * _1799) + (((_1965 * cbLight._m0[_1912].z) * _1979) * _1809);
    float _2125;
    float _2127;
    float _2129;
    if (_1849)
    {
        _2125 = _2061;
        _2127 = _2062;
        _2129 = _2063;
    }
    else
    {
        uint _2131 = _1776 + 2u;
        uint _2135 = _1776 + 10u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _589) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _665;
        float _2152 = cbLight._m0[_2131].y + _666;
        float _2153 = cbLight._m0[_2131].z + _667;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2131].xyz));
        float _4130 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2165 = dot(vec3(_586, _587, _588), vec3(_2158, _2159, _2160));
        float _4141 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4152 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2187 = 1.0 - _2150;
        float _2197 = (0.5 / (((_1941 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2187) + _2150) * _2164))) * _2164;
        float _4163 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2125 = (((_2186 * cbLight._m0[_2135].x) * _2199) * _2200) + _2061;
        _2127 = (((_2186 * cbLight._m0[_2135].y) * _2199) * _2200) + _2062;
        _2129 = (((_2186 * cbLight._m0[_2135].z) * _2199) * _2200) + _2063;
    }
    float _2235;
    float _2237;
    float _2239;
    if (_1867)
    {
        _2235 = _2125;
        _2237 = _2127;
        _2239 = _2129;
    }
    else
    {
        uint _2246 = _1776 + 3u;
        uint _2250 = _1776 + 11u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _589) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _665;
        float _2267 = cbLight._m0[_2246].y + _666;
        float _2268 = cbLight._m0[_2246].z + _667;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2246].xyz));
        float _4179 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2280 = dot(vec3(_586, _587, _588), vec3(_2273, _2274, _2275));
        float _4190 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4201 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2302 = 1.0 - _2265;
        float _2312 = (0.5 / (((_1941 * ((_2279 * _2302) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2302) + _2265) * _2279))) * _2279;
        float _4212 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2235 = (((_2301 * cbLight._m0[_2250].x) * _2314) * _2315) + _2125;
        _2237 = (((_2301 * cbLight._m0[_2250].y) * _2314) * _2315) + _2127;
        _2239 = (((_2301 * cbLight._m0[_2250].z) * _2314) * _2315) + _2129;
    }
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_1774.y == 0u)
    {
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2390;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2390;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2390;
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.x;
        uint _2417 = uint((float(_2405.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2406))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2406)));
        float _2427 = (log2(_2393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        uint _2431 = uint(isnan(14.0) ? _2428 : (isnan(_2428) ? 14.0 : min(_2428, 14.0)));
        uvec4 _2436 = texelFetch(g_lightClusterGridBuffer, int(((_2431 << 2u) + (_2417 << 6u)) >> 2u));
        uint _2437 = _2436.x;
        uint _2438 = _2405.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2438 >> 4u) & 15u)) + 4294967295u) & _2437) == 0u) || ((_2438 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2724)
                {
                    frontier_phi_61_pred = _2708;
                    frontier_phi_61_pred_1 = _2713;
                    frontier_phi_61_pred_2 = _2712;
                    frontier_phi_61_pred_3 = _2711;
                    frontier_phi_61_pred_4 = _2710;
                    frontier_phi_61_pred_5 = _2709;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2723;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2714 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2391;
                        float _2899 = _2858.y - _2392;
                        float _2900 = _2858.z - _2393;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_694, _697, _700), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4238 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2391;
                        float _2934 = (-0.0) - _2392;
                        float _2935 = (-0.0) - _2393;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _754;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_694, _697, _700), vec3(_2940, _2941, _2942));
                        float _4254 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2975 = dot(vec3(_694, _697, _700), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4265 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4276 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4287 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2767 = (_2929 * _2877.x) + _2835;
                        _2768 = (_2929 * _2877.y) + _2836;
                        _2769 = (_2929 * _2877.z) + _2837;
                        _2764 = (_3010 * _2894.x) + _2832;
                        _2765 = (_3010 * _2894.y) + _2833;
                        _2766 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_61_pred = _2764;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2765;
                }
                _2564 = frontier_phi_61_pred;
                _2574 = frontier_phi_61_pred_1;
                _2572 = frontier_phi_61_pred_2;
                _2570 = frontier_phi_61_pred_3;
                _2568 = frontier_phi_61_pred_4;
                _2566 = frontier_phi_61_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2564;
                    _2709 = _2566;
                    _2710 = _2568;
                    _2711 = _2570;
                    _2712 = _2572;
                    _2713 = _2574;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2580) & _2437) == 0u)
        {
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
            float _2702 = _2701 * _2391;
            float _2703 = _2701 * _2392;
            float _2704 = _2701 * _2393;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2815 = _2563;
                float _2816 = _2565;
                float _2817 = _2567;
                float _2818 = _2569;
                float _2819 = _2571;
                float _2820 = _2573;
                uint _2821 = _2580;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2831)
                    {
                        frontier_phi_67_pred = _2818;
                        frontier_phi_67_pred_1 = _2819;
                        frontier_phi_67_pred_2 = _2820;
                        frontier_phi_67_pred_3 = _2817;
                        frontier_phi_67_pred_4 = _2816;
                        frontier_phi_67_pred_5 = _2815;
                    }
                    else
                    {
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        uint _3034 = _2830;
                        uint _3035;
                        vec4 _3060;
                        float _3061;
                        vec4 _3076;
                        vec3 _3088;
                        vec4 _3103;
                        vec4 _3119;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3045 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3034));
                            _3035 = (_3034 + 4294967295u) & _3034;
                            uint _3047 = _3045 * 40u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3061 = _3060.w;
                            uint _3063 = (_3045 * 40u) + 4u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3045 * 40u) + 8u;
                            _3088 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x));
                            uint _3090 = (_3045 * 40u) + 16u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3045 * 40u) + 20u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3045 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3045 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_2393, _3154.z, fma(_2392, _3154.y, _3154.x * _2391)) + _3154.w;
                            _3167 = !((fma(_2393, _3135.z, fma(_2392, _3135.y, _3135.x * _2391)) + _3135.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3060.x - _2391;
                                float _3195 = _3060.y - _2392;
                                float _3196 = _3060.z - _2393;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3061 * _3061));
                                float _4298 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3212 = sqrt(_3197) * _3076.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_694, _697, _700))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_2393, _3103.z, fma(_2392, _3103.y, _3103.x * _2391)) + _3103.w) / _3166;
                                float _3226 = (fma(_2393, _3119.z, fma(_2392, _3119.y, _3119.x * _2391)) + _3119.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4314 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _754;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2702;
                                float _3256 = _3202 - _2703;
                                float _3257 = _3203 - _2704;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4325 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3269 = dot(vec3(_694, _697, _700), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4336 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_694, _697, _700), vec3(_3201, _3202, _3203))) + _3278;
                                float _4347 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4358 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3306 * _3088.x;
                                frontier_phi_73_pred_1 = _3306 * _3088.y;
                                frontier_phi_73_pred_2 = _3232 * _3076.z;
                                frontier_phi_73_pred_3 = _3232 * _3076.y;
                                frontier_phi_73_pred_4 = _3232 * _3076.x;
                                frontier_phi_73_pred_5 = _3306 * _3088.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_73_pred;
                            _3311 = frontier_phi_73_pred_1;
                            _3315 = frontier_phi_73_pred_2;
                            _3314 = frontier_phi_73_pred_3;
                            _3313 = frontier_phi_73_pred_4;
                            _3312 = frontier_phi_73_pred_5;
                            _3018 = _3313 + _3031;
                            _3019 = _3314 + _3032;
                            _3020 = _3315 + _3033;
                            _3015 = _3310 + _3028;
                            _3016 = _3311 + _3029;
                            _3017 = _3312 + _3030;
                            if (_3035 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3035;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3018;
                        frontier_phi_67_pred_1 = _3019;
                        frontier_phi_67_pred_2 = _3020;
                        frontier_phi_67_pred_3 = _3017;
                        frontier_phi_67_pred_4 = _3016;
                        frontier_phi_67_pred_5 = _3015;
                    }
                    _2683 = frontier_phi_67_pred;
                    _2685 = frontier_phi_67_pred_1;
                    _2687 = frontier_phi_67_pred_2;
                    _2681 = frontier_phi_67_pred_3;
                    _2679 = frontier_phi_67_pred_4;
                    _2677 = frontier_phi_67_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2677;
                        _2816 = _2679;
                        _2817 = _2681;
                        _2818 = _2683;
                        _2819 = _2685;
                        _2820 = _2687;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2685;
                frontier_phi_55_56_ladder_1 = _2687;
                frontier_phi_55_56_ladder_2 = _2683;
                frontier_phi_55_56_ladder_3 = _2681;
                frontier_phi_55_56_ladder_4 = _2679;
                frontier_phi_55_56_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_55_56_ladder = _2571;
                frontier_phi_55_56_ladder_1 = _2573;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2565;
                frontier_phi_55_56_ladder_5 = _2563;
            }
            _2676 = frontier_phi_55_56_ladder_5;
            _2678 = frontier_phi_55_56_ladder_4;
            _2680 = frontier_phi_55_56_ladder_3;
            _2682 = frontier_phi_55_56_ladder_2;
            _2684 = frontier_phi_55_56_ladder;
            _2686 = frontier_phi_55_56_ladder_1;
        }
        float _2691 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2450 = (_2691 * _2682) + _1905;
        _2452 = (_2691 * _2684) + _1907;
        _2454 = (_2691 * _2686) + _1909;
        _2456 = ((_2676 * 0.039999999105930328369140625) * _2691) + _2235;
        _2458 = ((_2678 * 0.039999999105930328369140625) * _2691) + _2237;
        _2460 = ((_2680 * 0.039999999105930328369140625) * _2691) + _2239;
    }
    else
    {
        _2450 = _1905;
        _2452 = _1907;
        _2454 = _1909;
        _2456 = _2235;
        _2458 = _2237;
        _2460 = _2239;
    }
    uint _2466 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _4374 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4385 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4396 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2497 = (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2450 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _738))) + ((_2456 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + (((_518 * cbMtdParam._m0[11u].x) * (_503.x + _488.x)) * cbInstanceData._m0[_2466].x);
    float _2499 = ((((_518 * cbMtdParam._m0[11u].y) * (_503.y + _488.y)) * cbInstanceData._m0[_2466].y) + ((_2458 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2452 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _738)));
    float _2501 = ((((_518 * cbMtdParam._m0[11u].z) * (_503.z + _488.z)) * cbInstanceData._m0[_2466].z) + ((_2460 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2454 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _738)));
    uint _2505 = _713 + 6u;
    float _2513 = _673 / cbSceneParam._m0[86u].x;
    float _2514 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2589 = _2588 / _608;
        float _2600 = _2589 * _658;
        float _2601 = _659 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2604 = _2589 * _660;
        float _2606 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2601;
        float _2614 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2602 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2739 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2777 = ((abs(_2614 / _2602) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2624 * _2748) - exp2(_2624 * _2749)) * _2737))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2533);
        _2626 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2628 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2630 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2632 = _2788 * _2533;
    }
    else
    {
        _2626 = _2530;
        _2628 = _2531;
        _2630 = _2532;
        _2632 = _2533;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2632);
    float _2653 = exp2(_2646 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)));
    float _2654 = exp2(_2646 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)));
    float _2655 = exp2(_2646 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0)));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.w = cbInstanceData._m0[_2505].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
}


