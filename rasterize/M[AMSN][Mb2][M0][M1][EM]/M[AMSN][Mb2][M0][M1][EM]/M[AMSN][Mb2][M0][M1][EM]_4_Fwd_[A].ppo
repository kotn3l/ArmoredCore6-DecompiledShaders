#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1038;
float _3427;
float _3428;
float _3429;
float _3430;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _303 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3439 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _311 = (((_287.x * cbMtdParam._m0[10u].x) - _247) * _304) + _247;
    float _312 = (((_287.y * cbMtdParam._m0[10u].y) - _248) * _304) + _248;
    float _313 = (((_287.z * cbMtdParam._m0[10u].z) - _249) * _304) + _249;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _348 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3450 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    vec4 _376 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _380 = _376.z;
    float _383 = (_376.x * 2.0) + (-1.0);
    float _384 = (_376.y * 2.0) + (-1.0);
    float _385 = dot(vec2(_383, _384), vec2(_383, _384));
    float _3461 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _390 = sqrt(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))));
    float _393 = (_304 * (_348.z - _380)) + _380;
    vec4 _420 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _435 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _449 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_333.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3472 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _457 = (_304 * (_356 - _383)) + _383;
    float _458 = (_304 * (_358 - _384)) + _384;
    float _459 = (_304 * (sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) - _390)) + _390;
    float _462 = fma(_459, _212 * NORMAL.x, fma(_458, _219 * TANGENT.x, (_205 * _197) * _457));
    float _465 = fma(_459, _212 * NORMAL.y, fma(_458, _219 * TANGENT.y, (_205 * _198) * _457));
    float _468 = fma(_459, _212 * NORMAL.z, fma(_458, _219 * TANGENT.z, (_205 * _199) * _457));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3483 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _476 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3505 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3516 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    vec4 _560 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _562 = _560.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _718 = sqrt(((_546 * _546) + (_547 * _547)) + (_548 * _548));
        float _724 = (cbMatDynParam._m0[5u].x * _718) + cbMatDynParam._m0[5u].y;
        float _3527 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _729 = (cbMatDynParam._m0[5u].z * _718) + cbMatDynParam._m0[5u].w;
        float _3538 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) - _725)) + _725) < ((_562 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _574 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _575 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _597 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _600 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _613 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_615].x;
    float _622 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_615].y;
    float _623 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_615].z;
    float _3549 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    vec4 _635 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _575));
    float _638 = _635.x * TEXCOORD_3.w;
    float _639 = dot(vec3(_473, _474, _475), vec3(_553, _554, _555));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _473) - _553;
    float _647 = (_642 * _474) - _554;
    float _648 = (_642 * _475) - _555;
    float _652 = abs(dot(vec3(_553, _554, _555), vec3(_473, _474, _475)));
    float _3582 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_476);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _766 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _770 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _795 = _699 + _473;
        float _796 = _703 + _474;
        float _797 = _707 + _475;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _762;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _766;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _770;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_473, _474, _475), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3630 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_473, _474, _475), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3663 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_473, _474, _475), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3696 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1081 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1085 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1089 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1112 = _699 + _473;
        float _1113 = _703 + _474;
        float _1114 = _707 + _475;
        float _1124 = fma(_1114, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112)) - _1081;
        float _1125 = fma(_1114, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112)) - _1085;
        float _1126 = fma(_1114, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112)) - _1089;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1081 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1085 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[35u].z) + ((((((_1089 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1180 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1147.x + (-0.5));
        float _1182 = _1180 * (_1147.y + (-0.5));
        float _1183 = _1180 * (_1147.z + (-0.5));
        float _1190 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1154.x + (-0.5));
        float _1192 = _1190 * (_1154.y + (-0.5));
        float _1193 = _1190 * (_1154.z + (-0.5));
        float _1200 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1161.x + (-0.5));
        float _1202 = _1200 * (_1161.y + (-0.5));
        float _1203 = _1200 * (_1161.z + (-0.5));
        float _1210 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1168.x + (-0.5));
        float _1212 = _1210 * (_1168.y + (-0.5));
        float _1213 = _1210 * (_1168.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_473, _474, _475), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3759 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1244 + 1.0))) + _1249) * _1214;
        float _1259 = _1182 * 0.5;
        float _1260 = _1192 * 0.5;
        float _1261 = _1202 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_473, _474, _475), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3792 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1286 + 1.0))) + _1291) * _1215;
        float _1301 = _1183 * 0.5;
        float _1302 = _1193 * 0.5;
        float _1303 = _1203 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_473, _474, _475), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3825 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1328 + 1.0))) + _1333) * _1216;
        _1350 = _1183;
        _1351 = _1182;
        _1352 = _1181;
        _1353 = _1193;
        _1354 = _1192;
        _1355 = _1191;
        _1356 = _1203;
        _1357 = _1202;
        _1358 = _1201;
        _1359 = _1216;
        _1360 = _1215;
        _1361 = _1214;
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = _1038;
        _1358 = _1038;
        _1359 = _1038;
        _1360 = _1038;
        _1361 = _1038;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1051)) + _1051;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1052)) + _1052;
    float _1397 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1374));
    float _1418 = _646 * 0.5;
    float _1419 = _647 * 0.5;
    float _1420 = _648 * 0.5;
    float _1421 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1424 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1427 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1461;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1434 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1438 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1442 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1449 = dot(vec4(cbModelParam._m0[39u]), vec4(_1418, _1419, _1420, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1418, _1419, _1420, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1461 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1548 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1551 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1579 = frontier_phi_17_15_ladder;
        }
        float _1782;
        if (_1548 > 0.0)
        {
            _1782 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1782 = frontier_phi_26_22_ladder;
        }
        float _2025;
        if (_1551 > 0.0)
        {
            _2025 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2025 = frontier_phi_38_33_ladder;
        }
        float _2027 = isnan(_1782) ? _1579 : (isnan(_1579) ? _1782 : min(_1579, _1782));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1545) + _1534;
        float _2033 = (_2028 * _1548) + _1538;
        float _2034 = (_2028 * _1551) + _1542;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2037 = (-1.0) - _2035;
        float _2039 = _2035 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2034 > _2039) || ((_2034 < _2037) || ((_2033 > _2039) || ((_2033 < _2037) || ((_2032 < _2037) || (_2032 > _2039))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2034, cbModelParam._m0[9u].z, fma(_2033, cbModelParam._m0[9u].y, _2032 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2034, cbModelParam._m0[10u].z, fma(_2033, cbModelParam._m0[10u].y, _2032 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2034, cbModelParam._m0[11u].z, fma(_2033, cbModelParam._m0[11u].y, _2032 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_16_38_ladder = _2158.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2158.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2158.x * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_16_38_ladder_2;
        _1569 = frontier_phi_16_38_ladder_1;
        _1571 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1487);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1631 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1635 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1639 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1642 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1645 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1648 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1787;
        if (_1642 > 0.0)
        {
            _1787 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1787 = frontier_phi_28_24_ladder;
        }
        float _2052;
        if (_1645 > 0.0)
        {
            _2052 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2052 = frontier_phi_40_35_ladder;
        }
        float _2257;
        if (_1648 > 0.0)
        {
            _2257 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2257 = frontier_phi_49_46_ladder;
        }
        float _2259 = isnan(_2052) ? _1787 : (isnan(_1787) ? _2052 : min(_1787, _2052));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1642) + _1631;
        float _2265 = (_2260 * _1645) + _1635;
        float _2266 = (_2260 * _1648) + _1639;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2267;
        float _2270 = _2267 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2266 > _2270) || ((_2266 < _2268) || ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 < _2268) || (_2264 > _2270))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2266, cbModelParam._m0[17u].z, fma(_2265, cbModelParam._m0[17u].y, _2264 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2266, cbModelParam._m0[18u].z, fma(_2265, cbModelParam._m0[18u].y, _2264 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2266, cbModelParam._m0[19u].z, fma(_2265, cbModelParam._m0[19u].y, _2264 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_25_49_ladder = _2490.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2490.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2490.x * cbModelParam._m0[1u].z;
        }
        _1667 = frontier_phi_25_49_ladder_2;
        _1669 = frontier_phi_25_49_ladder_1;
        _1671 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1576);
        _1667 = _1651.x * cbModelParam._m0[1u].z;
        _1669 = _1651.y * cbModelParam._m0[1u].z;
        _1671 = _1651.z * cbModelParam._m0[1u].z;
    }
    float _1683 = ((((1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_667 * _654)) * _638;
    float _1684 = _1683 * ((cbModelParam._m0[1u].w * (_1667 - _1567)) + _1567);
    float _1685 = _1683 * ((cbModelParam._m0[1u].w * (_1669 - _1569)) + _1569);
    float _1686 = _1683 * ((cbModelParam._m0[1u].w * (_1671 - _1571)) + _1571);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1684 * cbSceneParam._m0[91u].x));
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _638 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1740 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1744 = _1707 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_473, _474, _475));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_473, _474, _475));
    float _3961 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3972 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1724].x * _1730) * _1765) + ((cbLight._m0[_1734].x * _1740) * _1763);
    float _1773 = ((_1730 * cbLight._m0[_1724].y) * _1765) + ((_1740 * cbLight._m0[_1734].y) * _1763);
    float _1774 = ((_1730 * cbLight._m0[_1724].z) * _1765) + ((_1740 * cbLight._m0[_1734].z) * _1763);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1772;
        _1794 = _1773;
        _1796 = _1774;
    }
    else
    {
        uint _1800 = _1707 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3983 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1819 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1772;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _1996 = _1707 + 7u;
        float _2012 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _3999 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2015 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1837 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1792;
        _1839 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1794;
        _1841 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1796;
    }
    uint _1844 = _1707 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _476) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1707].x + _553;
    float _1860 = cbLight._m0[_1707].y + _554;
    float _1861 = cbLight._m0[_1707].z + _555;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1707].xyz));
    float _4015 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _1873 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1874 = dot(vec3(_473, _474, _475), vec3(_1866, _1867, _1868));
    float _4037 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1866, _1867, _1868));
    float _4048 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1873 * ((_1872 * _1898) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1898) + _1858) * _1872))) * _1872;
    float _4059 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1922 = _1707 + 9u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _476) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1744].x + _553;
    float _1936 = cbLight._m0[_1744].y + _554;
    float _1937 = cbLight._m0[_1744].z + _555;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1744].xyz));
    float _4070 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1949 = dot(vec3(_473, _474, _475), vec3(_1942, _1943, _1944));
    float _4081 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1942, _1943, _1944));
    float _4092 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1934 * _1934;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1970 = (exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1971 = 1.0 - _1934;
    float _1981 = (0.5 / (((_1873 * ((_1948 * _1971) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1971) + _1934) * _1948))) * _1948;
    float _4103 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    float _1993 = (((_1970 * cbLight._m0[_1922].x) * _1983) * _1730) + (((_1897 * cbLight._m0[_1844].x) * _1911) * _1740);
    float _1994 = (((_1970 * cbLight._m0[_1922].y) * _1983) * _1730) + (((_1897 * cbLight._m0[_1844].y) * _1911) * _1740);
    float _1995 = (((_1970 * cbLight._m0[_1922].z) * _1983) * _1730) + (((_1897 * cbLight._m0[_1844].z) * _1911) * _1740);
    float _2057;
    float _2059;
    float _2061;
    if (_1781)
    {
        _2057 = _1993;
        _2059 = _1994;
        _2061 = _1995;
    }
    else
    {
        uint _2063 = _1707 + 2u;
        uint _2067 = _1707 + 10u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _476) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _553;
        float _2084 = cbLight._m0[_2063].y + _554;
        float _2085 = cbLight._m0[_2063].z + _555;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2063].xyz));
        float _4114 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2097 = dot(vec3(_473, _474, _475), vec3(_2090, _2091, _2092));
        float _4125 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4136 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2119 = 1.0 - _2082;
        float _2129 = (0.5 / (((_1873 * ((_2096 * _2119) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2119) + _2082) * _2096))) * _2096;
        float _4147 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2057 = (((_2118 * cbLight._m0[_2067].x) * _2131) * _2132) + _1993;
        _2059 = (((_2118 * cbLight._m0[_2067].y) * _2131) * _2132) + _1994;
        _2061 = (((_2118 * cbLight._m0[_2067].z) * _2131) * _2132) + _1995;
    }
    float _2167;
    float _2169;
    float _2171;
    if (_1799)
    {
        _2167 = _2057;
        _2169 = _2059;
        _2171 = _2061;
    }
    else
    {
        uint _2178 = _1707 + 3u;
        uint _2182 = _1707 + 11u;
        float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _476) * 0.949999988079071044921875);
        float _2197 = _2196 * _2196;
        float _2198 = cbLight._m0[_2178].x + _553;
        float _2199 = cbLight._m0[_2178].y + _554;
        float _2200 = cbLight._m0[_2178].z + _555;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2205 = _2204 * _2198;
        float _2206 = _2204 * _2199;
        float _2207 = _2204 * _2200;
        float _2208 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2178].xyz));
        float _4163 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2212 = dot(vec3(_473, _474, _475), vec3(_2205, _2206, _2207));
        float _4174 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2205, _2206, _2207));
        float _4185 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2220 = _2197 * _2197;
        float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
        float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = 1.0 - _2197;
        float _2244 = (0.5 / (((_1873 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2234) + _2197) * _2211))) * _2211;
        float _4196 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2167 = (((_2233 * cbLight._m0[_2182].x) * _2246) * _2247) + _2057;
        _2169 = (((_2233 * cbLight._m0[_2182].y) * _2246) * _2247) + _2059;
        _2171 = (((_2233 * cbLight._m0[_2182].z) * _2246) * _2247) + _2061;
    }
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_1705.y == 0u)
    {
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2322;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2322;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2322;
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.x;
        uint _2349 = uint((float(_2337.y) * floor(float(uint(cbSceneParam._m0[85u].y * _575) / _2338))) + floor(float(uint(cbSceneParam._m0[85u].x * _574) / _2338)));
        float _2359 = (log2(_2325 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2360 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        uint _2363 = uint(isnan(14.0) ? _2360 : (isnan(_2360) ? 14.0 : min(_2360, 14.0)));
        uvec4 _2368 = texelFetch(g_lightClusterGridBuffer, int(((_2363 << 2u) + (_2349 << 6u)) >> 2u));
        uint _2369 = _2368.x;
        uint _2370 = _2337.z;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((((1u << ((_2370 >> 4u) & 15u)) + 4294967295u) & _2369) == 0u) || ((_2370 & 240u) == 0u))
        {
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
        }
        else
        {
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2664)
                {
                    frontier_phi_66_pred = _2648;
                    frontier_phi_66_pred_1 = _2653;
                    frontier_phi_66_pred_2 = _2652;
                    frontier_phi_66_pred_3 = _2651;
                    frontier_phi_66_pred_4 = _2650;
                    frontier_phi_66_pred_5 = _2649;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2663;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2654 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2323;
                        float _2860 = _2819.y - _2324;
                        float _2861 = _2819.z - _2325;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_594, _597, _600), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4222 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2323;
                        float _2895 = (-0.0) - _2324;
                        float _2896 = (-0.0) - _2325;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _654;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_594, _597, _600), vec3(_2901, _2902, _2903));
                        float _4238 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2936 = dot(vec3(_594, _597, _600), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4249 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4260 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4271 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2723 = (_2890 * _2838.x) + _2796;
                        _2724 = (_2890 * _2838.y) + _2797;
                        _2725 = (_2890 * _2838.z) + _2798;
                        _2720 = (_2971 * _2855.x) + _2793;
                        _2721 = (_2971 * _2855.y) + _2794;
                        _2722 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2725;
                    frontier_phi_66_pred_2 = _2724;
                    frontier_phi_66_pred_3 = _2723;
                    frontier_phi_66_pred_4 = _2722;
                    frontier_phi_66_pred_5 = _2721;
                }
                _2496 = frontier_phi_66_pred;
                _2506 = frontier_phi_66_pred_1;
                _2504 = frontier_phi_66_pred_2;
                _2502 = frontier_phi_66_pred_3;
                _2500 = frontier_phi_66_pred_4;
                _2498 = frontier_phi_66_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2496;
                    _2649 = _2498;
                    _2650 = _2500;
                    _2651 = _2502;
                    _2652 = _2504;
                    _2653 = _2506;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
        }
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.z;
        uint _2512 = (_2510 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2512) & _2369) == 0u)
        {
            _2616 = _2495;
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
            _2626 = _2505;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
            float _2642 = _2641 * _2323;
            float _2643 = _2641 * _2324;
            float _2644 = _2641 * _2325;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2512 < ((_2510 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2776 = _2495;
                float _2777 = _2497;
                float _2778 = _2499;
                float _2779 = _2501;
                float _2780 = _2503;
                float _2781 = _2505;
                uint _2782 = _2512;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2792)
                    {
                        frontier_phi_77_pred = _2781;
                        frontier_phi_77_pred_1 = _2780;
                        frontier_phi_77_pred_2 = _2779;
                        frontier_phi_77_pred_3 = _2778;
                        frontier_phi_77_pred_4 = _2777;
                        frontier_phi_77_pred_5 = _2776;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        uint _3004 = _2791;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3073;
                        vec4 _3089;
                        float _3136;
                        bool _3137;
                        for (;;)
                        {
                            uint _3015 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3060 = (_3015 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3076 = (_3015 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3015 * 40u) + 24u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3111 = (_3015 * 40u) + 28u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3136 = fma(_2325, _3124.z, fma(_2324, _3124.y, _3124.x * _2323)) + _3124.w;
                            _3137 = !((fma(_2325, _3105.z, fma(_2324, _3105.y, _3105.x * _2323)) + _3105.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3137)
                            {
                                float _3164 = _3030.x - _2323;
                                float _3165 = _3030.y - _2324;
                                float _3166 = _3030.z - _2325;
                                float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                                float _3170 = inversesqrt(_3167);
                                float _3171 = _3170 * _3164;
                                float _3172 = _3170 * _3165;
                                float _3173 = _3170 * _3166;
                                float _3177 = 1.0 - (_3167 / (_3031 * _3031));
                                float _4282 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3182 = sqrt(_3167) * _3046.w;
                                float _3184 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                                float _3185 = _3184 * _3184;
                                float _3188 = ((1.0 - _3185) * dot(vec3(_3171, _3172, _3173), vec3(_594, _597, _600))) + _3185;
                                float _3191 = _3182 * _3182;
                                float _3195 = (fma(_2325, _3073.z, fma(_2324, _3073.y, _3073.x * _2323)) + _3073.w) / _3136;
                                float _3196 = (fma(_2325, _3089.z, fma(_2324, _3089.y, _3089.x * _2323)) + _3089.w) / _3136;
                                float _3200 = 1.0 - dot(vec2(_3195, _3196), vec2(_3195, _3196));
                                float _4298 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3202 = _3201 * (((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3178) / ((_3191 * 0.699999988079071044921875) + 1.0));
                                float _3214 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _654;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3171 - _2642;
                                float _3226 = _3172 - _2643;
                                float _3227 = _3173 - _2644;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4309 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3239 = dot(vec3(_594, _597, _600), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4320 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3184 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_594, _597, _600), vec3(_3171, _3172, _3173))) + _3248;
                                float _4331 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4342 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3201 * _3178) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3246 * _3246) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3202 * _3046.y;
                                frontier_phi_83_pred_1 = _3202 * _3046.x;
                                frontier_phi_83_pred_2 = _3276 * _3058.z;
                                frontier_phi_83_pred_3 = _3276 * _3058.y;
                                frontier_phi_83_pred_4 = _3276 * _3058.x;
                                frontier_phi_83_pred_5 = _3202 * _3046.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_83_pred;
                            _3283 = frontier_phi_83_pred_1;
                            _3282 = frontier_phi_83_pred_2;
                            _3281 = frontier_phi_83_pred_3;
                            _3280 = frontier_phi_83_pred_4;
                            _3285 = frontier_phi_83_pred_5;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2990;
                        frontier_phi_77_pred_1 = _2989;
                        frontier_phi_77_pred_2 = _2988;
                        frontier_phi_77_pred_3 = _2987;
                        frontier_phi_77_pred_4 = _2986;
                        frontier_phi_77_pred_5 = _2985;
                    }
                    _2627 = frontier_phi_77_pred;
                    _2625 = frontier_phi_77_pred_1;
                    _2623 = frontier_phi_77_pred_2;
                    _2621 = frontier_phi_77_pred_3;
                    _2619 = frontier_phi_77_pred_4;
                    _2617 = frontier_phi_77_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2617;
                        _2777 = _2619;
                        _2778 = _2621;
                        _2779 = _2623;
                        _2780 = _2625;
                        _2781 = _2627;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2621;
                frontier_phi_58_59_ladder_1 = _2627;
                frontier_phi_58_59_ladder_2 = _2625;
                frontier_phi_58_59_ladder_3 = _2623;
                frontier_phi_58_59_ladder_4 = _2619;
                frontier_phi_58_59_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_58_59_ladder = _2499;
                frontier_phi_58_59_ladder_1 = _2505;
                frontier_phi_58_59_ladder_2 = _2503;
                frontier_phi_58_59_ladder_3 = _2501;
                frontier_phi_58_59_ladder_4 = _2497;
                frontier_phi_58_59_ladder_5 = _2495;
            }
            _2616 = frontier_phi_58_59_ladder_5;
            _2618 = frontier_phi_58_59_ladder_4;
            _2620 = frontier_phi_58_59_ladder;
            _2622 = frontier_phi_58_59_ladder_3;
            _2624 = frontier_phi_58_59_ladder_2;
            _2626 = frontier_phi_58_59_ladder_1;
        }
        float _2631 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2382 = (_2631 * _2622) + _1837;
        _2384 = (_2631 * _2624) + _1839;
        _2386 = (_2631 * _2626) + _1841;
        _2388 = ((_2616 * 0.039999999105930328369140625) * _2631) + _2167;
        _2390 = ((_2618 * 0.039999999105930328369140625) * _2631) + _2169;
        _2392 = ((_2620 * 0.039999999105930328369140625) * _2631) + _2171;
    }
    else
    {
        _2382 = _1837;
        _2384 = _1839;
        _2386 = _1841;
        _2388 = _2167;
        _2390 = _2169;
        _2392 = _2171;
    }
    uint _2398 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _4358 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4369 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4380 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _2429 = (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2382 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _638))) + ((_2388 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + (((_450 * cbMtdParam._m0[11u].x) * (_435.x + _420.x)) * cbInstanceData._m0[_2398].x);
    float _2431 = ((((_450 * cbMtdParam._m0[11u].y) * (_435.y + _420.y)) * cbInstanceData._m0[_2398].y) + ((_2390 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2384 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _638)));
    float _2433 = ((((_450 * cbMtdParam._m0[11u].z) * (_435.z + _420.z)) * cbInstanceData._m0[_2398].z) + ((_2392 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2386 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _638)));
    float _2434 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2435 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2436 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    uint _2437 = _613 + 6u;
    float _2445 = _574 / cbSceneParam._m0[86u].x;
    float _2446 = _575 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2520 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2521 = _2520 / _495;
        float _2532 = _2521 * _546;
        float _2533 = _547 * _2521;
        float _2534 = (-0.0) - _2533;
        float _2536 = _2521 * _548;
        float _2538 = (cbSceneParam._m0[77u].w * _2534) / _2520;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2533;
        float _2546 = sqrt(((_2532 * _2532) + (_2533 * _2533)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2520)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2534 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2679 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2733 = ((abs(_2546 / _2534) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2556 * _2688) - exp2(_2556 * _2689)) * _2677))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2465);
        _2558 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2560 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2562 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2564 = _2744 * _2465;
    }
    else
    {
        _2558 = _2462;
        _2560 = _2463;
        _2562 = _2464;
        _2564 = _2465;
    }
    bool _2771;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2434;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2435;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2436;
        float _2594 = _562 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_613 + 7u].x + _2605) < 0.5)
            {
                _2771 = true;
                break;
            }
        }
        uint _2712 = _614 + uint(_2574.w);
        if ((cbInstanceData._m0[_2712].w < 1.0) && ((cbInstanceData._m0[_2712].w + _2605) < 0.5))
        {
            _2771 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2771 = true;
            break;
        }
        _2771 = false;
        break;
    }
    float _2976;
    if (_2771)
    {
        discard_state = true;
        _2976 = 0.0;
    }
    else
    {
        _2976 = cbInstanceData._m0[_2437].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2976;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2437].w;
    discard_exit();
}


