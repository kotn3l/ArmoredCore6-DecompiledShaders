#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _932;
float _3322;
float _3323;
float _3324;
float _3325;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3334 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _349 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_261.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3345 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _353 = fma(_292, _204 * NORMAL.x, fma(_285, _211 * TANGENT.x, (_197 * _189) * _283));
    float _356 = fma(_292, _204 * NORMAL.y, fma(_285, _211 * TANGENT.y, (_197 * _190) * _283));
    float _359 = fma(_292, _204 * NORMAL.z, fma(_285, _211 * TANGENT.z, (_197 * _191) * _283));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    float _364 = _363 * _353;
    float _365 = _363 * _356;
    float _366 = _363 * _359;
    float _3356 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _367 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3378 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3389 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _386 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _438 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _428);
    float _439 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _428);
    float _440 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _428);
    float _444 = inversesqrt(dot(vec3(_438, _439, _440), vec3(_438, _439, _440)));
    float _445 = _438 * _444;
    float _446 = _439 * _444;
    float _447 = _440 * _444;
    vec4 _452 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _454 = _452.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _612 = sqrt(((_438 * _438) + (_439 * _439)) + (_440 * _440));
        float _618 = (cbMatDynParam._m0[5u].x * _612) + cbMatDynParam._m0[5u].y;
        float _3400 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _619 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _623 = (cbMatDynParam._m0[5u].z * _612) + cbMatDynParam._m0[5u].w;
        float _3411 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) - _619)) + _619) < ((_454 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _466 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _467 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _487 = fma(_366, cbSceneParam._m0[5u].z, fma(_365, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _364));
    float _490 = fma(_366, cbSceneParam._m0[6u].z, fma(_365, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _364));
    float _493 = fma(_366, cbSceneParam._m0[7u].z, fma(_365, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _364));
    uint _506 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = _506 + 9u;
    uint _509 = _508 + uint(cbMatDynParam._m0[0u].w);
    float _515 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_509].x;
    float _516 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_509].y;
    float _517 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_509].z;
    float _3422 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _466, cbSceneParam._m0[86u].y * _467));
    float _532 = _529.x * TEXCOORD_3.w;
    float _533 = dot(vec3(_364, _365, _366), vec3(_445, _446, _447));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _364) - _445;
    float _541 = (_536 * _365) - _446;
    float _542 = (_536 * _366) - _447;
    float _546 = abs(dot(vec3(_445, _446, _447), vec3(_364, _365, _366)));
    float _3455 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_367);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_601, cbModelParam._m0[26u].z, fma(_597, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593));
        float _660 = fma(_601, cbModelParam._m0[27u].z, fma(_597, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593));
        float _664 = fma(_601, cbModelParam._m0[28u].z, fma(_597, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593));
        float _689 = _593 + _364;
        float _690 = _597 + _365;
        float _691 = _601 + _366;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_364, _365, _366), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3503 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_364, _365, _366), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3536 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_364, _365, _366), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3569 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_601, cbModelParam._m0[30u].z, fma(_597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _593));
        float _979 = fma(_601, cbModelParam._m0[31u].z, fma(_597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _593));
        float _983 = fma(_601, cbModelParam._m0[32u].z, fma(_597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _593));
        float _1006 = _593 + _364;
        float _1007 = _597 + _365;
        float _1008 = _601 + _366;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_364, _365, _366), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3632 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_364, _365, _366), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3665 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_364, _365, _366), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3698 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = _932;
        _1254 = _932;
        _1255 = _932;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _540 * 0.5;
    float _1313 = _541 * 0.5;
    float _1314 = _542 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_931, _935, _938, _941));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_933, _936, _939, _942));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_934, _937, _940, _943));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _367);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_601, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _593)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_601, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _593)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_601, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _593)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1442 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1445 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1473 = frontier_phi_17_15_ladder;
        }
        float _1677;
        if (_1442 > 0.0)
        {
            _1677 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1677 = frontier_phi_26_22_ladder;
        }
        float _1920;
        if (_1445 > 0.0)
        {
            _1920 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1920 = frontier_phi_38_33_ladder;
        }
        float _1922 = isnan(_1677) ? _1473 : (isnan(_1473) ? _1677 : min(_1473, _1677));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1439) + _1428;
        float _1928 = (_1923 * _1442) + _1432;
        float _1929 = (_1923 * _1445) + _1436;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_16_38_ladder = _2053.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2053.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2053.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_16_38_ladder_2;
        _1463 = frontier_phi_16_38_ladder_1;
        _1465 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1381);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _367);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_601, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _593)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_601, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _593)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_601, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _593)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1539 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1542 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1682;
        if (_1536 > 0.0)
        {
            _1682 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1682 = frontier_phi_28_24_ladder;
        }
        float _1947;
        if (_1539 > 0.0)
        {
            _1947 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1947 = frontier_phi_40_35_ladder;
        }
        float _2152;
        if (_1542 > 0.0)
        {
            _2152 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2152 = frontier_phi_49_46_ladder;
        }
        float _2154 = isnan(_1947) ? _1682 : (isnan(_1682) ? _1947 : min(_1682, _1947));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1536) + _1525;
        float _2160 = (_2155 * _1539) + _1529;
        float _2161 = (_2155 * _1542) + _1533;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_25_49_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_25_49_ladder_2;
        _1563 = frontier_phi_25_49_ladder_1;
        _1565 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1470);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1577 = ((((1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_561 * _548)) * _532;
    float _1578 = _1577 * ((cbModelParam._m0[1u].w * (_1561 - _1461)) + _1461);
    float _1579 = _1577 * ((cbModelParam._m0[1u].w * (_1563 - _1463)) + _1463);
    float _1580 = _1577 * ((cbModelParam._m0[1u].w * (_1565 - _1465)) + _1465);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    uvec4 _1599 = floatBitsToUint(cbInstanceData._m0[_506 + 5u]);
    uint _1601 = _1599.x * 14u;
    uint _1602 = _1601 + 13u;
    float _1609 = _532 + (-1.0);
    float _1614 = (cbLight._m0[_1602].x * _1609) + 1.0;
    float _1615 = (cbLight._m0[_1602].y * _1609) + 1.0;
    float _1616 = (cbLight._m0[_1602].z * _1609) + 1.0;
    float _1617 = (cbLight._m0[_1602].w * _1609) + 1.0;
    uint _1618 = _1601 + 5u;
    float _1624 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1628 = _1601 + 4u;
    float _1635 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1639 = _1601 | 1u;
    float _1650 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_364, _365, _366));
    float _1653 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_364, _365, _366));
    float _3834 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _3845 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1658 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1660 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1667 = ((cbLight._m0[_1618].x * _1624) * _1660) + ((cbLight._m0[_1628].x * _1635) * _1658);
    float _1668 = ((_1624 * cbLight._m0[_1618].y) * _1660) + ((_1635 * cbLight._m0[_1628].y) * _1658);
    float _1669 = ((_1624 * cbLight._m0[_1618].z) * _1660) + ((_1635 * cbLight._m0[_1628].z) * _1658);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1601 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1667;
        _1689 = _1668;
        _1691 = _1669;
    }
    else
    {
        uint _1695 = _1601 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1601 + 2u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3856 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1714 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1667;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1891 = _1601 + 7u;
        float _1907 = (dot(vec3(cbLight._m0[_1601 + 3u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3872 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1910 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1732 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1687;
        _1734 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1689;
        _1736 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1691;
    }
    uint _1739 = _1601 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _367) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1601].x + _445;
    float _1755 = cbLight._m0[_1601].y + _446;
    float _1756 = cbLight._m0[_1601].z + _447;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1601].xyz));
    float _3888 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _1768 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1769 = dot(vec3(_364, _365, _366), vec3(_1761, _1762, _1763));
    float _3910 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1761, _1762, _1763));
    float _3921 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1793 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1768 * ((_1767 * _1793) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1793) + _1753) * _1767))) * _1767;
    float _3932 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1817 = _1601 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _367) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1639].x + _445;
    float _1831 = cbLight._m0[_1639].y + _446;
    float _1832 = cbLight._m0[_1639].z + _447;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1639].xyz));
    float _3943 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1844 = dot(vec3(_364, _365, _366), vec3(_1837, _1838, _1839));
    float _3954 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1837, _1838, _1839));
    float _3965 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = 1.0 - _1829;
    float _1876 = (0.5 / (((_1768 * ((_1843 * _1866) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1866) + _1829) * _1843))) * _1843;
    float _3976 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1888 = (((_1865 * cbLight._m0[_1817].x) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].x) * _1806) * _1635);
    float _1889 = (((_1865 * cbLight._m0[_1817].y) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].y) * _1806) * _1635);
    float _1890 = (((_1865 * cbLight._m0[_1817].z) * _1878) * _1624) + (((_1792 * cbLight._m0[_1739].z) * _1806) * _1635);
    float _1952;
    float _1954;
    float _1956;
    if (_1676)
    {
        _1952 = _1888;
        _1954 = _1889;
        _1956 = _1890;
    }
    else
    {
        uint _1958 = _1601 + 2u;
        uint _1962 = _1601 + 10u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _367) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _445;
        float _1979 = cbLight._m0[_1958].y + _446;
        float _1980 = cbLight._m0[_1958].z + _447;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1958].xyz));
        float _3987 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1992 = dot(vec3(_364, _365, _366), vec3(_1985, _1986, _1987));
        float _3998 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _4009 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2014 = 1.0 - _1977;
        float _2024 = (0.5 / (((_1768 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2014) + _1977) * _1991))) * _1991;
        float _4020 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2026 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2027 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1952 = (((_2013 * cbLight._m0[_1962].x) * _2026) * _2027) + _1888;
        _1954 = (((_2013 * cbLight._m0[_1962].y) * _2026) * _2027) + _1889;
        _1956 = (((_2013 * cbLight._m0[_1962].z) * _2026) * _2027) + _1890;
    }
    float _2062;
    float _2064;
    float _2066;
    if (_1694)
    {
        _2062 = _1952;
        _2064 = _1954;
        _2066 = _1956;
    }
    else
    {
        uint _2073 = _1601 + 3u;
        uint _2077 = _1601 + 11u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _367) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _445;
        float _2094 = cbLight._m0[_2073].y + _446;
        float _2095 = cbLight._m0[_2073].z + _447;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2073].xyz));
        float _4036 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2107 = dot(vec3(_364, _365, _366), vec3(_2100, _2101, _2102));
        float _4047 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _4058 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2129 = 1.0 - _2092;
        float _2139 = (0.5 / (((_1768 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2129) + _2092) * _2106))) * _2106;
        float _4069 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _2062 = (((_2128 * cbLight._m0[_2077].x) * _2141) * _2142) + _1952;
        _2064 = (((_2128 * cbLight._m0[_2077].y) * _2141) * _2142) + _1954;
        _2066 = (((_2128 * cbLight._m0[_2077].z) * _2141) * _2142) + _1956;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1599.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _467) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _466) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2559)
                {
                    frontier_phi_66_pred = _2543;
                    frontier_phi_66_pred_1 = _2548;
                    frontier_phi_66_pred_2 = _2547;
                    frontier_phi_66_pred_3 = _2546;
                    frontier_phi_66_pred_4 = _2545;
                    frontier_phi_66_pred_5 = _2544;
                }
                else
                {
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    uint _2694;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2558;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2698 = uint(findLSB(_2694)) + (_2549 << 5u);
                        uint _2695 = (_2694 + 4294967295u) & _2694;
                        uint _2700 = _2698 * 48u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2720 = (_2698 * 48u) + 4u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2739 = (_2698 * 48u) + 8u;
                        vec3 _2750 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x));
                        float _2754 = _2714.x - _2218;
                        float _2755 = _2714.y - _2219;
                        float _2756 = _2714.z - _2220;
                        float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                        float _2760 = inversesqrt(_2757);
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2764 = dot(vec3(_487, _490, _493), vec3(_2761, _2762, _2763));
                        float _2769 = 1.0 - (_2757 * _2714.w);
                        float _4095 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2770 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2771 = sqrt(_2757) * _2733.w;
                        float _2774 = 1.39999997615814208984375 / (_2771 + 1.39999997615814208984375);
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2764) + _2775;
                        float _2781 = _2771 * _2771;
                        float _2785 = ((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2770) / ((_2781 * 0.699999988079071044921875) + 1.0);
                        float _2789 = (-0.0) - _2218;
                        float _2790 = (-0.0) - _2219;
                        float _2791 = (-0.0) - _2220;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2806 = exp2(log2(1.0 / ((_2781 * 3.5) + 5.0)) * 0.25);
                        float _2807 = 1.0 - _548;
                        float _2814 = sqrt(1.0 - ((1.0 - (_2807 * _2807)) * (1.0 - (_2806 * _2806))));
                        float _2815 = _2814 * _2814;
                        float _2816 = _2815 * _2815;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2827 = dot(vec3(_487, _490, _493), vec3(_2796, _2797, _2798));
                        float _4111 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2831 = dot(vec3(_487, _490, _493), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819));
                        float _4122 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2838 = ((_2834 * _2834) * (_2816 + (-1.0))) + 1.0;
                        float _2839 = _2774 * _2815;
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2764) + _2840;
                        float _4133 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2845 = 1.0 - _2815;
                        float _2855 = (0.5 / (((_2844 * ((_2830 * _2845) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2844 * _2845) + _2815) * _2830))) * _2844;
                        float _4144 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2866 = (((_2816 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_2838 * _2838) * ((_2781 * 2.1991131305694580078125) + 3.141590118408203125))) * _2770;
                        _2618 = (_2785 * _2733.x) + _2691;
                        _2619 = (_2785 * _2733.y) + _2692;
                        _2620 = (_2785 * _2733.z) + _2693;
                        _2615 = (_2866 * _2750.x) + _2688;
                        _2616 = (_2866 * _2750.y) + _2689;
                        _2617 = (_2866 * _2750.z) + _2690;
                        if (_2695 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2695;
                        }
                    }
                    frontier_phi_66_pred = _2615;
                    frontier_phi_66_pred_1 = _2620;
                    frontier_phi_66_pred_2 = _2619;
                    frontier_phi_66_pred_3 = _2618;
                    frontier_phi_66_pred_4 = _2617;
                    frontier_phi_66_pred_5 = _2616;
                }
                _2391 = frontier_phi_66_pred;
                _2401 = frontier_phi_66_pred_1;
                _2399 = frontier_phi_66_pred_2;
                _2397 = frontier_phi_66_pred_3;
                _2395 = frontier_phi_66_pred_4;
                _2393 = frontier_phi_66_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2391;
                    _2544 = _2393;
                    _2545 = _2395;
                    _2546 = _2397;
                    _2547 = _2399;
                    _2548 = _2401;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2407) & _2264) == 0u)
        {
            _2511 = _2390;
            _2513 = _2392;
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
            _2521 = _2400;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2537 = _2536 * _2218;
            float _2538 = _2536 * _2219;
            float _2539 = _2536 * _2220;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2671 = _2390;
                float _2672 = _2392;
                float _2673 = _2394;
                float _2674 = _2396;
                float _2675 = _2398;
                float _2676 = _2400;
                uint _2677 = _2407;
                uint _2686;
                bool _2687;
                for (;;)
                {
                    _2686 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                    _2687 = _2686 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2687)
                    {
                        frontier_phi_77_pred = _2676;
                        frontier_phi_77_pred_1 = _2675;
                        frontier_phi_77_pred_2 = _2674;
                        frontier_phi_77_pred_3 = _2673;
                        frontier_phi_77_pred_4 = _2672;
                        frontier_phi_77_pred_5 = _2671;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        uint _2899 = _2686;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        vec3 _2953;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2910 = ((_2677 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2910 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2955 = (_2910 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2910 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2910 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2910 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2220, _3019.z, fma(_2219, _3019.y, _3019.x * _2218)) + _3019.w;
                            _3032 = !((fma(_2220, _3000.z, fma(_2219, _3000.y, _3000.x * _2218)) + _3000.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2925.x - _2218;
                                float _3060 = _2925.y - _2219;
                                float _3061 = _2925.z - _2220;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2926 * _2926));
                                float _4155 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3077 = sqrt(_3062) * _2941.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_487, _490, _493))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2220, _2968.z, fma(_2219, _2968.y, _2968.x * _2218)) + _2968.w) / _3031;
                                float _3091 = (fma(_2220, _2984.z, fma(_2219, _2984.y, _2984.x * _2218)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4171 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _548;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2537;
                                float _3121 = _3067 - _2538;
                                float _3122 = _3068 - _2539;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_487, _490, _493), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4182 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3134 = dot(vec3(_487, _490, _493), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4193 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_487, _490, _493), vec3(_3066, _3067, _3068))) + _3143;
                                float _4204 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4215 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3097 * _2941.y;
                                frontier_phi_83_pred_1 = _3097 * _2941.x;
                                frontier_phi_83_pred_2 = _3171 * _2953.z;
                                frontier_phi_83_pred_3 = _3171 * _2953.y;
                                frontier_phi_83_pred_4 = _3171 * _2953.x;
                                frontier_phi_83_pred_5 = _3097 * _2941.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_83_pred;
                            _3178 = frontier_phi_83_pred_1;
                            _3177 = frontier_phi_83_pred_2;
                            _3176 = frontier_phi_83_pred_3;
                            _3175 = frontier_phi_83_pred_4;
                            _3180 = frontier_phi_83_pred_5;
                            _2883 = _3178 + _2896;
                            _2884 = _3179 + _2897;
                            _2885 = _3180 + _2898;
                            _2880 = _3175 + _2893;
                            _2881 = _3176 + _2894;
                            _2882 = _3177 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2885;
                        frontier_phi_77_pred_1 = _2884;
                        frontier_phi_77_pred_2 = _2883;
                        frontier_phi_77_pred_3 = _2882;
                        frontier_phi_77_pred_4 = _2881;
                        frontier_phi_77_pred_5 = _2880;
                    }
                    _2522 = frontier_phi_77_pred;
                    _2520 = frontier_phi_77_pred_1;
                    _2518 = frontier_phi_77_pred_2;
                    _2516 = frontier_phi_77_pred_3;
                    _2514 = frontier_phi_77_pred_4;
                    _2512 = frontier_phi_77_pred_5;
                    uint _2678 = _2677 + 1u;
                    if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2671 = _2512;
                        _2672 = _2514;
                        _2673 = _2516;
                        _2674 = _2518;
                        _2675 = _2520;
                        _2676 = _2522;
                        _2677 = _2678;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2516;
                frontier_phi_58_59_ladder_1 = _2522;
                frontier_phi_58_59_ladder_2 = _2520;
                frontier_phi_58_59_ladder_3 = _2518;
                frontier_phi_58_59_ladder_4 = _2514;
                frontier_phi_58_59_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_58_59_ladder = _2394;
                frontier_phi_58_59_ladder_1 = _2400;
                frontier_phi_58_59_ladder_2 = _2398;
                frontier_phi_58_59_ladder_3 = _2396;
                frontier_phi_58_59_ladder_4 = _2392;
                frontier_phi_58_59_ladder_5 = _2390;
            }
            _2511 = frontier_phi_58_59_ladder_5;
            _2513 = frontier_phi_58_59_ladder_4;
            _2515 = frontier_phi_58_59_ladder;
            _2517 = frontier_phi_58_59_ladder_3;
            _2519 = frontier_phi_58_59_ladder_2;
            _2521 = frontier_phi_58_59_ladder_1;
        }
        float _2526 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2277 = (_2526 * _2517) + _1732;
        _2279 = (_2526 * _2519) + _1734;
        _2281 = (_2526 * _2521) + _1736;
        _2283 = ((_2511 * 0.039999999105930328369140625) * _2526) + _2062;
        _2285 = ((_2513 * 0.039999999105930328369140625) * _2526) + _2064;
        _2287 = ((_2515 * 0.039999999105930328369140625) * _2526) + _2066;
    }
    else
    {
        _2277 = _1732;
        _2279 = _1734;
        _2281 = _1736;
        _2283 = _2062;
        _2285 = _2064;
        _2287 = _2066;
    }
    uint _2293 = _508 + uint(cbMatDynParam._m0[0u].w);
    float _4231 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4242 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4253 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _2324 = (((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2277 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _532))) + ((_2283 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + (((_350 * cbMtdParam._m0[11u].x) * (_334.x + _319.x)) * cbInstanceData._m0[_2293].x);
    float _2326 = ((((_350 * cbMtdParam._m0[11u].y) * (_334.y + _319.y)) * cbInstanceData._m0[_2293].y) + ((_2285 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2279 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _532)));
    float _2328 = ((((_350 * cbMtdParam._m0[11u].z) * (_334.z + _319.z)) * cbInstanceData._m0[_2293].z) + ((_2287 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2281 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _532)));
    float _2329 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2330 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    uint _2332 = _506 + 6u;
    float _2340 = _466 / cbSceneParam._m0[86u].x;
    float _2341 = _467 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _386 : (isnan(_386) ? cbSceneParam._m0[77u].w : min(_386, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_386 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_386) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _386 : min(cbSceneParam._m0[80u].w, _386));
        float _2416 = _2415 / _386;
        float _2427 = _2416 * _438;
        float _2428 = _439 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2431 = _2416 * _440;
        float _2433 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2434 = _2433 + cbSceneParam._m0[79u].w;
        float _2435 = cbSceneParam._m0[79u].w - _2428;
        float _2441 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2431 * _2431));
        float _2444 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2441;
        float _2449 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2451 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2429 - _2433) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2434 > 0.0) ? exp2(_2449 * _2434) : (2.0 - exp2(_2451 * _2434))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2444;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : max(_2434, _2435));
            float _2574 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : min(_2434, _2435));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2628 = ((abs(_2441 / _2429) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2449 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2449 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2451 * _2583) - exp2(_2451 * _2584)) * _2572))) + (_2444 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2360);
        _2453 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2455 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2457 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2459 = _2639 * _2360;
    }
    else
    {
        _2453 = _2357;
        _2455 = _2358;
        _2457 = _2359;
        _2459 = _2360;
    }
    bool _2666;
    vec4 _2469;
    vec4 _2491;
    float _2493;
    float _2497;
    float _2498;
    float _2499;
    float _2500;
    bool _2510;
    for (;;)
    {
        _2469 = cbMatDynParam._m0[0u];
        float _2471 = roundEven(_2469.y);
        bool _2472 = _2471 == 3.0;
        float _2473 = log2(_2459);
        float _2480 = exp2(_2473 * cbSceneParam._m0[78u].x) * _2329;
        float _2481 = exp2(_2473 * cbSceneParam._m0[78u].y) * _2330;
        float _2482 = exp2(_2473 * cbSceneParam._m0[78u].z) * _2331;
        float _2489 = _454 + (-0.5);
        _2491 = cbMtdParam._m0[1u];
        _2493 = _2491.y * _2489;
        float _2496 = (_2471 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2497 = _2496 * (_2472 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2453)));
        _2498 = _2496 * (_2472 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
        _2499 = _2496 * (_2472 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2457)));
        _2500 = _2489 * 0.999000012874603271484375;
        _2510 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2510)
        {
            if ((cbInstanceData._m0[_506 + 7u].x + _2500) < 0.5)
            {
                _2666 = true;
                break;
            }
        }
        uint _2607 = _508 + uint(_2469.w);
        if ((cbInstanceData._m0[_2607].w < 1.0) && ((cbInstanceData._m0[_2607].w + _2500) < 0.5))
        {
            _2666 = true;
            break;
        }
        if ((_2493 + 1.0) < _2491.x)
        {
            _2666 = true;
            break;
        }
        _2666 = false;
        break;
    }
    float _2871;
    if (_2666)
    {
        discard_state = true;
        _2871 = 0.0;
    }
    else
    {
        _2871 = cbInstanceData._m0[_2332].w;
    }
    SV_Target.x = _2497;
    SV_Target.y = _2498;
    SV_Target.z = _2499;
    SV_Target.w = _2871;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
    discard_exit();
}


