#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1172;
float _3581;
float _3582;
float _3583;
float _3584;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3593 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _321 = (((_297.x * cbMtdParam._m0[10u].x) - _257) * _314) + _257;
    float _322 = (((_297.y * cbMtdParam._m0[10u].y) - _258) * _314) + _258;
    float _323 = (((_297.z * cbMtdParam._m0[10u].z) - _259) * _314) + _259;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _362 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_343.x + 0.00999999977648258209228515625));
    float _364 = _362 * (cbMtdParam._m0[15u].x + 1.0);
    float _3604 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _373 = ((((cbMtdParam._m0[12u].x - _321) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _365) + _321;
    float _374 = ((((cbMtdParam._m0[12u].y - _322) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _365) + _322;
    float _375 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _323)) * _365) + _323;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _390 = _388.x;
    float _408 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _390) * _314) + _390;
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _431 = (_421.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3615 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _453 = _449.z;
    float _456 = (_449.x * 2.0) + (-1.0);
    float _457 = (_449.y * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3626 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))));
    float _466 = (_314 * (_421.z - _453)) + _453;
    float _469 = _362 * (cbMtdParam._m0[14u].w + 1.0);
    float _3637 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _473 = ((cbMtdParam._m0[14u].y - _466) * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) + _466;
    vec4 _500 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _515 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _529 = (_314 * (_429 - _456)) + _456;
    float _530 = (_314 * (_431 - _457)) + _457;
    float _531 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _463)) + _463;
    vec4 _550 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _556 = (_550.x * 2.0) + (-1.0);
    float _557 = (_550.y * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _3648 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _574 = (_365 * (((_529 * cbMtdParam._m0[13u].z) - _529) + _556)) + _529;
    float _575 = (_365 * (((_530 * cbMtdParam._m0[13u].z) - _530) + _557)) + _530;
    float _576 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) - _531)) + _531;
    float _579 = fma(_576, _222 * NORMAL.x, fma(_575, _229 * TANGENT.x, (_215 * _207) * _574));
    float _582 = fma(_576, _222 * NORMAL.y, fma(_575, _229 * TANGENT.y, (_215 * _208) * _574));
    float _585 = fma(_576, _222 * NORMAL.z, fma(_575, _229 * TANGENT.z, (_215 * _209) * _574));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3659 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _593 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3681 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3692 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3703 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _597 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    vec4 _678 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _680 = _678.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _852 = sqrt(((_664 * _664) + (_665 * _665)) + (_666 * _666));
        float _858 = (cbMatDynParam._m0[5u].x * _852) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _863 = (cbMatDynParam._m0[5u].z * _852) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _859)) + _859) < ((_680 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _713 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _716 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _730 = _729 + 9u;
    uint _731 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3736 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _743 = 1.0 - _597;
    float _744 = _740 * _743;
    float _745 = _741 * _743;
    float _746 = _742 * _743;
    float _751 = (_740 + (-0.039999999105930328369140625)) * _597;
    float _752 = (_741 + (-0.039999999105930328369140625)) * _597;
    float _753 = (_742 + (-0.039999999105930328369140625)) * _597;
    float _754 = _751 + 0.039999999105930328369140625;
    float _756 = _752 + 0.039999999105930328369140625;
    float _757 = _753 + 0.039999999105930328369140625;
    vec4 _766 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _769 = _766.x * TEXCOORD_3.w;
    float _770 = dot(vec3(_590, _591, _592), vec3(_671, _672, _673));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _590) - _671;
    float _778 = (_773 * _591) - _672;
    float _779 = (_773 * _592) - _673;
    float _783 = abs(dot(vec3(_671, _672, _673), vec3(_590, _591, _592)));
    float _3769 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_593);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _804 = (1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _805 = _798 * _785;
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _900 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _904 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _929 = _833 + _590;
        float _930 = _837 + _591;
        float _931 = _841 + _592;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_590, _591, _592), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3817 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_590, _591, _592), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3850 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_590, _591, _592), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3883 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1219 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1223 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1246 = _833 + _590;
        float _1247 = _837 + _591;
        float _1248 = _841 + _592;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_590, _591, _592), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3946 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_590, _591, _592), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3979 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_590, _591, _592), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4012 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = _1172;
        _1494 = _1172;
        _1495 = _1172;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1186)) + _1186;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _777 * 0.5;
    float _1553 = _778 * 0.5;
    float _1554 = _779 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1595;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1606;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1597 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1610 = (_1606 * cbModelParam._m0[1u].x) + (_1595 * (1.0 - cbModelParam._m0[1u].x));
    float _1620 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1620 : min(cbModelParam._m0[25u].z, _1620));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1682 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1685 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1713 = frontier_phi_17_15_ladder;
        }
        float _1917;
        if (_1682 > 0.0)
        {
            _1917 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1917 = frontier_phi_26_22_ladder;
        }
        float _2171;
        if (_1685 > 0.0)
        {
            _2171 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2171 = frontier_phi_38_33_ladder;
        }
        float _2173 = isnan(_1917) ? _1713 : (isnan(_1713) ? _1917 : min(_1713, _1917));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1679) + _1668;
        float _2179 = (_2174 * _1682) + _1672;
        float _2180 = (_2174 * _1685) + _1676;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2181;
        float _2185 = _2181 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 > _2185) || ((_2179 < _2183) || ((_2178 < _2183) || (_2178 > _2185))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2308 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2180, cbModelParam._m0[9u].z, fma(_2179, cbModelParam._m0[9u].y, _2178 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2180, cbModelParam._m0[10u].z, fma(_2179, cbModelParam._m0[10u].y, _2178 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2180, cbModelParam._m0[11u].z, fma(_2179, cbModelParam._m0[11u].y, _2178 * cbModelParam._m0[11u].x))), _1621);
            frontier_phi_16_38_ladder = _2308.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2308.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2308.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_16_38_ladder_2;
        _1703 = frontier_phi_16_38_ladder_1;
        _1705 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1621);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1779 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1782 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1922;
        if (_1776 > 0.0)
        {
            _1922 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1922 = frontier_phi_28_24_ladder;
        }
        float _2198;
        if (_1779 > 0.0)
        {
            _2198 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2198 = frontier_phi_40_35_ladder;
        }
        float _2411;
        if (_1782 > 0.0)
        {
            _2411 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2411 = frontier_phi_49_46_ladder;
        }
        float _2413 = isnan(_2198) ? _1922 : (isnan(_1922) ? _2198 : min(_1922, _2198));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1776) + _1765;
        float _2419 = (_2414 * _1779) + _1769;
        float _2420 = (_2414 * _1782) + _1773;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2421;
        float _2424 = _2421 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2420 > _2424) || ((_2420 < _2422) || ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 < _2422) || (_2418 > _2424))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2420, cbModelParam._m0[17u].z, fma(_2419, cbModelParam._m0[17u].y, _2418 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2420, cbModelParam._m0[18u].z, fma(_2419, cbModelParam._m0[18u].y, _2418 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2420, cbModelParam._m0[19u].z, fma(_2419, cbModelParam._m0[19u].y, _2418 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_25_49_ladder = _2644.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2644.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2644.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_25_49_ladder_2;
        _1803 = frontier_phi_25_49_ladder_1;
        _1805 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1710);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1818 = (((_804 * _754) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1820 = (((_804 * _756) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1822 = (((_804 * _757) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _769 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1876 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1880 = _1843 | 1u;
    float _1891 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_590, _591, _592));
    float _1894 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_590, _591, _592));
    float _4148 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _4159 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1899 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1901 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1908 = ((cbLight._m0[_1860].x * _1866) * _1901) + ((cbLight._m0[_1870].x * _1876) * _1899);
    float _1909 = ((_1866 * cbLight._m0[_1860].y) * _1901) + ((_1876 * cbLight._m0[_1870].y) * _1899);
    float _1910 = ((_1866 * cbLight._m0[_1860].z) * _1901) + ((_1876 * cbLight._m0[_1870].z) * _1899);
    uvec4 _1914 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1916 = _1914.x == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1916)
    {
        _1927 = _1908;
        _1929 = _1909;
        _1931 = _1910;
    }
    else
    {
        uint _1935 = _1843 + 6u;
        float _1951 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _1952 = _1951 * _1951;
        float _4170 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1954 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1927 = (((cbLight._m0[_1935].x * 0.3183098733425140380859375) * _1953) * _1954) + _1908;
        _1929 = (((cbLight._m0[_1935].y * 0.3183098733425140380859375) * _1953) * _1954) + _1909;
        _1931 = (((cbLight._m0[_1935].z * 0.3183098733425140380859375) * _1953) * _1954) + _1910;
    }
    bool _1934 = _1914.y == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1934)
    {
        _1972 = _1927;
        _1974 = _1929;
        _1976 = _1931;
    }
    else
    {
        uint _2142 = _1843 + 7u;
        float _2158 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4186 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2161 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1972 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _1927;
        _1974 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _1929;
        _1976 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _1931;
    }
    uint _1979 = _1843 + 8u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _593) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1843].x + _671;
    float _1995 = cbLight._m0[_1843].y + _672;
    float _1996 = cbLight._m0[_1843].z + _673;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1843].xyz));
    float _4202 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2008 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2009 = dot(vec3(_590, _591, _592), vec3(_2001, _2002, _2003));
    float _4224 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2001, _2002, _2003));
    float _4235 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1993 * _1993;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2029 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2030 = 0.959999978542327880859375 - _751;
    float _2032 = 0.959999978542327880859375 - _752;
    float _2033 = 0.959999978542327880859375 - _753;
    float _2040 = 1.0 - _1993;
    float _2051 = (0.5 / (((_2008 * ((_2007 * _2040) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2040) + _1993) * _2007))) * _2007;
    float _4246 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    uint _2064 = _1843 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _593) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1880].x + _671;
    float _2078 = cbLight._m0[_1880].y + _672;
    float _2079 = cbLight._m0[_1880].z + _673;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1880].xyz));
    float _4257 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2091 = dot(vec3(_590, _591, _592), vec3(_2084, _2085, _2086));
    float _4268 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2084, _2085, _2086));
    float _4279 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2117 = 1.0 - _2076;
    float _2127 = (0.5 / (((_2008 * ((_2090 * _2117) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2117) + _2076) * _2090))) * _2090;
    float _4290 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2139 = (((((_2110 * _2030) + _754) * cbLight._m0[_2064].x) * _2129) * _1866) + (((((_2029 * _2030) + _754) * cbLight._m0[_1979].x) * _2053) * _1876);
    float _2140 = (((((_2110 * _2032) + _756) * cbLight._m0[_2064].y) * _2129) * _1866) + (((((_2029 * _2032) + _756) * cbLight._m0[_1979].y) * _2053) * _1876);
    float _2141 = (((((_2110 * _2033) + _757) * cbLight._m0[_2064].z) * _2129) * _1866) + (((((_2029 * _2033) + _757) * cbLight._m0[_1979].z) * _2053) * _1876);
    float _2203;
    float _2205;
    float _2207;
    if (_1916)
    {
        _2203 = _2139;
        _2205 = _2140;
        _2207 = _2141;
    }
    else
    {
        uint _2209 = _1843 + 2u;
        uint _2213 = _1843 + 10u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _593) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _671;
        float _2230 = cbLight._m0[_2209].y + _672;
        float _2231 = cbLight._m0[_2209].z + _673;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2209].xyz));
        float _4301 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2243 = dot(vec3(_590, _591, _592), vec3(_2236, _2237, _2238));
        float _4312 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4323 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
        float _2269 = 1.0 - _2228;
        float _2279 = (0.5 / (((_2008 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2269) + _2228) * _2242))) * _2242;
        float _4334 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2203 = (((((_2262 * _2030) + _754) * cbLight._m0[_2213].x) * _2281) * _2282) + _2139;
        _2205 = (((((_2262 * _2032) + _756) * cbLight._m0[_2213].y) * _2281) * _2282) + _2140;
        _2207 = (((((_2262 * _2033) + _757) * cbLight._m0[_2213].z) * _2281) * _2282) + _2141;
    }
    float _2317;
    float _2319;
    float _2321;
    if (_1934)
    {
        _2317 = _2203;
        _2319 = _2205;
        _2321 = _2207;
    }
    else
    {
        uint _2328 = _1843 + 3u;
        uint _2332 = _1843 + 11u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _593) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _671;
        float _2349 = cbLight._m0[_2328].y + _672;
        float _2350 = cbLight._m0[_2328].z + _673;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2328].xyz));
        float _4350 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2362 = dot(vec3(_590, _591, _592), vec3(_2355, _2356, _2357));
        float _4361 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4372 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2388 = 1.0 - _2347;
        float _2398 = (0.5 / (((_2008 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2008 * _2388) + _2347) * _2361))) * _2361;
        float _4383 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2317 = (((((_2381 * _2030) + _754) * cbLight._m0[_2332].x) * _2400) * _2401) + _2203;
        _2319 = (((((_2381 * _2032) + _756) * cbLight._m0[_2332].y) * _2400) * _2401) + _2205;
        _2321 = (((((_2381 * _2033) + _757) * cbLight._m0[_2332].z) * _2400) * _2401) + _2207;
    }
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    if (_1841.y == 0u)
    {
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2476;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2476;
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2476;
        uvec4 _2491 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2492 = _2491.x;
        uint _2503 = uint((float(_2491.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2492))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2492)));
        float _2513 = (log2(_2479 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2514 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        uint _2517 = uint(isnan(14.0) ? _2514 : (isnan(_2514) ? 14.0 : min(_2514, 14.0)));
        uvec4 _2522 = texelFetch(g_lightClusterGridBuffer, int(((_2517 << 2u) + (_2503 << 6u)) >> 2u));
        uint _2523 = _2522.x;
        uint _2524 = _2491.z;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((((1u << ((_2524 >> 4u) & 15u)) + 4294967295u) & _2523) == 0u) || ((_2524 & 240u) == 0u))
        {
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
        }
        else
        {
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2818)
                {
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2807;
                    frontier_phi_66_pred_2 = _2806;
                    frontier_phi_66_pred_3 = _2805;
                    frontier_phi_66_pred_4 = _2804;
                    frontier_phi_66_pred_5 = _2803;
                }
                else
                {
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    uint _2953;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2817;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    for (;;)
                    {
                        uint _2957 = uint(findLSB(_2953)) + (_2808 << 5u);
                        uint _2954 = (_2953 + 4294967295u) & _2953;
                        uint _2959 = _2957 * 48u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2979 = (_2957 * 48u) + 4u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2998 = (_2957 * 48u) + 8u;
                        vec3 _3009 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x));
                        float _3013 = _2973.x - _2477;
                        float _3014 = _2973.y - _2478;
                        float _3015 = _2973.z - _2479;
                        float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                        float _3019 = inversesqrt(_3016);
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3023 = dot(vec3(_710, _713, _716), vec3(_3020, _3021, _3022));
                        float _3028 = 1.0 - (_3016 * _2973.w);
                        float _4409 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3030 = sqrt(_3016) * _2992.w;
                        float _3033 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _3023) + _3034;
                        float _3040 = _3030 * _3030;
                        float _3044 = ((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3029) / ((_3040 * 0.699999988079071044921875) + 1.0);
                        float _3048 = (-0.0) - _2477;
                        float _3049 = (-0.0) - _2478;
                        float _3050 = (-0.0) - _2479;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3065 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                        float _3066 = 1.0 - _785;
                        float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                        float _3074 = _3073 * _3073;
                        float _3075 = _3074 * _3074;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3078 = _3057 + _3022;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3086 = dot(vec3(_710, _713, _716), vec3(_3055, _3056, _3057));
                        float _4425 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3090 = dot(vec3(_710, _713, _716), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                        float _4436 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                        float _3098 = _3033 * _3074;
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3023) + _3099;
                        float _4447 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3104 = 1.0 - _3074;
                        float _3114 = (0.5 / (((_3103 * ((_3089 * _3104) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3074) * _3089))) * _3103;
                        float _4458 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3125 = (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3097 * _3097) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125))) * _3029;
                        _2877 = (_3044 * _2992.x) + _2950;
                        _2878 = (_3044 * _2992.y) + _2951;
                        _2879 = (_3044 * _2992.z) + _2952;
                        _2874 = (_3125 * _3009.x) + _2947;
                        _2875 = (_3125 * _3009.y) + _2948;
                        _2876 = (_3125 * _3009.z) + _2949;
                        if (_2954 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2954;
                        }
                    }
                    frontier_phi_66_pred = _2874;
                    frontier_phi_66_pred_1 = _2879;
                    frontier_phi_66_pred_2 = _2878;
                    frontier_phi_66_pred_3 = _2877;
                    frontier_phi_66_pred_4 = _2876;
                    frontier_phi_66_pred_5 = _2875;
                }
                _2650 = frontier_phi_66_pred;
                _2660 = frontier_phi_66_pred_1;
                _2658 = frontier_phi_66_pred_2;
                _2656 = frontier_phi_66_pred_3;
                _2654 = frontier_phi_66_pred_4;
                _2652 = frontier_phi_66_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2650;
                    _2803 = _2652;
                    _2804 = _2654;
                    _2805 = _2656;
                    _2806 = _2658;
                    _2807 = _2660;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
        }
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.z;
        uint _2666 = (_2664 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2666) & _2523) == 0u)
        {
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
            _2778 = _2657;
            _2780 = _2659;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
            float _2796 = _2795 * _2477;
            float _2797 = _2795 * _2478;
            float _2798 = _2795 * _2479;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2666 < ((_2664 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2930 = _2649;
                float _2931 = _2651;
                float _2932 = _2653;
                float _2933 = _2655;
                float _2934 = _2657;
                float _2935 = _2659;
                uint _2936 = _2666;
                uint _2945;
                bool _2946;
                for (;;)
                {
                    _2945 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                    _2946 = _2945 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2946)
                    {
                        frontier_phi_77_pred = _2935;
                        frontier_phi_77_pred_1 = _2934;
                        frontier_phi_77_pred_2 = _2933;
                        frontier_phi_77_pred_3 = _2932;
                        frontier_phi_77_pred_4 = _2931;
                        frontier_phi_77_pred_5 = _2930;
                    }
                    else
                    {
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        uint _3158 = _2945;
                        uint _3159;
                        vec4 _3184;
                        float _3185;
                        vec4 _3200;
                        vec3 _3212;
                        vec4 _3227;
                        vec4 _3243;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3169 = ((_2936 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3158));
                            _3159 = (_3158 + 4294967295u) & _3158;
                            uint _3171 = _3169 * 40u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3185 = _3184.w;
                            uint _3187 = (_3169 * 40u) + 4u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3169 * 40u) + 8u;
                            _3212 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x));
                            uint _3214 = (_3169 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3169 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3169 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3169 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2479, _3278.z, fma(_2478, _3278.y, _3278.x * _2477)) + _3278.w;
                            _3291 = !((fma(_2479, _3259.z, fma(_2478, _3259.y, _3259.x * _2477)) + _3259.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3184.x - _2477;
                                float _3319 = _3184.y - _2478;
                                float _3320 = _3184.z - _2479;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3185 * _3185));
                                float _4469 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3336 = sqrt(_3321) * _3200.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_710, _713, _716))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2479, _3227.z, fma(_2478, _3227.y, _3227.x * _2477)) + _3227.w) / _3290;
                                float _3350 = (fma(_2479, _3243.z, fma(_2478, _3243.y, _3243.x * _2477)) + _3243.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4485 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _785;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2796;
                                float _3380 = _3326 - _2797;
                                float _3381 = _3327 - _2798;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4496 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3393 = dot(vec3(_710, _713, _716), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4507 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_710, _713, _716), vec3(_3325, _3326, _3327))) + _3402;
                                float _4518 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4529 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3356 * _3200.y;
                                frontier_phi_83_pred_1 = _3356 * _3200.x;
                                frontier_phi_83_pred_2 = _3430 * _3212.z;
                                frontier_phi_83_pred_3 = _3430 * _3212.y;
                                frontier_phi_83_pred_4 = _3430 * _3212.x;
                                frontier_phi_83_pred_5 = _3356 * _3200.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3438 = frontier_phi_83_pred;
                            _3437 = frontier_phi_83_pred_1;
                            _3436 = frontier_phi_83_pred_2;
                            _3435 = frontier_phi_83_pred_3;
                            _3434 = frontier_phi_83_pred_4;
                            _3439 = frontier_phi_83_pred_5;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            _3144 = _3439 + _3157;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            _3141 = _3436 + _3154;
                            if (_3159 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3159;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3144;
                        frontier_phi_77_pred_1 = _3143;
                        frontier_phi_77_pred_2 = _3142;
                        frontier_phi_77_pred_3 = _3141;
                        frontier_phi_77_pred_4 = _3140;
                        frontier_phi_77_pred_5 = _3139;
                    }
                    _2781 = frontier_phi_77_pred;
                    _2779 = frontier_phi_77_pred_1;
                    _2777 = frontier_phi_77_pred_2;
                    _2775 = frontier_phi_77_pred_3;
                    _2773 = frontier_phi_77_pred_4;
                    _2771 = frontier_phi_77_pred_5;
                    uint _2937 = _2936 + 1u;
                    if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2930 = _2771;
                        _2931 = _2773;
                        _2932 = _2775;
                        _2933 = _2777;
                        _2934 = _2779;
                        _2935 = _2781;
                        _2936 = _2937;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2775;
                frontier_phi_58_59_ladder_1 = _2781;
                frontier_phi_58_59_ladder_2 = _2779;
                frontier_phi_58_59_ladder_3 = _2777;
                frontier_phi_58_59_ladder_4 = _2773;
                frontier_phi_58_59_ladder_5 = _2771;
            }
            else
            {
                frontier_phi_58_59_ladder = _2653;
                frontier_phi_58_59_ladder_1 = _2659;
                frontier_phi_58_59_ladder_2 = _2657;
                frontier_phi_58_59_ladder_3 = _2655;
                frontier_phi_58_59_ladder_4 = _2651;
                frontier_phi_58_59_ladder_5 = _2649;
            }
            _2770 = frontier_phi_58_59_ladder_5;
            _2772 = frontier_phi_58_59_ladder_4;
            _2774 = frontier_phi_58_59_ladder;
            _2776 = frontier_phi_58_59_ladder_3;
            _2778 = frontier_phi_58_59_ladder_2;
            _2780 = frontier_phi_58_59_ladder_1;
        }
        float _2785 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2536 = (_2785 * _2776) + _1972;
        _2538 = (_2785 * _2778) + _1974;
        _2540 = (_2785 * _2780) + _1976;
        _2542 = ((_2770 * _754) * _2785) + _2317;
        _2544 = ((_2772 * _756) * _2785) + _2319;
        _2546 = ((_2774 * _757) * _2785) + _2321;
    }
    else
    {
        _2536 = _1972;
        _2538 = _1974;
        _2540 = _1976;
        _2542 = _2317;
        _2544 = _2319;
        _2546 = _2321;
    }
    uint _2552 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _4545 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4556 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4567 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2583 = (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2536 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _769))) + ((_2542 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + (((_365 * cbMtdParam._m0[11u].x) * (_515.x + _500.x)) * cbInstanceData._m0[_2552].x);
    float _2585 = ((((_365 * cbMtdParam._m0[11u].y) * (_515.y + _500.y)) * cbInstanceData._m0[_2552].y) + ((_2544 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2538 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _769)));
    float _2587 = ((((_365 * cbMtdParam._m0[11u].z) * (_515.z + _500.z)) * cbInstanceData._m0[_2552].z) + ((_2546 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1610)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2540 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _769)));
    float _2588 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2589 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2590 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    uint _2591 = _729 + 6u;
    float _2599 = _691 / cbSceneParam._m0[86u].x;
    float _2600 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2674 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2675 = _2674 / _613;
        float _2686 = _2675 * _664;
        float _2687 = _665 * _2675;
        float _2688 = (-0.0) - _2687;
        float _2690 = _2675 * _666;
        float _2692 = (cbSceneParam._m0[77u].w * _2688) / _2674;
        float _2693 = _2692 + cbSceneParam._m0[79u].w;
        float _2694 = cbSceneParam._m0[79u].w - _2687;
        float _2700 = sqrt(((_2686 * _2686) + (_2687 * _2687)) + (_2690 * _2690));
        float _2703 = (1.0 - (cbSceneParam._m0[77u].w / _2674)) * _2700;
        float _2708 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2710 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2887;
        if (abs((_2688 - _2692) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2887 = ((((_2693 > 0.0) ? exp2(_2708 * _2693) : (2.0 - exp2(_2710 * _2693))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2703;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2694) ? _2693 : (isnan(_2693) ? _2694 : max(_2693, _2694));
            float _2833 = isnan(_2694) ? _2693 : (isnan(_2693) ? _2694 : min(_2693, _2694));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2887 = ((abs(_2700 / _2688) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2708 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2708 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2710 * _2842) - exp2(_2710 * _2843)) * _2831))) + (_2703 * cbSceneParam._m0[80u].z);
        }
        vec4 _2889 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2898 = exp2((_2887 * (-1.44269502162933349609375)) * (1.0 - _2889.w));
        float _2899 = log2(_2898);
        float _2915 = log2(_2619);
        _2712 = (exp2(_2915 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].x)) * _2889.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2714 = (exp2(_2915 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].y)) * _2889.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2716 = (exp2(_2915 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2899 * cbSceneParam._m0[78u].z)) * _2889.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2718 = _2898 * _2619;
    }
    else
    {
        _2712 = _2616;
        _2714 = _2617;
        _2716 = _2618;
        _2718 = _2619;
    }
    bool _2925;
    vec4 _2728;
    vec4 _2750;
    float _2752;
    float _2756;
    float _2757;
    float _2758;
    float _2759;
    bool _2769;
    for (;;)
    {
        _2728 = cbMatDynParam._m0[0u];
        float _2730 = roundEven(_2728.y);
        bool _2731 = _2730 == 3.0;
        float _2732 = log2(_2718);
        float _2739 = exp2(_2732 * cbSceneParam._m0[78u].x) * _2588;
        float _2740 = exp2(_2732 * cbSceneParam._m0[78u].y) * _2589;
        float _2741 = exp2(_2732 * cbSceneParam._m0[78u].z) * _2590;
        float _2748 = _680 + (-0.5);
        _2750 = cbMtdParam._m0[1u];
        _2752 = _2750.y * _2748;
        float _2755 = (_2730 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2756 = _2755 * (_2731 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2712)));
        _2757 = _2755 * (_2731 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2714)));
        _2758 = _2755 * (_2731 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2716)));
        _2759 = _2748 * 0.999000012874603271484375;
        _2769 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2769)
        {
            if ((cbInstanceData._m0[_729 + 7u].x + _2759) < 0.5)
            {
                _2925 = true;
                break;
            }
        }
        uint _2866 = _730 + uint(_2728.w);
        if ((cbInstanceData._m0[_2866].w < 1.0) && ((cbInstanceData._m0[_2866].w + _2759) < 0.5))
        {
            _2925 = true;
            break;
        }
        if ((_2752 + 1.0) < _2750.x)
        {
            _2925 = true;
            break;
        }
        _2925 = false;
        break;
    }
    float _3130;
    if (_2925)
    {
        discard_state = true;
        _3130 = 0.0;
    }
    else
    {
        _3130 = cbInstanceData._m0[_2591].w;
    }
    SV_Target.x = _2756;
    SV_Target.y = _2757;
    SV_Target.z = _2758;
    SV_Target.w = _3130;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
    discard_exit();
}


