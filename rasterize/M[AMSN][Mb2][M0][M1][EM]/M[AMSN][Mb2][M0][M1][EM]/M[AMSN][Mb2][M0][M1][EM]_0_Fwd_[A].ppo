#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _844;
float _3216;
float _3217;
float _3218;
float _3219;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _229 = _223.x * cbMtdParam._m0[9u].x;
    float _230 = _223.y * cbMtdParam._m0[9u].y;
    float _231 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _247 = _243.z;
    float _251 = (_243.x * 2.0) + (-1.0);
    float _253 = (_243.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3228 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))));
    float _263 = fma(_260, _193 * NORMAL.x, fma(_253, _200 * TANGENT.x, (_186 * _178) * _251));
    float _266 = fma(_260, _193 * NORMAL.y, fma(_253, _200 * TANGENT.y, (_186 * _179) * _251));
    float _269 = fma(_260, _193 * NORMAL.z, fma(_253, _200 * TANGENT.z, (_186 * _180) * _251));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _3239 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _277 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3261 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3272 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    vec4 _363 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _365 = _363.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _523 = sqrt(((_349 * _349) + (_350 * _350)) + (_351 * _351));
        float _529 = (cbMatDynParam._m0[5u].x * _523) + cbMatDynParam._m0[5u].y;
        float _3283 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
        float _530 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _534 = (cbMatDynParam._m0[5u].z * _523) + cbMatDynParam._m0[5u].w;
        float _3294 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) - _530)) + _530) < ((_365 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _398 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _401 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _404 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _417 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = _417 + 9u;
    uint _420 = _419 + uint(cbMatDynParam._m0[0u].w);
    float _426 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_420].x;
    float _427 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_420].y;
    float _428 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_420].z;
    float _3305 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    vec4 _440 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _443 = _440.x * TEXCOORD_3.w;
    float _444 = dot(vec3(_274, _275, _276), vec3(_356, _357, _358));
    float _447 = _444 * 2.0;
    float _451 = (_447 * _274) - _356;
    float _452 = (_447 * _275) - _357;
    float _453 = (_447 * _276) - _358;
    float _457 = abs(dot(vec3(_356, _357, _358), vec3(_274, _275, _276)));
    float _3338 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = sqrt(_277);
    float _472 = exp2((_459 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_459 * 3.0));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _572 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _576 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _601 = _504 + _274;
        float _602 = _508 + _275;
        float _603 = _512 + _276;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_274, _275, _276), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3386 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_274, _275, _276), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3419 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_274, _275, _276), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3452 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _891 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _895 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _918 = _504 + _274;
        float _919 = _508 + _275;
        float _920 = _512 + _276;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_274, _275, _276), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3515 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_274, _275, _276), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3548 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_274, _275, _276), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3581 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = _844;
        _1166 = _844;
        _1167 = _844;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _857)) + _857;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _451 * 0.5;
    float _1225 = _452 * 0.5;
    float _1226 = _453 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_843, _847, _850, _853));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_845, _848, _851, _854));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _849, _852, _855));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _277);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_453, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451));
        float _1356 = fma(_453, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451));
        float _1359 = fma(_453, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1387 = frontier_phi_17_15_ladder;
        }
        float _1592;
        if (_1356 > 0.0)
        {
            _1592 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1592 = frontier_phi_26_22_ladder;
        }
        float _1835;
        if (_1359 > 0.0)
        {
            _1835 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1835 = frontier_phi_38_33_ladder;
        }
        float _1837 = isnan(_1592) ? _1387 : (isnan(_1387) ? _1592 : min(_1387, _1592));
        float _1838 = isnan(_1835) ? _1837 : (isnan(_1837) ? _1835 : min(_1837, _1835));
        float _1842 = (_1838 * _1353) + _1342;
        float _1843 = (_1838 * _1356) + _1346;
        float _1844 = (_1838 * _1359) + _1350;
        float _1845 = _1838 * 9.9999997473787516355514526367188e-05;
        float _1847 = (-1.0) - _1845;
        float _1849 = _1845 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1844 > _1849) || ((_1844 < _1847) || ((_1843 > _1849) || ((_1843 < _1847) || ((_1842 < _1847) || (_1842 > _1849))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1844, cbModelParam._m0[9u].z, fma(_1843, cbModelParam._m0[9u].y, _1842 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1844, cbModelParam._m0[10u].z, fma(_1843, cbModelParam._m0[10u].y, _1842 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1844, cbModelParam._m0[11u].z, fma(_1843, cbModelParam._m0[11u].y, _1842 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_16_38_ladder = _1968.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1968.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1968.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_16_38_ladder_2;
        _1377 = frontier_phi_16_38_ladder_1;
        _1379 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_451, _452, _453), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _277);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_453, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451));
        float _1454 = fma(_453, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451));
        float _1457 = fma(_453, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451));
        float _1597;
        if (_1451 > 0.0)
        {
            _1597 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1597 = frontier_phi_28_24_ladder;
        }
        float _1862;
        if (_1454 > 0.0)
        {
            _1862 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1862 = frontier_phi_40_35_ladder;
        }
        float _2067;
        if (_1457 > 0.0)
        {
            _2067 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2067 = frontier_phi_49_46_ladder;
        }
        float _2069 = isnan(_1862) ? _1597 : (isnan(_1597) ? _1862 : min(_1597, _1862));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1451) + _1440;
        float _2075 = (_2070 * _1454) + _1444;
        float _2076 = (_2070 * _1457) + _1448;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2077;
        float _2080 = _2077 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2076 > _2080) || ((_2076 < _2078) || ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 < _2078) || (_2074 > _2080))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2076, cbModelParam._m0[17u].z, fma(_2075, cbModelParam._m0[17u].y, _2074 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2076, cbModelParam._m0[18u].z, fma(_2075, cbModelParam._m0[18u].y, _2074 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2076, cbModelParam._m0[19u].z, fma(_2075, cbModelParam._m0[19u].y, _2074 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_25_49_ladder = _2278.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2278.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2278.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_25_49_ladder_2;
        _1478 = frontier_phi_25_49_ladder_1;
        _1480 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_451, _452, _453), _1384);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1492 = ((((1.0 - _472) * ((_459 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_472 * _459)) * _443;
    float _1493 = _1492 * ((cbModelParam._m0[1u].w * (_1476 - _1375)) + _1375);
    float _1494 = _1492 * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1495 = _1492 * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    uvec4 _1514 = floatBitsToUint(cbInstanceData._m0[_417 + 5u]);
    uint _1516 = _1514.x * 14u;
    uint _1517 = _1516 + 13u;
    float _1524 = _443 + (-1.0);
    float _1529 = (cbLight._m0[_1517].x * _1524) + 1.0;
    float _1530 = (cbLight._m0[_1517].y * _1524) + 1.0;
    float _1531 = (cbLight._m0[_1517].z * _1524) + 1.0;
    float _1532 = (cbLight._m0[_1517].w * _1524) + 1.0;
    uint _1533 = _1516 + 5u;
    float _1539 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1543 = _1516 + 4u;
    float _1550 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1554 = _1516 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_274, _275, _276));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_274, _275, _276));
    float _3717 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3728 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1533].x * _1539) * _1575) + ((cbLight._m0[_1543].x * _1550) * _1573);
    float _1583 = ((_1539 * cbLight._m0[_1533].y) * _1575) + ((_1550 * cbLight._m0[_1543].y) * _1573);
    float _1584 = ((_1539 * cbLight._m0[_1533].z) * _1575) + ((_1550 * cbLight._m0[_1543].z) * _1573);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1516 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1582;
        _1604 = _1583;
        _1606 = _1584;
    }
    else
    {
        uint _1610 = _1516 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1516 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3739 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1629 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1582;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1806 = _1516 + 7u;
        float _1822 = (dot(vec3(cbLight._m0[_1516 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3755 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1825 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1647 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1602;
        _1649 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1604;
        _1651 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1606;
    }
    uint _1654 = _1516 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _277) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1516].x + _356;
    float _1670 = cbLight._m0[_1516].y + _357;
    float _1671 = cbLight._m0[_1516].z + _358;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1516].xyz));
    float _3771 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _1683 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1684 = dot(vec3(_274, _275, _276), vec3(_1676, _1677, _1678));
    float _3793 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1676, _1677, _1678));
    float _3804 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1708 = 1.0 - _1668;
    float _1719 = (0.5 / (((_1683 * ((_1682 * _1708) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1708) + _1668) * _1682))) * _1682;
    float _3815 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1732 = _1516 + 9u;
    float _1743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _277) * 0.949999988079071044921875);
    float _1744 = _1743 * _1743;
    float _1745 = cbLight._m0[_1554].x + _356;
    float _1746 = cbLight._m0[_1554].y + _357;
    float _1747 = cbLight._m0[_1554].z + _358;
    float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
    float _1752 = _1751 * _1745;
    float _1753 = _1751 * _1746;
    float _1754 = _1751 * _1747;
    float _1755 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1554].xyz));
    float _3826 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1759 = dot(vec3(_274, _275, _276), vec3(_1752, _1753, _1754));
    float _3837 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1752, _1753, _1754));
    float _3848 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1744 * _1744;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1744;
    float _1791 = (0.5 / (((_1683 * ((_1758 * _1781) + _1744)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1781) + _1744) * _1758))) * _1758;
    float _3859 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    float _1803 = (((_1780 * cbLight._m0[_1732].x) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].x) * _1721) * _1550);
    float _1804 = (((_1780 * cbLight._m0[_1732].y) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].y) * _1721) * _1550);
    float _1805 = (((_1780 * cbLight._m0[_1732].z) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].z) * _1721) * _1550);
    float _1867;
    float _1869;
    float _1871;
    if (_1591)
    {
        _1867 = _1803;
        _1869 = _1804;
        _1871 = _1805;
    }
    else
    {
        uint _1873 = _1516 + 2u;
        uint _1877 = _1516 + 10u;
        float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _277) * 0.949999988079071044921875);
        float _1892 = _1891 * _1891;
        float _1893 = cbLight._m0[_1873].x + _356;
        float _1894 = cbLight._m0[_1873].y + _357;
        float _1895 = cbLight._m0[_1873].z + _358;
        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
        float _1900 = _1899 * _1893;
        float _1901 = _1899 * _1894;
        float _1902 = _1899 * _1895;
        float _1903 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1873].xyz));
        float _3870 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1906 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1907 = dot(vec3(_274, _275, _276), vec3(_1900, _1901, _1902));
        float _3881 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1910 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1911 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_1900, _1901, _1902));
        float _3892 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1915 = _1892 * _1892;
        float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
        float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1929 = 1.0 - _1892;
        float _1939 = (0.5 / (((_1683 * ((_1906 * _1929) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1929) + _1892) * _1906))) * _1906;
        float _3903 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1941 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
        float _1942 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1867 = (((_1928 * cbLight._m0[_1877].x) * _1941) * _1942) + _1803;
        _1869 = (((_1928 * cbLight._m0[_1877].y) * _1941) * _1942) + _1804;
        _1871 = (((_1928 * cbLight._m0[_1877].z) * _1941) * _1942) + _1805;
    }
    float _1977;
    float _1979;
    float _1981;
    if (_1609)
    {
        _1977 = _1867;
        _1979 = _1869;
        _1981 = _1871;
    }
    else
    {
        uint _1988 = _1516 + 3u;
        uint _1992 = _1516 + 11u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _277) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _356;
        float _2009 = cbLight._m0[_1988].y + _357;
        float _2010 = cbLight._m0[_1988].z + _358;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1988].xyz));
        float _3919 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2022 = dot(vec3(_274, _275, _276), vec3(_2015, _2016, _2017));
        float _3930 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _3941 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2044 = 1.0 - _2007;
        float _2054 = (0.5 / (((_1683 * ((_2021 * _2044) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2044) + _2007) * _2021))) * _2021;
        float _3952 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2056 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2057 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1977 = (((_2043 * cbLight._m0[_1992].x) * _2056) * _2057) + _1867;
        _1979 = (((_2043 * cbLight._m0[_1992].y) * _2056) * _2057) + _1869;
        _1981 = (((_2043 * cbLight._m0[_1992].z) * _2056) * _2057) + _1871;
    }
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1514.y == 0u)
    {
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2132;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2132;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2132;
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.x;
        uint _2159 = uint((float(_2147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2148))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2148)));
        float _2169 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2170 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        uint _2173 = uint(isnan(14.0) ? _2170 : (isnan(_2170) ? 14.0 : min(_2170, 14.0)));
        uvec4 _2178 = texelFetch(g_lightClusterGridBuffer, int(((_2173 << 2u) + (_2159 << 6u)) >> 2u));
        uint _2179 = _2178.x;
        uint _2180 = _2147.z;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((((1u << ((_2180 >> 4u) & 15u)) + 4294967295u) & _2179) == 0u) || ((_2180 & 240u) == 0u))
        {
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
        }
        else
        {
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            uint _2442 = 0u;
            uint _2451;
            bool _2452;
            for (;;)
            {
                _2451 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                _2452 = _2451 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2452)
                {
                    frontier_phi_66_pred = _2436;
                    frontier_phi_66_pred_1 = _2441;
                    frontier_phi_66_pred_2 = _2440;
                    frontier_phi_66_pred_3 = _2439;
                    frontier_phi_66_pred_4 = _2438;
                    frontier_phi_66_pred_5 = _2437;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2441;
                    _2587 = _2451;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2442 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2133;
                        float _2648 = _2607.y - _2134;
                        float _2649 = _2607.z - _2135;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_398, _401, _404), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3978 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2133;
                        float _2683 = (-0.0) - _2134;
                        float _2684 = (-0.0) - _2135;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _459;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_398, _401, _404), vec3(_2689, _2690, _2691));
                        float _3994 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2724 = dot(vec3(_398, _401, _404), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _4005 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _4016 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _4027 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2511 = (_2678 * _2626.x) + _2584;
                        _2512 = (_2678 * _2626.y) + _2585;
                        _2513 = (_2678 * _2626.z) + _2586;
                        _2508 = (_2759 * _2643.x) + _2581;
                        _2509 = (_2759 * _2643.y) + _2582;
                        _2510 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2513;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_66_pred = _2508;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                _2284 = frontier_phi_66_pred;
                _2294 = frontier_phi_66_pred_1;
                _2292 = frontier_phi_66_pred_2;
                _2290 = frontier_phi_66_pred_3;
                _2288 = frontier_phi_66_pred_4;
                _2286 = frontier_phi_66_pred_5;
                uint _2443 = _2442 + 1u;
                if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2436 = _2284;
                    _2437 = _2286;
                    _2438 = _2288;
                    _2439 = _2290;
                    _2440 = _2292;
                    _2441 = _2294;
                    _2442 = _2443;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
        }
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.z;
        uint _2300 = (_2298 >> 8u) & 15u;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((4294967295u << _2300) & _2179) == 0u)
        {
            _2404 = _2283;
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
            _2412 = _2291;
            _2414 = _2293;
        }
        else
        {
            float _2429 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _2430 = _2429 * _2133;
            float _2431 = _2429 * _2134;
            float _2432 = _2429 * _2135;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2300 < ((_2298 >> 12u) & 15u))
            {
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2564 = _2283;
                float _2565 = _2285;
                float _2566 = _2287;
                float _2567 = _2289;
                float _2568 = _2291;
                float _2569 = _2293;
                uint _2570 = _2300;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2580)
                    {
                        frontier_phi_77_pred = _2569;
                        frontier_phi_77_pred_1 = _2568;
                        frontier_phi_77_pred_2 = _2567;
                        frontier_phi_77_pred_3 = _2566;
                        frontier_phi_77_pred_4 = _2565;
                        frontier_phi_77_pred_5 = _2564;
                    }
                    else
                    {
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        float _2791 = _2569;
                        uint _2792 = _2579;
                        uint _2793;
                        vec4 _2818;
                        float _2819;
                        vec4 _2834;
                        vec3 _2846;
                        vec4 _2862;
                        vec4 _2878;
                        float _2925;
                        bool _2926;
                        for (;;)
                        {
                            uint _2803 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2792));
                            _2793 = (_2792 + 4294967295u) & _2792;
                            uint _2805 = _2803 * 40u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            _2819 = _2818.w;
                            uint _2821 = (_2803 * 40u) + 4u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2836 = (_2803 * 40u) + 8u;
                            _2846 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x));
                            uint _2849 = (_2803 * 40u) + 16u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2803 * 40u) + 20u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2803 * 40u) + 24u;
                            vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2900 = (_2803 * 40u) + 28u;
                            vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            _2925 = fma(_2135, _2913.z, fma(_2134, _2913.y, _2913.x * _2133)) + _2913.w;
                            _2926 = !((fma(_2135, _2894.z, fma(_2134, _2894.y, _2894.x * _2133)) + _2894.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2926)
                            {
                                float _2953 = _2818.x - _2133;
                                float _2954 = _2818.y - _2134;
                                float _2955 = _2818.z - _2135;
                                float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                                float _2959 = inversesqrt(_2956);
                                float _2960 = _2959 * _2953;
                                float _2961 = _2959 * _2954;
                                float _2962 = _2959 * _2955;
                                float _2966 = 1.0 - (_2956 / (_2819 * _2819));
                                float _4038 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _2971 = sqrt(_2956) * _2834.w;
                                float _2973 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                                float _2974 = _2973 * _2973;
                                float _2977 = ((1.0 - _2974) * dot(vec3(_2960, _2961, _2962), vec3(_398, _401, _404))) + _2974;
                                float _2980 = _2971 * _2971;
                                float _2984 = (fma(_2135, _2862.z, fma(_2134, _2862.y, _2862.x * _2133)) + _2862.w) / _2925;
                                float _2985 = (fma(_2135, _2878.z, fma(_2134, _2878.y, _2878.x * _2133)) + _2878.w) / _2925;
                                float _2989 = 1.0 - dot(vec2(_2984, _2985), vec2(_2984, _2985));
                                float _4054 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _2991 = _2990 * (((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2967) / ((_2980 * 0.699999988079071044921875) + 1.0));
                                float _3003 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                                float _3004 = 1.0 - _459;
                                float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                                float _3012 = _3011 * _3011;
                                float _3013 = _3012 * _3012;
                                float _3014 = _2960 - _2430;
                                float _3015 = _2961 - _2431;
                                float _3016 = _2962 - _2432;
                                float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                                float _3024 = dot(vec3(_398, _401, _404), vec3((-0.0) - _2430, (-0.0) - _2431, (-0.0) - _2432));
                                float _4065 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3028 = dot(vec3(_398, _401, _404), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                                float _4076 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3031 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                                float _3036 = _2973 * _3012;
                                float _3037 = _3036 * _3036;
                                float _3043 = ((1.0 - _3037) * dot(vec3(_398, _401, _404), vec3(_2960, _2961, _2962))) + _3037;
                                float _4087 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3045 = 1.0 - _3012;
                                float _3055 = (0.5 / (((_3044 * ((_3027 * _3045) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3012) * _3027))) * _3044;
                                float _4098 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3065 = (_2990 * _2967) * (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_3035 * _3035) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2991 * _2834.y;
                                frontier_phi_83_pred_1 = _2991 * _2834.x;
                                frontier_phi_83_pred_2 = _3065 * _2846.z;
                                frontier_phi_83_pred_3 = _3065 * _2846.y;
                                frontier_phi_83_pred_4 = _3065 * _2846.x;
                                frontier_phi_83_pred_5 = _2991 * _2834.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3073 = frontier_phi_83_pred;
                            _3072 = frontier_phi_83_pred_1;
                            _3071 = frontier_phi_83_pred_2;
                            _3070 = frontier_phi_83_pred_3;
                            _3069 = frontier_phi_83_pred_4;
                            _3074 = frontier_phi_83_pred_5;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            if (_2793 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2793;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2778;
                        frontier_phi_77_pred_1 = _2777;
                        frontier_phi_77_pred_2 = _2776;
                        frontier_phi_77_pred_3 = _2775;
                        frontier_phi_77_pred_4 = _2774;
                        frontier_phi_77_pred_5 = _2773;
                    }
                    _2415 = frontier_phi_77_pred;
                    _2413 = frontier_phi_77_pred_1;
                    _2411 = frontier_phi_77_pred_2;
                    _2409 = frontier_phi_77_pred_3;
                    _2407 = frontier_phi_77_pred_4;
                    _2405 = frontier_phi_77_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2405;
                        _2565 = _2407;
                        _2566 = _2409;
                        _2567 = _2411;
                        _2568 = _2413;
                        _2569 = _2415;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2409;
                frontier_phi_58_59_ladder_1 = _2415;
                frontier_phi_58_59_ladder_2 = _2413;
                frontier_phi_58_59_ladder_3 = _2411;
                frontier_phi_58_59_ladder_4 = _2407;
                frontier_phi_58_59_ladder_5 = _2405;
            }
            else
            {
                frontier_phi_58_59_ladder = _2287;
                frontier_phi_58_59_ladder_1 = _2293;
                frontier_phi_58_59_ladder_2 = _2291;
                frontier_phi_58_59_ladder_3 = _2289;
                frontier_phi_58_59_ladder_4 = _2285;
                frontier_phi_58_59_ladder_5 = _2283;
            }
            _2404 = frontier_phi_58_59_ladder_5;
            _2406 = frontier_phi_58_59_ladder_4;
            _2408 = frontier_phi_58_59_ladder;
            _2410 = frontier_phi_58_59_ladder_3;
            _2412 = frontier_phi_58_59_ladder_2;
            _2414 = frontier_phi_58_59_ladder_1;
        }
        float _2419 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
        _2192 = (_2419 * _2410) + _1647;
        _2194 = (_2419 * _2412) + _1649;
        _2196 = (_2419 * _2414) + _1651;
        _2198 = ((_2404 * 0.039999999105930328369140625) * _2419) + _1977;
        _2200 = ((_2406 * 0.039999999105930328369140625) * _2419) + _1979;
        _2202 = ((_2408 * 0.039999999105930328369140625) * _2419) + _1981;
    }
    else
    {
        _2192 = _1647;
        _2194 = _1649;
        _2196 = _1651;
        _2198 = _1977;
        _2200 = _1979;
        _2202 = _1981;
    }
    float _4114 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4125 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4136 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _2219 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2192 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _443))) + ((_2198 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2220 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2194 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _443))) + ((_2200 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2221 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2196 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _443))) + ((_2202 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2222 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    uint _2225 = _417 + 6u;
    float _2233 = _377 / cbSceneParam._m0[86u].x;
    float _2234 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2248 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2250 = _2248.x;
    float _2251 = _2248.y;
    float _2252 = _2248.z;
    float _2253 = _2248.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2308 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2309 = _2308 / _296;
        float _2320 = _2309 * _349;
        float _2321 = _350 * _2309;
        float _2322 = (-0.0) - _2321;
        float _2324 = _2309 * _351;
        float _2326 = (cbSceneParam._m0[77u].w * _2322) / _2308;
        float _2327 = _2326 + cbSceneParam._m0[79u].w;
        float _2328 = cbSceneParam._m0[79u].w - _2321;
        float _2334 = sqrt(((_2320 * _2320) + (_2321 * _2321)) + (_2324 * _2324));
        float _2337 = (1.0 - (cbSceneParam._m0[77u].w / _2308)) * _2334;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2521;
        if (abs((_2322 - _2326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2521 = ((((_2327 > 0.0) ? exp2(_2342 * _2327) : (2.0 - exp2(_2344 * _2327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2337;
        }
        else
        {
            float _2465 = 1.0 / cbSceneParam._m0[80u].x;
            float _2466 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : max(_2327, _2328));
            float _2467 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : min(_2327, _2328));
            float _2476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : min(_2466, 0.0));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            _2521 = ((abs(_2334 / _2322) * cbSceneParam._m0[80u].y) * ((((_2476 - _2477) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))))) * _2465)) - ((exp2(_2344 * _2476) - exp2(_2344 * _2477)) * _2465))) + (_2337 * cbSceneParam._m0[80u].z);
        }
        vec4 _2523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, 1.0), 0.0);
        float _2532 = exp2((_2521 * (-1.44269502162933349609375)) * (1.0 - _2523.w));
        float _2533 = log2(_2532);
        float _2549 = log2(_2253);
        _2346 = (exp2(_2549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].x)) * _2523.x) / cbSceneParam._m0[78u].x)) + _2250;
        _2348 = (exp2(_2549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].y)) * _2523.y) / cbSceneParam._m0[78u].y)) + _2251;
        _2350 = (exp2(_2549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].z)) * _2523.z) / cbSceneParam._m0[78u].z)) + _2252;
        _2352 = _2532 * _2253;
    }
    else
    {
        _2346 = _2250;
        _2348 = _2251;
        _2350 = _2252;
        _2352 = _2253;
    }
    bool _2559;
    vec4 _2362;
    vec4 _2384;
    float _2386;
    float _2390;
    float _2391;
    float _2392;
    float _2393;
    bool _2403;
    for (;;)
    {
        _2362 = cbMatDynParam._m0[0u];
        float _2364 = roundEven(_2362.y);
        bool _2365 = _2364 == 3.0;
        float _2366 = log2(_2352);
        float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * _2222;
        float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * _2223;
        float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * _2224;
        float _2382 = _365 + (-0.5);
        _2384 = cbMtdParam._m0[1u];
        _2386 = _2384.y * _2382;
        float _2389 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2390 = _2389 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
        _2391 = _2389 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
        _2392 = _2389 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
        _2393 = _2382 * 0.999000012874603271484375;
        _2403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2403)
        {
            if ((cbInstanceData._m0[_417 + 7u].x + _2393) < 0.5)
            {
                _2559 = true;
                break;
            }
        }
        uint _2500 = _419 + uint(_2362.w);
        if ((cbInstanceData._m0[_2500].w < 1.0) && ((cbInstanceData._m0[_2500].w + _2393) < 0.5))
        {
            _2559 = true;
            break;
        }
        if ((_2386 + 1.0) < _2384.x)
        {
            _2559 = true;
            break;
        }
        _2559 = false;
        break;
    }
    float _2764;
    if (_2559)
    {
        discard_state = true;
        _2764 = 0.0;
    }
    else
    {
        _2764 = cbInstanceData._m0[_2225].w;
    }
    SV_Target.x = _2390;
    SV_Target.y = _2391;
    SV_Target.z = _2392;
    SV_Target.w = _2764;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2225].w;
    discard_exit();
}


