#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _936;
float _3609;
float _3610;
float _3611;
float _3612;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3621 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))));
    vec4 _323 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _353 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_265.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3632 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _357 = fma(_296, _208 * NORMAL.x, fma(_289, _215 * TANGENT.x, (_201 * _193) * _287));
    float _360 = fma(_296, _208 * NORMAL.y, fma(_289, _215 * TANGENT.y, (_201 * _194) * _287));
    float _363 = fma(_296, _208 * NORMAL.z, fma(_289, _215 * TANGENT.z, (_201 * _195) * _287));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3643 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _371 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3665 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3676 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _390 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _442 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _432);
    float _443 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _432);
    float _444 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _432);
    float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
    float _449 = _442 * _448;
    float _450 = _443 * _448;
    float _451 = _444 * _448;
    vec4 _456 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _458 = _456.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _616 = sqrt(((_442 * _442) + (_443 * _443)) + (_444 * _444));
        float _622 = (cbMatDynParam._m0[5u].x * _616) + cbMatDynParam._m0[5u].y;
        float _3687 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _627 = (cbMatDynParam._m0[5u].z * _616) + cbMatDynParam._m0[5u].w;
        float _3698 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) - _623)) + _623) < ((_458 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _470 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _471 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _491 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _494 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _497 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    uint _510 = uint(roundEven(NORMAL.w)) * 13u;
    uint _512 = _510 + 9u;
    uint _513 = _512 + uint(cbMatDynParam._m0[0u].w);
    float _519 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_513].x;
    float _520 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_513].y;
    float _521 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_513].z;
    float _3709 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _470, cbSceneParam._m0[86u].y * _471));
    float _536 = _533.x * TEXCOORD_3.w;
    float _537 = dot(vec3(_368, _369, _370), vec3(_449, _450, _451));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _368) - _449;
    float _545 = (_540 * _369) - _450;
    float _546 = (_540 * _370) - _451;
    float _550 = abs(dot(vec3(_449, _450, _451), vec3(_368, _369, _370)));
    float _3742 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_371);
    float _565 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_605, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597));
        float _664 = fma(_605, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597));
        float _668 = fma(_605, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597));
        float _693 = _597 + _368;
        float _694 = _601 + _369;
        float _695 = _605 + _370;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_368, _369, _370), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3790 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_368, _369, _370), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3823 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_368, _369, _370), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3856 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _979 = fma(_605, cbModelParam._m0[30u].z, fma(_601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _597));
        float _983 = fma(_605, cbModelParam._m0[31u].z, fma(_601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _597));
        float _987 = fma(_605, cbModelParam._m0[32u].z, fma(_601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _597));
        float _1010 = _597 + _368;
        float _1011 = _601 + _369;
        float _1012 = _605 + _370;
        float _1022 = fma(_1012, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_979 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_983 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[35u].z) + ((((((_987 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1078 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1045.x + (-0.5));
        float _1080 = _1078 * (_1045.y + (-0.5));
        float _1081 = _1078 * (_1045.z + (-0.5));
        float _1088 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1052.x + (-0.5));
        float _1090 = _1088 * (_1052.y + (-0.5));
        float _1091 = _1088 * (_1052.z + (-0.5));
        float _1098 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1059.x + (-0.5));
        float _1100 = _1098 * (_1059.y + (-0.5));
        float _1101 = _1098 * (_1059.z + (-0.5));
        float _1108 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1066.x + (-0.5));
        float _1110 = _1108 * (_1066.y + (-0.5));
        float _1111 = _1108 * (_1066.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_368, _369, _370), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3919 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1142 + 1.0))) + _1147) * _1112;
        float _1157 = _1080 * 0.5;
        float _1158 = _1090 * 0.5;
        float _1159 = _1100 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_368, _369, _370), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3952 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1184 + 1.0))) + _1189) * _1113;
        float _1199 = _1081 * 0.5;
        float _1200 = _1091 * 0.5;
        float _1201 = _1101 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_368, _369, _370), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3985 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1226 + 1.0))) + _1231) * _1114;
        _1248 = _1081;
        _1249 = _1080;
        _1250 = _1079;
        _1251 = _1091;
        _1252 = _1090;
        _1253 = _1089;
        _1254 = _1101;
        _1255 = _1100;
        _1256 = _1099;
        _1257 = _1114;
        _1258 = _1113;
        _1259 = _1112;
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = _936;
        _1258 = _936;
        _1259 = _936;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _949)) + _949;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1295 = fma(_1274, cbSceneParam._m0[89u].z, fma(_1273, cbSceneParam._m0[89u].y, _1272 * cbSceneParam._m0[89u].x));
    float _1298 = fma(_1274, cbSceneParam._m0[90u].z, fma(_1273, cbSceneParam._m0[90u].y, _1272 * cbSceneParam._m0[90u].x));
    float _1301 = fma(_1274, cbSceneParam._m0[91u].z, fma(_1273, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1272));
    float _1316 = _544 * 0.5;
    float _1317 = _545 * 0.5;
    float _1318 = _546 * 0.5;
    float _1319 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1322 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1325 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1359;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1332 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_935, _939, _942, _945));
        float _1336 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_937, _940, _943, _946));
        float _1340 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_938, _941, _944, _947));
        float _1347 = dot(vec4(cbModelParam._m0[39u]), vec4(_1316, _1317, _1318, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1370;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1361 = dot(vec4(cbModelParam._m0[40u]), vec4(_1316, _1317, _1318, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1374 = (_1370 * cbModelParam._m0[1u].x) + (_1359 * (1.0 - cbModelParam._m0[1u].x));
    float _1384 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _371);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1384 : min(cbModelParam._m0[25u].z, _1384));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_605, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_605, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_605, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1446 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1449 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1477 = frontier_phi_17_15_ladder;
        }
        float _1649;
        if (_1446 > 0.0)
        {
            _1649 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1649 = frontier_phi_26_22_ladder;
        }
        float _1945;
        if (_1449 > 0.0)
        {
            _1945 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1945 = frontier_phi_38_33_ladder;
        }
        float _1947 = isnan(_1649) ? _1477 : (isnan(_1477) ? _1649 : min(_1477, _1649));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1443) + _1432;
        float _1953 = (_1948 * _1446) + _1436;
        float _1954 = (_1948 * _1449) + _1440;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1385);
            frontier_phi_16_38_ladder = _2099.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2099.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2099.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_16_38_ladder_2;
        _1467 = frontier_phi_16_38_ladder_1;
        _1469 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1385);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _371);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_605, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_605, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_605, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1543 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1546 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1654;
        if (_1540 > 0.0)
        {
            _1654 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1654 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1543 > 0.0)
        {
            _1972 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _2299;
        if (_1546 > 0.0)
        {
            _2299 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2299 = frontier_phi_50_47_ladder;
        }
        float _2301 = isnan(_1972) ? _1654 : (isnan(_1654) ? _1972 : min(_1654, _1972));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1540) + _1529;
        float _2307 = (_2302 * _1543) + _1533;
        float _2308 = (_2302 * _1546) + _1537;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_25_50_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_25_50_ladder_2;
        _1567 = frontier_phi_25_50_ladder_1;
        _1569 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1474);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1581 = ((((1.0 - _565) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_565 * _552)) * _536;
    float _1582 = _1581 * ((cbModelParam._m0[1u].w * (_1565 - _1465)) + _1465);
    float _1583 = _1581 * ((cbModelParam._m0[1u].w * (_1567 - _1467)) + _1467);
    float _1584 = _1581 * ((cbModelParam._m0[1u].w * (_1569 - _1469)) + _1469);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1641 = _1628 / _1640;
    float _1642 = _1632 / _1640;
    float _1643 = _1636 / _1640;
    float _1790;
    float _1791;
    float _1792;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1670 = ((uint(_1643 > cbSceneParam._m0[59u].y) + uint(_1643 > cbSceneParam._m0[59u].x)) + uint(_1643 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1671 = _1670 + 43u;
        uint _1679 = _1670 + 44u;
        uint _1687 = _1670 + 45u;
        uint _1695 = _1670 + 46u;
        float _1706 = fma(_1640, cbSceneParam._m0[_1671].w, fma(_1636, cbSceneParam._m0[_1671].z, fma(_1632, cbSceneParam._m0[_1671].y, _1628 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1640, cbSceneParam._m0[_1679].w, fma(_1636, cbSceneParam._m0[_1679].z, fma(_1632, cbSceneParam._m0[_1679].y, _1628 * cbSceneParam._m0[_1679].x)));
        float _1718 = fma(_1640, cbSceneParam._m0[_1695].w, fma(_1636, cbSceneParam._m0[_1695].z, fma(_1632, cbSceneParam._m0[_1695].y, _1628 * cbSceneParam._m0[_1695].x)));
        float _1723 = cbSceneParam._m0[33u].z * _1718;
        float _1725 = cbSceneParam._m0[33u].w * _1718;
        float _1728 = fma(_1640, cbSceneParam._m0[_1687].w, fma(_1636, cbSceneParam._m0[_1687].z, fma(_1632, cbSceneParam._m0[_1687].y, _1628 * cbSceneParam._m0[_1687].x))) / _1718;
        float _1776 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
        float _4111 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1783 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1706) / _1718, (_1725 + _1710) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1725 + _1706) / _1718, (_1710 - _1723) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1723) / _1718, (_1710 - _1725) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1725) / _1718, (_1723 + _1710) / _1718), _1728), 0.0)).x), vec4(0.25)));
        _1790 = 1.0 - (_1783 * cbSceneParam._m0[34u].x);
        _1791 = 1.0 - (_1783 * cbSceneParam._m0[34u].y);
        _1792 = 1.0 - (_1783 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1790 = 1.0;
        _1791 = 1.0;
        _1792 = 1.0;
    }
    float _1856;
    float _1858;
    float _1860;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1844 = fma(_1640, cbSceneParam._m0[63u].w, fma(_1636, cbSceneParam._m0[63u].z, fma(_1632, cbSceneParam._m0[63u].y, _1628 * cbSceneParam._m0[63u].x)));
        float _1845 = fma(_1640, cbSceneParam._m0[60u].w, fma(_1636, cbSceneParam._m0[60u].z, fma(_1632, cbSceneParam._m0[60u].y, _1628 * cbSceneParam._m0[60u].x))) / _1844;
        float _1846 = fma(_1640, cbSceneParam._m0[61u].w, fma(_1636, cbSceneParam._m0[61u].z, fma(_1632, cbSceneParam._m0[61u].y, _1628 * cbSceneParam._m0[61u].x))) / _1844;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1845 >= cbSceneParam._m0[64u].x) && (_1846 >= cbSceneParam._m0[64u].y)) && (_1845 <= cbSceneParam._m0[64u].z)) && (_1846 <= cbSceneParam._m0[64u].w))
        {
            float _1985 = fma(_1640, cbSceneParam._m0[62u].w, fma(_1636, cbSceneParam._m0[62u].z, fma(_1632, cbSceneParam._m0[62u].y, _1628 * cbSceneParam._m0[62u].x))) / _1844;
            float _1989 = isnan(cbSceneParam._m0[41u].w) ? _1985 : (isnan(_1985) ? cbSceneParam._m0[41u].w : max(_1985, cbSceneParam._m0[41u].w));
            float _2032 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
            float _4127 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
            float _2039 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1845, cbSceneParam._m0[33u].w + _1846), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1845, _1846 - cbSceneParam._m0[33u].z), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].z, _1846 - cbSceneParam._m0[33u].w), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1846), _1989), 0.0)).x), vec4(0.25)));
            float _2043 = 1.0 - (_2039 * cbSceneParam._m0[34u].x);
            float _2044 = 1.0 - (_2039 * cbSceneParam._m0[34u].y);
            float _2045 = 1.0 - (_2039 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2045) ? _1792 : (isnan(_1792) ? _2045 : min(_1792, _2045));
            frontier_phi_37_36_ladder_1 = isnan(_2044) ? _1791 : (isnan(_1791) ? _2044 : min(_1791, _2044));
            frontier_phi_37_36_ladder_2 = isnan(_2043) ? _1790 : (isnan(_1790) ? _2043 : min(_1790, _2043));
        }
        else
        {
            frontier_phi_37_36_ladder = _1792;
            frontier_phi_37_36_ladder_1 = _1791;
            frontier_phi_37_36_ladder_2 = _1790;
        }
        _1856 = frontier_phi_37_36_ladder_2;
        _1858 = frontier_phi_37_36_ladder_1;
        _1860 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1856 = _1790;
        _1858 = _1791;
        _1860 = _1792;
    }
    uvec4 _1865 = floatBitsToUint(cbInstanceData._m0[_510 + 5u]);
    uint _1867 = _1865.x * 14u;
    uint _1868 = _1867 + 13u;
    float _1875 = _536 + (-1.0);
    float _1880 = (cbLight._m0[_1868].x * _1875) + 1.0;
    float _1881 = (cbLight._m0[_1868].y * _1875) + 1.0;
    float _1882 = (cbLight._m0[_1868].z * _1875) + 1.0;
    float _1883 = (cbLight._m0[_1868].w * _1875) + 1.0;
    uint _1884 = _1867 + 5u;
    float _1890 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1894 = _1867 + 4u;
    float _1904 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1908 = _1867 | 1u;
    float _1919 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_368, _369, _370));
    float _1922 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_368, _369, _370));
    float _4163 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _4174 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1927 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * 0.3183098733425140380859375;
    float _1929 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _1936 = ((cbLight._m0[_1884].x * _1890) * _1929) + (((cbLight._m0[_1894].x * _1856) * _1904) * _1927);
    float _1937 = ((_1890 * cbLight._m0[_1884].y) * _1929) + (((cbLight._m0[_1894].y * _1858) * _1904) * _1927);
    float _1938 = ((_1890 * cbLight._m0[_1884].z) * _1929) + (((cbLight._m0[_1894].z * _1860) * _1904) * _1927);
    uvec4 _1942 = floatBitsToUint(cbLight._m0[_1867 + 12u]);
    bool _1944 = _1942.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_1944)
    {
        _2046 = _1936;
        _2048 = _1937;
        _2050 = _1938;
    }
    else
    {
        uint _2054 = _1867 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1867 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4185 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2073 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1936;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1937;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1938;
    }
    bool _2053 = _1942.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2053)
    {
        _2108 = _2046;
        _2110 = _2048;
        _2112 = _2050;
    }
    else
    {
        uint _2270 = _1867 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1867 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4201 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2289 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2108 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2046;
        _2110 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2048;
        _2112 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2050;
    }
    uint _2115 = _1867 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _371) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1867].x + _449;
    float _2131 = cbLight._m0[_1867].y + _450;
    float _2132 = cbLight._m0[_1867].z + _451;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1867].xyz));
    float _4217 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _2144 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2145 = dot(vec3(_368, _369, _370), vec3(_2137, _2138, _2139));
    float _4239 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2137, _2138, _2139));
    float _4250 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2144 * ((_2143 * _2169) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2169) + _2129) * _2143))) * _2143;
    float _4261 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2196 = _1867 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _371) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_1908].x + _449;
    float _2210 = cbLight._m0[_1908].y + _450;
    float _2211 = cbLight._m0[_1908].z + _451;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1908].xyz));
    float _4272 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2223 = dot(vec3(_368, _369, _370), vec3(_2216, _2217, _2218));
    float _4283 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2216, _2217, _2218));
    float _4294 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2208;
    float _2255 = (0.5 / (((_2144 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2245) + _2208) * _2222))) * _2222;
    float _4305 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2267 = (((_2244 * cbLight._m0[_2196].x) * _2257) * _1890) + ((((cbLight._m0[_2115].x * _1856) * _2168) * _2182) * _1904);
    float _2268 = (((_2244 * cbLight._m0[_2196].y) * _2257) * _1890) + ((((cbLight._m0[_2115].y * _1858) * _2168) * _2182) * _1904);
    float _2269 = (((_2244 * cbLight._m0[_2196].z) * _2257) * _1890) + ((((cbLight._m0[_2115].z * _1860) * _2168) * _2182) * _1904);
    float _2325;
    float _2327;
    float _2329;
    if (_1944)
    {
        _2325 = _2267;
        _2327 = _2268;
        _2329 = _2269;
    }
    else
    {
        uint _2331 = _1867 + 2u;
        uint _2335 = _1867 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _371) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _449;
        float _2352 = cbLight._m0[_2331].y + _450;
        float _2353 = cbLight._m0[_2331].z + _451;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2331].xyz));
        float _4316 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2365 = dot(vec3(_368, _369, _370), vec3(_2358, _2359, _2360));
        float _4327 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4338 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2144 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2387) + _2350) * _2364))) * _2364;
        float _4349 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2325 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2267;
        _2327 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2268;
        _2329 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2269;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2053)
    {
        _2431 = _2325;
        _2433 = _2327;
        _2435 = _2329;
    }
    else
    {
        uint _2442 = _1867 + 3u;
        uint _2446 = _1867 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _371) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _449;
        float _2463 = cbLight._m0[_2442].y + _450;
        float _2464 = cbLight._m0[_2442].z + _451;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2442].xyz));
        float _4365 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2476 = dot(vec3(_368, _369, _370), vec3(_2469, _2470, _2471));
        float _4376 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4387 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2144 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2498) + _2461) * _2475))) * _2475;
        float _4398 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2431 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2325;
        _2433 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2327;
        _2435 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2329;
    }
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_1865.y == 0u)
    {
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.x;
        uint _2544 = uint((float(_2532.y) * floor(float(uint(cbSceneParam._m0[85u].y * _471) / _2533))) + floor(float(uint(cbSceneParam._m0[85u].x * _470) / _2533)));
        float _2554 = (log2(_1643 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2555 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        uint _2558 = uint(isnan(14.0) ? _2555 : (isnan(_2555) ? 14.0 : min(_2555, 14.0)));
        uvec4 _2563 = texelFetch(g_lightClusterGridBuffer, int(((_2558 << 2u) + (_2544 << 6u)) >> 2u));
        uint _2564 = _2563.x;
        uint _2565 = _2532.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2565 >> 4u) & 15u)) + 4294967295u) & _2564) == 0u) || ((_2565 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2838)
                {
                    frontier_phi_71_pred = _2827;
                    frontier_phi_71_pred_1 = _2826;
                    frontier_phi_71_pred_2 = _2825;
                    frontier_phi_71_pred_3 = _2824;
                    frontier_phi_71_pred_4 = _2823;
                    frontier_phi_71_pred_5 = _2822;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2837;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2828 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _1641;
                        float _3034 = _2993.y - _1642;
                        float _3035 = _2993.z - _1643;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_491, _494, _497), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4424 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _1641;
                        float _3069 = (-0.0) - _1642;
                        float _3070 = (-0.0) - _1643;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3084 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3085 = 1.0 - _552;
                        float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                        float _3093 = _3092 * _3092;
                        float _3094 = _3093 * _3093;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3097 = _3077 + _3042;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3105 = dot(vec3(_491, _494, _497), vec3(_3075, _3076, _3077));
                        float _4440 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3109 = dot(vec3(_491, _494, _497), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                        float _4451 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                        float _3117 = _3053 * _3093;
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3043) + _3118;
                        float _4462 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3123 = 1.0 - _3093;
                        float _3133 = (0.5 / (((_3122 * ((_3108 * _3123) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3093) * _3108))) * _3122;
                        float _4473 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3144 = (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) / ((_3116 * _3116) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2897 = (_3064 * _3012.x) + _2970;
                        _2898 = (_3064 * _3012.y) + _2971;
                        _2899 = (_3064 * _3012.z) + _2972;
                        _2894 = (_3144 * _3029.x) + _2967;
                        _2895 = (_3144 * _3029.y) + _2968;
                        _2896 = (_3144 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_71_pred = _2899;
                    frontier_phi_71_pred_1 = _2898;
                    frontier_phi_71_pred_2 = _2897;
                    frontier_phi_71_pred_3 = _2896;
                    frontier_phi_71_pred_4 = _2895;
                    frontier_phi_71_pred_5 = _2894;
                }
                _2680 = frontier_phi_71_pred;
                _2678 = frontier_phi_71_pred_1;
                _2676 = frontier_phi_71_pred_2;
                _2674 = frontier_phi_71_pred_3;
                _2672 = frontier_phi_71_pred_4;
                _2670 = frontier_phi_71_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2670;
                    _2823 = _2672;
                    _2824 = _2674;
                    _2825 = _2676;
                    _2826 = _2678;
                    _2827 = _2680;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2686) & _2564) == 0u)
        {
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
            float _2816 = _2815 * _1641;
            float _2817 = _2815 * _1642;
            float _2818 = _2815 * _1643;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2950 = _2669;
                float _2951 = _2671;
                float _2952 = _2673;
                float _2953 = _2675;
                float _2954 = _2677;
                float _2955 = _2679;
                uint _2956 = _2686;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2966)
                    {
                        frontier_phi_82_pred = _2955;
                        frontier_phi_82_pred_1 = _2954;
                        frontier_phi_82_pred_2 = _2953;
                        frontier_phi_82_pred_3 = _2952;
                        frontier_phi_82_pred_4 = _2951;
                        frontier_phi_82_pred_5 = _2950;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        uint _3177 = _2965;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3188 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3233 = (_3188 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3188 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3188 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3188 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_1643, _3297.z, fma(_1642, _3297.y, _3297.x * _1641)) + _3297.w;
                            _3310 = !((fma(_1643, _3278.z, fma(_1642, _3278.y, _3278.x * _1641)) + _3278.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3203.x - _1641;
                                float _3338 = _3203.y - _1642;
                                float _3339 = _3203.z - _1643;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3204 * _3204));
                                float _4484 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3355 = sqrt(_3340) * _3219.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_491, _494, _497))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_1643, _3246.z, fma(_1642, _3246.y, _3246.x * _1641)) + _3246.w) / _3309;
                                float _3369 = (fma(_1643, _3262.z, fma(_1642, _3262.y, _3262.x * _1641)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4500 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _552;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2816;
                                float _3399 = _3345 - _2817;
                                float _3400 = _3346 - _2818;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_491, _494, _497), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4511 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3412 = dot(vec3(_491, _494, _497), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4522 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_491, _494, _497), vec3(_3344, _3345, _3346))) + _3421;
                                float _4533 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4544 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3375 * _3219.z;
                                frontier_phi_88_pred_1 = _3375 * _3219.y;
                                frontier_phi_88_pred_2 = _3375 * _3219.x;
                                frontier_phi_88_pred_3 = _3449 * _3231.z;
                                frontier_phi_88_pred_4 = _3449 * _3231.y;
                                frontier_phi_88_pred_5 = _3449 * _3231.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3458 = frontier_phi_88_pred;
                            _3457 = frontier_phi_88_pred_1;
                            _3456 = frontier_phi_88_pred_2;
                            _3455 = frontier_phi_88_pred_3;
                            _3454 = frontier_phi_88_pred_4;
                            _3453 = frontier_phi_88_pred_5;
                            _3161 = _3456 + _3174;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3158 = _3453 + _3171;
                            _3159 = _3454 + _3172;
                            _3160 = _3455 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3163;
                        frontier_phi_82_pred_1 = _3162;
                        frontier_phi_82_pred_2 = _3161;
                        frontier_phi_82_pred_3 = _3160;
                        frontier_phi_82_pred_4 = _3159;
                        frontier_phi_82_pred_5 = _3158;
                    }
                    _2801 = frontier_phi_82_pred;
                    _2799 = frontier_phi_82_pred_1;
                    _2797 = frontier_phi_82_pred_2;
                    _2795 = frontier_phi_82_pred_3;
                    _2793 = frontier_phi_82_pred_4;
                    _2791 = frontier_phi_82_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2791;
                        _2951 = _2793;
                        _2952 = _2795;
                        _2953 = _2797;
                        _2954 = _2799;
                        _2955 = _2801;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2797;
                frontier_phi_63_64_ladder_1 = _2801;
                frontier_phi_63_64_ladder_2 = _2799;
                frontier_phi_63_64_ladder_3 = _2795;
                frontier_phi_63_64_ladder_4 = _2793;
                frontier_phi_63_64_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_63_64_ladder = _2675;
                frontier_phi_63_64_ladder_1 = _2679;
                frontier_phi_63_64_ladder_2 = _2677;
                frontier_phi_63_64_ladder_3 = _2673;
                frontier_phi_63_64_ladder_4 = _2671;
                frontier_phi_63_64_ladder_5 = _2669;
            }
            _2790 = frontier_phi_63_64_ladder_5;
            _2792 = frontier_phi_63_64_ladder_4;
            _2794 = frontier_phi_63_64_ladder_3;
            _2796 = frontier_phi_63_64_ladder;
            _2798 = frontier_phi_63_64_ladder_2;
            _2800 = frontier_phi_63_64_ladder_1;
        }
        float _2805 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2577 = (_2805 * _2796) + _2108;
        _2579 = (_2805 * _2798) + _2110;
        _2581 = (_2805 * _2800) + _2112;
        _2583 = ((_2790 * 0.039999999105930328369140625) * _2805) + _2431;
        _2585 = ((_2792 * 0.039999999105930328369140625) * _2805) + _2433;
        _2587 = ((_2794 * 0.039999999105930328369140625) * _2805) + _2435;
    }
    else
    {
        _2577 = _2108;
        _2579 = _2110;
        _2581 = _2112;
        _2583 = _2431;
        _2585 = _2433;
        _2587 = _2435;
    }
    uint _2593 = _512 + uint(cbMatDynParam._m0[0u].w);
    float _4560 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4571 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4582 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2624 = (((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2577 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _536))) + ((_2583 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + (((_354 * cbMtdParam._m0[11u].x) * (_338.x + _323.x)) * cbInstanceData._m0[_2593].x);
    float _2626 = ((((_354 * cbMtdParam._m0[11u].y) * (_338.y + _323.y)) * cbInstanceData._m0[_2593].y) + ((_2585 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2579 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _536)));
    float _2628 = ((((_354 * cbMtdParam._m0[11u].z) * (_338.z + _323.z)) * cbInstanceData._m0[_2593].z) + ((_2587 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2581 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _536)));
    float _2629 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2630 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2631 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    uint _2632 = _510 + 6u;
    float _2640 = _470 / cbSceneParam._m0[86u].x;
    float _2641 = _471 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2695 = _2694 / _390;
        float _2706 = _2695 * _442;
        float _2707 = _443 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2710 = _2695 * _444;
        float _2712 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2713 = _2712 + cbSceneParam._m0[79u].w;
        float _2714 = cbSceneParam._m0[79u].w - _2707;
        float _2720 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2710 * _2710));
        float _2723 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2720;
        float _2728 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2730 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2708 - _2712) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2713 > 0.0) ? exp2(_2728 * _2713) : (2.0 - exp2(_2730 * _2713))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2723;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : max(_2713, _2714));
            float _2853 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : min(_2713, _2714));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2907 = ((abs(_2720 / _2708) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2728 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2728 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2730 * _2862) - exp2(_2730 * _2863)) * _2851))) + (_2723 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2660);
        _2732 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2734 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2736 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2738 = _2918 * _2660;
    }
    else
    {
        _2732 = _2657;
        _2734 = _2658;
        _2736 = _2659;
        _2738 = _2660;
    }
    bool _2945;
    vec4 _2748;
    vec4 _2770;
    float _2772;
    float _2776;
    float _2777;
    float _2778;
    float _2779;
    bool _2789;
    for (;;)
    {
        _2748 = cbMatDynParam._m0[0u];
        float _2750 = roundEven(_2748.y);
        bool _2751 = _2750 == 3.0;
        float _2752 = log2(_2738);
        float _2759 = exp2(_2752 * cbSceneParam._m0[78u].x) * _2629;
        float _2760 = exp2(_2752 * cbSceneParam._m0[78u].y) * _2630;
        float _2761 = exp2(_2752 * cbSceneParam._m0[78u].z) * _2631;
        float _2768 = _458 + (-0.5);
        _2770 = cbMtdParam._m0[1u];
        _2772 = _2770.y * _2768;
        float _2775 = (_2750 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2776 = _2775 * (_2751 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2732)));
        _2777 = _2775 * (_2751 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2734)));
        _2778 = _2775 * (_2751 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2736)));
        _2779 = _2768 * 0.999000012874603271484375;
        _2789 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2789)
        {
            if ((cbInstanceData._m0[_510 + 7u].x + _2779) < 0.5)
            {
                _2945 = true;
                break;
            }
        }
        uint _2886 = _512 + uint(_2748.w);
        if ((cbInstanceData._m0[_2886].w < 1.0) && ((cbInstanceData._m0[_2886].w + _2779) < 0.5))
        {
            _2945 = true;
            break;
        }
        if ((_2772 + 1.0) < _2770.x)
        {
            _2945 = true;
            break;
        }
        _2945 = false;
        break;
    }
    float _3149;
    if (_2945)
    {
        discard_state = true;
        _3149 = 0.0;
    }
    else
    {
        _3149 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2776;
    SV_Target.y = _2777;
    SV_Target.z = _2778;
    SV_Target.w = _3149;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


