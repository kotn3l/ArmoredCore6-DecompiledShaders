#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _888;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    vec4 _271 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3224 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))));
    vec4 _315 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _345 = (TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_257.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].x + 1.0);
    float _3235 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _349 = fma(_288, _200 * NORMAL.x, fma(_281, _207 * TANGENT.x, (_193 * _185) * _279));
    float _352 = fma(_288, _200 * NORMAL.y, fma(_281, _207 * TANGENT.y, (_193 * _186) * _279));
    float _355 = fma(_288, _200 * NORMAL.z, fma(_281, _207 * TANGENT.z, (_193 * _187) * _279));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    float _360 = _359 * _349;
    float _361 = _359 * _352;
    float _362 = _359 * _355;
    float _3246 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _363 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3268 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3279 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _382 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _434 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _424);
    float _435 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _424);
    float _436 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _424);
    float _440 = inversesqrt(dot(vec3(_434, _435, _436), vec3(_434, _435, _436)));
    float _441 = _434 * _440;
    float _442 = _435 * _440;
    float _443 = _436 * _440;
    float _449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _471 = fma(_362, cbSceneParam._m0[5u].z, fma(_361, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _360));
    float _474 = fma(_362, cbSceneParam._m0[6u].z, fma(_361, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _360));
    float _477 = fma(_362, cbSceneParam._m0[7u].z, fma(_361, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _360));
    uint _490 = uint(roundEven(NORMAL.w)) * 13u;
    uint _492 = _490 + 9u;
    uint _493 = _492 + uint(cbMatDynParam._m0[0u].w);
    float _499 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_493].x;
    float _500 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_493].y;
    float _501 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_493].z;
    float _3290 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    vec4 _513 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _449, cbSceneParam._m0[86u].y * _450));
    float _516 = _513.x * TEXCOORD_3.w;
    float _517 = dot(vec3(_360, _361, _362), vec3(_441, _442, _443));
    float _520 = _517 * 2.0;
    float _524 = (_520 * _360) - _441;
    float _525 = (_520 * _361) - _442;
    float _526 = (_520 * _362) - _443;
    float _530 = abs(dot(vec3(_441, _442, _443), vec3(_360, _361, _362)));
    float _3323 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _532 = sqrt(_363);
    float _545 = exp2((_532 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_532 * 3.0));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _887;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _612 = fma(_585, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577));
        float _616 = fma(_585, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577));
        float _620 = fma(_585, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577));
        float _645 = _577 + _360;
        float _646 = _581 + _361;
        float _647 = _585 + _362;
        float _657 = fma(_647, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645)) - _612;
        float _658 = fma(_647, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645)) - _616;
        float _659 = fma(_647, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645)) - _620;
        float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
        float _676 = ((_663 * _657) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_612 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_663 * _658) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_616 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_663 * _659) / cbModelParam._m0[34u].z) + ((((((_620 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        float _715 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_681.x + (-0.5));
        float _717 = _715 * (_681.y + (-0.5));
        float _718 = _715 * (_681.z + (-0.5));
        float _725 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_688.x + (-0.5));
        float _727 = _725 * (_688.y + (-0.5));
        float _728 = _725 * (_688.z + (-0.5));
        float _735 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_695.x + (-0.5));
        float _737 = _735 * (_695.y + (-0.5));
        float _738 = _735 * (_695.z + (-0.5));
        float _745 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_702.x + (-0.5));
        float _747 = _745 * (_702.y + (-0.5));
        float _748 = _745 * (_702.z + (-0.5));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = _716 * 0.5;
        float _753 = _726 * 0.5;
        float _754 = _736 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _769 = (dot(vec3(_360, _361, _362), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _779 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3371 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_781 + 1.0))) + _786) * _749;
        float _796 = _717 * 0.5;
        float _797 = _727 * 0.5;
        float _798 = _737 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_360, _361, _362), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3404 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_823 + 1.0))) + _828) * _750;
        float _838 = _718 * 0.5;
        float _839 = _728 * 0.5;
        float _840 = _738 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_360, _361, _362), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3437 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_865 + 1.0))) + _870) * _751;
        _887 = _718;
        _889 = _717;
        _890 = _716;
        _891 = _728;
        _892 = _727;
        _893 = _726;
        _894 = _738;
        _895 = _737;
        _896 = _736;
        _897 = _751;
        _898 = _750;
        _899 = _749;
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
    }
    else
    {
        _887 = _888;
        _889 = _888;
        _890 = _888;
        _891 = _888;
        _892 = _888;
        _893 = _888;
        _894 = _888;
        _895 = _888;
        _896 = _888;
        _897 = _888;
        _898 = _888;
        _899 = _888;
        _900 = 0.0;
        _901 = 0.0;
        _902 = 0.0;
    }
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _928 = fma(_585, cbModelParam._m0[30u].z, fma(_581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _577));
        float _932 = fma(_585, cbModelParam._m0[31u].z, fma(_581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _577));
        float _936 = fma(_585, cbModelParam._m0[32u].z, fma(_581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _577));
        float _959 = _577 + _360;
        float _960 = _581 + _361;
        float _961 = _585 + _362;
        float _971 = fma(_961, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959)) - _928;
        float _972 = fma(_961, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959)) - _932;
        float _973 = fma(_961, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959)) - _936;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_928 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_932 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[35u].z) + ((((((_936 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1027 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_994.x + (-0.5));
        float _1029 = _1027 * (_994.y + (-0.5));
        float _1030 = _1027 * (_994.z + (-0.5));
        float _1037 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1001.x + (-0.5));
        float _1039 = _1037 * (_1001.y + (-0.5));
        float _1040 = _1037 * (_1001.z + (-0.5));
        float _1047 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1008.x + (-0.5));
        float _1049 = _1047 * (_1008.y + (-0.5));
        float _1050 = _1047 * (_1008.z + (-0.5));
        float _1057 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1015.x + (-0.5));
        float _1059 = _1057 * (_1015.y + (-0.5));
        float _1060 = _1057 * (_1015.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_360, _361, _362), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3500 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1091 + 1.0))) + _1096) * _1061;
        float _1106 = _1029 * 0.5;
        float _1107 = _1039 * 0.5;
        float _1108 = _1049 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_360, _361, _362), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3533 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1133 + 1.0))) + _1138) * _1062;
        float _1148 = _1030 * 0.5;
        float _1149 = _1040 * 0.5;
        float _1150 = _1050 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_360, _361, _362), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3566 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1175 + 1.0))) + _1180) * _1063;
        _1197 = _1030;
        _1198 = _1029;
        _1199 = _1028;
        _1200 = _1040;
        _1201 = _1039;
        _1202 = _1038;
        _1203 = _1050;
        _1204 = _1049;
        _1205 = _1048;
        _1206 = _1063;
        _1207 = _1062;
        _1208 = _1061;
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _888;
        _1198 = _888;
        _1199 = _888;
        _1200 = _888;
        _1201 = _888;
        _1202 = _888;
        _1203 = _888;
        _1204 = _888;
        _1205 = _888;
        _1206 = _888;
        _1207 = _888;
        _1208 = _888;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1244 = fma(_1223, cbSceneParam._m0[89u].z, fma(_1222, cbSceneParam._m0[89u].y, _1221 * cbSceneParam._m0[89u].x));
    float _1247 = fma(_1223, cbSceneParam._m0[90u].z, fma(_1222, cbSceneParam._m0[90u].y, _1221 * cbSceneParam._m0[90u].x));
    float _1250 = fma(_1223, cbSceneParam._m0[91u].z, fma(_1222, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1221));
    float _1265 = _524 * 0.5;
    float _1266 = _525 * 0.5;
    float _1267 = _526 * 0.5;
    float _1268 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1271 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1274 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1308;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1281 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_887, _891, _894, _897));
        float _1285 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_889, _892, _895, _898));
        float _1289 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_890, _893, _896, _899));
        float _1296 = dot(vec4(cbModelParam._m0[39u]), vec4(_1265, _1266, _1267, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1319;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1310 = dot(vec4(cbModelParam._m0[40u]), vec4(_1265, _1266, _1267, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1323 = (_1319 * cbModelParam._m0[1u].x) + (_1308 * (1.0 - cbModelParam._m0[1u].x));
    float _1333 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _363);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1333 : min(cbModelParam._m0[25u].z, _1333));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1381 = fma(_585, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577)) + cbModelParam._m0[13u].w;
        float _1385 = fma(_585, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577)) + cbModelParam._m0[14u].w;
        float _1389 = fma(_585, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577)) + cbModelParam._m0[15u].w;
        float _1392 = fma(_526, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524));
        float _1395 = fma(_526, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524));
        float _1398 = fma(_526, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524));
        float _1426;
        if (_1392 > 0.0)
        {
            _1426 = abs((1.0 - _1381) / _1392);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1381 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1426 = frontier_phi_14_12_ladder;
        }
        float _1630;
        if (_1395 > 0.0)
        {
            _1630 = abs((1.0 - _1385) / _1395);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1385 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1630 = frontier_phi_23_19_ladder;
        }
        float _1873;
        if (_1398 > 0.0)
        {
            _1873 = abs((1.0 - _1389) / _1398);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1389 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1873 = frontier_phi_35_30_ladder;
        }
        float _1875 = isnan(_1630) ? _1426 : (isnan(_1426) ? _1630 : min(_1426, _1630));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1392) + _1381;
        float _1881 = (_1876 * _1395) + _1385;
        float _1882 = (_1876 * _1398) + _1389;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1334);
            frontier_phi_13_35_ladder = _2006.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2006.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2006.x * cbModelParam._m0[1u].y;
        }
        _1414 = frontier_phi_13_35_ladder_2;
        _1416 = frontier_phi_13_35_ladder_1;
        _1418 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_524, _525, _526), _1334);
        _1414 = _1402.x * cbModelParam._m0[1u].y;
        _1416 = _1402.y * cbModelParam._m0[1u].y;
        _1418 = _1402.z * cbModelParam._m0[1u].y;
    }
    float _1422 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _363);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1422 : min(cbModelParam._m0[25u].w, _1422));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_585, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_585, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_585, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_526, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524));
        float _1492 = fma(_526, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524));
        float _1495 = fma(_526, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524));
        float _1635;
        if (_1489 > 0.0)
        {
            _1635 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1900;
        if (_1492 > 0.0)
        {
            _1900 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1900 = frontier_phi_37_32_ladder;
        }
        float _2105;
        if (_1495 > 0.0)
        {
            _2105 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2105 = frontier_phi_46_43_ladder;
        }
        float _2107 = isnan(_1900) ? _1635 : (isnan(_1635) ? _1900 : min(_1635, _1900));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1489) + _1478;
        float _2113 = (_2108 * _1492) + _1482;
        float _2114 = (_2108 * _1495) + _1486;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2115;
        float _2118 = _2115 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2114 > _2118) || ((_2114 < _2116) || ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 < _2116) || (_2112 > _2118))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2114, cbModelParam._m0[17u].z, fma(_2113, cbModelParam._m0[17u].y, _2112 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2114, cbModelParam._m0[18u].z, fma(_2113, cbModelParam._m0[18u].y, _2112 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2114, cbModelParam._m0[19u].z, fma(_2113, cbModelParam._m0[19u].y, _2112 * cbModelParam._m0[19u].x))), _1423);
            frontier_phi_22_46_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_22_46_ladder_2;
        _1516 = frontier_phi_22_46_ladder_1;
        _1518 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_524, _525, _526), _1423);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1530 = ((((1.0 - _545) * ((_532 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_545 * _532)) * _516;
    float _1531 = _1530 * ((cbModelParam._m0[1u].w * (_1514 - _1414)) + _1414);
    float _1532 = _1530 * ((cbModelParam._m0[1u].w * (_1516 - _1416)) + _1416);
    float _1533 = _1530 * ((cbModelParam._m0[1u].w * (_1518 - _1418)) + _1418);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    uvec4 _1552 = floatBitsToUint(cbInstanceData._m0[_490 + 5u]);
    uint _1554 = _1552.x * 14u;
    uint _1555 = _1554 + 13u;
    float _1562 = _516 + (-1.0);
    float _1567 = (cbLight._m0[_1555].x * _1562) + 1.0;
    float _1568 = (cbLight._m0[_1555].y * _1562) + 1.0;
    float _1569 = (cbLight._m0[_1555].z * _1562) + 1.0;
    float _1570 = (cbLight._m0[_1555].w * _1562) + 1.0;
    uint _1571 = _1554 + 5u;
    float _1577 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
    uint _1581 = _1554 + 4u;
    float _1588 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1592 = _1554 | 1u;
    float _1603 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_360, _361, _362));
    float _1606 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_360, _361, _362));
    float _3702 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _3713 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1611 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1613 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1620 = ((cbLight._m0[_1571].x * _1577) * _1613) + ((cbLight._m0[_1581].x * _1588) * _1611);
    float _1621 = ((_1577 * cbLight._m0[_1571].y) * _1613) + ((_1588 * cbLight._m0[_1581].y) * _1611);
    float _1622 = ((_1577 * cbLight._m0[_1571].z) * _1613) + ((_1588 * cbLight._m0[_1581].z) * _1611);
    uvec4 _1627 = floatBitsToUint(cbLight._m0[_1554 + 12u]);
    bool _1629 = _1627.x == 0u;
    float _1640;
    float _1642;
    float _1644;
    if (_1629)
    {
        _1640 = _1620;
        _1642 = _1621;
        _1644 = _1622;
    }
    else
    {
        uint _1648 = _1554 + 6u;
        float _1664 = (dot(vec3(cbLight._m0[_1554 + 2u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _1665 = _1664 * _1664;
        float _3724 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1667 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1640 = (((cbLight._m0[_1648].x * 0.3183098733425140380859375) * _1666) * _1667) + _1620;
        _1642 = (((cbLight._m0[_1648].y * 0.3183098733425140380859375) * _1666) * _1667) + _1621;
        _1644 = (((cbLight._m0[_1648].z * 0.3183098733425140380859375) * _1666) * _1667) + _1622;
    }
    bool _1647 = _1627.y == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1647)
    {
        _1685 = _1640;
        _1687 = _1642;
        _1689 = _1644;
    }
    else
    {
        uint _1844 = _1554 + 7u;
        float _1860 = (dot(vec3(cbLight._m0[_1554 + 3u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3740 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1863 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _1685 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1640;
        _1687 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1642;
        _1689 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1644;
    }
    uint _1692 = _1554 + 8u;
    float _1705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _363) * 0.949999988079071044921875);
    float _1706 = _1705 * _1705;
    float _1707 = cbLight._m0[_1554].x + _441;
    float _1708 = cbLight._m0[_1554].y + _442;
    float _1709 = cbLight._m0[_1554].z + _443;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1714 = _1713 * _1707;
    float _1715 = _1713 * _1708;
    float _1716 = _1713 * _1709;
    float _1717 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1554].xyz));
    float _3756 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _1721 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1722 = dot(vec3(_360, _361, _362), vec3(_1714, _1715, _1716));
    float _3778 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1714, _1715, _1716));
    float _3789 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1730 = _1706 * _1706;
    float _1734 = ((_1725 * _1725) * (_1730 + (-1.0))) + 1.0;
    float _1745 = (exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1746 = 1.0 - _1706;
    float _1757 = (0.5 / (((_1721 * ((_1720 * _1746) + _1706)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1746) + _1706) * _1720))) * _1720;
    float _3800 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1759 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1730 / ((_1734 * _1734) * 3.141590118408203125));
    uint _1770 = _1554 + 9u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _363) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1592].x + _441;
    float _1784 = cbLight._m0[_1592].y + _442;
    float _1785 = cbLight._m0[_1592].z + _443;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1592].xyz));
    float _3811 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1797 = dot(vec3(_360, _361, _362), vec3(_1790, _1791, _1792));
    float _3822 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1790, _1791, _1792));
    float _3833 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1782 * _1782;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1818 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1819 = 1.0 - _1782;
    float _1829 = (0.5 / (((_1721 * ((_1796 * _1819) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1819) + _1782) * _1796))) * _1796;
    float _3844 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    float _1841 = (((_1818 * cbLight._m0[_1770].x) * _1831) * _1577) + (((_1745 * cbLight._m0[_1692].x) * _1759) * _1588);
    float _1842 = (((_1818 * cbLight._m0[_1770].y) * _1831) * _1577) + (((_1745 * cbLight._m0[_1692].y) * _1759) * _1588);
    float _1843 = (((_1818 * cbLight._m0[_1770].z) * _1831) * _1577) + (((_1745 * cbLight._m0[_1692].z) * _1759) * _1588);
    float _1905;
    float _1907;
    float _1909;
    if (_1629)
    {
        _1905 = _1841;
        _1907 = _1842;
        _1909 = _1843;
    }
    else
    {
        uint _1911 = _1554 + 2u;
        uint _1915 = _1554 + 10u;
        float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _363) * 0.949999988079071044921875);
        float _1930 = _1929 * _1929;
        float _1931 = cbLight._m0[_1911].x + _441;
        float _1932 = cbLight._m0[_1911].y + _442;
        float _1933 = cbLight._m0[_1911].z + _443;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1938 = _1937 * _1931;
        float _1939 = _1937 * _1932;
        float _1940 = _1937 * _1933;
        float _1941 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1911].xyz));
        float _3855 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1945 = dot(vec3(_360, _361, _362), vec3(_1938, _1939, _1940));
        float _3866 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1938, _1939, _1940));
        float _3877 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1953 = _1930 * _1930;
        float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
        float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1967 = 1.0 - _1930;
        float _1977 = (0.5 / (((_1721 * ((_1944 * _1967) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1967) + _1930) * _1944))) * _1944;
        float _3888 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1979 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
        float _1980 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1905 = (((_1966 * cbLight._m0[_1915].x) * _1979) * _1980) + _1841;
        _1907 = (((_1966 * cbLight._m0[_1915].y) * _1979) * _1980) + _1842;
        _1909 = (((_1966 * cbLight._m0[_1915].z) * _1979) * _1980) + _1843;
    }
    float _2015;
    float _2017;
    float _2019;
    if (_1647)
    {
        _2015 = _1905;
        _2017 = _1907;
        _2019 = _1909;
    }
    else
    {
        uint _2026 = _1554 + 3u;
        uint _2030 = _1554 + 11u;
        float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _363) * 0.949999988079071044921875);
        float _2045 = _2044 * _2044;
        float _2046 = cbLight._m0[_2026].x + _441;
        float _2047 = cbLight._m0[_2026].y + _442;
        float _2048 = cbLight._m0[_2026].z + _443;
        float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
        float _2053 = _2052 * _2046;
        float _2054 = _2052 * _2047;
        float _2055 = _2052 * _2048;
        float _2056 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2026].xyz));
        float _3904 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _2060 = dot(vec3(_360, _361, _362), vec3(_2053, _2054, _2055));
        float _3915 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2064 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2053, _2054, _2055));
        float _3926 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2068 = _2045 * _2045;
        float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
        float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2082 = 1.0 - _2045;
        float _2092 = (0.5 / (((_1721 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _2082) + _2045) * _2059))) * _2059;
        float _3937 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2094 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
        float _2095 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _2015 = (((_2081 * cbLight._m0[_2030].x) * _2094) * _2095) + _1905;
        _2017 = (((_2081 * cbLight._m0[_2030].y) * _2094) * _2095) + _1907;
        _2019 = (((_2081 * cbLight._m0[_2030].z) * _2094) * _2095) + _1909;
    }
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    if (_1552.y == 0u)
    {
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2170;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2170;
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2170;
        uvec4 _2185 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2186 = _2185.x;
        uint _2197 = uint((float(_2185.y) * floor(float(uint(cbSceneParam._m0[85u].y * _450) / _2186))) + floor(float(uint(cbSceneParam._m0[85u].x * _449) / _2186)));
        float _2207 = (log2(_2173 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2208 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        uint _2211 = uint(isnan(14.0) ? _2208 : (isnan(_2208) ? 14.0 : min(_2208, 14.0)));
        uvec4 _2216 = texelFetch(g_lightClusterGridBuffer, int(((_2211 << 2u) + (_2197 << 6u)) >> 2u));
        uint _2217 = _2216.x;
        uint _2218 = _2185.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2218 >> 4u) & 15u)) + 4294967295u) & _2217) == 0u) || ((_2218 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2211 << 5u) + (_2197 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2504)
                {
                    frontier_phi_61_pred = _2488;
                    frontier_phi_61_pred_1 = _2493;
                    frontier_phi_61_pred_2 = _2492;
                    frontier_phi_61_pred_3 = _2491;
                    frontier_phi_61_pred_4 = _2490;
                    frontier_phi_61_pred_5 = _2489;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2503;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2494 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2171;
                        float _2679 = _2638.y - _2172;
                        float _2680 = _2638.z - _2173;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_471, _474, _477), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _3963 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2171;
                        float _2714 = (-0.0) - _2172;
                        float _2715 = (-0.0) - _2173;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _532;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_471, _474, _477), vec3(_2720, _2721, _2722));
                        float _3979 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2755 = dot(vec3(_471, _474, _477), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _3990 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _4001 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _4012 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2547 = (_2709 * _2657.x) + _2615;
                        _2548 = (_2709 * _2657.y) + _2616;
                        _2549 = (_2709 * _2657.z) + _2617;
                        _2544 = (_2790 * _2674.x) + _2612;
                        _2545 = (_2790 * _2674.y) + _2613;
                        _2546 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                _2344 = frontier_phi_61_pred;
                _2354 = frontier_phi_61_pred_1;
                _2352 = frontier_phi_61_pred_2;
                _2350 = frontier_phi_61_pred_3;
                _2348 = frontier_phi_61_pred_4;
                _2346 = frontier_phi_61_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2344;
                    _2489 = _2346;
                    _2490 = _2348;
                    _2491 = _2350;
                    _2492 = _2352;
                    _2493 = _2354;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((4294967295u << _2360) & _2217) == 0u)
        {
            _2456 = _2343;
            _2458 = _2345;
            _2460 = _2347;
            _2462 = _2349;
            _2464 = _2351;
            _2466 = _2353;
        }
        else
        {
            float _2481 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
            float _2482 = _2481 * _2171;
            float _2483 = _2481 * _2172;
            float _2484 = _2481 * _2173;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2595 = _2343;
                float _2596 = _2345;
                float _2597 = _2347;
                float _2598 = _2349;
                float _2599 = _2351;
                float _2600 = _2353;
                uint _2601 = _2360;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2211 << 5u) + (_2197 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2611)
                    {
                        frontier_phi_67_pred = _2598;
                        frontier_phi_67_pred_1 = _2599;
                        frontier_phi_67_pred_2 = _2600;
                        frontier_phi_67_pred_3 = _2597;
                        frontier_phi_67_pred_4 = _2596;
                        frontier_phi_67_pred_5 = _2595;
                    }
                    else
                    {
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        uint _2814 = _2610;
                        uint _2815;
                        vec4 _2840;
                        float _2841;
                        vec4 _2856;
                        vec3 _2868;
                        vec4 _2883;
                        vec4 _2899;
                        float _2946;
                        bool _2947;
                        for (;;)
                        {
                            uint _2825 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2814));
                            _2815 = (_2814 + 4294967295u) & _2814;
                            uint _2827 = _2825 * 40u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2841 = _2840.w;
                            uint _2843 = (_2825 * 40u) + 4u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2825 * 40u) + 8u;
                            _2868 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x));
                            uint _2870 = (_2825 * 40u) + 16u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2886 = (_2825 * 40u) + 20u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2825 * 40u) + 24u;
                            vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2921 = (_2825 * 40u) + 28u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2946 = fma(_2173, _2934.z, fma(_2172, _2934.y, _2934.x * _2171)) + _2934.w;
                            _2947 = !((fma(_2173, _2915.z, fma(_2172, _2915.y, _2915.x * _2171)) + _2915.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2947)
                            {
                                float _2974 = _2840.x - _2171;
                                float _2975 = _2840.y - _2172;
                                float _2976 = _2840.z - _2173;
                                float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                                float _2980 = inversesqrt(_2977);
                                float _2981 = _2980 * _2974;
                                float _2982 = _2980 * _2975;
                                float _2983 = _2980 * _2976;
                                float _2987 = 1.0 - (_2977 / (_2841 * _2841));
                                float _4023 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _2992 = sqrt(_2977) * _2856.w;
                                float _2994 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                                float _2995 = _2994 * _2994;
                                float _2998 = ((1.0 - _2995) * dot(vec3(_2981, _2982, _2983), vec3(_471, _474, _477))) + _2995;
                                float _3001 = _2992 * _2992;
                                float _3005 = (fma(_2173, _2883.z, fma(_2172, _2883.y, _2883.x * _2171)) + _2883.w) / _2946;
                                float _3006 = (fma(_2173, _2899.z, fma(_2172, _2899.y, _2899.x * _2171)) + _2899.w) / _2946;
                                float _3010 = 1.0 - dot(vec2(_3005, _3006), vec2(_3005, _3006));
                                float _4039 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3012 = _3011 * (((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2988) / ((_3001 * 0.699999988079071044921875) + 1.0));
                                float _3024 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                                float _3025 = 1.0 - _532;
                                float _3032 = sqrt(1.0 - ((1.0 - (_3025 * _3025)) * (1.0 - (_3024 * _3024))));
                                float _3033 = _3032 * _3032;
                                float _3034 = _3033 * _3033;
                                float _3035 = _2981 - _2482;
                                float _3036 = _2982 - _2483;
                                float _3037 = _2983 - _2484;
                                float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                                float _3045 = dot(vec3(_471, _474, _477), vec3((-0.0) - _2482, (-0.0) - _2483, (-0.0) - _2484));
                                float _4050 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3049 = dot(vec3(_471, _474, _477), vec3(_3041 * _3035, _3041 * _3036, _3041 * _3037));
                                float _4061 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3052 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3056 = ((_3052 * _3052) * (_3034 + (-1.0))) + 1.0;
                                float _3057 = _2994 * _3033;
                                float _3058 = _3057 * _3057;
                                float _3064 = ((1.0 - _3058) * dot(vec3(_471, _474, _477), vec3(_2981, _2982, _2983))) + _3058;
                                float _4072 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3066 = 1.0 - _3033;
                                float _3076 = (0.5 / (((_3065 * ((_3048 * _3066) + _3033)) + 9.9999999392252902907785028219223e-09) + (((_3065 * _3066) + _3033) * _3048))) * _3065;
                                float _4083 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3086 = (_3011 * _2988) * (((_3034 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_3056 * _3056) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3086 * _2868.x;
                                frontier_phi_73_pred_1 = _3086 * _2868.y;
                                frontier_phi_73_pred_2 = _3012 * _2856.z;
                                frontier_phi_73_pred_3 = _3012 * _2856.y;
                                frontier_phi_73_pred_4 = _3012 * _2856.x;
                                frontier_phi_73_pred_5 = _3086 * _2868.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_73_pred;
                            _3091 = frontier_phi_73_pred_1;
                            _3095 = frontier_phi_73_pred_2;
                            _3094 = frontier_phi_73_pred_3;
                            _3093 = frontier_phi_73_pred_4;
                            _3092 = frontier_phi_73_pred_5;
                            _2798 = _3093 + _2811;
                            _2799 = _3094 + _2812;
                            _2800 = _3095 + _2813;
                            _2795 = _3090 + _2808;
                            _2796 = _3091 + _2809;
                            _2797 = _3092 + _2810;
                            if (_2815 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2815;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2798;
                        frontier_phi_67_pred_1 = _2799;
                        frontier_phi_67_pred_2 = _2800;
                        frontier_phi_67_pred_3 = _2797;
                        frontier_phi_67_pred_4 = _2796;
                        frontier_phi_67_pred_5 = _2795;
                    }
                    _2463 = frontier_phi_67_pred;
                    _2465 = frontier_phi_67_pred_1;
                    _2467 = frontier_phi_67_pred_2;
                    _2461 = frontier_phi_67_pred_3;
                    _2459 = frontier_phi_67_pred_4;
                    _2457 = frontier_phi_67_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2457;
                        _2596 = _2459;
                        _2597 = _2461;
                        _2598 = _2463;
                        _2599 = _2465;
                        _2600 = _2467;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2465;
                frontier_phi_55_56_ladder_1 = _2467;
                frontier_phi_55_56_ladder_2 = _2463;
                frontier_phi_55_56_ladder_3 = _2461;
                frontier_phi_55_56_ladder_4 = _2459;
                frontier_phi_55_56_ladder_5 = _2457;
            }
            else
            {
                frontier_phi_55_56_ladder = _2351;
                frontier_phi_55_56_ladder_1 = _2353;
                frontier_phi_55_56_ladder_2 = _2349;
                frontier_phi_55_56_ladder_3 = _2347;
                frontier_phi_55_56_ladder_4 = _2345;
                frontier_phi_55_56_ladder_5 = _2343;
            }
            _2456 = frontier_phi_55_56_ladder_5;
            _2458 = frontier_phi_55_56_ladder_4;
            _2460 = frontier_phi_55_56_ladder_3;
            _2462 = frontier_phi_55_56_ladder_2;
            _2464 = frontier_phi_55_56_ladder;
            _2466 = frontier_phi_55_56_ladder_1;
        }
        float _2471 = isnan(1.0) ? _516 : (isnan(_516) ? 1.0 : min(_516, 1.0));
        _2230 = (_2471 * _2462) + _1685;
        _2232 = (_2471 * _2464) + _1687;
        _2234 = (_2471 * _2466) + _1689;
        _2236 = ((_2456 * 0.039999999105930328369140625) * _2471) + _2015;
        _2238 = ((_2458 * 0.039999999105930328369140625) * _2471) + _2017;
        _2240 = ((_2460 * 0.039999999105930328369140625) * _2471) + _2019;
    }
    else
    {
        _2230 = _1685;
        _2232 = _1687;
        _2234 = _1689;
        _2236 = _2015;
        _2238 = _2017;
        _2240 = _2019;
    }
    uint _2246 = _492 + uint(cbMatDynParam._m0[0u].w);
    float _4099 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4110 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4121 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _2277 = (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2230 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _516))) + ((_2236 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1323)) * cbPerFrame._m0[3u].x)) + (((_346 * cbMtdParam._m0[11u].x) * (_330.x + _315.x)) * cbInstanceData._m0[_2246].x);
    float _2279 = ((((_346 * cbMtdParam._m0[11u].y) * (_330.y + _315.y)) * cbInstanceData._m0[_2246].y) + ((_2238 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1323)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2232 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _516)));
    float _2281 = ((((_346 * cbMtdParam._m0[11u].z) * (_330.z + _315.z)) * cbInstanceData._m0[_2246].z) + ((_2240 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1323)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2234 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _516)));
    uint _2285 = _490 + 6u;
    float _2293 = _449 / cbSceneParam._m0[86u].x;
    float _2294 = _450 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _382 : (isnan(_382) ? cbSceneParam._m0[77u].w : min(_382, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_382 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_382) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _382 : min(cbSceneParam._m0[80u].w, _382));
        float _2369 = _2368 / _382;
        float _2380 = _2369 * _434;
        float _2381 = _435 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2384 = _2369 * _436;
        float _2386 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2387 = _2386 + cbSceneParam._m0[79u].w;
        float _2388 = cbSceneParam._m0[79u].w - _2381;
        float _2394 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2384 * _2384));
        float _2397 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2394;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2382 - _2386) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2387 > 0.0) ? exp2(_2402 * _2387) : (2.0 - exp2(_2404 * _2387))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2397;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : max(_2387, _2388));
            float _2519 = isnan(_2388) ? _2387 : (isnan(_2387) ? _2388 : min(_2387, _2388));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2557 = ((abs(_2394 / _2382) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2404 * _2528) - exp2(_2404 * _2529)) * _2517))) + (_2397 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2313);
        _2406 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2408 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2410 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2412 = _2568 * _2313;
    }
    else
    {
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
        _2412 = _2313;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2433 = exp2(_2426 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)));
    float _2434 = exp2(_2426 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0)));
    float _2435 = exp2(_2426 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2285].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2285].w;
}


