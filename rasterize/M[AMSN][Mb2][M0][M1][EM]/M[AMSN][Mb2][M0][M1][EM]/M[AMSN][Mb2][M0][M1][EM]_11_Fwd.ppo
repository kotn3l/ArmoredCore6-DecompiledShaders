#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_3;
layout(location = 5) in vec4 TEXCOORD_6;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[5u].w));
    float _309 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3483 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _317 = (((_293.x * cbMtdParam._m0[10u].x) - _253) * _310) + _253;
    float _318 = (((_293.y * cbMtdParam._m0[10u].y) - _254) * _310) + _254;
    float _319 = (((_293.z * cbMtdParam._m0[10u].z) - _255) * _310) + _255;
    vec4 _339 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[2u].w));
    float _358 = TEXCOORD_9.x - ((cbMtdParam._m0[14u].w * (1.0 - TEXCOORD_9.x)) * (_339.x + 0.00999999977648258209228515625));
    float _360 = _358 * (cbMtdParam._m0[15u].x + 1.0);
    float _3494 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _369 = ((((cbMtdParam._m0[12u].x - _317) * TEXCOORD_9.x) * cbMtdParam._m0[14u].z) * _361) + _317;
    float _370 = ((((cbMtdParam._m0[12u].y - _318) * TEXCOORD_9.y) * cbMtdParam._m0[14u].z) * _361) + _318;
    float _371 = (((cbMtdParam._m0[14u].z * TEXCOORD_9.z) * (cbMtdParam._m0[12u].z - _319)) * _361) + _319;
    vec4 _384 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[6u].w));
    float _386 = _384.x;
    float _404 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[7u].w)).x - _386) * _310) + _386;
    vec4 _417 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = (_417.x * 2.0) + (-1.0);
    float _427 = (_417.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3505 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_6.w) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_9.w) + cbTextureTilingScale._m0[3u].w));
    float _449 = _445.z;
    float _452 = (_445.x * 2.0) + (-1.0);
    float _453 = (_445.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3516 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))));
    float _462 = (_310 * (_417.z - _449)) + _449;
    float _465 = _358 * (cbMtdParam._m0[14u].w + 1.0);
    float _3527 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _469 = ((cbMtdParam._m0[14u].y - _462) * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) + _462;
    vec4 _496 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _511 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_8, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _525 = (_310 * (_425 - _452)) + _452;
    float _526 = (_310 * (_427 - _453)) + _453;
    float _527 = (_310 * (sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) - _459)) + _459;
    vec4 _546 = texture(sampler2D(M_AMSN_Mb2_M0_M1_EM_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_6.w) * cbTextureTilingScale._m0[10u].x) + cbTextureTilingScale._m0[10u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_9.w) * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _552 = (_546.x * 2.0) + (-1.0);
    float _553 = (_546.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3538 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _570 = (_361 * (((_525 * cbMtdParam._m0[13u].z) - _525) + _552)) + _525;
    float _571 = (_361 * (((_526 * cbMtdParam._m0[13u].z) - _526) + _553)) + _526;
    float _572 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) - _527)) + _527;
    float _575 = fma(_572, _218 * NORMAL.x, fma(_571, _225 * TANGENT.x, (_211 * _203) * _570));
    float _578 = fma(_572, _218 * NORMAL.y, fma(_571, _225 * TANGENT.y, (_211 * _204) * _570));
    float _581 = fma(_572, _218 * NORMAL.z, fma(_571, _225 * TANGENT.z, (_211 * _205) * _570));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3549 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _589 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3571 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3582 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3593 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _593 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _697 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _700 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _714 = _713 + 9u;
    uint _715 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3604 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _727 = 1.0 - _593;
    float _728 = _724 * _727;
    float _729 = _725 * _727;
    float _730 = _726 * _727;
    float _735 = (_724 + (-0.039999999105930328369140625)) * _593;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _593;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _593;
    float _738 = _735 + 0.039999999105930328369140625;
    float _740 = _736 + 0.039999999105930328369140625;
    float _741 = _737 + 0.039999999105930328369140625;
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _753 = _750.x * TEXCOORD_3.w;
    float _754 = dot(vec3(_586, _587, _588), vec3(_667, _668, _669));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _586) - _667;
    float _762 = (_757 * _587) - _668;
    float _763 = (_757 * _588) - _669;
    float _767 = abs(dot(vec3(_667, _668, _669), vec3(_586, _587, _588)));
    float _3637 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_589);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _788 = (1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _789 = _782 * _769;
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _856 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _860 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _885 = _817 + _586;
        float _886 = _821 + _587;
        float _887 = _825 + _588;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _852;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _856;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _860;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_586, _587, _588), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3685 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_586, _587, _588), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3718 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_586, _587, _588), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3751 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1172 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1176 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1199 = _817 + _586;
        float _1200 = _821 + _587;
        float _1201 = _825 + _588;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_586, _587, _588), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3814 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_586, _587, _588), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3847 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_586, _587, _588), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3880 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _761 * 0.5;
    float _1506 = _762 * 0.5;
    float _1507 = _763 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1635 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1638 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1666 = frontier_phi_14_12_ladder;
        }
        float _1870;
        if (_1635 > 0.0)
        {
            _1870 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1870 = frontier_phi_23_19_ladder;
        }
        float _2124;
        if (_1638 > 0.0)
        {
            _2124 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2124 = frontier_phi_35_30_ladder;
        }
        float _2126 = isnan(_1870) ? _1666 : (isnan(_1666) ? _1870 : min(_1666, _1870));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1632) + _1621;
        float _2132 = (_2127 * _1635) + _1625;
        float _2133 = (_2127 * _1638) + _1629;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_13_35_ladder = _2261.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2261.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2261.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_13_35_ladder_2;
        _1656 = frontier_phi_13_35_ladder_1;
        _1658 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1574);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1732 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1735 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1875;
        if (_1729 > 0.0)
        {
            _1875 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1875 = frontier_phi_25_21_ladder;
        }
        float _2151;
        if (_1732 > 0.0)
        {
            _2151 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2151 = frontier_phi_37_32_ladder;
        }
        float _2364;
        if (_1735 > 0.0)
        {
            _2364 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2364 = frontier_phi_46_43_ladder;
        }
        float _2366 = isnan(_2151) ? _1875 : (isnan(_1875) ? _2151 : min(_1875, _2151));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1729) + _1718;
        float _2372 = (_2367 * _1732) + _1722;
        float _2373 = (_2367 * _1735) + _1726;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_22_46_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_22_46_ladder_2;
        _1756 = frontier_phi_22_46_ladder_1;
        _1758 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1663);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1771 = (((_788 * _738) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1754 - _1654)) + _1654);
    float _1773 = (((_788 * _740) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1756 - _1656)) + _1656);
    float _1775 = (((_788 * _741) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _753 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1829 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1833 = _1796 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_586, _587, _588));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_586, _587, _588));
    float _4016 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4027 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1813].x * _1819) * _1854) + ((cbLight._m0[_1823].x * _1829) * _1852);
    float _1862 = ((_1819 * cbLight._m0[_1813].y) * _1854) + ((_1829 * cbLight._m0[_1823].y) * _1852);
    float _1863 = ((_1819 * cbLight._m0[_1813].z) * _1854) + ((_1829 * cbLight._m0[_1823].z) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1869)
    {
        _1880 = _1861;
        _1882 = _1862;
        _1884 = _1863;
    }
    else
    {
        uint _1888 = _1796 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _4038 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1907 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1861;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1862;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1863;
    }
    bool _1887 = _1867.y == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1887)
    {
        _1925 = _1880;
        _1927 = _1882;
        _1929 = _1884;
    }
    else
    {
        uint _2095 = _1796 + 7u;
        float _2111 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4054 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2114 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1925 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1880;
        _1927 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1882;
        _1929 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1884;
    }
    uint _1932 = _1796 + 8u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _589) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1796].x + _667;
    float _1948 = cbLight._m0[_1796].y + _668;
    float _1949 = cbLight._m0[_1796].z + _669;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1796].xyz));
    float _4070 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1961 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1962 = dot(vec3(_586, _587, _588), vec3(_1954, _1955, _1956));
    float _4092 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1954, _1955, _1956));
    float _4103 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1946 * _1946;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
    float _1983 = 0.959999978542327880859375 - _735;
    float _1985 = 0.959999978542327880859375 - _736;
    float _1986 = 0.959999978542327880859375 - _737;
    float _1993 = 1.0 - _1946;
    float _2004 = (0.5 / (((_1961 * ((_1960 * _1993) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _1993) + _1946) * _1960))) * _1960;
    float _4114 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    uint _2017 = _1796 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _589) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1833].x + _667;
    float _2031 = cbLight._m0[_1833].y + _668;
    float _2032 = cbLight._m0[_1833].z + _669;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1833].xyz));
    float _4125 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2044 = dot(vec3(_586, _587, _588), vec3(_2037, _2038, _2039));
    float _4136 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2037, _2038, _2039));
    float _4147 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2070 = 1.0 - _2029;
    float _2080 = (0.5 / (((_1961 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2070) + _2029) * _2043))) * _2043;
    float _4158 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2092 = (((((_2063 * _1983) + _738) * cbLight._m0[_2017].x) * _2082) * _1819) + (((((_1982 * _1983) + _738) * cbLight._m0[_1932].x) * _2006) * _1829);
    float _2093 = (((((_2063 * _1985) + _740) * cbLight._m0[_2017].y) * _2082) * _1819) + (((((_1982 * _1985) + _740) * cbLight._m0[_1932].y) * _2006) * _1829);
    float _2094 = (((((_2063 * _1986) + _741) * cbLight._m0[_2017].z) * _2082) * _1819) + (((((_1982 * _1986) + _741) * cbLight._m0[_1932].z) * _2006) * _1829);
    float _2156;
    float _2158;
    float _2160;
    if (_1869)
    {
        _2156 = _2092;
        _2158 = _2093;
        _2160 = _2094;
    }
    else
    {
        uint _2162 = _1796 + 2u;
        uint _2166 = _1796 + 10u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _589) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _667;
        float _2183 = cbLight._m0[_2162].y + _668;
        float _2184 = cbLight._m0[_2162].z + _669;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2162].xyz));
        float _4169 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2196 = dot(vec3(_586, _587, _588), vec3(_2189, _2190, _2191));
        float _4180 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4191 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
        float _2222 = 1.0 - _2181;
        float _2232 = (0.5 / (((_1961 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2222) + _2181) * _2195))) * _2195;
        float _4202 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2156 = (((((_2215 * _1983) + _738) * cbLight._m0[_2166].x) * _2234) * _2235) + _2092;
        _2158 = (((((_2215 * _1985) + _740) * cbLight._m0[_2166].y) * _2234) * _2235) + _2093;
        _2160 = (((((_2215 * _1986) + _741) * cbLight._m0[_2166].z) * _2234) * _2235) + _2094;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1887)
    {
        _2270 = _2156;
        _2272 = _2158;
        _2274 = _2160;
    }
    else
    {
        uint _2281 = _1796 + 3u;
        uint _2285 = _1796 + 11u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _589) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _667;
        float _2302 = cbLight._m0[_2281].y + _668;
        float _2303 = cbLight._m0[_2281].z + _669;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2281].xyz));
        float _4218 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2315 = dot(vec3(_586, _587, _588), vec3(_2308, _2309, _2310));
        float _4229 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4240 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_1961 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2341) + _2300) * _2314))) * _2314;
        float _4251 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2270 = (((((_2334 * _1983) + _738) * cbLight._m0[_2285].x) * _2353) * _2354) + _2156;
        _2272 = (((((_2334 * _1985) + _740) * cbLight._m0[_2285].y) * _2353) * _2354) + _2158;
        _2274 = (((((_2334 * _1986) + _741) * cbLight._m0[_2285].z) * _2353) * _2354) + _2160;
    }
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_1794.y == 0u)
    {
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2429;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2429;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2429;
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2445)));
        float _2466 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            uint _2753 = 0u;
            uint _2762;
            bool _2763;
            for (;;)
            {
                _2762 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2753 << 2u)) >> 2u)).x;
                _2763 = _2762 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2763)
                {
                    frontier_phi_61_pred = _2747;
                    frontier_phi_61_pred_1 = _2752;
                    frontier_phi_61_pred_2 = _2751;
                    frontier_phi_61_pred_3 = _2750;
                    frontier_phi_61_pred_4 = _2749;
                    frontier_phi_61_pred_5 = _2748;
                }
                else
                {
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    uint _2877;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2762;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    for (;;)
                    {
                        uint _2881 = uint(findLSB(_2877)) + (_2753 << 5u);
                        uint _2878 = (_2877 + 4294967295u) & _2877;
                        uint _2883 = _2881 * 48u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2903 = (_2881 * 48u) + 4u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2922 = (_2881 * 48u) + 8u;
                        vec3 _2933 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x));
                        float _2937 = _2897.x - _2430;
                        float _2938 = _2897.y - _2431;
                        float _2939 = _2897.z - _2432;
                        float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                        float _2943 = inversesqrt(_2940);
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2947 = dot(vec3(_694, _697, _700), vec3(_2944, _2945, _2946));
                        float _2952 = 1.0 - (_2940 * _2897.w);
                        float _4277 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2954 = sqrt(_2940) * _2916.w;
                        float _2957 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2947) + _2958;
                        float _2964 = _2954 * _2954;
                        float _2968 = ((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2953) / ((_2964 * 0.699999988079071044921875) + 1.0);
                        float _2972 = (-0.0) - _2430;
                        float _2973 = (-0.0) - _2431;
                        float _2974 = (-0.0) - _2432;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2989 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                        float _2990 = 1.0 - _769;
                        float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                        float _2998 = _2997 * _2997;
                        float _2999 = _2998 * _2998;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3010 = dot(vec3(_694, _697, _700), vec3(_2979, _2980, _2981));
                        float _4293 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3014 = dot(vec3(_694, _697, _700), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                        float _4304 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                        float _3022 = _2957 * _2998;
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _2947) + _3023;
                        float _4315 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3028 = 1.0 - _2998;
                        float _3038 = (0.5 / (((_3027 * ((_3013 * _3028) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2998) * _3013))) * _3027;
                        float _4326 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3049 = (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3021 * _3021) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125))) * _2953;
                        _2806 = (_2968 * _2916.x) + _2874;
                        _2807 = (_2968 * _2916.y) + _2875;
                        _2808 = (_2968 * _2916.z) + _2876;
                        _2803 = (_3049 * _2933.x) + _2871;
                        _2804 = (_3049 * _2933.y) + _2872;
                        _2805 = (_3049 * _2933.z) + _2873;
                        if (_2878 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2878;
                        }
                    }
                    frontier_phi_61_pred = _2803;
                    frontier_phi_61_pred_1 = _2808;
                    frontier_phi_61_pred_2 = _2807;
                    frontier_phi_61_pred_3 = _2806;
                    frontier_phi_61_pred_4 = _2805;
                    frontier_phi_61_pred_5 = _2804;
                }
                _2603 = frontier_phi_61_pred;
                _2613 = frontier_phi_61_pred_1;
                _2611 = frontier_phi_61_pred_2;
                _2609 = frontier_phi_61_pred_3;
                _2607 = frontier_phi_61_pred_4;
                _2605 = frontier_phi_61_pred_5;
                uint _2754 = _2753 + 1u;
                if (_2754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2747 = _2603;
                    _2748 = _2605;
                    _2749 = _2607;
                    _2750 = _2609;
                    _2751 = _2611;
                    _2752 = _2613;
                    _2753 = _2754;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((4294967295u << _2619) & _2476) == 0u)
        {
            _2715 = _2602;
            _2717 = _2604;
            _2719 = _2606;
            _2721 = _2608;
            _2723 = _2610;
            _2725 = _2612;
        }
        else
        {
            float _2740 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _2741 = _2740 * _2430;
            float _2742 = _2740 * _2431;
            float _2743 = _2740 * _2432;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2854 = _2602;
                float _2855 = _2604;
                float _2856 = _2606;
                float _2857 = _2608;
                float _2858 = _2610;
                float _2859 = _2612;
                uint _2860 = _2619;
                uint _2869;
                bool _2870;
                for (;;)
                {
                    _2869 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                    _2870 = _2869 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2870)
                    {
                        frontier_phi_67_pred = _2857;
                        frontier_phi_67_pred_1 = _2858;
                        frontier_phi_67_pred_2 = _2859;
                        frontier_phi_67_pred_3 = _2856;
                        frontier_phi_67_pred_4 = _2855;
                        frontier_phi_67_pred_5 = _2854;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        uint _3073 = _2869;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3142;
                        vec4 _3158;
                        float _3205;
                        bool _3206;
                        for (;;)
                        {
                            uint _3084 = ((_2860 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3129 = (_3084 * 40u) + 16u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3145 = (_3084 * 40u) + 20u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3084 * 40u) + 24u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3180 = (_3084 * 40u) + 28u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3205 = fma(_2432, _3193.z, fma(_2431, _3193.y, _3193.x * _2430)) + _3193.w;
                            _3206 = !((fma(_2432, _3174.z, fma(_2431, _3174.y, _3174.x * _2430)) + _3174.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3206)
                            {
                                float _3233 = _3099.x - _2430;
                                float _3234 = _3099.y - _2431;
                                float _3235 = _3099.z - _2432;
                                float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                                float _3239 = inversesqrt(_3236);
                                float _3240 = _3239 * _3233;
                                float _3241 = _3239 * _3234;
                                float _3242 = _3239 * _3235;
                                float _3246 = 1.0 - (_3236 / (_3100 * _3100));
                                float _4337 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3251 = sqrt(_3236) * _3115.w;
                                float _3253 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                                float _3254 = _3253 * _3253;
                                float _3257 = ((1.0 - _3254) * dot(vec3(_3240, _3241, _3242), vec3(_694, _697, _700))) + _3254;
                                float _3260 = _3251 * _3251;
                                float _3264 = (fma(_2432, _3142.z, fma(_2431, _3142.y, _3142.x * _2430)) + _3142.w) / _3205;
                                float _3265 = (fma(_2432, _3158.z, fma(_2431, _3158.y, _3158.x * _2430)) + _3158.w) / _3205;
                                float _3269 = 1.0 - dot(vec2(_3264, _3265), vec2(_3264, _3265));
                                float _4353 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3271 = _3270 * (((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3247) / ((_3260 * 0.699999988079071044921875) + 1.0));
                                float _3283 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                                float _3284 = 1.0 - _769;
                                float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                                float _3292 = _3291 * _3291;
                                float _3293 = _3292 * _3292;
                                float _3294 = _3240 - _2741;
                                float _3295 = _3241 - _2742;
                                float _3296 = _3242 - _2743;
                                float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                                float _3304 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2741, (-0.0) - _2742, (-0.0) - _2743));
                                float _4364 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3308 = dot(vec3(_694, _697, _700), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                                float _4375 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                                float _3316 = _3253 * _3292;
                                float _3317 = _3316 * _3316;
                                float _3323 = ((1.0 - _3317) * dot(vec3(_694, _697, _700), vec3(_3240, _3241, _3242))) + _3317;
                                float _4386 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3325 = 1.0 - _3292;
                                float _3335 = (0.5 / (((_3324 * ((_3307 * _3325) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3292) * _3307))) * _3324;
                                float _4397 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3345 = (_3270 * _3247) * (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3315 * _3315) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3345 * _3127.x;
                                frontier_phi_73_pred_1 = _3345 * _3127.y;
                                frontier_phi_73_pred_2 = _3271 * _3115.z;
                                frontier_phi_73_pred_3 = _3271 * _3115.y;
                                frontier_phi_73_pred_4 = _3271 * _3115.x;
                                frontier_phi_73_pred_5 = _3345 * _3127.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3349 = frontier_phi_73_pred;
                            _3350 = frontier_phi_73_pred_1;
                            _3354 = frontier_phi_73_pred_2;
                            _3353 = frontier_phi_73_pred_3;
                            _3352 = frontier_phi_73_pred_4;
                            _3351 = frontier_phi_73_pred_5;
                            _3057 = _3352 + _3070;
                            _3058 = _3353 + _3071;
                            _3059 = _3354 + _3072;
                            _3054 = _3349 + _3067;
                            _3055 = _3350 + _3068;
                            _3056 = _3351 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3057;
                        frontier_phi_67_pred_1 = _3058;
                        frontier_phi_67_pred_2 = _3059;
                        frontier_phi_67_pred_3 = _3056;
                        frontier_phi_67_pred_4 = _3055;
                        frontier_phi_67_pred_5 = _3054;
                    }
                    _2722 = frontier_phi_67_pred;
                    _2724 = frontier_phi_67_pred_1;
                    _2726 = frontier_phi_67_pred_2;
                    _2720 = frontier_phi_67_pred_3;
                    _2718 = frontier_phi_67_pred_4;
                    _2716 = frontier_phi_67_pred_5;
                    uint _2861 = _2860 + 1u;
                    if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2854 = _2716;
                        _2855 = _2718;
                        _2856 = _2720;
                        _2857 = _2722;
                        _2858 = _2724;
                        _2859 = _2726;
                        _2860 = _2861;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2724;
                frontier_phi_55_56_ladder_1 = _2726;
                frontier_phi_55_56_ladder_2 = _2722;
                frontier_phi_55_56_ladder_3 = _2720;
                frontier_phi_55_56_ladder_4 = _2718;
                frontier_phi_55_56_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_55_56_ladder = _2610;
                frontier_phi_55_56_ladder_1 = _2612;
                frontier_phi_55_56_ladder_2 = _2608;
                frontier_phi_55_56_ladder_3 = _2606;
                frontier_phi_55_56_ladder_4 = _2604;
                frontier_phi_55_56_ladder_5 = _2602;
            }
            _2715 = frontier_phi_55_56_ladder_5;
            _2717 = frontier_phi_55_56_ladder_4;
            _2719 = frontier_phi_55_56_ladder_3;
            _2721 = frontier_phi_55_56_ladder_2;
            _2723 = frontier_phi_55_56_ladder;
            _2725 = frontier_phi_55_56_ladder_1;
        }
        float _2730 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2489 = (_2730 * _2721) + _1925;
        _2491 = (_2730 * _2723) + _1927;
        _2493 = (_2730 * _2725) + _1929;
        _2495 = ((_2715 * _738) * _2730) + _2270;
        _2497 = ((_2717 * _740) * _2730) + _2272;
        _2499 = ((_2719 * _741) * _2730) + _2274;
    }
    else
    {
        _2489 = _1925;
        _2491 = _1927;
        _2493 = _1929;
        _2495 = _2270;
        _2497 = _2272;
        _2499 = _2274;
    }
    uint _2505 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _4413 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4424 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4435 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _2536 = (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2489 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _753))) + ((_2495 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + (((_361 * cbMtdParam._m0[11u].x) * (_511.x + _496.x)) * cbInstanceData._m0[_2505].x);
    float _2538 = ((((_361 * cbMtdParam._m0[11u].y) * (_511.y + _496.y)) * cbInstanceData._m0[_2505].y) + ((_2497 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2491 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _753)));
    float _2540 = ((((_361 * cbMtdParam._m0[11u].z) * (_511.z + _496.z)) * cbInstanceData._m0[_2505].z) + ((_2499 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2493 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _753)));
    uint _2544 = _713 + 6u;
    float _2552 = _675 / cbSceneParam._m0[86u].x;
    float _2553 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2628 = _2627 / _609;
        float _2639 = _2628 * _660;
        float _2640 = _661 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2643 = _2628 * _662;
        float _2645 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2646 = _2645 + cbSceneParam._m0[79u].w;
        float _2647 = cbSceneParam._m0[79u].w - _2640;
        float _2653 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2643 * _2643));
        float _2656 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2653;
        float _2661 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2663 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2816;
        if (abs((_2641 - _2645) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2816 = ((((_2646 > 0.0) ? exp2(_2661 * _2646) : (2.0 - exp2(_2663 * _2646))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2656;
        }
        else
        {
            float _2776 = 1.0 / cbSceneParam._m0[80u].x;
            float _2777 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : max(_2646, _2647));
            float _2778 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : min(_2646, _2647));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            _2816 = ((abs(_2653 / _2641) * cbSceneParam._m0[80u].y) * ((((_2787 - _2788) * 2.0) - ((exp2(_2661 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0)))) - exp2(_2661 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))))) * _2776)) - ((exp2(_2663 * _2787) - exp2(_2663 * _2788)) * _2776))) + (_2656 * cbSceneParam._m0[80u].z);
        }
        vec4 _2818 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2827 = exp2((_2816 * (-1.44269502162933349609375)) * (1.0 - _2818.w));
        float _2828 = log2(_2827);
        float _2844 = log2(_2572);
        _2665 = (exp2(_2844 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].x)) * _2818.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2667 = (exp2(_2844 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].y)) * _2818.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2669 = (exp2(_2844 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].z)) * _2818.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2671 = _2827 * _2572;
    }
    else
    {
        _2665 = _2569;
        _2667 = _2570;
        _2669 = _2571;
        _2671 = _2572;
    }
    float _2683 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2684 = _2683 == 3.0;
    float _2685 = log2(_2671);
    float _2692 = exp2(_2685 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)));
    float _2693 = exp2(_2685 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)));
    float _2694 = exp2(_2685 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)));
    float _2703 = (_2683 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2703 * (_2684 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.y = _2703 * (_2684 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.z = _2703 * (_2684 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.w = cbInstanceData._m0[_2544].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2544].w;
}


