#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _776;
float _2984;
float _2985;
float _2986;
float _2987;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _227 = texture(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _235 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _236 = _235 * _175;
    float _237 = _235 * _176;
    float _238 = _235 * _177;
    float _2996 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3007 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3018 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _258 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _309 * _315;
    float _317 = _310 * _315;
    float _318 = _311 * _315;
    vec4 _323 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _325 = _323.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _455 = sqrt(((_309 * _309) + (_310 * _310)) + (_311 * _311));
        float _461 = (cbMatDynParam._m0[5u].x * _455) + cbMatDynParam._m0[5u].y;
        float _3029 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        float _462 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
        float _466 = (cbMatDynParam._m0[5u].z * _455) + cbMatDynParam._m0[5u].w;
        float _3040 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0))) - _462)) + _462) < ((_325 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _337 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _338 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _358 = fma(_238, cbSceneParam._m0[5u].z, fma(_237, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _236));
    float _361 = fma(_238, cbSceneParam._m0[6u].z, fma(_237, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _236));
    float _364 = fma(_238, cbSceneParam._m0[7u].z, fma(_237, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _236));
    uint _377 = uint(roundEven(NORMAL.w)) * 13u;
    uint _379 = _377 + 9u;
    uint _380 = _379 + uint(cbMatDynParam._m0[0u].w);
    float _386 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0)))) * cbInstanceData._m0[_380].x;
    float _387 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0)))) * cbInstanceData._m0[_380].y;
    float _388 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0)))) * cbInstanceData._m0[_380].z;
    float _3051 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _3062 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
    float _3073 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
    vec4 _400 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _337, cbSceneParam._m0[86u].y * _338));
    float _403 = _400.x * TEXCOORD.z;
    float _404 = dot(vec3(_236, _237, _238), vec3(_316, _317, _318));
    float _407 = _404 * 2.0;
    float _412 = (_407 * _236) - _316;
    float _413 = (_407 * _237) - _317;
    float _414 = (_407 * _238) - _318;
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _440 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _775;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _500 = fma(_444, cbModelParam._m0[26u].z, fma(_440, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _436));
        float _504 = fma(_444, cbModelParam._m0[27u].z, fma(_440, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _436));
        float _508 = fma(_444, cbModelParam._m0[28u].z, fma(_440, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _436));
        float _533 = _436 + _236;
        float _534 = _440 + _237;
        float _535 = _444 + _238;
        float _545 = fma(_535, cbModelParam._m0[26u].z, fma(_534, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533)) - _500;
        float _546 = fma(_535, cbModelParam._m0[27u].z, fma(_534, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533)) - _504;
        float _547 = fma(_535, cbModelParam._m0[28u].z, fma(_534, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533)) - _508;
        float _551 = inversesqrt(dot(vec3(_545, _546, _547), vec3(_545, _546, _547)));
        float _564 = ((_551 * _545) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_500 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_551 * _546) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_504 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_551 * _547) / cbModelParam._m0[34u].z) + ((((((_508 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_564, _565, _566), 0.0);
        float _603 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_569.x + (-0.5));
        float _605 = _603 * (_569.y + (-0.5));
        float _606 = _603 * (_569.z + (-0.5));
        float _613 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_576.x + (-0.5));
        float _615 = _613 * (_576.y + (-0.5));
        float _616 = _613 * (_576.z + (-0.5));
        float _623 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_583.x + (-0.5));
        float _625 = _623 * (_583.y + (-0.5));
        float _626 = _623 * (_583.z + (-0.5));
        float _633 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_590.x + (-0.5));
        float _635 = _633 * (_590.y + (-0.5));
        float _636 = _633 * (_590.z + (-0.5));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = _604 * 0.5;
        float _641 = _614 * 0.5;
        float _642 = _624 * 0.5;
        float _643 = dot(vec3(_640, _641, _642), vec3(_640, _641, _642));
        float _648 = (_643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_643);
        float _657 = (dot(vec3(_236, _237, _238), vec3(_648 * _640, _648 * _641, _648 * _642)) + 1.0) * 0.5;
        float _3099 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _667 = sqrt(((_641 * _641) + (_640 * _640)) + (_642 * _642)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3110 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _669 = _668 * 2.0;
        float _673 = (1.0 - _668) / (_668 + 1.0);
        float _3121 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _683 = ((((1.0 - _674) * (_669 + 2.0)) * exp2(log2(isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0))) * (_669 + 1.0))) + _674) * _637;
        float _684 = _605 * 0.5;
        float _685 = _615 * 0.5;
        float _686 = _625 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _700 = (dot(vec3(_236, _237, _238), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3132 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _709 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3143 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3154 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0))) * (_711 + 1.0))) + _716) * _638;
        float _726 = _606 * 0.5;
        float _727 = _616 * 0.5;
        float _728 = _626 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _742 = (dot(vec3(_236, _237, _238), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _751 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3187 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_753 + 1.0))) + _758) * _639;
        _775 = _606;
        _777 = _605;
        _778 = _604;
        _779 = _616;
        _780 = _615;
        _781 = _614;
        _782 = _626;
        _783 = _625;
        _784 = _624;
        _785 = _639;
        _786 = _638;
        _787 = _637;
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
    }
    else
    {
        _775 = _776;
        _777 = _776;
        _778 = _776;
        _779 = _776;
        _780 = _776;
        _781 = _776;
        _782 = _776;
        _783 = _776;
        _784 = _776;
        _785 = _776;
        _786 = _776;
        _787 = _776;
        _788 = 0.0;
        _789 = 0.0;
        _790 = 0.0;
    }
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _819 = fma(_444, cbModelParam._m0[30u].z, fma(_440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _436));
        float _823 = fma(_444, cbModelParam._m0[31u].z, fma(_440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _436));
        float _827 = fma(_444, cbModelParam._m0[32u].z, fma(_440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _436));
        float _850 = _436 + _236;
        float _851 = _440 + _237;
        float _852 = _444 + _238;
        float _862 = fma(_852, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850)) - _819;
        float _863 = fma(_852, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850)) - _823;
        float _864 = fma(_852, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850)) - _827;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_819 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_823 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[35u].z) + ((((((_827 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _918 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_885.x + (-0.5));
        float _920 = _918 * (_885.y + (-0.5));
        float _921 = _918 * (_885.z + (-0.5));
        float _928 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_892.x + (-0.5));
        float _930 = _928 * (_892.y + (-0.5));
        float _931 = _928 * (_892.z + (-0.5));
        float _938 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_899.x + (-0.5));
        float _940 = _938 * (_899.y + (-0.5));
        float _941 = _938 * (_899.z + (-0.5));
        float _948 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_906.x + (-0.5));
        float _950 = _948 * (_906.y + (-0.5));
        float _951 = _948 * (_906.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_236, _237, _238), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3228 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3239 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3250 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * (_982 + 1.0))) + _987) * _952;
        float _997 = _920 * 0.5;
        float _998 = _930 * 0.5;
        float _999 = _940 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_236, _237, _238), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3261 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3272 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3283 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_1024 + 1.0))) + _1029) * _953;
        float _1039 = _921 * 0.5;
        float _1040 = _931 * 0.5;
        float _1041 = _941 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_236, _237, _238), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3316 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_1066 + 1.0))) + _1071) * _954;
        _1088 = _921;
        _1089 = _920;
        _1090 = _919;
        _1091 = _931;
        _1092 = _930;
        _1093 = _929;
        _1094 = _941;
        _1095 = _940;
        _1096 = _939;
        _1097 = _954;
        _1098 = _953;
        _1099 = _952;
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _776;
        _1089 = _776;
        _1090 = _776;
        _1091 = _776;
        _1092 = _776;
        _1093 = _776;
        _1094 = _776;
        _1095 = _776;
        _1096 = _776;
        _1097 = _776;
        _1098 = _776;
        _1099 = _776;
        _1100 = 0.0;
        _1101 = 0.0;
        _1102 = 0.0;
    }
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _788)) + _788;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _790)) + _790;
    float _1135 = fma(_1114, cbSceneParam._m0[89u].z, fma(_1113, cbSceneParam._m0[89u].y, _1112 * cbSceneParam._m0[89u].x));
    float _1138 = fma(_1114, cbSceneParam._m0[90u].z, fma(_1113, cbSceneParam._m0[90u].y, _1112 * cbSceneParam._m0[90u].x));
    float _1141 = fma(_1114, cbSceneParam._m0[91u].z, fma(_1113, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1112));
    float _1156 = _412 * 0.5;
    float _1157 = _413 * 0.5;
    float _1158 = _414 * 0.5;
    float _1159 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1162 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1165 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1199;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1172 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_775, _779, _782, _785));
        float _1176 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_777, _780, _783, _786));
        float _1180 = dot(vec4(_1156, _1157, _1158, 1.0), vec4(_778, _781, _784, _787));
        float _1187 = dot(vec4(cbModelParam._m0[39u]), vec4(_1156, _1157, _1158, 1.0));
        _1199 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1187) ? 0.0 : (isnan(0.0) ? _1187 : max(0.0, _1187))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1199 = 1.0;
    }
    float _1210;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1201 = dot(vec4(cbModelParam._m0[40u]), vec4(_1156, _1157, _1158, 1.0));
        _1210 = dot(vec3(isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1201) ? 0.0 : (isnan(0.0) ? _1201 : max(0.0, _1201))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1210 = 1.0;
    }
    float _1214 = (_1210 * cbModelParam._m0[1u].x) + (_1199 * (1.0 - cbModelParam._m0[1u].x));
    float _1223 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1305;
    float _1307;
    float _1309;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1272 = fma(_444, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _436)) + cbModelParam._m0[13u].w;
        float _1276 = fma(_444, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _436)) + cbModelParam._m0[14u].w;
        float _1280 = fma(_444, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _436)) + cbModelParam._m0[15u].w;
        float _1283 = fma(_414, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _412));
        float _1286 = fma(_414, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _412));
        float _1289 = fma(_414, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _412));
        float _1315;
        if (_1283 > 0.0)
        {
            _1315 = abs((1.0 - _1272) / _1283);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1272 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1315 = frontier_phi_19_17_ladder;
        }
        float _1522;
        if (_1286 > 0.0)
        {
            _1522 = abs((1.0 - _1276) / _1286);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1276 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1522 = frontier_phi_28_24_ladder;
        }
        float _1711;
        if (_1289 > 0.0)
        {
            _1711 = abs((1.0 - _1280) / _1289);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1280 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1711 = frontier_phi_40_35_ladder;
        }
        float _1713 = isnan(_1522) ? _1315 : (isnan(_1315) ? _1522 : min(_1315, _1522));
        float _1714 = isnan(_1711) ? _1713 : (isnan(_1713) ? _1711 : min(_1713, _1711));
        float _1718 = (_1714 * _1283) + _1272;
        float _1719 = (_1714 * _1286) + _1276;
        float _1720 = (_1714 * _1289) + _1280;
        float _1721 = _1714 * 9.9999997473787516355514526367188e-05;
        float _1723 = (-1.0) - _1721;
        float _1725 = _1721 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1720 > _1725) || ((_1720 < _1723) || ((_1719 > _1725) || ((_1719 < _1723) || ((_1718 < _1723) || (_1718 > _1725))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1720, cbModelParam._m0[9u].z, fma(_1719, cbModelParam._m0[9u].y, _1718 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1720, cbModelParam._m0[10u].z, fma(_1719, cbModelParam._m0[10u].y, _1718 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1720, cbModelParam._m0[11u].z, fma(_1719, cbModelParam._m0[11u].y, _1718 * cbModelParam._m0[11u].x))), _1223);
            frontier_phi_18_40_ladder = _1817.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1817.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1817.x * cbModelParam._m0[1u].y;
        }
        _1305 = frontier_phi_18_40_ladder_2;
        _1307 = frontier_phi_18_40_ladder_1;
        _1309 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_412, _413, _414), _1223);
        _1305 = _1293.x * cbModelParam._m0[1u].y;
        _1307 = _1293.y * cbModelParam._m0[1u].y;
        _1309 = _1293.z * cbModelParam._m0[1u].y;
    }
    float _1312 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1405;
    float _1407;
    float _1409;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1369 = fma(_444, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _436)) + cbModelParam._m0[21u].w;
        float _1373 = fma(_444, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _436)) + cbModelParam._m0[22u].w;
        float _1377 = fma(_444, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _436)) + cbModelParam._m0[23u].w;
        float _1380 = fma(_414, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _412));
        float _1383 = fma(_414, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _412));
        float _1386 = fma(_414, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _412));
        float _1527;
        if (_1380 > 0.0)
        {
            _1527 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1527 = frontier_phi_30_26_ladder;
        }
        float _1738;
        if (_1383 > 0.0)
        {
            _1738 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1738 = frontier_phi_42_37_ladder;
        }
        float _1889;
        if (_1386 > 0.0)
        {
            _1889 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1889 = frontier_phi_51_48_ladder;
        }
        float _1891 = isnan(_1738) ? _1527 : (isnan(_1527) ? _1738 : min(_1527, _1738));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1380) + _1369;
        float _1897 = (_1892 * _1383) + _1373;
        float _1898 = (_1892 * _1386) + _1377;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1899;
        float _1902 = _1899 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1898 > _1902) || ((_1898 < _1900) || ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 < _1900) || (_1896 > _1902))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1898, cbModelParam._m0[17u].z, fma(_1897, cbModelParam._m0[17u].y, _1896 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1898, cbModelParam._m0[18u].z, fma(_1897, cbModelParam._m0[18u].y, _1896 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1898, cbModelParam._m0[19u].z, fma(_1897, cbModelParam._m0[19u].y, _1896 * cbModelParam._m0[19u].x))), _1312);
            frontier_phi_27_51_ladder = _2131.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2131.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2131.x * cbModelParam._m0[1u].z;
        }
        _1405 = frontier_phi_27_51_ladder_2;
        _1407 = frontier_phi_27_51_ladder_1;
        _1409 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_412, _413, _414), _1312);
        _1405 = _1389.x * cbModelParam._m0[1u].z;
        _1407 = _1389.y * cbModelParam._m0[1u].z;
        _1409 = _1389.z * cbModelParam._m0[1u].z;
    }
    float _1421 = _403 * 0.01200000010430812835693359375;
    float _1423 = _1421 * ((cbModelParam._m0[1u].w * (_1405 - _1305)) + _1305);
    float _1424 = _1421 * ((cbModelParam._m0[1u].w * (_1407 - _1307)) + _1307);
    float _1425 = _1421 * ((cbModelParam._m0[1u].w * (_1409 - _1309)) + _1309);
    float _1428 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, _1423 * cbSceneParam._m0[91u].x));
    uvec4 _1444 = floatBitsToUint(cbInstanceData._m0[_377 + 5u]);
    uint _1446 = _1444.x * 14u;
    uint _1447 = _1446 + 13u;
    float _1454 = _403 + (-1.0);
    float _1460 = (cbLight._m0[_1447].x * _1454) + 1.0;
    float _1461 = (cbLight._m0[_1447].y * _1454) + 1.0;
    float _1462 = (cbLight._m0[_1447].z * _1454) + 1.0;
    float _1463 = (cbLight._m0[_1447].w * _1454) + 1.0;
    uint _1464 = _1446 + 5u;
    float _1470 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
    uint _1474 = _1446 + 4u;
    float _1481 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
    uint _1485 = _1446 | 1u;
    float _1496 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_236, _237, _238));
    float _1499 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_236, _237, _238));
    float _3452 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _3463 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _1504 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.3183098733425140380859375;
    float _1506 = (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.3183098733425140380859375;
    float _1513 = ((cbLight._m0[_1464].x * _1470) * _1506) + ((cbLight._m0[_1474].x * _1481) * _1504);
    float _1514 = ((_1470 * cbLight._m0[_1464].y) * _1506) + ((_1481 * cbLight._m0[_1474].y) * _1504);
    float _1515 = ((_1470 * cbLight._m0[_1464].z) * _1506) + ((_1481 * cbLight._m0[_1474].z) * _1504);
    uvec4 _1519 = floatBitsToUint(cbLight._m0[_1446 + 12u]);
    bool _1521 = _1519.x == 0u;
    float _1532;
    float _1534;
    float _1536;
    if (_1521)
    {
        _1532 = _1513;
        _1534 = _1514;
        _1536 = _1515;
    }
    else
    {
        uint _1540 = _1446 + 6u;
        float _1556 = (dot(vec3(cbLight._m0[_1446 + 2u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1557 = _1556 * _1556;
        float _3474 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1559 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1532 = (((cbLight._m0[_1540].x * 0.3183098733425140380859375) * _1558) * _1559) + _1513;
        _1534 = (((cbLight._m0[_1540].y * 0.3183098733425140380859375) * _1558) * _1559) + _1514;
        _1536 = (((cbLight._m0[_1540].z * 0.3183098733425140380859375) * _1558) * _1559) + _1515;
    }
    bool _1539 = _1519.y == 0u;
    float _1577;
    float _1579;
    float _1581;
    if (_1539)
    {
        _1577 = _1532;
        _1579 = _1534;
        _1581 = _1536;
    }
    else
    {
        uint _1682 = _1446 + 7u;
        float _1698 = (dot(vec3(cbLight._m0[_1446 + 3u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1699 = _1698 * _1698;
        float _3490 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1701 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
        _1577 = (((cbLight._m0[_1682].x * 0.3183098733425140380859375) * _1700) * _1701) + _1532;
        _1579 = (((cbLight._m0[_1682].y * 0.3183098733425140380859375) * _1700) * _1701) + _1534;
        _1581 = (((cbLight._m0[_1682].z * 0.3183098733425140380859375) * _1700) * _1701) + _1536;
    }
    uint _1583 = _1446 + 8u;
    float _1589 = cbLight._m0[_1446].x + _316;
    float _1590 = cbLight._m0[_1446].y + _317;
    float _1591 = cbLight._m0[_1446].z + _318;
    float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
    float _1599 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1446].xyz));
    float _3506 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1602 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _1603 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _1604 = dot(vec3(cbLight._m0[_1446].xyz), vec3(_1589 * _1595, _1590 * _1595, _1591 * _1595));
    float _3528 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1615 = (exp2(log2(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1621 = (0.5 / ((_1602 + 9.9999999392252902907785028219223e-09) + _1603)) * _1602;
    float _3539 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1623 = (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * 0.31831014156341552734375;
    uint _1634 = _1446 + 9u;
    float _1640 = cbLight._m0[_1485].x + _316;
    float _1641 = cbLight._m0[_1485].y + _317;
    float _1642 = cbLight._m0[_1485].z + _318;
    float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
    float _1650 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1485].xyz));
    float _3550 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1653 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _1654 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_1640 * _1646, _1641 * _1646, _1642 * _1646));
    float _3561 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1663 = (exp2(log2(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1667 = (0.5 / ((_1653 + 9.9999999392252902907785028219223e-09) + _1603)) * _1653;
    float _3572 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1669 = (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.31831014156341552734375;
    float _1679 = (((_1663 * cbLight._m0[_1634].x) * _1669) * _1470) + (((_1615 * cbLight._m0[_1583].x) * _1623) * _1481);
    float _1680 = (((_1663 * cbLight._m0[_1634].y) * _1669) * _1470) + (((_1615 * cbLight._m0[_1583].y) * _1623) * _1481);
    float _1681 = (((_1663 * cbLight._m0[_1634].z) * _1669) * _1470) + (((_1615 * cbLight._m0[_1583].z) * _1623) * _1481);
    float _1743;
    float _1745;
    float _1747;
    if (_1521)
    {
        _1743 = _1679;
        _1745 = _1680;
        _1747 = _1681;
    }
    else
    {
        uint _1749 = _1446 + 10u;
        uint _1755 = _1446 + 2u;
        float _1761 = cbLight._m0[_1755].x + _316;
        float _1762 = cbLight._m0[_1755].y + _317;
        float _1763 = cbLight._m0[_1755].z + _318;
        float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
        float _1771 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1755].xyz));
        float _3583 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1774 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1775 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1761 * _1767, _1762 * _1767, _1763 * _1767));
        float _3594 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1784 = (exp2(log2(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1788 = (0.5 / ((_1774 + 9.9999999392252902907785028219223e-09) + _1603)) * _1774;
        float _3605 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1790 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.31831014156341552734375;
        float _1791 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1743 = (((_1784 * cbLight._m0[_1749].x) * _1790) * _1791) + _1679;
        _1745 = (((_1784 * cbLight._m0[_1749].y) * _1790) * _1791) + _1680;
        _1747 = (((_1784 * cbLight._m0[_1749].z) * _1790) * _1791) + _1681;
    }
    float _1826;
    float _1828;
    float _1830;
    if (_1539)
    {
        _1826 = _1743;
        _1828 = _1745;
        _1830 = _1747;
    }
    else
    {
        uint _1837 = _1446 + 11u;
        uint _1843 = _1446 + 3u;
        float _1849 = cbLight._m0[_1843].x + _316;
        float _1850 = cbLight._m0[_1843].y + _317;
        float _1851 = cbLight._m0[_1843].z + _318;
        float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
        float _1859 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1843].xyz));
        float _3621 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1862 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1863 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1849 * _1855, _1850 * _1855, _1851 * _1855));
        float _3632 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1872 = (exp2(log2(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1876 = (0.5 / ((_1862 + 9.9999999392252902907785028219223e-09) + _1603)) * _1862;
        float _3643 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1878 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.31831014156341552734375;
        float _1879 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
        _1826 = (((_1872 * cbLight._m0[_1837].x) * _1878) * _1879) + _1743;
        _1828 = (((_1872 * cbLight._m0[_1837].y) * _1878) * _1879) + _1745;
        _1830 = (((_1872 * cbLight._m0[_1837].z) * _1878) * _1879) + _1747;
    }
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    if (_1444.y == 0u)
    {
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1954;
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1954;
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1954;
        uvec4 _1969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1970 = _1969.x;
        uint _1981 = uint((float(_1969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _338) / _1970))) + floor(float(uint(cbSceneParam._m0[85u].x * _337) / _1970)));
        float _1991 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1992 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        uint _1995 = uint(isnan(14.0) ? _1992 : (isnan(_1992) ? 14.0 : min(_1992, 14.0)));
        uvec4 _2000 = texelFetch(g_lightClusterGridBuffer, int(((_1995 << 2u) + (_1981 << 6u)) >> 2u));
        uint _2001 = _2000.x;
        uint _2002 = _1969.z;
        float _2136;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        if (((((1u << ((_2002 >> 4u) & 15u)) + 4294967295u) & _2001) == 0u) || ((_2002 & 240u) == 0u))
        {
            _2136 = 0.0;
            _2138 = 0.0;
            _2140 = 0.0;
            _2142 = 0.0;
            _2144 = 0.0;
            _2146 = 0.0;
        }
        else
        {
            float _2137;
            float _2139;
            float _2141;
            float _2143;
            float _2145;
            float _2147;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            uint _2302 = 0u;
            uint _2311;
            bool _2312;
            for (;;)
            {
                _2311 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                _2312 = _2311 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2312)
                {
                    frontier_phi_68_pred = _2298;
                    frontier_phi_68_pred_1 = _2301;
                    frontier_phi_68_pred_2 = _2300;
                    frontier_phi_68_pred_3 = _2299;
                    frontier_phi_68_pred_4 = _2297;
                    frontier_phi_68_pred_5 = _2296;
                }
                else
                {
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    uint _2447;
                    _2441 = _2296;
                    _2442 = _2297;
                    _2443 = _2298;
                    _2444 = _2299;
                    _2445 = _2300;
                    _2446 = _2301;
                    _2447 = _2311;
                    float _2368;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    for (;;)
                    {
                        uint _2451 = uint(findLSB(_2447)) + (_2302 << 5u);
                        uint _2448 = (_2447 + 4294967295u) & _2447;
                        uint _2453 = _2451 * 48u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 3u)).x));
                        uint _2473 = (_2451 * 48u) + 4u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 3u)).x));
                        uint _2492 = (_2451 * 48u) + 8u;
                        vec3 _2503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x));
                        float _2507 = _2467.x - _1955;
                        float _2508 = _2467.y - _1956;
                        float _2509 = _2467.z - _1957;
                        float _2510 = dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509));
                        float _2513 = inversesqrt(_2510);
                        float _2522 = 1.0 - (_2510 * _2467.w);
                        float _3669 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2523 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2524 = sqrt(_2510) * _2486.w;
                        float _2527 = 1.39999997615814208984375 / (_2524 + 1.39999997615814208984375);
                        float _2528 = _2527 * _2527;
                        float _2531 = ((1.0 - _2528) * dot(vec3(_358, _361, _364), vec3(_2513 * _2507, _2513 * _2508, _2513 * _2509))) + _2528;
                        float _2534 = _2524 * _2524;
                        float _2538 = ((isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))) * _2523) / ((_2534 * 0.699999988079071044921875) + 1.0);
                        float _2542 = (-0.0) - _1955;
                        float _2543 = (-0.0) - _1956;
                        float _2544 = (-0.0) - _1957;
                        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
                        float _2552 = dot(vec3(_358, _361, _364), vec3(_2548 * _2542, _2548 * _2543, _2548 * _2544));
                        float _3685 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                        float _3696 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _2556 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2560 = (0.5 / (((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) + 9.9999999392252902907785028219223e-09) + _2556)) * _2556;
                        float _3707 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                        float _2569 = (((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 3.1415927410125732421875) / ((_2534 * 2.1991131305694580078125) + 3.141590118408203125)) * _2523;
                        _2371 = (_2538 * _2486.x) + _2444;
                        _2372 = (_2538 * _2486.y) + _2445;
                        _2373 = (_2538 * _2486.z) + _2446;
                        _2368 = (_2569 * _2503.x) + _2441;
                        _2369 = (_2569 * _2503.y) + _2442;
                        _2370 = (_2569 * _2503.z) + _2443;
                        if (_2448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2441 = _2368;
                            _2442 = _2369;
                            _2443 = _2370;
                            _2444 = _2371;
                            _2445 = _2372;
                            _2446 = _2373;
                            _2447 = _2448;
                        }
                    }
                    frontier_phi_68_pred = _2370;
                    frontier_phi_68_pred_1 = _2373;
                    frontier_phi_68_pred_2 = _2372;
                    frontier_phi_68_pred_3 = _2371;
                    frontier_phi_68_pred_4 = _2369;
                    frontier_phi_68_pred_5 = _2368;
                }
                _2141 = frontier_phi_68_pred;
                _2147 = frontier_phi_68_pred_1;
                _2145 = frontier_phi_68_pred_2;
                _2143 = frontier_phi_68_pred_3;
                _2139 = frontier_phi_68_pred_4;
                _2137 = frontier_phi_68_pred_5;
                uint _2303 = _2302 + 1u;
                if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2296 = _2137;
                    _2297 = _2139;
                    _2298 = _2141;
                    _2299 = _2143;
                    _2300 = _2145;
                    _2301 = _2147;
                    _2302 = _2303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2136 = _2137;
            _2138 = _2139;
            _2140 = _2141;
            _2142 = _2143;
            _2144 = _2145;
            _2146 = _2147;
        }
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.z;
        uint _2153 = (_2151 >> 8u) & 15u;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        if (((4294967295u << _2153) & _2001) == 0u)
        {
            _2267 = _2136;
            _2269 = _2138;
            _2271 = _2140;
            _2273 = _2142;
            _2275 = _2144;
            _2277 = _2146;
        }
        else
        {
            float _2292 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2153 < ((_2151 >> 12u) & 15u))
            {
                float _2268;
                float _2270;
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2424 = _2136;
                float _2425 = _2138;
                float _2426 = _2140;
                float _2427 = _2142;
                float _2428 = _2144;
                float _2429 = _2146;
                uint _2430 = _2153;
                uint _2439;
                bool _2440;
                for (;;)
                {
                    _2439 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2430 << 2u)) >> 2u)).x;
                    _2440 = _2439 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2440)
                    {
                        frontier_phi_79_pred = _2429;
                        frontier_phi_79_pred_1 = _2428;
                        frontier_phi_79_pred_2 = _2427;
                        frontier_phi_79_pred_3 = _2426;
                        frontier_phi_79_pred_4 = _2425;
                        frontier_phi_79_pred_5 = _2424;
                    }
                    else
                    {
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2588;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2596 = _2424;
                        float _2597 = _2425;
                        float _2598 = _2426;
                        float _2599 = _2427;
                        float _2600 = _2428;
                        float _2601 = _2429;
                        uint _2602 = _2439;
                        uint _2603;
                        vec4 _2628;
                        float _2629;
                        vec4 _2644;
                        vec3 _2656;
                        vec4 _2672;
                        vec4 _2688;
                        float _2735;
                        bool _2736;
                        for (;;)
                        {
                            uint _2613 = ((_2430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2602));
                            _2603 = (_2602 + 4294967295u) & _2602;
                            uint _2615 = _2613 * 40u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            _2629 = _2628.w;
                            uint _2631 = (_2613 * 40u) + 4u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2646 = (_2613 * 40u) + 8u;
                            _2656 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x));
                            uint _2659 = (_2613 * 40u) + 16u;
                            _2672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 3u)).x));
                            uint _2675 = (_2613 * 40u) + 20u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            uint _2691 = (_2613 * 40u) + 24u;
                            vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2710 = (_2613 * 40u) + 28u;
                            vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            _2735 = fma(_1957, _2723.z, fma(_1956, _2723.y, _2723.x * _1955)) + _2723.w;
                            _2736 = !((fma(_1957, _2704.z, fma(_1956, _2704.y, _2704.x * _1955)) + _2704.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2736)
                            {
                                float _2763 = _2628.x - _1955;
                                float _2764 = _2628.y - _1956;
                                float _2765 = _2628.z - _1957;
                                float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                                float _2769 = inversesqrt(_2766);
                                float _2770 = _2769 * _2763;
                                float _2771 = _2769 * _2764;
                                float _2772 = _2769 * _2765;
                                float _2776 = 1.0 - (_2766 / (_2629 * _2629));
                                float _3718 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
                                float _2781 = sqrt(_2766) * _2644.w;
                                float _2783 = 1.39999997615814208984375 / (_2781 + 1.39999997615814208984375);
                                float _2784 = _2783 * _2783;
                                float _2785 = 1.0 - _2784;
                                float _2787 = (_2785 * dot(vec3(_2770, _2771, _2772), vec3(_358, _361, _364))) + _2784;
                                float _2790 = _2781 * _2781;
                                float _2794 = (fma(_1957, _2672.z, fma(_1956, _2672.y, _2672.x * _1955)) + _2672.w) / _2735;
                                float _2795 = (fma(_1957, _2688.z, fma(_1956, _2688.y, _2688.x * _1955)) + _2688.w) / _2735;
                                float _2799 = 1.0 - dot(vec2(_2794, _2795), vec2(_2794, _2795));
                                float _3734 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                                float _2800 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
                                float _2801 = _2800 * (((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2777) / ((_2790 * 0.699999988079071044921875) + 1.0));
                                float _2811 = dot(vec3(_358, _361, _364), vec3((-0.0) - (_1955 * _2292), (-0.0) - (_1956 * _2292), (-0.0) - (_1957 * _2292)));
                                float _3745 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2819 = (_2785 * dot(vec3(_358, _361, _364), vec3(_2770, _2771, _2772))) + _2784;
                                float _3756 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2820 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
                                float _2824 = (0.5 / (((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) + 9.9999999392252902907785028219223e-09) + _2820)) * _2820;
                                float _3767 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2831 = (_2800 * _2777) * (((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 3.1415927410125732421875) / ((_2790 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2801 * _2644.z;
                                frontier_phi_85_pred_1 = _2801 * _2644.y;
                                frontier_phi_85_pred_2 = _2801 * _2644.x;
                                frontier_phi_85_pred_3 = _2831 * _2656.z;
                                frontier_phi_85_pred_4 = _2831 * _2656.y;
                                frontier_phi_85_pred_5 = _2831 * _2656.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2840 = frontier_phi_85_pred;
                            _2839 = frontier_phi_85_pred_1;
                            _2838 = frontier_phi_85_pred_2;
                            _2837 = frontier_phi_85_pred_3;
                            _2836 = frontier_phi_85_pred_4;
                            _2835 = frontier_phi_85_pred_5;
                            _2586 = _2838 + _2599;
                            _2587 = _2839 + _2600;
                            _2588 = _2840 + _2601;
                            _2583 = _2835 + _2596;
                            _2584 = _2836 + _2597;
                            _2585 = _2837 + _2598;
                            if (_2603 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2603;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2588;
                        frontier_phi_79_pred_1 = _2587;
                        frontier_phi_79_pred_2 = _2586;
                        frontier_phi_79_pred_3 = _2585;
                        frontier_phi_79_pred_4 = _2584;
                        frontier_phi_79_pred_5 = _2583;
                    }
                    _2278 = frontier_phi_79_pred;
                    _2276 = frontier_phi_79_pred_1;
                    _2274 = frontier_phi_79_pred_2;
                    _2272 = frontier_phi_79_pred_3;
                    _2270 = frontier_phi_79_pred_4;
                    _2268 = frontier_phi_79_pred_5;
                    uint _2431 = _2430 + 1u;
                    if (_2431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2424 = _2268;
                        _2425 = _2270;
                        _2426 = _2272;
                        _2427 = _2274;
                        _2428 = _2276;
                        _2429 = _2278;
                        _2430 = _2431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2274;
                frontier_phi_60_61_ladder_1 = _2278;
                frontier_phi_60_61_ladder_2 = _2276;
                frontier_phi_60_61_ladder_3 = _2272;
                frontier_phi_60_61_ladder_4 = _2270;
                frontier_phi_60_61_ladder_5 = _2268;
            }
            else
            {
                frontier_phi_60_61_ladder = _2142;
                frontier_phi_60_61_ladder_1 = _2146;
                frontier_phi_60_61_ladder_2 = _2144;
                frontier_phi_60_61_ladder_3 = _2140;
                frontier_phi_60_61_ladder_4 = _2138;
                frontier_phi_60_61_ladder_5 = _2136;
            }
            _2267 = frontier_phi_60_61_ladder_5;
            _2269 = frontier_phi_60_61_ladder_4;
            _2271 = frontier_phi_60_61_ladder_3;
            _2273 = frontier_phi_60_61_ladder;
            _2275 = frontier_phi_60_61_ladder_2;
            _2277 = frontier_phi_60_61_ladder_1;
        }
        float _2282 = isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0));
        _2013 = (_2282 * _2273) + _1577;
        _2015 = (_2282 * _2275) + _1579;
        _2017 = (_2282 * _2277) + _1581;
        _2019 = ((_2267 * 0.039999999105930328369140625) * _2282) + _1826;
        _2021 = ((_2269 * 0.039999999105930328369140625) * _2282) + _1828;
        _2023 = ((_2271 * 0.039999999105930328369140625) * _2282) + _1830;
    }
    else
    {
        _2013 = _1577;
        _2015 = _1579;
        _2017 = _1581;
        _2019 = _1826;
        _2021 = _1828;
        _2023 = _1830;
    }
    uint _2029 = _379 + uint(cbMatDynParam._m0[0u].w);
    float _2037 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _227.x) * cbInstanceData._m0[_2029].x;
    float _2040 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _227.y) * cbInstanceData._m0[_2029].y;
    float _2043 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _227.z) * cbInstanceData._m0[_2029].z;
    float _3783 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3794 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3805 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _2060 = (((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_2013 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _403))) + ((_2019 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1214)) * cbPerFrame._m0[3u].x)) + _2037;
    float _2062 = (_2040 + ((_2021 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1214)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_2015 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _403)));
    float _2064 = (_2043 + ((_2023 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1214)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_2017 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _403)));
    float _2065 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2066 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2073 = cbMtdParam._m0[2u].x * _2037;
    float _2074 = cbMtdParam._m0[2u].y * _2040;
    float _2075 = cbMtdParam._m0[2u].z * _2043;
    float _3831 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2077 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    uint _2078 = _377 + 6u;
    float _2086 = _337 / cbSceneParam._m0[86u].x;
    float _2087 = _338 / cbSceneParam._m0[86u].y;
    vec4 _2101 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, (log2((isnan(cbSceneParam._m0[77u].w) ? _258 : (isnan(_258) ? cbSceneParam._m0[77u].w : min(_258, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2103 = _2101.x;
    float _2104 = _2101.y;
    float _2105 = _2101.z;
    float _2106 = _2101.w;
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    if (_258 > cbSceneParam._m0[78u].w)
    {
        float _2161 = isnan(_258) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _258 : min(cbSceneParam._m0[80u].w, _258));
        float _2162 = _2161 / _258;
        float _2173 = _2162 * _309;
        float _2174 = _310 * _2162;
        float _2175 = (-0.0) - _2174;
        float _2176 = _2162 * _311;
        float _2178 = (cbSceneParam._m0[77u].w * _2175) / _2161;
        float _2179 = _2178 + cbSceneParam._m0[79u].w;
        float _2180 = cbSceneParam._m0[79u].w - _2174;
        float _2186 = sqrt(((_2173 * _2173) + (_2174 * _2174)) + (_2176 * _2176));
        float _2189 = (1.0 - (cbSceneParam._m0[77u].w / _2161)) * _2186;
        float _2194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2381;
        if (abs((_2175 - _2178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2381 = ((((_2179 > 0.0) ? exp2(_2194 * _2179) : (2.0 - exp2(_2196 * _2179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2189;
        }
        else
        {
            float _2325 = 1.0 / cbSceneParam._m0[80u].x;
            float _2326 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : max(_2179, _2180));
            float _2327 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : min(_2179, _2180));
            float _2336 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : min(_2326, 0.0));
            float _2337 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : min(_2327, 0.0));
            _2381 = ((abs(_2186 / _2175) * cbSceneParam._m0[80u].y) * ((((_2336 - _2337) * 2.0) - ((exp2(_2194 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)))) - exp2(_2194 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0))))) * _2325)) - ((exp2(_2196 * _2336) - exp2(_2196 * _2337)) * _2325))) + (_2189 * cbSceneParam._m0[80u].z);
        }
        vec4 _2383 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, 1.0), 0.0);
        float _2392 = exp2((_2381 * (-1.44269502162933349609375)) * (1.0 - _2383.w));
        float _2393 = log2(_2392);
        float _2409 = log2(_2106);
        _2198 = (exp2(_2409 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2393 * cbSceneParam._m0[78u].x)) * _2383.x) / cbSceneParam._m0[78u].x)) + _2103;
        _2200 = (exp2(_2409 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2393 * cbSceneParam._m0[78u].y)) * _2383.y) / cbSceneParam._m0[78u].y)) + _2104;
        _2202 = (exp2(_2409 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2393 * cbSceneParam._m0[78u].z)) * _2383.z) / cbSceneParam._m0[78u].z)) + _2105;
        _2204 = _2392 * _2106;
    }
    else
    {
        _2198 = _2103;
        _2200 = _2104;
        _2202 = _2105;
        _2204 = _2106;
    }
    bool _2419;
    vec4 _2214;
    vec4 _2237;
    float _2239;
    float _2243;
    float _2244;
    float _2245;
    float _2248;
    float _2251;
    float _2254;
    float _2255;
    bool _2266;
    for (;;)
    {
        _2214 = cbMatDynParam._m0[0u];
        float _2216 = roundEven(_2214.y);
        bool _2217 = _2216 == 3.0;
        float _2219 = log2(_2204);
        float _2223 = exp2(_2219 * cbSceneParam._m0[78u].x);
        float _2224 = exp2(_2219 * cbSceneParam._m0[78u].y);
        float _2225 = exp2(_2219 * cbSceneParam._m0[78u].z);
        float _2226 = _2223 * _2065;
        float _2227 = _2224 * _2066;
        float _2228 = _2225 * _2067;
        float _2235 = _325 + (-0.5);
        _2237 = cbMtdParam._m0[1u];
        _2239 = _2237.y * _2235;
        float _2242 = (_2216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2243 = _2242 * (_2217 ? _2226 : (_2226 + (cbSceneParam._m0[72u].w * _2198)));
        _2244 = _2242 * (_2217 ? _2227 : (_2227 + (cbSceneParam._m0[72u].w * _2200)));
        _2245 = _2242 * (_2217 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2202)));
        _2248 = ((_2073 * _2077) * _2223) * _2242;
        _2251 = ((_2074 * _2077) * _2224) * _2242;
        _2254 = ((_2075 * _2077) * _2225) * _2242;
        _2255 = _2235 * 0.999000012874603271484375;
        _2266 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2266)
        {
            if ((cbInstanceData._m0[_377 + 7u].x + _2255) < 0.5)
            {
                _2419 = true;
                break;
            }
        }
        uint _2360 = _379 + uint(_2214.w);
        if ((cbInstanceData._m0[_2360].w < 1.0) && ((cbInstanceData._m0[_2360].w + _2255) < 0.5))
        {
            _2419 = true;
            break;
        }
        if ((_2239 + 1.0) < _2237.x)
        {
            _2419 = true;
            break;
        }
        _2419 = false;
        break;
    }
    float _2574;
    if (_2419)
    {
        discard_state = true;
        _2574 = 0.0;
    }
    else
    {
        _2574 = cbInstanceData._m0[_2078].w;
    }
    SV_Target.x = _2243;
    SV_Target.y = _2244;
    SV_Target.z = _2245;
    SV_Target.w = _2574;
    SV_Target_1.x = _2248;
    SV_Target_1.y = _2251;
    SV_Target_1.z = _2254;
    SV_Target_1.w = cbInstanceData._m0[_2078].w;
    discard_exit();
}


