#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _780;
float _3272;
float _3273;
float _3274;
float _3275;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = _201.x * cbMtdParam._m0[9u].x;
    float _208 = _201.y * cbMtdParam._m0[9u].y;
    float _209 = _201.z * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(M_A_M0_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _240 = _239 * _179;
    float _241 = _239 * _180;
    float _242 = _239 * _181;
    float _3284 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3295 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3306 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    vec4 _327 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _329 = _327.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _459 = sqrt(((_313 * _313) + (_314 * _314)) + (_315 * _315));
        float _465 = (cbMatDynParam._m0[5u].x * _459) + cbMatDynParam._m0[5u].y;
        float _3317 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        float _466 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _470 = (cbMatDynParam._m0[5u].z * _459) + cbMatDynParam._m0[5u].w;
        float _3328 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) - _466)) + _466) < ((_329 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _341 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _342 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _362 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _365 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _368 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _381 = uint(roundEven(NORMAL.w)) * 13u;
    uint _383 = _381 + 9u;
    uint _384 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _390 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_384].x;
    float _391 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_384].y;
    float _392 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_384].z;
    float _3339 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    vec4 _404 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _341, cbSceneParam._m0[86u].y * _342));
    float _407 = _404.x * TEXCOORD.z;
    float _408 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _411 = _408 * 2.0;
    float _416 = (_411 * _240) - _320;
    float _417 = (_411 * _241) - _321;
    float _418 = (_411 * _242) - _322;
    float _440 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _779;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _504 = fma(_448, cbModelParam._m0[26u].z, fma(_444, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _440));
        float _508 = fma(_448, cbModelParam._m0[27u].z, fma(_444, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _440));
        float _512 = fma(_448, cbModelParam._m0[28u].z, fma(_444, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _440));
        float _537 = _440 + _240;
        float _538 = _444 + _241;
        float _539 = _448 + _242;
        float _549 = fma(_539, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537)) - _504;
        float _550 = fma(_539, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537)) - _508;
        float _551 = fma(_539, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537)) - _512;
        float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
        float _568 = ((_555 * _549) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_504 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_555 * _550) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_508 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_555 * _551) / cbModelParam._m0[34u].z) + ((((((_512 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        float _607 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_573.x + (-0.5));
        float _609 = _607 * (_573.y + (-0.5));
        float _610 = _607 * (_573.z + (-0.5));
        float _617 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _618 = _617 * (_580.x + (-0.5));
        float _619 = _617 * (_580.y + (-0.5));
        float _620 = _617 * (_580.z + (-0.5));
        float _627 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_587.x + (-0.5));
        float _629 = _627 * (_587.y + (-0.5));
        float _630 = _627 * (_587.z + (-0.5));
        float _637 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_594.x + (-0.5));
        float _639 = _637 * (_594.y + (-0.5));
        float _640 = _637 * (_594.z + (-0.5));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = _608 * 0.5;
        float _645 = _618 * 0.5;
        float _646 = _628 * 0.5;
        float _647 = dot(vec3(_644, _645, _646), vec3(_644, _645, _646));
        float _652 = (_647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_647);
        float _661 = (dot(vec3(_240, _241, _242), vec3(_652 * _644, _652 * _645, _652 * _646)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _671 = sqrt(((_645 * _645) + (_644 * _644)) + (_646 * _646)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3409 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_673 + 1.0))) + _678) * _641;
        float _688 = _609 * 0.5;
        float _689 = _619 * 0.5;
        float _690 = _629 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_240, _241, _242), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3442 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_715 + 1.0))) + _720) * _642;
        float _730 = _610 * 0.5;
        float _731 = _620 * 0.5;
        float _732 = _630 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_240, _241, _242), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3475 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_757 + 1.0))) + _762) * _643;
        _779 = _610;
        _781 = _609;
        _782 = _608;
        _783 = _620;
        _784 = _619;
        _785 = _618;
        _786 = _630;
        _787 = _629;
        _788 = _628;
        _789 = _643;
        _790 = _642;
        _791 = _641;
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
    }
    else
    {
        _779 = _780;
        _781 = _780;
        _782 = _780;
        _783 = _780;
        _784 = _780;
        _785 = _780;
        _786 = _780;
        _787 = _780;
        _788 = _780;
        _789 = _780;
        _790 = _780;
        _791 = _780;
        _792 = 0.0;
        _793 = 0.0;
        _794 = 0.0;
    }
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _823 = fma(_448, cbModelParam._m0[30u].z, fma(_444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _440));
        float _827 = fma(_448, cbModelParam._m0[31u].z, fma(_444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _440));
        float _831 = fma(_448, cbModelParam._m0[32u].z, fma(_444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _440));
        float _854 = _440 + _240;
        float _855 = _444 + _241;
        float _856 = _448 + _242;
        float _866 = fma(_856, cbModelParam._m0[30u].z, fma(_855, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854)) - _823;
        float _867 = fma(_856, cbModelParam._m0[31u].z, fma(_855, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854)) - _827;
        float _868 = fma(_856, cbModelParam._m0[32u].z, fma(_855, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854)) - _831;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_823 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_827 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[35u].z) + ((((((_831 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _922 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_889.x + (-0.5));
        float _924 = _922 * (_889.y + (-0.5));
        float _925 = _922 * (_889.z + (-0.5));
        float _932 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_896.x + (-0.5));
        float _934 = _932 * (_896.y + (-0.5));
        float _935 = _932 * (_896.z + (-0.5));
        float _942 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_903.x + (-0.5));
        float _944 = _942 * (_903.y + (-0.5));
        float _945 = _942 * (_903.z + (-0.5));
        float _952 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_910.x + (-0.5));
        float _954 = _952 * (_910.y + (-0.5));
        float _955 = _952 * (_910.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_240, _241, _242), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3538 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_986 + 1.0))) + _991) * _956;
        float _1001 = _924 * 0.5;
        float _1002 = _934 * 0.5;
        float _1003 = _944 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_240, _241, _242), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3571 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1028 + 1.0))) + _1033) * _957;
        float _1043 = _925 * 0.5;
        float _1044 = _935 * 0.5;
        float _1045 = _945 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_240, _241, _242), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3604 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1070 + 1.0))) + _1075) * _958;
        _1092 = _925;
        _1093 = _924;
        _1094 = _923;
        _1095 = _935;
        _1096 = _934;
        _1097 = _933;
        _1098 = _945;
        _1099 = _944;
        _1100 = _943;
        _1101 = _958;
        _1102 = _957;
        _1103 = _956;
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _780;
        _1093 = _780;
        _1094 = _780;
        _1095 = _780;
        _1096 = _780;
        _1097 = _780;
        _1098 = _780;
        _1099 = _780;
        _1100 = _780;
        _1101 = _780;
        _1102 = _780;
        _1103 = _780;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _794)) + _794;
    float _1139 = fma(_1118, cbSceneParam._m0[89u].z, fma(_1117, cbSceneParam._m0[89u].y, _1116 * cbSceneParam._m0[89u].x));
    float _1142 = fma(_1118, cbSceneParam._m0[90u].z, fma(_1117, cbSceneParam._m0[90u].y, _1116 * cbSceneParam._m0[90u].x));
    float _1145 = fma(_1118, cbSceneParam._m0[91u].z, fma(_1117, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1116));
    float _1160 = _416 * 0.5;
    float _1161 = _417 * 0.5;
    float _1162 = _418 * 0.5;
    float _1163 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1166 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1169 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1203;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1176 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_779, _783, _786, _789));
        float _1180 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_781, _784, _787, _790));
        float _1184 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_782, _785, _788, _791));
        float _1191 = dot(vec4(cbModelParam._m0[39u]), vec4(_1160, _1161, _1162, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1191) ? 0.0 : (isnan(0.0) ? _1191 : max(0.0, _1191))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1214;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1205 = dot(vec4(cbModelParam._m0[40u]), vec4(_1160, _1161, _1162, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1218 = (_1214 * cbModelParam._m0[1u].x) + (_1203 * (1.0 - cbModelParam._m0[1u].x));
    float _1227 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1309;
    float _1311;
    float _1313;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1276 = fma(_448, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440)) + cbModelParam._m0[13u].w;
        float _1280 = fma(_448, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440)) + cbModelParam._m0[14u].w;
        float _1284 = fma(_448, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440)) + cbModelParam._m0[15u].w;
        float _1287 = fma(_418, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _416));
        float _1290 = fma(_418, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _416));
        float _1293 = fma(_418, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _416));
        float _1319;
        if (_1287 > 0.0)
        {
            _1319 = abs((1.0 - _1276) / _1287);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1276 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1319 = frontier_phi_19_17_ladder;
        }
        float _1493;
        if (_1290 > 0.0)
        {
            _1493 = abs((1.0 - _1280) / _1290);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1280 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1493 = frontier_phi_28_24_ladder;
        }
        float _1790;
        if (_1293 > 0.0)
        {
            _1790 = abs((1.0 - _1284) / _1293);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1284 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1790 = frontier_phi_40_35_ladder;
        }
        float _1792 = isnan(_1493) ? _1319 : (isnan(_1319) ? _1493 : min(_1319, _1493));
        float _1793 = isnan(_1790) ? _1792 : (isnan(_1792) ? _1790 : min(_1792, _1790));
        float _1797 = (_1793 * _1287) + _1276;
        float _1798 = (_1793 * _1290) + _1280;
        float _1799 = (_1793 * _1293) + _1284;
        float _1800 = _1793 * 9.9999997473787516355514526367188e-05;
        float _1802 = (-1.0) - _1800;
        float _1804 = _1800 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1799 > _1804) || ((_1799 < _1802) || ((_1798 > _1804) || ((_1798 < _1802) || ((_1797 < _1802) || (_1797 > _1804))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1799, cbModelParam._m0[9u].z, fma(_1798, cbModelParam._m0[9u].y, _1797 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1799, cbModelParam._m0[10u].z, fma(_1798, cbModelParam._m0[10u].y, _1797 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1799, cbModelParam._m0[11u].z, fma(_1798, cbModelParam._m0[11u].y, _1797 * cbModelParam._m0[11u].x))), _1227);
            frontier_phi_18_40_ladder = _1944.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1944.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1944.x * cbModelParam._m0[1u].y;
        }
        _1309 = frontier_phi_18_40_ladder_2;
        _1311 = frontier_phi_18_40_ladder_1;
        _1313 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_416, _417, _418), _1227);
        _1309 = _1297.x * cbModelParam._m0[1u].y;
        _1311 = _1297.y * cbModelParam._m0[1u].y;
        _1313 = _1297.z * cbModelParam._m0[1u].y;
    }
    float _1316 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1373 = fma(_448, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440)) + cbModelParam._m0[21u].w;
        float _1377 = fma(_448, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440)) + cbModelParam._m0[22u].w;
        float _1381 = fma(_448, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440)) + cbModelParam._m0[23u].w;
        float _1384 = fma(_418, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _416));
        float _1387 = fma(_418, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _416));
        float _1390 = fma(_418, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _416));
        float _1498;
        if (_1384 > 0.0)
        {
            _1498 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1498 = frontier_phi_30_26_ladder;
        }
        float _1817;
        if (_1387 > 0.0)
        {
            _1817 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1817 = frontier_phi_42_37_ladder;
        }
        float _2090;
        if (_1390 > 0.0)
        {
            _2090 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2090 = frontier_phi_52_49_ladder;
        }
        float _2092 = isnan(_1817) ? _1498 : (isnan(_1498) ? _1817 : min(_1498, _1817));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1384) + _1373;
        float _2098 = (_2093 * _1387) + _1377;
        float _2099 = (_2093 * _1390) + _1381;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1316);
            frontier_phi_27_52_ladder = _2190.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2190.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2190.x * cbModelParam._m0[1u].z;
        }
        _1409 = frontier_phi_27_52_ladder_2;
        _1411 = frontier_phi_27_52_ladder_1;
        _1413 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_416, _417, _418), _1316);
        _1409 = _1393.x * cbModelParam._m0[1u].z;
        _1411 = _1393.y * cbModelParam._m0[1u].z;
        _1413 = _1393.z * cbModelParam._m0[1u].z;
    }
    float _1425 = _407 * 0.01200000010430812835693359375;
    float _1427 = _1425 * ((cbModelParam._m0[1u].w * (_1409 - _1309)) + _1309);
    float _1428 = _1425 * ((cbModelParam._m0[1u].w * (_1411 - _1311)) + _1311);
    float _1429 = _1425 * ((cbModelParam._m0[1u].w * (_1413 - _1313)) + _1313);
    float _1432 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, _1427 * cbSceneParam._m0[91u].x));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1485 = _1472 / _1484;
    float _1486 = _1476 / _1484;
    float _1487 = _1480 / _1484;
    float _1634;
    float _1635;
    float _1636;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1514 = ((uint(_1487 > cbSceneParam._m0[59u].y) + uint(_1487 > cbSceneParam._m0[59u].x)) + uint(_1487 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1515 = _1514 + 43u;
        uint _1523 = _1514 + 44u;
        uint _1531 = _1514 + 45u;
        uint _1539 = _1514 + 46u;
        float _1550 = fma(_1484, cbSceneParam._m0[_1515].w, fma(_1480, cbSceneParam._m0[_1515].z, fma(_1476, cbSceneParam._m0[_1515].y, _1472 * cbSceneParam._m0[_1515].x)));
        float _1554 = fma(_1484, cbSceneParam._m0[_1523].w, fma(_1480, cbSceneParam._m0[_1523].z, fma(_1476, cbSceneParam._m0[_1523].y, _1472 * cbSceneParam._m0[_1523].x)));
        float _1562 = fma(_1484, cbSceneParam._m0[_1539].w, fma(_1480, cbSceneParam._m0[_1539].z, fma(_1476, cbSceneParam._m0[_1539].y, _1472 * cbSceneParam._m0[_1539].x)));
        float _1567 = cbSceneParam._m0[33u].z * _1562;
        float _1569 = cbSceneParam._m0[33u].w * _1562;
        float _1572 = fma(_1484, cbSceneParam._m0[_1531].w, fma(_1480, cbSceneParam._m0[_1531].z, fma(_1476, cbSceneParam._m0[_1531].y, _1472 * cbSceneParam._m0[_1531].x))) / _1562;
        float _1620 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
        float _3730 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1627 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 + _1550) / _1562, (_1569 + _1554) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 + _1550) / _1562, (_1554 - _1567) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1567) / _1562, (_1554 - _1569) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1569) / _1562, (_1567 + _1554) / _1562), _1572), 0.0)).x), vec4(0.25)));
        _1634 = 1.0 - (_1627 * cbSceneParam._m0[34u].x);
        _1635 = 1.0 - (_1627 * cbSceneParam._m0[34u].y);
        _1636 = 1.0 - (_1627 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1634 = 1.0;
        _1635 = 1.0;
        _1636 = 1.0;
    }
    float _1700;
    float _1702;
    float _1704;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1688 = fma(_1484, cbSceneParam._m0[63u].w, fma(_1480, cbSceneParam._m0[63u].z, fma(_1476, cbSceneParam._m0[63u].y, _1472 * cbSceneParam._m0[63u].x)));
        float _1689 = fma(_1484, cbSceneParam._m0[60u].w, fma(_1480, cbSceneParam._m0[60u].z, fma(_1476, cbSceneParam._m0[60u].y, _1472 * cbSceneParam._m0[60u].x))) / _1688;
        float _1690 = fma(_1484, cbSceneParam._m0[61u].w, fma(_1480, cbSceneParam._m0[61u].z, fma(_1476, cbSceneParam._m0[61u].y, _1472 * cbSceneParam._m0[61u].x))) / _1688;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1689 >= cbSceneParam._m0[64u].x) && (_1690 >= cbSceneParam._m0[64u].y)) && (_1689 <= cbSceneParam._m0[64u].z)) && (_1690 <= cbSceneParam._m0[64u].w))
        {
            float _1830 = fma(_1484, cbSceneParam._m0[62u].w, fma(_1480, cbSceneParam._m0[62u].z, fma(_1476, cbSceneParam._m0[62u].y, _1472 * cbSceneParam._m0[62u].x))) / _1688;
            float _1834 = isnan(cbSceneParam._m0[41u].w) ? _1830 : (isnan(_1830) ? cbSceneParam._m0[41u].w : max(_1830, cbSceneParam._m0[41u].w));
            float _1877 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
            float _3746 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
            float _1884 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1689, cbSceneParam._m0[33u].w + _1690), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1689, _1690 - cbSceneParam._m0[33u].z), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].z, _1690 - cbSceneParam._m0[33u].w), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1690), _1834), 0.0)).x), vec4(0.25)));
            float _1888 = 1.0 - (_1884 * cbSceneParam._m0[34u].x);
            float _1889 = 1.0 - (_1884 * cbSceneParam._m0[34u].y);
            float _1890 = 1.0 - (_1884 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1889) ? _1635 : (isnan(_1635) ? _1889 : min(_1635, _1889));
            frontier_phi_39_38_ladder_1 = isnan(_1888) ? _1634 : (isnan(_1634) ? _1888 : min(_1634, _1888));
            frontier_phi_39_38_ladder_2 = isnan(_1890) ? _1636 : (isnan(_1636) ? _1890 : min(_1636, _1890));
        }
        else
        {
            frontier_phi_39_38_ladder = _1635;
            frontier_phi_39_38_ladder_1 = _1634;
            frontier_phi_39_38_ladder_2 = _1636;
        }
        _1700 = frontier_phi_39_38_ladder_1;
        _1702 = frontier_phi_39_38_ladder;
        _1704 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1700 = _1634;
        _1702 = _1635;
        _1704 = _1636;
    }
    uvec4 _1709 = floatBitsToUint(cbInstanceData._m0[_381 + 5u]);
    uint _1711 = _1709.x * 14u;
    uint _1712 = _1711 + 13u;
    float _1719 = _407 + (-1.0);
    float _1725 = (cbLight._m0[_1712].x * _1719) + 1.0;
    float _1726 = (cbLight._m0[_1712].y * _1719) + 1.0;
    float _1727 = (cbLight._m0[_1712].z * _1719) + 1.0;
    float _1728 = (cbLight._m0[_1712].w * _1719) + 1.0;
    uint _1729 = _1711 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1711 + 4u;
    float _1749 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1753 = _1711 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_240, _241, _242));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_240, _241, _242));
    float _3782 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3793 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1729].x * _1735) * _1774) + (((cbLight._m0[_1739].x * _1700) * _1749) * _1772);
    float _1782 = ((_1735 * cbLight._m0[_1729].y) * _1774) + (((cbLight._m0[_1739].y * _1702) * _1749) * _1772);
    float _1783 = ((_1735 * cbLight._m0[_1729].z) * _1774) + (((cbLight._m0[_1739].z * _1704) * _1749) * _1772);
    uvec4 _1787 = floatBitsToUint(cbLight._m0[_1711 + 12u]);
    bool _1789 = _1787.x == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1789)
    {
        _1891 = _1781;
        _1893 = _1782;
        _1895 = _1783;
    }
    else
    {
        uint _1899 = _1711 + 6u;
        float _1915 = (dot(vec3(cbLight._m0[_1711 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _3804 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1918 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1891 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1781;
        _1893 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1782;
        _1895 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1783;
    }
    bool _1898 = _1787.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1898)
    {
        _1953 = _1891;
        _1955 = _1893;
        _1957 = _1895;
    }
    else
    {
        uint _2061 = _1711 + 7u;
        float _2077 = (dot(vec3(cbLight._m0[_1711 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _3820 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _2080 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1953 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _1891;
        _1955 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _1893;
        _1957 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _1895;
    }
    uint _1959 = _1711 + 8u;
    float _1965 = cbLight._m0[_1711].x + _320;
    float _1966 = cbLight._m0[_1711].y + _321;
    float _1967 = cbLight._m0[_1711].z + _322;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1975 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1711].xyz));
    float _3836 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _1979 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1965 * _1971, _1966 * _1971, _1967 * _1971));
    float _3858 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = (0.5 / ((_1978 + 9.9999999392252902907785028219223e-09) + _1979)) * _1978;
    float _3869 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.31831014156341552734375;
    uint _2013 = _1711 + 9u;
    float _2019 = cbLight._m0[_1753].x + _320;
    float _2020 = cbLight._m0[_1753].y + _321;
    float _2021 = cbLight._m0[_1753].z + _322;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2029 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1753].xyz));
    float _3880 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_2019 * _2025, _2020 * _2025, _2021 * _2025));
    float _3891 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = (0.5 / ((_2032 + 9.9999999392252902907785028219223e-09) + _1979)) * _2032;
    float _3902 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.31831014156341552734375;
    float _2058 = (((_2042 * cbLight._m0[_2013].x) * _2048) * _1735) + ((((cbLight._m0[_1959].x * _1700) * _1991) * _1999) * _1749);
    float _2059 = (((_2042 * cbLight._m0[_2013].y) * _2048) * _1735) + ((((cbLight._m0[_1959].y * _1702) * _1991) * _1999) * _1749);
    float _2060 = (((_2042 * cbLight._m0[_2013].z) * _2048) * _1735) + ((((cbLight._m0[_1959].z * _1704) * _1991) * _1999) * _1749);
    float _2116;
    float _2118;
    float _2120;
    if (_1789)
    {
        _2116 = _2058;
        _2118 = _2059;
        _2120 = _2060;
    }
    else
    {
        uint _2122 = _1711 + 10u;
        uint _2128 = _1711 + 2u;
        float _2134 = cbLight._m0[_2128].x + _320;
        float _2135 = cbLight._m0[_2128].y + _321;
        float _2136 = cbLight._m0[_2128].z + _322;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2144 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2128].xyz));
        float _3913 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2134 * _2140, _2135 * _2140, _2136 * _2140));
        float _3924 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2161 = (0.5 / ((_2147 + 9.9999999392252902907785028219223e-09) + _1979)) * _2147;
        float _3935 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.31831014156341552734375;
        float _2164 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2116 = (((_2157 * cbLight._m0[_2122].x) * _2163) * _2164) + _2058;
        _2118 = (((_2157 * cbLight._m0[_2122].y) * _2163) * _2164) + _2059;
        _2120 = (((_2157 * cbLight._m0[_2122].z) * _2163) * _2164) + _2060;
    }
    float _2195;
    float _2197;
    float _2199;
    if (_1898)
    {
        _2195 = _2116;
        _2197 = _2118;
        _2199 = _2120;
    }
    else
    {
        uint _2206 = _1711 + 11u;
        uint _2212 = _1711 + 3u;
        float _2218 = cbLight._m0[_2212].x + _320;
        float _2219 = cbLight._m0[_2212].y + _321;
        float _2220 = cbLight._m0[_2212].z + _322;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2228 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2212].xyz));
        float _3951 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2218 * _2224, _2219 * _2224, _2220 * _2224));
        float _3962 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2241 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2245 = (0.5 / ((_2231 + 9.9999999392252902907785028219223e-09) + _1979)) * _2231;
        float _3973 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.31831014156341552734375;
        float _2248 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2195 = (((_2241 * cbLight._m0[_2206].x) * _2247) * _2248) + _2116;
        _2197 = (((_2241 * cbLight._m0[_2206].y) * _2247) * _2248) + _2118;
        _2199 = (((_2241 * cbLight._m0[_2206].z) * _2247) * _2248) + _2120;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1709.y == 0u)
    {
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _342) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _341) / _2270)));
        float _2291 = (log2(_1487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2591)
                {
                    frontier_phi_73_pred = _2580;
                    frontier_phi_73_pred_1 = _2579;
                    frontier_phi_73_pred_2 = _2578;
                    frontier_phi_73_pred_3 = _2577;
                    frontier_phi_73_pred_4 = _2576;
                    frontier_phi_73_pred_5 = _2575;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2590;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2581 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _1485;
                        float _2787 = _2746.y - _1486;
                        float _2788 = _2746.z - _1487;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _3999 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * dot(vec3(_362, _365, _368), vec3(_2792 * _2786, _2792 * _2787, _2792 * _2788))) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _1485;
                        float _2822 = (-0.0) - _1486;
                        float _2823 = (-0.0) - _1487;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2831 = dot(vec3(_362, _365, _368), vec3(_2827 * _2821, _2827 * _2822, _2827 * _2823));
                        float _4015 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _4026 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2835 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2839 = (0.5 / (((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) + 9.9999999392252902907785028219223e-09) + _2835)) * _2835;
                        float _4037 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2848 = (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 3.1415927410125732421875) / ((_2813 * 2.1991131305694580078125) + 3.141590118408203125)) * _2802;
                        _2650 = (_2817 * _2765.x) + _2723;
                        _2651 = (_2817 * _2765.y) + _2724;
                        _2652 = (_2817 * _2765.z) + _2725;
                        _2647 = (_2848 * _2782.x) + _2720;
                        _2648 = (_2848 * _2782.y) + _2721;
                        _2649 = (_2848 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_73_pred = _2652;
                    frontier_phi_73_pred_1 = _2651;
                    frontier_phi_73_pred_2 = _2650;
                    frontier_phi_73_pred_3 = _2649;
                    frontier_phi_73_pred_4 = _2648;
                    frontier_phi_73_pred_5 = _2647;
                }
                _2426 = frontier_phi_73_pred;
                _2424 = frontier_phi_73_pred_1;
                _2422 = frontier_phi_73_pred_2;
                _2420 = frontier_phi_73_pred_3;
                _2418 = frontier_phi_73_pred_4;
                _2416 = frontier_phi_73_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2416;
                    _2576 = _2418;
                    _2577 = _2420;
                    _2578 = _2422;
                    _2579 = _2424;
                    _2580 = _2426;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2432) & _2301) == 0u)
        {
            _2546 = _2415;
            _2548 = _2417;
            _2550 = _2419;
            _2552 = _2421;
            _2554 = _2423;
            _2556 = _2425;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2703 = _2415;
                float _2704 = _2417;
                float _2705 = _2419;
                float _2706 = _2421;
                float _2707 = _2423;
                float _2708 = _2425;
                uint _2709 = _2432;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2719)
                    {
                        frontier_phi_84_pred = _2707;
                        frontier_phi_84_pred_1 = _2706;
                        frontier_phi_84_pred_2 = _2705;
                        frontier_phi_84_pred_3 = _2704;
                        frontier_phi_84_pred_4 = _2703;
                        frontier_phi_84_pred_5 = _2708;
                    }
                    else
                    {
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _2875 = _2703;
                        float _2876 = _2704;
                        float _2877 = _2705;
                        float _2878 = _2706;
                        float _2879 = _2707;
                        float _2880 = _2708;
                        uint _2881 = _2718;
                        uint _2882;
                        vec4 _2907;
                        float _2908;
                        vec4 _2923;
                        vec3 _2935;
                        vec4 _2951;
                        vec4 _2967;
                        float _3014;
                        bool _3015;
                        for (;;)
                        {
                            uint _2892 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2881));
                            _2882 = (_2881 + 4294967295u) & _2881;
                            uint _2894 = _2892 * 40u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2908 = _2907.w;
                            uint _2910 = (_2892 * 40u) + 4u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2892 * 40u) + 8u;
                            _2935 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x));
                            uint _2938 = (_2892 * 40u) + 16u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2892 * 40u) + 20u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2892 * 40u) + 24u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2989 = (_2892 * 40u) + 28u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3014 = fma(_1487, _3002.z, fma(_1486, _3002.y, _3002.x * _1485)) + _3002.w;
                            _3015 = !((fma(_1487, _2983.z, fma(_1486, _2983.y, _2983.x * _1485)) + _2983.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3015)
                            {
                                float _3042 = _2907.x - _1485;
                                float _3043 = _2907.y - _1486;
                                float _3044 = _2907.z - _1487;
                                float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                                float _3048 = inversesqrt(_3045);
                                float _3049 = _3048 * _3042;
                                float _3050 = _3048 * _3043;
                                float _3051 = _3048 * _3044;
                                float _3055 = 1.0 - (_3045 / (_2908 * _2908));
                                float _4048 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3060 = sqrt(_3045) * _2923.w;
                                float _3062 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                                float _3063 = _3062 * _3062;
                                float _3064 = 1.0 - _3063;
                                float _3066 = (_3064 * dot(vec3(_3049, _3050, _3051), vec3(_362, _365, _368))) + _3063;
                                float _3069 = _3060 * _3060;
                                float _3073 = (fma(_1487, _2951.z, fma(_1486, _2951.y, _2951.x * _1485)) + _2951.w) / _3014;
                                float _3074 = (fma(_1487, _2967.z, fma(_1486, _2967.y, _2967.x * _1485)) + _2967.w) / _3014;
                                float _3078 = 1.0 - dot(vec2(_3073, _3074), vec2(_3073, _3074));
                                float _4064 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3080 = _3079 * (((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3056) / ((_3069 * 0.699999988079071044921875) + 1.0));
                                float _3090 = dot(vec3(_362, _365, _368), vec3((-0.0) - (_1485 * _2571), (-0.0) - (_1486 * _2571), (-0.0) - (_1487 * _2571)));
                                float _4075 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3098 = (_3064 * dot(vec3(_362, _365, _368), vec3(_3049, _3050, _3051))) + _3063;
                                float _4086 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3103 = (0.5 / (((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) + 9.9999999392252902907785028219223e-09) + _3099)) * _3099;
                                float _4097 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3110 = (_3079 * _3056) * (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 3.1415927410125732421875) / ((_3069 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3080 * _2923.y;
                                frontier_phi_90_pred_1 = _3080 * _2923.x;
                                frontier_phi_90_pred_2 = _3110 * _2935.z;
                                frontier_phi_90_pred_3 = _3110 * _2935.y;
                                frontier_phi_90_pred_4 = _3110 * _2935.x;
                                frontier_phi_90_pred_5 = _3080 * _2923.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3118 = frontier_phi_90_pred;
                            _3117 = frontier_phi_90_pred_1;
                            _3116 = frontier_phi_90_pred_2;
                            _3115 = frontier_phi_90_pred_3;
                            _3114 = frontier_phi_90_pred_4;
                            _3119 = frontier_phi_90_pred_5;
                            _2865 = _3117 + _2878;
                            _2866 = _3118 + _2879;
                            _2867 = _3119 + _2880;
                            _2862 = _3114 + _2875;
                            _2863 = _3115 + _2876;
                            _2864 = _3116 + _2877;
                            if (_2882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2882;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2866;
                        frontier_phi_84_pred_1 = _2865;
                        frontier_phi_84_pred_2 = _2864;
                        frontier_phi_84_pred_3 = _2863;
                        frontier_phi_84_pred_4 = _2862;
                        frontier_phi_84_pred_5 = _2867;
                    }
                    _2555 = frontier_phi_84_pred;
                    _2553 = frontier_phi_84_pred_1;
                    _2551 = frontier_phi_84_pred_2;
                    _2549 = frontier_phi_84_pred_3;
                    _2547 = frontier_phi_84_pred_4;
                    _2557 = frontier_phi_84_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2547;
                        _2704 = _2549;
                        _2705 = _2551;
                        _2706 = _2553;
                        _2707 = _2555;
                        _2708 = _2557;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2557;
                frontier_phi_65_66_ladder_1 = _2553;
                frontier_phi_65_66_ladder_2 = _2555;
                frontier_phi_65_66_ladder_3 = _2549;
                frontier_phi_65_66_ladder_4 = _2547;
                frontier_phi_65_66_ladder_5 = _2551;
            }
            else
            {
                frontier_phi_65_66_ladder = _2425;
                frontier_phi_65_66_ladder_1 = _2421;
                frontier_phi_65_66_ladder_2 = _2423;
                frontier_phi_65_66_ladder_3 = _2417;
                frontier_phi_65_66_ladder_4 = _2415;
                frontier_phi_65_66_ladder_5 = _2419;
            }
            _2546 = frontier_phi_65_66_ladder_4;
            _2548 = frontier_phi_65_66_ladder_3;
            _2550 = frontier_phi_65_66_ladder_5;
            _2552 = frontier_phi_65_66_ladder_1;
            _2554 = frontier_phi_65_66_ladder_2;
            _2556 = frontier_phi_65_66_ladder;
        }
        float _2561 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
        _2313 = (_2561 * _2552) + _1953;
        _2315 = (_2561 * _2554) + _1955;
        _2317 = (_2561 * _2556) + _1957;
        _2319 = ((_2546 * 0.039999999105930328369140625) * _2561) + _2195;
        _2321 = ((_2548 * 0.039999999105930328369140625) * _2561) + _2197;
        _2323 = ((_2550 * 0.039999999105930328369140625) * _2561) + _2199;
    }
    else
    {
        _2313 = _1953;
        _2315 = _1955;
        _2317 = _1957;
        _2319 = _2195;
        _2321 = _2197;
        _2323 = _2199;
    }
    uint _2329 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _2337 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * cbInstanceData._m0[_2329].x;
    float _2340 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * cbInstanceData._m0[_2329].y;
    float _2343 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * cbInstanceData._m0[_2329].z;
    float _4113 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _4124 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _4135 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _2360 = (((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2313 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _407))) + ((_2319 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + _2337;
    float _2362 = (_2340 + ((_2321 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2315 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _407)));
    float _2364 = (_2343 + ((_2323 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2317 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _407)));
    float _2365 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2366 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2367 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2373 = cbMtdParam._m0[2u].x * _2337;
    float _2374 = cbMtdParam._m0[2u].y * _2340;
    float _2375 = cbMtdParam._m0[2u].z * _2343;
    float _4161 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2377 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    uint _2378 = _381 + 6u;
    float _2386 = _341 / cbSceneParam._m0[86u].x;
    float _2387 = _342 / cbSceneParam._m0[86u].y;
    vec4 _2401 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2403 = _2401.x;
    float _2404 = _2401.y;
    float _2405 = _2401.z;
    float _2406 = _2401.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2441 = _2440 / _262;
        float _2452 = _2441 * _313;
        float _2453 = _314 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _315;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2660;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2660 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2606 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2660 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2475 * _2615) - exp2(_2475 * _2616)) * _2604))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2662 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, 1.0), 0.0);
        float _2671 = exp2((_2660 * (-1.44269502162933349609375)) * (1.0 - _2662.w));
        float _2672 = log2(_2671);
        float _2688 = log2(_2406);
        _2477 = (exp2(_2688 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].x)) * _2662.x) / cbSceneParam._m0[78u].x)) + _2403;
        _2479 = (exp2(_2688 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].y)) * _2662.y) / cbSceneParam._m0[78u].y)) + _2404;
        _2481 = (exp2(_2688 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].z)) * _2662.z) / cbSceneParam._m0[78u].z)) + _2405;
        _2483 = _2671 * _2406;
    }
    else
    {
        _2477 = _2403;
        _2479 = _2404;
        _2481 = _2405;
        _2483 = _2406;
    }
    bool _2698;
    vec4 _2493;
    vec4 _2516;
    float _2518;
    float _2522;
    float _2523;
    float _2524;
    float _2527;
    float _2530;
    float _2533;
    float _2534;
    bool _2545;
    for (;;)
    {
        _2493 = cbMatDynParam._m0[0u];
        float _2495 = roundEven(_2493.y);
        bool _2496 = _2495 == 3.0;
        float _2498 = log2(_2483);
        float _2502 = exp2(_2498 * cbSceneParam._m0[78u].x);
        float _2503 = exp2(_2498 * cbSceneParam._m0[78u].y);
        float _2504 = exp2(_2498 * cbSceneParam._m0[78u].z);
        float _2505 = _2502 * _2365;
        float _2506 = _2503 * _2366;
        float _2507 = _2504 * _2367;
        float _2514 = _329 + (-0.5);
        _2516 = cbMtdParam._m0[1u];
        _2518 = _2516.y * _2514;
        float _2521 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2522 = _2521 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2477)));
        _2523 = _2521 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2479)));
        _2524 = _2521 * (_2496 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2481)));
        _2527 = ((_2373 * _2377) * _2502) * _2521;
        _2530 = ((_2374 * _2377) * _2503) * _2521;
        _2533 = ((_2375 * _2377) * _2504) * _2521;
        _2534 = _2514 * 0.999000012874603271484375;
        _2545 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2545)
        {
            if ((cbInstanceData._m0[_381 + 7u].x + _2534) < 0.5)
            {
                _2698 = true;
                break;
            }
        }
        uint _2639 = _383 + uint(_2493.w);
        if ((cbInstanceData._m0[_2639].w < 1.0) && ((cbInstanceData._m0[_2639].w + _2534) < 0.5))
        {
            _2698 = true;
            break;
        }
        if ((_2518 + 1.0) < _2516.x)
        {
            _2698 = true;
            break;
        }
        _2698 = false;
        break;
    }
    float _2853;
    if (_2698)
    {
        discard_state = true;
        _2853 = 0.0;
    }
    else
    {
        _2853 = cbInstanceData._m0[_2378].w;
    }
    SV_Target.x = _2522;
    SV_Target.y = _2523;
    SV_Target.z = _2524;
    SV_Target.w = _2853;
    SV_Target_1.x = _2527;
    SV_Target_1.y = _2530;
    SV_Target_1.z = _2533;
    SV_Target_1.w = cbInstanceData._m0[_2378].w;
    discard_exit();
}


