#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1033;
float _3474;
float _3475;
float _3476;
float _3477;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _245 = _242.x;
    float _250 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _255 = fract(abs(_250));
    float _263 = (TEXCOORD_3.x + 0.5) - ((((_250 >= ((-0.0) - _250)) ? _255 : ((-0.0) - _255)) * 3.0) - _245);
    float _264 = ceil(_263);
    float _3486 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _272 = sin(cbMtdParam._m0[12u].y);
    float _273 = cos(cbMtdParam._m0[12u].y);
    float _274 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _275 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _294 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_275, (-0.0) - _272, _273 * _274) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_275, _273, _274 * _272) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _305 = cbMtdParam._m0[9u].x * _294.x;
    float _306 = cbMtdParam._m0[9u].y * _294.y;
    float _307 = cbMtdParam._m0[9u].z * _294.z;
    float _314 = ((_305 - cbMtdParam._m0[11u].x) * _266) + cbMtdParam._m0[11u].x;
    float _315 = ((_306 - cbMtdParam._m0[11u].y) * _266) + cbMtdParam._m0[11u].y;
    float _316 = ((_307 - cbMtdParam._m0[11u].z) * _266) + cbMtdParam._m0[11u].z;
    float _320 = abs(cbMtdParam._m0[12u].z * _263);
    float _324 = (((_320 * cbMtdParam._m0[12u].w) - _245) * _320) + _245;
    float _3497 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    vec4 _337 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _348 = cbMtdParam._m0[10u].x * _337.x;
    float _349 = cbMtdParam._m0[10u].y * _337.y;
    float _350 = cbMtdParam._m0[10u].z * _337.z;
    float _351 = _348 * _325;
    float _352 = _349 * _325;
    float _353 = _350 * _325;
    float _360 = exp2(log2(_325) * cbMtdParam._m0[13u].x);
    float _370 = (_360 * ((_348 - _314) - _351)) + _314;
    float _371 = (_360 * ((_349 - _315) - _352)) + _315;
    float _372 = (_360 * ((_350 - _316) - _353)) + _316;
    float _374 = _325 * 100.0;
    float _3508 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = _266 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)));
    float _3519 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _382 = ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _396 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _404 = (_396.x * 2.0) + (-1.0);
    float _405 = (_396.y * 2.0) + (-1.0);
    float _406 = dot(vec2(_404, _405), vec2(_404, _405));
    float _3530 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _411 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    float _415 = ((cbMtdParam._m0[13u].y + _396.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _416 = _305 * _266;
    float _417 = _306 * _266;
    float _418 = _307 * _266;
    float _437 = fma(_411, _220, fma(_405, _212 * TANGENT.x, (_198 * _190) * _404));
    float _440 = fma(_411, _221, fma(_405, _212 * TANGENT.y, (_198 * _191) * _404));
    float _443 = fma(_411, _222, fma(_405, _212 * TANGENT.z, (_198 * _192) * _404));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3541 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _451 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _452 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3574 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3585 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3596 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _456 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _523 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _513);
    float _524 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _513);
    float _525 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _513);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _530 = _523 * _529;
    float _531 = _524 * _529;
    float _532 = _525 * _529;
    vec4 _537 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _539 = _537.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _713 = sqrt(((_523 * _523) + (_524 * _524)) + (_525 * _525));
        float _719 = (cbMatDynParam._m0[5u].x * _713) + cbMatDynParam._m0[5u].y;
        float _3607 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _724 = (cbMatDynParam._m0[5u].z * _713) + cbMatDynParam._m0[5u].w;
        float _3618 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) - _720)) + _720) < ((_539 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _575 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _578 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _591 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3629 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _605 = 1.0 - _456;
    float _606 = _602 * _605;
    float _607 = _603 * _605;
    float _608 = _604 * _605;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _456;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _456;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _456;
    float _616 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    float _619 = _615 + 0.039999999105930328369140625;
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _551, cbSceneParam._m0[86u].y * _552));
    float _631 = _628.x * TEXCOORD_3.w;
    float _632 = dot(vec3(_448, _449, _450), vec3(_530, _531, _532));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _448) - _530;
    float _640 = (_635 * _449) - _531;
    float _641 = (_635 * _450) - _532;
    float _645 = abs(dot(vec3(_530, _531, _532), vec3(_448, _449, _450)));
    float _3662 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_452);
    float _659 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _665 = (1.0 - _659) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _666 = _659 * _647;
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _762 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _766 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _790 = _694 + _448;
        float _791 = _698 + _449;
        float _792 = _702 + _450;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _758;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _762;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _766;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_448, _449, _450), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3710 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_448, _449, _450), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3743 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_448, _449, _450), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3776 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1080 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1084 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1107 = _694 + _448;
        float _1108 = _698 + _449;
        float _1109 = _702 + _450;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_448, _449, _450), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3839 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_448, _449, _450), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3872 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_448, _449, _450), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3905 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1033;
        _1346 = _1033;
        _1347 = _1033;
        _1348 = _1033;
        _1349 = _1033;
        _1350 = _1033;
        _1351 = _1033;
        _1352 = _1033;
        _1353 = _1033;
        _1354 = _1033;
        _1355 = _1033;
        _1356 = _1033;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _639 * 0.5;
    float _1414 = _640 * 0.5;
    float _1415 = _641 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1543 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1546 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1574 = frontier_phi_19_17_ladder;
        }
        float _1749;
        if (_1543 > 0.0)
        {
            _1749 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1749 = frontier_phi_28_24_ladder;
        }
        float _2205;
        if (_1546 > 0.0)
        {
            _2205 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2205 = frontier_phi_40_35_ladder;
        }
        float _2207 = isnan(_1749) ? _1574 : (isnan(_1574) ? _1749 : min(_1574, _1749));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1540) + _1529;
        float _2213 = (_2208 * _1543) + _1533;
        float _2214 = (_2208 * _1546) + _1537;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_18_40_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_18_40_ladder_2;
        _1564 = frontier_phi_18_40_ladder_1;
        _1566 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1482);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1642 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1645 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1754;
        if (_1639 > 0.0)
        {
            _1754 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1754 = frontier_phi_30_26_ladder;
        }
        float _2232;
        if (_1642 > 0.0)
        {
            _2232 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2232 = frontier_phi_42_37_ladder;
        }
        float _2613;
        if (_1645 > 0.0)
        {
            _2613 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2613 = frontier_phi_54_49_ladder;
        }
        float _2615 = isnan(_2232) ? _1754 : (isnan(_1754) ? _2232 : min(_1754, _2232));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1639) + _1628;
        float _2621 = (_2616 * _1642) + _1632;
        float _2622 = (_2616 * _1645) + _1636;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_27_54_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_27_54_ladder_2;
        _1666 = frontier_phi_27_54_ladder_1;
        _1668 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1571);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_665 * _616) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_665 * _618) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_665 * _619) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1741 = _1728 / _1740;
    float _1742 = _1732 / _1740;
    float _1743 = _1736 / _1740;
    float _1890;
    float _1891;
    float _1892;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1770 = ((uint(_1743 > cbSceneParam._m0[59u].y) + uint(_1743 > cbSceneParam._m0[59u].x)) + uint(_1743 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1771 = _1770 + 43u;
        uint _1779 = _1770 + 44u;
        uint _1787 = _1770 + 45u;
        uint _1795 = _1770 + 46u;
        float _1806 = fma(_1740, cbSceneParam._m0[_1771].w, fma(_1736, cbSceneParam._m0[_1771].z, fma(_1732, cbSceneParam._m0[_1771].y, _1728 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1740, cbSceneParam._m0[_1779].w, fma(_1736, cbSceneParam._m0[_1779].z, fma(_1732, cbSceneParam._m0[_1779].y, _1728 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1740, cbSceneParam._m0[_1795].w, fma(_1736, cbSceneParam._m0[_1795].z, fma(_1732, cbSceneParam._m0[_1795].y, _1728 * cbSceneParam._m0[_1795].x)));
        float _1823 = cbSceneParam._m0[33u].z * _1818;
        float _1825 = cbSceneParam._m0[33u].w * _1818;
        float _1828 = fma(_1740, cbSceneParam._m0[_1787].w, fma(_1736, cbSceneParam._m0[_1787].z, fma(_1732, cbSceneParam._m0[_1787].y, _1728 * cbSceneParam._m0[_1787].x))) / _1818;
        float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
        float _4031 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1883 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 + _1806) / _1818, (_1825 + _1810) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1806) / _1818, (_1810 - _1823) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1823) / _1818, (_1810 - _1825) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1825) / _1818, (_1823 + _1810) / _1818), _1828), 0.0)).x), vec4(0.25)));
        _1890 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
        _1891 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
        _1892 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1890 = 1.0;
        _1891 = 1.0;
        _1892 = 1.0;
    }
    float _1956;
    float _1958;
    float _1960;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1944 = fma(_1740, cbSceneParam._m0[63u].w, fma(_1736, cbSceneParam._m0[63u].z, fma(_1732, cbSceneParam._m0[63u].y, _1728 * cbSceneParam._m0[63u].x)));
        float _1945 = fma(_1740, cbSceneParam._m0[60u].w, fma(_1736, cbSceneParam._m0[60u].z, fma(_1732, cbSceneParam._m0[60u].y, _1728 * cbSceneParam._m0[60u].x))) / _1944;
        float _1946 = fma(_1740, cbSceneParam._m0[61u].w, fma(_1736, cbSceneParam._m0[61u].z, fma(_1732, cbSceneParam._m0[61u].y, _1728 * cbSceneParam._m0[61u].x))) / _1944;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1945 >= cbSceneParam._m0[64u].x) && (_1946 >= cbSceneParam._m0[64u].y)) && (_1945 <= cbSceneParam._m0[64u].z)) && (_1946 <= cbSceneParam._m0[64u].w))
        {
            float _2245 = fma(_1740, cbSceneParam._m0[62u].w, fma(_1736, cbSceneParam._m0[62u].z, fma(_1732, cbSceneParam._m0[62u].y, _1728 * cbSceneParam._m0[62u].x))) / _1944;
            float _2249 = isnan(cbSceneParam._m0[41u].w) ? _2245 : (isnan(_2245) ? cbSceneParam._m0[41u].w : max(_2245, cbSceneParam._m0[41u].w));
            float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
            float _4047 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
            float _2299 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1945, cbSceneParam._m0[33u].w + _1946), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1945, _1946 - cbSceneParam._m0[33u].z), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].z, _1946 - cbSceneParam._m0[33u].w), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1946), _2249), 0.0)).x), vec4(0.25)));
            float _2303 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
            float _2304 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
            float _2305 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2305) ? _1892 : (isnan(_1892) ? _2305 : min(_1892, _2305));
            frontier_phi_39_38_ladder_1 = isnan(_2304) ? _1891 : (isnan(_1891) ? _2304 : min(_1891, _2304));
            frontier_phi_39_38_ladder_2 = isnan(_2303) ? _1890 : (isnan(_1890) ? _2303 : min(_1890, _2303));
        }
        else
        {
            frontier_phi_39_38_ladder = _1892;
            frontier_phi_39_38_ladder_1 = _1891;
            frontier_phi_39_38_ladder_2 = _1890;
        }
        _1956 = frontier_phi_39_38_ladder_2;
        _1958 = frontier_phi_39_38_ladder_1;
        _1960 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1956 = _1890;
        _1958 = _1891;
        _1960 = _1892;
    }
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1973 = _631 + (-1.0);
    float _1976 = (cbLight._m0[_1968].x * _1973) + 1.0;
    float _1977 = (cbLight._m0[_1968].y * _1973) + 1.0;
    uint _1978 = _1967 + 5u;
    float _1984 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1988 = _1967 + 4u;
    float _1998 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2002 = _1967 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_448, _449, _450));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_448, _449, _450));
    float _4083 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4094 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1978].x * _1984) * _2023) + (((cbLight._m0[_1988].x * _1956) * _1998) * _2021);
    float _2031 = ((_1984 * cbLight._m0[_1978].y) * _2023) + (((cbLight._m0[_1988].y * _1958) * _1998) * _2021);
    float _2032 = ((_1984 * cbLight._m0[_1978].z) * _2023) + (((cbLight._m0[_1988].z * _1960) * _1998) * _2021);
    uint _2034 = _1967 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _452) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1967].x + _530;
    float _2050 = cbLight._m0[_1967].y + _531;
    float _2051 = cbLight._m0[_1967].z + _532;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1967].xyz));
    float _4105 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2063 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2064 = dot(vec3(_448, _449, _450), vec3(_2056, _2057, _2058));
    float _4127 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2056, _2057, _2058));
    float _4138 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
    float _2085 = 0.959999978542327880859375 - _613;
    float _2087 = 0.959999978542327880859375 - _614;
    float _2088 = 0.959999978542327880859375 - _615;
    float _2095 = 1.0 - _2048;
    float _2106 = (0.5 / (((_2063 * ((_2062 * _2095) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2095) + _2048) * _2062))) * _2062;
    float _4149 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2122 = _1967 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _452) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_2002].x + _530;
    float _2136 = cbLight._m0[_2002].y + _531;
    float _2137 = cbLight._m0[_2002].z + _532;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2002].xyz));
    float _4160 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2149 = dot(vec3(_448, _449, _450), vec3(_2142, _2143, _2144));
    float _4171 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2142, _2143, _2144));
    float _4182 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0);
    float _2175 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2063 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2175) + _2134) * _2148))) * _2148;
    float _4193 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2197 = (((((_2168 * _2085) + _616) * cbLight._m0[_2122].x) * _2187) * _1984) + ((((cbLight._m0[_2034].x * _1956) * ((_2084 * _2085) + _616)) * _2108) * _1998);
    float _2198 = (((((_2168 * _2087) + _618) * cbLight._m0[_2122].y) * _2187) * _1984) + ((((cbLight._m0[_2034].y * _1958) * ((_2084 * _2087) + _618)) * _2108) * _1998);
    float _2199 = (((((_2168 * _2088) + _619) * cbLight._m0[_2122].z) * _2187) * _1984) + ((((cbLight._m0[_2034].z * _1960) * ((_2084 * _2088) + _619)) * _2108) * _1998);
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1965.y == 0u)
    {
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _2318)));
        float _2339 = (log2(_1743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
        }
        else
        {
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            uint _2677 = 0u;
            uint _2686;
            bool _2687;
            for (;;)
            {
                _2686 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                _2687 = _2686 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2687)
                {
                    frontier_phi_65_pred = _2673;
                    frontier_phi_65_pred_1 = _2672;
                    frontier_phi_65_pred_2 = _2671;
                    frontier_phi_65_pred_3 = _2674;
                    frontier_phi_65_pred_4 = _2676;
                    frontier_phi_65_pred_5 = _2675;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2671;
                    _2838 = _2672;
                    _2839 = _2673;
                    _2840 = _2674;
                    _2841 = _2675;
                    _2842 = _2676;
                    _2843 = _2686;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2677 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _1741;
                        float _2904 = _2863.y - _1742;
                        float _2905 = _2863.z - _1743;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_572, _575, _578), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4214 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _1741;
                        float _2939 = (-0.0) - _1742;
                        float _2940 = (-0.0) - _1743;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2954 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2955 = 1.0 - _647;
                        float _2962 = sqrt(1.0 - ((1.0 - (_2955 * _2955)) * (1.0 - (_2954 * _2954))));
                        float _2963 = _2962 * _2962;
                        float _2964 = _2963 * _2963;
                        float _2965 = _2945 + _2910;
                        float _2966 = _2946 + _2911;
                        float _2967 = _2947 + _2912;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2975 = dot(vec3(_572, _575, _578), vec3(_2945, _2946, _2947));
                        float _4230 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2979 = dot(vec3(_572, _575, _578), vec3(_2971 * _2965, _2971 * _2966, _2971 * _2967));
                        float _4241 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2986 = ((_2982 * _2982) * (_2964 + (-1.0))) + 1.0;
                        float _2987 = _2923 * _2963;
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2913) + _2988;
                        float _4252 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2993 = 1.0 - _2963;
                        float _3003 = (0.5 / (((_2992 * ((_2978 * _2993) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2992 * _2993) + _2963) * _2978))) * _2992;
                        float _4263 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3014 = (((_2964 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2986 * _2986) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2767 = (_2934 * _2882.x) + _2840;
                        _2768 = (_2934 * _2882.y) + _2841;
                        _2769 = (_2934 * _2882.z) + _2842;
                        _2764 = (_3014 * _2899.x) + _2837;
                        _2765 = (_3014 * _2899.y) + _2838;
                        _2766 = (_3014 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_65_pred = _2766;
                    frontier_phi_65_pred_1 = _2765;
                    frontier_phi_65_pred_2 = _2764;
                    frontier_phi_65_pred_3 = _2767;
                    frontier_phi_65_pred_4 = _2769;
                    frontier_phi_65_pred_5 = _2768;
                }
                _2489 = frontier_phi_65_pred;
                _2487 = frontier_phi_65_pred_1;
                _2485 = frontier_phi_65_pred_2;
                _2491 = frontier_phi_65_pred_3;
                _2495 = frontier_phi_65_pred_4;
                _2493 = frontier_phi_65_pred_5;
                uint _2678 = _2677 + 1u;
                if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2671 = _2485;
                    _2672 = _2487;
                    _2673 = _2489;
                    _2674 = _2491;
                    _2675 = _2493;
                    _2676 = _2495;
                    _2677 = _2678;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
        }
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.z;
        uint _2501 = (_2499 >> 8u) & 15u;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((4294967295u << _2501) & _2349) == 0u)
        {
            _2639 = _2484;
            _2641 = _2486;
            _2643 = _2488;
            _2645 = _2490;
            _2647 = _2492;
            _2649 = _2494;
        }
        else
        {
            float _2664 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
            float _2665 = _2664 * _1741;
            float _2666 = _2664 * _1742;
            float _2667 = _2664 * _1743;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2501 < ((_2499 >> 12u) & 15u))
            {
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2820 = _2484;
                float _2821 = _2486;
                float _2822 = _2488;
                float _2823 = _2490;
                float _2824 = _2492;
                float _2825 = _2494;
                uint _2826 = _2501;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2836)
                    {
                        frontier_phi_76_pred = _2822;
                        frontier_phi_76_pred_1 = _2821;
                        frontier_phi_76_pred_2 = _2820;
                        frontier_phi_76_pred_3 = _2825;
                        frontier_phi_76_pred_4 = _2824;
                        frontier_phi_76_pred_5 = _2823;
                    }
                    else
                    {
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        float _3043 = _2822;
                        float _3044 = _2823;
                        float _3045 = _2824;
                        float _3046 = _2825;
                        uint _3047 = _2835;
                        uint _3048;
                        vec4 _3073;
                        float _3074;
                        vec4 _3089;
                        vec3 _3101;
                        vec4 _3117;
                        vec4 _3133;
                        float _3180;
                        bool _3181;
                        for (;;)
                        {
                            uint _3058 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3047));
                            _3048 = (_3047 + 4294967295u) & _3047;
                            uint _3060 = _3058 * 40u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3074 = _3073.w;
                            uint _3076 = (_3058 * 40u) + 4u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3058 * 40u) + 8u;
                            _3101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x));
                            uint _3104 = (_3058 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3058 * 40u) + 20u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3136 = (_3058 * 40u) + 24u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3155 = (_3058 * 40u) + 28u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3180 = fma(_1743, _3168.z, fma(_1742, _3168.y, _3168.x * _1741)) + _3168.w;
                            _3181 = !((fma(_1743, _3149.z, fma(_1742, _3149.y, _3149.x * _1741)) + _3149.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3181)
                            {
                                float _3208 = _3073.x - _1741;
                                float _3209 = _3073.y - _1742;
                                float _3210 = _3073.z - _1743;
                                float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                                float _3214 = inversesqrt(_3211);
                                float _3215 = _3214 * _3208;
                                float _3216 = _3214 * _3209;
                                float _3217 = _3214 * _3210;
                                float _3221 = 1.0 - (_3211 / (_3074 * _3074));
                                float _4274 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3226 = sqrt(_3211) * _3089.w;
                                float _3228 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                                float _3229 = _3228 * _3228;
                                float _3232 = ((1.0 - _3229) * dot(vec3(_3215, _3216, _3217), vec3(_572, _575, _578))) + _3229;
                                float _3235 = _3226 * _3226;
                                float _3239 = (fma(_1743, _3117.z, fma(_1742, _3117.y, _3117.x * _1741)) + _3117.w) / _3180;
                                float _3240 = (fma(_1743, _3133.z, fma(_1742, _3133.y, _3133.x * _1741)) + _3133.w) / _3180;
                                float _3244 = 1.0 - dot(vec2(_3239, _3240), vec2(_3239, _3240));
                                float _4290 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3246 = _3245 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3222) / ((_3235 * 0.699999988079071044921875) + 1.0));
                                float _3258 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3259 = 1.0 - _647;
                                float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                                float _3267 = _3266 * _3266;
                                float _3268 = _3267 * _3267;
                                float _3269 = _3215 - _2665;
                                float _3270 = _3216 - _2666;
                                float _3271 = _3217 - _2667;
                                float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                                float _3279 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2665, (-0.0) - _2666, (-0.0) - _2667));
                                float _4301 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3283 = dot(vec3(_572, _575, _578), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                                float _4312 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                                float _3291 = _3228 * _3267;
                                float _3292 = _3291 * _3291;
                                float _3298 = ((1.0 - _3292) * dot(vec3(_572, _575, _578), vec3(_3215, _3216, _3217))) + _3292;
                                float _4323 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3300 = 1.0 - _3267;
                                float _3310 = (0.5 / (((_3299 * ((_3282 * _3300) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3267) * _3282))) * _3299;
                                float _4334 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3320 = (_3245 * _3222) * (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3290 * _3290) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3320 * _3101.z;
                                frontier_phi_82_pred_1 = _3320 * _3101.y;
                                frontier_phi_82_pred_2 = _3320 * _3101.x;
                                frontier_phi_82_pred_3 = _3246 * _3089.z;
                                frontier_phi_82_pred_4 = _3246 * _3089.y;
                                frontier_phi_82_pred_5 = _3246 * _3089.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3326 = frontier_phi_82_pred;
                            _3325 = frontier_phi_82_pred_1;
                            _3324 = frontier_phi_82_pred_2;
                            _3329 = frontier_phi_82_pred_3;
                            _3328 = frontier_phi_82_pred_4;
                            _3327 = frontier_phi_82_pred_5;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            if (_3048 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3048;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3030;
                        frontier_phi_76_pred_1 = _3029;
                        frontier_phi_76_pred_2 = _3028;
                        frontier_phi_76_pred_3 = _3033;
                        frontier_phi_76_pred_4 = _3032;
                        frontier_phi_76_pred_5 = _3031;
                    }
                    _2644 = frontier_phi_76_pred;
                    _2642 = frontier_phi_76_pred_1;
                    _2640 = frontier_phi_76_pred_2;
                    _2650 = frontier_phi_76_pred_3;
                    _2648 = frontier_phi_76_pred_4;
                    _2646 = frontier_phi_76_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2640;
                        _2821 = _2642;
                        _2822 = _2644;
                        _2823 = _2646;
                        _2824 = _2648;
                        _2825 = _2650;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2650;
                frontier_phi_56_57_ladder_1 = _2648;
                frontier_phi_56_57_ladder_2 = _2646;
                frontier_phi_56_57_ladder_3 = _2642;
                frontier_phi_56_57_ladder_4 = _2640;
                frontier_phi_56_57_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_56_57_ladder = _2494;
                frontier_phi_56_57_ladder_1 = _2492;
                frontier_phi_56_57_ladder_2 = _2490;
                frontier_phi_56_57_ladder_3 = _2486;
                frontier_phi_56_57_ladder_4 = _2484;
                frontier_phi_56_57_ladder_5 = _2488;
            }
            _2639 = frontier_phi_56_57_ladder_4;
            _2641 = frontier_phi_56_57_ladder_3;
            _2643 = frontier_phi_56_57_ladder_5;
            _2645 = frontier_phi_56_57_ladder_2;
            _2647 = frontier_phi_56_57_ladder_1;
            _2649 = frontier_phi_56_57_ladder;
        }
        float _2654 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2361 = (_2654 * _2645) + _2030;
        _2363 = (_2654 * _2647) + _2031;
        _2365 = (_2654 * _2649) + _2032;
        _2367 = ((_2639 * _616) * _2654) + _2197;
        _2369 = ((_2641 * _618) * _2654) + _2198;
        _2371 = ((_2643 * _619) * _2654) + _2199;
    }
    else
    {
        _2361 = _2030;
        _2363 = _2031;
        _2365 = _2032;
        _2367 = _2197;
        _2369 = _2198;
        _2371 = _2199;
    }
    uint _2377 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _2383 = (cbMtdParam._m0[13u].w * ((_360 * ((_348 - _416) - _351)) + _416)) * cbInstanceData._m0[_2377].x;
    float _2384 = (cbMtdParam._m0[13u].w * ((_360 * ((_349 - _417) - _352)) + _417)) * cbInstanceData._m0[_2377].y;
    float _2385 = (cbMtdParam._m0[13u].w * ((_360 * ((_350 - _418) - _353)) + _418)) * cbInstanceData._m0[_2377].z;
    float _4350 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4361 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4372 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4383 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _2403 = (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2361 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _631))) + ((_2367 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + _2383;
    float _2405 = (_2384 + ((_2369 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2363 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _631)));
    float _2407 = (_2385 + ((_2371 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2365 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _631)));
    float _2408 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2409 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2410 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2416 = cbMtdParam._m0[2u].x * _2383;
    float _2417 = cbMtdParam._m0[2u].y * _2384;
    float _2418 = cbMtdParam._m0[2u].z * _2385;
    float _4409 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2420 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2425 = cbInstanceData._m0[_591 + 6u].w * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)));
    float _2430 = _551 / cbSceneParam._m0[86u].x;
    float _2431 = _552 / cbSceneParam._m0[86u].y;
    vec4 _2445 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2447 = _2445.x;
    float _2448 = _2445.y;
    float _2449 = _2445.z;
    float _2450 = _2445.w;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2509 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2510 = _2509 / _472;
        float _2521 = _2510 * _523;
        float _2522 = _524 * _2510;
        float _2523 = (-0.0) - _2522;
        float _2524 = _2510 * _525;
        float _2526 = (cbSceneParam._m0[77u].w * _2523) / _2509;
        float _2527 = _2526 + cbSceneParam._m0[79u].w;
        float _2528 = cbSceneParam._m0[79u].w - _2522;
        float _2534 = sqrt(((_2521 * _2521) + (_2522 * _2522)) + (_2524 * _2524));
        float _2537 = (1.0 - (cbSceneParam._m0[77u].w / _2509)) * _2534;
        float _2542 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2544 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2523 - _2526) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2527 > 0.0) ? exp2(_2542 * _2527) : (2.0 - exp2(_2544 * _2527))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2537;
        }
        else
        {
            float _2700 = 1.0 / cbSceneParam._m0[80u].x;
            float _2701 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : max(_2527, _2528));
            float _2702 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : min(_2527, _2528));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            _2777 = ((abs(_2534 / _2523) * cbSceneParam._m0[80u].y) * ((((_2711 - _2712) * 2.0) - ((exp2(_2542 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)))) - exp2(_2542 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))))) * _2700)) - ((exp2(_2544 * _2711) - exp2(_2544 * _2712)) * _2700))) + (_2537 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2450);
        _2546 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2447;
        _2548 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2448;
        _2550 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2449;
        _2552 = _2788 * _2450;
    }
    else
    {
        _2546 = _2447;
        _2548 = _2448;
        _2550 = _2449;
        _2552 = _2450;
    }
    bool _2815;
    vec4 _2562;
    vec4 _2584;
    float _2586;
    float _2590;
    float _2591;
    float _2592;
    float _2595;
    float _2598;
    float _2601;
    float _2602;
    bool _2612;
    for (;;)
    {
        _2562 = cbMatDynParam._m0[0u];
        float _2564 = roundEven(_2562.y);
        bool _2565 = _2564 == 3.0;
        float _2566 = log2(_2552);
        float _2570 = exp2(_2566 * cbSceneParam._m0[78u].x);
        float _2571 = exp2(_2566 * cbSceneParam._m0[78u].y);
        float _2572 = exp2(_2566 * cbSceneParam._m0[78u].z);
        float _2573 = _2570 * _2408;
        float _2574 = _2571 * _2409;
        float _2575 = _2572 * _2410;
        float _2582 = _539 + (-0.5);
        _2584 = cbMtdParam._m0[1u];
        _2586 = _2584.y * _2582;
        float _2589 = (_2564 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2590 = _2589 * (_2565 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2546)));
        _2591 = _2589 * (_2565 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2548)));
        _2592 = _2589 * (_2565 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2550)));
        _2595 = ((_2416 * _2420) * _2570) * _2589;
        _2598 = ((_2417 * _2420) * _2571) * _2589;
        _2601 = ((_2418 * _2420) * _2572) * _2589;
        _2602 = _2582 * 0.999000012874603271484375;
        _2612 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2612)
        {
            if ((cbInstanceData._m0[_591 + 7u].x + _2602) < 0.5)
            {
                _2815 = true;
                break;
            }
        }
        uint _2735 = _592 + uint(_2562.w);
        if ((cbInstanceData._m0[_2735].w < 1.0) && ((cbInstanceData._m0[_2735].w + _2602) < 0.5))
        {
            _2815 = true;
            break;
        }
        if ((_2586 + 1.0) < _2584.x)
        {
            _2815 = true;
            break;
        }
        _2815 = false;
        break;
    }
    float _3019;
    if (_2815)
    {
        discard_state = true;
        _3019 = 0.0;
    }
    else
    {
        _3019 = _2425;
    }
    SV_Target.x = _2590;
    SV_Target.y = _2591;
    SV_Target.z = _2592;
    SV_Target.w = _3019;
    SV_Target_1.x = _2595;
    SV_Target_1.y = _2598;
    SV_Target_1.z = _2601;
    SV_Target_1.w = _2425;
    discard_exit();
}


