#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _986;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _236 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _239 = _236.x;
    float _244 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _249 = fract(abs(_244));
    float _257 = (TEXCOORD_3.x + 0.5) - ((((_244 >= ((-0.0) - _244)) ? _249 : ((-0.0) - _249)) * 3.0) - _239);
    float _258 = ceil(_257);
    float _3114 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
    float _266 = sin(cbMtdParam._m0[12u].y);
    float _267 = cos(cbMtdParam._m0[12u].y);
    float _268 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _269 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _288 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_269, (-0.0) - _266, _267 * _268) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_269, _267, _268 * _266) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _299 = cbMtdParam._m0[9u].x * _288.x;
    float _300 = cbMtdParam._m0[9u].y * _288.y;
    float _301 = cbMtdParam._m0[9u].z * _288.z;
    float _308 = ((_299 - cbMtdParam._m0[11u].x) * _260) + cbMtdParam._m0[11u].x;
    float _309 = ((_300 - cbMtdParam._m0[11u].y) * _260) + cbMtdParam._m0[11u].y;
    float _310 = ((_301 - cbMtdParam._m0[11u].z) * _260) + cbMtdParam._m0[11u].z;
    float _314 = abs(cbMtdParam._m0[12u].z * _257);
    float _318 = (((_314 * cbMtdParam._m0[12u].w) - _239) * _314) + _239;
    float _3125 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
    vec4 _331 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _342 = cbMtdParam._m0[10u].x * _331.x;
    float _343 = cbMtdParam._m0[10u].y * _331.y;
    float _344 = cbMtdParam._m0[10u].z * _331.z;
    float _345 = _342 * _319;
    float _346 = _343 * _319;
    float _347 = _344 * _319;
    float _354 = exp2(log2(_319) * cbMtdParam._m0[13u].x);
    float _364 = (_354 * ((_342 - _308) - _345)) + _308;
    float _365 = (_354 * ((_343 - _309) - _346)) + _309;
    float _366 = (_354 * ((_344 - _310) - _347)) + _310;
    float _368 = _319 * 100.0;
    float _3136 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = _260 - (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)));
    float _3147 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _376 = ((isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _390 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _398 = (_390.x * 2.0) + (-1.0);
    float _399 = (_390.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_398, _399), vec2(_398, _399));
    float _3158 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _405 = sqrt(1.0 - (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))));
    float _409 = ((cbMtdParam._m0[13u].y + _390.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _410 = _299 * _260;
    float _411 = _300 * _260;
    float _412 = _301 * _260;
    float _431 = fma(_405, _214, fma(_399, _206 * TANGENT.x, (_192 * _184) * _398));
    float _434 = fma(_405, _215, fma(_399, _206 * TANGENT.y, (_192 * _185) * _398));
    float _437 = fma(_405, _216, fma(_399, _206 * TANGENT.z, (_192 * _186) * _398));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _3169 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _445 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _3180 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _446 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3202 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3213 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3224 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _450 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _517 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _507);
    float _518 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _507);
    float _519 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _507);
    float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
    float _524 = _517 * _523;
    float _525 = _518 * _523;
    float _526 = _519 * _523;
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _554 = fma(_444, cbSceneParam._m0[5u].z, fma(_443, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _442));
    float _557 = fma(_444, cbSceneParam._m0[6u].z, fma(_443, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _442));
    float _560 = fma(_444, cbSceneParam._m0[7u].z, fma(_443, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _442));
    uint _573 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _573 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3235 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _3246 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _587 = 1.0 - _450;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _450;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _450;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _450;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _613 = _610.x * TEXCOORD_3.w;
    float _614 = dot(vec3(_442, _443, _444), vec3(_524, _525, _526));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _442) - _524;
    float _622 = (_617 * _443) - _525;
    float _623 = (_617 * _444) - _526;
    float _627 = abs(dot(vec3(_524, _525, _526), vec3(_442, _443, _444)));
    float _3268 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_446);
    float _641 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _647 = (1.0 - _641) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _648 = _641 * _629;
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _985;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _711 = fma(_684, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676));
        float _715 = fma(_684, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676));
        float _719 = fma(_684, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676));
        float _743 = _676 + _442;
        float _744 = _680 + _443;
        float _745 = _684 + _444;
        float _755 = fma(_745, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743)) - _711;
        float _756 = fma(_745, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743)) - _715;
        float _757 = fma(_745, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743)) - _719;
        float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
        float _774 = ((_761 * _755) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_711 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_761 * _756) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_715 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_761 * _757) / cbModelParam._m0[34u].z) + ((((((_719 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        float _813 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_779.x + (-0.5));
        float _815 = _813 * (_779.y + (-0.5));
        float _816 = _813 * (_779.z + (-0.5));
        float _823 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_786.x + (-0.5));
        float _825 = _823 * (_786.y + (-0.5));
        float _826 = _823 * (_786.z + (-0.5));
        float _833 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_793.x + (-0.5));
        float _835 = _833 * (_793.y + (-0.5));
        float _836 = _833 * (_793.z + (-0.5));
        float _843 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_800.x + (-0.5));
        float _845 = _843 * (_800.y + (-0.5));
        float _846 = _843 * (_800.z + (-0.5));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = _814 * 0.5;
        float _851 = _824 * 0.5;
        float _852 = _834 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _867 = (dot(vec3(_442, _443, _444), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _877 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3316 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_879 + 1.0))) + _884) * _847;
        float _894 = _815 * 0.5;
        float _895 = _825 * 0.5;
        float _896 = _835 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_442, _443, _444), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3349 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_921 + 1.0))) + _926) * _848;
        float _936 = _816 * 0.5;
        float _937 = _826 * 0.5;
        float _938 = _836 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_442, _443, _444), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3382 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_963 + 1.0))) + _968) * _849;
        _985 = _816;
        _987 = _815;
        _988 = _814;
        _989 = _826;
        _990 = _825;
        _991 = _824;
        _992 = _836;
        _993 = _835;
        _994 = _834;
        _995 = _849;
        _996 = _848;
        _997 = _847;
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
    }
    else
    {
        _985 = _986;
        _987 = _986;
        _988 = _986;
        _989 = _986;
        _990 = _986;
        _991 = _986;
        _992 = _986;
        _993 = _986;
        _994 = _986;
        _995 = _986;
        _996 = _986;
        _997 = _986;
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_684, cbModelParam._m0[30u].z, fma(_680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _676));
        float _1030 = fma(_684, cbModelParam._m0[31u].z, fma(_680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _676));
        float _1034 = fma(_684, cbModelParam._m0[32u].z, fma(_680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _676));
        float _1057 = _676 + _442;
        float _1058 = _680 + _443;
        float _1059 = _684 + _444;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_442, _443, _444), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3445 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_442, _443, _444), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3478 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_442, _443, _444), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3511 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _986;
        _1296 = _986;
        _1297 = _986;
        _1298 = _986;
        _1299 = _986;
        _1300 = _986;
        _1301 = _986;
        _1302 = _986;
        _1303 = _986;
        _1304 = _986;
        _1305 = _986;
        _1306 = _986;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _621 * 0.5;
    float _1364 = _622 * 0.5;
    float _1365 = _623 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _989, _992, _995));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_987, _990, _993, _996));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_988, _991, _994, _997));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _446);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1479 = fma(_684, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676)) + cbModelParam._m0[13u].w;
        float _1483 = fma(_684, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676)) + cbModelParam._m0[14u].w;
        float _1487 = fma(_684, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676)) + cbModelParam._m0[15u].w;
        float _1490 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1493 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1496 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1524;
        if (_1490 > 0.0)
        {
            _1524 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1524 = frontier_phi_16_14_ladder;
        }
        float _1912;
        if (_1493 > 0.0)
        {
            _1912 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1912 = frontier_phi_25_21_ladder;
        }
        float _2248;
        if (_1496 > 0.0)
        {
            _2248 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2248 = frontier_phi_39_32_ladder;
        }
        float _2250 = isnan(_1912) ? _1524 : (isnan(_1524) ? _1912 : min(_1524, _1912));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1490) + _1479;
        float _2256 = (_2251 * _1493) + _1483;
        float _2257 = (_2251 * _1496) + _1487;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_15_39_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1512 = frontier_phi_15_39_ladder_2;
        _1514 = frontier_phi_15_39_ladder_1;
        _1516 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1432);
        _1512 = _1500.x * cbModelParam._m0[1u].y;
        _1514 = _1500.y * cbModelParam._m0[1u].y;
        _1516 = _1500.z * cbModelParam._m0[1u].y;
    }
    float _1520 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _446);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1520 : min(cbModelParam._m0[25u].w, _1520));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1578 = fma(_684, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676)) + cbModelParam._m0[21u].w;
        float _1582 = fma(_684, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676)) + cbModelParam._m0[22u].w;
        float _1586 = fma(_684, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676)) + cbModelParam._m0[23u].w;
        float _1589 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1592 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1595 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1917;
        if (_1589 > 0.0)
        {
            _1917 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1917 = frontier_phi_27_23_ladder;
        }
        float _2274;
        if (_1592 > 0.0)
        {
            _2274 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2274 = frontier_phi_41_34_ladder;
        }
        float _2443;
        if (_1595 > 0.0)
        {
            _2443 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2443 = frontier_phi_55_50_ladder;
        }
        float _2445 = isnan(_2274) ? _1917 : (isnan(_1917) ? _2274 : min(_1917, _2274));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1589) + _1578;
        float _2451 = (_2446 * _1592) + _1582;
        float _2452 = (_2446 * _1595) + _1586;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1521);
            frontier_phi_24_55_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1614 = frontier_phi_24_55_ladder_2;
        _1616 = frontier_phi_24_55_ladder_1;
        _1618 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1521);
        _1614 = _1598.x * cbModelParam._m0[1u].z;
        _1616 = _1598.y * cbModelParam._m0[1u].z;
        _1618 = _1598.z * cbModelParam._m0[1u].z;
    }
    float _1631 = (((_647 * _598) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1633 = (((_647 * _600) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_647 * _601) + _648) * _613) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1631 * cbSceneParam._m0[91u].x));
    vec4 _1652 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_532, _533));
    float _1654 = _1652.w;
    float _1666 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1654);
    float _1667 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1654);
    float _1668 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1654);
    uvec4 _1672 = floatBitsToUint(cbInstanceData._m0[_573 + 5u]);
    uint _1674 = _1672.x * 14u;
    uint _1675 = _1674 + 13u;
    float _1680 = _613 + (-1.0);
    float _1683 = (cbLight._m0[_1675].x * _1680) + 1.0;
    float _1684 = (cbLight._m0[_1675].y * _1680) + 1.0;
    uint _1685 = _1674 + 5u;
    float _1691 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
    uint _1695 = _1674 + 4u;
    float _1705 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1709 = _1674 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_442, _443, _444));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_442, _443, _444));
    float _3647 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3658 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1685].x * _1691) * _1730) + (((cbLight._m0[_1695].x * _1666) * _1705) * _1728);
    float _1738 = ((_1691 * cbLight._m0[_1685].y) * _1730) + (((cbLight._m0[_1695].y * _1667) * _1705) * _1728);
    float _1739 = ((_1691 * cbLight._m0[_1685].z) * _1730) + (((cbLight._m0[_1695].z * _1668) * _1705) * _1728);
    uint _1741 = _1674 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _446) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1674].x + _524;
    float _1757 = cbLight._m0[_1674].y + _525;
    float _1758 = cbLight._m0[_1674].z + _526;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1674].xyz));
    float _3669 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1770 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _1771 = dot(vec3(_442, _443, _444), vec3(_1763, _1764, _1765));
    float _3691 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1763, _1764, _1765));
    float _3702 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _595;
    float _1794 = 0.959999978542327880859375 - _596;
    float _1795 = 0.959999978542327880859375 - _597;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3713 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1829 = _1674 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _446) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1709].x + _524;
    float _1843 = cbLight._m0[_1709].y + _525;
    float _1844 = cbLight._m0[_1709].z + _526;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1709].xyz));
    float _3724 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1856 = dot(vec3(_442, _443, _444), vec3(_1849, _1850, _1851));
    float _3735 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1849, _1850, _1851));
    float _3746 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0);
    float _1882 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1770 * ((_1855 * _1882) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1882) + _1841) * _1855))) * _1855;
    float _3757 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1904 = (((((_1875 * _1792) + _598) * cbLight._m0[_1829].x) * _1894) * _1691) + ((((cbLight._m0[_1741].x * _1666) * ((_1791 * _1792) + _598)) * _1815) * _1705);
    float _1905 = (((((_1875 * _1794) + _600) * cbLight._m0[_1829].y) * _1894) * _1691) + ((((cbLight._m0[_1741].y * _1667) * ((_1791 * _1794) + _600)) * _1815) * _1705);
    float _1906 = (((((_1875 * _1795) + _601) * cbLight._m0[_1829].z) * _1894) * _1691) + ((((cbLight._m0[_1741].z * _1668) * ((_1791 * _1795) + _601)) * _1815) * _1705);
    float _2020;
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    if (_1672.y == 0u)
    {
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1961;
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1961;
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1961;
        uvec4 _1976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1977 = _1976.x;
        uint _1988 = uint((float(_1976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _1977))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _1977)));
        float _1998 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1999 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        uint _2002 = uint(isnan(14.0) ? _1999 : (isnan(_1999) ? 14.0 : min(_1999, 14.0)));
        uvec4 _2007 = texelFetch(g_lightClusterGridBuffer, int(((_2002 << 2u) + (_1988 << 6u)) >> 2u));
        uint _2008 = _2007.x;
        uint _2009 = _1976.z;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        if (((((1u << ((_2009 >> 4u) & 15u)) + 4294967295u) & _2008) == 0u) || ((_2009 & 240u) == 0u))
        {
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
        }
        else
        {
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            uint _2317 = 0u;
            uint _2326;
            bool _2327;
            for (;;)
            {
                _2326 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2317 << 2u)) >> 2u)).x;
                _2327 = _2326 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2327)
                {
                    frontier_phi_52_pred = _2311;
                    frontier_phi_52_pred_1 = _2316;
                    frontier_phi_52_pred_2 = _2315;
                    frontier_phi_52_pred_3 = _2314;
                    frontier_phi_52_pred_4 = _2313;
                    frontier_phi_52_pred_5 = _2312;
                }
                else
                {
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    uint _2492;
                    _2486 = _2311;
                    _2487 = _2312;
                    _2488 = _2313;
                    _2489 = _2314;
                    _2490 = _2315;
                    _2491 = _2316;
                    _2492 = _2326;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    for (;;)
                    {
                        uint _2496 = uint(findLSB(_2492)) + (_2317 << 5u);
                        uint _2493 = (_2492 + 4294967295u) & _2492;
                        uint _2498 = _2496 * 48u;
                        vec4 _2512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2518 = (_2496 * 48u) + 4u;
                        vec4 _2531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2518)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 3u)).x));
                        uint _2537 = (_2496 * 48u) + 8u;
                        vec3 _2548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x));
                        float _2552 = _2512.x - _1962;
                        float _2553 = _2512.y - _1963;
                        float _2554 = _2512.z - _1964;
                        float _2555 = dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554));
                        float _2558 = inversesqrt(_2555);
                        float _2559 = _2558 * _2552;
                        float _2560 = _2558 * _2553;
                        float _2561 = _2558 * _2554;
                        float _2562 = dot(vec3(_554, _557, _560), vec3(_2559, _2560, _2561));
                        float _2567 = 1.0 - (_2555 * _2512.w);
                        float _3778 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2568 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                        float _2569 = sqrt(_2555) * _2531.w;
                        float _2572 = 1.39999997615814208984375 / (_2569 + 1.39999997615814208984375);
                        float _2573 = _2572 * _2572;
                        float _2576 = ((1.0 - _2573) * _2562) + _2573;
                        float _2579 = _2569 * _2569;
                        float _2583 = ((isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))) * _2568) / ((_2579 * 0.699999988079071044921875) + 1.0);
                        float _2587 = (-0.0) - _1962;
                        float _2588 = (-0.0) - _1963;
                        float _2589 = (-0.0) - _1964;
                        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
                        float _2594 = _2593 * _2587;
                        float _2595 = _2593 * _2588;
                        float _2596 = _2593 * _2589;
                        float _2604 = exp2(log2(1.0 / ((_2579 * 3.5) + 5.0)) * 0.25);
                        float _2605 = 1.0 - _629;
                        float _2612 = sqrt(1.0 - ((1.0 - (_2605 * _2605)) * (1.0 - (_2604 * _2604))));
                        float _2613 = _2612 * _2612;
                        float _2614 = _2613 * _2613;
                        float _2615 = _2594 + _2559;
                        float _2616 = _2595 + _2560;
                        float _2617 = _2596 + _2561;
                        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
                        float _2625 = dot(vec3(_554, _557, _560), vec3(_2594, _2595, _2596));
                        float _3794 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2628 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                        float _2629 = dot(vec3(_554, _557, _560), vec3(_2621 * _2615, _2621 * _2616, _2621 * _2617));
                        float _3805 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
                        float _2632 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                        float _2636 = ((_2632 * _2632) * (_2614 + (-1.0))) + 1.0;
                        float _2637 = _2572 * _2613;
                        float _2638 = _2637 * _2637;
                        float _2641 = ((1.0 - _2638) * _2562) + _2638;
                        float _3816 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2642 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2643 = 1.0 - _2613;
                        float _2653 = (0.5 / (((_2642 * ((_2628 * _2643) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _2643) + _2613) * _2628))) * _2642;
                        float _3827 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2664 = (((_2614 * 3.1415927410125732421875) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) / ((_2636 * _2636) * ((_2579 * 2.1991131305694580078125) + 3.141590118408203125))) * _2568;
                        _2395 = (_2583 * _2531.x) + _2489;
                        _2396 = (_2583 * _2531.y) + _2490;
                        _2397 = (_2583 * _2531.z) + _2491;
                        _2392 = (_2664 * _2548.x) + _2486;
                        _2393 = (_2664 * _2548.y) + _2487;
                        _2394 = (_2664 * _2548.z) + _2488;
                        if (_2493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2486 = _2392;
                            _2487 = _2393;
                            _2488 = _2394;
                            _2489 = _2395;
                            _2490 = _2396;
                            _2491 = _2397;
                            _2492 = _2493;
                        }
                    }
                    frontier_phi_52_pred = _2392;
                    frontier_phi_52_pred_1 = _2397;
                    frontier_phi_52_pred_2 = _2396;
                    frontier_phi_52_pred_3 = _2395;
                    frontier_phi_52_pred_4 = _2394;
                    frontier_phi_52_pred_5 = _2393;
                }
                _2127 = frontier_phi_52_pred;
                _2137 = frontier_phi_52_pred_1;
                _2135 = frontier_phi_52_pred_2;
                _2133 = frontier_phi_52_pred_3;
                _2131 = frontier_phi_52_pred_4;
                _2129 = frontier_phi_52_pred_5;
                uint _2318 = _2317 + 1u;
                if (_2318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2311 = _2127;
                    _2312 = _2129;
                    _2313 = _2131;
                    _2314 = _2133;
                    _2315 = _2135;
                    _2316 = _2137;
                    _2317 = _2318;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
        }
        uvec4 _2140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2141 = _2140.z;
        uint _2143 = (_2141 >> 8u) & 15u;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        if (((4294967295u << _2143) & _2008) == 0u)
        {
            _2279 = _2126;
            _2281 = _2128;
            _2283 = _2130;
            _2285 = _2132;
            _2287 = _2134;
            _2289 = _2136;
        }
        else
        {
            float _2304 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float _2305 = _2304 * _1962;
            float _2306 = _2304 * _1963;
            float _2307 = _2304 * _1964;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2143 < ((_2141 >> 12u) & 15u))
            {
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2290;
                float _2469 = _2126;
                float _2470 = _2128;
                float _2471 = _2130;
                float _2472 = _2132;
                float _2473 = _2134;
                float _2474 = _2136;
                uint _2475 = _2143;
                uint _2484;
                bool _2485;
                for (;;)
                {
                    _2484 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                    _2485 = _2484 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2485)
                    {
                        frontier_phi_61_pred = _2474;
                        frontier_phi_61_pred_1 = _2473;
                        frontier_phi_61_pred_2 = _2472;
                        frontier_phi_61_pred_3 = _2471;
                        frontier_phi_61_pred_4 = _2470;
                        frontier_phi_61_pred_5 = _2469;
                    }
                    else
                    {
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2703 = _2469;
                        float _2704 = _2470;
                        float _2705 = _2471;
                        float _2706 = _2472;
                        float _2707 = _2473;
                        float _2708 = _2474;
                        uint _2709 = _2484;
                        uint _2710;
                        vec4 _2735;
                        float _2736;
                        vec4 _2751;
                        vec3 _2763;
                        vec4 _2779;
                        vec4 _2795;
                        float _2842;
                        bool _2843;
                        for (;;)
                        {
                            uint _2720 = ((_2475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2709));
                            _2710 = (_2709 + 4294967295u) & _2709;
                            uint _2722 = _2720 * 40u;
                            _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            _2736 = _2735.w;
                            uint _2738 = (_2720 * 40u) + 4u;
                            _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            uint _2753 = (_2720 * 40u) + 8u;
                            _2763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x));
                            uint _2766 = (_2720 * 40u) + 16u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2782 = (_2720 * 40u) + 20u;
                            _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            uint _2798 = (_2720 * 40u) + 24u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2817 = (_2720 * 40u) + 28u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2842 = fma(_1964, _2830.z, fma(_1963, _2830.y, _2830.x * _1962)) + _2830.w;
                            _2843 = !((fma(_1964, _2811.z, fma(_1963, _2811.y, _2811.x * _1962)) + _2811.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2843)
                            {
                                float _2870 = _2735.x - _1962;
                                float _2871 = _2735.y - _1963;
                                float _2872 = _2735.z - _1964;
                                float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                                float _2876 = inversesqrt(_2873);
                                float _2877 = _2876 * _2870;
                                float _2878 = _2876 * _2871;
                                float _2879 = _2876 * _2872;
                                float _2883 = 1.0 - (_2873 / (_2736 * _2736));
                                float _3838 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                                float _2888 = sqrt(_2873) * _2751.w;
                                float _2890 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                                float _2891 = _2890 * _2890;
                                float _2894 = ((1.0 - _2891) * dot(vec3(_2877, _2878, _2879), vec3(_554, _557, _560))) + _2891;
                                float _2897 = _2888 * _2888;
                                float _2901 = (fma(_1964, _2779.z, fma(_1963, _2779.y, _2779.x * _1962)) + _2779.w) / _2842;
                                float _2902 = (fma(_1964, _2795.z, fma(_1963, _2795.y, _2795.x * _1962)) + _2795.w) / _2842;
                                float _2906 = 1.0 - dot(vec2(_2901, _2902), vec2(_2901, _2902));
                                float _3854 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                                float _2908 = _2907 * (((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2884) / ((_2897 * 0.699999988079071044921875) + 1.0));
                                float _2920 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                                float _2921 = 1.0 - _629;
                                float _2928 = sqrt(1.0 - ((1.0 - (_2921 * _2921)) * (1.0 - (_2920 * _2920))));
                                float _2929 = _2928 * _2928;
                                float _2930 = _2929 * _2929;
                                float _2931 = _2877 - _2305;
                                float _2932 = _2878 - _2306;
                                float _2933 = _2879 - _2307;
                                float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                                float _2941 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2305, (-0.0) - _2306, (-0.0) - _2307));
                                float _3865 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                                float _2945 = dot(vec3(_554, _557, _560), vec3(_2937 * _2931, _2937 * _2932, _2937 * _2933));
                                float _3876 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2948 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _2952 = ((_2948 * _2948) * (_2930 + (-1.0))) + 1.0;
                                float _2953 = _2890 * _2929;
                                float _2954 = _2953 * _2953;
                                float _2960 = ((1.0 - _2954) * dot(vec3(_554, _557, _560), vec3(_2877, _2878, _2879))) + _2954;
                                float _3887 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2962 = 1.0 - _2929;
                                float _2972 = (0.5 / (((_2961 * ((_2944 * _2962) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2929) * _2944))) * _2961;
                                float _3898 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2982 = (_2907 * _2884) * (((_2930 * 3.1415927410125732421875) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) / ((_2952 * _2952) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _2908 * _2751.z;
                                frontier_phi_67_pred_1 = _2908 * _2751.y;
                                frontier_phi_67_pred_2 = _2908 * _2751.x;
                                frontier_phi_67_pred_3 = _2982 * _2763.z;
                                frontier_phi_67_pred_4 = _2982 * _2763.y;
                                frontier_phi_67_pred_5 = _2982 * _2763.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _2991 = frontier_phi_67_pred;
                            _2990 = frontier_phi_67_pred_1;
                            _2989 = frontier_phi_67_pred_2;
                            _2988 = frontier_phi_67_pred_3;
                            _2987 = frontier_phi_67_pred_4;
                            _2986 = frontier_phi_67_pred_5;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            _2695 = _2991 + _2708;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2692 = _2988 + _2705;
                            if (_2710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2710;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2695;
                        frontier_phi_61_pred_1 = _2694;
                        frontier_phi_61_pred_2 = _2693;
                        frontier_phi_61_pred_3 = _2692;
                        frontier_phi_61_pred_4 = _2691;
                        frontier_phi_61_pred_5 = _2690;
                    }
                    _2290 = frontier_phi_61_pred;
                    _2288 = frontier_phi_61_pred_1;
                    _2286 = frontier_phi_61_pred_2;
                    _2284 = frontier_phi_61_pred_3;
                    _2282 = frontier_phi_61_pred_4;
                    _2280 = frontier_phi_61_pred_5;
                    uint _2476 = _2475 + 1u;
                    if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2469 = _2280;
                        _2470 = _2282;
                        _2471 = _2284;
                        _2472 = _2286;
                        _2473 = _2288;
                        _2474 = _2290;
                        _2475 = _2476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2290;
                frontier_phi_43_44_ladder_1 = _2286;
                frontier_phi_43_44_ladder_2 = _2288;
                frontier_phi_43_44_ladder_3 = _2284;
                frontier_phi_43_44_ladder_4 = _2282;
                frontier_phi_43_44_ladder_5 = _2280;
            }
            else
            {
                frontier_phi_43_44_ladder = _2136;
                frontier_phi_43_44_ladder_1 = _2132;
                frontier_phi_43_44_ladder_2 = _2134;
                frontier_phi_43_44_ladder_3 = _2130;
                frontier_phi_43_44_ladder_4 = _2128;
                frontier_phi_43_44_ladder_5 = _2126;
            }
            _2279 = frontier_phi_43_44_ladder_5;
            _2281 = frontier_phi_43_44_ladder_4;
            _2283 = frontier_phi_43_44_ladder_3;
            _2285 = frontier_phi_43_44_ladder_1;
            _2287 = frontier_phi_43_44_ladder_2;
            _2289 = frontier_phi_43_44_ladder;
        }
        float _2294 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2020 = (_2294 * _2285) + _1737;
        _2022 = (_2294 * _2287) + _1738;
        _2024 = (_2294 * _2289) + _1739;
        _2026 = ((_2279 * _598) * _2294) + _1904;
        _2028 = ((_2281 * _600) * _2294) + _1905;
        _2030 = ((_2283 * _601) * _2294) + _1906;
    }
    else
    {
        _2020 = _1737;
        _2022 = _1738;
        _2024 = _1739;
        _2026 = _1904;
        _2028 = _1905;
        _2030 = _1906;
    }
    uint _2036 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _2042 = (cbMtdParam._m0[13u].w * ((_354 * ((_342 - _410) - _345)) + _410)) * cbInstanceData._m0[_2036].x;
    float _2043 = (cbMtdParam._m0[13u].w * ((_354 * ((_343 - _411) - _346)) + _411)) * cbInstanceData._m0[_2036].y;
    float _2044 = (cbMtdParam._m0[13u].w * ((_354 * ((_344 - _412) - _347)) + _412)) * cbInstanceData._m0[_2036].z;
    float _3914 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3925 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3936 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3947 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _2062 = (((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_2020 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _613))) + ((_2026 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + _2042;
    float _2064 = (_2043 + ((_2028 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2022 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _613)));
    float _2066 = (_2044 + ((_2030 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2024 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _613)));
    float _3973 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2079 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _2084 = cbInstanceData._m0[_573 + 6u].w * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)));
    float _2089 = _532 / cbSceneParam._m0[86u].x;
    float _2090 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2106 = _2104.x;
    float _2107 = _2104.y;
    float _2108 = _2104.z;
    float _2109 = _2104.w;
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2151 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2152 = _2151 / _466;
        float _2163 = _2152 * _517;
        float _2164 = _518 * _2152;
        float _2165 = (-0.0) - _2164;
        float _2166 = _2152 * _519;
        float _2168 = (cbSceneParam._m0[77u].w * _2165) / _2151;
        float _2169 = _2168 + cbSceneParam._m0[79u].w;
        float _2170 = cbSceneParam._m0[79u].w - _2164;
        float _2176 = sqrt(((_2163 * _2163) + (_2164 * _2164)) + (_2166 * _2166));
        float _2179 = (1.0 - (cbSceneParam._m0[77u].w / _2151)) * _2176;
        float _2185 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2187 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2405;
        if (abs((_2165 - _2168) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2405 = ((((_2169 > 0.0) ? exp2(_2185 * _2169) : (2.0 - exp2(_2187 * _2169))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2179;
        }
        else
        {
            float _2340 = 1.0 / cbSceneParam._m0[80u].x;
            float _2341 = isnan(_2170) ? _2169 : (isnan(_2169) ? _2170 : max(_2169, _2170));
            float _2342 = isnan(_2170) ? _2169 : (isnan(_2169) ? _2170 : min(_2169, _2170));
            float _2351 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : min(_2341, 0.0));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            _2405 = ((abs(_2176 / _2165) * cbSceneParam._m0[80u].y) * ((((_2351 - _2352) * 2.0) - ((exp2(_2185 * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)))) - exp2(_2185 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0))))) * _2340)) - ((exp2(_2187 * _2351) - exp2(_2187 * _2352)) * _2340))) + (_2179 * cbSceneParam._m0[80u].z);
        }
        vec4 _2407 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, 1.0), 0.0);
        float _2416 = exp2((_2405 * (-1.44269502162933349609375)) * (1.0 - _2407.w));
        float _2417 = log2(_2416);
        float _2433 = log2(_2109);
        _2189 = (exp2(_2433 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].x)) * _2407.x) / cbSceneParam._m0[78u].x)) + _2106;
        _2191 = (exp2(_2433 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].y)) * _2407.y) / cbSceneParam._m0[78u].y)) + _2107;
        _2193 = (exp2(_2433 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].z)) * _2407.z) / cbSceneParam._m0[78u].z)) + _2108;
        _2195 = _2416 * _2109;
    }
    else
    {
        _2189 = _2106;
        _2191 = _2107;
        _2193 = _2108;
        _2195 = _2109;
    }
    float _2207 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2208 = _2207 == 3.0;
    float _2209 = log2(_2195);
    float _2213 = exp2(_2209 * cbSceneParam._m0[78u].x);
    float _2214 = exp2(_2209 * cbSceneParam._m0[78u].y);
    float _2215 = exp2(_2209 * cbSceneParam._m0[78u].z);
    float _2216 = _2213 * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)));
    float _2217 = _2214 * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    float _2218 = _2215 * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    float _2227 = (_2207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2227 * (_2208 ? _2216 : (_2216 + (cbSceneParam._m0[72u].w * _2189)));
    SV_Target.y = _2227 * (_2208 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2191)));
    SV_Target.z = _2227 * (_2208 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2193)));
    SV_Target.w = _2084;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2042) * _2079) * _2213) * _2227;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2043) * _2079) * _2214) * _2227;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2044) * _2079) * _2215) * _2227;
    SV_Target_1.w = _2084;
}


