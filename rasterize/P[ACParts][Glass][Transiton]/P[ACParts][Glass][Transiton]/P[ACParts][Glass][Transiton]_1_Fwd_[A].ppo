#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1029;
float _3187;
float _3188;
float _3189;
float _3190;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _241 = _238.x;
    float _246 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _251 = fract(abs(_246));
    float _259 = (TEXCOORD_3.x + 0.5) - ((((_246 >= ((-0.0) - _246)) ? _251 : ((-0.0) - _251)) * 3.0) - _241);
    float _260 = ceil(_259);
    float _3199 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _268 = sin(cbMtdParam._m0[12u].y);
    float _269 = cos(cbMtdParam._m0[12u].y);
    float _270 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _271 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _290 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_271, (-0.0) - _268, _269 * _270) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_271, _269, _270 * _268) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _301 = cbMtdParam._m0[9u].x * _290.x;
    float _302 = cbMtdParam._m0[9u].y * _290.y;
    float _303 = cbMtdParam._m0[9u].z * _290.z;
    float _310 = ((_301 - cbMtdParam._m0[11u].x) * _262) + cbMtdParam._m0[11u].x;
    float _311 = ((_302 - cbMtdParam._m0[11u].y) * _262) + cbMtdParam._m0[11u].y;
    float _312 = ((_303 - cbMtdParam._m0[11u].z) * _262) + cbMtdParam._m0[11u].z;
    float _316 = abs(cbMtdParam._m0[12u].z * _259);
    float _320 = (((_316 * cbMtdParam._m0[12u].w) - _241) * _316) + _241;
    float _3210 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _321 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    vec4 _333 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _344 = cbMtdParam._m0[10u].x * _333.x;
    float _345 = cbMtdParam._m0[10u].y * _333.y;
    float _346 = cbMtdParam._m0[10u].z * _333.z;
    float _347 = _344 * _321;
    float _348 = _345 * _321;
    float _349 = _346 * _321;
    float _356 = exp2(log2(_321) * cbMtdParam._m0[13u].x);
    float _366 = (_356 * ((_344 - _310) - _347)) + _310;
    float _367 = (_356 * ((_345 - _311) - _348)) + _311;
    float _368 = (_356 * ((_346 - _312) - _349)) + _312;
    float _370 = _321 * 100.0;
    float _3221 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = _262 - (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)));
    float _3232 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _378 = ((isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _392 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _400 = (_392.x * 2.0) + (-1.0);
    float _401 = (_392.y * 2.0) + (-1.0);
    float _402 = dot(vec2(_400, _401), vec2(_400, _401));
    float _3243 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _407 = sqrt(1.0 - (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))));
    float _411 = ((cbMtdParam._m0[13u].y + _392.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _412 = _301 * _262;
    float _413 = _302 * _262;
    float _414 = _303 * _262;
    float _433 = fma(_407, _216, fma(_401, _208 * TANGENT.x, (_194 * _186) * _400));
    float _436 = fma(_407, _217, fma(_401, _208 * TANGENT.y, (_194 * _187) * _400));
    float _439 = fma(_407, _218, fma(_401, _208 * TANGENT.z, (_194 * _188) * _400));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3254 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _447 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _448 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3287 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3298 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3309 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _452 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    vec4 _533 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _535 = _533.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _709 = sqrt(((_519 * _519) + (_520 * _520)) + (_521 * _521));
        float _715 = (cbMatDynParam._m0[5u].x * _709) + cbMatDynParam._m0[5u].y;
        float _3320 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _720 = (cbMatDynParam._m0[5u].z * _709) + cbMatDynParam._m0[5u].w;
        float _3331 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) - _716)) + _716) < ((_535 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _547 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _548 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _568 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _571 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _574 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _587 = uint(roundEven(NORMAL.w)) * 13u;
    uint _588 = _587 + 9u;
    uint _589 = _588 + uint(cbMatDynParam._m0[0u].w);
    float _595 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_589].x;
    float _596 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_589].y;
    float _597 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_589].z;
    float _3342 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _601 = 1.0 - _452;
    float _602 = _598 * _601;
    float _603 = _599 * _601;
    float _604 = _600 * _601;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _452;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _452;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _452;
    float _612 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _547, cbSceneParam._m0[86u].y * _548));
    float _627 = _624.x * TEXCOORD_3.w;
    float _628 = dot(vec3(_444, _445, _446), vec3(_526, _527, _528));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _444) - _526;
    float _636 = (_631 * _445) - _527;
    float _637 = (_631 * _446) - _528;
    float _641 = abs(dot(vec3(_526, _527, _528), vec3(_444, _445, _446)));
    float _3375 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_448);
    float _655 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _661 = (1.0 - _655) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _662 = _655 * _643;
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1028;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _758 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _762 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _786 = _690 + _444;
        float _787 = _694 + _445;
        float _788 = _698 + _446;
        float _798 = fma(_788, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) - _754;
        float _799 = fma(_788, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) - _758;
        float _800 = fma(_788, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) - _762;
        float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
        float _817 = ((_804 * _798) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_804 * _799) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_804 * _800) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_822.x + (-0.5));
        float _858 = _856 * (_822.y + (-0.5));
        float _859 = _856 * (_822.z + (-0.5));
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_829.x + (-0.5));
        float _868 = _866 * (_829.y + (-0.5));
        float _869 = _866 * (_829.z + (-0.5));
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_836.x + (-0.5));
        float _878 = _876 * (_836.y + (-0.5));
        float _879 = _876 * (_836.z + (-0.5));
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _910 = (dot(vec3(_444, _445, _446), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _920 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3423 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_922 + 1.0))) + _927) * _890;
        float _937 = _858 * 0.5;
        float _938 = _868 * 0.5;
        float _939 = _878 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_444, _445, _446), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3456 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_964 + 1.0))) + _969) * _891;
        float _979 = _859 * 0.5;
        float _980 = _869 * 0.5;
        float _981 = _879 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_444, _445, _446), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3489 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1006 + 1.0))) + _1011) * _892;
        _1028 = _859;
        _1030 = _858;
        _1031 = _857;
        _1032 = _869;
        _1033 = _868;
        _1034 = _867;
        _1035 = _879;
        _1036 = _878;
        _1037 = _877;
        _1038 = _892;
        _1039 = _891;
        _1040 = _890;
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _1029;
        _1030 = _1029;
        _1031 = _1029;
        _1032 = _1029;
        _1033 = _1029;
        _1034 = _1029;
        _1035 = _1029;
        _1036 = _1029;
        _1037 = _1029;
        _1038 = _1029;
        _1039 = _1029;
        _1040 = _1029;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1076 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1080 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1103 = _690 + _444;
        float _1104 = _694 + _445;
        float _1105 = _698 + _446;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_444, _445, _446), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3552 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_444, _445, _446), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3585 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_444, _445, _446), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3618 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1029;
        _1342 = _1029;
        _1343 = _1029;
        _1344 = _1029;
        _1345 = _1029;
        _1346 = _1029;
        _1347 = _1029;
        _1348 = _1029;
        _1349 = _1029;
        _1350 = _1029;
        _1351 = _1029;
        _1352 = _1029;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _635 * 0.5;
    float _1410 = _636 * 0.5;
    float _1411 = _637 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1028, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1539 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1542 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1570 = frontier_phi_19_17_ladder;
        }
        float _1934;
        if (_1539 > 0.0)
        {
            _1934 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1934 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1542 > 0.0)
        {
            _2278 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_42_35_ladder;
        }
        float _2280 = isnan(_1934) ? _1570 : (isnan(_1570) ? _1934 : min(_1570, _1934));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1536) + _1525;
        float _2286 = (_2281 * _1539) + _1529;
        float _2287 = (_2281 * _1542) + _1533;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_18_42_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_18_42_ladder_2;
        _1560 = frontier_phi_18_42_ladder_1;
        _1562 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1478);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1624 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1628 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1632 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1635 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1638 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1641 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1939;
        if (_1635 > 0.0)
        {
            _1939 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1939 = frontier_phi_30_26_ladder;
        }
        float _2304;
        if (_1638 > 0.0)
        {
            _2304 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2304 = frontier_phi_44_37_ladder;
        }
        float _2494;
        if (_1641 > 0.0)
        {
            _2494 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2494 = frontier_phi_62_55_ladder;
        }
        float _2496 = isnan(_2304) ? _1939 : (isnan(_1939) ? _2304 : min(_1939, _2304));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1635) + _1624;
        float _2502 = (_2497 * _1638) + _1628;
        float _2503 = (_2497 * _1641) + _1632;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_27_62_ladder = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1660 = frontier_phi_27_62_ladder_2;
        _1662 = frontier_phi_27_62_ladder_1;
        _1664 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1567);
        _1660 = _1644.x * cbModelParam._m0[1u].z;
        _1662 = _1644.y * cbModelParam._m0[1u].z;
        _1664 = _1644.z * cbModelParam._m0[1u].z;
    }
    float _1677 = (((_661 * _612) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1679 = (((_661 * _614) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1681 = (((_661 * _615) + _662) * _627) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1677 * cbSceneParam._m0[91u].x));
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_587 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1708 = _627 + (-1.0);
    float _1711 = (cbLight._m0[_1703].x * _1708) + 1.0;
    float _1712 = (cbLight._m0[_1703].y * _1708) + 1.0;
    uint _1713 = _1702 + 5u;
    float _1719 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1723 = _1702 + 4u;
    float _1730 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1734 = _1702 | 1u;
    float _1745 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_444, _445, _446));
    float _1748 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_444, _445, _446));
    float _3754 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _3765 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1753 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1755 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1762 = ((cbLight._m0[_1713].x * _1719) * _1755) + ((cbLight._m0[_1723].x * _1730) * _1753);
    float _1763 = ((_1719 * cbLight._m0[_1713].y) * _1755) + ((_1730 * cbLight._m0[_1723].y) * _1753);
    float _1764 = ((_1719 * cbLight._m0[_1713].z) * _1755) + ((_1730 * cbLight._m0[_1723].z) * _1753);
    uint _1766 = _1702 + 8u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _448) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1702].x + _526;
    float _1782 = cbLight._m0[_1702].y + _527;
    float _1783 = cbLight._m0[_1702].z + _528;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1702].xyz));
    float _3776 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1795 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1796 = dot(vec3(_444, _445, _446), vec3(_1788, _1789, _1790));
    float _3798 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1788, _1789, _1790));
    float _3809 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1780 * _1780;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1816 = exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0);
    float _1817 = 0.959999978542327880859375 - _609;
    float _1819 = 0.959999978542327880859375 - _610;
    float _1820 = 0.959999978542327880859375 - _611;
    float _1827 = 1.0 - _1780;
    float _1838 = (0.5 / (((_1795 * ((_1794 * _1827) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1827) + _1780) * _1794))) * _1794;
    float _3820 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    uint _1851 = _1702 + 9u;
    float _1862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _448) * 0.949999988079071044921875);
    float _1863 = _1862 * _1862;
    float _1864 = cbLight._m0[_1734].x + _526;
    float _1865 = cbLight._m0[_1734].y + _527;
    float _1866 = cbLight._m0[_1734].z + _528;
    float _1870 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
    float _1871 = _1870 * _1864;
    float _1872 = _1870 * _1865;
    float _1873 = _1870 * _1866;
    float _1874 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1734].xyz));
    float _3831 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1878 = dot(vec3(_444, _445, _446), vec3(_1871, _1872, _1873));
    float _3842 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1871, _1872, _1873));
    float _3853 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1863 * _1863;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1897 = exp2(log2(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * 5.0);
    float _1904 = 1.0 - _1863;
    float _1914 = (0.5 / (((_1795 * ((_1877 * _1904) + _1863)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1904) + _1863) * _1877))) * _1877;
    float _3864 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    float _1926 = (((((_1897 * _1817) + _612) * cbLight._m0[_1851].x) * _1916) * _1719) + (((((_1816 * _1817) + _612) * cbLight._m0[_1766].x) * _1840) * _1730);
    float _1927 = (((((_1897 * _1819) + _614) * cbLight._m0[_1851].y) * _1916) * _1719) + (((((_1816 * _1819) + _614) * cbLight._m0[_1766].y) * _1840) * _1730);
    float _1928 = (((((_1897 * _1820) + _615) * cbLight._m0[_1851].z) * _1916) * _1719) + (((((_1816 * _1820) + _615) * cbLight._m0[_1766].z) * _1840) * _1730);
    float _2042;
    float _2044;
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    if (_1700.y == 0u)
    {
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1983;
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1983;
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1983;
        uvec4 _1998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1999 = _1998.x;
        uint _2010 = uint((float(_1998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _548) / _1999))) + floor(float(uint(cbSceneParam._m0[85u].x * _547) / _1999)));
        float _2020 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2021 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        uint _2024 = uint(isnan(14.0) ? _2021 : (isnan(_2021) ? 14.0 : min(_2021, 14.0)));
        uvec4 _2029 = texelFetch(g_lightClusterGridBuffer, int(((_2024 << 2u) + (_2010 << 6u)) >> 2u));
        uint _2030 = _2029.x;
        uint _2031 = _1998.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2031 >> 4u) & 15u)) + 4294967295u) & _2030) == 0u) || ((_2031 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            float _2344 = 0.0;
            float _2345 = 0.0;
            float _2346 = 0.0;
            uint _2347 = 0u;
            uint _2356;
            bool _2357;
            for (;;)
            {
                _2356 = texelFetch(g_lightClassification, int((((_2024 << 5u) + (_2010 << 9u)) + (_2347 << 2u)) >> 2u)).x;
                _2357 = _2356 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2357)
                {
                    frontier_phi_57_pred = _2342;
                    frontier_phi_57_pred_1 = _2346;
                    frontier_phi_57_pred_2 = _2345;
                    frontier_phi_57_pred_3 = _2344;
                    frontier_phi_57_pred_4 = _2343;
                    frontier_phi_57_pred_5 = _2341;
                }
                else
                {
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    uint _2543;
                    _2537 = _2341;
                    _2538 = _2342;
                    _2539 = _2343;
                    _2540 = _2344;
                    _2541 = _2345;
                    _2542 = _2346;
                    _2543 = _2356;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    for (;;)
                    {
                        uint _2547 = uint(findLSB(_2543)) + (_2347 << 5u);
                        uint _2544 = (_2543 + 4294967295u) & _2543;
                        uint _2549 = _2547 * 48u;
                        vec4 _2563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2549)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 3u)).x));
                        uint _2569 = (_2547 * 48u) + 4u;
                        vec4 _2582 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 3u)).x));
                        uint _2588 = (_2547 * 48u) + 8u;
                        vec3 _2599 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x));
                        float _2603 = _2563.x - _1984;
                        float _2604 = _2563.y - _1985;
                        float _2605 = _2563.z - _1986;
                        float _2606 = dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605));
                        float _2609 = inversesqrt(_2606);
                        float _2610 = _2609 * _2603;
                        float _2611 = _2609 * _2604;
                        float _2612 = _2609 * _2605;
                        float _2613 = dot(vec3(_568, _571, _574), vec3(_2610, _2611, _2612));
                        float _2618 = 1.0 - (_2606 * _2563.w);
                        float _3885 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2619 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2620 = sqrt(_2606) * _2582.w;
                        float _2623 = 1.39999997615814208984375 / (_2620 + 1.39999997615814208984375);
                        float _2624 = _2623 * _2623;
                        float _2627 = ((1.0 - _2624) * _2613) + _2624;
                        float _2630 = _2620 * _2620;
                        float _2634 = ((isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))) * _2619) / ((_2630 * 0.699999988079071044921875) + 1.0);
                        float _2638 = (-0.0) - _1984;
                        float _2639 = (-0.0) - _1985;
                        float _2640 = (-0.0) - _1986;
                        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
                        float _2645 = _2644 * _2638;
                        float _2646 = _2644 * _2639;
                        float _2647 = _2644 * _2640;
                        float _2655 = exp2(log2(1.0 / ((_2630 * 3.5) + 5.0)) * 0.25);
                        float _2656 = 1.0 - _643;
                        float _2663 = sqrt(1.0 - ((1.0 - (_2656 * _2656)) * (1.0 - (_2655 * _2655))));
                        float _2664 = _2663 * _2663;
                        float _2665 = _2664 * _2664;
                        float _2666 = _2645 + _2610;
                        float _2667 = _2646 + _2611;
                        float _2668 = _2647 + _2612;
                        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
                        float _2676 = dot(vec3(_568, _571, _574), vec3(_2645, _2646, _2647));
                        float _3901 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2679 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2680 = dot(vec3(_568, _571, _574), vec3(_2672 * _2666, _2672 * _2667, _2672 * _2668));
                        float _3912 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2683 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2687 = ((_2683 * _2683) * (_2665 + (-1.0))) + 1.0;
                        float _2688 = _2623 * _2664;
                        float _2689 = _2688 * _2688;
                        float _2692 = ((1.0 - _2689) * _2613) + _2689;
                        float _3923 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                        float _2693 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2694 = 1.0 - _2664;
                        float _2704 = (0.5 / (((_2693 * ((_2679 * _2694) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2694) + _2664) * _2679))) * _2693;
                        float _3934 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2715 = (((_2665 * 3.1415927410125732421875) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) / ((_2687 * _2687) * ((_2630 * 2.1991131305694580078125) + 3.141590118408203125))) * _2619;
                        _2441 = (_2634 * _2582.x) + _2540;
                        _2442 = (_2634 * _2582.y) + _2541;
                        _2443 = (_2634 * _2582.z) + _2542;
                        _2438 = (_2715 * _2599.x) + _2537;
                        _2439 = (_2715 * _2599.y) + _2538;
                        _2440 = (_2715 * _2599.z) + _2539;
                        if (_2544 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2537 = _2438;
                            _2538 = _2439;
                            _2539 = _2440;
                            _2540 = _2441;
                            _2541 = _2442;
                            _2542 = _2443;
                            _2543 = _2544;
                        }
                    }
                    frontier_phi_57_pred = _2439;
                    frontier_phi_57_pred_1 = _2443;
                    frontier_phi_57_pred_2 = _2442;
                    frontier_phi_57_pred_3 = _2441;
                    frontier_phi_57_pred_4 = _2440;
                    frontier_phi_57_pred_5 = _2438;
                }
                _2151 = frontier_phi_57_pred;
                _2159 = frontier_phi_57_pred_1;
                _2157 = frontier_phi_57_pred_2;
                _2155 = frontier_phi_57_pred_3;
                _2153 = frontier_phi_57_pred_4;
                _2149 = frontier_phi_57_pred_5;
                uint _2348 = _2347 + 1u;
                if (_2348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2341 = _2149;
                    _2342 = _2151;
                    _2343 = _2153;
                    _2344 = _2155;
                    _2345 = _2157;
                    _2346 = _2159;
                    _2347 = _2348;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        if (((4294967295u << _2165) & _2030) == 0u)
        {
            _2309 = _2148;
            _2311 = _2150;
            _2313 = _2152;
            _2315 = _2154;
            _2317 = _2156;
            _2319 = _2158;
        }
        else
        {
            float _2334 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float _2335 = _2334 * _1984;
            float _2336 = _2334 * _1985;
            float _2337 = _2334 * _1986;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2320;
                float _2520 = _2148;
                float _2521 = _2150;
                float _2522 = _2152;
                float _2523 = _2154;
                float _2524 = _2156;
                float _2525 = _2158;
                uint _2526 = _2165;
                uint _2535;
                bool _2536;
                for (;;)
                {
                    _2535 = texelFetch(g_lightClassification, int((((_2024 << 5u) + (_2010 << 9u)) + (_2526 << 2u)) >> 2u)).x;
                    _2536 = _2535 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2536)
                    {
                        frontier_phi_71_pred = _2525;
                        frontier_phi_71_pred_1 = _2524;
                        frontier_phi_71_pred_2 = _2523;
                        frontier_phi_71_pred_3 = _2522;
                        frontier_phi_71_pred_4 = _2521;
                        frontier_phi_71_pred_5 = _2520;
                    }
                    else
                    {
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _2763 = _2520;
                        float _2764 = _2521;
                        float _2765 = _2522;
                        float _2766 = _2523;
                        float _2767 = _2524;
                        float _2768 = _2525;
                        uint _2769 = _2535;
                        uint _2770;
                        vec4 _2795;
                        float _2796;
                        vec4 _2811;
                        vec3 _2823;
                        vec4 _2839;
                        vec4 _2855;
                        float _2902;
                        bool _2903;
                        for (;;)
                        {
                            uint _2780 = ((_2526 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2769));
                            _2770 = (_2769 + 4294967295u) & _2769;
                            uint _2782 = _2780 * 40u;
                            _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            _2796 = _2795.w;
                            uint _2798 = (_2780 * 40u) + 4u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2813 = (_2780 * 40u) + 8u;
                            _2823 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x));
                            uint _2826 = (_2780 * 40u) + 16u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2842 = (_2780 * 40u) + 20u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2780 * 40u) + 24u;
                            vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2877 = (_2780 * 40u) + 28u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2902 = fma(_1986, _2890.z, fma(_1985, _2890.y, _2890.x * _1984)) + _2890.w;
                            _2903 = !((fma(_1986, _2871.z, fma(_1985, _2871.y, _2871.x * _1984)) + _2871.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2903)
                            {
                                float _2930 = _2795.x - _1984;
                                float _2931 = _2795.y - _1985;
                                float _2932 = _2795.z - _1986;
                                float _2933 = dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932));
                                float _2936 = inversesqrt(_2933);
                                float _2937 = _2936 * _2930;
                                float _2938 = _2936 * _2931;
                                float _2939 = _2936 * _2932;
                                float _2943 = 1.0 - (_2933 / (_2796 * _2796));
                                float _3945 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2944 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2948 = sqrt(_2933) * _2811.w;
                                float _2950 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                                float _2951 = _2950 * _2950;
                                float _2954 = ((1.0 - _2951) * dot(vec3(_2937, _2938, _2939), vec3(_568, _571, _574))) + _2951;
                                float _2957 = _2948 * _2948;
                                float _2961 = (fma(_1986, _2839.z, fma(_1985, _2839.y, _2839.x * _1984)) + _2839.w) / _2902;
                                float _2962 = (fma(_1986, _2855.z, fma(_1985, _2855.y, _2855.x * _1984)) + _2855.w) / _2902;
                                float _2966 = 1.0 - dot(vec2(_2961, _2962), vec2(_2961, _2962));
                                float _3961 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _2968 = _2967 * (((isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))) * _2944) / ((_2957 * 0.699999988079071044921875) + 1.0));
                                float _2980 = exp2(log2(1.0 / ((_2957 * 3.5) + 5.0)) * 0.25);
                                float _2981 = 1.0 - _643;
                                float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                                float _2989 = _2988 * _2988;
                                float _2990 = _2989 * _2989;
                                float _2991 = _2937 - _2335;
                                float _2992 = _2938 - _2336;
                                float _2993 = _2939 - _2337;
                                float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                                float _3001 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2335, (-0.0) - _2336, (-0.0) - _2337));
                                float _3972 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3004 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _3005 = dot(vec3(_568, _571, _574), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                                float _3983 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3008 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                                float _3013 = _2950 * _2989;
                                float _3014 = _3013 * _3013;
                                float _3020 = ((1.0 - _3014) * dot(vec3(_568, _571, _574), vec3(_2937, _2938, _2939))) + _3014;
                                float _3994 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3022 = 1.0 - _2989;
                                float _3032 = (0.5 / (((_3021 * ((_3004 * _3022) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2989) * _3004))) * _3021;
                                float _4005 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3042 = (_2967 * _2944) * (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_3012 * _3012) * ((_2957 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2968 * _2811.x;
                                frontier_phi_77_pred_1 = _2968 * _2811.z;
                                frontier_phi_77_pred_2 = _2968 * _2811.y;
                                frontier_phi_77_pred_3 = _3042 * _2823.z;
                                frontier_phi_77_pred_4 = _3042 * _2823.y;
                                frontier_phi_77_pred_5 = _3042 * _2823.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_77_pred;
                            _3051 = frontier_phi_77_pred_1;
                            _3050 = frontier_phi_77_pred_2;
                            _3048 = frontier_phi_77_pred_3;
                            _3047 = frontier_phi_77_pred_4;
                            _3046 = frontier_phi_77_pred_5;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            _2750 = _3046 + _2763;
                            _2751 = _3047 + _2764;
                            _2752 = _3048 + _2765;
                            if (_2770 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2770;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2755;
                        frontier_phi_71_pred_1 = _2754;
                        frontier_phi_71_pred_2 = _2753;
                        frontier_phi_71_pred_3 = _2752;
                        frontier_phi_71_pred_4 = _2751;
                        frontier_phi_71_pred_5 = _2750;
                    }
                    _2320 = frontier_phi_71_pred;
                    _2318 = frontier_phi_71_pred_1;
                    _2316 = frontier_phi_71_pred_2;
                    _2314 = frontier_phi_71_pred_3;
                    _2312 = frontier_phi_71_pred_4;
                    _2310 = frontier_phi_71_pred_5;
                    uint _2527 = _2526 + 1u;
                    if (_2527 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2520 = _2310;
                        _2521 = _2312;
                        _2522 = _2314;
                        _2523 = _2316;
                        _2524 = _2318;
                        _2525 = _2320;
                        _2526 = _2527;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2320;
                frontier_phi_46_47_ladder_1 = _2312;
                frontier_phi_46_47_ladder_2 = _2318;
                frontier_phi_46_47_ladder_3 = _2316;
                frontier_phi_46_47_ladder_4 = _2314;
                frontier_phi_46_47_ladder_5 = _2310;
            }
            else
            {
                frontier_phi_46_47_ladder = _2158;
                frontier_phi_46_47_ladder_1 = _2150;
                frontier_phi_46_47_ladder_2 = _2156;
                frontier_phi_46_47_ladder_3 = _2154;
                frontier_phi_46_47_ladder_4 = _2152;
                frontier_phi_46_47_ladder_5 = _2148;
            }
            _2309 = frontier_phi_46_47_ladder_5;
            _2311 = frontier_phi_46_47_ladder_1;
            _2313 = frontier_phi_46_47_ladder_4;
            _2315 = frontier_phi_46_47_ladder_3;
            _2317 = frontier_phi_46_47_ladder_2;
            _2319 = frontier_phi_46_47_ladder;
        }
        float _2324 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2042 = (_2324 * _2315) + _1762;
        _2044 = (_2324 * _2317) + _1763;
        _2046 = (_2324 * _2319) + _1764;
        _2048 = ((_2309 * _612) * _2324) + _1926;
        _2050 = ((_2311 * _614) * _2324) + _1927;
        _2052 = ((_2313 * _615) * _2324) + _1928;
    }
    else
    {
        _2042 = _1762;
        _2044 = _1763;
        _2046 = _1764;
        _2048 = _1926;
        _2050 = _1927;
        _2052 = _1928;
    }
    uint _2058 = _588 + uint(cbMatDynParam._m0[0u].w);
    float _2064 = (cbMtdParam._m0[13u].w * ((_356 * ((_344 - _412) - _347)) + _412)) * cbInstanceData._m0[_2058].x;
    float _2065 = (cbMtdParam._m0[13u].w * ((_356 * ((_345 - _413) - _348)) + _413)) * cbInstanceData._m0[_2058].y;
    float _2066 = (cbMtdParam._m0[13u].w * ((_356 * ((_346 - _414) - _349)) + _414)) * cbInstanceData._m0[_2058].z;
    float _4021 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4032 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4043 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4054 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _2084 = (((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2042 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _627))) + ((_2048 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + _2064;
    float _2086 = (_2065 + ((_2050 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2044 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _627)));
    float _2088 = (_2066 + ((_2052 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2046 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _627)));
    float _2089 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2090 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2097 = cbMtdParam._m0[2u].x * _2064;
    float _2098 = cbMtdParam._m0[2u].y * _2065;
    float _2099 = cbMtdParam._m0[2u].z * _2066;
    float _4080 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2101 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2106 = cbInstanceData._m0[_587 + 6u].w * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)));
    float _2111 = _547 / cbSceneParam._m0[86u].x;
    float _2112 = _548 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2174 = _2173 / _468;
        float _2185 = _2174 * _519;
        float _2186 = _520 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _521;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2207 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2209 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2451;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2451 = ((((_2191 > 0.0) ? exp2(_2207 * _2191) : (2.0 - exp2(_2209 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2370 = 1.0 / cbSceneParam._m0[80u].x;
            float _2371 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2372 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2381 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : min(_2371, 0.0));
            float _2382 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : min(_2372, 0.0));
            _2451 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2381 - _2382) * 2.0) - ((exp2(_2207 * (isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0)))) - exp2(_2207 * (isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0))))) * _2370)) - ((exp2(_2209 * _2381) - exp2(_2209 * _2382)) * _2370))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2453 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2462 = exp2((_2451 * (-1.44269502162933349609375)) * (1.0 - _2453.w));
        float _2463 = log2(_2462);
        float _2479 = log2(_2131);
        _2211 = (exp2(_2479 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].x)) * _2453.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2213 = (exp2(_2479 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].y)) * _2453.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2215 = (exp2(_2479 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].z)) * _2453.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2217 = _2462 * _2131;
    }
    else
    {
        _2211 = _2128;
        _2213 = _2129;
        _2215 = _2130;
        _2217 = _2131;
    }
    bool _2489;
    vec4 _2227;
    vec4 _2249;
    float _2251;
    float _2255;
    float _2256;
    float _2257;
    float _2260;
    float _2263;
    float _2266;
    float _2267;
    bool _2277;
    for (;;)
    {
        _2227 = cbMatDynParam._m0[0u];
        float _2229 = roundEven(_2227.y);
        bool _2230 = _2229 == 3.0;
        float _2231 = log2(_2217);
        float _2235 = exp2(_2231 * cbSceneParam._m0[78u].x);
        float _2236 = exp2(_2231 * cbSceneParam._m0[78u].y);
        float _2237 = exp2(_2231 * cbSceneParam._m0[78u].z);
        float _2238 = _2235 * _2089;
        float _2239 = _2236 * _2090;
        float _2240 = _2237 * _2091;
        float _2247 = _535 + (-0.5);
        _2249 = cbMtdParam._m0[1u];
        _2251 = _2249.y * _2247;
        float _2254 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2255 = _2254 * (_2230 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2211)));
        _2256 = _2254 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2213)));
        _2257 = _2254 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2215)));
        _2260 = ((_2097 * _2101) * _2235) * _2254;
        _2263 = ((_2098 * _2101) * _2236) * _2254;
        _2266 = ((_2099 * _2101) * _2237) * _2254;
        _2267 = _2247 * 0.999000012874603271484375;
        _2277 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2277)
        {
            if ((cbInstanceData._m0[_587 + 7u].x + _2267) < 0.5)
            {
                _2489 = true;
                break;
            }
        }
        uint _2405 = _588 + uint(_2227.w);
        if ((cbInstanceData._m0[_2405].w < 1.0) && ((cbInstanceData._m0[_2405].w + _2267) < 0.5))
        {
            _2489 = true;
            break;
        }
        if ((_2251 + 1.0) < _2249.x)
        {
            _2489 = true;
            break;
        }
        _2489 = false;
        break;
    }
    float _2720;
    if (_2489)
    {
        discard_state = true;
        _2720 = 0.0;
    }
    else
    {
        _2720 = _2106;
    }
    SV_Target.x = _2255;
    SV_Target.y = _2256;
    SV_Target.z = _2257;
    SV_Target.w = _2720;
    SV_Target_1.x = _2260;
    SV_Target_1.y = _2263;
    SV_Target_1.z = _2266;
    SV_Target_1.w = _2106;
    discard_exit();
}


