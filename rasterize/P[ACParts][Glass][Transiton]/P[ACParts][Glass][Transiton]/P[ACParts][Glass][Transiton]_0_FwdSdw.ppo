#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _988;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _241 = _238.x;
    float _246 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _251 = fract(abs(_246));
    float _259 = (TEXCOORD_3.x + 0.5) - ((((_246 >= ((-0.0) - _246)) ? _251 : ((-0.0) - _251)) * 3.0) - _241);
    float _260 = ceil(_259);
    float _3375 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _268 = sin(cbMtdParam._m0[12u].y);
    float _269 = cos(cbMtdParam._m0[12u].y);
    float _270 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _271 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _290 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_271, (-0.0) - _268, _269 * _270) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_271, _269, _270 * _268) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _301 = cbMtdParam._m0[9u].x * _290.x;
    float _302 = cbMtdParam._m0[9u].y * _290.y;
    float _303 = cbMtdParam._m0[9u].z * _290.z;
    float _310 = ((_301 - cbMtdParam._m0[11u].x) * _262) + cbMtdParam._m0[11u].x;
    float _311 = ((_302 - cbMtdParam._m0[11u].y) * _262) + cbMtdParam._m0[11u].y;
    float _312 = ((_303 - cbMtdParam._m0[11u].z) * _262) + cbMtdParam._m0[11u].z;
    float _316 = abs(cbMtdParam._m0[12u].z * _259);
    float _320 = (((_316 * cbMtdParam._m0[12u].w) - _241) * _316) + _241;
    float _3386 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _321 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _333 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _344 = cbMtdParam._m0[10u].x * _333.x;
    float _345 = cbMtdParam._m0[10u].y * _333.y;
    float _346 = cbMtdParam._m0[10u].z * _333.z;
    float _347 = _344 * _321;
    float _348 = _345 * _321;
    float _349 = _346 * _321;
    float _356 = exp2(log2(_321) * cbMtdParam._m0[13u].x);
    float _366 = (_356 * ((_344 - _310) - _347)) + _310;
    float _367 = (_356 * ((_345 - _311) - _348)) + _311;
    float _368 = (_356 * ((_346 - _312) - _349)) + _312;
    float _370 = _321 * 100.0;
    float _3397 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = _262 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)));
    float _3408 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _378 = ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _392 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _400 = (_392.x * 2.0) + (-1.0);
    float _401 = (_392.y * 2.0) + (-1.0);
    float _402 = dot(vec2(_400, _401), vec2(_400, _401));
    float _3419 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _407 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _411 = ((cbMtdParam._m0[13u].y + _392.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _412 = _301 * _262;
    float _413 = _302 * _262;
    float _414 = _303 * _262;
    float _433 = fma(_407, _216, fma(_401, _208 * TANGENT.x, (_194 * _186) * _400));
    float _436 = fma(_407, _217, fma(_401, _208 * TANGENT.y, (_194 * _187) * _400));
    float _439 = fma(_407, _218, fma(_401, _208 * TANGENT.z, (_194 * _188) * _400));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3430 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _447 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _448 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3463 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3474 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3485 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _452 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _559 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _562 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = _575 + 9u;
    uint _577 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_577].z;
    float _3496 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _589 = 1.0 - _452;
    float _590 = _586 * _589;
    float _591 = _587 * _589;
    float _592 = _588 * _589;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _452;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _452;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _452;
    float _600 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _615 = _612.x * TEXCOORD_3.w;
    float _616 = dot(vec3(_444, _445, _446), vec3(_526, _527, _528));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _444) - _526;
    float _624 = (_619 * _445) - _527;
    float _625 = (_619 * _446) - _528;
    float _629 = abs(dot(vec3(_526, _527, _528), vec3(_444, _445, _446)));
    float _3529 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_448);
    float _643 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _649 = (1.0 - _643) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _650 = _643 * _631;
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _987;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _713 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _717 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _721 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _745 = _678 + _444;
        float _746 = _682 + _445;
        float _747 = _686 + _446;
        float _757 = fma(_747, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) - _713;
        float _758 = fma(_747, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) - _717;
        float _759 = fma(_747, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) - _721;
        float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
        float _776 = ((_763 * _757) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_713 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_763 * _758) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_717 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_763 * _759) / cbModelParam._m0[34u].z) + ((((((_721 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        float _815 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_781.x + (-0.5));
        float _817 = _815 * (_781.y + (-0.5));
        float _818 = _815 * (_781.z + (-0.5));
        float _825 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_788.x + (-0.5));
        float _827 = _825 * (_788.y + (-0.5));
        float _828 = _825 * (_788.z + (-0.5));
        float _835 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_795.x + (-0.5));
        float _837 = _835 * (_795.y + (-0.5));
        float _838 = _835 * (_795.z + (-0.5));
        float _845 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_802.x + (-0.5));
        float _847 = _845 * (_802.y + (-0.5));
        float _848 = _845 * (_802.z + (-0.5));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = _816 * 0.5;
        float _853 = _826 * 0.5;
        float _854 = _836 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _869 = (dot(vec3(_444, _445, _446), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _879 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3577 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_881 + 1.0))) + _886) * _849;
        float _896 = _817 * 0.5;
        float _897 = _827 * 0.5;
        float _898 = _837 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_444, _445, _446), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3610 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_923 + 1.0))) + _928) * _850;
        float _938 = _818 * 0.5;
        float _939 = _828 * 0.5;
        float _940 = _838 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_444, _445, _446), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3643 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_965 + 1.0))) + _970) * _851;
        _987 = _818;
        _989 = _817;
        _990 = _816;
        _991 = _828;
        _992 = _827;
        _993 = _826;
        _994 = _838;
        _995 = _837;
        _996 = _836;
        _997 = _851;
        _998 = _850;
        _999 = _849;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
    }
    else
    {
        _987 = _988;
        _989 = _988;
        _990 = _988;
        _991 = _988;
        _992 = _988;
        _993 = _988;
        _994 = _988;
        _995 = _988;
        _996 = _988;
        _997 = _988;
        _998 = _988;
        _999 = _988;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1032 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1036 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1059 = _678 + _444;
        float _1060 = _682 + _445;
        float _1061 = _686 + _446;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_444, _445, _446), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3706 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_444, _445, _446), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3739 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_444, _445, _446), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3772 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _988;
        _1298 = _988;
        _1299 = _988;
        _1300 = _988;
        _1301 = _988;
        _1302 = _988;
        _1303 = _988;
        _1304 = _988;
        _1305 = _988;
        _1306 = _988;
        _1307 = _988;
        _1308 = _988;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _623 * 0.5;
    float _1366 = _624 * 0.5;
    float _1367 = _625 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_987, _991, _994, _997));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_989, _992, _995, _998));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_990, _993, _996, _999));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1495 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1498 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1526 = frontier_phi_16_14_ladder;
        }
        float _1701;
        if (_1495 > 0.0)
        {
            _1701 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1701 = frontier_phi_25_21_ladder;
        }
        float _2157;
        if (_1498 > 0.0)
        {
            _2157 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2157 = frontier_phi_37_32_ladder;
        }
        float _2159 = isnan(_1701) ? _1526 : (isnan(_1526) ? _1701 : min(_1526, _1701));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1492) + _1481;
        float _2165 = (_2160 * _1495) + _1485;
        float _2166 = (_2160 * _1498) + _1489;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_15_37_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_15_37_ladder_2;
        _1516 = frontier_phi_15_37_ladder_1;
        _1518 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1434);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1594 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1597 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1706;
        if (_1591 > 0.0)
        {
            _1706 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1706 = frontier_phi_27_23_ladder;
        }
        float _2184;
        if (_1594 > 0.0)
        {
            _2184 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2184 = frontier_phi_39_34_ladder;
        }
        float _2557;
        if (_1597 > 0.0)
        {
            _2557 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2557 = frontier_phi_51_46_ladder;
        }
        float _2559 = isnan(_2184) ? _1706 : (isnan(_1706) ? _2184 : min(_1706, _2184));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1591) + _1580;
        float _2565 = (_2560 * _1594) + _1584;
        float _2566 = (_2560 * _1597) + _1588;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_24_51_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _2687.x * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _2687.y * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_24_51_ladder_1;
        _1618 = frontier_phi_24_51_ladder_2;
        _1620 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1523);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1633 = (((_649 * _600) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_649 * _602) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_649 * _603) + _650) * _615) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1693 = _1680 / _1692;
    float _1694 = _1684 / _1692;
    float _1695 = _1688 / _1692;
    float _1842;
    float _1843;
    float _1844;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1722 = ((uint(_1695 > cbSceneParam._m0[59u].y) + uint(_1695 > cbSceneParam._m0[59u].x)) + uint(_1695 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1723 = _1722 + 43u;
        uint _1731 = _1722 + 44u;
        uint _1739 = _1722 + 45u;
        uint _1747 = _1722 + 46u;
        float _1758 = fma(_1692, cbSceneParam._m0[_1723].w, fma(_1688, cbSceneParam._m0[_1723].z, fma(_1684, cbSceneParam._m0[_1723].y, _1680 * cbSceneParam._m0[_1723].x)));
        float _1762 = fma(_1692, cbSceneParam._m0[_1731].w, fma(_1688, cbSceneParam._m0[_1731].z, fma(_1684, cbSceneParam._m0[_1731].y, _1680 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1692, cbSceneParam._m0[_1747].w, fma(_1688, cbSceneParam._m0[_1747].z, fma(_1684, cbSceneParam._m0[_1747].y, _1680 * cbSceneParam._m0[_1747].x)));
        float _1775 = cbSceneParam._m0[33u].z * _1770;
        float _1777 = cbSceneParam._m0[33u].w * _1770;
        float _1780 = fma(_1692, cbSceneParam._m0[_1739].w, fma(_1688, cbSceneParam._m0[_1739].z, fma(_1684, cbSceneParam._m0[_1739].y, _1680 * cbSceneParam._m0[_1739].x))) / _1770;
        float _1828 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
        float _3898 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1835 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 + _1758) / _1770, (_1777 + _1762) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 + _1758) / _1770, (_1762 - _1775) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1775) / _1770, (_1762 - _1777) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1777) / _1770, (_1775 + _1762) / _1770), _1780), 0.0)).x), vec4(0.25)));
        _1842 = 1.0 - (_1835 * cbSceneParam._m0[34u].x);
        _1843 = 1.0 - (_1835 * cbSceneParam._m0[34u].y);
        _1844 = 1.0 - (_1835 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1842 = 1.0;
        _1843 = 1.0;
        _1844 = 1.0;
    }
    float _1908;
    float _1910;
    float _1912;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1896 = fma(_1692, cbSceneParam._m0[63u].w, fma(_1688, cbSceneParam._m0[63u].z, fma(_1684, cbSceneParam._m0[63u].y, _1680 * cbSceneParam._m0[63u].x)));
        float _1897 = fma(_1692, cbSceneParam._m0[60u].w, fma(_1688, cbSceneParam._m0[60u].z, fma(_1684, cbSceneParam._m0[60u].y, _1680 * cbSceneParam._m0[60u].x))) / _1896;
        float _1898 = fma(_1692, cbSceneParam._m0[61u].w, fma(_1688, cbSceneParam._m0[61u].z, fma(_1684, cbSceneParam._m0[61u].y, _1680 * cbSceneParam._m0[61u].x))) / _1896;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1897 >= cbSceneParam._m0[64u].x) && (_1898 >= cbSceneParam._m0[64u].y)) && (_1897 <= cbSceneParam._m0[64u].z)) && (_1898 <= cbSceneParam._m0[64u].w))
        {
            float _2197 = fma(_1692, cbSceneParam._m0[62u].w, fma(_1688, cbSceneParam._m0[62u].z, fma(_1684, cbSceneParam._m0[62u].y, _1680 * cbSceneParam._m0[62u].x))) / _1896;
            float _2201 = isnan(cbSceneParam._m0[41u].w) ? _2197 : (isnan(_2197) ? cbSceneParam._m0[41u].w : max(_2197, cbSceneParam._m0[41u].w));
            float _2244 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
            float _3914 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
            float _2251 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1897, cbSceneParam._m0[33u].w + _1898), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1897, _1898 - cbSceneParam._m0[33u].z), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].z, _1898 - cbSceneParam._m0[33u].w), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1898), _2201), 0.0)).x), vec4(0.25)));
            float _2255 = 1.0 - (_2251 * cbSceneParam._m0[34u].x);
            float _2256 = 1.0 - (_2251 * cbSceneParam._m0[34u].y);
            float _2257 = 1.0 - (_2251 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2257) ? _1844 : (isnan(_1844) ? _2257 : min(_1844, _2257));
            frontier_phi_36_35_ladder_1 = isnan(_2255) ? _1842 : (isnan(_1842) ? _2255 : min(_1842, _2255));
            frontier_phi_36_35_ladder_2 = isnan(_2256) ? _1843 : (isnan(_1843) ? _2256 : min(_1843, _2256));
        }
        else
        {
            frontier_phi_36_35_ladder = _1844;
            frontier_phi_36_35_ladder_1 = _1842;
            frontier_phi_36_35_ladder_2 = _1843;
        }
        _1908 = frontier_phi_36_35_ladder_1;
        _1910 = frontier_phi_36_35_ladder_2;
        _1912 = frontier_phi_36_35_ladder;
    }
    else
    {
        _1908 = _1842;
        _1910 = _1843;
        _1912 = _1844;
    }
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1925 = _615 + (-1.0);
    float _1928 = (cbLight._m0[_1920].x * _1925) + 1.0;
    float _1929 = (cbLight._m0[_1920].y * _1925) + 1.0;
    uint _1930 = _1919 + 5u;
    float _1936 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1940 = _1919 + 4u;
    float _1950 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1954 = _1919 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_444, _445, _446));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_444, _445, _446));
    float _3950 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _3961 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1930].x * _1936) * _1975) + (((cbLight._m0[_1940].x * _1908) * _1950) * _1973);
    float _1983 = ((_1936 * cbLight._m0[_1930].y) * _1975) + (((cbLight._m0[_1940].y * _1910) * _1950) * _1973);
    float _1984 = ((_1936 * cbLight._m0[_1930].z) * _1975) + (((cbLight._m0[_1940].z * _1912) * _1950) * _1973);
    uint _1986 = _1919 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _448) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1919].x + _526;
    float _2002 = cbLight._m0[_1919].y + _527;
    float _2003 = cbLight._m0[_1919].z + _528;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1919].xyz));
    float _3972 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2015 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _2016 = dot(vec3(_444, _445, _446), vec3(_2008, _2009, _2010));
    float _3994 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2008, _2009, _2010));
    float _4005 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2036 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
    float _2037 = 0.959999978542327880859375 - _597;
    float _2039 = 0.959999978542327880859375 - _598;
    float _2040 = 0.959999978542327880859375 - _599;
    float _2047 = 1.0 - _2000;
    float _2058 = (0.5 / (((_2015 * ((_2014 * _2047) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2047) + _2000) * _2014))) * _2014;
    float _4016 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2074 = _1919 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _448) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1954].x + _526;
    float _2088 = cbLight._m0[_1954].y + _527;
    float _2089 = cbLight._m0[_1954].z + _528;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1954].xyz));
    float _4027 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _2101 = dot(vec3(_444, _445, _446), vec3(_2094, _2095, _2096));
    float _4038 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2094, _2095, _2096));
    float _4049 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0);
    float _2127 = 1.0 - _2086;
    float _2137 = (0.5 / (((_2015 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2127) + _2086) * _2100))) * _2100;
    float _4060 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2149 = (((((_2120 * _2037) + _600) * cbLight._m0[_2074].x) * _2139) * _1936) + ((((cbLight._m0[_1986].x * _1908) * ((_2036 * _2037) + _600)) * _2060) * _1950);
    float _2150 = (((((_2120 * _2039) + _602) * cbLight._m0[_2074].y) * _2139) * _1936) + ((((cbLight._m0[_1986].y * _1910) * ((_2036 * _2039) + _602)) * _2060) * _1950);
    float _2151 = (((((_2120 * _2040) + _603) * cbLight._m0[_2074].z) * _2139) * _1936) + ((((cbLight._m0[_1986].z * _1912) * ((_2036 * _2040) + _603)) * _2060) * _1950);
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1917.y == 0u)
    {
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2270)));
        float _2291 = (log2(_1695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
        }
        else
        {
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2631)
                {
                    frontier_phi_60_pred = _2615;
                    frontier_phi_60_pred_1 = _2616;
                    frontier_phi_60_pred_2 = _2620;
                    frontier_phi_60_pred_3 = _2619;
                    frontier_phi_60_pred_4 = _2618;
                    frontier_phi_60_pred_5 = _2617;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2630;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2621 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _1693;
                        float _2827 = _2786.y - _1694;
                        float _2828 = _2786.z - _1695;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_556, _559, _562), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4081 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _1693;
                        float _2862 = (-0.0) - _1694;
                        float _2863 = (-0.0) - _1695;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2877 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2878 = 1.0 - _631;
                        float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                        float _2886 = _2885 * _2885;
                        float _2887 = _2886 * _2886;
                        float _2888 = _2868 + _2833;
                        float _2889 = _2869 + _2834;
                        float _2890 = _2870 + _2835;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2898 = dot(vec3(_556, _559, _562), vec3(_2868, _2869, _2870));
                        float _4097 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2902 = dot(vec3(_556, _559, _562), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                        float _4108 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                        float _2910 = _2846 * _2886;
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2836) + _2911;
                        float _4119 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2916 = 1.0 - _2886;
                        float _2926 = (0.5 / (((_2915 * ((_2901 * _2916) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2915 * _2916) + _2886) * _2901))) * _2915;
                        float _4130 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2937 = (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2909 * _2909) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2695 = (_2857 * _2805.x) + _2763;
                        _2696 = (_2857 * _2805.y) + _2764;
                        _2697 = (_2857 * _2805.z) + _2765;
                        _2692 = (_2937 * _2822.x) + _2760;
                        _2693 = (_2937 * _2822.y) + _2761;
                        _2694 = (_2937 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_60_pred = _2692;
                    frontier_phi_60_pred_1 = _2693;
                    frontier_phi_60_pred_2 = _2697;
                    frontier_phi_60_pred_3 = _2696;
                    frontier_phi_60_pred_4 = _2695;
                    frontier_phi_60_pred_5 = _2694;
                }
                _2437 = frontier_phi_60_pred;
                _2439 = frontier_phi_60_pred_1;
                _2447 = frontier_phi_60_pred_2;
                _2445 = frontier_phi_60_pred_3;
                _2443 = frontier_phi_60_pred_4;
                _2441 = frontier_phi_60_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2437;
                    _2616 = _2439;
                    _2617 = _2441;
                    _2618 = _2443;
                    _2619 = _2445;
                    _2620 = _2447;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
        }
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.z;
        uint _2453 = (_2451 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2453) & _2301) == 0u)
        {
            _2583 = _2436;
            _2585 = _2438;
            _2587 = _2440;
            _2589 = _2442;
            _2591 = _2444;
            _2593 = _2446;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
            float _2609 = _2608 * _1693;
            float _2610 = _2608 * _1694;
            float _2611 = _2608 * _1695;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2453 < ((_2451 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2743 = _2436;
                float _2744 = _2438;
                float _2745 = _2440;
                float _2746 = _2442;
                float _2747 = _2444;
                float _2748 = _2446;
                uint _2749 = _2453;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2759)
                    {
                        frontier_phi_66_pred = _2743;
                        frontier_phi_66_pred_1 = _2748;
                        frontier_phi_66_pred_2 = _2747;
                        frontier_phi_66_pred_3 = _2746;
                        frontier_phi_66_pred_4 = _2745;
                        frontier_phi_66_pred_5 = _2744;
                    }
                    else
                    {
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        float _2958 = _2746;
                        float _2959 = _2747;
                        float _2960 = _2748;
                        uint _2961 = _2758;
                        uint _2962;
                        vec4 _2987;
                        float _2988;
                        vec4 _3003;
                        vec3 _3015;
                        vec4 _3031;
                        vec4 _3047;
                        float _3094;
                        bool _3095;
                        for (;;)
                        {
                            uint _2972 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2961));
                            _2962 = (_2961 + 4294967295u) & _2961;
                            uint _2974 = _2972 * 40u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2988 = _2987.w;
                            uint _2990 = (_2972 * 40u) + 4u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2972 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3018 = (_2972 * 40u) + 16u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2972 * 40u) + 20u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3050 = (_2972 * 40u) + 24u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3069 = (_2972 * 40u) + 28u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3094 = fma(_1695, _3082.z, fma(_1694, _3082.y, _3082.x * _1693)) + _3082.w;
                            _3095 = !((fma(_1695, _3063.z, fma(_1694, _3063.y, _3063.x * _1693)) + _3063.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3095)
                            {
                                float _3122 = _2987.x - _1693;
                                float _3123 = _2987.y - _1694;
                                float _3124 = _2987.z - _1695;
                                float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                                float _3128 = inversesqrt(_3125);
                                float _3129 = _3128 * _3122;
                                float _3130 = _3128 * _3123;
                                float _3131 = _3128 * _3124;
                                float _3135 = 1.0 - (_3125 / (_2988 * _2988));
                                float _4141 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3140 = sqrt(_3125) * _3003.w;
                                float _3142 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                                float _3143 = _3142 * _3142;
                                float _3146 = ((1.0 - _3143) * dot(vec3(_3129, _3130, _3131), vec3(_556, _559, _562))) + _3143;
                                float _3149 = _3140 * _3140;
                                float _3153 = (fma(_1695, _3031.z, fma(_1694, _3031.y, _3031.x * _1693)) + _3031.w) / _3094;
                                float _3154 = (fma(_1695, _3047.z, fma(_1694, _3047.y, _3047.x * _1693)) + _3047.w) / _3094;
                                float _3158 = 1.0 - dot(vec2(_3153, _3154), vec2(_3153, _3154));
                                float _4157 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3160 = _3159 * (((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3136) / ((_3149 * 0.699999988079071044921875) + 1.0));
                                float _3172 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                                float _3173 = 1.0 - _631;
                                float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                                float _3181 = _3180 * _3180;
                                float _3182 = _3181 * _3181;
                                float _3183 = _3129 - _2609;
                                float _3184 = _3130 - _2610;
                                float _3185 = _3131 - _2611;
                                float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                                float _3193 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2609, (-0.0) - _2610, (-0.0) - _2611));
                                float _4168 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3197 = dot(vec3(_556, _559, _562), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                                float _4179 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                                float _3205 = _3142 * _3181;
                                float _3206 = _3205 * _3205;
                                float _3212 = ((1.0 - _3206) * dot(vec3(_556, _559, _562), vec3(_3129, _3130, _3131))) + _3206;
                                float _4190 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3214 = 1.0 - _3181;
                                float _3224 = (0.5 / (((_3213 * ((_3196 * _3214) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3181) * _3196))) * _3213;
                                float _4201 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3234 = (_3159 * _3136) * (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3204 * _3204) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _3160 * _3003.z;
                                frontier_phi_72_pred_1 = _3160 * _3003.y;
                                frontier_phi_72_pred_2 = _3160 * _3003.x;
                                frontier_phi_72_pred_3 = _3234 * _3015.z;
                                frontier_phi_72_pred_4 = _3234 * _3015.y;
                                frontier_phi_72_pred_5 = _3234 * _3015.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3243 = frontier_phi_72_pred;
                            _3242 = frontier_phi_72_pred_1;
                            _3241 = frontier_phi_72_pred_2;
                            _3240 = frontier_phi_72_pred_3;
                            _3239 = frontier_phi_72_pred_4;
                            _3238 = frontier_phi_72_pred_5;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            if (_2962 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2962;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2942;
                        frontier_phi_66_pred_1 = _2947;
                        frontier_phi_66_pred_2 = _2946;
                        frontier_phi_66_pred_3 = _2945;
                        frontier_phi_66_pred_4 = _2944;
                        frontier_phi_66_pred_5 = _2943;
                    }
                    _2584 = frontier_phi_66_pred;
                    _2594 = frontier_phi_66_pred_1;
                    _2592 = frontier_phi_66_pred_2;
                    _2590 = frontier_phi_66_pred_3;
                    _2588 = frontier_phi_66_pred_4;
                    _2586 = frontier_phi_66_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2584;
                        _2744 = _2586;
                        _2745 = _2588;
                        _2746 = _2590;
                        _2747 = _2592;
                        _2748 = _2594;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2592;
                frontier_phi_53_54_ladder_1 = _2594;
                frontier_phi_53_54_ladder_2 = _2590;
                frontier_phi_53_54_ladder_3 = _2588;
                frontier_phi_53_54_ladder_4 = _2586;
                frontier_phi_53_54_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_53_54_ladder = _2444;
                frontier_phi_53_54_ladder_1 = _2446;
                frontier_phi_53_54_ladder_2 = _2442;
                frontier_phi_53_54_ladder_3 = _2440;
                frontier_phi_53_54_ladder_4 = _2438;
                frontier_phi_53_54_ladder_5 = _2436;
            }
            _2583 = frontier_phi_53_54_ladder_5;
            _2585 = frontier_phi_53_54_ladder_4;
            _2587 = frontier_phi_53_54_ladder_3;
            _2589 = frontier_phi_53_54_ladder_2;
            _2591 = frontier_phi_53_54_ladder;
            _2593 = frontier_phi_53_54_ladder_1;
        }
        float _2598 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2313 = (_2598 * _2589) + _1982;
        _2315 = (_2598 * _2591) + _1983;
        _2317 = (_2598 * _2593) + _1984;
        _2319 = ((_2583 * _600) * _2598) + _2149;
        _2321 = ((_2585 * _602) * _2598) + _2150;
        _2323 = ((_2587 * _603) * _2598) + _2151;
    }
    else
    {
        _2313 = _1982;
        _2315 = _1983;
        _2317 = _1984;
        _2319 = _2149;
        _2321 = _2150;
        _2323 = _2151;
    }
    uint _2329 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _2335 = (cbMtdParam._m0[13u].w * ((_356 * ((_344 - _412) - _347)) + _412)) * cbInstanceData._m0[_2329].x;
    float _2336 = (cbMtdParam._m0[13u].w * ((_356 * ((_345 - _413) - _348)) + _413)) * cbInstanceData._m0[_2329].y;
    float _2337 = (cbMtdParam._m0[13u].w * ((_356 * ((_346 - _414) - _349)) + _414)) * cbInstanceData._m0[_2329].z;
    float _4217 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4228 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4239 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4250 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _2355 = (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2313 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _615))) + ((_2319 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + _2335;
    float _2357 = (_2336 + ((_2321 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2315 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _615)));
    float _2359 = (_2337 + ((_2323 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2317 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _615)));
    float _4276 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2372 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2377 = cbInstanceData._m0[_575 + 6u].w * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)));
    float _2382 = _534 / cbSceneParam._m0[86u].x;
    float _2383 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2397 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2399 = _2397.x;
    float _2400 = _2397.y;
    float _2401 = _2397.z;
    float _2402 = _2397.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2461 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2462 = _2461 / _468;
        float _2473 = _2462 * _519;
        float _2474 = _520 * _2462;
        float _2475 = (-0.0) - _2474;
        float _2476 = _2462 * _521;
        float _2478 = (cbSceneParam._m0[77u].w * _2475) / _2461;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2474;
        float _2486 = sqrt(((_2473 * _2473) + (_2474 * _2474)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2461)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2705;
        if (abs((_2475 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2705 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2646 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2705 = ((abs(_2486 / _2475) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2496 * _2655) - exp2(_2496 * _2656)) * _2644))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2707 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, 1.0), 0.0);
        float _2716 = exp2((_2705 * (-1.44269502162933349609375)) * (1.0 - _2707.w));
        float _2717 = log2(_2716);
        float _2733 = log2(_2402);
        _2498 = (exp2(_2733 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].x)) * _2707.x) / cbSceneParam._m0[78u].x)) + _2399;
        _2500 = (exp2(_2733 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].y)) * _2707.y) / cbSceneParam._m0[78u].y)) + _2400;
        _2502 = (exp2(_2733 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].z)) * _2707.z) / cbSceneParam._m0[78u].z)) + _2401;
        _2504 = _2716 * _2402;
    }
    else
    {
        _2498 = _2399;
        _2500 = _2400;
        _2502 = _2401;
        _2504 = _2402;
    }
    float _2516 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2517 = _2516 == 3.0;
    float _2518 = log2(_2504);
    float _2522 = exp2(_2518 * cbSceneParam._m0[78u].x);
    float _2523 = exp2(_2518 * cbSceneParam._m0[78u].y);
    float _2524 = exp2(_2518 * cbSceneParam._m0[78u].z);
    float _2525 = _2522 * (isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0)));
    float _2526 = _2523 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)));
    float _2527 = _2524 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2536 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2536 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.y = _2536 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.z = _2536 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.w = _2377;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2335) * _2372) * _2522) * _2536;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2336) * _2372) * _2523) * _2536;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2337) * _2372) * _2524) * _2536;
    SV_Target_1.w = _2377;
}


