#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _984;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _237 = _234.x;
    float _242 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _247 = fract(abs(_242));
    float _255 = (TEXCOORD_3.x + 0.5) - ((((_242 >= ((-0.0) - _242)) ? _247 : ((-0.0) - _247)) * 3.0) - _237);
    float _256 = ceil(_255);
    float _3088 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _258 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _264 = sin(cbMtdParam._m0[12u].y);
    float _265 = cos(cbMtdParam._m0[12u].y);
    float _266 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _267 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _286 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_267, (-0.0) - _264, _265 * _266) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_267, _265, _266 * _264) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _297 = cbMtdParam._m0[9u].x * _286.x;
    float _298 = cbMtdParam._m0[9u].y * _286.y;
    float _299 = cbMtdParam._m0[9u].z * _286.z;
    float _306 = ((_297 - cbMtdParam._m0[11u].x) * _258) + cbMtdParam._m0[11u].x;
    float _307 = ((_298 - cbMtdParam._m0[11u].y) * _258) + cbMtdParam._m0[11u].y;
    float _308 = ((_299 - cbMtdParam._m0[11u].z) * _258) + cbMtdParam._m0[11u].z;
    float _312 = abs(cbMtdParam._m0[12u].z * _255);
    float _316 = (((_312 * cbMtdParam._m0[12u].w) - _237) * _312) + _237;
    float _3099 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
    vec4 _329 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _340 = cbMtdParam._m0[10u].x * _329.x;
    float _341 = cbMtdParam._m0[10u].y * _329.y;
    float _342 = cbMtdParam._m0[10u].z * _329.z;
    float _343 = _340 * _317;
    float _344 = _341 * _317;
    float _345 = _342 * _317;
    float _352 = exp2(log2(_317) * cbMtdParam._m0[13u].x);
    float _362 = (_352 * ((_340 - _306) - _343)) + _306;
    float _363 = (_352 * ((_341 - _307) - _344)) + _307;
    float _364 = (_352 * ((_342 - _308) - _345)) + _308;
    float _366 = _317 * 100.0;
    float _3110 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = _258 - (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)));
    float _3121 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _374 = ((isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _388 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _396 = (_388.x * 2.0) + (-1.0);
    float _397 = (_388.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_396, _397), vec2(_396, _397));
    float _3132 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = sqrt(1.0 - (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0))));
    float _407 = ((cbMtdParam._m0[13u].y + _388.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _408 = _297 * _258;
    float _409 = _298 * _258;
    float _410 = _299 * _258;
    float _429 = fma(_403, _212, fma(_397, _204 * TANGENT.x, (_190 * _182) * _396));
    float _432 = fma(_403, _213, fma(_397, _204 * TANGENT.y, (_190 * _183) * _396));
    float _435 = fma(_403, _214, fma(_397, _204 * TANGENT.z, (_190 * _184) * _396));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    float _440 = _439 * _429;
    float _441 = _439 * _432;
    float _442 = _439 * _435;
    float _3143 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _443 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
    float _3154 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _444 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3176 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3187 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3198 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _448 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _464 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _515 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _505);
    float _516 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _505);
    float _517 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _505);
    float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
    float _522 = _515 * _521;
    float _523 = _516 * _521;
    float _524 = _517 * _521;
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _552 = fma(_442, cbSceneParam._m0[5u].z, fma(_441, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _440));
    float _555 = fma(_442, cbSceneParam._m0[6u].z, fma(_441, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _440));
    float _558 = fma(_442, cbSceneParam._m0[7u].z, fma(_441, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _440));
    uint _571 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _571 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3209 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _585 = 1.0 - _448;
    float _586 = _582 * _585;
    float _587 = _583 * _585;
    float _588 = _584 * _585;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _448;
    float _594 = (_583 + (-0.039999999105930328369140625)) * _448;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _448;
    float _596 = _593 + 0.039999999105930328369140625;
    float _598 = _594 + 0.039999999105930328369140625;
    float _599 = _595 + 0.039999999105930328369140625;
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _611 = _608.x * TEXCOORD_3.w;
    float _612 = dot(vec3(_440, _441, _442), vec3(_522, _523, _524));
    float _615 = _612 * 2.0;
    float _619 = (_615 * _440) - _522;
    float _620 = (_615 * _441) - _523;
    float _621 = (_615 * _442) - _524;
    float _625 = abs(dot(vec3(_522, _523, _524), vec3(_440, _441, _442)));
    float _3242 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _627 = sqrt(_444);
    float _639 = exp2((_627 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _645 = (1.0 - _639) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _646 = _639 * _627;
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _983;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_682, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674));
        float _713 = fma(_682, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674));
        float _717 = fma(_682, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674));
        float _741 = _674 + _440;
        float _742 = _678 + _441;
        float _743 = _682 + _442;
        float _753 = fma(_743, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) - _709;
        float _754 = fma(_743, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) - _713;
        float _755 = fma(_743, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) - _717;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _811 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_777.x + (-0.5));
        float _813 = _811 * (_777.y + (-0.5));
        float _814 = _811 * (_777.z + (-0.5));
        float _821 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_784.x + (-0.5));
        float _823 = _821 * (_784.y + (-0.5));
        float _824 = _821 * (_784.z + (-0.5));
        float _831 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_791.x + (-0.5));
        float _833 = _831 * (_791.y + (-0.5));
        float _834 = _831 * (_791.z + (-0.5));
        float _841 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_798.x + (-0.5));
        float _843 = _841 * (_798.y + (-0.5));
        float _844 = _841 * (_798.z + (-0.5));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = _812 * 0.5;
        float _849 = _822 * 0.5;
        float _850 = _832 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _865 = (dot(vec3(_440, _441, _442), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _875 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3290 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_877 + 1.0))) + _882) * _845;
        float _892 = _813 * 0.5;
        float _893 = _823 * 0.5;
        float _894 = _833 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_440, _441, _442), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3323 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_919 + 1.0))) + _924) * _846;
        float _934 = _814 * 0.5;
        float _935 = _824 * 0.5;
        float _936 = _834 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_440, _441, _442), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3356 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_961 + 1.0))) + _966) * _847;
        _983 = _814;
        _985 = _813;
        _986 = _812;
        _987 = _824;
        _988 = _823;
        _989 = _822;
        _990 = _834;
        _991 = _833;
        _992 = _832;
        _993 = _847;
        _994 = _846;
        _995 = _845;
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
    }
    else
    {
        _983 = _984;
        _985 = _984;
        _986 = _984;
        _987 = _984;
        _988 = _984;
        _989 = _984;
        _990 = _984;
        _991 = _984;
        _992 = _984;
        _993 = _984;
        _994 = _984;
        _995 = _984;
        _996 = 0.0;
        _997 = 0.0;
        _998 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_682, cbModelParam._m0[30u].z, fma(_678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _674));
        float _1028 = fma(_682, cbModelParam._m0[31u].z, fma(_678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _674));
        float _1032 = fma(_682, cbModelParam._m0[32u].z, fma(_678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _674));
        float _1055 = _674 + _440;
        float _1056 = _678 + _441;
        float _1057 = _682 + _442;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_440, _441, _442), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3419 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_440, _441, _442), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3452 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_440, _441, _442), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3485 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _984;
        _1294 = _984;
        _1295 = _984;
        _1296 = _984;
        _1297 = _984;
        _1298 = _984;
        _1299 = _984;
        _1300 = _984;
        _1301 = _984;
        _1302 = _984;
        _1303 = _984;
        _1304 = _984;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _619 * 0.5;
    float _1362 = _620 * 0.5;
    float _1363 = _621 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_983, _987, _990, _993));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_985, _988, _991, _994));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_986, _989, _992, _995));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _444);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1477 = fma(_682, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674)) + cbModelParam._m0[13u].w;
        float _1481 = fma(_682, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674)) + cbModelParam._m0[14u].w;
        float _1485 = fma(_682, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674)) + cbModelParam._m0[15u].w;
        float _1488 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1491 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1494 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1522;
        if (_1488 > 0.0)
        {
            _1522 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1522 = frontier_phi_16_14_ladder;
        }
        float _1886;
        if (_1491 > 0.0)
        {
            _1886 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1886 = frontier_phi_25_21_ladder;
        }
        float _2222;
        if (_1494 > 0.0)
        {
            _2222 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2222 = frontier_phi_39_32_ladder;
        }
        float _2224 = isnan(_1886) ? _1522 : (isnan(_1522) ? _1886 : min(_1522, _1886));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1488) + _1477;
        float _2230 = (_2225 * _1491) + _1481;
        float _2231 = (_2225 * _1494) + _1485;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_15_39_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1510 = frontier_phi_15_39_ladder_2;
        _1512 = frontier_phi_15_39_ladder_1;
        _1514 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1430);
        _1510 = _1498.x * cbModelParam._m0[1u].y;
        _1512 = _1498.y * cbModelParam._m0[1u].y;
        _1514 = _1498.z * cbModelParam._m0[1u].y;
    }
    float _1518 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _444);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1518 : min(cbModelParam._m0[25u].w, _1518));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1576 = fma(_682, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674)) + cbModelParam._m0[21u].w;
        float _1580 = fma(_682, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674)) + cbModelParam._m0[22u].w;
        float _1584 = fma(_682, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674)) + cbModelParam._m0[23u].w;
        float _1587 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1590 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1593 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1891;
        if (_1587 > 0.0)
        {
            _1891 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1891 = frontier_phi_27_23_ladder;
        }
        float _2248;
        if (_1590 > 0.0)
        {
            _2248 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2248 = frontier_phi_41_34_ladder;
        }
        float _2417;
        if (_1593 > 0.0)
        {
            _2417 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2417 = frontier_phi_55_50_ladder;
        }
        float _2419 = isnan(_2248) ? _1891 : (isnan(_1891) ? _2248 : min(_1891, _2248));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1587) + _1576;
        float _2425 = (_2420 * _1590) + _1580;
        float _2426 = (_2420 * _1593) + _1584;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2427;
        float _2430 = _2427 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2426 > _2430) || ((_2426 < _2428) || ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 < _2428) || (_2424 > _2430))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2426, cbModelParam._m0[17u].z, fma(_2425, cbModelParam._m0[17u].y, _2424 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2426, cbModelParam._m0[18u].z, fma(_2425, cbModelParam._m0[18u].y, _2424 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2426, cbModelParam._m0[19u].z, fma(_2425, cbModelParam._m0[19u].y, _2424 * cbModelParam._m0[19u].x))), _1519);
            frontier_phi_24_55_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1612 = frontier_phi_24_55_ladder_2;
        _1614 = frontier_phi_24_55_ladder_1;
        _1616 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1519);
        _1612 = _1596.x * cbModelParam._m0[1u].z;
        _1614 = _1596.y * cbModelParam._m0[1u].z;
        _1616 = _1596.z * cbModelParam._m0[1u].z;
    }
    float _1629 = (((_645 * _596) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1631 = (((_645 * _598) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1633 = (((_645 * _599) + _646) * _611) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1636 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1629 * cbSceneParam._m0[91u].x));
    uvec4 _1652 = floatBitsToUint(cbInstanceData._m0[_571 + 5u]);
    uint _1654 = _1652.x * 14u;
    uint _1655 = _1654 + 13u;
    float _1660 = _611 + (-1.0);
    float _1663 = (cbLight._m0[_1655].x * _1660) + 1.0;
    float _1664 = (cbLight._m0[_1655].y * _1660) + 1.0;
    uint _1665 = _1654 + 5u;
    float _1671 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
    uint _1675 = _1654 + 4u;
    float _1682 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1686 = _1654 | 1u;
    float _1697 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_440, _441, _442));
    float _1700 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_440, _441, _442));
    float _3621 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _3632 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1705 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1707 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.3183098733425140380859375;
    float _1714 = ((cbLight._m0[_1665].x * _1671) * _1707) + ((cbLight._m0[_1675].x * _1682) * _1705);
    float _1715 = ((_1671 * cbLight._m0[_1665].y) * _1707) + ((_1682 * cbLight._m0[_1675].y) * _1705);
    float _1716 = ((_1671 * cbLight._m0[_1665].z) * _1707) + ((_1682 * cbLight._m0[_1675].z) * _1705);
    uint _1718 = _1654 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _444) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1654].x + _522;
    float _1734 = cbLight._m0[_1654].y + _523;
    float _1735 = cbLight._m0[_1654].z + _524;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1654].xyz));
    float _3643 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1747 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _1748 = dot(vec3(_440, _441, _442), vec3(_1740, _1741, _1742));
    float _3665 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1740, _1741, _1742));
    float _3676 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * 5.0);
    float _1769 = 0.959999978542327880859375 - _593;
    float _1771 = 0.959999978542327880859375 - _594;
    float _1772 = 0.959999978542327880859375 - _595;
    float _1779 = 1.0 - _1732;
    float _1790 = (0.5 / (((_1747 * ((_1746 * _1779) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1779) + _1732) * _1746))) * _1746;
    float _3687 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1803 = _1654 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _444) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1686].x + _522;
    float _1817 = cbLight._m0[_1686].y + _523;
    float _1818 = cbLight._m0[_1686].z + _524;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1686].xyz));
    float _3698 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1830 = dot(vec3(_440, _441, _442), vec3(_1823, _1824, _1825));
    float _3709 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1823, _1824, _1825));
    float _3720 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * 5.0);
    float _1856 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1747 * ((_1829 * _1856) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1856) + _1815) * _1829))) * _1829;
    float _3731 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1878 = (((((_1849 * _1769) + _596) * cbLight._m0[_1803].x) * _1868) * _1671) + (((((_1768 * _1769) + _596) * cbLight._m0[_1718].x) * _1792) * _1682);
    float _1879 = (((((_1849 * _1771) + _598) * cbLight._m0[_1803].y) * _1868) * _1671) + (((((_1768 * _1771) + _598) * cbLight._m0[_1718].y) * _1792) * _1682);
    float _1880 = (((((_1849 * _1772) + _599) * cbLight._m0[_1803].z) * _1868) * _1671) + (((((_1768 * _1772) + _599) * cbLight._m0[_1718].z) * _1792) * _1682);
    float _1994;
    float _1996;
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    if (_1652.y == 0u)
    {
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1935;
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1935;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1935;
        uvec4 _1950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1951 = _1950.x;
        uint _1962 = uint((float(_1950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _1951))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _1951)));
        float _1972 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1973 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        uint _1976 = uint(isnan(14.0) ? _1973 : (isnan(_1973) ? 14.0 : min(_1973, 14.0)));
        uvec4 _1981 = texelFetch(g_lightClusterGridBuffer, int(((_1976 << 2u) + (_1962 << 6u)) >> 2u));
        uint _1982 = _1981.x;
        uint _1983 = _1950.z;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        if (((((1u << ((_1983 >> 4u) & 15u)) + 4294967295u) & _1982) == 0u) || ((_1983 & 240u) == 0u))
        {
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
        }
        else
        {
            float _2101;
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            uint _2291 = 0u;
            uint _2300;
            bool _2301;
            for (;;)
            {
                _2300 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2291 << 2u)) >> 2u)).x;
                _2301 = _2300 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2301)
                {
                    frontier_phi_52_pred = _2285;
                    frontier_phi_52_pred_1 = _2290;
                    frontier_phi_52_pred_2 = _2289;
                    frontier_phi_52_pred_3 = _2288;
                    frontier_phi_52_pred_4 = _2287;
                    frontier_phi_52_pred_5 = _2286;
                }
                else
                {
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    uint _2466;
                    _2460 = _2285;
                    _2461 = _2286;
                    _2462 = _2287;
                    _2463 = _2288;
                    _2464 = _2289;
                    _2465 = _2290;
                    _2466 = _2300;
                    float _2366;
                    float _2367;
                    float _2368;
                    float _2369;
                    float _2370;
                    float _2371;
                    for (;;)
                    {
                        uint _2470 = uint(findLSB(_2466)) + (_2291 << 5u);
                        uint _2467 = (_2466 + 4294967295u) & _2466;
                        uint _2472 = _2470 * 48u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2472)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 3u)).x));
                        uint _2492 = (_2470 * 48u) + 4u;
                        vec4 _2505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2511 = (_2470 * 48u) + 8u;
                        vec3 _2522 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x));
                        float _2526 = _2486.x - _1936;
                        float _2527 = _2486.y - _1937;
                        float _2528 = _2486.z - _1938;
                        float _2529 = dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528));
                        float _2532 = inversesqrt(_2529);
                        float _2533 = _2532 * _2526;
                        float _2534 = _2532 * _2527;
                        float _2535 = _2532 * _2528;
                        float _2536 = dot(vec3(_552, _555, _558), vec3(_2533, _2534, _2535));
                        float _2541 = 1.0 - (_2529 * _2486.w);
                        float _3752 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _2542 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                        float _2543 = sqrt(_2529) * _2505.w;
                        float _2546 = 1.39999997615814208984375 / (_2543 + 1.39999997615814208984375);
                        float _2547 = _2546 * _2546;
                        float _2550 = ((1.0 - _2547) * _2536) + _2547;
                        float _2553 = _2543 * _2543;
                        float _2557 = ((isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))) * _2542) / ((_2553 * 0.699999988079071044921875) + 1.0);
                        float _2561 = (-0.0) - _1936;
                        float _2562 = (-0.0) - _1937;
                        float _2563 = (-0.0) - _1938;
                        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
                        float _2568 = _2567 * _2561;
                        float _2569 = _2567 * _2562;
                        float _2570 = _2567 * _2563;
                        float _2578 = exp2(log2(1.0 / ((_2553 * 3.5) + 5.0)) * 0.25);
                        float _2579 = 1.0 - _627;
                        float _2586 = sqrt(1.0 - ((1.0 - (_2579 * _2579)) * (1.0 - (_2578 * _2578))));
                        float _2587 = _2586 * _2586;
                        float _2588 = _2587 * _2587;
                        float _2589 = _2568 + _2533;
                        float _2590 = _2569 + _2534;
                        float _2591 = _2570 + _2535;
                        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
                        float _2599 = dot(vec3(_552, _555, _558), vec3(_2568, _2569, _2570));
                        float _3768 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2602 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                        float _2603 = dot(vec3(_552, _555, _558), vec3(_2595 * _2589, _2595 * _2590, _2595 * _2591));
                        float _3779 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _2606 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                        float _2610 = ((_2606 * _2606) * (_2588 + (-1.0))) + 1.0;
                        float _2611 = _2546 * _2587;
                        float _2612 = _2611 * _2611;
                        float _2615 = ((1.0 - _2612) * _2536) + _2612;
                        float _3790 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2616 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                        float _2617 = 1.0 - _2587;
                        float _2627 = (0.5 / (((_2616 * ((_2602 * _2617) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2617) + _2587) * _2602))) * _2616;
                        float _3801 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2638 = (((_2588 * 3.1415927410125732421875) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) / ((_2610 * _2610) * ((_2553 * 2.1991131305694580078125) + 3.141590118408203125))) * _2542;
                        _2369 = (_2557 * _2505.x) + _2463;
                        _2370 = (_2557 * _2505.y) + _2464;
                        _2371 = (_2557 * _2505.z) + _2465;
                        _2366 = (_2638 * _2522.x) + _2460;
                        _2367 = (_2638 * _2522.y) + _2461;
                        _2368 = (_2638 * _2522.z) + _2462;
                        if (_2467 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2460 = _2366;
                            _2461 = _2367;
                            _2462 = _2368;
                            _2463 = _2369;
                            _2464 = _2370;
                            _2465 = _2371;
                            _2466 = _2467;
                        }
                    }
                    frontier_phi_52_pred = _2366;
                    frontier_phi_52_pred_1 = _2371;
                    frontier_phi_52_pred_2 = _2370;
                    frontier_phi_52_pred_3 = _2369;
                    frontier_phi_52_pred_4 = _2368;
                    frontier_phi_52_pred_5 = _2367;
                }
                _2101 = frontier_phi_52_pred;
                _2111 = frontier_phi_52_pred_1;
                _2109 = frontier_phi_52_pred_2;
                _2107 = frontier_phi_52_pred_3;
                _2105 = frontier_phi_52_pred_4;
                _2103 = frontier_phi_52_pred_5;
                uint _2292 = _2291 + 1u;
                if (_2292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2285 = _2101;
                    _2286 = _2103;
                    _2287 = _2105;
                    _2288 = _2107;
                    _2289 = _2109;
                    _2290 = _2111;
                    _2291 = _2292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
        }
        uvec4 _2114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2115 = _2114.z;
        uint _2117 = (_2115 >> 8u) & 15u;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        if (((4294967295u << _2117) & _1982) == 0u)
        {
            _2253 = _2100;
            _2255 = _2102;
            _2257 = _2104;
            _2259 = _2106;
            _2261 = _2108;
            _2263 = _2110;
        }
        else
        {
            float _2278 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float _2279 = _2278 * _1936;
            float _2280 = _2278 * _1937;
            float _2281 = _2278 * _1938;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2117 < ((_2115 >> 12u) & 15u))
            {
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2264;
                float _2443 = _2100;
                float _2444 = _2102;
                float _2445 = _2104;
                float _2446 = _2106;
                float _2447 = _2108;
                float _2448 = _2110;
                uint _2449 = _2117;
                uint _2458;
                bool _2459;
                for (;;)
                {
                    _2458 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2449 << 2u)) >> 2u)).x;
                    _2459 = _2458 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2459)
                    {
                        frontier_phi_61_pred = _2448;
                        frontier_phi_61_pred_1 = _2447;
                        frontier_phi_61_pred_2 = _2446;
                        frontier_phi_61_pred_3 = _2445;
                        frontier_phi_61_pred_4 = _2444;
                        frontier_phi_61_pred_5 = _2443;
                    }
                    else
                    {
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2667;
                        float _2668;
                        float _2669;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2677 = _2443;
                        float _2678 = _2444;
                        float _2679 = _2445;
                        float _2680 = _2446;
                        float _2681 = _2447;
                        float _2682 = _2448;
                        uint _2683 = _2458;
                        uint _2684;
                        vec4 _2709;
                        float _2710;
                        vec4 _2725;
                        vec3 _2737;
                        vec4 _2753;
                        vec4 _2769;
                        float _2816;
                        bool _2817;
                        for (;;)
                        {
                            uint _2694 = ((_2449 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2683));
                            _2684 = (_2683 + 4294967295u) & _2683;
                            uint _2696 = _2694 * 40u;
                            _2709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 3u)).x));
                            _2710 = _2709.w;
                            uint _2712 = (_2694 * 40u) + 4u;
                            _2725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 3u)).x));
                            uint _2727 = (_2694 * 40u) + 8u;
                            _2737 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 2u)).x));
                            uint _2740 = (_2694 * 40u) + 16u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2756 = (_2694 * 40u) + 20u;
                            _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            uint _2772 = (_2694 * 40u) + 24u;
                            vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            uint _2791 = (_2694 * 40u) + 28u;
                            vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2816 = fma(_1938, _2804.z, fma(_1937, _2804.y, _2804.x * _1936)) + _2804.w;
                            _2817 = !((fma(_1938, _2785.z, fma(_1937, _2785.y, _2785.x * _1936)) + _2785.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2817)
                            {
                                float _2844 = _2709.x - _1936;
                                float _2845 = _2709.y - _1937;
                                float _2846 = _2709.z - _1938;
                                float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                                float _2850 = inversesqrt(_2847);
                                float _2851 = _2850 * _2844;
                                float _2852 = _2850 * _2845;
                                float _2853 = _2850 * _2846;
                                float _2857 = 1.0 - (_2847 / (_2710 * _2710));
                                float _3812 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2858 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2862 = sqrt(_2847) * _2725.w;
                                float _2864 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                                float _2865 = _2864 * _2864;
                                float _2868 = ((1.0 - _2865) * dot(vec3(_2851, _2852, _2853), vec3(_552, _555, _558))) + _2865;
                                float _2871 = _2862 * _2862;
                                float _2875 = (fma(_1938, _2753.z, fma(_1937, _2753.y, _2753.x * _1936)) + _2753.w) / _2816;
                                float _2876 = (fma(_1938, _2769.z, fma(_1937, _2769.y, _2769.x * _1936)) + _2769.w) / _2816;
                                float _2880 = 1.0 - dot(vec2(_2875, _2876), vec2(_2875, _2876));
                                float _3828 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                                float _2882 = _2881 * (((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2858) / ((_2871 * 0.699999988079071044921875) + 1.0));
                                float _2894 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                                float _2895 = 1.0 - _627;
                                float _2902 = sqrt(1.0 - ((1.0 - (_2895 * _2895)) * (1.0 - (_2894 * _2894))));
                                float _2903 = _2902 * _2902;
                                float _2904 = _2903 * _2903;
                                float _2905 = _2851 - _2279;
                                float _2906 = _2852 - _2280;
                                float _2907 = _2853 - _2281;
                                float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                                float _2915 = dot(vec3(_552, _555, _558), vec3((-0.0) - _2279, (-0.0) - _2280, (-0.0) - _2281));
                                float _3839 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2918 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                                float _2919 = dot(vec3(_552, _555, _558), vec3(_2911 * _2905, _2911 * _2906, _2911 * _2907));
                                float _3850 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2922 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2926 = ((_2922 * _2922) * (_2904 + (-1.0))) + 1.0;
                                float _2927 = _2864 * _2903;
                                float _2928 = _2927 * _2927;
                                float _2934 = ((1.0 - _2928) * dot(vec3(_552, _555, _558), vec3(_2851, _2852, _2853))) + _2928;
                                float _3861 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                                float _2936 = 1.0 - _2903;
                                float _2946 = (0.5 / (((_2935 * ((_2918 * _2936) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2935 * _2936) + _2903) * _2918))) * _2935;
                                float _3872 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2956 = (_2881 * _2858) * (((_2904 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2926 * _2926) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _2882 * _2725.z;
                                frontier_phi_67_pred_1 = _2882 * _2725.y;
                                frontier_phi_67_pred_2 = _2882 * _2725.x;
                                frontier_phi_67_pred_3 = _2956 * _2737.z;
                                frontier_phi_67_pred_4 = _2956 * _2737.y;
                                frontier_phi_67_pred_5 = _2956 * _2737.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _2965 = frontier_phi_67_pred;
                            _2964 = frontier_phi_67_pred_1;
                            _2963 = frontier_phi_67_pred_2;
                            _2962 = frontier_phi_67_pred_3;
                            _2961 = frontier_phi_67_pred_4;
                            _2960 = frontier_phi_67_pred_5;
                            _2667 = _2963 + _2680;
                            _2668 = _2964 + _2681;
                            _2669 = _2965 + _2682;
                            _2664 = _2960 + _2677;
                            _2665 = _2961 + _2678;
                            _2666 = _2962 + _2679;
                            if (_2684 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2667;
                                _2681 = _2668;
                                _2682 = _2669;
                                _2683 = _2684;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2669;
                        frontier_phi_61_pred_1 = _2668;
                        frontier_phi_61_pred_2 = _2667;
                        frontier_phi_61_pred_3 = _2666;
                        frontier_phi_61_pred_4 = _2665;
                        frontier_phi_61_pred_5 = _2664;
                    }
                    _2264 = frontier_phi_61_pred;
                    _2262 = frontier_phi_61_pred_1;
                    _2260 = frontier_phi_61_pred_2;
                    _2258 = frontier_phi_61_pred_3;
                    _2256 = frontier_phi_61_pred_4;
                    _2254 = frontier_phi_61_pred_5;
                    uint _2450 = _2449 + 1u;
                    if (_2450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2443 = _2254;
                        _2444 = _2256;
                        _2445 = _2258;
                        _2446 = _2260;
                        _2447 = _2262;
                        _2448 = _2264;
                        _2449 = _2450;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2264;
                frontier_phi_43_44_ladder_1 = _2260;
                frontier_phi_43_44_ladder_2 = _2262;
                frontier_phi_43_44_ladder_3 = _2258;
                frontier_phi_43_44_ladder_4 = _2256;
                frontier_phi_43_44_ladder_5 = _2254;
            }
            else
            {
                frontier_phi_43_44_ladder = _2110;
                frontier_phi_43_44_ladder_1 = _2106;
                frontier_phi_43_44_ladder_2 = _2108;
                frontier_phi_43_44_ladder_3 = _2104;
                frontier_phi_43_44_ladder_4 = _2102;
                frontier_phi_43_44_ladder_5 = _2100;
            }
            _2253 = frontier_phi_43_44_ladder_5;
            _2255 = frontier_phi_43_44_ladder_4;
            _2257 = frontier_phi_43_44_ladder_3;
            _2259 = frontier_phi_43_44_ladder_1;
            _2261 = frontier_phi_43_44_ladder_2;
            _2263 = frontier_phi_43_44_ladder;
        }
        float _2268 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
        _1994 = (_2268 * _2259) + _1714;
        _1996 = (_2268 * _2261) + _1715;
        _1998 = (_2268 * _2263) + _1716;
        _2000 = ((_2253 * _596) * _2268) + _1878;
        _2002 = ((_2255 * _598) * _2268) + _1879;
        _2004 = ((_2257 * _599) * _2268) + _1880;
    }
    else
    {
        _1994 = _1714;
        _1996 = _1715;
        _1998 = _1716;
        _2000 = _1878;
        _2002 = _1879;
        _2004 = _1880;
    }
    uint _2010 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _2016 = (cbMtdParam._m0[13u].w * ((_352 * ((_340 - _408) - _343)) + _408)) * cbInstanceData._m0[_2010].x;
    float _2017 = (cbMtdParam._m0[13u].w * ((_352 * ((_341 - _409) - _344)) + _409)) * cbInstanceData._m0[_2010].y;
    float _2018 = (cbMtdParam._m0[13u].w * ((_352 * ((_342 - _410) - _345)) + _410)) * cbInstanceData._m0[_2010].z;
    float _3888 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3899 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3910 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3921 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2036 = (((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1994 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _611))) + ((_2000 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + _2016;
    float _2038 = (_2017 + ((_2002 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1996 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _611)));
    float _2040 = (_2018 + ((_2004 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1998 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _611)));
    float _3947 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2053 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _2058 = cbInstanceData._m0[_571 + 6u].w * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)));
    float _2063 = _530 / cbSceneParam._m0[86u].x;
    float _2064 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, (log2((isnan(cbSceneParam._m0[77u].w) ? _464 : (isnan(_464) ? cbSceneParam._m0[77u].w : min(_464, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2080 = _2078.x;
    float _2081 = _2078.y;
    float _2082 = _2078.z;
    float _2083 = _2078.w;
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    if (_464 > cbSceneParam._m0[78u].w)
    {
        float _2125 = isnan(_464) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _464 : min(cbSceneParam._m0[80u].w, _464));
        float _2126 = _2125 / _464;
        float _2137 = _2126 * _515;
        float _2138 = _516 * _2126;
        float _2139 = (-0.0) - _2138;
        float _2140 = _2126 * _517;
        float _2142 = (cbSceneParam._m0[77u].w * _2139) / _2125;
        float _2143 = _2142 + cbSceneParam._m0[79u].w;
        float _2144 = cbSceneParam._m0[79u].w - _2138;
        float _2150 = sqrt(((_2137 * _2137) + (_2138 * _2138)) + (_2140 * _2140));
        float _2153 = (1.0 - (cbSceneParam._m0[77u].w / _2125)) * _2150;
        float _2159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2379;
        if (abs((_2139 - _2142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2379 = ((((_2143 > 0.0) ? exp2(_2159 * _2143) : (2.0 - exp2(_2161 * _2143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2153;
        }
        else
        {
            float _2314 = 1.0 / cbSceneParam._m0[80u].x;
            float _2315 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : max(_2143, _2144));
            float _2316 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : min(_2143, _2144));
            float _2325 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : min(_2315, 0.0));
            float _2326 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : min(_2316, 0.0));
            _2379 = ((abs(_2150 / _2139) * cbSceneParam._m0[80u].y) * ((((_2325 - _2326) * 2.0) - ((exp2(_2159 * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)))) - exp2(_2159 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0))))) * _2314)) - ((exp2(_2161 * _2325) - exp2(_2161 * _2326)) * _2314))) + (_2153 * cbSceneParam._m0[80u].z);
        }
        vec4 _2381 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, 1.0), 0.0);
        float _2390 = exp2((_2379 * (-1.44269502162933349609375)) * (1.0 - _2381.w));
        float _2391 = log2(_2390);
        float _2407 = log2(_2083);
        _2163 = (exp2(_2407 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2391 * cbSceneParam._m0[78u].x)) * _2381.x) / cbSceneParam._m0[78u].x)) + _2080;
        _2165 = (exp2(_2407 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2391 * cbSceneParam._m0[78u].y)) * _2381.y) / cbSceneParam._m0[78u].y)) + _2081;
        _2167 = (exp2(_2407 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2391 * cbSceneParam._m0[78u].z)) * _2381.z) / cbSceneParam._m0[78u].z)) + _2082;
        _2169 = _2390 * _2083;
    }
    else
    {
        _2163 = _2080;
        _2165 = _2081;
        _2167 = _2082;
        _2169 = _2083;
    }
    float _2181 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2182 = _2181 == 3.0;
    float _2183 = log2(_2169);
    float _2187 = exp2(_2183 * cbSceneParam._m0[78u].x);
    float _2188 = exp2(_2183 * cbSceneParam._m0[78u].y);
    float _2189 = exp2(_2183 * cbSceneParam._m0[78u].z);
    float _2190 = _2187 * (isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)));
    float _2191 = _2188 * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)));
    float _2192 = _2189 * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2201 = (_2181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2201 * (_2182 ? _2190 : (_2190 + (cbSceneParam._m0[72u].w * _2163)));
    SV_Target.y = _2201 * (_2182 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2165)));
    SV_Target.z = _2201 * (_2182 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.w = _2058;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2016) * _2053) * _2187) * _2201;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2017) * _2053) * _2188) * _2201;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2018) * _2053) * _2189) * _2201;
    SV_Target_1.w = _2058;
}


