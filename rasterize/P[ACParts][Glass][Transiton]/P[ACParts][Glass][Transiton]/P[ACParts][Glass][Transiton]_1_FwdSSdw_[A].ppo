#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_13;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_Glass_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1031;
float _3213;
float _3214;
float _3215;
float _3216;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _243 = _240.x;
    float _248 = cbMtdParam._m0[14u].z * 0.16666667163372039794921875;
    float _253 = fract(abs(_248));
    float _261 = (TEXCOORD_3.x + 0.5) - ((((_248 >= ((-0.0) - _248)) ? _253 : ((-0.0) - _253)) * 3.0) - _243);
    float _262 = ceil(_261);
    float _3225 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _270 = sin(cbMtdParam._m0[12u].y);
    float _271 = cos(cbMtdParam._m0[12u].y);
    float _272 = TEXCOORD - cbMtdParam._m0[12u].x;
    float _273 = TEXCOORD_1 - cbMtdParam._m0[12u].x;
    vec4 _292 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_273, (-0.0) - _270, _271 * _272) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_273, _271, _272 * _270) + cbMtdParam._m0[12u].x)) + cbTextureTilingScale._m0[1u].w));
    float _303 = cbMtdParam._m0[9u].x * _292.x;
    float _304 = cbMtdParam._m0[9u].y * _292.y;
    float _305 = cbMtdParam._m0[9u].z * _292.z;
    float _312 = ((_303 - cbMtdParam._m0[11u].x) * _264) + cbMtdParam._m0[11u].x;
    float _313 = ((_304 - cbMtdParam._m0[11u].y) * _264) + cbMtdParam._m0[11u].y;
    float _314 = ((_305 - cbMtdParam._m0[11u].z) * _264) + cbMtdParam._m0[11u].z;
    float _318 = abs(cbMtdParam._m0[12u].z * _261);
    float _322 = (((_318 * cbMtdParam._m0[12u].w) - _243) * _318) + _243;
    float _3236 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _323 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    vec4 _335 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _346 = cbMtdParam._m0[10u].x * _335.x;
    float _347 = cbMtdParam._m0[10u].y * _335.y;
    float _348 = cbMtdParam._m0[10u].z * _335.z;
    float _349 = _346 * _323;
    float _350 = _347 * _323;
    float _351 = _348 * _323;
    float _358 = exp2(log2(_323) * cbMtdParam._m0[13u].x);
    float _368 = (_358 * ((_346 - _312) - _349)) + _312;
    float _369 = (_358 * ((_347 - _313) - _350)) + _313;
    float _370 = (_358 * ((_348 - _314) - _351)) + _314;
    float _372 = _323 * 100.0;
    float _3247 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = _264 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)));
    float _3258 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = ((isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * ((-1.0) - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    vec4 _394 = texture(sampler2D(P_ACParts_Glass_Transiton_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _402 = (_394.x * 2.0) + (-1.0);
    float _403 = (_394.y * 2.0) + (-1.0);
    float _404 = dot(vec2(_402, _403), vec2(_402, _403));
    float _3269 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _409 = sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))));
    float _413 = ((cbMtdParam._m0[13u].y + _394.z) * 0.5) + cbMtdParam._m0[13u].z;
    float _414 = _303 * _264;
    float _415 = _304 * _264;
    float _416 = _305 * _264;
    float _435 = fma(_409, _218, fma(_403, _210 * TANGENT.x, (_196 * _188) * _402));
    float _438 = fma(_409, _219, fma(_403, _210 * TANGENT.y, (_196 * _189) * _402));
    float _441 = fma(_409, _220, fma(_403, _210 * TANGENT.z, (_196 * _190) * _402));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3280 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _449 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _450 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3313 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3324 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3335 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _454 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    vec4 _535 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _537 = _535.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _711 = sqrt(((_521 * _521) + (_522 * _522)) + (_523 * _523));
        float _717 = (cbMatDynParam._m0[5u].x * _711) + cbMatDynParam._m0[5u].y;
        float _3346 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _722 = (cbMatDynParam._m0[5u].z * _711) + cbMatDynParam._m0[5u].w;
        float _3357 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) - _718)) + _718) < ((_537 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _573 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _576 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _590 = _589 + 9u;
    uint _591 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3368 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _603 = 1.0 - _454;
    float _604 = _600 * _603;
    float _605 = _601 * _603;
    float _606 = _602 * _603;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _454;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _454;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _454;
    float _614 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _629 = _626.x * TEXCOORD_3.w;
    float _630 = dot(vec3(_446, _447, _448), vec3(_528, _529, _530));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _446) - _528;
    float _638 = (_633 * _447) - _529;
    float _639 = (_633 * _448) - _530;
    float _643 = abs(dot(vec3(_528, _529, _530), vec3(_446, _447, _448)));
    float _3401 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_450);
    float _657 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _663 = (1.0 - _657) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _664 = _657 * _645;
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _756 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _760 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _764 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _788 = _692 + _446;
        float _789 = _696 + _447;
        float _790 = _700 + _448;
        float _800 = fma(_790, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) - _756;
        float _801 = fma(_790, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) - _760;
        float _802 = fma(_790, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) - _764;
        float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
        float _819 = ((_806 * _800) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_756 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_806 * _801) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_760 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_806 * _802) / cbModelParam._m0[34u].z) + ((((((_764 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(_446, _447, _448), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3449 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_446, _447, _448), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3482 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_446, _447, _448), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3515 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1032 = _860;
        _1033 = _859;
        _1034 = _871;
        _1035 = _870;
        _1036 = _869;
        _1037 = _881;
        _1038 = _880;
        _1039 = _879;
        _1040 = _894;
        _1041 = _893;
        _1042 = _892;
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _1031;
        _1032 = _1031;
        _1033 = _1031;
        _1034 = _1031;
        _1035 = _1031;
        _1036 = _1031;
        _1037 = _1031;
        _1038 = _1031;
        _1039 = _1031;
        _1040 = _1031;
        _1041 = _1031;
        _1042 = _1031;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1078 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1082 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1105 = _692 + _446;
        float _1106 = _696 + _447;
        float _1107 = _700 + _448;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_446, _447, _448), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3578 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_446, _447, _448), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3611 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_446, _447, _448), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3644 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1031;
        _1344 = _1031;
        _1345 = _1031;
        _1346 = _1031;
        _1347 = _1031;
        _1348 = _1031;
        _1349 = _1031;
        _1350 = _1031;
        _1351 = _1031;
        _1352 = _1031;
        _1353 = _1031;
        _1354 = _1031;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _637 * 0.5;
    float _1412 = _638 * 0.5;
    float _1413 = _639 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1030, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _450);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1541 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1544 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1572 = frontier_phi_19_17_ladder;
        }
        float _1960;
        if (_1541 > 0.0)
        {
            _1960 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1960 = frontier_phi_28_24_ladder;
        }
        float _2304;
        if (_1544 > 0.0)
        {
            _2304 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2304 = frontier_phi_42_35_ladder;
        }
        float _2306 = isnan(_1960) ? _1572 : (isnan(_1572) ? _1960 : min(_1572, _1960));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1538) + _1527;
        float _2312 = (_2307 * _1541) + _1531;
        float _2313 = (_2307 * _1544) + _1535;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2315 = (-1.0) - _2314;
        float _2317 = _2314 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2313 > _2317) || ((_2313 < _2315) || ((_2312 > _2317) || ((_2312 < _2315) || ((_2311 < _2315) || (_2311 > _2317))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_18_42_ladder = _2455.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2455.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2455.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_18_42_ladder_2;
        _1562 = frontier_phi_18_42_ladder_1;
        _1564 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1480);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _450);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1640 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1643 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1965;
        if (_1637 > 0.0)
        {
            _1965 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1965 = frontier_phi_30_26_ladder;
        }
        float _2330;
        if (_1640 > 0.0)
        {
            _2330 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2330 = frontier_phi_44_37_ladder;
        }
        float _2520;
        if (_1643 > 0.0)
        {
            _2520 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2520 = frontier_phi_62_55_ladder;
        }
        float _2522 = isnan(_2330) ? _1965 : (isnan(_1965) ? _2330 : min(_1965, _2330));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1637) + _1626;
        float _2528 = (_2523 * _1640) + _1630;
        float _2529 = (_2523 * _1643) + _1634;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_27_62_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_27_62_ladder_2;
        _1664 = frontier_phi_27_62_ladder_1;
        _1666 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1569);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_663 * _614) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1681 = (((_663 * _616) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_663 * _617) + _664) * _629) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    vec4 _1700 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_549, _550));
    float _1702 = _1700.w;
    float _1714 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1702);
    float _1715 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1702);
    float _1716 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1702);
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1728 = _629 + (-1.0);
    float _1731 = (cbLight._m0[_1723].x * _1728) + 1.0;
    float _1732 = (cbLight._m0[_1723].y * _1728) + 1.0;
    uint _1733 = _1722 + 5u;
    float _1739 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1743 = _1722 + 4u;
    float _1753 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1757 = _1722 | 1u;
    float _1768 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_446, _447, _448));
    float _1771 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_446, _447, _448));
    float _3780 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _3791 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1776 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.3183098733425140380859375;
    float _1778 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.3183098733425140380859375;
    float _1785 = ((cbLight._m0[_1733].x * _1739) * _1778) + (((cbLight._m0[_1743].x * _1714) * _1753) * _1776);
    float _1786 = ((_1739 * cbLight._m0[_1733].y) * _1778) + (((cbLight._m0[_1743].y * _1715) * _1753) * _1776);
    float _1787 = ((_1739 * cbLight._m0[_1733].z) * _1778) + (((cbLight._m0[_1743].z * _1716) * _1753) * _1776);
    uint _1789 = _1722 + 8u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _450) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1722].x + _528;
    float _1805 = cbLight._m0[_1722].y + _529;
    float _1806 = cbLight._m0[_1722].z + _530;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1722].xyz));
    float _3802 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _1818 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _1819 = dot(vec3(_446, _447, _448), vec3(_1811, _1812, _1813));
    float _3824 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1811, _1812, _1813));
    float _3835 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1803 * _1803;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1839 = exp2(log2(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * 5.0);
    float _1840 = 0.959999978542327880859375 - _611;
    float _1842 = 0.959999978542327880859375 - _612;
    float _1843 = 0.959999978542327880859375 - _613;
    float _1850 = 1.0 - _1803;
    float _1861 = (0.5 / (((_1818 * ((_1817 * _1850) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1850) + _1803) * _1817))) * _1817;
    float _3846 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    uint _1877 = _1722 + 9u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _450) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1757].x + _528;
    float _1891 = cbLight._m0[_1757].y + _529;
    float _1892 = cbLight._m0[_1757].z + _530;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1757].xyz));
    float _3857 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1904 = dot(vec3(_446, _447, _448), vec3(_1897, _1898, _1899));
    float _3868 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1897, _1898, _1899));
    float _3879 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1889 * _1889;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1923 = exp2(log2(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * 5.0);
    float _1930 = 1.0 - _1889;
    float _1940 = (0.5 / (((_1818 * ((_1903 * _1930) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1930) + _1889) * _1903))) * _1903;
    float _3890 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    float _1952 = (((((_1923 * _1840) + _614) * cbLight._m0[_1877].x) * _1942) * _1739) + ((((cbLight._m0[_1789].x * _1714) * ((_1839 * _1840) + _614)) * _1863) * _1753);
    float _1953 = (((((_1923 * _1842) + _616) * cbLight._m0[_1877].y) * _1942) * _1739) + ((((cbLight._m0[_1789].y * _1715) * ((_1839 * _1842) + _616)) * _1863) * _1753);
    float _1954 = (((((_1923 * _1843) + _617) * cbLight._m0[_1877].z) * _1942) * _1739) + ((((cbLight._m0[_1789].z * _1716) * ((_1839 * _1843) + _617)) * _1863) * _1753);
    float _2068;
    float _2070;
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    if (_1720.y == 0u)
    {
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2009;
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2009;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2009;
        uvec4 _2024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2025 = _2024.x;
        uint _2036 = uint((float(_2024.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2025))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2025)));
        float _2046 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2047 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        uint _2050 = uint(isnan(14.0) ? _2047 : (isnan(_2047) ? 14.0 : min(_2047, 14.0)));
        uvec4 _2055 = texelFetch(g_lightClusterGridBuffer, int(((_2050 << 2u) + (_2036 << 6u)) >> 2u));
        uint _2056 = _2055.x;
        uint _2057 = _2024.z;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        if (((((1u << ((_2057 >> 4u) & 15u)) + 4294967295u) & _2056) == 0u) || ((_2057 & 240u) == 0u))
        {
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
            _2184 = 0.0;
        }
        else
        {
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2183;
            float _2185;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            uint _2373 = 0u;
            uint _2382;
            bool _2383;
            for (;;)
            {
                _2382 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2373 << 2u)) >> 2u)).x;
                _2383 = _2382 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2383)
                {
                    frontier_phi_57_pred = _2368;
                    frontier_phi_57_pred_1 = _2372;
                    frontier_phi_57_pred_2 = _2371;
                    frontier_phi_57_pred_3 = _2370;
                    frontier_phi_57_pred_4 = _2369;
                    frontier_phi_57_pred_5 = _2367;
                }
                else
                {
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    uint _2569;
                    _2563 = _2367;
                    _2564 = _2368;
                    _2565 = _2369;
                    _2566 = _2370;
                    _2567 = _2371;
                    _2568 = _2372;
                    _2569 = _2382;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    for (;;)
                    {
                        uint _2573 = uint(findLSB(_2569)) + (_2373 << 5u);
                        uint _2570 = (_2569 + 4294967295u) & _2569;
                        uint _2575 = _2573 * 48u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2595 = (_2573 * 48u) + 4u;
                        vec4 _2608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2614 = (_2573 * 48u) + 8u;
                        vec3 _2625 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2614)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 2u)).x));
                        float _2629 = _2589.x - _2010;
                        float _2630 = _2589.y - _2011;
                        float _2631 = _2589.z - _2012;
                        float _2632 = dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631));
                        float _2635 = inversesqrt(_2632);
                        float _2636 = _2635 * _2629;
                        float _2637 = _2635 * _2630;
                        float _2638 = _2635 * _2631;
                        float _2639 = dot(vec3(_570, _573, _576), vec3(_2636, _2637, _2638));
                        float _2644 = 1.0 - (_2632 * _2589.w);
                        float _3911 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2645 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2646 = sqrt(_2632) * _2608.w;
                        float _2649 = 1.39999997615814208984375 / (_2646 + 1.39999997615814208984375);
                        float _2650 = _2649 * _2649;
                        float _2653 = ((1.0 - _2650) * _2639) + _2650;
                        float _2656 = _2646 * _2646;
                        float _2660 = ((isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))) * _2645) / ((_2656 * 0.699999988079071044921875) + 1.0);
                        float _2664 = (-0.0) - _2010;
                        float _2665 = (-0.0) - _2011;
                        float _2666 = (-0.0) - _2012;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2671 = _2670 * _2664;
                        float _2672 = _2670 * _2665;
                        float _2673 = _2670 * _2666;
                        float _2681 = exp2(log2(1.0 / ((_2656 * 3.5) + 5.0)) * 0.25);
                        float _2682 = 1.0 - _645;
                        float _2689 = sqrt(1.0 - ((1.0 - (_2682 * _2682)) * (1.0 - (_2681 * _2681))));
                        float _2690 = _2689 * _2689;
                        float _2691 = _2690 * _2690;
                        float _2692 = _2671 + _2636;
                        float _2693 = _2672 + _2637;
                        float _2694 = _2673 + _2638;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2702 = dot(vec3(_570, _573, _576), vec3(_2671, _2672, _2673));
                        float _3927 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2705 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                        float _2706 = dot(vec3(_570, _573, _576), vec3(_2698 * _2692, _2698 * _2693, _2698 * _2694));
                        float _3938 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2709 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2713 = ((_2709 * _2709) * (_2691 + (-1.0))) + 1.0;
                        float _2714 = _2649 * _2690;
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * _2639) + _2715;
                        float _3949 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2720 = 1.0 - _2690;
                        float _2730 = (0.5 / (((_2719 * ((_2705 * _2720) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2720) + _2690) * _2705))) * _2719;
                        float _3960 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2741 = (((_2691 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_2713 * _2713) * ((_2656 * 2.1991131305694580078125) + 3.141590118408203125))) * _2645;
                        _2467 = (_2660 * _2608.x) + _2566;
                        _2468 = (_2660 * _2608.y) + _2567;
                        _2469 = (_2660 * _2608.z) + _2568;
                        _2464 = (_2741 * _2625.x) + _2563;
                        _2465 = (_2741 * _2625.y) + _2564;
                        _2466 = (_2741 * _2625.z) + _2565;
                        if (_2570 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2563 = _2464;
                            _2564 = _2465;
                            _2565 = _2466;
                            _2566 = _2467;
                            _2567 = _2468;
                            _2568 = _2469;
                            _2569 = _2570;
                        }
                    }
                    frontier_phi_57_pred = _2465;
                    frontier_phi_57_pred_1 = _2469;
                    frontier_phi_57_pred_2 = _2468;
                    frontier_phi_57_pred_3 = _2467;
                    frontier_phi_57_pred_4 = _2466;
                    frontier_phi_57_pred_5 = _2464;
                }
                _2177 = frontier_phi_57_pred;
                _2185 = frontier_phi_57_pred_1;
                _2183 = frontier_phi_57_pred_2;
                _2181 = frontier_phi_57_pred_3;
                _2179 = frontier_phi_57_pred_4;
                _2175 = frontier_phi_57_pred_5;
                uint _2374 = _2373 + 1u;
                if (_2374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2367 = _2175;
                    _2368 = _2177;
                    _2369 = _2179;
                    _2370 = _2181;
                    _2371 = _2183;
                    _2372 = _2185;
                    _2373 = _2374;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
            _2184 = _2185;
        }
        uvec4 _2188 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2189 = _2188.z;
        uint _2191 = (_2189 >> 8u) & 15u;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        if (((4294967295u << _2191) & _2056) == 0u)
        {
            _2335 = _2174;
            _2337 = _2176;
            _2339 = _2178;
            _2341 = _2180;
            _2343 = _2182;
            _2345 = _2184;
        }
        else
        {
            float _2360 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _2361 = _2360 * _2010;
            float _2362 = _2360 * _2011;
            float _2363 = _2360 * _2012;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2191 < ((_2189 >> 12u) & 15u))
            {
                float _2336;
                float _2338;
                float _2340;
                float _2342;
                float _2344;
                float _2346;
                float _2546 = _2174;
                float _2547 = _2176;
                float _2548 = _2178;
                float _2549 = _2180;
                float _2550 = _2182;
                float _2551 = _2184;
                uint _2552 = _2191;
                uint _2561;
                bool _2562;
                for (;;)
                {
                    _2561 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                    _2562 = _2561 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2562)
                    {
                        frontier_phi_71_pred = _2551;
                        frontier_phi_71_pred_1 = _2550;
                        frontier_phi_71_pred_2 = _2549;
                        frontier_phi_71_pred_3 = _2548;
                        frontier_phi_71_pred_4 = _2547;
                        frontier_phi_71_pred_5 = _2546;
                    }
                    else
                    {
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2789 = _2546;
                        float _2790 = _2547;
                        float _2791 = _2548;
                        float _2792 = _2549;
                        float _2793 = _2550;
                        float _2794 = _2551;
                        uint _2795 = _2561;
                        uint _2796;
                        vec4 _2821;
                        float _2822;
                        vec4 _2837;
                        vec3 _2849;
                        vec4 _2865;
                        vec4 _2881;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2806 = ((_2552 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2795));
                            _2796 = (_2795 + 4294967295u) & _2795;
                            uint _2808 = _2806 * 40u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            _2822 = _2821.w;
                            uint _2824 = (_2806 * 40u) + 4u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2806 * 40u) + 8u;
                            _2849 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x));
                            uint _2852 = (_2806 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2806 * 40u) + 20u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2806 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2806 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2012, _2916.z, fma(_2011, _2916.y, _2916.x * _2010)) + _2916.w;
                            _2929 = !((fma(_2012, _2897.z, fma(_2011, _2897.y, _2897.x * _2010)) + _2897.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2821.x - _2010;
                                float _2957 = _2821.y - _2011;
                                float _2958 = _2821.z - _2012;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2822 * _2822));
                                float _3971 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2974 = sqrt(_2959) * _2837.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_570, _573, _576))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2012, _2865.z, fma(_2011, _2865.y, _2865.x * _2010)) + _2865.w) / _2928;
                                float _2988 = (fma(_2012, _2881.z, fma(_2011, _2881.y, _2881.x * _2010)) + _2881.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _3987 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _645;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2361;
                                float _3018 = _2964 - _2362;
                                float _3019 = _2965 - _2363;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2361, (-0.0) - _2362, (-0.0) - _2363));
                                float _3998 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _3031 = dot(vec3(_570, _573, _576), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _4009 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_570, _573, _576), vec3(_2963, _2964, _2965))) + _3040;
                                float _4020 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4031 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2994 * _2837.x;
                                frontier_phi_77_pred_1 = _2994 * _2837.z;
                                frontier_phi_77_pred_2 = _2994 * _2837.y;
                                frontier_phi_77_pred_3 = _3068 * _2849.z;
                                frontier_phi_77_pred_4 = _3068 * _2849.y;
                                frontier_phi_77_pred_5 = _3068 * _2849.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_77_pred;
                            _3077 = frontier_phi_77_pred_1;
                            _3076 = frontier_phi_77_pred_2;
                            _3074 = frontier_phi_77_pred_3;
                            _3073 = frontier_phi_77_pred_4;
                            _3072 = frontier_phi_77_pred_5;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            if (_2796 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2796;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2781;
                        frontier_phi_71_pred_1 = _2780;
                        frontier_phi_71_pred_2 = _2779;
                        frontier_phi_71_pred_3 = _2778;
                        frontier_phi_71_pred_4 = _2777;
                        frontier_phi_71_pred_5 = _2776;
                    }
                    _2346 = frontier_phi_71_pred;
                    _2344 = frontier_phi_71_pred_1;
                    _2342 = frontier_phi_71_pred_2;
                    _2340 = frontier_phi_71_pred_3;
                    _2338 = frontier_phi_71_pred_4;
                    _2336 = frontier_phi_71_pred_5;
                    uint _2553 = _2552 + 1u;
                    if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2546 = _2336;
                        _2547 = _2338;
                        _2548 = _2340;
                        _2549 = _2342;
                        _2550 = _2344;
                        _2551 = _2346;
                        _2552 = _2553;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2346;
                frontier_phi_46_47_ladder_1 = _2338;
                frontier_phi_46_47_ladder_2 = _2344;
                frontier_phi_46_47_ladder_3 = _2342;
                frontier_phi_46_47_ladder_4 = _2340;
                frontier_phi_46_47_ladder_5 = _2336;
            }
            else
            {
                frontier_phi_46_47_ladder = _2184;
                frontier_phi_46_47_ladder_1 = _2176;
                frontier_phi_46_47_ladder_2 = _2182;
                frontier_phi_46_47_ladder_3 = _2180;
                frontier_phi_46_47_ladder_4 = _2178;
                frontier_phi_46_47_ladder_5 = _2174;
            }
            _2335 = frontier_phi_46_47_ladder_5;
            _2337 = frontier_phi_46_47_ladder_1;
            _2339 = frontier_phi_46_47_ladder_4;
            _2341 = frontier_phi_46_47_ladder_3;
            _2343 = frontier_phi_46_47_ladder_2;
            _2345 = frontier_phi_46_47_ladder;
        }
        float _2350 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2068 = (_2350 * _2341) + _1785;
        _2070 = (_2350 * _2343) + _1786;
        _2072 = (_2350 * _2345) + _1787;
        _2074 = ((_2335 * _614) * _2350) + _1952;
        _2076 = ((_2337 * _616) * _2350) + _1953;
        _2078 = ((_2339 * _617) * _2350) + _1954;
    }
    else
    {
        _2068 = _1785;
        _2070 = _1786;
        _2072 = _1787;
        _2074 = _1952;
        _2076 = _1953;
        _2078 = _1954;
    }
    uint _2084 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _2090 = (cbMtdParam._m0[13u].w * ((_358 * ((_346 - _414) - _349)) + _414)) * cbInstanceData._m0[_2084].x;
    float _2091 = (cbMtdParam._m0[13u].w * ((_358 * ((_347 - _415) - _350)) + _415)) * cbInstanceData._m0[_2084].y;
    float _2092 = (cbMtdParam._m0[13u].w * ((_358 * ((_348 - _416) - _351)) + _416)) * cbInstanceData._m0[_2084].z;
    float _4047 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4058 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4069 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4080 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _2110 = (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2068 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _629))) + ((_2074 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + _2090;
    float _2112 = (_2091 + ((_2076 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2070 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _629)));
    float _2114 = (_2092 + ((_2078 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2072 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _629)));
    float _2115 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2116 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2123 = cbMtdParam._m0[2u].x * _2090;
    float _2124 = cbMtdParam._m0[2u].y * _2091;
    float _2125 = cbMtdParam._m0[2u].z * _2092;
    float _4106 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2127 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2132 = cbInstanceData._m0[_589 + 6u].w * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)));
    float _2137 = _549 / cbSceneParam._m0[86u].x;
    float _2138 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2152 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2154 = _2152.x;
    float _2155 = _2152.y;
    float _2156 = _2152.z;
    float _2157 = _2152.w;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2199 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2200 = _2199 / _470;
        float _2211 = _2200 * _521;
        float _2212 = _522 * _2200;
        float _2213 = (-0.0) - _2212;
        float _2214 = _2200 * _523;
        float _2216 = (cbSceneParam._m0[77u].w * _2213) / _2199;
        float _2217 = _2216 + cbSceneParam._m0[79u].w;
        float _2218 = cbSceneParam._m0[79u].w - _2212;
        float _2224 = sqrt(((_2211 * _2211) + (_2212 * _2212)) + (_2214 * _2214));
        float _2227 = (1.0 - (cbSceneParam._m0[77u].w / _2199)) * _2224;
        float _2233 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2235 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2477;
        if (abs((_2213 - _2216) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2477 = ((((_2217 > 0.0) ? exp2(_2233 * _2217) : (2.0 - exp2(_2235 * _2217))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2227;
        }
        else
        {
            float _2396 = 1.0 / cbSceneParam._m0[80u].x;
            float _2397 = isnan(_2218) ? _2217 : (isnan(_2217) ? _2218 : max(_2217, _2218));
            float _2398 = isnan(_2218) ? _2217 : (isnan(_2217) ? _2218 : min(_2217, _2218));
            float _2407 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : min(_2397, 0.0));
            float _2408 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : min(_2398, 0.0));
            _2477 = ((abs(_2224 / _2213) * cbSceneParam._m0[80u].y) * ((((_2407 - _2408) * 2.0) - ((exp2(_2233 * (isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0)))) - exp2(_2233 * (isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))))) * _2396)) - ((exp2(_2235 * _2407) - exp2(_2235 * _2408)) * _2396))) + (_2227 * cbSceneParam._m0[80u].z);
        }
        vec4 _2479 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, 1.0), 0.0);
        float _2488 = exp2((_2477 * (-1.44269502162933349609375)) * (1.0 - _2479.w));
        float _2489 = log2(_2488);
        float _2505 = log2(_2157);
        _2237 = (exp2(_2505 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].x)) * _2479.x) / cbSceneParam._m0[78u].x)) + _2154;
        _2239 = (exp2(_2505 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].y)) * _2479.y) / cbSceneParam._m0[78u].y)) + _2155;
        _2241 = (exp2(_2505 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].z)) * _2479.z) / cbSceneParam._m0[78u].z)) + _2156;
        _2243 = _2488 * _2157;
    }
    else
    {
        _2237 = _2154;
        _2239 = _2155;
        _2241 = _2156;
        _2243 = _2157;
    }
    bool _2515;
    vec4 _2253;
    vec4 _2275;
    float _2277;
    float _2281;
    float _2282;
    float _2283;
    float _2286;
    float _2289;
    float _2292;
    float _2293;
    bool _2303;
    for (;;)
    {
        _2253 = cbMatDynParam._m0[0u];
        float _2255 = roundEven(_2253.y);
        bool _2256 = _2255 == 3.0;
        float _2257 = log2(_2243);
        float _2261 = exp2(_2257 * cbSceneParam._m0[78u].x);
        float _2262 = exp2(_2257 * cbSceneParam._m0[78u].y);
        float _2263 = exp2(_2257 * cbSceneParam._m0[78u].z);
        float _2264 = _2261 * _2115;
        float _2265 = _2262 * _2116;
        float _2266 = _2263 * _2117;
        float _2273 = _537 + (-0.5);
        _2275 = cbMtdParam._m0[1u];
        _2277 = _2275.y * _2273;
        float _2280 = (_2255 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2281 = _2280 * (_2256 ? _2264 : (_2264 + (cbSceneParam._m0[72u].w * _2237)));
        _2282 = _2280 * (_2256 ? _2265 : (_2265 + (cbSceneParam._m0[72u].w * _2239)));
        _2283 = _2280 * (_2256 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2241)));
        _2286 = ((_2123 * _2127) * _2261) * _2280;
        _2289 = ((_2124 * _2127) * _2262) * _2280;
        _2292 = ((_2125 * _2127) * _2263) * _2280;
        _2293 = _2273 * 0.999000012874603271484375;
        _2303 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2303)
        {
            if ((cbInstanceData._m0[_589 + 7u].x + _2293) < 0.5)
            {
                _2515 = true;
                break;
            }
        }
        uint _2431 = _590 + uint(_2253.w);
        if ((cbInstanceData._m0[_2431].w < 1.0) && ((cbInstanceData._m0[_2431].w + _2293) < 0.5))
        {
            _2515 = true;
            break;
        }
        if ((_2277 + 1.0) < _2275.x)
        {
            _2515 = true;
            break;
        }
        _2515 = false;
        break;
    }
    float _2746;
    if (_2515)
    {
        discard_state = true;
        _2746 = 0.0;
    }
    else
    {
        _2746 = _2132;
    }
    SV_Target.x = _2281;
    SV_Target.y = _2282;
    SV_Target.z = _2283;
    SV_Target.w = _2746;
    SV_Target_1.x = _2286;
    SV_Target_1.y = _2289;
    SV_Target_1.z = _2292;
    SV_Target_1.w = _2132;
    discard_exit();
}


