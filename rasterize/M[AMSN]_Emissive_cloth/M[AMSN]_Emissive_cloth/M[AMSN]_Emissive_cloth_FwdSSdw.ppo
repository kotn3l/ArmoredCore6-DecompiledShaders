#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _867;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _237 = _230.w * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _253.x + cbMtdParam._m0[9u].x;
    vec4 _268 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3249 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))));
    vec4 _298 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _308 = fma(_285, _214, fma(_278, _206 * TANGENT.x, (_192 * _184) * _276));
    float _311 = fma(_285, _215, fma(_278, _206 * TANGENT.y, (_192 * _185) * _276));
    float _314 = fma(_285, _216, fma(_278, _206 * TANGENT.z, (_192 * _186) * _276));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3260 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _322 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _323 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3293 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3304 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3315 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _327 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _435 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _438 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3326 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _466 = 1.0 - _327;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _327;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _327;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _327;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _492 = _489.x * TEXCOORD_1.w;
    float _493 = dot(vec3(_319, _320, _321), vec3(_402, _403, _404));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _319) - _402;
    float _501 = (_496 * _320) - _403;
    float _502 = (_496 * _321) - _404;
    float _506 = abs(dot(vec3(_402, _403, _404), vec3(_319, _320, _321)));
    float _3359 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_323);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _595 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _599 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _624 = _556 + _319;
        float _625 = _560 + _320;
        float _626 = _564 + _321;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_319, _320, _321), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3407 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_319, _320, _321), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3440 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_319, _320, _321), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3473 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _911 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _915 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _938 = _556 + _319;
        float _939 = _560 + _320;
        float _940 = _564 + _321;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_319, _320, _321), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3536 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_319, _320, _321), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3569 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_319, _320, _321), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3602 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _500 * 0.5;
    float _1245 = _501 * 0.5;
    float _1246 = _502 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1376 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1379 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1407 = frontier_phi_16_14_ladder;
        }
        float _1636;
        if (_1376 > 0.0)
        {
            _1636 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1893;
        if (_1379 > 0.0)
        {
            _1893 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1893 = frontier_phi_37_32_ladder;
        }
        float _1895 = isnan(_1636) ? _1407 : (isnan(_1407) ? _1636 : min(_1407, _1636));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1373) + _1362;
        float _1901 = (_1896 * _1376) + _1366;
        float _1902 = (_1896 * _1379) + _1370;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_15_37_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_15_37_ladder_2;
        _1397 = frontier_phi_15_37_ladder_1;
        _1399 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1475 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1478 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1641;
        if (_1472 > 0.0)
        {
            _1641 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1641 = frontier_phi_27_23_ladder;
        }
        float _1920;
        if (_1475 > 0.0)
        {
            _1920 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1920 = frontier_phi_39_34_ladder;
        }
        float _2133;
        if (_1478 > 0.0)
        {
            _2133 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2133 = frontier_phi_48_45_ladder;
        }
        float _2135 = isnan(_1920) ? _1641 : (isnan(_1641) ? _1920 : min(_1641, _1920));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1472) + _1461;
        float _2141 = (_2136 * _1475) + _1465;
        float _2142 = (_2136 * _1478) + _1469;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2143;
        float _2146 = _2143 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2142 > _2146) || ((_2142 < _2144) || ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 < _2144) || (_2140 > _2146))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2142, cbModelParam._m0[17u].z, fma(_2141, cbModelParam._m0[17u].y, _2140 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2142, cbModelParam._m0[18u].z, fma(_2141, cbModelParam._m0[18u].y, _2140 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2142, cbModelParam._m0[19u].z, fma(_2141, cbModelParam._m0[19u].y, _2140 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_24_48_ladder = _2361.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2361.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2361.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_24_48_ladder_2;
        _1499 = frontier_phi_24_48_ladder_1;
        _1501 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1514 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    vec4 _1535 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1537 = _1535.w;
    float _1549 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1537);
    float _1550 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1537);
    float _1551 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1537);
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _492 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1594 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1598 = _1557 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_319, _320, _321));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_319, _320, _321));
    float _3738 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3749 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1574].x * _1580) * _1619) + (((cbLight._m0[_1584].x * _1549) * _1594) * _1617);
    float _1627 = ((_1580 * cbLight._m0[_1574].y) * _1619) + (((cbLight._m0[_1584].y * _1550) * _1594) * _1617);
    float _1628 = ((_1580 * cbLight._m0[_1574].z) * _1619) + (((cbLight._m0[_1584].z * _1551) * _1594) * _1617);
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1635)
    {
        _1646 = _1626;
        _1648 = _1627;
        _1650 = _1628;
    }
    else
    {
        uint _1654 = _1557 + 6u;
        float _1670 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1671 = _1670 * _1670;
        float _3760 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1673 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1646 = (((cbLight._m0[_1654].x * 0.3183098733425140380859375) * _1672) * _1673) + _1626;
        _1648 = (((cbLight._m0[_1654].y * 0.3183098733425140380859375) * _1672) * _1673) + _1627;
        _1650 = (((cbLight._m0[_1654].z * 0.3183098733425140380859375) * _1672) * _1673) + _1628;
    }
    bool _1653 = _1633.y == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1653)
    {
        _1691 = _1646;
        _1693 = _1648;
        _1695 = _1650;
    }
    else
    {
        uint _1864 = _1557 + 7u;
        float _1880 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _3776 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1883 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1691 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1646;
        _1693 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1648;
        _1695 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1650;
    }
    uint _1698 = _1557 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _323) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1557].x + _402;
    float _1714 = cbLight._m0[_1557].y + _403;
    float _1715 = cbLight._m0[_1557].z + _404;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1557].xyz));
    float _3792 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1727 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1728 = dot(vec3(_319, _320, _321), vec3(_1720, _1721, _1722));
    float _3814 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1720, _1721, _1722));
    float _3825 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1748 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1749 = 0.959999978542327880859375 - _474;
    float _1751 = 0.959999978542327880859375 - _475;
    float _1752 = 0.959999978542327880859375 - _476;
    float _1759 = 1.0 - _1712;
    float _1770 = (0.5 / (((_1727 * ((_1726 * _1759) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1759) + _1712) * _1726))) * _1726;
    float _3836 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1786 = _1557 + 9u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _323) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1598].x + _402;
    float _1800 = cbLight._m0[_1598].y + _403;
    float _1801 = cbLight._m0[_1598].z + _404;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1598].xyz));
    float _3847 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1813 = dot(vec3(_319, _320, _321), vec3(_1806, _1807, _1808));
    float _3858 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1806, _1807, _1808));
    float _3869 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1798 * _1798;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1832 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
    float _1839 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1727 * ((_1812 * _1839) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1839) + _1798) * _1812))) * _1812;
    float _3880 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    float _1861 = (((((_1832 * _1749) + _477) * cbLight._m0[_1786].x) * _1851) * _1580) + ((((cbLight._m0[_1698].x * _1549) * ((_1748 * _1749) + _477)) * _1772) * _1594);
    float _1862 = (((((_1832 * _1751) + _479) * cbLight._m0[_1786].y) * _1851) * _1580) + ((((cbLight._m0[_1698].y * _1550) * ((_1748 * _1751) + _479)) * _1772) * _1594);
    float _1863 = (((((_1832 * _1752) + _480) * cbLight._m0[_1786].z) * _1851) * _1580) + ((((cbLight._m0[_1698].z * _1551) * ((_1748 * _1752) + _480)) * _1772) * _1594);
    float _1925;
    float _1927;
    float _1929;
    if (_1635)
    {
        _1925 = _1861;
        _1927 = _1862;
        _1929 = _1863;
    }
    else
    {
        uint _1931 = _1557 + 2u;
        uint _1935 = _1557 + 10u;
        float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _323) * 0.949999988079071044921875);
        float _1950 = _1949 * _1949;
        float _1951 = cbLight._m0[_1931].x + _402;
        float _1952 = cbLight._m0[_1931].y + _403;
        float _1953 = cbLight._m0[_1931].z + _404;
        float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
        float _1958 = _1957 * _1951;
        float _1959 = _1957 * _1952;
        float _1960 = _1957 * _1953;
        float _1961 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1931].xyz));
        float _3891 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1965 = dot(vec3(_319, _320, _321), vec3(_1958, _1959, _1960));
        float _3902 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1969 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_1958, _1959, _1960));
        float _3913 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1950 * _1950;
        float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
        float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0);
        float _1991 = 1.0 - _1950;
        float _2001 = (0.5 / (((_1727 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1991) + _1950) * _1964))) * _1964;
        float _3924 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1925 = (((((_1984 * _1749) + _477) * cbLight._m0[_1935].x) * _2003) * _2004) + _1861;
        _1927 = (((((_1984 * _1751) + _479) * cbLight._m0[_1935].y) * _2003) * _2004) + _1862;
        _1929 = (((((_1984 * _1752) + _480) * cbLight._m0[_1935].z) * _2003) * _2004) + _1863;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1653)
    {
        _2039 = _1925;
        _2041 = _1927;
        _2043 = _1929;
    }
    else
    {
        uint _2050 = _1557 + 3u;
        uint _2054 = _1557 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _323) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _402;
        float _2071 = cbLight._m0[_2050].y + _403;
        float _2072 = cbLight._m0[_2050].z + _404;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2050].xyz));
        float _3940 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2084 = dot(vec3(_319, _320, _321), vec3(_2077, _2078, _2079));
        float _3951 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _3962 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1727 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _2110) + _2069) * _2083))) * _2083;
        float _3973 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2039 = (((((_2103 * _1749) + _477) * cbLight._m0[_2054].x) * _2122) * _2123) + _1925;
        _2041 = (((((_2103 * _1751) + _479) * cbLight._m0[_2054].y) * _2122) * _2123) + _1927;
        _2043 = (((((_2103 * _1752) + _480) * cbLight._m0[_2054].z) * _2122) * _2123) + _1929;
    }
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_1555.y == 0u)
    {
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2198;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2198;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2198;
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2214)));
        float _2235 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
        }
        else
        {
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2526)
                {
                    frontier_phi_63_pred = _2515;
                    frontier_phi_63_pred_1 = _2514;
                    frontier_phi_63_pred_2 = _2513;
                    frontier_phi_63_pred_3 = _2512;
                    frontier_phi_63_pred_4 = _2511;
                    frontier_phi_63_pred_5 = _2510;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2525;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2516 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2199;
                        float _2701 = _2660.y - _2200;
                        float _2702 = _2660.z - _2201;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_432, _435, _438), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _3999 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2199;
                        float _2736 = (-0.0) - _2200;
                        float _2737 = (-0.0) - _2201;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _508;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_432, _435, _438), vec3(_2742, _2743, _2744));
                        float _4015 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2777 = dot(vec3(_432, _435, _438), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4026 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4037 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4048 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2569 = (_2731 * _2679.x) + _2637;
                        _2570 = (_2731 * _2679.y) + _2638;
                        _2571 = (_2731 * _2679.z) + _2639;
                        _2566 = (_2812 * _2696.x) + _2634;
                        _2567 = (_2812 * _2696.y) + _2635;
                        _2568 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_63_pred = _2571;
                    frontier_phi_63_pred_1 = _2570;
                    frontier_phi_63_pred_2 = _2569;
                    frontier_phi_63_pred_3 = _2568;
                    frontier_phi_63_pred_4 = _2567;
                    frontier_phi_63_pred_5 = _2566;
                }
                _2377 = frontier_phi_63_pred;
                _2375 = frontier_phi_63_pred_1;
                _2373 = frontier_phi_63_pred_2;
                _2371 = frontier_phi_63_pred_3;
                _2369 = frontier_phi_63_pred_4;
                _2367 = frontier_phi_63_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2367;
                    _2511 = _2369;
                    _2512 = _2371;
                    _2513 = _2373;
                    _2514 = _2375;
                    _2515 = _2377;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
        }
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.z;
        uint _2383 = (_2381 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2383) & _2245) == 0u)
        {
            _2478 = _2366;
            _2480 = _2368;
            _2482 = _2370;
            _2484 = _2372;
            _2486 = _2374;
            _2488 = _2376;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _2504 = _2503 * _2199;
            float _2505 = _2503 * _2200;
            float _2506 = _2503 * _2201;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2383 < ((_2381 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2617 = _2366;
                float _2618 = _2368;
                float _2619 = _2370;
                float _2620 = _2372;
                float _2621 = _2374;
                float _2622 = _2376;
                uint _2623 = _2383;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2633)
                    {
                        frontier_phi_69_pred = _2622;
                        frontier_phi_69_pred_1 = _2621;
                        frontier_phi_69_pred_2 = _2620;
                        frontier_phi_69_pred_3 = _2619;
                        frontier_phi_69_pred_4 = _2618;
                        frontier_phi_69_pred_5 = _2617;
                    }
                    else
                    {
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        uint _2836 = _2632;
                        uint _2837;
                        vec4 _2862;
                        float _2863;
                        vec4 _2878;
                        vec3 _2890;
                        vec4 _2906;
                        vec4 _2922;
                        float _2969;
                        bool _2970;
                        for (;;)
                        {
                            uint _2847 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2836));
                            _2837 = (_2836 + 4294967295u) & _2836;
                            uint _2849 = _2847 * 40u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            _2863 = _2862.w;
                            uint _2865 = (_2847 * 40u) + 4u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2880 = (_2847 * 40u) + 8u;
                            _2890 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x));
                            uint _2893 = (_2847 * 40u) + 16u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2909 = (_2847 * 40u) + 20u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2925 = (_2847 * 40u) + 24u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2944 = (_2847 * 40u) + 28u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2969 = fma(_2201, _2957.z, fma(_2200, _2957.y, _2957.x * _2199)) + _2957.w;
                            _2970 = !((fma(_2201, _2938.z, fma(_2200, _2938.y, _2938.x * _2199)) + _2938.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2970)
                            {
                                float _2997 = _2862.x - _2199;
                                float _2998 = _2862.y - _2200;
                                float _2999 = _2862.z - _2201;
                                float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                                float _3003 = inversesqrt(_3000);
                                float _3004 = _3003 * _2997;
                                float _3005 = _3003 * _2998;
                                float _3006 = _3003 * _2999;
                                float _3010 = 1.0 - (_3000 / (_2863 * _2863));
                                float _4059 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3015 = sqrt(_3000) * _2878.w;
                                float _3017 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                                float _3018 = _3017 * _3017;
                                float _3021 = ((1.0 - _3018) * dot(vec3(_3004, _3005, _3006), vec3(_432, _435, _438))) + _3018;
                                float _3024 = _3015 * _3015;
                                float _3028 = (fma(_2201, _2906.z, fma(_2200, _2906.y, _2906.x * _2199)) + _2906.w) / _2969;
                                float _3029 = (fma(_2201, _2922.z, fma(_2200, _2922.y, _2922.x * _2199)) + _2922.w) / _2969;
                                float _3033 = 1.0 - dot(vec2(_3028, _3029), vec2(_3028, _3029));
                                float _4075 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3035 = _3034 * (((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3011) / ((_3024 * 0.699999988079071044921875) + 1.0));
                                float _3047 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                                float _3048 = 1.0 - _508;
                                float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                                float _3056 = _3055 * _3055;
                                float _3057 = _3056 * _3056;
                                float _3058 = _3004 - _2504;
                                float _3059 = _3005 - _2505;
                                float _3060 = _3006 - _2506;
                                float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                                float _3068 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4086 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3072 = dot(vec3(_432, _435, _438), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                                float _4097 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                                float _3080 = _3017 * _3056;
                                float _3081 = _3080 * _3080;
                                float _3087 = ((1.0 - _3081) * dot(vec3(_432, _435, _438), vec3(_3004, _3005, _3006))) + _3081;
                                float _4108 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3089 = 1.0 - _3056;
                                float _3099 = (0.5 / (((_3088 * ((_3071 * _3089) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3056) * _3071))) * _3088;
                                float _4119 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3109 = (_3034 * _3011) * (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3079 * _3079) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3035 * _2878.z;
                                frontier_phi_75_pred_1 = _3035 * _2878.y;
                                frontier_phi_75_pred_2 = _3035 * _2878.x;
                                frontier_phi_75_pred_3 = _3109 * _2890.z;
                                frontier_phi_75_pred_4 = _3109 * _2890.y;
                                frontier_phi_75_pred_5 = _3109 * _2890.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3118 = frontier_phi_75_pred;
                            _3117 = frontier_phi_75_pred_1;
                            _3116 = frontier_phi_75_pred_2;
                            _3115 = frontier_phi_75_pred_3;
                            _3114 = frontier_phi_75_pred_4;
                            _3113 = frontier_phi_75_pred_5;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            if (_2837 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2837;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2822;
                        frontier_phi_69_pred_1 = _2821;
                        frontier_phi_69_pred_2 = _2820;
                        frontier_phi_69_pred_3 = _2819;
                        frontier_phi_69_pred_4 = _2818;
                        frontier_phi_69_pred_5 = _2817;
                    }
                    _2489 = frontier_phi_69_pred;
                    _2487 = frontier_phi_69_pred_1;
                    _2485 = frontier_phi_69_pred_2;
                    _2483 = frontier_phi_69_pred_3;
                    _2481 = frontier_phi_69_pred_4;
                    _2479 = frontier_phi_69_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2479;
                        _2618 = _2481;
                        _2619 = _2483;
                        _2620 = _2485;
                        _2621 = _2487;
                        _2622 = _2489;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2489;
                frontier_phi_57_58_ladder_1 = _2487;
                frontier_phi_57_58_ladder_2 = _2485;
                frontier_phi_57_58_ladder_3 = _2483;
                frontier_phi_57_58_ladder_4 = _2481;
                frontier_phi_57_58_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_57_58_ladder = _2376;
                frontier_phi_57_58_ladder_1 = _2374;
                frontier_phi_57_58_ladder_2 = _2372;
                frontier_phi_57_58_ladder_3 = _2370;
                frontier_phi_57_58_ladder_4 = _2368;
                frontier_phi_57_58_ladder_5 = _2366;
            }
            _2478 = frontier_phi_57_58_ladder_5;
            _2480 = frontier_phi_57_58_ladder_4;
            _2482 = frontier_phi_57_58_ladder_3;
            _2484 = frontier_phi_57_58_ladder_2;
            _2486 = frontier_phi_57_58_ladder_1;
            _2488 = frontier_phi_57_58_ladder;
        }
        float _2493 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2257 = (_2493 * _2484) + _1691;
        _2259 = (_2493 * _2486) + _1693;
        _2261 = (_2493 * _2488) + _1695;
        _2263 = ((_2478 * _477) * _2493) + _2039;
        _2265 = ((_2480 * _479) * _2493) + _2041;
        _2267 = ((_2482 * _480) * _2493) + _2043;
    }
    else
    {
        _2257 = _1691;
        _2259 = _1693;
        _2261 = _1695;
        _2263 = _2039;
        _2265 = _2041;
        _2267 = _2043;
    }
    uint _2273 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _4135 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4146 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4157 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4168 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _2299 = (((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2257 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _492))) + ((_2263 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((_298.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].x);
    float _2301 = (((_298.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].y) + ((_2265 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2259 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _492)));
    float _2303 = (((_298.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].z) + ((_2267 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2261 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _492)));
    float _2311 = cbInstanceData._m0[_451 + 6u].w * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)));
    float _2316 = _410 / cbSceneParam._m0[86u].x;
    float _2317 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2331 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2333 = _2331.x;
    float _2334 = _2331.y;
    float _2335 = _2331.z;
    float _2336 = _2331.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2391 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2392 = _2391 / _343;
        float _2403 = _2392 * _395;
        float _2404 = _396 * _2392;
        float _2405 = (-0.0) - _2404;
        float _2406 = _2392 * _397;
        float _2408 = (cbSceneParam._m0[77u].w * _2405) / _2391;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2404;
        float _2416 = sqrt(((_2403 * _2403) + (_2404 * _2404)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2391)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2405 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2541 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2579 = ((abs(_2416 / _2405) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2426 * _2550) - exp2(_2426 * _2551)) * _2539))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2336);
        _2428 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2333;
        _2430 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2334;
        _2432 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2335;
        _2434 = _2590 * _2336;
    }
    else
    {
        _2428 = _2333;
        _2430 = _2334;
        _2432 = _2335;
        _2434 = _2336;
    }
    float _2446 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2447 = _2446 == 3.0;
    float _2448 = log2(_2434);
    float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)));
    float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)));
    float _2466 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2466 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2466 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2466 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = _2311;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2311;
}


