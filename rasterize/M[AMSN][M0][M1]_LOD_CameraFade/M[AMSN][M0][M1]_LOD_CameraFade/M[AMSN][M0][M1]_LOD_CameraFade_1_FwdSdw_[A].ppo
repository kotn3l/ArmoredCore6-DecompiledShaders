#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _901;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.x * cbMtdParam._m0[9u].x;
    float _298 = _291.y * cbMtdParam._m0[9u].y;
    float _299 = _291.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3561 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))));
    float _340 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _344 = gl_FragCoord.x * 0.125;
    float _346 = gl_FragCoord.y * 0.125;
    float _357 = fma(_328, _215, fma(_321, _207 * TANGENT.x, (_193 * _186) * _319));
    float _360 = fma(_328, _216, fma(_321, _207 * TANGENT.y, (_193 * _187) * _319));
    float _363 = fma(_328, _217, fma(_321, _207 * TANGENT.z, (_193 * _188) * _319));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3577 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _371 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3599 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3610 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    if (!(((sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _340 : (isnan(_340) ? 0.001000000047497451305389404296875 : max(_340, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_344, _346)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _443 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _444 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _449 = inversesqrt(dot(vec3(_443, _444, _445), vec3(_443, _444, _445)));
    float _450 = _443 * _449;
    float _451 = _444 * _449;
    float _452 = _445 * _449;
    vec4 _454 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_344, _346));
    float _456 = _454.w;
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _487 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _490 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _505 = _503 + 9u;
    uint _506 = _505 + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3621 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _529 = _526.x * TEXCOORD.z;
    float _530 = dot(vec3(_368, _369, _370), vec3(_450, _451, _452));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _368) - _450;
    float _538 = (_533 * _369) - _451;
    float _539 = (_533 * _370) - _452;
    float _543 = abs(dot(vec3(_450, _451, _452), vec3(_368, _369, _370)));
    float _3654 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_371);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _629 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _633 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _658 = _590 + _368;
        float _659 = _594 + _369;
        float _660 = _598 + _370;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_368, _369, _370), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3702 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_368, _369, _370), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3735 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_368, _369, _370), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3768 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _945 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _949 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _972 = _590 + _368;
        float _973 = _594 + _369;
        float _974 = _598 + _370;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_368, _369, _370), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3831 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_368, _369, _370), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3864 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_368, _369, _370), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3897 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _901;
        _1211 = _901;
        _1212 = _901;
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _537 * 0.5;
    float _1279 = _538 * 0.5;
    float _1280 = _539 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _904, _907, _910));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_902, _905, _908, _911));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_903, _906, _909, _912));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _371);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1396 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1400 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1404 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1407 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1410 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1413 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1441;
        if (_1407 > 0.0)
        {
            _1441 = abs((1.0 - _1396) / _1407);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1396 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1441 = frontier_phi_18_16_ladder;
        }
        float _1615;
        if (_1410 > 0.0)
        {
            _1615 = abs((1.0 - _1400) / _1410);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1400 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1615 = frontier_phi_27_23_ladder;
        }
        float _1911;
        if (_1413 > 0.0)
        {
            _1911 = abs((1.0 - _1404) / _1413);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1404 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1911 = frontier_phi_39_34_ladder;
        }
        float _1913 = isnan(_1615) ? _1441 : (isnan(_1441) ? _1615 : min(_1441, _1615));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1407) + _1396;
        float _1919 = (_1914 * _1410) + _1400;
        float _1920 = (_1914 * _1413) + _1404;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1923 = (-1.0) - _1921;
        float _1925 = _1921 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1920 > _1925) || ((_1920 < _1923) || ((_1919 > _1925) || ((_1919 < _1923) || ((_1918 < _1923) || (_1918 > _1925))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1920, cbModelParam._m0[9u].z, fma(_1919, cbModelParam._m0[9u].y, _1918 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1920, cbModelParam._m0[10u].z, fma(_1919, cbModelParam._m0[10u].y, _1918 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1920, cbModelParam._m0[11u].z, fma(_1919, cbModelParam._m0[11u].y, _1918 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_17_39_ladder = _2065.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2065.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2065.x * cbModelParam._m0[1u].y;
        }
        _1429 = frontier_phi_17_39_ladder_2;
        _1431 = frontier_phi_17_39_ladder_1;
        _1433 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1347);
        _1429 = _1417.x * cbModelParam._m0[1u].y;
        _1431 = _1417.y * cbModelParam._m0[1u].y;
        _1433 = _1417.z * cbModelParam._m0[1u].y;
    }
    float _1437 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _371);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1437 : min(cbModelParam._m0[25u].w, _1437));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1495 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1499 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1503 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1506 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1509 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1512 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1620;
        if (_1506 > 0.0)
        {
            _1620 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1620 = frontier_phi_29_25_ladder;
        }
        float _1938;
        if (_1509 > 0.0)
        {
            _1938 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1938 = frontier_phi_41_36_ladder;
        }
        float _2265;
        if (_1512 > 0.0)
        {
            _2265 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2265 = frontier_phi_51_48_ladder;
        }
        float _2267 = isnan(_1938) ? _1620 : (isnan(_1620) ? _1938 : min(_1620, _1938));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1506) + _1495;
        float _2273 = (_2268 * _1509) + _1499;
        float _2274 = (_2268 * _1512) + _1503;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2275;
        float _2278 = _2275 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2274 > _2278) || ((_2274 < _2276) || ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 < _2276) || (_2272 > _2278))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2274, cbModelParam._m0[17u].z, fma(_2273, cbModelParam._m0[17u].y, _2272 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2274, cbModelParam._m0[18u].z, fma(_2273, cbModelParam._m0[18u].y, _2272 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2274, cbModelParam._m0[19u].z, fma(_2273, cbModelParam._m0[19u].y, _2272 * cbModelParam._m0[19u].x))), _1438);
            frontier_phi_26_51_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1531 = frontier_phi_26_51_ladder_2;
        _1533 = frontier_phi_26_51_ladder_1;
        _1535 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1438);
        _1531 = _1515.x * cbModelParam._m0[1u].z;
        _1533 = _1515.y * cbModelParam._m0[1u].z;
        _1535 = _1515.z * cbModelParam._m0[1u].z;
    }
    float _1547 = ((((1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_558 * _545)) * _529;
    float _1548 = _1547 * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1549 = _1547 * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1550 = _1547 * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1553 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1548 * cbSceneParam._m0[91u].x));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1607 = _1594 / _1606;
    float _1608 = _1598 / _1606;
    float _1609 = _1602 / _1606;
    float _1756;
    float _1757;
    float _1758;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1636 = ((uint(_1609 > cbSceneParam._m0[59u].y) + uint(_1609 > cbSceneParam._m0[59u].x)) + uint(_1609 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1637 = _1636 + 43u;
        uint _1645 = _1636 + 44u;
        uint _1653 = _1636 + 45u;
        uint _1661 = _1636 + 46u;
        float _1672 = fma(_1606, cbSceneParam._m0[_1637].w, fma(_1602, cbSceneParam._m0[_1637].z, fma(_1598, cbSceneParam._m0[_1637].y, _1594 * cbSceneParam._m0[_1637].x)));
        float _1676 = fma(_1606, cbSceneParam._m0[_1645].w, fma(_1602, cbSceneParam._m0[_1645].z, fma(_1598, cbSceneParam._m0[_1645].y, _1594 * cbSceneParam._m0[_1645].x)));
        float _1684 = fma(_1606, cbSceneParam._m0[_1661].w, fma(_1602, cbSceneParam._m0[_1661].z, fma(_1598, cbSceneParam._m0[_1661].y, _1594 * cbSceneParam._m0[_1661].x)));
        float _1689 = cbSceneParam._m0[33u].z * _1684;
        float _1691 = cbSceneParam._m0[33u].w * _1684;
        float _1694 = fma(_1606, cbSceneParam._m0[_1653].w, fma(_1602, cbSceneParam._m0[_1653].z, fma(_1598, cbSceneParam._m0[_1653].y, _1594 * cbSceneParam._m0[_1653].x))) / _1684;
        float _1742 = (cbSceneParam._m0[33u].x - sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609))) * cbSceneParam._m0[33u].y;
        float _4023 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1749 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1689 + _1672) / _1684, (_1691 + _1676) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 + _1672) / _1684, (_1676 - _1689) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 - _1689) / _1684, (_1676 - _1691) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 - _1691) / _1684, (_1689 + _1676) / _1684), _1694), 0.0)).x), vec4(0.25)));
        _1756 = 1.0 - (_1749 * cbSceneParam._m0[34u].x);
        _1757 = 1.0 - (_1749 * cbSceneParam._m0[34u].y);
        _1758 = 1.0 - (_1749 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1756 = 1.0;
        _1757 = 1.0;
        _1758 = 1.0;
    }
    float _1822;
    float _1824;
    float _1826;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1810 = fma(_1606, cbSceneParam._m0[63u].w, fma(_1602, cbSceneParam._m0[63u].z, fma(_1598, cbSceneParam._m0[63u].y, _1594 * cbSceneParam._m0[63u].x)));
        float _1811 = fma(_1606, cbSceneParam._m0[60u].w, fma(_1602, cbSceneParam._m0[60u].z, fma(_1598, cbSceneParam._m0[60u].y, _1594 * cbSceneParam._m0[60u].x))) / _1810;
        float _1812 = fma(_1606, cbSceneParam._m0[61u].w, fma(_1602, cbSceneParam._m0[61u].z, fma(_1598, cbSceneParam._m0[61u].y, _1594 * cbSceneParam._m0[61u].x))) / _1810;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1811 >= cbSceneParam._m0[64u].x) && (_1812 >= cbSceneParam._m0[64u].y)) && (_1811 <= cbSceneParam._m0[64u].z)) && (_1812 <= cbSceneParam._m0[64u].w))
        {
            float _1951 = fma(_1606, cbSceneParam._m0[62u].w, fma(_1602, cbSceneParam._m0[62u].z, fma(_1598, cbSceneParam._m0[62u].y, _1594 * cbSceneParam._m0[62u].x))) / _1810;
            float _1955 = isnan(cbSceneParam._m0[41u].w) ? _1951 : (isnan(_1951) ? cbSceneParam._m0[41u].w : max(_1951, cbSceneParam._m0[41u].w));
            float _1998 = (cbSceneParam._m0[33u].x - sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609))) * cbSceneParam._m0[33u].y;
            float _4039 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
            float _2005 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1811, cbSceneParam._m0[33u].w + _1812), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1811, _1812 - cbSceneParam._m0[33u].z), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1811 - cbSceneParam._m0[33u].z, _1812 - cbSceneParam._m0[33u].w), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1811 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1812), _1955), 0.0)).x), vec4(0.25)));
            float _2009 = 1.0 - (_2005 * cbSceneParam._m0[34u].x);
            float _2010 = 1.0 - (_2005 * cbSceneParam._m0[34u].y);
            float _2011 = 1.0 - (_2005 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_38_37_ladder_1 = isnan(_2009) ? _1756 : (isnan(_1756) ? _2009 : min(_1756, _2009));
            frontier_phi_38_37_ladder_2 = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
        }
        else
        {
            frontier_phi_38_37_ladder = _1757;
            frontier_phi_38_37_ladder_1 = _1756;
            frontier_phi_38_37_ladder_2 = _1758;
        }
        _1822 = frontier_phi_38_37_ladder_1;
        _1824 = frontier_phi_38_37_ladder;
        _1826 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1822 = _1756;
        _1824 = _1757;
        _1826 = _1758;
    }
    uvec4 _1831 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1833 = _1831.x * 14u;
    uint _1834 = _1833 + 13u;
    float _1841 = _529 + (-1.0);
    float _1846 = (cbLight._m0[_1834].x * _1841) + 1.0;
    float _1847 = (cbLight._m0[_1834].y * _1841) + 1.0;
    float _1848 = (cbLight._m0[_1834].z * _1841) + 1.0;
    float _1849 = (cbLight._m0[_1834].w * _1841) + 1.0;
    uint _1850 = _1833 + 5u;
    float _1856 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1860 = _1833 + 4u;
    float _1870 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1874 = _1833 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_368, _369, _370));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_368, _369, _370));
    float _4075 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4086 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1850].x * _1856) * _1895) + (((cbLight._m0[_1860].x * _1822) * _1870) * _1893);
    float _1903 = ((_1856 * cbLight._m0[_1850].y) * _1895) + (((cbLight._m0[_1860].y * _1824) * _1870) * _1893);
    float _1904 = ((_1856 * cbLight._m0[_1850].z) * _1895) + (((cbLight._m0[_1860].z * _1826) * _1870) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1833 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1910)
    {
        _2012 = _1902;
        _2014 = _1903;
        _2016 = _1904;
    }
    else
    {
        uint _2020 = _1833 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1833 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4097 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2039 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1902;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1903;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1904;
    }
    bool _2019 = _1908.y == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2019)
    {
        _2074 = _2012;
        _2076 = _2014;
        _2078 = _2016;
    }
    else
    {
        uint _2236 = _1833 + 7u;
        float _2252 = (dot(vec3(cbLight._m0[_1833 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4113 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2255 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2074 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2012;
        _2076 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2014;
        _2078 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2016;
    }
    uint _2081 = _1833 + 8u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _371) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1833].x + _450;
    float _2097 = cbLight._m0[_1833].y + _451;
    float _2098 = cbLight._m0[_1833].z + _452;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1833].xyz));
    float _4129 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _2110 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2111 = dot(vec3(_368, _369, _370), vec3(_2103, _2104, _2105));
    float _4151 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2103, _2104, _2105));
    float _4162 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2095 * _2095;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2110 * ((_2109 * _2135) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2135) + _2095) * _2109))) * _2109;
    float _4173 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    uint _2162 = _1833 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _371) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_1874].x + _450;
    float _2176 = cbLight._m0[_1874].y + _451;
    float _2177 = cbLight._m0[_1874].z + _452;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1874].xyz));
    float _4184 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2189 = dot(vec3(_368, _369, _370), vec3(_2182, _2183, _2184));
    float _4195 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2182, _2183, _2184));
    float _4206 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2174;
    float _2221 = (0.5 / (((_2110 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2211) + _2174) * _2188))) * _2188;
    float _4217 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2233 = (((_2210 * cbLight._m0[_2162].x) * _2223) * _1856) + ((((cbLight._m0[_2081].x * _1822) * _2134) * _2148) * _1870);
    float _2234 = (((_2210 * cbLight._m0[_2162].y) * _2223) * _1856) + ((((cbLight._m0[_2081].y * _1824) * _2134) * _2148) * _1870);
    float _2235 = (((_2210 * cbLight._m0[_2162].z) * _2223) * _1856) + ((((cbLight._m0[_2081].z * _1826) * _2134) * _2148) * _1870);
    float _2291;
    float _2293;
    float _2295;
    if (_1910)
    {
        _2291 = _2233;
        _2293 = _2234;
        _2295 = _2235;
    }
    else
    {
        uint _2297 = _1833 + 2u;
        uint _2301 = _1833 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _371) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _450;
        float _2318 = cbLight._m0[_2297].y + _451;
        float _2319 = cbLight._m0[_2297].z + _452;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2297].xyz));
        float _4228 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2331 = dot(vec3(_368, _369, _370), vec3(_2324, _2325, _2326));
        float _4239 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4250 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_2110 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2353) + _2316) * _2330))) * _2330;
        float _4261 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2291 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2233;
        _2293 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2234;
        _2295 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2235;
    }
    float _2397;
    float _2399;
    float _2401;
    if (_2019)
    {
        _2397 = _2291;
        _2399 = _2293;
        _2401 = _2295;
    }
    else
    {
        uint _2408 = _1833 + 3u;
        uint _2412 = _1833 + 11u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _371) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _450;
        float _2429 = cbLight._m0[_2408].y + _451;
        float _2430 = cbLight._m0[_2408].z + _452;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2408].xyz));
        float _4277 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2442 = dot(vec3(_368, _369, _370), vec3(_2435, _2436, _2437));
        float _4288 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4299 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2464 = 1.0 - _2427;
        float _2474 = (0.5 / (((_2110 * ((_2441 * _2464) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2464) + _2427) * _2441))) * _2441;
        float _4310 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2476 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2477 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2397 = (((_2463 * cbLight._m0[_2412].x) * _2476) * _2477) + _2291;
        _2399 = (((_2463 * cbLight._m0[_2412].y) * _2476) * _2477) + _2293;
        _2401 = (((_2463 * cbLight._m0[_2412].z) * _2476) * _2477) + _2295;
    }
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    if (_1831.y == 0u)
    {
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.x;
        uint _2510 = uint((float(_2498.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2499))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2499)));
        float _2520 = (log2(_1609 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2521 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        uint _2524 = uint(isnan(14.0) ? _2521 : (isnan(_2521) ? 14.0 : min(_2521, 14.0)));
        uvec4 _2529 = texelFetch(g_lightClusterGridBuffer, int(((_2524 << 2u) + (_2510 << 6u)) >> 2u));
        uint _2530 = _2529.x;
        uint _2531 = _2498.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2531 >> 4u) & 15u)) + 4294967295u) & _2530) == 0u) || ((_2531 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2777)
                {
                    frontier_phi_72_pred = _2766;
                    frontier_phi_72_pred_1 = _2765;
                    frontier_phi_72_pred_2 = _2764;
                    frontier_phi_72_pred_3 = _2763;
                    frontier_phi_72_pred_4 = _2762;
                    frontier_phi_72_pred_5 = _2761;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2776;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2767 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _1607;
                        float _2973 = _2932.y - _1608;
                        float _2974 = _2932.z - _1609;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_484, _487, _490), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4336 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3003 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3007 = (-0.0) - _1607;
                        float _3008 = (-0.0) - _1608;
                        float _3009 = (-0.0) - _1609;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _545;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_484, _487, _490), vec3(_3014, _3015, _3016));
                        float _4352 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3048 = dot(vec3(_484, _487, _490), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4363 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4374 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4385 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2836 = (_3003 * _2951.x) + _2909;
                        _2837 = (_3003 * _2951.y) + _2910;
                        _2838 = (_3003 * _2951.z) + _2911;
                        _2833 = (_3083 * _2968.x) + _2906;
                        _2834 = (_3083 * _2968.y) + _2907;
                        _2835 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_72_pred = _2838;
                    frontier_phi_72_pred_1 = _2837;
                    frontier_phi_72_pred_2 = _2836;
                    frontier_phi_72_pred_3 = _2835;
                    frontier_phi_72_pred_4 = _2834;
                    frontier_phi_72_pred_5 = _2833;
                }
                _2620 = frontier_phi_72_pred;
                _2618 = frontier_phi_72_pred_1;
                _2616 = frontier_phi_72_pred_2;
                _2614 = frontier_phi_72_pred_3;
                _2612 = frontier_phi_72_pred_4;
                _2610 = frontier_phi_72_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2610;
                    _2762 = _2612;
                    _2763 = _2614;
                    _2764 = _2616;
                    _2765 = _2618;
                    _2766 = _2620;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2626) & _2530) == 0u)
        {
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
            _2735 = _2615;
            _2737 = _2617;
            _2739 = _2619;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
            float _2755 = _2754 * _1607;
            float _2756 = _2754 * _1608;
            float _2757 = _2754 * _1609;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2889 = _2609;
                float _2890 = _2611;
                float _2891 = _2613;
                float _2892 = _2615;
                float _2893 = _2617;
                float _2894 = _2619;
                uint _2895 = _2626;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2905)
                    {
                        frontier_phi_83_pred = _2893;
                        frontier_phi_83_pred_1 = _2892;
                        frontier_phi_83_pred_2 = _2891;
                        frontier_phi_83_pred_3 = _2890;
                        frontier_phi_83_pred_4 = _2889;
                        frontier_phi_83_pred_5 = _2894;
                    }
                    else
                    {
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3110 = _2889;
                        float _3111 = _2890;
                        float _3112 = _2891;
                        float _3113 = _2892;
                        float _3114 = _2893;
                        float _3115 = _2894;
                        uint _3116 = _2904;
                        uint _3117;
                        vec4 _3142;
                        float _3143;
                        vec4 _3158;
                        vec3 _3170;
                        vec4 _3186;
                        vec4 _3202;
                        float _3249;
                        bool _3250;
                        for (;;)
                        {
                            uint _3127 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3116));
                            _3117 = (_3116 + 4294967295u) & _3116;
                            uint _3129 = _3127 * 40u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3143 = _3142.w;
                            uint _3145 = (_3127 * 40u) + 4u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3127 * 40u) + 8u;
                            _3170 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x));
                            uint _3173 = (_3127 * 40u) + 16u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3127 * 40u) + 20u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3205 = (_3127 * 40u) + 24u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3224 = (_3127 * 40u) + 28u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3249 = fma(_1609, _3237.z, fma(_1608, _3237.y, _3237.x * _1607)) + _3237.w;
                            _3250 = !((fma(_1609, _3218.z, fma(_1608, _3218.y, _3218.x * _1607)) + _3218.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3250)
                            {
                                float _3277 = _3142.x - _1607;
                                float _3278 = _3142.y - _1608;
                                float _3279 = _3142.z - _1609;
                                float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                                float _3283 = inversesqrt(_3280);
                                float _3284 = _3283 * _3277;
                                float _3285 = _3283 * _3278;
                                float _3286 = _3283 * _3279;
                                float _3290 = 1.0 - (_3280 / (_3143 * _3143));
                                float _4396 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3295 = sqrt(_3280) * _3158.w;
                                float _3297 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                                float _3298 = _3297 * _3297;
                                float _3301 = ((1.0 - _3298) * dot(vec3(_3284, _3285, _3286), vec3(_484, _487, _490))) + _3298;
                                float _3304 = _3295 * _3295;
                                float _3308 = (fma(_1609, _3186.z, fma(_1608, _3186.y, _3186.x * _1607)) + _3186.w) / _3249;
                                float _3309 = (fma(_1609, _3202.z, fma(_1608, _3202.y, _3202.x * _1607)) + _3202.w) / _3249;
                                float _3313 = 1.0 - dot(vec2(_3308, _3309), vec2(_3308, _3309));
                                float _4412 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3315 = _3314 * (((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3291) / ((_3304 * 0.699999988079071044921875) + 1.0));
                                float _3327 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                                float _3328 = 1.0 - _545;
                                float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                                float _3336 = _3335 * _3335;
                                float _3337 = _3336 * _3336;
                                float _3338 = _3284 - _2755;
                                float _3339 = _3285 - _2756;
                                float _3340 = _3286 - _2757;
                                float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                                float _3348 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4423 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3352 = dot(vec3(_484, _487, _490), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                                float _4434 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                                float _3360 = _3297 * _3336;
                                float _3361 = _3360 * _3360;
                                float _3367 = ((1.0 - _3361) * dot(vec3(_484, _487, _490), vec3(_3284, _3285, _3286))) + _3361;
                                float _4445 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3369 = 1.0 - _3336;
                                float _3379 = (0.5 / (((_3368 * ((_3351 * _3369) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3336) * _3351))) * _3368;
                                float _4456 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3389 = (_3314 * _3291) * (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3359 * _3359) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3315 * _3158.y;
                                frontier_phi_89_pred_1 = _3315 * _3158.x;
                                frontier_phi_89_pred_2 = _3389 * _3170.z;
                                frontier_phi_89_pred_3 = _3389 * _3170.y;
                                frontier_phi_89_pred_4 = _3389 * _3170.x;
                                frontier_phi_89_pred_5 = _3315 * _3158.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3397 = frontier_phi_89_pred;
                            _3396 = frontier_phi_89_pred_1;
                            _3395 = frontier_phi_89_pred_2;
                            _3394 = frontier_phi_89_pred_3;
                            _3393 = frontier_phi_89_pred_4;
                            _3398 = frontier_phi_89_pred_5;
                            _3100 = _3396 + _3113;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            if (_3117 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3117;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3101;
                        frontier_phi_83_pred_1 = _3100;
                        frontier_phi_83_pred_2 = _3099;
                        frontier_phi_83_pred_3 = _3098;
                        frontier_phi_83_pred_4 = _3097;
                        frontier_phi_83_pred_5 = _3102;
                    }
                    _2738 = frontier_phi_83_pred;
                    _2736 = frontier_phi_83_pred_1;
                    _2734 = frontier_phi_83_pred_2;
                    _2732 = frontier_phi_83_pred_3;
                    _2730 = frontier_phi_83_pred_4;
                    _2740 = frontier_phi_83_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2730;
                        _2890 = _2732;
                        _2891 = _2734;
                        _2892 = _2736;
                        _2893 = _2738;
                        _2894 = _2740;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2740;
                frontier_phi_64_65_ladder_1 = _2736;
                frontier_phi_64_65_ladder_2 = _2738;
                frontier_phi_64_65_ladder_3 = _2732;
                frontier_phi_64_65_ladder_4 = _2730;
                frontier_phi_64_65_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_64_65_ladder = _2619;
                frontier_phi_64_65_ladder_1 = _2615;
                frontier_phi_64_65_ladder_2 = _2617;
                frontier_phi_64_65_ladder_3 = _2611;
                frontier_phi_64_65_ladder_4 = _2609;
                frontier_phi_64_65_ladder_5 = _2613;
            }
            _2729 = frontier_phi_64_65_ladder_4;
            _2731 = frontier_phi_64_65_ladder_3;
            _2733 = frontier_phi_64_65_ladder_5;
            _2735 = frontier_phi_64_65_ladder_1;
            _2737 = frontier_phi_64_65_ladder_2;
            _2739 = frontier_phi_64_65_ladder;
        }
        float _2744 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2542 = (_2744 * _2735) + _2074;
        _2544 = (_2744 * _2737) + _2076;
        _2546 = (_2744 * _2739) + _2078;
        _2548 = ((_2729 * 0.039999999105930328369140625) * _2744) + _2397;
        _2550 = ((_2731 * 0.039999999105930328369140625) * _2744) + _2399;
        _2552 = ((_2733 * 0.039999999105930328369140625) * _2744) + _2401;
    }
    else
    {
        _2542 = _2074;
        _2544 = _2076;
        _2546 = _2078;
        _2548 = _2397;
        _2550 = _2399;
        _2552 = _2401;
    }
    float _4472 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4483 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4494 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2569 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2542 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _529))) + ((_2548 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2544 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _529))) + ((_2550 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2571 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2546 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _529))) + ((_2552 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    uint _2572 = _503 + 6u;
    float _2580 = _462 / cbSceneParam._m0[86u].x;
    float _2581 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2595 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2597 = _2595.x;
    float _2598 = _2595.y;
    float _2599 = _2595.z;
    float _2600 = _2595.w;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2635 = _2634 / _394;
        float _2646 = _2635 * _443;
        float _2647 = _444 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2649 = _2635 * _445;
        float _2651 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2652 = _2651 + cbSceneParam._m0[79u].w;
        float _2653 = cbSceneParam._m0[79u].w - _2647;
        float _2659 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2649 * _2649));
        float _2662 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2659;
        float _2667 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2669 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2846;
        if (abs((_2648 - _2651) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2846 = ((((_2652 > 0.0) ? exp2(_2667 * _2652) : (2.0 - exp2(_2669 * _2652))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2662;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : max(_2652, _2653));
            float _2792 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : min(_2652, _2653));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2846 = ((abs(_2659 / _2648) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2667 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2667 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2669 * _2801) - exp2(_2669 * _2802)) * _2790))) + (_2662 * cbSceneParam._m0[80u].z);
        }
        vec4 _2848 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, 1.0), 0.0);
        float _2857 = exp2((_2846 * (-1.44269502162933349609375)) * (1.0 - _2848.w));
        float _2858 = log2(_2857);
        float _2874 = log2(_2600);
        _2671 = (exp2(_2874 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].x)) * _2848.x) / cbSceneParam._m0[78u].x)) + _2597;
        _2673 = (exp2(_2874 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].y)) * _2848.y) / cbSceneParam._m0[78u].y)) + _2598;
        _2675 = (exp2(_2874 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].z)) * _2848.z) / cbSceneParam._m0[78u].z)) + _2599;
        _2677 = _2857 * _2600;
    }
    else
    {
        _2671 = _2597;
        _2673 = _2598;
        _2675 = _2599;
        _2677 = _2600;
    }
    bool _2884;
    vec4 _2687;
    vec4 _2709;
    float _2711;
    float _2715;
    float _2716;
    float _2717;
    float _2718;
    bool _2728;
    for (;;)
    {
        _2687 = cbMatDynParam._m0[0u];
        float _2689 = roundEven(_2687.y);
        bool _2690 = _2689 == 3.0;
        float _2691 = log2(_2677);
        float _2698 = exp2(_2691 * cbSceneParam._m0[78u].x) * _2569;
        float _2699 = exp2(_2691 * cbSceneParam._m0[78u].y) * _2570;
        float _2700 = exp2(_2691 * cbSceneParam._m0[78u].z) * _2571;
        float _2707 = _456 + (-0.5);
        _2709 = cbMtdParam._m0[1u];
        _2711 = _2709.y * _2707;
        float _2714 = (_2689 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2715 = _2714 * (_2690 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2671)));
        _2716 = _2714 * (_2690 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2673)));
        _2717 = _2714 * (_2690 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2675)));
        _2718 = _2707 * 0.999000012874603271484375;
        _2728 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2728)
        {
            if ((cbInstanceData._m0[_503 + 7u].x + _2718) < 0.5)
            {
                _2884 = true;
                break;
            }
        }
        uint _2825 = _505 + uint(_2687.w);
        if ((cbInstanceData._m0[_2825].w < 1.0) && ((cbInstanceData._m0[_2825].w + _2718) < 0.5))
        {
            _2884 = true;
            break;
        }
        if ((_2711 + 1.0) < _2709.x)
        {
            _2884 = true;
            break;
        }
        _2884 = false;
        break;
    }
    float _3088;
    if (_2884)
    {
        discard_state = true;
        _3088 = 0.0;
    }
    else
    {
        _3088 = cbInstanceData._m0[_2572].w;
    }
    SV_Target.x = _2715;
    SV_Target.y = _2716;
    SV_Target.z = _2717;
    SV_Target.w = _3088;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2572].w;
    discard_exit();
}


