#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _845;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _253.x;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3206 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))));
    float _287 = fma(_284, _211, fma(_277, _203 * TANGENT.x, (_189 * _182) * _275));
    float _290 = fma(_284, _212, fma(_277, _203 * TANGENT.y, (_189 * _183) * _275));
    float _293 = fma(_284, _213, fma(_277, _203 * TANGENT.z, (_189 * _184) * _275));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3217 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _301 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3239 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3250 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3261 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _305 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _413 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _416 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = (_429 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3272 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _444 = 1.0 - _305;
    float _445 = _441 * _444;
    float _446 = _442 * _444;
    float _447 = _443 * _444;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _305;
    float _455 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = dot(vec3(_298, _299, _300), vec3(_380, _381, _382));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _298) - _380;
    float _479 = (_474 * _299) - _381;
    float _480 = (_474 * _300) - _382;
    float _484 = abs(dot(vec3(_380, _381, _382), vec3(_298, _299, _300)));
    float _3305 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_301);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _505 = (1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _506 = _499 * _486;
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _844;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _569 = fma(_542, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534));
        float _573 = fma(_542, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534));
        float _577 = fma(_542, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534));
        float _602 = _534 + _298;
        float _603 = _538 + _299;
        float _604 = _542 + _300;
        float _614 = fma(_604, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602)) - _569;
        float _615 = fma(_604, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602)) - _573;
        float _616 = fma(_604, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602)) - _577;
        float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
        float _633 = ((_620 * _614) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_569 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_620 * _615) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_573 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_620 * _616) / cbModelParam._m0[34u].z) + ((((((_577 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        float _672 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_638.x + (-0.5));
        float _674 = _672 * (_638.y + (-0.5));
        float _675 = _672 * (_638.z + (-0.5));
        float _682 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_645.x + (-0.5));
        float _684 = _682 * (_645.y + (-0.5));
        float _685 = _682 * (_645.z + (-0.5));
        float _692 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_652.x + (-0.5));
        float _694 = _692 * (_652.y + (-0.5));
        float _695 = _692 * (_652.z + (-0.5));
        float _702 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_659.x + (-0.5));
        float _704 = _702 * (_659.y + (-0.5));
        float _705 = _702 * (_659.z + (-0.5));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = _673 * 0.5;
        float _710 = _683 * 0.5;
        float _711 = _693 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _726 = (dot(vec3(_298, _299, _300), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _736 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3353 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_738 + 1.0))) + _743) * _706;
        float _753 = _674 * 0.5;
        float _754 = _684 * 0.5;
        float _755 = _694 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_298, _299, _300), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3386 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_780 + 1.0))) + _785) * _707;
        float _795 = _675 * 0.5;
        float _796 = _685 * 0.5;
        float _797 = _695 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_298, _299, _300), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3419 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_822 + 1.0))) + _827) * _708;
        _844 = _675;
        _846 = _674;
        _847 = _673;
        _848 = _685;
        _849 = _684;
        _850 = _683;
        _851 = _695;
        _852 = _694;
        _853 = _693;
        _854 = _708;
        _855 = _707;
        _856 = _706;
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
    }
    else
    {
        _844 = _845;
        _846 = _845;
        _847 = _845;
        _848 = _845;
        _849 = _845;
        _850 = _845;
        _851 = _845;
        _852 = _845;
        _853 = _845;
        _854 = _845;
        _855 = _845;
        _856 = _845;
        _857 = 0.0;
        _858 = 0.0;
        _859 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_542, cbModelParam._m0[30u].z, fma(_538, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _534));
        float _889 = fma(_542, cbModelParam._m0[31u].z, fma(_538, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _534));
        float _893 = fma(_542, cbModelParam._m0[32u].z, fma(_538, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _534));
        float _916 = _534 + _298;
        float _917 = _538 + _299;
        float _918 = _542 + _300;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_298, _299, _300), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3482 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_298, _299, _300), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3515 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_298, _299, _300), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3548 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _845;
        _1155 = _845;
        _1156 = _845;
        _1157 = _845;
        _1158 = _845;
        _1159 = _845;
        _1160 = _845;
        _1161 = _845;
        _1162 = _845;
        _1163 = _845;
        _1164 = _845;
        _1165 = _845;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _848, _851, _854));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_846, _849, _852, _855));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_847, _850, _853, _856));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1290 : min(cbModelParam._m0[25u].z, _1290));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_542, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_542, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_542, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1354 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1357 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1385 = frontier_phi_16_14_ladder;
        }
        float _1614;
        if (_1354 > 0.0)
        {
            _1614 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_21_ladder;
        }
        float _1871;
        if (_1357 > 0.0)
        {
            _1871 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_32_ladder;
        }
        float _1873 = isnan(_1614) ? _1385 : (isnan(_1385) ? _1614 : min(_1385, _1614));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1351) + _1340;
        float _1879 = (_1874 * _1354) + _1344;
        float _1880 = (_1874 * _1357) + _1348;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_15_37_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_15_37_ladder_2;
        _1375 = frontier_phi_15_37_ladder_1;
        _1377 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_542, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_542, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_542, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1453 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1456 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1619;
        if (_1450 > 0.0)
        {
            _1619 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1619 = frontier_phi_27_23_ladder;
        }
        float _1898;
        if (_1453 > 0.0)
        {
            _1898 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1898 = frontier_phi_39_34_ladder;
        }
        float _2111;
        if (_1456 > 0.0)
        {
            _2111 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2111 = frontier_phi_48_45_ladder;
        }
        float _2113 = isnan(_1898) ? _1619 : (isnan(_1619) ? _1898 : min(_1619, _1898));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1450) + _1439;
        float _2119 = (_2114 * _1453) + _1443;
        float _2120 = (_2114 * _1456) + _1447;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2121;
        float _2124 = _2121 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2120 > _2124) || ((_2120 < _2122) || ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 < _2122) || (_2118 > _2124))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2120, cbModelParam._m0[17u].z, fma(_2119, cbModelParam._m0[17u].y, _2118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2120, cbModelParam._m0[18u].z, fma(_2119, cbModelParam._m0[18u].y, _2118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2120, cbModelParam._m0[19u].z, fma(_2119, cbModelParam._m0[19u].y, _2118 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_24_48_ladder = _2318.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2318.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2318.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_24_48_ladder_2;
        _1477 = frontier_phi_24_48_ladder_1;
        _1479 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1382);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1492 = (((_505 * _455) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1494 = (((_505 * _457) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_505 * _458) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    vec4 _1513 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1515 = _1513.w;
    float _1527 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1515);
    float _1528 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1515);
    float _1529 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1515);
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1543 = _470 + (-1.0);
    float _1548 = (cbLight._m0[_1536].x * _1543) + 1.0;
    float _1549 = (cbLight._m0[_1536].y * _1543) + 1.0;
    float _1550 = (cbLight._m0[_1536].z * _1543) + 1.0;
    float _1551 = (cbLight._m0[_1536].w * _1543) + 1.0;
    uint _1552 = _1535 + 5u;
    float _1558 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1562 = _1535 + 4u;
    float _1572 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1576 = _1535 | 1u;
    float _1587 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_298, _299, _300));
    float _1590 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_298, _299, _300));
    float _3684 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _3695 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1595 = (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.3183098733425140380859375;
    float _1597 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1604 = ((cbLight._m0[_1552].x * _1558) * _1597) + (((cbLight._m0[_1562].x * _1527) * _1572) * _1595);
    float _1605 = ((_1558 * cbLight._m0[_1552].y) * _1597) + (((cbLight._m0[_1562].y * _1528) * _1572) * _1595);
    float _1606 = ((_1558 * cbLight._m0[_1552].z) * _1597) + (((cbLight._m0[_1562].z * _1529) * _1572) * _1595);
    uvec4 _1611 = floatBitsToUint(cbLight._m0[_1535 + 12u]);
    bool _1613 = _1611.x == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1613)
    {
        _1624 = _1604;
        _1626 = _1605;
        _1628 = _1606;
    }
    else
    {
        uint _1632 = _1535 + 6u;
        float _1648 = (dot(vec3(cbLight._m0[_1535 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3706 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1651 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1624 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1604;
        _1626 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1605;
        _1628 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1606;
    }
    bool _1631 = _1611.y == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1631)
    {
        _1669 = _1624;
        _1671 = _1626;
        _1673 = _1628;
    }
    else
    {
        uint _1842 = _1535 + 7u;
        float _1858 = (dot(vec3(cbLight._m0[_1535 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3722 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1861 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1669 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1624;
        _1671 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1626;
        _1673 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1628;
    }
    uint _1676 = _1535 + 8u;
    float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _301) * 0.949999988079071044921875);
    float _1690 = _1689 * _1689;
    float _1691 = cbLight._m0[_1535].x + _380;
    float _1692 = cbLight._m0[_1535].y + _381;
    float _1693 = cbLight._m0[_1535].z + _382;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1698 = _1697 * _1691;
    float _1699 = _1697 * _1692;
    float _1700 = _1697 * _1693;
    float _1701 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1535].xyz));
    float _3738 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1705 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1706 = dot(vec3(_298, _299, _300), vec3(_1698, _1699, _1700));
    float _3760 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1710 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1698, _1699, _1700));
    float _3771 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1714 = _1690 * _1690;
    float _1718 = ((_1709 * _1709) * (_1714 + (-1.0))) + 1.0;
    float _1726 = exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0);
    float _1727 = 0.959999978542327880859375 - _452;
    float _1729 = 0.959999978542327880859375 - _453;
    float _1730 = 0.959999978542327880859375 - _454;
    float _1737 = 1.0 - _1690;
    float _1748 = (0.5 / (((_1705 * ((_1704 * _1737) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1737) + _1690) * _1704))) * _1704;
    float _3782 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1714 / ((_1718 * _1718) * 3.141590118408203125));
    uint _1764 = _1535 + 9u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _301) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1576].x + _380;
    float _1778 = cbLight._m0[_1576].y + _381;
    float _1779 = cbLight._m0[_1576].z + _382;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1576].xyz));
    float _3793 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1791 = dot(vec3(_298, _299, _300), vec3(_1784, _1785, _1786));
    float _3804 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1784, _1785, _1786));
    float _3815 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1776 * _1776;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0);
    float _1817 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1705 * ((_1790 * _1817) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1817) + _1776) * _1790))) * _1790;
    float _3826 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    float _1839 = (((((_1810 * _1727) + _455) * cbLight._m0[_1764].x) * _1829) * _1558) + ((((cbLight._m0[_1676].x * _1527) * ((_1726 * _1727) + _455)) * _1750) * _1572);
    float _1840 = (((((_1810 * _1729) + _457) * cbLight._m0[_1764].y) * _1829) * _1558) + ((((cbLight._m0[_1676].y * _1528) * ((_1726 * _1729) + _457)) * _1750) * _1572);
    float _1841 = (((((_1810 * _1730) + _458) * cbLight._m0[_1764].z) * _1829) * _1558) + ((((cbLight._m0[_1676].z * _1529) * ((_1726 * _1730) + _458)) * _1750) * _1572);
    float _1903;
    float _1905;
    float _1907;
    if (_1613)
    {
        _1903 = _1839;
        _1905 = _1840;
        _1907 = _1841;
    }
    else
    {
        uint _1909 = _1535 + 2u;
        uint _1913 = _1535 + 10u;
        float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _301) * 0.949999988079071044921875);
        float _1928 = _1927 * _1927;
        float _1929 = cbLight._m0[_1909].x + _380;
        float _1930 = cbLight._m0[_1909].y + _381;
        float _1931 = cbLight._m0[_1909].z + _382;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1936 = _1935 * _1929;
        float _1937 = _1935 * _1930;
        float _1938 = _1935 * _1931;
        float _1939 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1909].xyz));
        float _3837 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1943 = dot(vec3(_298, _299, _300), vec3(_1936, _1937, _1938));
        float _3848 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1947 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1936, _1937, _1938));
        float _3859 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1928 * _1928;
        float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
        float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
        float _1969 = 1.0 - _1928;
        float _1979 = (0.5 / (((_1705 * ((_1942 * _1969) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1969) + _1928) * _1942))) * _1942;
        float _3870 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1981 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
        float _1982 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1903 = (((((_1962 * _1727) + _455) * cbLight._m0[_1913].x) * _1981) * _1982) + _1839;
        _1905 = (((((_1962 * _1729) + _457) * cbLight._m0[_1913].y) * _1981) * _1982) + _1840;
        _1907 = (((((_1962 * _1730) + _458) * cbLight._m0[_1913].z) * _1981) * _1982) + _1841;
    }
    float _2017;
    float _2019;
    float _2021;
    if (_1631)
    {
        _2017 = _1903;
        _2019 = _1905;
        _2021 = _1907;
    }
    else
    {
        uint _2028 = _1535 + 3u;
        uint _2032 = _1535 + 11u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _301) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _380;
        float _2049 = cbLight._m0[_2028].y + _381;
        float _2050 = cbLight._m0[_2028].z + _382;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2028].xyz));
        float _3886 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _2062 = dot(vec3(_298, _299, _300), vec3(_2055, _2056, _2057));
        float _3897 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _3908 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
        float _2088 = 1.0 - _2047;
        float _2098 = (0.5 / (((_1705 * ((_2061 * _2088) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _2088) + _2047) * _2061))) * _2061;
        float _3919 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _2017 = (((((_2081 * _1727) + _455) * cbLight._m0[_2032].x) * _2100) * _2101) + _1903;
        _2019 = (((((_2081 * _1729) + _457) * cbLight._m0[_2032].y) * _2100) * _2101) + _1905;
        _2021 = (((((_2081 * _1730) + _458) * cbLight._m0[_2032].z) * _2100) * _2101) + _1907;
    }
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_1533.y == 0u)
    {
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2176;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2176;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2176;
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2192)));
        float _2213 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
        }
        else
        {
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            uint _2473 = 0u;
            uint _2482;
            bool _2483;
            for (;;)
            {
                _2482 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2473 << 2u)) >> 2u)).x;
                _2483 = _2482 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2483)
                {
                    frontier_phi_63_pred = _2472;
                    frontier_phi_63_pred_1 = _2471;
                    frontier_phi_63_pred_2 = _2470;
                    frontier_phi_63_pred_3 = _2469;
                    frontier_phi_63_pred_4 = _2468;
                    frontier_phi_63_pred_5 = _2467;
                }
                else
                {
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    uint _2597;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2482;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    for (;;)
                    {
                        uint _2601 = uint(findLSB(_2597)) + (_2473 << 5u);
                        uint _2598 = (_2597 + 4294967295u) & _2597;
                        uint _2603 = _2601 * 48u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2623 = (_2601 * 48u) + 4u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2642 = (_2601 * 48u) + 8u;
                        vec3 _2653 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x));
                        float _2657 = _2617.x - _2177;
                        float _2658 = _2617.y - _2178;
                        float _2659 = _2617.z - _2179;
                        float _2660 = dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659));
                        float _2663 = inversesqrt(_2660);
                        float _2664 = _2663 * _2657;
                        float _2665 = _2663 * _2658;
                        float _2666 = _2663 * _2659;
                        float _2667 = dot(vec3(_410, _413, _416), vec3(_2664, _2665, _2666));
                        float _2672 = 1.0 - (_2660 * _2617.w);
                        float _3945 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2673 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2674 = sqrt(_2660) * _2636.w;
                        float _2677 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2667) + _2678;
                        float _2684 = _2674 * _2674;
                        float _2688 = ((isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))) * _2673) / ((_2684 * 0.699999988079071044921875) + 1.0);
                        float _2692 = (-0.0) - _2177;
                        float _2693 = (-0.0) - _2178;
                        float _2694 = (-0.0) - _2179;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2699 = _2698 * _2692;
                        float _2700 = _2698 * _2693;
                        float _2701 = _2698 * _2694;
                        float _2709 = exp2(log2(1.0 / ((_2684 * 3.5) + 5.0)) * 0.25);
                        float _2710 = 1.0 - _486;
                        float _2717 = sqrt(1.0 - ((1.0 - (_2710 * _2710)) * (1.0 - (_2709 * _2709))));
                        float _2718 = _2717 * _2717;
                        float _2719 = _2718 * _2718;
                        float _2720 = _2699 + _2664;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2730 = dot(vec3(_410, _413, _416), vec3(_2699, _2700, _2701));
                        float _3961 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2734 = dot(vec3(_410, _413, _416), vec3(_2726 * _2720, _2726 * _2721, _2726 * _2722));
                        float _3972 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2741 = ((_2737 * _2737) * (_2719 + (-1.0))) + 1.0;
                        float _2742 = _2677 * _2718;
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2667) + _2743;
                        float _3983 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2748 = 1.0 - _2718;
                        float _2758 = (0.5 / (((_2747 * ((_2733 * _2748) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2747 * _2748) + _2718) * _2733))) * _2747;
                        float _3994 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2769 = (((_2719 * 3.1415927410125732421875) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) / ((_2741 * _2741) * ((_2684 * 2.1991131305694580078125) + 3.141590118408203125))) * _2673;
                        _2526 = (_2688 * _2636.x) + _2594;
                        _2527 = (_2688 * _2636.y) + _2595;
                        _2528 = (_2688 * _2636.z) + _2596;
                        _2523 = (_2769 * _2653.x) + _2591;
                        _2524 = (_2769 * _2653.y) + _2592;
                        _2525 = (_2769 * _2653.z) + _2593;
                        if (_2598 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2598;
                        }
                    }
                    frontier_phi_63_pred = _2528;
                    frontier_phi_63_pred_1 = _2527;
                    frontier_phi_63_pred_2 = _2526;
                    frontier_phi_63_pred_3 = _2525;
                    frontier_phi_63_pred_4 = _2524;
                    frontier_phi_63_pred_5 = _2523;
                }
                _2334 = frontier_phi_63_pred;
                _2332 = frontier_phi_63_pred_1;
                _2330 = frontier_phi_63_pred_2;
                _2328 = frontier_phi_63_pred_3;
                _2326 = frontier_phi_63_pred_4;
                _2324 = frontier_phi_63_pred_5;
                uint _2474 = _2473 + 1u;
                if (_2474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2467 = _2324;
                    _2468 = _2326;
                    _2469 = _2328;
                    _2470 = _2330;
                    _2471 = _2332;
                    _2472 = _2334;
                    _2473 = _2474;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
        }
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.z;
        uint _2340 = (_2338 >> 8u) & 15u;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((4294967295u << _2340) & _2223) == 0u)
        {
            _2435 = _2323;
            _2437 = _2325;
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
        }
        else
        {
            float _2460 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _2461 = _2460 * _2177;
            float _2462 = _2460 * _2178;
            float _2463 = _2460 * _2179;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2340 < ((_2338 >> 12u) & 15u))
            {
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2574 = _2323;
                float _2575 = _2325;
                float _2576 = _2327;
                float _2577 = _2329;
                float _2578 = _2331;
                float _2579 = _2333;
                uint _2580 = _2340;
                uint _2589;
                bool _2590;
                for (;;)
                {
                    _2589 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                    _2590 = _2589 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2590)
                    {
                        frontier_phi_69_pred = _2579;
                        frontier_phi_69_pred_1 = _2578;
                        frontier_phi_69_pred_2 = _2577;
                        frontier_phi_69_pred_3 = _2576;
                        frontier_phi_69_pred_4 = _2575;
                        frontier_phi_69_pred_5 = _2574;
                    }
                    else
                    {
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        uint _2793 = _2589;
                        uint _2794;
                        vec4 _2819;
                        float _2820;
                        vec4 _2835;
                        vec3 _2847;
                        vec4 _2863;
                        vec4 _2879;
                        float _2926;
                        bool _2927;
                        for (;;)
                        {
                            uint _2804 = ((_2580 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2793));
                            _2794 = (_2793 + 4294967295u) & _2793;
                            uint _2806 = _2804 * 40u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2820 = _2819.w;
                            uint _2822 = (_2804 * 40u) + 4u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2837 = (_2804 * 40u) + 8u;
                            _2847 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x));
                            uint _2850 = (_2804 * 40u) + 16u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2866 = (_2804 * 40u) + 20u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2804 * 40u) + 24u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2901 = (_2804 * 40u) + 28u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2926 = fma(_2179, _2914.z, fma(_2178, _2914.y, _2914.x * _2177)) + _2914.w;
                            _2927 = !((fma(_2179, _2895.z, fma(_2178, _2895.y, _2895.x * _2177)) + _2895.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2927)
                            {
                                float _2954 = _2819.x - _2177;
                                float _2955 = _2819.y - _2178;
                                float _2956 = _2819.z - _2179;
                                float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                                float _2960 = inversesqrt(_2957);
                                float _2961 = _2960 * _2954;
                                float _2962 = _2960 * _2955;
                                float _2963 = _2960 * _2956;
                                float _2967 = 1.0 - (_2957 / (_2820 * _2820));
                                float _4005 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _2972 = sqrt(_2957) * _2835.w;
                                float _2974 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                                float _2975 = _2974 * _2974;
                                float _2978 = ((1.0 - _2975) * dot(vec3(_2961, _2962, _2963), vec3(_410, _413, _416))) + _2975;
                                float _2981 = _2972 * _2972;
                                float _2985 = (fma(_2179, _2863.z, fma(_2178, _2863.y, _2863.x * _2177)) + _2863.w) / _2926;
                                float _2986 = (fma(_2179, _2879.z, fma(_2178, _2879.y, _2879.x * _2177)) + _2879.w) / _2926;
                                float _2990 = 1.0 - dot(vec2(_2985, _2986), vec2(_2985, _2986));
                                float _4021 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _2992 = _2991 * (((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2968) / ((_2981 * 0.699999988079071044921875) + 1.0));
                                float _3004 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                                float _3005 = 1.0 - _486;
                                float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                                float _3013 = _3012 * _3012;
                                float _3014 = _3013 * _3013;
                                float _3015 = _2961 - _2461;
                                float _3016 = _2962 - _2462;
                                float _3017 = _2963 - _2463;
                                float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                                float _3025 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2461, (-0.0) - _2462, (-0.0) - _2463));
                                float _4032 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3028 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3029 = dot(vec3(_410, _413, _416), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                                float _4043 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                                float _3037 = _2974 * _3013;
                                float _3038 = _3037 * _3037;
                                float _3044 = ((1.0 - _3038) * dot(vec3(_410, _413, _416), vec3(_2961, _2962, _2963))) + _3038;
                                float _4054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3046 = 1.0 - _3013;
                                float _3056 = (0.5 / (((_3045 * ((_3028 * _3046) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3013) * _3028))) * _3045;
                                float _4065 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3066 = (_2991 * _2968) * (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) / ((_3036 * _3036) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2992 * _2835.z;
                                frontier_phi_75_pred_1 = _2992 * _2835.y;
                                frontier_phi_75_pred_2 = _2992 * _2835.x;
                                frontier_phi_75_pred_3 = _3066 * _2847.z;
                                frontier_phi_75_pred_4 = _3066 * _2847.y;
                                frontier_phi_75_pred_5 = _3066 * _2847.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_75_pred;
                            _3074 = frontier_phi_75_pred_1;
                            _3073 = frontier_phi_75_pred_2;
                            _3072 = frontier_phi_75_pred_3;
                            _3071 = frontier_phi_75_pred_4;
                            _3070 = frontier_phi_75_pred_5;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            if (_2794 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2794;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2779;
                        frontier_phi_69_pred_1 = _2778;
                        frontier_phi_69_pred_2 = _2777;
                        frontier_phi_69_pred_3 = _2776;
                        frontier_phi_69_pred_4 = _2775;
                        frontier_phi_69_pred_5 = _2774;
                    }
                    _2446 = frontier_phi_69_pred;
                    _2444 = frontier_phi_69_pred_1;
                    _2442 = frontier_phi_69_pred_2;
                    _2440 = frontier_phi_69_pred_3;
                    _2438 = frontier_phi_69_pred_4;
                    _2436 = frontier_phi_69_pred_5;
                    uint _2581 = _2580 + 1u;
                    if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2574 = _2436;
                        _2575 = _2438;
                        _2576 = _2440;
                        _2577 = _2442;
                        _2578 = _2444;
                        _2579 = _2446;
                        _2580 = _2581;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2446;
                frontier_phi_57_58_ladder_1 = _2444;
                frontier_phi_57_58_ladder_2 = _2442;
                frontier_phi_57_58_ladder_3 = _2440;
                frontier_phi_57_58_ladder_4 = _2438;
                frontier_phi_57_58_ladder_5 = _2436;
            }
            else
            {
                frontier_phi_57_58_ladder = _2333;
                frontier_phi_57_58_ladder_1 = _2331;
                frontier_phi_57_58_ladder_2 = _2329;
                frontier_phi_57_58_ladder_3 = _2327;
                frontier_phi_57_58_ladder_4 = _2325;
                frontier_phi_57_58_ladder_5 = _2323;
            }
            _2435 = frontier_phi_57_58_ladder_5;
            _2437 = frontier_phi_57_58_ladder_4;
            _2439 = frontier_phi_57_58_ladder_3;
            _2441 = frontier_phi_57_58_ladder_2;
            _2443 = frontier_phi_57_58_ladder_1;
            _2445 = frontier_phi_57_58_ladder;
        }
        float _2450 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2235 = (_2450 * _2441) + _1669;
        _2237 = (_2450 * _2443) + _1671;
        _2239 = (_2450 * _2445) + _1673;
        _2241 = ((_2435 * _455) * _2450) + _2017;
        _2243 = ((_2437 * _457) * _2450) + _2019;
        _2245 = ((_2439 * _458) * _2450) + _2021;
    }
    else
    {
        _2235 = _1669;
        _2237 = _1671;
        _2239 = _1673;
        _2241 = _2017;
        _2243 = _2019;
        _2245 = _2021;
    }
    float _4081 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4092 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4103 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    uint _2265 = _429 + 6u;
    float _2273 = _388 / cbSceneParam._m0[86u].x;
    float _2274 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2288 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2273, _2274, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2290 = _2288.x;
    float _2291 = _2288.y;
    float _2292 = _2288.z;
    float _2293 = _2288.w;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2348 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2349 = _2348 / _321;
        float _2360 = _2349 * _373;
        float _2361 = _374 * _2349;
        float _2362 = (-0.0) - _2361;
        float _2363 = _2349 * _375;
        float _2365 = (cbSceneParam._m0[77u].w * _2362) / _2348;
        float _2366 = _2365 + cbSceneParam._m0[79u].w;
        float _2367 = cbSceneParam._m0[79u].w - _2361;
        float _2373 = sqrt(((_2360 * _2360) + (_2361 * _2361)) + (_2363 * _2363));
        float _2376 = (1.0 - (cbSceneParam._m0[77u].w / _2348)) * _2373;
        float _2381 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2383 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2536;
        if (abs((_2362 - _2365) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2536 = ((((_2366 > 0.0) ? exp2(_2381 * _2366) : (2.0 - exp2(_2383 * _2366))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2376;
        }
        else
        {
            float _2496 = 1.0 / cbSceneParam._m0[80u].x;
            float _2497 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : max(_2366, _2367));
            float _2498 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : min(_2366, _2367));
            float _2507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : min(_2497, 0.0));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            _2536 = ((abs(_2373 / _2362) * cbSceneParam._m0[80u].y) * ((((_2507 - _2508) * 2.0) - ((exp2(_2381 * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)))) - exp2(_2381 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))))) * _2496)) - ((exp2(_2383 * _2507) - exp2(_2383 * _2508)) * _2496))) + (_2376 * cbSceneParam._m0[80u].z);
        }
        vec4 _2538 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2273, _2274, 1.0), 0.0);
        float _2547 = exp2((_2536 * (-1.44269502162933349609375)) * (1.0 - _2538.w));
        float _2548 = log2(_2547);
        float _2564 = log2(_2293);
        _2385 = (exp2(_2564 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].x)) * _2538.x) / cbSceneParam._m0[78u].x)) + _2290;
        _2387 = (exp2(_2564 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].y)) * _2538.y) / cbSceneParam._m0[78u].y)) + _2291;
        _2389 = (exp2(_2564 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2548 * cbSceneParam._m0[78u].z)) * _2538.z) / cbSceneParam._m0[78u].z)) + _2292;
        _2391 = _2547 * _2293;
    }
    else
    {
        _2385 = _2290;
        _2387 = _2291;
        _2389 = _2292;
        _2391 = _2293;
    }
    float _2403 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2404 = _2403 == 3.0;
    float _2405 = log2(_2391);
    float _2412 = exp2(_2405 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2235 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _470))) + ((_2241 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1280)) * cbPerFrame._m0[3u].x));
    float _2413 = exp2(_2405 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2237 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _470))) + ((_2243 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1280)) * cbPerFrame._m0[3u].x));
    float _2414 = exp2(_2405 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2239 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _470))) + ((_2245 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1280)) * cbPerFrame._m0[3u].x));
    float _2423 = (_2403 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2423 * (_2404 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.y = _2423 * (_2404 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.z = _2423 * (_2404 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.w = cbInstanceData._m0[_2265].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2265].w;
}


