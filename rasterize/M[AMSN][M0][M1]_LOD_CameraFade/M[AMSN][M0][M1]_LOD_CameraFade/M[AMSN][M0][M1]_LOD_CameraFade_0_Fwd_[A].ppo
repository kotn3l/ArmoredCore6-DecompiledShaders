#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _932;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.x * cbMtdParam._m0[9u].x;
    float _296 = _289.y * cbMtdParam._m0[9u].y;
    float _297 = _289.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _309.x;
    vec4 _323 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = _323.z;
    float _331 = (_323.x * 2.0) + (-1.0);
    float _333 = (_323.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3330 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _352 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _356 = gl_FragCoord.x * 0.125;
    float _358 = gl_FragCoord.y * 0.125;
    float _369 = fma(_340, _213, fma(_333, _205 * TANGENT.x, (_191 * _184) * _331));
    float _372 = fma(_340, _214, fma(_333, _205 * TANGENT.y, (_191 * _185) * _331));
    float _375 = fma(_340, _215, fma(_333, _205 * TANGENT.z, (_191 * _186) * _331));
    float _379 = inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375)));
    float _380 = _379 * _369;
    float _381 = _379 * _372;
    float _382 = _379 * _375;
    float _3346 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _383 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3368 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3379 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3390 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _387 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    if (!(((sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _352 : (isnan(_352) ? 0.001000000047497451305389404296875 : max(_352, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_356, _358)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _407 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _447);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _447);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _447);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    vec4 _467 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_356, _358));
    float _469 = _467.w;
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _497 = fma(_382, cbSceneParam._m0[5u].z, fma(_381, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _380));
    float _500 = fma(_382, cbSceneParam._m0[6u].z, fma(_381, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _380));
    float _503 = fma(_382, cbSceneParam._m0[7u].z, fma(_381, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _380));
    uint _516 = uint(roundEven(NORMAL.w)) * 13u;
    uint _518 = _516 + 9u;
    uint _519 = _518 + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3401 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _531 = 1.0 - _387;
    float _532 = _528 * _531;
    float _533 = _529 * _531;
    float _534 = _530 * _531;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _387;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _387;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _387;
    float _542 = _539 + 0.039999999105930328369140625;
    float _544 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _557 = _554.x * TEXCOORD.z;
    float _558 = dot(vec3(_380, _381, _382), vec3(_463, _464, _465));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _380) - _463;
    float _566 = (_561 * _381) - _464;
    float _567 = (_561 * _382) - _465;
    float _571 = abs(dot(vec3(_463, _464, _465), vec3(_380, _381, _382)));
    float _3434 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_383);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _592 = (1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _593 = _586 * _573;
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_629, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621));
        float _660 = fma(_629, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621));
        float _664 = fma(_629, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621));
        float _689 = _621 + _380;
        float _690 = _625 + _381;
        float _691 = _629 + _382;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_380, _381, _382), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3482 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_380, _381, _382), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3515 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_380, _381, _382), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3548 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_629, cbModelParam._m0[30u].z, fma(_625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _621));
        float _976 = fma(_629, cbModelParam._m0[31u].z, fma(_625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _621));
        float _980 = fma(_629, cbModelParam._m0[32u].z, fma(_625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _621));
        float _1003 = _621 + _380;
        float _1004 = _625 + _381;
        float _1005 = _629 + _382;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_380, _381, _382), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3611 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_380, _381, _382), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3644 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_380, _381, _382), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3677 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _932;
        _1242 = _932;
        _1243 = _932;
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _944)) + _944;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _565 * 0.5;
    float _1310 = _566 * 0.5;
    float _1311 = _567 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_931, _935, _938, _941));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_933, _936, _939, _942));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_934, _937, _940, _943));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _383);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_629, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_629, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_629, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1441 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1444 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1472 = frontier_phi_18_16_ladder;
        }
        float _1680;
        if (_1441 > 0.0)
        {
            _1680 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1680 = frontier_phi_27_23_ladder;
        }
        float _1934;
        if (_1444 > 0.0)
        {
            _1934 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1934 = frontier_phi_39_34_ladder;
        }
        float _1936 = isnan(_1680) ? _1472 : (isnan(_1472) ? _1680 : min(_1472, _1680));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1438) + _1427;
        float _1942 = (_1937 * _1441) + _1431;
        float _1943 = (_1937 * _1444) + _1435;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_17_39_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_17_39_ladder_2;
        _1462 = frontier_phi_17_39_ladder_1;
        _1464 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1378);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _383);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1526 = fma(_629, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621)) + cbModelParam._m0[21u].w;
        float _1530 = fma(_629, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621)) + cbModelParam._m0[22u].w;
        float _1534 = fma(_629, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621)) + cbModelParam._m0[23u].w;
        float _1537 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1540 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1543 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1685;
        if (_1537 > 0.0)
        {
            _1685 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1685 = frontier_phi_29_25_ladder;
        }
        float _1961;
        if (_1540 > 0.0)
        {
            _1961 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1961 = frontier_phi_41_36_ladder;
        }
        float _2174;
        if (_1543 > 0.0)
        {
            _2174 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2174 = frontier_phi_50_47_ladder;
        }
        float _2176 = isnan(_1961) ? _1685 : (isnan(_1685) ? _1961 : min(_1685, _1961));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1537) + _1526;
        float _2182 = (_2177 * _1540) + _1530;
        float _2183 = (_2177 * _1543) + _1534;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_26_50_ladder = _2381.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2381.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2381.x * cbModelParam._m0[1u].z;
        }
        _1562 = frontier_phi_26_50_ladder_2;
        _1564 = frontier_phi_26_50_ladder_1;
        _1566 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1469);
        _1562 = _1546.x * cbModelParam._m0[1u].z;
        _1564 = _1546.y * cbModelParam._m0[1u].z;
        _1566 = _1546.z * cbModelParam._m0[1u].z;
    }
    float _1579 = (((_592 * _542) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_592 * _544) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_592 * _545) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1586 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1579 * cbSceneParam._m0[91u].x));
    uvec4 _1602 = floatBitsToUint(cbInstanceData._m0[_516 + 5u]);
    uint _1604 = _1602.x * 14u;
    uint _1605 = _1604 + 13u;
    float _1612 = _557 + (-1.0);
    float _1617 = (cbLight._m0[_1605].x * _1612) + 1.0;
    float _1618 = (cbLight._m0[_1605].y * _1612) + 1.0;
    float _1619 = (cbLight._m0[_1605].z * _1612) + 1.0;
    float _1620 = (cbLight._m0[_1605].w * _1612) + 1.0;
    uint _1621 = _1604 + 5u;
    float _1627 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1631 = _1604 + 4u;
    float _1638 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1642 = _1604 | 1u;
    float _1653 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_380, _381, _382));
    float _1656 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_380, _381, _382));
    float _3813 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _3824 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1661 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1663 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1670 = ((cbLight._m0[_1621].x * _1627) * _1663) + ((cbLight._m0[_1631].x * _1638) * _1661);
    float _1671 = ((_1627 * cbLight._m0[_1621].y) * _1663) + ((_1638 * cbLight._m0[_1631].y) * _1661);
    float _1672 = ((_1627 * cbLight._m0[_1621].z) * _1663) + ((_1638 * cbLight._m0[_1631].z) * _1661);
    uvec4 _1677 = floatBitsToUint(cbLight._m0[_1604 + 12u]);
    bool _1679 = _1677.x == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1679)
    {
        _1690 = _1670;
        _1692 = _1671;
        _1694 = _1672;
    }
    else
    {
        uint _1698 = _1604 + 6u;
        float _1714 = (dot(vec3(cbLight._m0[_1604 + 2u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3835 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1717 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1690 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1670;
        _1692 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1671;
        _1694 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1672;
    }
    bool _1697 = _1677.y == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1697)
    {
        _1735 = _1690;
        _1737 = _1692;
        _1739 = _1694;
    }
    else
    {
        uint _1905 = _1604 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1604 + 3u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3851 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1924 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1735 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1690;
        _1737 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1692;
        _1739 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1694;
    }
    uint _1742 = _1604 + 8u;
    float _1755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1604].w)) * _383) * 0.949999988079071044921875);
    float _1756 = _1755 * _1755;
    float _1757 = cbLight._m0[_1604].x + _463;
    float _1758 = cbLight._m0[_1604].y + _464;
    float _1759 = cbLight._m0[_1604].z + _465;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1764 = _1763 * _1757;
    float _1765 = _1763 * _1758;
    float _1766 = _1763 * _1759;
    float _1767 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1604].xyz));
    float _3867 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _1771 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1772 = dot(vec3(_380, _381, _382), vec3(_1764, _1765, _1766));
    float _3889 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1764, _1765, _1766));
    float _3900 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1756 * _1756;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1792 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _1793 = 0.959999978542327880859375 - _539;
    float _1795 = 0.959999978542327880859375 - _540;
    float _1796 = 0.959999978542327880859375 - _541;
    float _1803 = 1.0 - _1756;
    float _1814 = (0.5 / (((_1771 * ((_1770 * _1803) + _1756)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1803) + _1756) * _1770))) * _1770;
    float _3911 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    uint _1827 = _1604 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _383) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1642].x + _463;
    float _1841 = cbLight._m0[_1642].y + _464;
    float _1842 = cbLight._m0[_1642].z + _465;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1642].xyz));
    float _3922 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1854 = dot(vec3(_380, _381, _382), vec3(_1847, _1848, _1849));
    float _3933 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1847, _1848, _1849));
    float _3944 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1771 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1880) + _1839) * _1853))) * _1853;
    float _3955 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1793) + _542) * cbLight._m0[_1827].x) * _1892) * _1627) + (((((_1792 * _1793) + _542) * cbLight._m0[_1742].x) * _1816) * _1638);
    float _1903 = (((((_1873 * _1795) + _544) * cbLight._m0[_1827].y) * _1892) * _1627) + (((((_1792 * _1795) + _544) * cbLight._m0[_1742].y) * _1816) * _1638);
    float _1904 = (((((_1873 * _1796) + _545) * cbLight._m0[_1827].z) * _1892) * _1627) + (((((_1792 * _1796) + _545) * cbLight._m0[_1742].z) * _1816) * _1638);
    float _1966;
    float _1968;
    float _1970;
    if (_1679)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1604 + 2u;
        uint _1976 = _1604 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _383) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _463;
        float _1993 = cbLight._m0[_1972].y + _464;
        float _1994 = cbLight._m0[_1972].z + _465;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1972].xyz));
        float _3966 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2006 = dot(vec3(_380, _381, _382), vec3(_1999, _2000, _2001));
        float _3977 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3988 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2032 = 1.0 - _1991;
        float _2042 = (0.5 / (((_1771 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2032) + _1991) * _2005))) * _2005;
        float _3999 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1966 = (((((_2025 * _1793) + _542) * cbLight._m0[_1976].x) * _2044) * _2045) + _1902;
        _1968 = (((((_2025 * _1795) + _544) * cbLight._m0[_1976].y) * _2044) * _2045) + _1903;
        _1970 = (((((_2025 * _1796) + _545) * cbLight._m0[_1976].z) * _2044) * _2045) + _1904;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1697)
    {
        _2080 = _1966;
        _2082 = _1968;
        _2084 = _1970;
    }
    else
    {
        uint _2091 = _1604 + 3u;
        uint _2095 = _1604 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _383) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _463;
        float _2112 = cbLight._m0[_2091].y + _464;
        float _2113 = cbLight._m0[_2091].z + _465;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_2091].xyz));
        float _4015 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2125 = dot(vec3(_380, _381, _382), vec3(_2118, _2119, _2120));
        float _4026 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4037 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1771 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2151) + _2110) * _2124))) * _2124;
        float _4048 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _2080 = (((((_2144 * _1793) + _542) * cbLight._m0[_2095].x) * _2163) * _2164) + _1966;
        _2082 = (((((_2144 * _1795) + _544) * cbLight._m0[_2095].y) * _2163) * _2164) + _1968;
        _2084 = (((((_2144 * _1796) + _545) * cbLight._m0[_2095].z) * _2163) * _2164) + _1970;
    }
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    if (_1602.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            uint _2544 = 0u;
            uint _2553;
            bool _2554;
            for (;;)
            {
                _2553 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                _2554 = _2553 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2554)
                {
                    frontier_phi_67_pred = _2540;
                    frontier_phi_67_pred_1 = _2543;
                    frontier_phi_67_pred_2 = _2542;
                    frontier_phi_67_pred_3 = _2541;
                    frontier_phi_67_pred_4 = _2539;
                    frontier_phi_67_pred_5 = _2538;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2553;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2544 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2240;
                        float _2750 = _2709.y - _2241;
                        float _2751 = _2709.z - _2242;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_497, _500, _503), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4074 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2240;
                        float _2785 = (-0.0) - _2241;
                        float _2786 = (-0.0) - _2242;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _573;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_497, _500, _503), vec3(_2791, _2792, _2793));
                        float _4090 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2826 = dot(vec3(_497, _500, _503), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4101 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4112 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4123 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2613 = (_2780 * _2728.x) + _2686;
                        _2614 = (_2780 * _2728.y) + _2687;
                        _2615 = (_2780 * _2728.z) + _2688;
                        _2610 = (_2861 * _2745.x) + _2683;
                        _2611 = (_2861 * _2745.y) + _2684;
                        _2612 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_67_pred = _2612;
                    frontier_phi_67_pred_1 = _2615;
                    frontier_phi_67_pred_2 = _2614;
                    frontier_phi_67_pred_3 = _2613;
                    frontier_phi_67_pred_4 = _2611;
                    frontier_phi_67_pred_5 = _2610;
                }
                _2391 = frontier_phi_67_pred;
                _2397 = frontier_phi_67_pred_1;
                _2395 = frontier_phi_67_pred_2;
                _2393 = frontier_phi_67_pred_3;
                _2389 = frontier_phi_67_pred_4;
                _2387 = frontier_phi_67_pred_5;
                uint _2545 = _2544 + 1u;
                if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2538 = _2387;
                    _2539 = _2389;
                    _2540 = _2391;
                    _2541 = _2393;
                    _2542 = _2395;
                    _2543 = _2397;
                    _2544 = _2545;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((4294967295u << _2403) & _2286) == 0u)
        {
            _2506 = _2386;
            _2508 = _2388;
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
        }
        else
        {
            float _2531 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2532 = _2531 * _2240;
            float _2533 = _2531 * _2241;
            float _2534 = _2531 * _2242;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2666 = _2386;
                float _2667 = _2388;
                float _2668 = _2390;
                float _2669 = _2392;
                float _2670 = _2394;
                float _2671 = _2396;
                uint _2672 = _2403;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2682)
                    {
                        frontier_phi_78_pred = _2671;
                        frontier_phi_78_pred_1 = _2670;
                        frontier_phi_78_pred_2 = _2669;
                        frontier_phi_78_pred_3 = _2668;
                        frontier_phi_78_pred_4 = _2667;
                        frontier_phi_78_pred_5 = _2666;
                    }
                    else
                    {
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        uint _2894 = _2681;
                        uint _2895;
                        vec4 _2920;
                        float _2921;
                        vec4 _2936;
                        vec3 _2948;
                        vec4 _2964;
                        vec4 _2980;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2905 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2894));
                            _2895 = (_2894 + 4294967295u) & _2894;
                            uint _2907 = _2905 * 40u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            _2921 = _2920.w;
                            uint _2923 = (_2905 * 40u) + 4u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2905 * 40u) + 8u;
                            _2948 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x));
                            uint _2951 = (_2905 * 40u) + 16u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2905 * 40u) + 20u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2983 = (_2905 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2905 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_2242, _3015.z, fma(_2241, _3015.y, _3015.x * _2240)) + _3015.w;
                            _3028 = !((fma(_2242, _2996.z, fma(_2241, _2996.y, _2996.x * _2240)) + _2996.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2920.x - _2240;
                                float _3056 = _2920.y - _2241;
                                float _3057 = _2920.z - _2242;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2921 * _2921));
                                float _4134 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3073 = sqrt(_3058) * _2936.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3079 = ((1.0 - _3076) * dot(vec3(_3062, _3063, _3064), vec3(_497, _500, _503))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_2242, _2964.z, fma(_2241, _2964.y, _2964.x * _2240)) + _2964.w) / _3027;
                                float _3087 = (fma(_2242, _2980.z, fma(_2241, _2980.y, _2980.x * _2240)) + _2980.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4150 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3105 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                                float _3106 = 1.0 - _573;
                                float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                                float _3114 = _3113 * _3113;
                                float _3115 = _3114 * _3114;
                                float _3116 = _3062 - _2532;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                                float _3126 = dot(vec3(_497, _500, _503), vec3((-0.0) - _2532, (-0.0) - _2533, (-0.0) - _2534));
                                float _4161 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3130 = dot(vec3(_497, _500, _503), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                                float _4172 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                                float _3138 = _3075 * _3114;
                                float _3139 = _3138 * _3138;
                                float _3145 = ((1.0 - _3139) * dot(vec3(_497, _500, _503), vec3(_3062, _3063, _3064))) + _3139;
                                float _4183 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3147 = 1.0 - _3114;
                                float _3157 = (0.5 / (((_3146 * ((_3129 * _3147) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3114) * _3129))) * _3146;
                                float _4194 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3167 = (_3092 * _3069) * (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3137 * _3137) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3093 * _2936.z;
                                frontier_phi_84_pred_1 = _3093 * _2936.y;
                                frontier_phi_84_pred_2 = _3093 * _2936.x;
                                frontier_phi_84_pred_3 = _3167 * _2948.z;
                                frontier_phi_84_pred_4 = _3167 * _2948.y;
                                frontier_phi_84_pred_5 = _3167 * _2948.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3176 = frontier_phi_84_pred;
                            _3175 = frontier_phi_84_pred_1;
                            _3174 = frontier_phi_84_pred_2;
                            _3173 = frontier_phi_84_pred_3;
                            _3172 = frontier_phi_84_pred_4;
                            _3171 = frontier_phi_84_pred_5;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            if (_2895 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2895;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2880;
                        frontier_phi_78_pred_1 = _2879;
                        frontier_phi_78_pred_2 = _2878;
                        frontier_phi_78_pred_3 = _2877;
                        frontier_phi_78_pred_4 = _2876;
                        frontier_phi_78_pred_5 = _2875;
                    }
                    _2517 = frontier_phi_78_pred;
                    _2515 = frontier_phi_78_pred_1;
                    _2513 = frontier_phi_78_pred_2;
                    _2511 = frontier_phi_78_pred_3;
                    _2509 = frontier_phi_78_pred_4;
                    _2507 = frontier_phi_78_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2507;
                        _2667 = _2509;
                        _2668 = _2511;
                        _2669 = _2513;
                        _2670 = _2515;
                        _2671 = _2517;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2513;
                frontier_phi_59_60_ladder_1 = _2517;
                frontier_phi_59_60_ladder_2 = _2515;
                frontier_phi_59_60_ladder_3 = _2511;
                frontier_phi_59_60_ladder_4 = _2509;
                frontier_phi_59_60_ladder_5 = _2507;
            }
            else
            {
                frontier_phi_59_60_ladder = _2392;
                frontier_phi_59_60_ladder_1 = _2396;
                frontier_phi_59_60_ladder_2 = _2394;
                frontier_phi_59_60_ladder_3 = _2390;
                frontier_phi_59_60_ladder_4 = _2388;
                frontier_phi_59_60_ladder_5 = _2386;
            }
            _2506 = frontier_phi_59_60_ladder_5;
            _2508 = frontier_phi_59_60_ladder_4;
            _2510 = frontier_phi_59_60_ladder_3;
            _2512 = frontier_phi_59_60_ladder;
            _2514 = frontier_phi_59_60_ladder_2;
            _2516 = frontier_phi_59_60_ladder_1;
        }
        float _2521 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2298 = (_2521 * _2512) + _1735;
        _2300 = (_2521 * _2514) + _1737;
        _2302 = (_2521 * _2516) + _1739;
        _2304 = ((_2506 * _542) * _2521) + _2080;
        _2306 = ((_2508 * _544) * _2521) + _2082;
        _2308 = ((_2510 * _545) * _2521) + _2084;
    }
    else
    {
        _2298 = _1735;
        _2300 = _1737;
        _2302 = _1739;
        _2304 = _2080;
        _2306 = _2082;
        _2308 = _2084;
    }
    float _4210 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4221 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4232 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2325 = ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2298 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _557))) + ((_2304 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2300 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _557))) + ((_2306 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _2327 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2302 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _557))) + ((_2308 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    uint _2328 = _516 + 6u;
    float _2336 = _475 / cbSceneParam._m0[86u].x;
    float _2337 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _407 : (isnan(_407) ? cbSceneParam._m0[77u].w : min(_407, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_407 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_407) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _407 : min(cbSceneParam._m0[80u].w, _407));
        float _2412 = _2411 / _407;
        float _2423 = _2412 * _456;
        float _2424 = _457 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _458;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2444 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2446 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2623;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2623 = ((((_2429 > 0.0) ? exp2(_2444 * _2429) : (2.0 - exp2(_2446 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2567 = 1.0 / cbSceneParam._m0[80u].x;
            float _2568 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2569 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            _2623 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2578 - _2579) * 2.0) - ((exp2(_2444 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)))) - exp2(_2444 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))))) * _2567)) - ((exp2(_2446 * _2578) - exp2(_2446 * _2579)) * _2567))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2634 = exp2((_2623 * (-1.44269502162933349609375)) * (1.0 - _2625.w));
        float _2635 = log2(_2634);
        float _2651 = log2(_2356);
        _2448 = (exp2(_2651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].x)) * _2625.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2450 = (exp2(_2651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].y)) * _2625.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2452 = (exp2(_2651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].z)) * _2625.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2454 = _2634 * _2356;
    }
    else
    {
        _2448 = _2353;
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
    }
    bool _2661;
    vec4 _2464;
    vec4 _2486;
    float _2488;
    float _2492;
    float _2493;
    float _2494;
    float _2495;
    bool _2505;
    for (;;)
    {
        _2464 = cbMatDynParam._m0[0u];
        float _2466 = roundEven(_2464.y);
        bool _2467 = _2466 == 3.0;
        float _2468 = log2(_2454);
        float _2475 = exp2(_2468 * cbSceneParam._m0[78u].x) * _2325;
        float _2476 = exp2(_2468 * cbSceneParam._m0[78u].y) * _2326;
        float _2477 = exp2(_2468 * cbSceneParam._m0[78u].z) * _2327;
        float _2484 = _469 + (-0.5);
        _2486 = cbMtdParam._m0[1u];
        _2488 = _2486.y * _2484;
        float _2491 = (_2466 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2492 = _2491 * (_2467 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2448)));
        _2493 = _2491 * (_2467 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2450)));
        _2494 = _2491 * (_2467 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2452)));
        _2495 = _2484 * 0.999000012874603271484375;
        _2505 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2505)
        {
            if ((cbInstanceData._m0[_516 + 7u].x + _2495) < 0.5)
            {
                _2661 = true;
                break;
            }
        }
        uint _2602 = _518 + uint(_2464.w);
        if ((cbInstanceData._m0[_2602].w < 1.0) && ((cbInstanceData._m0[_2602].w + _2495) < 0.5))
        {
            _2661 = true;
            break;
        }
        if ((_2488 + 1.0) < _2486.x)
        {
            _2661 = true;
            break;
        }
        _2661 = false;
        break;
    }
    float _2866;
    if (_2661)
    {
        discard_state = true;
        _2866 = 0.0;
    }
    else
    {
        _2866 = cbInstanceData._m0[_2328].w;
    }
    SV_Target.x = _2492;
    SV_Target.y = _2493;
    SV_Target.z = _2494;
    SV_Target.w = _2866;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2328].w;
    discard_exit();
}


