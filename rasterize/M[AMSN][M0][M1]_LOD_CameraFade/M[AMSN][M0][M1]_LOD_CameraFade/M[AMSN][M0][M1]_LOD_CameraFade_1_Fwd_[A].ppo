#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _897;
float _3262;
float _3263;
float _3264;
float _3265;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _287 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _287.x * cbMtdParam._m0[9u].x;
    float _294 = _287.y * cbMtdParam._m0[9u].y;
    float _295 = _287.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _311 = _307.z;
    float _315 = (_307.x * 2.0) + (-1.0);
    float _317 = (_307.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3274 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))));
    float _336 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _340 = gl_FragCoord.x * 0.125;
    float _342 = gl_FragCoord.y * 0.125;
    float _353 = fma(_324, _211, fma(_317, _203 * TANGENT.x, (_189 * _182) * _315));
    float _356 = fma(_324, _212, fma(_317, _203 * TANGENT.y, (_189 * _183) * _315));
    float _359 = fma(_324, _213, fma(_317, _203 * TANGENT.z, (_189 * _184) * _315));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    float _364 = _363 * _353;
    float _365 = _363 * _356;
    float _366 = _363 * _359;
    float _3290 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _367 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _3312 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3323 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    if (!(((sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _336 : (isnan(_336) ? 0.001000000047497451305389404296875 : max(_336, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_340, _342)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _390 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _439 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _430);
    float _440 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _430);
    float _441 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _430);
    float _445 = inversesqrt(dot(vec3(_439, _440, _441), vec3(_439, _440, _441)));
    float _446 = _439 * _445;
    float _447 = _440 * _445;
    float _448 = _441 * _445;
    vec4 _450 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_340, _342));
    float _452 = _450.w;
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _480 = fma(_366, cbSceneParam._m0[5u].z, fma(_365, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _364));
    float _483 = fma(_366, cbSceneParam._m0[6u].z, fma(_365, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _364));
    float _486 = fma(_366, cbSceneParam._m0[7u].z, fma(_365, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _364));
    uint _499 = uint(roundEven(NORMAL.w)) * 13u;
    uint _501 = _499 + 9u;
    uint _502 = _501 + uint(cbMatDynParam._m0[0u].w);
    float _508 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_502].x;
    float _509 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_502].y;
    float _510 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_502].z;
    float _3334 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _525 = _522.x * TEXCOORD.z;
    float _526 = dot(vec3(_364, _365, _366), vec3(_446, _447, _448));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _364) - _446;
    float _534 = (_529 * _365) - _447;
    float _535 = (_529 * _366) - _448;
    float _539 = abs(dot(vec3(_446, _447, _448), vec3(_364, _365, _366)));
    float _3367 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_367);
    float _554 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _625 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _629 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _654 = _586 + _364;
        float _655 = _590 + _365;
        float _656 = _594 + _366;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_364, _365, _366), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3415 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_364, _365, _366), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3448 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_364, _365, _366), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3481 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _937 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _941 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _945 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _968 = _586 + _364;
        float _969 = _590 + _365;
        float _970 = _594 + _366;
        float _980 = fma(_970, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968)) - _937;
        float _981 = fma(_970, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968)) - _941;
        float _982 = fma(_970, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968)) - _945;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_937 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_941 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[35u].z) + ((((((_945 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1036 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1003.x + (-0.5));
        float _1038 = _1036 * (_1003.y + (-0.5));
        float _1039 = _1036 * (_1003.z + (-0.5));
        float _1046 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1010.x + (-0.5));
        float _1048 = _1046 * (_1010.y + (-0.5));
        float _1049 = _1046 * (_1010.z + (-0.5));
        float _1056 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1017.x + (-0.5));
        float _1058 = _1056 * (_1017.y + (-0.5));
        float _1059 = _1056 * (_1017.z + (-0.5));
        float _1066 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1024.x + (-0.5));
        float _1068 = _1066 * (_1024.y + (-0.5));
        float _1069 = _1066 * (_1024.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_364, _365, _366), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3544 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1100 + 1.0))) + _1105) * _1070;
        float _1115 = _1038 * 0.5;
        float _1116 = _1048 * 0.5;
        float _1117 = _1058 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_364, _365, _366), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3577 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1142 + 1.0))) + _1147) * _1071;
        float _1157 = _1039 * 0.5;
        float _1158 = _1049 * 0.5;
        float _1159 = _1059 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_364, _365, _366), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3610 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1184 + 1.0))) + _1189) * _1072;
        _1206 = _1039;
        _1207 = _1038;
        _1208 = _1037;
        _1209 = _1049;
        _1210 = _1048;
        _1211 = _1047;
        _1212 = _1059;
        _1213 = _1058;
        _1214 = _1057;
        _1215 = _1072;
        _1216 = _1071;
        _1217 = _1070;
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _897;
        _1207 = _897;
        _1208 = _897;
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _909)) + _909;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1230));
    float _1274 = _533 * 0.5;
    float _1275 = _534 * 0.5;
    float _1276 = _535 * 0.5;
    float _1277 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1280 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1283 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1290 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_896, _900, _903, _906));
        float _1294 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_898, _901, _904, _907));
        float _1298 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_899, _902, _905, _908));
        float _1305 = dot(vec4(cbModelParam._m0[39u]), vec4(_1274, _1275, _1276, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1319 = dot(vec4(cbModelParam._m0[40u]), vec4(_1274, _1275, _1276, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1332 = (_1328 * cbModelParam._m0[1u].x) + (_1317 * (1.0 - cbModelParam._m0[1u].x));
    float _1342 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _367);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1342 : min(cbModelParam._m0[25u].z, _1342));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1392 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1396 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1400 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1403 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1406 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1409 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1437;
        if (_1403 > 0.0)
        {
            _1437 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1437 = frontier_phi_18_16_ladder;
        }
        float _1643;
        if (_1406 > 0.0)
        {
            _1643 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1643 = frontier_phi_27_23_ladder;
        }
        float _1886;
        if (_1409 > 0.0)
        {
            _1886 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1886 = frontier_phi_39_34_ladder;
        }
        float _1888 = isnan(_1643) ? _1437 : (isnan(_1437) ? _1643 : min(_1437, _1643));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1403) + _1392;
        float _1894 = (_1889 * _1406) + _1396;
        float _1895 = (_1889 * _1409) + _1400;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1343);
            frontier_phi_17_39_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1425 = frontier_phi_17_39_ladder_2;
        _1427 = frontier_phi_17_39_ladder_1;
        _1429 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1343);
        _1425 = _1413.x * cbModelParam._m0[1u].y;
        _1427 = _1413.y * cbModelParam._m0[1u].y;
        _1429 = _1413.z * cbModelParam._m0[1u].y;
    }
    float _1433 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _367);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1433 : min(cbModelParam._m0[25u].w, _1433));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1491 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1495 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1499 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1502 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1505 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1508 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1648;
        if (_1502 > 0.0)
        {
            _1648 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1648 = frontier_phi_29_25_ladder;
        }
        float _1913;
        if (_1505 > 0.0)
        {
            _1913 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1913 = frontier_phi_41_36_ladder;
        }
        float _2118;
        if (_1508 > 0.0)
        {
            _2118 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2118 = frontier_phi_50_47_ladder;
        }
        float _2120 = isnan(_1913) ? _1648 : (isnan(_1648) ? _1913 : min(_1648, _1913));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1502) + _1491;
        float _2126 = (_2121 * _1505) + _1495;
        float _2127 = (_2121 * _1508) + _1499;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2128;
        float _2131 = _2128 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2127 > _2131) || ((_2127 < _2129) || ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 < _2129) || (_2125 > _2131))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2127, cbModelParam._m0[17u].z, fma(_2126, cbModelParam._m0[17u].y, _2125 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2127, cbModelParam._m0[18u].z, fma(_2126, cbModelParam._m0[18u].y, _2125 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2127, cbModelParam._m0[19u].z, fma(_2126, cbModelParam._m0[19u].y, _2125 * cbModelParam._m0[19u].x))), _1434);
            frontier_phi_26_50_ladder = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1527 = frontier_phi_26_50_ladder_2;
        _1529 = frontier_phi_26_50_ladder_1;
        _1531 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1434);
        _1527 = _1511.x * cbModelParam._m0[1u].z;
        _1529 = _1511.y * cbModelParam._m0[1u].z;
        _1531 = _1511.z * cbModelParam._m0[1u].z;
    }
    float _1543 = ((((1.0 - _554) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_554 * _541)) * _525;
    float _1544 = _1543 * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1545 = _1543 * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1546 = _1543 * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1549 = fma(_1546, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1544 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1546, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1544 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1546, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1544 * cbSceneParam._m0[91u].x));
    uvec4 _1565 = floatBitsToUint(cbInstanceData._m0[_499 + 5u]);
    uint _1567 = _1565.x * 14u;
    uint _1568 = _1567 + 13u;
    float _1575 = _525 + (-1.0);
    float _1580 = (cbLight._m0[_1568].x * _1575) + 1.0;
    float _1581 = (cbLight._m0[_1568].y * _1575) + 1.0;
    float _1582 = (cbLight._m0[_1568].z * _1575) + 1.0;
    float _1583 = (cbLight._m0[_1568].w * _1575) + 1.0;
    uint _1584 = _1567 + 5u;
    float _1590 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1594 = _1567 + 4u;
    float _1601 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1605 = _1567 | 1u;
    float _1616 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_364, _365, _366));
    float _1619 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_364, _365, _366));
    float _3746 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _3757 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1624 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1626 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1633 = ((cbLight._m0[_1584].x * _1590) * _1626) + ((cbLight._m0[_1594].x * _1601) * _1624);
    float _1634 = ((_1590 * cbLight._m0[_1584].y) * _1626) + ((_1601 * cbLight._m0[_1594].y) * _1624);
    float _1635 = ((_1590 * cbLight._m0[_1584].z) * _1626) + ((_1601 * cbLight._m0[_1594].z) * _1624);
    uvec4 _1640 = floatBitsToUint(cbLight._m0[_1567 + 12u]);
    bool _1642 = _1640.x == 0u;
    float _1653;
    float _1655;
    float _1657;
    if (_1642)
    {
        _1653 = _1633;
        _1655 = _1634;
        _1657 = _1635;
    }
    else
    {
        uint _1661 = _1567 + 6u;
        float _1677 = (dot(vec3(cbLight._m0[_1567 + 2u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _1678 = _1677 * _1677;
        float _3768 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1680 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1653 = (((cbLight._m0[_1661].x * 0.3183098733425140380859375) * _1679) * _1680) + _1633;
        _1655 = (((cbLight._m0[_1661].y * 0.3183098733425140380859375) * _1679) * _1680) + _1634;
        _1657 = (((cbLight._m0[_1661].z * 0.3183098733425140380859375) * _1679) * _1680) + _1635;
    }
    bool _1660 = _1640.y == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1660)
    {
        _1698 = _1653;
        _1700 = _1655;
        _1702 = _1657;
    }
    else
    {
        uint _1857 = _1567 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1567 + 3u].xyz), vec3(_364, _365, _366)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3784 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1876 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1698 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1653;
        _1700 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1655;
        _1702 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1657;
    }
    uint _1705 = _1567 + 8u;
    float _1718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _367) * 0.949999988079071044921875);
    float _1719 = _1718 * _1718;
    float _1720 = cbLight._m0[_1567].x + _446;
    float _1721 = cbLight._m0[_1567].y + _447;
    float _1722 = cbLight._m0[_1567].z + _448;
    float _1726 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
    float _1727 = _1726 * _1720;
    float _1728 = _1726 * _1721;
    float _1729 = _1726 * _1722;
    float _1730 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1567].xyz));
    float _3800 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _1734 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1735 = dot(vec3(_364, _365, _366), vec3(_1727, _1728, _1729));
    float _3822 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1739 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1727, _1728, _1729));
    float _3833 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1743 = _1719 * _1719;
    float _1747 = ((_1738 * _1738) * (_1743 + (-1.0))) + 1.0;
    float _1758 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1759 = 1.0 - _1719;
    float _1770 = (0.5 / (((_1734 * ((_1733 * _1759) + _1719)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1759) + _1719) * _1733))) * _1733;
    float _3844 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1743 / ((_1747 * _1747) * 3.141590118408203125));
    uint _1783 = _1567 + 9u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _367) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1605].x + _446;
    float _1797 = cbLight._m0[_1605].y + _447;
    float _1798 = cbLight._m0[_1605].z + _448;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1605].xyz));
    float _3855 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1810 = dot(vec3(_364, _365, _366), vec3(_1803, _1804, _1805));
    float _3866 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1803, _1804, _1805));
    float _3877 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1795 * _1795;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1795;
    float _1842 = (0.5 / (((_1734 * ((_1809 * _1832) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1832) + _1795) * _1809))) * _1809;
    float _3888 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    float _1854 = (((_1831 * cbLight._m0[_1783].x) * _1844) * _1590) + (((_1758 * cbLight._m0[_1705].x) * _1772) * _1601);
    float _1855 = (((_1831 * cbLight._m0[_1783].y) * _1844) * _1590) + (((_1758 * cbLight._m0[_1705].y) * _1772) * _1601);
    float _1856 = (((_1831 * cbLight._m0[_1783].z) * _1844) * _1590) + (((_1758 * cbLight._m0[_1705].z) * _1772) * _1601);
    float _1918;
    float _1920;
    float _1922;
    if (_1642)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1567 + 2u;
        uint _1928 = _1567 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _367) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _446;
        float _1945 = cbLight._m0[_1924].y + _447;
        float _1946 = cbLight._m0[_1924].z + _448;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_1924].xyz));
        float _3899 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1958 = dot(vec3(_364, _365, _366), vec3(_1951, _1952, _1953));
        float _3910 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3921 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1979 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1980 = 1.0 - _1943;
        float _1990 = (0.5 / (((_1734 * ((_1957 * _1980) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1980) + _1943) * _1957))) * _1957;
        float _3932 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1918 = (((_1979 * cbLight._m0[_1928].x) * _1992) * _1993) + _1854;
        _1920 = (((_1979 * cbLight._m0[_1928].y) * _1992) * _1993) + _1855;
        _1922 = (((_1979 * cbLight._m0[_1928].z) * _1992) * _1993) + _1856;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1660)
    {
        _2028 = _1918;
        _2030 = _1920;
        _2032 = _1922;
    }
    else
    {
        uint _2039 = _1567 + 3u;
        uint _2043 = _1567 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _367) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _446;
        float _2060 = cbLight._m0[_2039].y + _447;
        float _2061 = cbLight._m0[_2039].z + _448;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_364, _365, _366), vec3(cbLight._m0[_2039].xyz));
        float _3948 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2073 = dot(vec3(_364, _365, _366), vec3(_2066, _2067, _2068));
        float _3959 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _3970 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2095 = 1.0 - _2058;
        float _2105 = (0.5 / (((_1734 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _2095) + _2058) * _2072))) * _2072;
        float _3981 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _2028 = (((_2094 * cbLight._m0[_2043].x) * _2107) * _2108) + _1918;
        _2030 = (((_2094 * cbLight._m0[_2043].y) * _2107) * _2108) + _1920;
        _2032 = (((_2094 * cbLight._m0[_2043].z) * _2107) * _2108) + _1922;
    }
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    if (_1565.y == 0u)
    {
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2183;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2183;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2183;
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.x;
        uint _2210 = uint((float(_2198.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2199))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2199)));
        float _2220 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2221 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        uint _2224 = uint(isnan(14.0) ? _2221 : (isnan(_2221) ? 14.0 : min(_2221, 14.0)));
        uvec4 _2229 = texelFetch(g_lightClusterGridBuffer, int(((_2224 << 2u) + (_2210 << 6u)) >> 2u));
        uint _2230 = _2229.x;
        uint _2231 = _2198.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2231 >> 4u) & 15u)) + 4294967295u) & _2230) == 0u) || ((_2231 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            uint _2488 = 0u;
            uint _2497;
            bool _2498;
            for (;;)
            {
                _2497 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                _2498 = _2497 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2498)
                {
                    frontier_phi_67_pred = _2484;
                    frontier_phi_67_pred_1 = _2487;
                    frontier_phi_67_pred_2 = _2486;
                    frontier_phi_67_pred_3 = _2485;
                    frontier_phi_67_pred_4 = _2483;
                    frontier_phi_67_pred_5 = _2482;
                }
                else
                {
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    uint _2633;
                    _2627 = _2482;
                    _2628 = _2483;
                    _2629 = _2484;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2497;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    for (;;)
                    {
                        uint _2637 = uint(findLSB(_2633)) + (_2488 << 5u);
                        uint _2634 = (_2633 + 4294967295u) & _2633;
                        uint _2639 = _2637 * 48u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2659 = (_2637 * 48u) + 4u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2678 = (_2637 * 48u) + 8u;
                        vec3 _2689 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x));
                        float _2693 = _2653.x - _2184;
                        float _2694 = _2653.y - _2185;
                        float _2695 = _2653.z - _2186;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_480, _483, _486), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2653.w);
                        float _4007 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2710 = sqrt(_2696) * _2672.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2703) + _2714;
                        float _2720 = _2710 * _2710;
                        float _2724 = ((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2709) / ((_2720 * 0.699999988079071044921875) + 1.0);
                        float _2728 = (-0.0) - _2184;
                        float _2729 = (-0.0) - _2185;
                        float _2730 = (-0.0) - _2186;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2745 = exp2(log2(1.0 / ((_2720 * 3.5) + 5.0)) * 0.25);
                        float _2746 = 1.0 - _541;
                        float _2753 = sqrt(1.0 - ((1.0 - (_2746 * _2746)) * (1.0 - (_2745 * _2745))));
                        float _2754 = _2753 * _2753;
                        float _2755 = _2754 * _2754;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_480, _483, _486), vec3(_2735, _2736, _2737));
                        float _4023 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2770 = dot(vec3(_480, _483, _486), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _4034 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2773 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2777 = ((_2773 * _2773) * (_2755 + (-1.0))) + 1.0;
                        float _2778 = _2713 * _2754;
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2703) + _2779;
                        float _4045 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2784 = 1.0 - _2754;
                        float _2794 = (0.5 / (((_2783 * ((_2769 * _2784) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2784) + _2754) * _2769))) * _2783;
                        float _4056 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2805 = (((_2755 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_2777 * _2777) * ((_2720 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2557 = (_2724 * _2672.x) + _2630;
                        _2558 = (_2724 * _2672.y) + _2631;
                        _2559 = (_2724 * _2672.z) + _2632;
                        _2554 = (_2805 * _2689.x) + _2627;
                        _2555 = (_2805 * _2689.y) + _2628;
                        _2556 = (_2805 * _2689.z) + _2629;
                        if (_2634 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2627 = _2554;
                            _2628 = _2555;
                            _2629 = _2556;
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2634;
                        }
                    }
                    frontier_phi_67_pred = _2556;
                    frontier_phi_67_pred_1 = _2559;
                    frontier_phi_67_pred_2 = _2558;
                    frontier_phi_67_pred_3 = _2557;
                    frontier_phi_67_pred_4 = _2555;
                    frontier_phi_67_pred_5 = _2554;
                }
                _2335 = frontier_phi_67_pred;
                _2341 = frontier_phi_67_pred_1;
                _2339 = frontier_phi_67_pred_2;
                _2337 = frontier_phi_67_pred_3;
                _2333 = frontier_phi_67_pred_4;
                _2331 = frontier_phi_67_pred_5;
                uint _2489 = _2488 + 1u;
                if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2482 = _2331;
                    _2483 = _2333;
                    _2484 = _2335;
                    _2485 = _2337;
                    _2486 = _2339;
                    _2487 = _2341;
                    _2488 = _2489;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        if (((4294967295u << _2347) & _2230) == 0u)
        {
            _2450 = _2330;
            _2452 = _2332;
            _2454 = _2334;
            _2456 = _2336;
            _2458 = _2338;
            _2460 = _2340;
        }
        else
        {
            float _2475 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _2476 = _2475 * _2184;
            float _2477 = _2475 * _2185;
            float _2478 = _2475 * _2186;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2610 = _2330;
                float _2611 = _2332;
                float _2612 = _2334;
                float _2613 = _2336;
                float _2614 = _2338;
                float _2615 = _2340;
                uint _2616 = _2347;
                uint _2625;
                bool _2626;
                for (;;)
                {
                    _2625 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                    _2626 = _2625 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2626)
                    {
                        frontier_phi_78_pred = _2615;
                        frontier_phi_78_pred_1 = _2614;
                        frontier_phi_78_pred_2 = _2613;
                        frontier_phi_78_pred_3 = _2612;
                        frontier_phi_78_pred_4 = _2611;
                        frontier_phi_78_pred_5 = _2610;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2610;
                        float _2833 = _2611;
                        float _2834 = _2612;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        uint _2838 = _2625;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2616 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2186, _2959.z, fma(_2185, _2959.y, _2959.x * _2184)) + _2959.w;
                            _2972 = !((fma(_2186, _2940.z, fma(_2185, _2940.y, _2940.x * _2184)) + _2940.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2184;
                                float _3000 = _2864.y - _2185;
                                float _3001 = _2864.z - _2186;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4067 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_480, _483, _486))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2186, _2908.z, fma(_2185, _2908.y, _2908.x * _2184)) + _2908.w) / _2971;
                                float _3031 = (fma(_2186, _2924.z, fma(_2185, _2924.y, _2924.x * _2184)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4083 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _541;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2476;
                                float _3061 = _3007 - _2477;
                                float _3062 = _3008 - _2478;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_480, _483, _486), vec3((-0.0) - _2476, (-0.0) - _2477, (-0.0) - _2478));
                                float _4094 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3074 = dot(vec3(_480, _483, _486), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4105 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_480, _483, _486), vec3(_3006, _3007, _3008))) + _3083;
                                float _4116 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4127 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3037 * _2880.z;
                                frontier_phi_84_pred_1 = _3037 * _2880.y;
                                frontier_phi_84_pred_2 = _3037 * _2880.x;
                                frontier_phi_84_pred_3 = _3111 * _2892.z;
                                frontier_phi_84_pred_4 = _3111 * _2892.y;
                                frontier_phi_84_pred_5 = _3111 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_84_pred;
                            _3119 = frontier_phi_84_pred_1;
                            _3118 = frontier_phi_84_pred_2;
                            _3117 = frontier_phi_84_pred_3;
                            _3116 = frontier_phi_84_pred_4;
                            _3115 = frontier_phi_84_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2824;
                        frontier_phi_78_pred_1 = _2823;
                        frontier_phi_78_pred_2 = _2822;
                        frontier_phi_78_pred_3 = _2821;
                        frontier_phi_78_pred_4 = _2820;
                        frontier_phi_78_pred_5 = _2819;
                    }
                    _2461 = frontier_phi_78_pred;
                    _2459 = frontier_phi_78_pred_1;
                    _2457 = frontier_phi_78_pred_2;
                    _2455 = frontier_phi_78_pred_3;
                    _2453 = frontier_phi_78_pred_4;
                    _2451 = frontier_phi_78_pred_5;
                    uint _2617 = _2616 + 1u;
                    if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2610 = _2451;
                        _2611 = _2453;
                        _2612 = _2455;
                        _2613 = _2457;
                        _2614 = _2459;
                        _2615 = _2461;
                        _2616 = _2617;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2457;
                frontier_phi_59_60_ladder_1 = _2461;
                frontier_phi_59_60_ladder_2 = _2459;
                frontier_phi_59_60_ladder_3 = _2455;
                frontier_phi_59_60_ladder_4 = _2453;
                frontier_phi_59_60_ladder_5 = _2451;
            }
            else
            {
                frontier_phi_59_60_ladder = _2336;
                frontier_phi_59_60_ladder_1 = _2340;
                frontier_phi_59_60_ladder_2 = _2338;
                frontier_phi_59_60_ladder_3 = _2334;
                frontier_phi_59_60_ladder_4 = _2332;
                frontier_phi_59_60_ladder_5 = _2330;
            }
            _2450 = frontier_phi_59_60_ladder_5;
            _2452 = frontier_phi_59_60_ladder_4;
            _2454 = frontier_phi_59_60_ladder_3;
            _2456 = frontier_phi_59_60_ladder;
            _2458 = frontier_phi_59_60_ladder_2;
            _2460 = frontier_phi_59_60_ladder_1;
        }
        float _2465 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2242 = (_2465 * _2456) + _1698;
        _2244 = (_2465 * _2458) + _1700;
        _2246 = (_2465 * _2460) + _1702;
        _2248 = ((_2450 * 0.039999999105930328369140625) * _2465) + _2028;
        _2250 = ((_2452 * 0.039999999105930328369140625) * _2465) + _2030;
        _2252 = ((_2454 * 0.039999999105930328369140625) * _2465) + _2032;
    }
    else
    {
        _2242 = _1698;
        _2244 = _1700;
        _2246 = _1702;
        _2248 = _2028;
        _2250 = _2030;
        _2252 = _2032;
    }
    float _4143 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4154 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4165 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _2269 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2242 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _525))) + ((_2248 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2270 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2244 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _525))) + ((_2250 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2271 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2246 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _525))) + ((_2252 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    uint _2272 = _499 + 6u;
    float _2280 = _458 / cbSceneParam._m0[86u].x;
    float _2281 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2295 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2297 = _2295.x;
    float _2298 = _2295.y;
    float _2299 = _2295.z;
    float _2300 = _2295.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2356 = _2355 / _390;
        float _2367 = _2356 * _439;
        float _2368 = _440 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2370 = _2356 * _441;
        float _2372 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2368;
        float _2380 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2567;
        if (abs((_2369 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2567 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2511 = 1.0 / cbSceneParam._m0[80u].x;
            float _2512 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2513 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2522 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : min(_2512, 0.0));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            _2567 = ((abs(_2380 / _2369) * cbSceneParam._m0[80u].y) * ((((_2522 - _2523) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))))) * _2511)) - ((exp2(_2390 * _2522) - exp2(_2390 * _2523)) * _2511))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2569 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, 1.0), 0.0);
        float _2578 = exp2((_2567 * (-1.44269502162933349609375)) * (1.0 - _2569.w));
        float _2579 = log2(_2578);
        float _2595 = log2(_2300);
        _2392 = (exp2(_2595 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].x)) * _2569.x) / cbSceneParam._m0[78u].x)) + _2297;
        _2394 = (exp2(_2595 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].y)) * _2569.y) / cbSceneParam._m0[78u].y)) + _2298;
        _2396 = (exp2(_2595 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].z)) * _2569.z) / cbSceneParam._m0[78u].z)) + _2299;
        _2398 = _2578 * _2300;
    }
    else
    {
        _2392 = _2297;
        _2394 = _2298;
        _2396 = _2299;
        _2398 = _2300;
    }
    bool _2605;
    vec4 _2408;
    vec4 _2430;
    float _2432;
    float _2436;
    float _2437;
    float _2438;
    float _2439;
    bool _2449;
    for (;;)
    {
        _2408 = cbMatDynParam._m0[0u];
        float _2410 = roundEven(_2408.y);
        bool _2411 = _2410 == 3.0;
        float _2412 = log2(_2398);
        float _2419 = exp2(_2412 * cbSceneParam._m0[78u].x) * _2269;
        float _2420 = exp2(_2412 * cbSceneParam._m0[78u].y) * _2270;
        float _2421 = exp2(_2412 * cbSceneParam._m0[78u].z) * _2271;
        float _2428 = _452 + (-0.5);
        _2430 = cbMtdParam._m0[1u];
        _2432 = _2430.y * _2428;
        float _2435 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2436 = _2435 * (_2411 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2392)));
        _2437 = _2435 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2394)));
        _2438 = _2435 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2396)));
        _2439 = _2428 * 0.999000012874603271484375;
        _2449 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2449)
        {
            if ((cbInstanceData._m0[_499 + 7u].x + _2439) < 0.5)
            {
                _2605 = true;
                break;
            }
        }
        uint _2546 = _501 + uint(_2408.w);
        if ((cbInstanceData._m0[_2546].w < 1.0) && ((cbInstanceData._m0[_2546].w + _2439) < 0.5))
        {
            _2605 = true;
            break;
        }
        if ((_2432 + 1.0) < _2430.x)
        {
            _2605 = true;
            break;
        }
        _2605 = false;
        break;
    }
    float _2810;
    if (_2605)
    {
        discard_state = true;
        _2810 = 0.0;
    }
    else
    {
        _2810 = cbInstanceData._m0[_2272].w;
    }
    SV_Target.x = _2436;
    SV_Target.y = _2437;
    SV_Target.z = _2438;
    SV_Target.w = _2810;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2272].w;
    discard_exit();
}


