#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _936;
float _3605;
float _3606;
float _3607;
float _3608;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _293 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.x * cbMtdParam._m0[9u].x;
    float _300 = _293.y * cbMtdParam._m0[9u].y;
    float _301 = _293.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _315 = _313.x;
    vec4 _327 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _331 = _327.z;
    float _335 = (_327.x * 2.0) + (-1.0);
    float _337 = (_327.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_335, _337), vec2(_335, _337));
    float _3617 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))));
    float _356 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _360 = gl_FragCoord.x * 0.125;
    float _362 = gl_FragCoord.y * 0.125;
    float _373 = fma(_344, _217, fma(_337, _209 * TANGENT.x, (_195 * _188) * _335));
    float _376 = fma(_344, _218, fma(_337, _209 * TANGENT.y, (_195 * _189) * _335));
    float _379 = fma(_344, _219, fma(_337, _209 * TANGENT.z, (_195 * _190) * _335));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3633 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _387 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3655 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3666 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3677 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _391 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    if (!(((sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _356 : (isnan(_356) ? 0.001000000047497451305389404296875 : max(_356, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_360, _362)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    vec4 _471 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_360, _362));
    float _473 = _471.w;
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _501 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _504 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _507 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _520 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = _520 + 9u;
    uint _523 = _522 + uint(cbMatDynParam._m0[0u].w);
    float _529 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_523].x;
    float _530 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_523].y;
    float _531 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_523].z;
    float _3688 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _535 = 1.0 - _391;
    float _536 = _532 * _535;
    float _537 = _533 * _535;
    float _538 = _534 * _535;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _391;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _391;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _391;
    float _546 = _543 + 0.039999999105930328369140625;
    float _548 = _544 + 0.039999999105930328369140625;
    float _549 = _545 + 0.039999999105930328369140625;
    vec4 _558 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _561 = _558.x * TEXCOORD.z;
    float _562 = dot(vec3(_384, _385, _386), vec3(_467, _468, _469));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _384) - _467;
    float _570 = (_565 * _385) - _468;
    float _571 = (_565 * _386) - _469;
    float _575 = abs(dot(vec3(_467, _468, _469), vec3(_384, _385, _386)));
    float _3721 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(_387);
    float _590 = exp2((_577 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_577 * 3.0));
    float _596 = (1.0 - _590) * ((_577 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _597 = _590 * _577;
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _664 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _668 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _693 = _625 + _384;
        float _694 = _629 + _385;
        float _695 = _633 + _386;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_384, _385, _386), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3769 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_384, _385, _386), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3802 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_384, _385, _386), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3835 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _980 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _984 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1007 = _625 + _384;
        float _1008 = _629 + _385;
        float _1009 = _633 + _386;
        float _1019 = fma(_1009, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007)) - _976;
        float _1020 = fma(_1009, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007)) - _980;
        float _1021 = fma(_1009, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007)) - _984;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_976 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_980 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[35u].z) + ((((((_984 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1075 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1042.x + (-0.5));
        float _1077 = _1075 * (_1042.y + (-0.5));
        float _1078 = _1075 * (_1042.z + (-0.5));
        float _1085 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1049.x + (-0.5));
        float _1087 = _1085 * (_1049.y + (-0.5));
        float _1088 = _1085 * (_1049.z + (-0.5));
        float _1095 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1056.x + (-0.5));
        float _1097 = _1095 * (_1056.y + (-0.5));
        float _1098 = _1095 * (_1056.z + (-0.5));
        float _1105 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1063.x + (-0.5));
        float _1107 = _1105 * (_1063.y + (-0.5));
        float _1108 = _1105 * (_1063.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_384, _385, _386), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3898 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1139 + 1.0))) + _1144) * _1109;
        float _1154 = _1077 * 0.5;
        float _1155 = _1087 * 0.5;
        float _1156 = _1097 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_384, _385, _386), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3931 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1181 + 1.0))) + _1186) * _1110;
        float _1196 = _1078 * 0.5;
        float _1197 = _1088 * 0.5;
        float _1198 = _1098 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_384, _385, _386), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3964 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1223 + 1.0))) + _1228) * _1111;
        _1245 = _1078;
        _1246 = _1077;
        _1247 = _1076;
        _1248 = _1088;
        _1249 = _1087;
        _1250 = _1086;
        _1251 = _1098;
        _1252 = _1097;
        _1253 = _1096;
        _1254 = _1111;
        _1255 = _1110;
        _1256 = _1109;
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _936;
        _1246 = _936;
        _1247 = _936;
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _949)) + _949;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1292 = fma(_1271, cbSceneParam._m0[89u].z, fma(_1270, cbSceneParam._m0[89u].y, _1269 * cbSceneParam._m0[89u].x));
    float _1295 = fma(_1271, cbSceneParam._m0[90u].z, fma(_1270, cbSceneParam._m0[90u].y, _1269 * cbSceneParam._m0[90u].x));
    float _1298 = fma(_1271, cbSceneParam._m0[91u].z, fma(_1270, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1269));
    float _1313 = _569 * 0.5;
    float _1314 = _570 * 0.5;
    float _1315 = _571 * 0.5;
    float _1316 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1319 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1322 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1356;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1329 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_935, _939, _942, _945));
        float _1333 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_937, _940, _943, _946));
        float _1337 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_938, _941, _944, _947));
        float _1344 = dot(vec4(cbModelParam._m0[39u]), vec4(_1313, _1314, _1315, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1367;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1358 = dot(vec4(cbModelParam._m0[40u]), vec4(_1313, _1314, _1315, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1371 = (_1367 * cbModelParam._m0[1u].x) + (_1356 * (1.0 - cbModelParam._m0[1u].x));
    float _1381 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1381 : min(cbModelParam._m0[25u].z, _1381));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1431 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1435 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1439 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1442 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1445 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1448 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1476;
        if (_1442 > 0.0)
        {
            _1476 = abs((1.0 - _1431) / _1442);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1431 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1476 = frontier_phi_18_16_ladder;
        }
        float _1652;
        if (_1445 > 0.0)
        {
            _1652 = abs((1.0 - _1435) / _1445);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1435 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1652 = frontier_phi_27_23_ladder;
        }
        float _1948;
        if (_1448 > 0.0)
        {
            _1948 = abs((1.0 - _1439) / _1448);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1439 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1948 = frontier_phi_39_34_ladder;
        }
        float _1950 = isnan(_1652) ? _1476 : (isnan(_1476) ? _1652 : min(_1476, _1652));
        float _1951 = isnan(_1948) ? _1950 : (isnan(_1950) ? _1948 : min(_1950, _1948));
        float _1955 = (_1951 * _1442) + _1431;
        float _1956 = (_1951 * _1445) + _1435;
        float _1957 = (_1951 * _1448) + _1439;
        float _1958 = _1951 * 9.9999997473787516355514526367188e-05;
        float _1960 = (-1.0) - _1958;
        float _1962 = _1958 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1957 > _1962) || ((_1957 < _1960) || ((_1956 > _1962) || ((_1956 < _1960) || ((_1955 < _1960) || (_1955 > _1962))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1957, cbModelParam._m0[9u].z, fma(_1956, cbModelParam._m0[9u].y, _1955 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1957, cbModelParam._m0[10u].z, fma(_1956, cbModelParam._m0[10u].y, _1955 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1957, cbModelParam._m0[11u].z, fma(_1956, cbModelParam._m0[11u].y, _1955 * cbModelParam._m0[11u].x))), _1382);
            frontier_phi_17_39_ladder = _2102.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2102.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2102.x * cbModelParam._m0[1u].y;
        }
        _1464 = frontier_phi_17_39_ladder_2;
        _1466 = frontier_phi_17_39_ladder_1;
        _1468 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1382);
        _1464 = _1452.x * cbModelParam._m0[1u].y;
        _1466 = _1452.y * cbModelParam._m0[1u].y;
        _1468 = _1452.z * cbModelParam._m0[1u].y;
    }
    float _1472 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1472 : min(cbModelParam._m0[25u].w, _1472));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1530 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1534 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1538 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1541 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1544 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1547 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1657;
        if (_1541 > 0.0)
        {
            _1657 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1657 = frontier_phi_29_25_ladder;
        }
        float _1975;
        if (_1544 > 0.0)
        {
            _1975 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1975 = frontier_phi_41_36_ladder;
        }
        float _2313;
        if (_1547 > 0.0)
        {
            _2313 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2313 = frontier_phi_51_48_ladder;
        }
        float _2315 = isnan(_1975) ? _1657 : (isnan(_1657) ? _1975 : min(_1657, _1975));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1541) + _1530;
        float _2321 = (_2316 * _1544) + _1534;
        float _2322 = (_2316 * _1547) + _1538;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1473);
            frontier_phi_26_51_ladder = _2444.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2444.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2444.x * cbModelParam._m0[1u].z;
        }
        _1566 = frontier_phi_26_51_ladder_2;
        _1568 = frontier_phi_26_51_ladder_1;
        _1570 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1473);
        _1566 = _1550.x * cbModelParam._m0[1u].z;
        _1568 = _1550.y * cbModelParam._m0[1u].z;
        _1570 = _1550.z * cbModelParam._m0[1u].z;
    }
    float _1583 = (((_596 * _546) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1585 = (((_596 * _548) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1587 = (((_596 * _549) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1570 - _1468)) + _1468);
    float _1590 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, _1583 * cbSceneParam._m0[91u].x));
    float _1631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1639 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1644 = _1631 / _1643;
    float _1645 = _1635 / _1643;
    float _1646 = _1639 / _1643;
    float _1793;
    float _1794;
    float _1795;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1673 = ((uint(_1646 > cbSceneParam._m0[59u].y) + uint(_1646 > cbSceneParam._m0[59u].x)) + uint(_1646 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1674 = _1673 + 43u;
        uint _1682 = _1673 + 44u;
        uint _1690 = _1673 + 45u;
        uint _1698 = _1673 + 46u;
        float _1709 = fma(_1643, cbSceneParam._m0[_1674].w, fma(_1639, cbSceneParam._m0[_1674].z, fma(_1635, cbSceneParam._m0[_1674].y, _1631 * cbSceneParam._m0[_1674].x)));
        float _1713 = fma(_1643, cbSceneParam._m0[_1682].w, fma(_1639, cbSceneParam._m0[_1682].z, fma(_1635, cbSceneParam._m0[_1682].y, _1631 * cbSceneParam._m0[_1682].x)));
        float _1721 = fma(_1643, cbSceneParam._m0[_1698].w, fma(_1639, cbSceneParam._m0[_1698].z, fma(_1635, cbSceneParam._m0[_1698].y, _1631 * cbSceneParam._m0[_1698].x)));
        float _1726 = cbSceneParam._m0[33u].z * _1721;
        float _1728 = cbSceneParam._m0[33u].w * _1721;
        float _1731 = fma(_1643, cbSceneParam._m0[_1690].w, fma(_1639, cbSceneParam._m0[_1690].z, fma(_1635, cbSceneParam._m0[_1690].y, _1631 * cbSceneParam._m0[_1690].x))) / _1721;
        float _1779 = (cbSceneParam._m0[33u].x - sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646))) * cbSceneParam._m0[33u].y;
        float _4090 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1786 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 + _1709) / _1721, (_1728 + _1713) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 + _1709) / _1721, (_1713 - _1726) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 - _1726) / _1721, (_1713 - _1728) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 - _1728) / _1721, (_1726 + _1713) / _1721), _1731), 0.0)).x), vec4(0.25)));
        _1793 = 1.0 - (_1786 * cbSceneParam._m0[34u].x);
        _1794 = 1.0 - (_1786 * cbSceneParam._m0[34u].y);
        _1795 = 1.0 - (_1786 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1793 = 1.0;
        _1794 = 1.0;
        _1795 = 1.0;
    }
    float _1859;
    float _1861;
    float _1863;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1847 = fma(_1643, cbSceneParam._m0[63u].w, fma(_1639, cbSceneParam._m0[63u].z, fma(_1635, cbSceneParam._m0[63u].y, _1631 * cbSceneParam._m0[63u].x)));
        float _1848 = fma(_1643, cbSceneParam._m0[60u].w, fma(_1639, cbSceneParam._m0[60u].z, fma(_1635, cbSceneParam._m0[60u].y, _1631 * cbSceneParam._m0[60u].x))) / _1847;
        float _1849 = fma(_1643, cbSceneParam._m0[61u].w, fma(_1639, cbSceneParam._m0[61u].z, fma(_1635, cbSceneParam._m0[61u].y, _1631 * cbSceneParam._m0[61u].x))) / _1847;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1848 >= cbSceneParam._m0[64u].x) && (_1849 >= cbSceneParam._m0[64u].y)) && (_1848 <= cbSceneParam._m0[64u].z)) && (_1849 <= cbSceneParam._m0[64u].w))
        {
            float _1988 = fma(_1643, cbSceneParam._m0[62u].w, fma(_1639, cbSceneParam._m0[62u].z, fma(_1635, cbSceneParam._m0[62u].y, _1631 * cbSceneParam._m0[62u].x))) / _1847;
            float _1992 = isnan(cbSceneParam._m0[41u].w) ? _1988 : (isnan(_1988) ? cbSceneParam._m0[41u].w : max(_1988, cbSceneParam._m0[41u].w));
            float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646))) * cbSceneParam._m0[33u].y;
            float _4106 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
            float _2042 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1848, cbSceneParam._m0[33u].w + _1849), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1848, _1849 - cbSceneParam._m0[33u].z), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1848 - cbSceneParam._m0[33u].z, _1849 - cbSceneParam._m0[33u].w), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1848 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1849), _1992), 0.0)).x), vec4(0.25)));
            float _2046 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
            float _2047 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
            float _2048 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2047) ? _1794 : (isnan(_1794) ? _2047 : min(_1794, _2047));
            frontier_phi_38_37_ladder_1 = isnan(_2046) ? _1793 : (isnan(_1793) ? _2046 : min(_1793, _2046));
            frontier_phi_38_37_ladder_2 = isnan(_2048) ? _1795 : (isnan(_1795) ? _2048 : min(_1795, _2048));
        }
        else
        {
            frontier_phi_38_37_ladder = _1794;
            frontier_phi_38_37_ladder_1 = _1793;
            frontier_phi_38_37_ladder_2 = _1795;
        }
        _1859 = frontier_phi_38_37_ladder_1;
        _1861 = frontier_phi_38_37_ladder;
        _1863 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1859 = _1793;
        _1861 = _1794;
        _1863 = _1795;
    }
    uvec4 _1868 = floatBitsToUint(cbInstanceData._m0[_520 + 5u]);
    uint _1870 = _1868.x * 14u;
    uint _1871 = _1870 + 13u;
    float _1878 = _561 + (-1.0);
    float _1883 = (cbLight._m0[_1871].x * _1878) + 1.0;
    float _1884 = (cbLight._m0[_1871].y * _1878) + 1.0;
    float _1885 = (cbLight._m0[_1871].z * _1878) + 1.0;
    float _1886 = (cbLight._m0[_1871].w * _1878) + 1.0;
    uint _1887 = _1870 + 5u;
    float _1893 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1897 = _1870 + 4u;
    float _1907 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1911 = _1870 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_384, _385, _386));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_384, _385, _386));
    float _4142 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4153 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1887].x * _1893) * _1932) + (((cbLight._m0[_1897].x * _1859) * _1907) * _1930);
    float _1940 = ((_1893 * cbLight._m0[_1887].y) * _1932) + (((cbLight._m0[_1897].y * _1861) * _1907) * _1930);
    float _1941 = ((_1893 * cbLight._m0[_1887].z) * _1932) + (((cbLight._m0[_1897].z * _1863) * _1907) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1870 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_1947)
    {
        _2049 = _1939;
        _2051 = _1940;
        _2053 = _1941;
    }
    else
    {
        uint _2057 = _1870 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1870 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4164 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2076 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1939;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1940;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1941;
    }
    bool _2056 = _1945.y == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2056)
    {
        _2111 = _2049;
        _2113 = _2051;
        _2115 = _2053;
    }
    else
    {
        uint _2284 = _1870 + 7u;
        float _2300 = (dot(vec3(cbLight._m0[_1870 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4180 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2303 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2111 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2049;
        _2113 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2051;
        _2115 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2053;
    }
    uint _2118 = _1870 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _387) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1870].x + _467;
    float _2134 = cbLight._m0[_1870].y + _468;
    float _2135 = cbLight._m0[_1870].z + _469;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1870].xyz));
    float _4196 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _2147 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2148 = dot(vec3(_384, _385, _386), vec3(_2140, _2141, _2142));
    float _4218 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2140, _2141, _2142));
    float _4229 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0);
    float _2169 = 0.959999978542327880859375 - _543;
    float _2171 = 0.959999978542327880859375 - _544;
    float _2172 = 0.959999978542327880859375 - _545;
    float _2179 = 1.0 - _2132;
    float _2190 = (0.5 / (((_2147 * ((_2146 * _2179) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2179) + _2132) * _2146))) * _2146;
    float _4240 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2206 = _1870 + 9u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _387) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_1911].x + _467;
    float _2220 = cbLight._m0[_1911].y + _468;
    float _2221 = cbLight._m0[_1911].z + _469;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1911].xyz));
    float _4251 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2233 = dot(vec3(_384, _385, _386), vec3(_2226, _2227, _2228));
    float _4262 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2226, _2227, _2228));
    float _4273 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2218 * _2218;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
    float _2259 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2147 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2259) + _2218) * _2232))) * _2232;
    float _4284 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    float _2281 = (((((_2252 * _2169) + _546) * cbLight._m0[_2206].x) * _2271) * _1893) + ((((cbLight._m0[_2118].x * _1859) * ((_2168 * _2169) + _546)) * _2192) * _1907);
    float _2282 = (((((_2252 * _2171) + _548) * cbLight._m0[_2206].y) * _2271) * _1893) + ((((cbLight._m0[_2118].y * _1861) * ((_2168 * _2171) + _548)) * _2192) * _1907);
    float _2283 = (((((_2252 * _2172) + _549) * cbLight._m0[_2206].z) * _2271) * _1893) + ((((cbLight._m0[_2118].z * _1863) * ((_2168 * _2172) + _549)) * _2192) * _1907);
    float _2339;
    float _2341;
    float _2343;
    if (_1947)
    {
        _2339 = _2281;
        _2341 = _2282;
        _2343 = _2283;
    }
    else
    {
        uint _2345 = _1870 + 2u;
        uint _2349 = _1870 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _387) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _467;
        float _2366 = cbLight._m0[_2345].y + _468;
        float _2367 = cbLight._m0[_2345].z + _469;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2345].xyz));
        float _4295 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2379 = dot(vec3(_384, _385, _386), vec3(_2372, _2373, _2374));
        float _4306 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4317 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2147 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2405) + _2364) * _2378))) * _2378;
        float _4328 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2339 = (((((_2398 * _2169) + _546) * cbLight._m0[_2349].x) * _2417) * _2418) + _2281;
        _2341 = (((((_2398 * _2171) + _548) * cbLight._m0[_2349].y) * _2417) * _2418) + _2282;
        _2343 = (((((_2398 * _2172) + _549) * cbLight._m0[_2349].z) * _2417) * _2418) + _2283;
    }
    float _2449;
    float _2451;
    float _2453;
    if (_2056)
    {
        _2449 = _2339;
        _2451 = _2341;
        _2453 = _2343;
    }
    else
    {
        uint _2460 = _1870 + 3u;
        uint _2464 = _1870 + 11u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _387) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _467;
        float _2481 = cbLight._m0[_2460].y + _468;
        float _2482 = cbLight._m0[_2460].z + _469;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2460].xyz));
        float _4344 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2494 = dot(vec3(_384, _385, _386), vec3(_2487, _2488, _2489));
        float _4355 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4366 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2147 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2520) + _2479) * _2493))) * _2493;
        float _4377 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2449 = (((((_2513 * _2169) + _546) * cbLight._m0[_2464].x) * _2532) * _2533) + _2339;
        _2451 = (((((_2513 * _2171) + _548) * cbLight._m0[_2464].y) * _2532) * _2533) + _2341;
        _2453 = (((((_2513 * _2172) + _549) * cbLight._m0[_2464].z) * _2532) * _2533) + _2343;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1868.y == 0u)
    {
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2555)));
        float _2576 = (log2(_1646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2833)
                {
                    frontier_phi_72_pred = _2822;
                    frontier_phi_72_pred_1 = _2821;
                    frontier_phi_72_pred_2 = _2820;
                    frontier_phi_72_pred_3 = _2819;
                    frontier_phi_72_pred_4 = _2818;
                    frontier_phi_72_pred_5 = _2817;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2832;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2823 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _1644;
                        float _3029 = _2988.y - _1645;
                        float _3030 = _2988.z - _1646;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_501, _504, _507), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4403 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _1644;
                        float _3064 = (-0.0) - _1645;
                        float _3065 = (-0.0) - _1646;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3079 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _577;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_501, _504, _507), vec3(_3070, _3071, _3072));
                        float _4419 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3104 = dot(vec3(_501, _504, _507), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4430 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3048 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3038) + _3113;
                        float _4441 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4452 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) / ((_3111 * _3111) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2892 = (_3059 * _3007.x) + _2965;
                        _2893 = (_3059 * _3007.y) + _2966;
                        _2894 = (_3059 * _3007.z) + _2967;
                        _2889 = (_3139 * _3024.x) + _2962;
                        _2890 = (_3139 * _3024.y) + _2963;
                        _2891 = (_3139 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_72_pred = _2894;
                    frontier_phi_72_pred_1 = _2893;
                    frontier_phi_72_pred_2 = _2892;
                    frontier_phi_72_pred_3 = _2891;
                    frontier_phi_72_pred_4 = _2890;
                    frontier_phi_72_pred_5 = _2889;
                }
                _2676 = frontier_phi_72_pred;
                _2674 = frontier_phi_72_pred_1;
                _2672 = frontier_phi_72_pred_2;
                _2670 = frontier_phi_72_pred_3;
                _2668 = frontier_phi_72_pred_4;
                _2666 = frontier_phi_72_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2666;
                    _2818 = _2668;
                    _2819 = _2670;
                    _2820 = _2672;
                    _2821 = _2674;
                    _2822 = _2676;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2682) & _2586) == 0u)
        {
            _2785 = _2665;
            _2787 = _2667;
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
            float _2811 = _2810 * _1644;
            float _2812 = _2810 * _1645;
            float _2813 = _2810 * _1646;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2945 = _2665;
                float _2946 = _2667;
                float _2947 = _2669;
                float _2948 = _2671;
                float _2949 = _2673;
                float _2950 = _2675;
                uint _2951 = _2682;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2961)
                    {
                        frontier_phi_83_pred = _2949;
                        frontier_phi_83_pred_1 = _2948;
                        frontier_phi_83_pred_2 = _2947;
                        frontier_phi_83_pred_3 = _2946;
                        frontier_phi_83_pred_4 = _2945;
                        frontier_phi_83_pred_5 = _2950;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        uint _3172 = _2960;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3242;
                        vec4 _3258;
                        float _3305;
                        bool _3306;
                        for (;;)
                        {
                            uint _3183 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3229 = (_3183 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3245 = (_3183 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3261 = (_3183 * 40u) + 24u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3280 = (_3183 * 40u) + 28u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3305 = fma(_1646, _3293.z, fma(_1645, _3293.y, _3293.x * _1644)) + _3293.w;
                            _3306 = !((fma(_1646, _3274.z, fma(_1645, _3274.y, _3274.x * _1644)) + _3274.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3306)
                            {
                                float _3333 = _3198.x - _1644;
                                float _3334 = _3198.y - _1645;
                                float _3335 = _3198.z - _1646;
                                float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                                float _3339 = inversesqrt(_3336);
                                float _3340 = _3339 * _3333;
                                float _3341 = _3339 * _3334;
                                float _3342 = _3339 * _3335;
                                float _3346 = 1.0 - (_3336 / (_3199 * _3199));
                                float _4463 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3351 = sqrt(_3336) * _3214.w;
                                float _3353 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                                float _3354 = _3353 * _3353;
                                float _3357 = ((1.0 - _3354) * dot(vec3(_3340, _3341, _3342), vec3(_501, _504, _507))) + _3354;
                                float _3360 = _3351 * _3351;
                                float _3364 = (fma(_1646, _3242.z, fma(_1645, _3242.y, _3242.x * _1644)) + _3242.w) / _3305;
                                float _3365 = (fma(_1646, _3258.z, fma(_1645, _3258.y, _3258.x * _1644)) + _3258.w) / _3305;
                                float _3369 = 1.0 - dot(vec2(_3364, _3365), vec2(_3364, _3365));
                                float _4479 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3371 = _3370 * (((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3347) / ((_3360 * 0.699999988079071044921875) + 1.0));
                                float _3383 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _577;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3340 - _2811;
                                float _3395 = _3341 - _2812;
                                float _3396 = _3342 - _2813;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_501, _504, _507), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4490 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3408 = dot(vec3(_501, _504, _507), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4501 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = _3353 * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_501, _504, _507), vec3(_3340, _3341, _3342))) + _3417;
                                float _4512 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4523 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = (_3370 * _3347) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3415 * _3415) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3371 * _3214.y;
                                frontier_phi_89_pred_1 = _3371 * _3214.x;
                                frontier_phi_89_pred_2 = _3445 * _3226.z;
                                frontier_phi_89_pred_3 = _3445 * _3226.y;
                                frontier_phi_89_pred_4 = _3445 * _3226.x;
                                frontier_phi_89_pred_5 = _3371 * _3214.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3453 = frontier_phi_89_pred;
                            _3452 = frontier_phi_89_pred_1;
                            _3451 = frontier_phi_89_pred_2;
                            _3450 = frontier_phi_89_pred_3;
                            _3449 = frontier_phi_89_pred_4;
                            _3454 = frontier_phi_89_pred_5;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3153 = _3449 + _3166;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3157;
                        frontier_phi_83_pred_1 = _3156;
                        frontier_phi_83_pred_2 = _3155;
                        frontier_phi_83_pred_3 = _3154;
                        frontier_phi_83_pred_4 = _3153;
                        frontier_phi_83_pred_5 = _3158;
                    }
                    _2794 = frontier_phi_83_pred;
                    _2792 = frontier_phi_83_pred_1;
                    _2790 = frontier_phi_83_pred_2;
                    _2788 = frontier_phi_83_pred_3;
                    _2786 = frontier_phi_83_pred_4;
                    _2796 = frontier_phi_83_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2786;
                        _2946 = _2788;
                        _2947 = _2790;
                        _2948 = _2792;
                        _2949 = _2794;
                        _2950 = _2796;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2796;
                frontier_phi_64_65_ladder_1 = _2792;
                frontier_phi_64_65_ladder_2 = _2794;
                frontier_phi_64_65_ladder_3 = _2788;
                frontier_phi_64_65_ladder_4 = _2786;
                frontier_phi_64_65_ladder_5 = _2790;
            }
            else
            {
                frontier_phi_64_65_ladder = _2675;
                frontier_phi_64_65_ladder_1 = _2671;
                frontier_phi_64_65_ladder_2 = _2673;
                frontier_phi_64_65_ladder_3 = _2667;
                frontier_phi_64_65_ladder_4 = _2665;
                frontier_phi_64_65_ladder_5 = _2669;
            }
            _2785 = frontier_phi_64_65_ladder_4;
            _2787 = frontier_phi_64_65_ladder_3;
            _2789 = frontier_phi_64_65_ladder_5;
            _2791 = frontier_phi_64_65_ladder_1;
            _2793 = frontier_phi_64_65_ladder_2;
            _2795 = frontier_phi_64_65_ladder;
        }
        float _2800 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2598 = (_2800 * _2791) + _2111;
        _2600 = (_2800 * _2793) + _2113;
        _2602 = (_2800 * _2795) + _2115;
        _2604 = ((_2785 * _546) * _2800) + _2449;
        _2606 = ((_2787 * _548) * _2800) + _2451;
        _2608 = ((_2789 * _549) * _2800) + _2453;
    }
    else
    {
        _2598 = _2111;
        _2600 = _2113;
        _2602 = _2115;
        _2604 = _2449;
        _2606 = _2451;
        _2608 = _2453;
    }
    float _4539 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4550 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4561 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2625 = ((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2598 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _561))) + ((_2604 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2600 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _561))) + ((_2606 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2602 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _561))) + ((_2608 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    uint _2628 = _520 + 6u;
    float _2636 = _479 / cbSceneParam._m0[86u].x;
    float _2637 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2691 = _2690 / _411;
        float _2702 = _2691 * _460;
        float _2703 = _461 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2705 = _2691 * _462;
        float _2707 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2703;
        float _2715 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2902;
        if (abs((_2704 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2902 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2848 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2902 = ((abs(_2715 / _2704) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2725 * _2857) - exp2(_2725 * _2858)) * _2846))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2904 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2913 = exp2((_2902 * (-1.44269502162933349609375)) * (1.0 - _2904.w));
        float _2914 = log2(_2913);
        float _2930 = log2(_2656);
        _2727 = (exp2(_2930 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].x)) * _2904.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2729 = (exp2(_2930 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].y)) * _2904.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2731 = (exp2(_2930 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].z)) * _2904.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2733 = _2913 * _2656;
    }
    else
    {
        _2727 = _2653;
        _2729 = _2654;
        _2731 = _2655;
        _2733 = _2656;
    }
    bool _2940;
    vec4 _2743;
    vec4 _2765;
    float _2767;
    float _2771;
    float _2772;
    float _2773;
    float _2774;
    bool _2784;
    for (;;)
    {
        _2743 = cbMatDynParam._m0[0u];
        float _2745 = roundEven(_2743.y);
        bool _2746 = _2745 == 3.0;
        float _2747 = log2(_2733);
        float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * _2625;
        float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * _2626;
        float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * _2627;
        float _2763 = _473 + (-0.5);
        _2765 = cbMtdParam._m0[1u];
        _2767 = _2765.y * _2763;
        float _2770 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2771 = _2770 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
        _2772 = _2770 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
        _2773 = _2770 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
        _2774 = _2763 * 0.999000012874603271484375;
        _2784 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2784)
        {
            if ((cbInstanceData._m0[_520 + 7u].x + _2774) < 0.5)
            {
                _2940 = true;
                break;
            }
        }
        uint _2881 = _522 + uint(_2743.w);
        if ((cbInstanceData._m0[_2881].w < 1.0) && ((cbInstanceData._m0[_2881].w + _2774) < 0.5))
        {
            _2940 = true;
            break;
        }
        if ((_2767 + 1.0) < _2765.x)
        {
            _2940 = true;
            break;
        }
        _2940 = false;
        break;
    }
    float _3144;
    if (_2940)
    {
        discard_state = true;
        _3144 = 0.0;
    }
    else
    {
        _3144 = cbInstanceData._m0[_2628].w;
    }
    SV_Target.x = _2771;
    SV_Target.y = _2772;
    SV_Target.z = _2773;
    SV_Target.w = _3144;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
    discard_exit();
}


