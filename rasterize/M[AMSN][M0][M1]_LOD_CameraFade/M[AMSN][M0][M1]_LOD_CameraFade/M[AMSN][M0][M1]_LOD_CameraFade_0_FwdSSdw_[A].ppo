#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.x * cbMtdParam._m0[9u].x;
    float _298 = _291.y * cbMtdParam._m0[9u].y;
    float _299 = _291.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _311.x;
    vec4 _325 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _329 = _325.z;
    float _333 = (_325.x * 2.0) + (-1.0);
    float _335 = (_325.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_333, _335), vec2(_333, _335));
    float _3356 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    float _354 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _358 = gl_FragCoord.x * 0.125;
    float _360 = gl_FragCoord.y * 0.125;
    float _371 = fma(_342, _215, fma(_335, _207 * TANGENT.x, (_193 * _186) * _333));
    float _374 = fma(_342, _216, fma(_335, _207 * TANGENT.y, (_193 * _187) * _333));
    float _377 = fma(_342, _217, fma(_335, _207 * TANGENT.z, (_193 * _188) * _333));
    float _381 = inversesqrt(dot(vec3(_371, _374, _377), vec3(_371, _374, _377)));
    float _382 = _381 * _371;
    float _383 = _381 * _374;
    float _384 = _381 * _377;
    float _3372 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _385 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3394 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3405 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3416 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _389 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    if (!(((sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _354 : (isnan(_354) ? 0.001000000047497451305389404296875 : max(_354, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_358, _360)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _409 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _458 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _459 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _464 = inversesqrt(dot(vec3(_458, _459, _460), vec3(_458, _459, _460)));
    float _465 = _458 * _464;
    float _466 = _459 * _464;
    float _467 = _460 * _464;
    vec4 _469 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_358, _360));
    float _471 = _469.w;
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_384, cbSceneParam._m0[5u].z, fma(_383, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _382));
    float _502 = fma(_384, cbSceneParam._m0[6u].z, fma(_383, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _382));
    float _505 = fma(_384, cbSceneParam._m0[7u].z, fma(_383, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _382));
    uint _518 = uint(roundEven(NORMAL.w)) * 13u;
    uint _520 = _518 + 9u;
    uint _521 = _520 + uint(cbMatDynParam._m0[0u].w);
    float _527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_521].x;
    float _528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_521].y;
    float _529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_521].z;
    float _3427 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _533 = 1.0 - _389;
    float _534 = _530 * _533;
    float _535 = _531 * _533;
    float _536 = _532 * _533;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _389;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _389;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _389;
    float _544 = _541 + 0.039999999105930328369140625;
    float _546 = _542 + 0.039999999105930328369140625;
    float _547 = _543 + 0.039999999105930328369140625;
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _559 = _556.x * TEXCOORD.z;
    float _560 = dot(vec3(_382, _383, _384), vec3(_465, _466, _467));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _382) - _465;
    float _568 = (_563 * _383) - _466;
    float _569 = (_563 * _384) - _467;
    float _573 = abs(dot(vec3(_465, _466, _467), vec3(_382, _383, _384)));
    float _3460 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_385);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _594 = (1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _595 = _588 * _575;
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _662 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _666 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _691 = _623 + _382;
        float _692 = _627 + _383;
        float _693 = _631 + _384;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_382, _383, _384), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3508 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_382, _383, _384), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3541 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_382, _383, _384), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3574 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _978 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _982 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1005 = _623 + _382;
        float _1006 = _627 + _383;
        float _1007 = _631 + _384;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_382, _383, _384), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3637 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_382, _383, _384), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3670 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_382, _383, _384), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3703 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _934;
        _1244 = _934;
        _1245 = _934;
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _567 * 0.5;
    float _1312 = _568 * 0.5;
    float _1313 = _569 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _937, _940, _943));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_935, _938, _941, _944));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_936, _939, _942, _945));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _385);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1429 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1433 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1437 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1440 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1443 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1446 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1474;
        if (_1440 > 0.0)
        {
            _1474 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1474 = frontier_phi_18_16_ladder;
        }
        float _1703;
        if (_1443 > 0.0)
        {
            _1703 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1703 = frontier_phi_27_23_ladder;
        }
        float _1960;
        if (_1446 > 0.0)
        {
            _1960 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_39_34_ladder;
        }
        float _1962 = isnan(_1703) ? _1474 : (isnan(_1474) ? _1703 : min(_1474, _1703));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1440) + _1429;
        float _1968 = (_1963 * _1443) + _1433;
        float _1969 = (_1963 * _1446) + _1437;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_17_39_ladder = _2097.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2097.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2097.x * cbModelParam._m0[1u].y;
        }
        _1462 = frontier_phi_17_39_ladder_2;
        _1464 = frontier_phi_17_39_ladder_1;
        _1466 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1380);
        _1462 = _1450.x * cbModelParam._m0[1u].y;
        _1464 = _1450.y * cbModelParam._m0[1u].y;
        _1466 = _1450.z * cbModelParam._m0[1u].y;
    }
    float _1470 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _385);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1470 : min(cbModelParam._m0[25u].w, _1470));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1528 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1532 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1536 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1539 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1542 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1545 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1708;
        if (_1539 > 0.0)
        {
            _1708 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1708 = frontier_phi_29_25_ladder;
        }
        float _1987;
        if (_1542 > 0.0)
        {
            _1987 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1987 = frontier_phi_41_36_ladder;
        }
        float _2200;
        if (_1545 > 0.0)
        {
            _2200 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2200 = frontier_phi_50_47_ladder;
        }
        float _2202 = isnan(_1987) ? _1708 : (isnan(_1708) ? _1987 : min(_1708, _1987));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1539) + _1528;
        float _2208 = (_2203 * _1542) + _1532;
        float _2209 = (_2203 * _1545) + _1536;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1471);
            frontier_phi_26_50_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1564 = frontier_phi_26_50_ladder_2;
        _1566 = frontier_phi_26_50_ladder_1;
        _1568 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1471);
        _1564 = _1548.x * cbModelParam._m0[1u].z;
        _1566 = _1548.y * cbModelParam._m0[1u].z;
        _1568 = _1548.z * cbModelParam._m0[1u].z;
    }
    float _1581 = (((_594 * _544) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_594 * _546) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1585 = (((_594 * _547) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1588 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1581 * cbSceneParam._m0[91u].x));
    vec4 _1602 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_477, _478));
    float _1604 = _1602.w;
    float _1616 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1604);
    float _1617 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1604);
    float _1618 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1604);
    uvec4 _1622 = floatBitsToUint(cbInstanceData._m0[_518 + 5u]);
    uint _1624 = _1622.x * 14u;
    uint _1625 = _1624 + 13u;
    float _1632 = _559 + (-1.0);
    float _1637 = (cbLight._m0[_1625].x * _1632) + 1.0;
    float _1638 = (cbLight._m0[_1625].y * _1632) + 1.0;
    float _1639 = (cbLight._m0[_1625].z * _1632) + 1.0;
    float _1640 = (cbLight._m0[_1625].w * _1632) + 1.0;
    uint _1641 = _1624 + 5u;
    float _1647 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1651 = _1624 + 4u;
    float _1661 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1665 = _1624 | 1u;
    float _1676 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_382, _383, _384));
    float _1679 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_382, _383, _384));
    float _3839 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _3850 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1684 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.3183098733425140380859375;
    float _1686 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.3183098733425140380859375;
    float _1693 = ((cbLight._m0[_1641].x * _1647) * _1686) + (((cbLight._m0[_1651].x * _1616) * _1661) * _1684);
    float _1694 = ((_1647 * cbLight._m0[_1641].y) * _1686) + (((cbLight._m0[_1651].y * _1617) * _1661) * _1684);
    float _1695 = ((_1647 * cbLight._m0[_1641].z) * _1686) + (((cbLight._m0[_1651].z * _1618) * _1661) * _1684);
    uvec4 _1700 = floatBitsToUint(cbLight._m0[_1624 + 12u]);
    bool _1702 = _1700.x == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1702)
    {
        _1713 = _1693;
        _1715 = _1694;
        _1717 = _1695;
    }
    else
    {
        uint _1721 = _1624 + 6u;
        float _1737 = (dot(vec3(cbLight._m0[_1624 + 2u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3861 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1740 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1713 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1693;
        _1715 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1694;
        _1717 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1695;
    }
    bool _1720 = _1700.y == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1720)
    {
        _1758 = _1713;
        _1760 = _1715;
        _1762 = _1717;
    }
    else
    {
        uint _1931 = _1624 + 7u;
        float _1947 = (dot(vec3(cbLight._m0[_1624 + 3u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3877 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1950 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1758 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1713;
        _1760 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1715;
        _1762 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1717;
    }
    uint _1765 = _1624 + 8u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _385) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1624].x + _465;
    float _1781 = cbLight._m0[_1624].y + _466;
    float _1782 = cbLight._m0[_1624].z + _467;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1624].xyz));
    float _3893 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _1794 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1795 = dot(vec3(_382, _383, _384), vec3(_1787, _1788, _1789));
    float _3915 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1787, _1788, _1789));
    float _3926 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1779 * _1779;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
    float _1816 = 0.959999978542327880859375 - _541;
    float _1818 = 0.959999978542327880859375 - _542;
    float _1819 = 0.959999978542327880859375 - _543;
    float _1826 = 1.0 - _1779;
    float _1837 = (0.5 / (((_1794 * ((_1793 * _1826) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1826) + _1779) * _1793))) * _1793;
    float _3937 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    uint _1853 = _1624 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _385) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1665].x + _465;
    float _1867 = cbLight._m0[_1665].y + _466;
    float _1868 = cbLight._m0[_1665].z + _467;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1665].xyz));
    float _3948 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1880 = dot(vec3(_382, _383, _384), vec3(_1873, _1874, _1875));
    float _3959 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1873, _1874, _1875));
    float _3970 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1899 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
    float _1906 = 1.0 - _1865;
    float _1916 = (0.5 / (((_1794 * ((_1879 * _1906) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1906) + _1865) * _1879))) * _1879;
    float _3981 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1928 = (((((_1899 * _1816) + _544) * cbLight._m0[_1853].x) * _1918) * _1647) + ((((cbLight._m0[_1765].x * _1616) * ((_1815 * _1816) + _544)) * _1839) * _1661);
    float _1929 = (((((_1899 * _1818) + _546) * cbLight._m0[_1853].y) * _1918) * _1647) + ((((cbLight._m0[_1765].y * _1617) * ((_1815 * _1818) + _546)) * _1839) * _1661);
    float _1930 = (((((_1899 * _1819) + _547) * cbLight._m0[_1853].z) * _1918) * _1647) + ((((cbLight._m0[_1765].z * _1618) * ((_1815 * _1819) + _547)) * _1839) * _1661);
    float _1992;
    float _1994;
    float _1996;
    if (_1702)
    {
        _1992 = _1928;
        _1994 = _1929;
        _1996 = _1930;
    }
    else
    {
        uint _1998 = _1624 + 2u;
        uint _2002 = _1624 + 10u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _385) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _465;
        float _2019 = cbLight._m0[_1998].y + _466;
        float _2020 = cbLight._m0[_1998].z + _467;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1998].xyz));
        float _3992 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2032 = dot(vec3(_382, _383, _384), vec3(_2025, _2026, _2027));
        float _4003 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _4014 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
        float _2058 = 1.0 - _2017;
        float _2068 = (0.5 / (((_1794 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2058) + _2017) * _2031))) * _2031;
        float _4025 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2070 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2071 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1992 = (((((_2051 * _1816) + _544) * cbLight._m0[_2002].x) * _2070) * _2071) + _1928;
        _1994 = (((((_2051 * _1818) + _546) * cbLight._m0[_2002].y) * _2070) * _2071) + _1929;
        _1996 = (((((_2051 * _1819) + _547) * cbLight._m0[_2002].z) * _2070) * _2071) + _1930;
    }
    float _2106;
    float _2108;
    float _2110;
    if (_1720)
    {
        _2106 = _1992;
        _2108 = _1994;
        _2110 = _1996;
    }
    else
    {
        uint _2117 = _1624 + 3u;
        uint _2121 = _1624 + 11u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _385) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _465;
        float _2138 = cbLight._m0[_2117].y + _466;
        float _2139 = cbLight._m0[_2117].z + _467;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2117].xyz));
        float _4041 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2151 = dot(vec3(_382, _383, _384), vec3(_2144, _2145, _2146));
        float _4052 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4063 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1794 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2177) + _2136) * _2150))) * _2150;
        float _4074 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _2106 = (((((_2170 * _1816) + _544) * cbLight._m0[_2121].x) * _2189) * _2190) + _1992;
        _2108 = (((((_2170 * _1818) + _546) * cbLight._m0[_2121].y) * _2189) * _2190) + _1994;
        _2110 = (((((_2170 * _1819) + _547) * cbLight._m0[_2121].z) * _2189) * _2190) + _1996;
    }
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    if (_1622.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2580)
                {
                    frontier_phi_67_pred = _2566;
                    frontier_phi_67_pred_1 = _2569;
                    frontier_phi_67_pred_2 = _2568;
                    frontier_phi_67_pred_3 = _2567;
                    frontier_phi_67_pred_4 = _2565;
                    frontier_phi_67_pred_5 = _2564;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2579;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2570 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2266;
                        float _2776 = _2735.y - _2267;
                        float _2777 = _2735.z - _2268;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_499, _502, _505), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4100 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2266;
                        float _2811 = (-0.0) - _2267;
                        float _2812 = (-0.0) - _2268;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _575;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_499, _502, _505), vec3(_2817, _2818, _2819));
                        float _4116 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2852 = dot(vec3(_499, _502, _505), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4127 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4138 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4149 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2639 = (_2806 * _2754.x) + _2712;
                        _2640 = (_2806 * _2754.y) + _2713;
                        _2641 = (_2806 * _2754.z) + _2714;
                        _2636 = (_2887 * _2771.x) + _2709;
                        _2637 = (_2887 * _2771.y) + _2710;
                        _2638 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_67_pred = _2638;
                    frontier_phi_67_pred_1 = _2641;
                    frontier_phi_67_pred_2 = _2640;
                    frontier_phi_67_pred_3 = _2639;
                    frontier_phi_67_pred_4 = _2637;
                    frontier_phi_67_pred_5 = _2636;
                }
                _2417 = frontier_phi_67_pred;
                _2423 = frontier_phi_67_pred_1;
                _2421 = frontier_phi_67_pred_2;
                _2419 = frontier_phi_67_pred_3;
                _2415 = frontier_phi_67_pred_4;
                _2413 = frontier_phi_67_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2413;
                    _2565 = _2415;
                    _2566 = _2417;
                    _2567 = _2419;
                    _2568 = _2421;
                    _2569 = _2423;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2429) & _2312) == 0u)
        {
            _2532 = _2412;
            _2534 = _2414;
            _2536 = _2416;
            _2538 = _2418;
            _2540 = _2420;
            _2542 = _2422;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2558 = _2557 * _2266;
            float _2559 = _2557 * _2267;
            float _2560 = _2557 * _2268;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2692 = _2412;
                float _2693 = _2414;
                float _2694 = _2416;
                float _2695 = _2418;
                float _2696 = _2420;
                float _2697 = _2422;
                uint _2698 = _2429;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2708)
                    {
                        frontier_phi_78_pred = _2697;
                        frontier_phi_78_pred_1 = _2696;
                        frontier_phi_78_pred_2 = _2695;
                        frontier_phi_78_pred_3 = _2694;
                        frontier_phi_78_pred_4 = _2693;
                        frontier_phi_78_pred_5 = _2692;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        uint _2920 = _2707;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2990;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2931 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2977 = (_2931 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2931 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2931 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2931 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2268, _3041.z, fma(_2267, _3041.y, _3041.x * _2266)) + _3041.w;
                            _3054 = !((fma(_2268, _3022.z, fma(_2267, _3022.y, _3022.x * _2266)) + _3022.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2946.x - _2266;
                                float _3082 = _2946.y - _2267;
                                float _3083 = _2946.z - _2268;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2947 * _2947));
                                float _4160 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3099 = sqrt(_3084) * _2962.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_499, _502, _505))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2268, _2990.z, fma(_2267, _2990.y, _2990.x * _2266)) + _2990.w) / _3053;
                                float _3113 = (fma(_2268, _3006.z, fma(_2267, _3006.y, _3006.x * _2266)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4176 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _575;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2558;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4187 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3156 = dot(vec3(_499, _502, _505), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4198 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_499, _502, _505), vec3(_3088, _3089, _3090))) + _3165;
                                float _4209 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4220 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3119 * _2962.z;
                                frontier_phi_84_pred_1 = _3119 * _2962.y;
                                frontier_phi_84_pred_2 = _3119 * _2962.x;
                                frontier_phi_84_pred_3 = _3193 * _2974.z;
                                frontier_phi_84_pred_4 = _3193 * _2974.y;
                                frontier_phi_84_pred_5 = _3193 * _2974.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_84_pred;
                            _3201 = frontier_phi_84_pred_1;
                            _3200 = frontier_phi_84_pred_2;
                            _3199 = frontier_phi_84_pred_3;
                            _3198 = frontier_phi_84_pred_4;
                            _3197 = frontier_phi_84_pred_5;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2906;
                        frontier_phi_78_pred_1 = _2905;
                        frontier_phi_78_pred_2 = _2904;
                        frontier_phi_78_pred_3 = _2903;
                        frontier_phi_78_pred_4 = _2902;
                        frontier_phi_78_pred_5 = _2901;
                    }
                    _2543 = frontier_phi_78_pred;
                    _2541 = frontier_phi_78_pred_1;
                    _2539 = frontier_phi_78_pred_2;
                    _2537 = frontier_phi_78_pred_3;
                    _2535 = frontier_phi_78_pred_4;
                    _2533 = frontier_phi_78_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2533;
                        _2693 = _2535;
                        _2694 = _2537;
                        _2695 = _2539;
                        _2696 = _2541;
                        _2697 = _2543;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2539;
                frontier_phi_59_60_ladder_1 = _2543;
                frontier_phi_59_60_ladder_2 = _2541;
                frontier_phi_59_60_ladder_3 = _2537;
                frontier_phi_59_60_ladder_4 = _2535;
                frontier_phi_59_60_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_59_60_ladder = _2418;
                frontier_phi_59_60_ladder_1 = _2422;
                frontier_phi_59_60_ladder_2 = _2420;
                frontier_phi_59_60_ladder_3 = _2416;
                frontier_phi_59_60_ladder_4 = _2414;
                frontier_phi_59_60_ladder_5 = _2412;
            }
            _2532 = frontier_phi_59_60_ladder_5;
            _2534 = frontier_phi_59_60_ladder_4;
            _2536 = frontier_phi_59_60_ladder_3;
            _2538 = frontier_phi_59_60_ladder;
            _2540 = frontier_phi_59_60_ladder_2;
            _2542 = frontier_phi_59_60_ladder_1;
        }
        float _2547 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2324 = (_2547 * _2538) + _1758;
        _2326 = (_2547 * _2540) + _1760;
        _2328 = (_2547 * _2542) + _1762;
        _2330 = ((_2532 * _544) * _2547) + _2106;
        _2332 = ((_2534 * _546) * _2547) + _2108;
        _2334 = ((_2536 * _547) * _2547) + _2110;
    }
    else
    {
        _2324 = _1758;
        _2326 = _1760;
        _2328 = _1762;
        _2330 = _2106;
        _2332 = _2108;
        _2334 = _2110;
    }
    float _4236 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4247 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4258 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _2351 = ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2324 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _559))) + ((_2330 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    float _2352 = ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2326 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _559))) + ((_2332 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2328 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _559))) + ((_2334 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    uint _2354 = _518 + 6u;
    float _2362 = _477 / cbSceneParam._m0[86u].x;
    float _2363 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _409 : (isnan(_409) ? cbSceneParam._m0[77u].w : min(_409, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_409 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_409) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _409 : min(cbSceneParam._m0[80u].w, _409));
        float _2438 = _2437 / _409;
        float _2449 = _2438 * _458;
        float _2450 = _459 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _460;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2595 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2649 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2472 * _2604) - exp2(_2472 * _2605)) * _2593))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2382);
        _2474 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2476 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2478 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2480 = _2660 * _2382;
    }
    else
    {
        _2474 = _2379;
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
    }
    bool _2687;
    vec4 _2490;
    vec4 _2512;
    float _2514;
    float _2518;
    float _2519;
    float _2520;
    float _2521;
    bool _2531;
    for (;;)
    {
        _2490 = cbMatDynParam._m0[0u];
        float _2492 = roundEven(_2490.y);
        bool _2493 = _2492 == 3.0;
        float _2494 = log2(_2480);
        float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * _2351;
        float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * _2352;
        float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * _2353;
        float _2510 = _471 + (-0.5);
        _2512 = cbMtdParam._m0[1u];
        _2514 = _2512.y * _2510;
        float _2517 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2518 = _2517 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = _2517 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
        _2520 = _2517 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
        _2521 = _2510 * 0.999000012874603271484375;
        _2531 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2531)
        {
            if ((cbInstanceData._m0[_518 + 7u].x + _2521) < 0.5)
            {
                _2687 = true;
                break;
            }
        }
        uint _2628 = _520 + uint(_2490.w);
        if ((cbInstanceData._m0[_2628].w < 1.0) && ((cbInstanceData._m0[_2628].w + _2521) < 0.5))
        {
            _2687 = true;
            break;
        }
        if ((_2514 + 1.0) < _2512.x)
        {
            _2687 = true;
            break;
        }
        _2687 = false;
        break;
    }
    float _2892;
    if (_2687)
    {
        discard_state = true;
        _2892 = 0.0;
    }
    else
    {
        _2892 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2518;
    SV_Target.y = _2519;
    SV_Target.z = _2520;
    SV_Target.w = _2892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


