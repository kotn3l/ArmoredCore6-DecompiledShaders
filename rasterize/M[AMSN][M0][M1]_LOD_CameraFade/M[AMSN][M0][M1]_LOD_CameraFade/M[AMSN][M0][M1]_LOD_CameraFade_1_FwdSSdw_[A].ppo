#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _899;
float _3288;
float _3289;
float _3290;
float _3291;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.x * cbMtdParam._m0[9u].x;
    float _296 = _289.y * cbMtdParam._m0[9u].y;
    float _297 = _289.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _313 = _309.z;
    float _317 = (_309.x * 2.0) + (-1.0);
    float _319 = (_309.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_317, _319), vec2(_317, _319));
    float _3300 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))));
    float _338 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _342 = gl_FragCoord.x * 0.125;
    float _344 = gl_FragCoord.y * 0.125;
    float _355 = fma(_326, _213, fma(_319, _205 * TANGENT.x, (_191 * _184) * _317));
    float _358 = fma(_326, _214, fma(_319, _205 * TANGENT.y, (_191 * _185) * _317));
    float _361 = fma(_326, _215, fma(_319, _205 * TANGENT.z, (_191 * _186) * _317));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    float _366 = _365 * _355;
    float _367 = _365 * _358;
    float _368 = _365 * _361;
    float _3316 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _369 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3338 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3349 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    if (!(((sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _338 : (isnan(_338) ? 0.001000000047497451305389404296875 : max(_338, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_342, _344)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _441 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _432);
    float _442 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _432);
    float _443 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _432);
    float _447 = inversesqrt(dot(vec3(_441, _442, _443), vec3(_441, _442, _443)));
    float _448 = _441 * _447;
    float _449 = _442 * _447;
    float _450 = _443 * _447;
    vec4 _452 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_342, _344));
    float _454 = _452.w;
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _482 = fma(_368, cbSceneParam._m0[5u].z, fma(_367, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _366));
    float _485 = fma(_368, cbSceneParam._m0[6u].z, fma(_367, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _366));
    float _488 = fma(_368, cbSceneParam._m0[7u].z, fma(_367, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _366));
    uint _501 = uint(roundEven(NORMAL.w)) * 13u;
    uint _503 = _501 + 9u;
    uint _504 = _503 + uint(cbMatDynParam._m0[0u].w);
    float _510 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_504].x;
    float _511 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_504].y;
    float _512 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_504].z;
    float _3360 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _527 = _524.x * TEXCOORD.z;
    float _528 = dot(vec3(_366, _367, _368), vec3(_448, _449, _450));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _366) - _448;
    float _536 = (_531 * _367) - _449;
    float _537 = (_531 * _368) - _450;
    float _541 = abs(dot(vec3(_448, _449, _450), vec3(_366, _367, _368)));
    float _3393 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_369);
    float _556 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _627 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _631 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _656 = _588 + _366;
        float _657 = _592 + _367;
        float _658 = _596 + _368;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_692.x + (-0.5));
        float _728 = _726 * (_692.y + (-0.5));
        float _729 = _726 * (_692.z + (-0.5));
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_699.x + (-0.5));
        float _738 = _736 * (_699.y + (-0.5));
        float _739 = _736 * (_699.z + (-0.5));
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_706.x + (-0.5));
        float _748 = _746 * (_706.y + (-0.5));
        float _749 = _746 * (_706.z + (-0.5));
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = _727 * 0.5;
        float _764 = _737 * 0.5;
        float _765 = _747 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _780 = (dot(vec3(_366, _367, _368), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _790 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3441 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_792 + 1.0))) + _797) * _760;
        float _807 = _728 * 0.5;
        float _808 = _738 * 0.5;
        float _809 = _748 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_366, _367, _368), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3474 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_834 + 1.0))) + _839) * _761;
        float _849 = _729 * 0.5;
        float _850 = _739 * 0.5;
        float _851 = _749 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_366, _367, _368), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3507 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_876 + 1.0))) + _881) * _762;
        _898 = _729;
        _900 = _728;
        _901 = _727;
        _902 = _739;
        _903 = _738;
        _904 = _737;
        _905 = _749;
        _906 = _748;
        _907 = _747;
        _908 = _762;
        _909 = _761;
        _910 = _760;
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = _899;
        _900 = _899;
        _901 = _899;
        _902 = _899;
        _903 = _899;
        _904 = _899;
        _905 = _899;
        _906 = _899;
        _907 = _899;
        _908 = _899;
        _909 = _899;
        _910 = _899;
        _911 = 0.0;
        _912 = 0.0;
        _913 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _943 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _947 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _970 = _588 + _366;
        float _971 = _592 + _367;
        float _972 = _596 + _368;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_366, _367, _368), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3570 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_366, _367, _368), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3603 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_366, _367, _368), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3636 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _899;
        _1209 = _899;
        _1210 = _899;
        _1211 = _899;
        _1212 = _899;
        _1213 = _899;
        _1214 = _899;
        _1215 = _899;
        _1216 = _899;
        _1217 = _899;
        _1218 = _899;
        _1219 = _899;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _535 * 0.5;
    float _1277 = _536 * 0.5;
    float _1278 = _537 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _902, _905, _908));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_900, _903, _906, _909));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_901, _904, _907, _910));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _369);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1394 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1398 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1402 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1405 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1408 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1411 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1439;
        if (_1405 > 0.0)
        {
            _1439 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1439 = frontier_phi_18_16_ladder;
        }
        float _1666;
        if (_1408 > 0.0)
        {
            _1666 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1666 = frontier_phi_27_23_ladder;
        }
        float _1912;
        if (_1411 > 0.0)
        {
            _1912 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1912 = frontier_phi_39_34_ladder;
        }
        float _1914 = isnan(_1666) ? _1439 : (isnan(_1439) ? _1666 : min(_1439, _1666));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1405) + _1394;
        float _1920 = (_1915 * _1408) + _1398;
        float _1921 = (_1915 * _1411) + _1402;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_17_39_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1427 = frontier_phi_17_39_ladder_2;
        _1429 = frontier_phi_17_39_ladder_1;
        _1431 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1345);
        _1427 = _1415.x * cbModelParam._m0[1u].y;
        _1429 = _1415.y * cbModelParam._m0[1u].y;
        _1431 = _1415.z * cbModelParam._m0[1u].y;
    }
    float _1435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _369);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1435 : min(cbModelParam._m0[25u].w, _1435));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1493 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1497 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1501 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1504 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1507 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1510 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1671;
        if (_1504 > 0.0)
        {
            _1671 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1671 = frontier_phi_29_25_ladder;
        }
        float _1939;
        if (_1507 > 0.0)
        {
            _1939 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1939 = frontier_phi_41_36_ladder;
        }
        float _2144;
        if (_1510 > 0.0)
        {
            _2144 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2144 = frontier_phi_50_47_ladder;
        }
        float _2146 = isnan(_1939) ? _1671 : (isnan(_1671) ? _1939 : min(_1671, _1939));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1504) + _1493;
        float _2152 = (_2147 * _1507) + _1497;
        float _2153 = (_2147 * _1510) + _1501;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2153, cbModelParam._m0[17u].z, fma(_2152, cbModelParam._m0[17u].y, _2151 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2153, cbModelParam._m0[18u].z, fma(_2152, cbModelParam._m0[18u].y, _2151 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2153, cbModelParam._m0[19u].z, fma(_2152, cbModelParam._m0[19u].y, _2151 * cbModelParam._m0[19u].x))), _1436);
            frontier_phi_26_50_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1529 = frontier_phi_26_50_ladder_2;
        _1531 = frontier_phi_26_50_ladder_1;
        _1533 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1436);
        _1529 = _1513.x * cbModelParam._m0[1u].z;
        _1531 = _1513.y * cbModelParam._m0[1u].z;
        _1533 = _1513.z * cbModelParam._m0[1u].z;
    }
    float _1545 = ((((1.0 - _556) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_556 * _543)) * _527;
    float _1546 = _1545 * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1547 = _1545 * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1548 = _1545 * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1551 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1546 * cbSceneParam._m0[91u].x));
    vec4 _1565 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_460, _461));
    float _1567 = _1565.w;
    float _1579 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1567);
    float _1580 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1567);
    float _1581 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1567);
    uvec4 _1585 = floatBitsToUint(cbInstanceData._m0[_501 + 5u]);
    uint _1587 = _1585.x * 14u;
    uint _1588 = _1587 + 13u;
    float _1595 = _527 + (-1.0);
    float _1600 = (cbLight._m0[_1588].x * _1595) + 1.0;
    float _1601 = (cbLight._m0[_1588].y * _1595) + 1.0;
    float _1602 = (cbLight._m0[_1588].z * _1595) + 1.0;
    float _1603 = (cbLight._m0[_1588].w * _1595) + 1.0;
    uint _1604 = _1587 + 5u;
    float _1610 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1614 = _1587 + 4u;
    float _1624 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1628 = _1587 | 1u;
    float _1639 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_366, _367, _368));
    float _1642 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_366, _367, _368));
    float _3772 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _3783 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1647 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.3183098733425140380859375;
    float _1649 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1656 = ((cbLight._m0[_1604].x * _1610) * _1649) + (((cbLight._m0[_1614].x * _1579) * _1624) * _1647);
    float _1657 = ((_1610 * cbLight._m0[_1604].y) * _1649) + (((cbLight._m0[_1614].y * _1580) * _1624) * _1647);
    float _1658 = ((_1610 * cbLight._m0[_1604].z) * _1649) + (((cbLight._m0[_1614].z * _1581) * _1624) * _1647);
    uvec4 _1663 = floatBitsToUint(cbLight._m0[_1587 + 12u]);
    bool _1665 = _1663.x == 0u;
    float _1676;
    float _1678;
    float _1680;
    if (_1665)
    {
        _1676 = _1656;
        _1678 = _1657;
        _1680 = _1658;
    }
    else
    {
        uint _1684 = _1587 + 6u;
        float _1700 = (dot(vec3(cbLight._m0[_1587 + 2u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1701 = _1700 * _1700;
        float _3794 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1703 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1676 = (((cbLight._m0[_1684].x * 0.3183098733425140380859375) * _1702) * _1703) + _1656;
        _1678 = (((cbLight._m0[_1684].y * 0.3183098733425140380859375) * _1702) * _1703) + _1657;
        _1680 = (((cbLight._m0[_1684].z * 0.3183098733425140380859375) * _1702) * _1703) + _1658;
    }
    bool _1683 = _1663.y == 0u;
    float _1721;
    float _1723;
    float _1725;
    if (_1683)
    {
        _1721 = _1676;
        _1723 = _1678;
        _1725 = _1680;
    }
    else
    {
        uint _1883 = _1587 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1587 + 3u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3810 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1902 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1721 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1676;
        _1723 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1678;
        _1725 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1680;
    }
    uint _1728 = _1587 + 8u;
    float _1741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _369) * 0.949999988079071044921875);
    float _1742 = _1741 * _1741;
    float _1743 = cbLight._m0[_1587].x + _448;
    float _1744 = cbLight._m0[_1587].y + _449;
    float _1745 = cbLight._m0[_1587].z + _450;
    float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
    float _1750 = _1749 * _1743;
    float _1751 = _1749 * _1744;
    float _1752 = _1749 * _1745;
    float _1753 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1587].xyz));
    float _3826 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _1757 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1758 = dot(vec3(_366, _367, _368), vec3(_1750, _1751, _1752));
    float _3848 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1750, _1751, _1752));
    float _3859 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1742 * _1742;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1781 = (exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1782 = 1.0 - _1742;
    float _1793 = (0.5 / (((_1757 * ((_1756 * _1782) + _1742)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _1782) + _1742) * _1756))) * _1756;
    float _3870 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1795 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    uint _1809 = _1587 + 9u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _369) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1628].x + _448;
    float _1823 = cbLight._m0[_1628].y + _449;
    float _1824 = cbLight._m0[_1628].z + _450;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1628].xyz));
    float _3881 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1836 = dot(vec3(_366, _367, _368), vec3(_1829, _1830, _1831));
    float _3892 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1829, _1830, _1831));
    float _3903 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1821 * _1821;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1858 = 1.0 - _1821;
    float _1868 = (0.5 / (((_1757 * ((_1835 * _1858) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _1858) + _1821) * _1835))) * _1835;
    float _3914 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    float _1880 = (((_1857 * cbLight._m0[_1809].x) * _1870) * _1610) + ((((cbLight._m0[_1728].x * _1579) * _1781) * _1795) * _1624);
    float _1881 = (((_1857 * cbLight._m0[_1809].y) * _1870) * _1610) + ((((cbLight._m0[_1728].y * _1580) * _1781) * _1795) * _1624);
    float _1882 = (((_1857 * cbLight._m0[_1809].z) * _1870) * _1610) + ((((cbLight._m0[_1728].z * _1581) * _1781) * _1795) * _1624);
    float _1944;
    float _1946;
    float _1948;
    if (_1665)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1587 + 2u;
        uint _1954 = _1587 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _369) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _448;
        float _1971 = cbLight._m0[_1950].y + _449;
        float _1972 = cbLight._m0[_1950].z + _450;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1950].xyz));
        float _3925 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1984 = dot(vec3(_366, _367, _368), vec3(_1977, _1978, _1979));
        float _3936 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3947 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2006 = 1.0 - _1969;
        float _2016 = (0.5 / (((_1757 * ((_1983 * _2006) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _2006) + _1969) * _1983))) * _1983;
        float _3958 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1944 = (((_2005 * cbLight._m0[_1954].x) * _2018) * _2019) + _1880;
        _1946 = (((_2005 * cbLight._m0[_1954].y) * _2018) * _2019) + _1881;
        _1948 = (((_2005 * cbLight._m0[_1954].z) * _2018) * _2019) + _1882;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1683)
    {
        _2054 = _1944;
        _2056 = _1946;
        _2058 = _1948;
    }
    else
    {
        uint _2065 = _1587 + 3u;
        uint _2069 = _1587 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _369) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _448;
        float _2086 = cbLight._m0[_2065].y + _449;
        float _2087 = cbLight._m0[_2065].z + _450;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_2065].xyz));
        float _3974 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2099 = dot(vec3(_366, _367, _368), vec3(_2092, _2093, _2094));
        float _3985 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _3996 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2121 = 1.0 - _2084;
        float _2131 = (0.5 / (((_1757 * ((_2098 * _2121) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _2121) + _2084) * _2098))) * _2098;
        float _4007 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _2054 = (((_2120 * cbLight._m0[_2069].x) * _2133) * _2134) + _1944;
        _2056 = (((_2120 * cbLight._m0[_2069].y) * _2133) * _2134) + _1946;
        _2058 = (((_2120 * cbLight._m0[_2069].z) * _2133) * _2134) + _1948;
    }
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1585.y == 0u)
    {
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2209;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2209;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2209;
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _2225)));
        float _2246 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2524)
                {
                    frontier_phi_67_pred = _2510;
                    frontier_phi_67_pred_1 = _2513;
                    frontier_phi_67_pred_2 = _2512;
                    frontier_phi_67_pred_3 = _2511;
                    frontier_phi_67_pred_4 = _2509;
                    frontier_phi_67_pred_5 = _2508;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2523;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2514 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2210;
                        float _2720 = _2679.y - _2211;
                        float _2721 = _2679.z - _2212;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_482, _485, _488), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4033 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2210;
                        float _2755 = (-0.0) - _2211;
                        float _2756 = (-0.0) - _2212;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _543;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_482, _485, _488), vec3(_2761, _2762, _2763));
                        float _4049 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2796 = dot(vec3(_482, _485, _488), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4060 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4071 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4082 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2583 = (_2750 * _2698.x) + _2656;
                        _2584 = (_2750 * _2698.y) + _2657;
                        _2585 = (_2750 * _2698.z) + _2658;
                        _2580 = (_2831 * _2715.x) + _2653;
                        _2581 = (_2831 * _2715.y) + _2654;
                        _2582 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_67_pred = _2582;
                    frontier_phi_67_pred_1 = _2585;
                    frontier_phi_67_pred_2 = _2584;
                    frontier_phi_67_pred_3 = _2583;
                    frontier_phi_67_pred_4 = _2581;
                    frontier_phi_67_pred_5 = _2580;
                }
                _2361 = frontier_phi_67_pred;
                _2367 = frontier_phi_67_pred_1;
                _2365 = frontier_phi_67_pred_2;
                _2363 = frontier_phi_67_pred_3;
                _2359 = frontier_phi_67_pred_4;
                _2357 = frontier_phi_67_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2357;
                    _2509 = _2359;
                    _2510 = _2361;
                    _2511 = _2363;
                    _2512 = _2365;
                    _2513 = _2367;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2373) & _2256) == 0u)
        {
            _2476 = _2356;
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _2502 = _2501 * _2210;
            float _2503 = _2501 * _2211;
            float _2504 = _2501 * _2212;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2636 = _2356;
                float _2637 = _2358;
                float _2638 = _2360;
                float _2639 = _2362;
                float _2640 = _2364;
                float _2641 = _2366;
                uint _2642 = _2373;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2652)
                    {
                        frontier_phi_78_pred = _2641;
                        frontier_phi_78_pred_1 = _2640;
                        frontier_phi_78_pred_2 = _2639;
                        frontier_phi_78_pred_3 = _2638;
                        frontier_phi_78_pred_4 = _2637;
                        frontier_phi_78_pred_5 = _2636;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        uint _2864 = _2651;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2875 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2921 = (_2875 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2875 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2875 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2875 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2212, _2985.z, fma(_2211, _2985.y, _2985.x * _2210)) + _2985.w;
                            _2998 = !((fma(_2212, _2966.z, fma(_2211, _2966.y, _2966.x * _2210)) + _2966.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2890.x - _2210;
                                float _3026 = _2890.y - _2211;
                                float _3027 = _2890.z - _2212;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2891 * _2891));
                                float _4093 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3043 = sqrt(_3028) * _2906.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_482, _485, _488))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2212, _2934.z, fma(_2211, _2934.y, _2934.x * _2210)) + _2934.w) / _2997;
                                float _3057 = (fma(_2212, _2950.z, fma(_2211, _2950.y, _2950.x * _2210)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4109 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _543;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2502;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_482, _485, _488), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4120 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3100 = dot(vec3(_482, _485, _488), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4131 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_482, _485, _488), vec3(_3032, _3033, _3034))) + _3109;
                                float _4142 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4153 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3063 * _2906.z;
                                frontier_phi_84_pred_1 = _3063 * _2906.y;
                                frontier_phi_84_pred_2 = _3063 * _2906.x;
                                frontier_phi_84_pred_3 = _3137 * _2918.z;
                                frontier_phi_84_pred_4 = _3137 * _2918.y;
                                frontier_phi_84_pred_5 = _3137 * _2918.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_84_pred;
                            _3145 = frontier_phi_84_pred_1;
                            _3144 = frontier_phi_84_pred_2;
                            _3143 = frontier_phi_84_pred_3;
                            _3142 = frontier_phi_84_pred_4;
                            _3141 = frontier_phi_84_pred_5;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2850;
                        frontier_phi_78_pred_1 = _2849;
                        frontier_phi_78_pred_2 = _2848;
                        frontier_phi_78_pred_3 = _2847;
                        frontier_phi_78_pred_4 = _2846;
                        frontier_phi_78_pred_5 = _2845;
                    }
                    _2487 = frontier_phi_78_pred;
                    _2485 = frontier_phi_78_pred_1;
                    _2483 = frontier_phi_78_pred_2;
                    _2481 = frontier_phi_78_pred_3;
                    _2479 = frontier_phi_78_pred_4;
                    _2477 = frontier_phi_78_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2477;
                        _2637 = _2479;
                        _2638 = _2481;
                        _2639 = _2483;
                        _2640 = _2485;
                        _2641 = _2487;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2483;
                frontier_phi_59_60_ladder_1 = _2487;
                frontier_phi_59_60_ladder_2 = _2485;
                frontier_phi_59_60_ladder_3 = _2481;
                frontier_phi_59_60_ladder_4 = _2479;
                frontier_phi_59_60_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_59_60_ladder = _2362;
                frontier_phi_59_60_ladder_1 = _2366;
                frontier_phi_59_60_ladder_2 = _2364;
                frontier_phi_59_60_ladder_3 = _2360;
                frontier_phi_59_60_ladder_4 = _2358;
                frontier_phi_59_60_ladder_5 = _2356;
            }
            _2476 = frontier_phi_59_60_ladder_5;
            _2478 = frontier_phi_59_60_ladder_4;
            _2480 = frontier_phi_59_60_ladder_3;
            _2482 = frontier_phi_59_60_ladder;
            _2484 = frontier_phi_59_60_ladder_2;
            _2486 = frontier_phi_59_60_ladder_1;
        }
        float _2491 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2268 = (_2491 * _2482) + _1721;
        _2270 = (_2491 * _2484) + _1723;
        _2272 = (_2491 * _2486) + _1725;
        _2274 = ((_2476 * 0.039999999105930328369140625) * _2491) + _2054;
        _2276 = ((_2478 * 0.039999999105930328369140625) * _2491) + _2056;
        _2278 = ((_2480 * 0.039999999105930328369140625) * _2491) + _2058;
    }
    else
    {
        _2268 = _1721;
        _2270 = _1723;
        _2272 = _1725;
        _2274 = _2054;
        _2276 = _2056;
        _2278 = _2058;
    }
    float _4169 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4180 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4191 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2295 = ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2268 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _527))) + ((_2274 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2270 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _527))) + ((_2276 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2272 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _527))) + ((_2278 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    uint _2298 = _501 + 6u;
    float _2306 = _460 / cbSceneParam._m0[86u].x;
    float _2307 = _461 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2382 = _2381 / _392;
        float _2393 = _2382 * _441;
        float _2394 = _442 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _443;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2416 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2399 > 0.0) ? exp2(_2414 * _2399) : (2.0 - exp2(_2416 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2539 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2593 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2414 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2414 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2416 * _2548) - exp2(_2416 * _2549)) * _2537))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2326);
        _2418 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2420 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2422 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2424 = _2604 * _2326;
    }
    else
    {
        _2418 = _2323;
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
    }
    bool _2631;
    vec4 _2434;
    vec4 _2456;
    float _2458;
    float _2462;
    float _2463;
    float _2464;
    float _2465;
    bool _2475;
    for (;;)
    {
        _2434 = cbMatDynParam._m0[0u];
        float _2436 = roundEven(_2434.y);
        bool _2437 = _2436 == 3.0;
        float _2438 = log2(_2424);
        float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * _2295;
        float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * _2296;
        float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * _2297;
        float _2454 = _454 + (-0.5);
        _2456 = cbMtdParam._m0[1u];
        _2458 = _2456.y * _2454;
        float _2461 = (_2436 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2462 = _2461 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
        _2463 = _2461 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
        _2464 = _2461 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2422)));
        _2465 = _2454 * 0.999000012874603271484375;
        _2475 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2475)
        {
            if ((cbInstanceData._m0[_501 + 7u].x + _2465) < 0.5)
            {
                _2631 = true;
                break;
            }
        }
        uint _2572 = _503 + uint(_2434.w);
        if ((cbInstanceData._m0[_2572].w < 1.0) && ((cbInstanceData._m0[_2572].w + _2465) < 0.5))
        {
            _2631 = true;
            break;
        }
        if ((_2458 + 1.0) < _2456.x)
        {
            _2631 = true;
            break;
        }
        _2631 = false;
        break;
    }
    float _2836;
    if (_2631)
    {
        discard_state = true;
        _2836 = 0.0;
    }
    else
    {
        _2836 = cbInstanceData._m0[_2298].w;
    }
    SV_Target.x = _2462;
    SV_Target.y = _2463;
    SV_Target.z = _2464;
    SV_Target.w = _2836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
    discard_exit();
}


