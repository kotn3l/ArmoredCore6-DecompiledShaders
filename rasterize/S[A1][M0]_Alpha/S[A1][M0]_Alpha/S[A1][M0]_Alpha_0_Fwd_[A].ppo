#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _742;
float _2909;
float _2910;
float _2911;
float _2912;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    vec4 _185 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _191 = _185.w;
    float _192 = _185.x * cbMtdParam._m0[9u].x;
    float _193 = _185.y * cbMtdParam._m0[9u].y;
    float _194 = _185.z * cbMtdParam._m0[9u].z;
    float _195 = _191 * TEXCOORD_1.z;
    float _199 = inversesqrt(dot(vec3(_163, _164, _165), vec3(_163, _164, _165)));
    float _200 = _199 * _163;
    float _201 = _199 * _164;
    float _202 = _199 * _165;
    float _2921 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _204 = isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0));
    float _2932 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2943 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2954 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _223 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _281 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _282 = _275 * _281;
    float _283 = _276 * _281;
    float _284 = _277 * _281;
    vec4 _289 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _291 = _289.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _421 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _427 = (cbMatDynParam._m0[5u].x * _421) + cbMatDynParam._m0[5u].y;
        float _2965 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
        float _428 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _432 = (cbMatDynParam._m0[5u].z * _421) + cbMatDynParam._m0[5u].w;
        float _2976 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0))) - _428)) + _428) < ((_291 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _303 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _304 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _324 = fma(_202, cbSceneParam._m0[5u].z, fma(_201, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _200));
    float _327 = fma(_202, cbSceneParam._m0[6u].z, fma(_201, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _200));
    float _330 = fma(_202, cbSceneParam._m0[7u].z, fma(_201, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _200));
    uint _343 = uint(roundEven(NORMAL.w)) * 13u;
    uint _345 = _343 + 9u;
    uint _346 = _345 + uint(cbMatDynParam._m0[0u].w);
    float _352 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0)))) * cbInstanceData._m0[_346].x;
    float _353 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0)))) * cbInstanceData._m0[_346].y;
    float _354 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0)))) * cbInstanceData._m0[_346].z;
    float _2987 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _355 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
    float _2998 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _356 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
    float _3009 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _357 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
    vec4 _366 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _303, cbSceneParam._m0[86u].y * _304));
    float _369 = _366.x * TEXCOORD_1.w;
    float _370 = dot(vec3(_200, _201, _202), vec3(_282, _283, _284));
    float _373 = _370 * 2.0;
    float _378 = (_373 * _200) - _282;
    float _379 = (_373 * _201) - _283;
    float _380 = (_373 * _202) - _284;
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _741;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _466 = fma(_410, cbModelParam._m0[26u].z, fma(_406, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _402));
        float _470 = fma(_410, cbModelParam._m0[27u].z, fma(_406, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _402));
        float _474 = fma(_410, cbModelParam._m0[28u].z, fma(_406, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _402));
        float _499 = _402 + _200;
        float _500 = _406 + _201;
        float _501 = _410 + _202;
        float _511 = fma(_501, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499)) - _466;
        float _512 = fma(_501, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499)) - _470;
        float _513 = fma(_501, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499)) - _474;
        float _517 = inversesqrt(dot(vec3(_511, _512, _513), vec3(_511, _512, _513)));
        float _530 = ((_517 * _511) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_466 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _531 = ((_517 * _512) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_470 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _532 = ((_517 * _513) / cbModelParam._m0[34u].z) + ((((((_474 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_530, _531, _532), 0.0);
        float _569 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_535.x + (-0.5));
        float _571 = _569 * (_535.y + (-0.5));
        float _572 = _569 * (_535.z + (-0.5));
        float _579 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_542.x + (-0.5));
        float _581 = _579 * (_542.y + (-0.5));
        float _582 = _579 * (_542.z + (-0.5));
        float _589 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_549.x + (-0.5));
        float _591 = _589 * (_549.y + (-0.5));
        float _592 = _589 * (_549.z + (-0.5));
        float _599 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_556.x + (-0.5));
        float _601 = _599 * (_556.y + (-0.5));
        float _602 = _599 * (_556.z + (-0.5));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = _570 * 0.5;
        float _607 = _580 * 0.5;
        float _608 = _590 * 0.5;
        float _609 = dot(vec3(_606, _607, _608), vec3(_606, _607, _608));
        float _614 = (_609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_609);
        float _623 = (dot(vec3(_200, _201, _202), vec3(_614 * _606, _614 * _607, _614 * _608)) + 1.0) * 0.5;
        float _3035 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _633 = sqrt(((_607 * _607) + (_606 * _606)) + (_608 * _608)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _3046 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _635 = _634 * 2.0;
        float _639 = (1.0 - _634) / (_634 + 1.0);
        float _3057 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _649 = ((((1.0 - _640) * (_635 + 2.0)) * exp2(log2(isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) * (_635 + 1.0))) + _640) * _603;
        float _650 = _571 * 0.5;
        float _651 = _581 * 0.5;
        float _652 = _591 * 0.5;
        float _653 = dot(vec3(_650, _651, _652), vec3(_650, _651, _652));
        float _658 = (_653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_653);
        float _666 = (dot(vec3(_200, _201, _202), vec3(_658 * _650, _658 * _651, _658 * _652)) + 1.0) * 0.5;
        float _3068 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _675 = sqrt(((_651 * _651) + (_650 * _650)) + (_652 * _652)) / (_604 + 9.9999997473787516355514526367188e-06);
        float _3079 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _677 = _676 * 2.0;
        float _681 = (1.0 - _676) / (_676 + 1.0);
        float _3090 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _691 = ((((1.0 - _682) * (_677 + 2.0)) * exp2(log2(isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0))) * (_677 + 1.0))) + _682) * _604;
        float _692 = _572 * 0.5;
        float _693 = _582 * 0.5;
        float _694 = _592 * 0.5;
        float _695 = dot(vec3(_692, _693, _694), vec3(_692, _693, _694));
        float _700 = (_695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_695);
        float _708 = (dot(vec3(_200, _201, _202), vec3(_700 * _692, _700 * _693, _700 * _694)) + 1.0) * 0.5;
        float _3101 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _717 = sqrt(((_693 * _693) + (_692 * _692)) + (_694 * _694)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _3112 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3123 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0))) * (_719 + 1.0))) + _724) * _605;
        _741 = _572;
        _743 = _571;
        _744 = _570;
        _745 = _582;
        _746 = _581;
        _747 = _580;
        _748 = _592;
        _749 = _591;
        _750 = _590;
        _751 = _605;
        _752 = _604;
        _753 = _603;
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0)));
        _755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0)));
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
    }
    else
    {
        _741 = _742;
        _743 = _742;
        _744 = _742;
        _745 = _742;
        _746 = _742;
        _747 = _742;
        _748 = _742;
        _749 = _742;
        _750 = _742;
        _751 = _742;
        _752 = _742;
        _753 = _742;
        _754 = 0.0;
        _755 = 0.0;
        _756 = 0.0;
    }
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _785 = fma(_410, cbModelParam._m0[30u].z, fma(_406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _402));
        float _789 = fma(_410, cbModelParam._m0[31u].z, fma(_406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _402));
        float _793 = fma(_410, cbModelParam._m0[32u].z, fma(_406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _402));
        float _816 = _402 + _200;
        float _817 = _406 + _201;
        float _818 = _410 + _202;
        float _828 = fma(_818, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816)) - _785;
        float _829 = fma(_818, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816)) - _789;
        float _830 = fma(_818, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816)) - _793;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_785 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_789 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[35u].z) + ((((((_793 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _884 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_851.x + (-0.5));
        float _886 = _884 * (_851.y + (-0.5));
        float _887 = _884 * (_851.z + (-0.5));
        float _894 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_858.x + (-0.5));
        float _896 = _894 * (_858.y + (-0.5));
        float _897 = _894 * (_858.z + (-0.5));
        float _904 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_865.x + (-0.5));
        float _906 = _904 * (_865.y + (-0.5));
        float _907 = _904 * (_865.z + (-0.5));
        float _914 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_872.x + (-0.5));
        float _916 = _914 * (_872.y + (-0.5));
        float _917 = _914 * (_872.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_200, _201, _202), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3164 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3175 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3186 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0))) * (_948 + 1.0))) + _953) * _918;
        float _963 = _886 * 0.5;
        float _964 = _896 * 0.5;
        float _965 = _906 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_200, _201, _202), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3197 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3208 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3219 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_990 + 1.0))) + _995) * _919;
        float _1005 = _887 * 0.5;
        float _1006 = _897 * 0.5;
        float _1007 = _907 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_200, _201, _202), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3230 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3241 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3252 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) * (_1032 + 1.0))) + _1037) * _920;
        _1054 = _887;
        _1055 = _886;
        _1056 = _885;
        _1057 = _897;
        _1058 = _896;
        _1059 = _895;
        _1060 = _907;
        _1061 = _906;
        _1062 = _905;
        _1063 = _920;
        _1064 = _919;
        _1065 = _918;
        _1066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _742;
        _1055 = _742;
        _1056 = _742;
        _1057 = _742;
        _1058 = _742;
        _1059 = _742;
        _1060 = _742;
        _1061 = _742;
        _1062 = _742;
        _1063 = _742;
        _1064 = _742;
        _1065 = _742;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1078 = (cbModelParam._m0[1u].x * (_1066 - _754)) + _754;
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _755)) + _755;
    float _1080 = (cbModelParam._m0[1u].x * (_1068 - _756)) + _756;
    float _1101 = fma(_1080, cbSceneParam._m0[89u].z, fma(_1079, cbSceneParam._m0[89u].y, _1078 * cbSceneParam._m0[89u].x));
    float _1104 = fma(_1080, cbSceneParam._m0[90u].z, fma(_1079, cbSceneParam._m0[90u].y, _1078 * cbSceneParam._m0[90u].x));
    float _1107 = fma(_1080, cbSceneParam._m0[91u].z, fma(_1079, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1078));
    float _1122 = _378 * 0.5;
    float _1123 = _379 * 0.5;
    float _1124 = _380 * 0.5;
    float _1125 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1128 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1131 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1165;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1138 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_741, _745, _748, _751));
        float _1142 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_743, _746, _749, _752));
        float _1146 = dot(vec4(_1122, _1123, _1124, 1.0), vec4(_744, _747, _750, _753));
        float _1153 = dot(vec4(cbModelParam._m0[39u]), vec4(_1122, _1123, _1124, 1.0));
        _1165 = dot(vec3(isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1153) ? 0.0 : (isnan(0.0) ? _1153 : max(0.0, _1153))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1165 = 1.0;
    }
    float _1176;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1167 = dot(vec4(cbModelParam._m0[40u]), vec4(_1122, _1123, _1124, 1.0));
        _1176 = dot(vec3(isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1167) ? 0.0 : (isnan(0.0) ? _1167 : max(0.0, _1167))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1176 = 1.0;
    }
    float _1180 = (_1176 * cbModelParam._m0[1u].x) + (_1165 * (1.0 - cbModelParam._m0[1u].x));
    float _1189 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1271;
    float _1273;
    float _1275;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1238 = fma(_410, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _402)) + cbModelParam._m0[13u].w;
        float _1242 = fma(_410, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _402)) + cbModelParam._m0[14u].w;
        float _1246 = fma(_410, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _402)) + cbModelParam._m0[15u].w;
        float _1249 = fma(_380, cbModelParam._m0[13u].z, fma(_379, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _378));
        float _1252 = fma(_380, cbModelParam._m0[14u].z, fma(_379, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _378));
        float _1255 = fma(_380, cbModelParam._m0[15u].z, fma(_379, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _378));
        float _1281;
        if (_1249 > 0.0)
        {
            _1281 = abs((1.0 - _1238) / _1249);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1238 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1281 = frontier_phi_17_15_ladder;
        }
        float _1489;
        if (_1252 > 0.0)
        {
            _1489 = abs((1.0 - _1242) / _1252);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1252 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1242 + 1.0) / _1252);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1489 = frontier_phi_26_22_ladder;
        }
        float _1678;
        if (_1255 > 0.0)
        {
            _1678 = abs((1.0 - _1246) / _1255);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1246 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1678 = frontier_phi_38_33_ladder;
        }
        float _1680 = isnan(_1489) ? _1281 : (isnan(_1281) ? _1489 : min(_1281, _1489));
        float _1681 = isnan(_1678) ? _1680 : (isnan(_1680) ? _1678 : min(_1680, _1678));
        float _1685 = (_1681 * _1249) + _1238;
        float _1686 = (_1681 * _1252) + _1242;
        float _1687 = (_1681 * _1255) + _1246;
        float _1688 = _1681 * 9.9999997473787516355514526367188e-05;
        float _1690 = (-1.0) - _1688;
        float _1692 = _1688 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1687 > _1692) || ((_1687 < _1690) || ((_1686 > _1692) || ((_1686 < _1690) || ((_1685 < _1690) || (_1685 > _1692))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1687, cbModelParam._m0[9u].z, fma(_1686, cbModelParam._m0[9u].y, _1685 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1687, cbModelParam._m0[10u].z, fma(_1686, cbModelParam._m0[10u].y, _1685 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1687, cbModelParam._m0[11u].z, fma(_1686, cbModelParam._m0[11u].y, _1685 * cbModelParam._m0[11u].x))), _1189);
            frontier_phi_16_38_ladder = _1784.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1784.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1784.x * cbModelParam._m0[1u].y;
        }
        _1271 = frontier_phi_16_38_ladder_2;
        _1273 = frontier_phi_16_38_ladder_1;
        _1275 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_378, _379, _380), _1189);
        _1271 = _1259.x * cbModelParam._m0[1u].y;
        _1273 = _1259.y * cbModelParam._m0[1u].y;
        _1275 = _1259.z * cbModelParam._m0[1u].y;
    }
    float _1278 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1371;
    float _1373;
    float _1375;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1335 = fma(_410, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _402)) + cbModelParam._m0[21u].w;
        float _1339 = fma(_410, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _402)) + cbModelParam._m0[22u].w;
        float _1343 = fma(_410, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _402)) + cbModelParam._m0[23u].w;
        float _1346 = fma(_380, cbModelParam._m0[21u].z, fma(_379, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _378));
        float _1349 = fma(_380, cbModelParam._m0[22u].z, fma(_379, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _378));
        float _1352 = fma(_380, cbModelParam._m0[23u].z, fma(_379, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _378));
        float _1494;
        if (_1346 > 0.0)
        {
            _1494 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1494 = frontier_phi_28_24_ladder;
        }
        float _1705;
        if (_1349 > 0.0)
        {
            _1705 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1705 = frontier_phi_40_35_ladder;
        }
        float _1856;
        if (_1352 > 0.0)
        {
            _1856 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1856 = frontier_phi_49_46_ladder;
        }
        float _1858 = isnan(_1705) ? _1494 : (isnan(_1494) ? _1705 : min(_1494, _1705));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1346) + _1335;
        float _1864 = (_1859 * _1349) + _1339;
        float _1865 = (_1859 * _1352) + _1343;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1867 = (-1.0) - _1866;
        float _1869 = _1866 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1865 > _1869) || ((_1865 < _1867) || ((_1864 > _1869) || ((_1864 < _1867) || ((_1863 < _1867) || (_1863 > _1869))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1865, cbModelParam._m0[17u].z, fma(_1864, cbModelParam._m0[17u].y, _1863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1865, cbModelParam._m0[18u].z, fma(_1864, cbModelParam._m0[18u].y, _1863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1865, cbModelParam._m0[19u].z, fma(_1864, cbModelParam._m0[19u].y, _1863 * cbModelParam._m0[19u].x))), _1278);
            frontier_phi_25_49_ladder = _2066.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2066.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2066.x * cbModelParam._m0[1u].z;
        }
        _1371 = frontier_phi_25_49_ladder_2;
        _1373 = frontier_phi_25_49_ladder_1;
        _1375 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_378, _379, _380), _1278);
        _1371 = _1355.x * cbModelParam._m0[1u].z;
        _1373 = _1355.y * cbModelParam._m0[1u].z;
        _1375 = _1355.z * cbModelParam._m0[1u].z;
    }
    float _1387 = _369 * 0.01200000010430812835693359375;
    float _1389 = _1387 * ((cbModelParam._m0[1u].w * (_1371 - _1271)) + _1271);
    float _1390 = _1387 * ((cbModelParam._m0[1u].w * (_1373 - _1273)) + _1273);
    float _1391 = _1387 * ((cbModelParam._m0[1u].w * (_1375 - _1275)) + _1275);
    float _1394 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, _1389 * cbSceneParam._m0[91u].x));
    uvec4 _1410 = floatBitsToUint(cbInstanceData._m0[_343 + 5u]);
    uint _1412 = _1410.x * 14u;
    uint _1413 = _1412 + 13u;
    float _1420 = _369 + (-1.0);
    float _1426 = (cbLight._m0[_1413].x * _1420) + 1.0;
    float _1427 = (cbLight._m0[_1413].y * _1420) + 1.0;
    float _1428 = (cbLight._m0[_1413].z * _1420) + 1.0;
    float _1429 = (cbLight._m0[_1413].w * _1420) + 1.0;
    uint _1430 = _1412 + 5u;
    float _1436 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
    uint _1440 = _1412 + 4u;
    float _1447 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
    uint _1451 = _1412 | 1u;
    float _1462 = dot(vec3(cbLight._m0[_1412].xyz), vec3(_200, _201, _202));
    float _1465 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_200, _201, _202));
    float _3388 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _3399 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1470 = (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * 0.3183098733425140380859375;
    float _1472 = (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.3183098733425140380859375;
    float _1479 = ((cbLight._m0[_1430].x * _1436) * _1472) + ((cbLight._m0[_1440].x * _1447) * _1470);
    float _1480 = ((_1436 * cbLight._m0[_1430].y) * _1472) + ((_1447 * cbLight._m0[_1440].y) * _1470);
    float _1481 = ((_1436 * cbLight._m0[_1430].z) * _1472) + ((_1447 * cbLight._m0[_1440].z) * _1470);
    uvec4 _1486 = floatBitsToUint(cbLight._m0[_1412 + 12u]);
    bool _1488 = _1486.x == 0u;
    float _1499;
    float _1501;
    float _1503;
    if (_1488)
    {
        _1499 = _1479;
        _1501 = _1480;
        _1503 = _1481;
    }
    else
    {
        uint _1507 = _1412 + 6u;
        float _1523 = (dot(vec3(cbLight._m0[_1412 + 2u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1524 = _1523 * _1523;
        float _3410 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1526 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1499 = (((cbLight._m0[_1507].x * 0.3183098733425140380859375) * _1525) * _1526) + _1479;
        _1501 = (((cbLight._m0[_1507].y * 0.3183098733425140380859375) * _1525) * _1526) + _1480;
        _1503 = (((cbLight._m0[_1507].z * 0.3183098733425140380859375) * _1525) * _1526) + _1481;
    }
    bool _1506 = _1486.y == 0u;
    float _1544;
    float _1546;
    float _1548;
    if (_1506)
    {
        _1544 = _1499;
        _1546 = _1501;
        _1548 = _1503;
    }
    else
    {
        uint _1649 = _1412 + 7u;
        float _1665 = (dot(vec3(cbLight._m0[_1412 + 3u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3426 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1668 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1544 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1499;
        _1546 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1501;
        _1548 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1503;
    }
    uint _1550 = _1412 + 8u;
    float _1556 = cbLight._m0[_1412].x + _282;
    float _1557 = cbLight._m0[_1412].y + _283;
    float _1558 = cbLight._m0[_1412].z + _284;
    float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
    float _1566 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1412].xyz));
    float _3442 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1569 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _1570 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _1571 = dot(vec3(cbLight._m0[_1412].xyz), vec3(_1556 * _1562, _1557 * _1562, _1558 * _1562));
    float _3464 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1582 = (exp2(log2(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1588 = (0.5 / ((_1569 + 9.9999999392252902907785028219223e-09) + _1570)) * _1569;
    float _3475 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1590 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.31831014156341552734375;
    uint _1601 = _1412 + 9u;
    float _1607 = cbLight._m0[_1451].x + _282;
    float _1608 = cbLight._m0[_1451].y + _283;
    float _1609 = cbLight._m0[_1451].z + _284;
    float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
    float _1617 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1451].xyz));
    float _3486 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1620 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _1621 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1607 * _1613, _1608 * _1613, _1609 * _1613));
    float _3497 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1630 = (exp2(log2(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1634 = (0.5 / ((_1620 + 9.9999999392252902907785028219223e-09) + _1570)) * _1620;
    float _3508 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1636 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.31831014156341552734375;
    float _1646 = (((_1630 * cbLight._m0[_1601].x) * _1636) * _1436) + (((_1582 * cbLight._m0[_1550].x) * _1590) * _1447);
    float _1647 = (((_1630 * cbLight._m0[_1601].y) * _1636) * _1436) + (((_1582 * cbLight._m0[_1550].y) * _1590) * _1447);
    float _1648 = (((_1630 * cbLight._m0[_1601].z) * _1636) * _1436) + (((_1582 * cbLight._m0[_1550].z) * _1590) * _1447);
    float _1710;
    float _1712;
    float _1714;
    if (_1488)
    {
        _1710 = _1646;
        _1712 = _1647;
        _1714 = _1648;
    }
    else
    {
        uint _1716 = _1412 + 10u;
        uint _1722 = _1412 + 2u;
        float _1728 = cbLight._m0[_1722].x + _282;
        float _1729 = cbLight._m0[_1722].y + _283;
        float _1730 = cbLight._m0[_1722].z + _284;
        float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
        float _1738 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1722].xyz));
        float _3519 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1741 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1742 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1728 * _1734, _1729 * _1734, _1730 * _1734));
        float _3530 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1755 = (0.5 / ((_1741 + 9.9999999392252902907785028219223e-09) + _1570)) * _1741;
        float _3541 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1757 = (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.31831014156341552734375;
        float _1758 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1710 = (((_1751 * cbLight._m0[_1716].x) * _1757) * _1758) + _1646;
        _1712 = (((_1751 * cbLight._m0[_1716].y) * _1757) * _1758) + _1647;
        _1714 = (((_1751 * cbLight._m0[_1716].z) * _1757) * _1758) + _1648;
    }
    float _1793;
    float _1795;
    float _1797;
    if (_1506)
    {
        _1793 = _1710;
        _1795 = _1712;
        _1797 = _1714;
    }
    else
    {
        uint _1804 = _1412 + 11u;
        uint _1810 = _1412 + 3u;
        float _1816 = cbLight._m0[_1810].x + _282;
        float _1817 = cbLight._m0[_1810].y + _283;
        float _1818 = cbLight._m0[_1810].z + _284;
        float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
        float _1826 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1810].xyz));
        float _3557 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1829 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1830 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_1816 * _1822, _1817 * _1822, _1818 * _1822));
        float _3568 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = (exp2(log2(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1843 = (0.5 / ((_1829 + 9.9999999392252902907785028219223e-09) + _1570)) * _1829;
        float _3579 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1845 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.31831014156341552734375;
        float _1846 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1793 = (((_1839 * cbLight._m0[_1804].x) * _1845) * _1846) + _1710;
        _1795 = (((_1839 * cbLight._m0[_1804].y) * _1845) * _1846) + _1712;
        _1797 = (((_1839 * cbLight._m0[_1804].z) * _1845) * _1846) + _1714;
    }
    float _1981;
    float _1983;
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    if (_1410.y == 0u)
    {
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1921;
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1921;
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1921;
        uvec4 _1936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1937 = _1936.x;
        uint _1948 = uint((float(_1936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _304) / _1937))) + floor(float(uint(cbSceneParam._m0[85u].x * _303) / _1937)));
        float _1958 = (log2(_1924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1959 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        uint _1962 = uint(isnan(14.0) ? _1959 : (isnan(_1959) ? 14.0 : min(_1959, 14.0)));
        uvec4 _1967 = texelFetch(g_lightClusterGridBuffer, int(((_1962 << 2u) + (_1948 << 6u)) >> 2u));
        uint _1968 = _1967.x;
        uint _1969 = _1936.z;
        float _2071;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        if (((((1u << ((_1969 >> 4u) & 15u)) + 4294967295u) & _1968) == 0u) || ((_1969 & 240u) == 0u))
        {
            _2071 = 0.0;
            _2073 = 0.0;
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
        }
        else
        {
            float _2072;
            float _2074;
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2223 = 0.0;
            float _2224 = 0.0;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            uint _2229 = 0u;
            uint _2238;
            bool _2239;
            for (;;)
            {
                _2238 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2229 << 2u)) >> 2u)).x;
                _2239 = _2238 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2239)
                {
                    frontier_phi_66_pred = _2223;
                    frontier_phi_66_pred_1 = _2228;
                    frontier_phi_66_pred_2 = _2227;
                    frontier_phi_66_pred_3 = _2226;
                    frontier_phi_66_pred_4 = _2225;
                    frontier_phi_66_pred_5 = _2224;
                }
                else
                {
                    float _2368;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    uint _2374;
                    _2368 = _2223;
                    _2369 = _2224;
                    _2370 = _2225;
                    _2371 = _2226;
                    _2372 = _2227;
                    _2373 = _2228;
                    _2374 = _2238;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    float _2300;
                    for (;;)
                    {
                        uint _2378 = uint(findLSB(_2374)) + (_2229 << 5u);
                        uint _2375 = (_2374 + 4294967295u) & _2374;
                        uint _2380 = _2378 * 48u;
                        vec4 _2394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2380)).x, texelFetch(g_PointLightRenderingBuffer, int(_2380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2380 + 3u)).x));
                        uint _2400 = (_2378 * 48u) + 4u;
                        vec4 _2413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 3u)).x));
                        uint _2419 = (_2378 * 48u) + 8u;
                        vec3 _2430 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2419)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 2u)).x));
                        float _2434 = _2394.x - _1922;
                        float _2435 = _2394.y - _1923;
                        float _2436 = _2394.z - _1924;
                        float _2437 = dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436));
                        float _2440 = inversesqrt(_2437);
                        float _2449 = 1.0 - (_2437 * _2394.w);
                        float _3605 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
                        float _2450 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
                        float _2451 = sqrt(_2437) * _2413.w;
                        float _2454 = 1.39999997615814208984375 / (_2451 + 1.39999997615814208984375);
                        float _2455 = _2454 * _2454;
                        float _2458 = ((1.0 - _2455) * dot(vec3(_324, _327, _330), vec3(_2440 * _2434, _2440 * _2435, _2440 * _2436))) + _2455;
                        float _2461 = _2451 * _2451;
                        float _2465 = ((isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0))) * _2450) / ((_2461 * 0.699999988079071044921875) + 1.0);
                        float _2469 = (-0.0) - _1922;
                        float _2470 = (-0.0) - _1923;
                        float _2471 = (-0.0) - _1924;
                        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
                        float _2479 = dot(vec3(_324, _327, _330), vec3(_2475 * _2469, _2475 * _2470, _2475 * _2471));
                        float _3621 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                        float _3632 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _2483 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
                        float _2487 = (0.5 / (((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) + 9.9999999392252902907785028219223e-09) + _2483)) * _2483;
                        float _3643 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
                        float _2496 = (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 3.1415927410125732421875) / ((_2461 * 2.1991131305694580078125) + 3.141590118408203125)) * _2450;
                        _2298 = (_2465 * _2413.x) + _2371;
                        _2299 = (_2465 * _2413.y) + _2372;
                        _2300 = (_2465 * _2413.z) + _2373;
                        _2295 = (_2496 * _2430.x) + _2368;
                        _2296 = (_2496 * _2430.y) + _2369;
                        _2297 = (_2496 * _2430.z) + _2370;
                        if (_2375 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2368 = _2295;
                            _2369 = _2296;
                            _2370 = _2297;
                            _2371 = _2298;
                            _2372 = _2299;
                            _2373 = _2300;
                            _2374 = _2375;
                        }
                    }
                    frontier_phi_66_pred = _2295;
                    frontier_phi_66_pred_1 = _2300;
                    frontier_phi_66_pred_2 = _2299;
                    frontier_phi_66_pred_3 = _2298;
                    frontier_phi_66_pred_4 = _2297;
                    frontier_phi_66_pred_5 = _2296;
                }
                _2072 = frontier_phi_66_pred;
                _2082 = frontier_phi_66_pred_1;
                _2080 = frontier_phi_66_pred_2;
                _2078 = frontier_phi_66_pred_3;
                _2076 = frontier_phi_66_pred_4;
                _2074 = frontier_phi_66_pred_5;
                uint _2230 = _2229 + 1u;
                if (_2230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2223 = _2072;
                    _2224 = _2074;
                    _2225 = _2076;
                    _2226 = _2078;
                    _2227 = _2080;
                    _2228 = _2082;
                    _2229 = _2230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2071 = _2072;
            _2073 = _2074;
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
        }
        uvec4 _2085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2086 = _2085.z;
        uint _2088 = (_2086 >> 8u) & 15u;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((4294967295u << _2088) & _1968) == 0u)
        {
            _2194 = _2071;
            _2196 = _2073;
            _2198 = _2075;
            _2200 = _2077;
            _2202 = _2079;
            _2204 = _2081;
        }
        else
        {
            float _2219 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2088 < ((_2086 >> 12u) & 15u))
            {
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2351 = _2071;
                float _2352 = _2073;
                float _2353 = _2075;
                float _2354 = _2077;
                float _2355 = _2079;
                float _2356 = _2081;
                uint _2357 = _2088;
                uint _2366;
                bool _2367;
                for (;;)
                {
                    _2366 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2357 << 2u)) >> 2u)).x;
                    _2367 = _2366 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2367)
                    {
                        frontier_phi_77_pred = _2356;
                        frontier_phi_77_pred_1 = _2355;
                        frontier_phi_77_pred_2 = _2354;
                        frontier_phi_77_pred_3 = _2353;
                        frontier_phi_77_pred_4 = _2352;
                        frontier_phi_77_pred_5 = _2351;
                    }
                    else
                    {
                        float _2510;
                        float _2511;
                        float _2512;
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2523 = _2351;
                        float _2524 = _2352;
                        float _2525 = _2353;
                        float _2526 = _2354;
                        float _2527 = _2355;
                        float _2528 = _2356;
                        uint _2529 = _2366;
                        uint _2530;
                        vec4 _2555;
                        float _2556;
                        vec4 _2571;
                        vec3 _2583;
                        vec4 _2599;
                        vec4 _2615;
                        float _2662;
                        bool _2663;
                        for (;;)
                        {
                            uint _2540 = ((_2357 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2529));
                            _2530 = (_2529 + 4294967295u) & _2529;
                            uint _2542 = _2540 * 40u;
                            _2555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 3u)).x));
                            _2556 = _2555.w;
                            uint _2558 = (_2540 * 40u) + 4u;
                            _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2573 = (_2540 * 40u) + 8u;
                            _2583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 2u)).x));
                            uint _2586 = (_2540 * 40u) + 16u;
                            _2599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 3u)).x));
                            uint _2602 = (_2540 * 40u) + 20u;
                            _2615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 3u)).x));
                            uint _2618 = (_2540 * 40u) + 24u;
                            vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 3u)).x));
                            uint _2637 = (_2540 * 40u) + 28u;
                            vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            _2662 = fma(_1924, _2650.z, fma(_1923, _2650.y, _2650.x * _1922)) + _2650.w;
                            _2663 = !((fma(_1924, _2631.z, fma(_1923, _2631.y, _2631.x * _1922)) + _2631.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2663)
                            {
                                float _2690 = _2555.x - _1922;
                                float _2691 = _2555.y - _1923;
                                float _2692 = _2555.z - _1924;
                                float _2693 = dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692));
                                float _2696 = inversesqrt(_2693);
                                float _2697 = _2696 * _2690;
                                float _2698 = _2696 * _2691;
                                float _2699 = _2696 * _2692;
                                float _2703 = 1.0 - (_2693 / (_2556 * _2556));
                                float _3654 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                                float _2704 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2708 = sqrt(_2693) * _2571.w;
                                float _2710 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                                float _2711 = _2710 * _2710;
                                float _2712 = 1.0 - _2711;
                                float _2714 = (_2712 * dot(vec3(_2697, _2698, _2699), vec3(_324, _327, _330))) + _2711;
                                float _2717 = _2708 * _2708;
                                float _2721 = (fma(_1924, _2599.z, fma(_1923, _2599.y, _2599.x * _1922)) + _2599.w) / _2662;
                                float _2722 = (fma(_1924, _2615.z, fma(_1923, _2615.y, _2615.x * _1922)) + _2615.w) / _2662;
                                float _2726 = 1.0 - dot(vec2(_2721, _2722), vec2(_2721, _2722));
                                float _3670 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                                float _2727 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
                                float _2728 = _2727 * (((isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))) * _2704) / ((_2717 * 0.699999988079071044921875) + 1.0));
                                float _2738 = dot(vec3(_324, _327, _330), vec3((-0.0) - (_1922 * _2219), (-0.0) - (_1923 * _2219), (-0.0) - (_1924 * _2219)));
                                float _3681 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                                float _2746 = (_2712 * dot(vec3(_324, _327, _330), vec3(_2697, _2698, _2699))) + _2711;
                                float _3692 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
                                float _2751 = (0.5 / (((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) + 9.9999999392252902907785028219223e-09) + _2747)) * _2747;
                                float _3703 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2758 = (_2727 * _2704) * (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 3.1415927410125732421875) / ((_2717 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2728 * _2571.y;
                                frontier_phi_83_pred_1 = _2728 * _2571.x;
                                frontier_phi_83_pred_2 = _2758 * _2583.z;
                                frontier_phi_83_pred_3 = _2758 * _2583.y;
                                frontier_phi_83_pred_4 = _2758 * _2583.x;
                                frontier_phi_83_pred_5 = _2728 * _2571.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2766 = frontier_phi_83_pred;
                            _2765 = frontier_phi_83_pred_1;
                            _2764 = frontier_phi_83_pred_2;
                            _2763 = frontier_phi_83_pred_3;
                            _2762 = frontier_phi_83_pred_4;
                            _2767 = frontier_phi_83_pred_5;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            _2510 = _2762 + _2523;
                            _2511 = _2763 + _2524;
                            _2512 = _2764 + _2525;
                            if (_2530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2530;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2515;
                        frontier_phi_77_pred_1 = _2514;
                        frontier_phi_77_pred_2 = _2513;
                        frontier_phi_77_pred_3 = _2512;
                        frontier_phi_77_pred_4 = _2511;
                        frontier_phi_77_pred_5 = _2510;
                    }
                    _2205 = frontier_phi_77_pred;
                    _2203 = frontier_phi_77_pred_1;
                    _2201 = frontier_phi_77_pred_2;
                    _2199 = frontier_phi_77_pred_3;
                    _2197 = frontier_phi_77_pred_4;
                    _2195 = frontier_phi_77_pred_5;
                    uint _2358 = _2357 + 1u;
                    if (_2358 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2351 = _2195;
                        _2352 = _2197;
                        _2353 = _2199;
                        _2354 = _2201;
                        _2355 = _2203;
                        _2356 = _2205;
                        _2357 = _2358;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2199;
                frontier_phi_58_59_ladder_1 = _2205;
                frontier_phi_58_59_ladder_2 = _2203;
                frontier_phi_58_59_ladder_3 = _2201;
                frontier_phi_58_59_ladder_4 = _2197;
                frontier_phi_58_59_ladder_5 = _2195;
            }
            else
            {
                frontier_phi_58_59_ladder = _2075;
                frontier_phi_58_59_ladder_1 = _2081;
                frontier_phi_58_59_ladder_2 = _2079;
                frontier_phi_58_59_ladder_3 = _2077;
                frontier_phi_58_59_ladder_4 = _2073;
                frontier_phi_58_59_ladder_5 = _2071;
            }
            _2194 = frontier_phi_58_59_ladder_5;
            _2196 = frontier_phi_58_59_ladder_4;
            _2198 = frontier_phi_58_59_ladder;
            _2200 = frontier_phi_58_59_ladder_3;
            _2202 = frontier_phi_58_59_ladder_2;
            _2204 = frontier_phi_58_59_ladder_1;
        }
        float _2209 = isnan(1.0) ? _369 : (isnan(_369) ? 1.0 : min(_369, 1.0));
        _1981 = (_2209 * _2200) + _1544;
        _1983 = (_2209 * _2202) + _1546;
        _1985 = (_2209 * _2204) + _1548;
        _1987 = ((_2194 * 0.039999999105930328369140625) * _2209) + _1793;
        _1989 = ((_2196 * 0.039999999105930328369140625) * _2209) + _1795;
        _1991 = ((_2198 * 0.039999999105930328369140625) * _2209) + _1797;
    }
    else
    {
        _1981 = _1544;
        _1983 = _1546;
        _1985 = _1548;
        _1987 = _1793;
        _1989 = _1795;
        _1991 = _1797;
    }
    float _3719 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3730 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3741 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3752 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2009 = ((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1981 + ((isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))) * _369))) + ((_1987 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1180)) * cbPerFrame._m0[3u].x);
    float _2010 = ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1983 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _369))) + ((_1989 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1180)) * cbPerFrame._m0[3u].x);
    float _2011 = ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1985 + ((isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0))) * _369))) + ((_1991 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _1180)) * cbPerFrame._m0[3u].x);
    float _2016 = cbInstanceData._m0[_343 + 6u].w * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)));
    float _2021 = _303 / cbSceneParam._m0[86u].x;
    float _2022 = _304 / cbSceneParam._m0[86u].y;
    vec4 _2036 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, (log2((isnan(cbSceneParam._m0[77u].w) ? _223 : (isnan(_223) ? cbSceneParam._m0[77u].w : min(_223, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2038 = _2036.x;
    float _2039 = _2036.y;
    float _2040 = _2036.z;
    float _2041 = _2036.w;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    if (_223 > cbSceneParam._m0[78u].w)
    {
        float _2096 = isnan(_223) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _223 : min(cbSceneParam._m0[80u].w, _223));
        float _2097 = _2096 / _223;
        float _2108 = _2097 * _275;
        float _2109 = _276 * _2097;
        float _2110 = (-0.0) - _2109;
        float _2112 = _2097 * _277;
        float _2114 = (cbSceneParam._m0[77u].w * _2110) / _2096;
        float _2115 = _2114 + cbSceneParam._m0[79u].w;
        float _2116 = cbSceneParam._m0[79u].w - _2109;
        float _2122 = sqrt(((_2108 * _2108) + (_2109 * _2109)) + (_2112 * _2112));
        float _2125 = (1.0 - (cbSceneParam._m0[77u].w / _2096)) * _2122;
        float _2130 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2132 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2308;
        if (abs((_2110 - _2114) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2308 = ((((_2115 > 0.0) ? exp2(_2130 * _2115) : (2.0 - exp2(_2132 * _2115))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2125;
        }
        else
        {
            float _2252 = 1.0 / cbSceneParam._m0[80u].x;
            float _2253 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : max(_2115, _2116));
            float _2254 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : min(_2115, _2116));
            float _2263 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : min(_2253, 0.0));
            float _2264 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : min(_2254, 0.0));
            _2308 = ((abs(_2122 / _2110) * cbSceneParam._m0[80u].y) * ((((_2263 - _2264) * 2.0) - ((exp2(_2130 * (isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)))) - exp2(_2130 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))))) * _2252)) - ((exp2(_2132 * _2263) - exp2(_2132 * _2264)) * _2252))) + (_2125 * cbSceneParam._m0[80u].z);
        }
        vec4 _2310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, 1.0), 0.0);
        float _2319 = exp2((_2308 * (-1.44269502162933349609375)) * (1.0 - _2310.w));
        float _2320 = log2(_2319);
        float _2336 = log2(_2041);
        _2134 = (exp2(_2336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].x)) * _2310.x) / cbSceneParam._m0[78u].x)) + _2038;
        _2136 = (exp2(_2336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].y)) * _2310.y) / cbSceneParam._m0[78u].y)) + _2039;
        _2138 = (exp2(_2336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].z)) * _2310.z) / cbSceneParam._m0[78u].z)) + _2040;
        _2140 = _2319 * _2041;
    }
    else
    {
        _2134 = _2038;
        _2136 = _2039;
        _2138 = _2040;
        _2140 = _2041;
    }
    bool _2346;
    vec4 _2150;
    vec4 _2173;
    float _2175;
    float _2179;
    float _2180;
    float _2181;
    float _2182;
    bool _2193;
    for (;;)
    {
        _2150 = cbMatDynParam._m0[0u];
        float _2152 = roundEven(_2150.y);
        bool _2153 = _2152 == 3.0;
        float _2155 = log2(_2140);
        float _2162 = exp2(_2155 * cbSceneParam._m0[78u].x) * _2009;
        float _2163 = exp2(_2155 * cbSceneParam._m0[78u].y) * _2010;
        float _2164 = exp2(_2155 * cbSceneParam._m0[78u].z) * _2011;
        float _2171 = _291 + (-0.5);
        _2173 = cbMtdParam._m0[1u];
        _2175 = _2173.y * _2171;
        float _2178 = (_2152 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2179 = _2178 * (_2153 ? _2162 : (_2162 + (cbSceneParam._m0[72u].w * _2134)));
        _2180 = _2178 * (_2153 ? _2163 : (_2163 + (cbSceneParam._m0[72u].w * _2136)));
        _2181 = _2178 * (_2153 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2138)));
        _2182 = _2171 * 0.999000012874603271484375;
        _2193 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2193)
        {
            if ((cbInstanceData._m0[_343 + 7u].x + _2182) < 0.5)
            {
                _2346 = true;
                break;
            }
        }
        uint _2287 = _345 + uint(_2150.w);
        if ((cbInstanceData._m0[_2287].w < 1.0) && ((cbInstanceData._m0[_2287].w + _2182) < 0.5))
        {
            _2346 = true;
            break;
        }
        if ((_2175 + _191) < _2173.x)
        {
            _2346 = true;
            break;
        }
        _2346 = false;
        break;
    }
    float _2501;
    if (_2346)
    {
        discard_state = true;
        _2501 = 0.0;
    }
    else
    {
        _2501 = _2016;
    }
    SV_Target.x = _2179;
    SV_Target.y = _2180;
    SV_Target.z = _2181;
    SV_Target.w = _2501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2016;
    discard_exit();
}


