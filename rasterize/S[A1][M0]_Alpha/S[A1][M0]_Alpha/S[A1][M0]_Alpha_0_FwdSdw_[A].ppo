#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _746;
float _3197;
float _3198;
float _3199;
float _3200;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _195 = _189.w;
    float _196 = _189.x * cbMtdParam._m0[9u].x;
    float _197 = _189.y * cbMtdParam._m0[9u].y;
    float _198 = _189.z * cbMtdParam._m0[9u].z;
    float _199 = _195 * TEXCOORD_1.z;
    float _203 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _204 = _203 * _167;
    float _205 = _203 * _168;
    float _206 = _203 * _169;
    float _3209 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _208 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3231 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3242 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _227 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _285 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _286 = _279 * _285;
    float _287 = _280 * _285;
    float _288 = _281 * _285;
    vec4 _293 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _295 = _293.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _425 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _431 = (cbMatDynParam._m0[5u].x * _425) + cbMatDynParam._m0[5u].y;
        float _3253 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
        float _432 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _436 = (cbMatDynParam._m0[5u].z * _425) + cbMatDynParam._m0[5u].w;
        float _3264 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) - _432)) + _432) < ((_295 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _307 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _308 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _328 = fma(_206, cbSceneParam._m0[5u].z, fma(_205, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _204));
    float _331 = fma(_206, cbSceneParam._m0[6u].z, fma(_205, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _204));
    float _334 = fma(_206, cbSceneParam._m0[7u].z, fma(_205, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _204));
    uint _347 = uint(roundEven(NORMAL.w)) * 13u;
    uint _349 = _347 + 9u;
    uint _350 = _349 + uint(cbMatDynParam._m0[0u].w);
    float _356 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_350].x;
    float _357 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_350].y;
    float _358 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_350].z;
    float _3275 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _359 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    vec4 _370 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _307, cbSceneParam._m0[86u].y * _308));
    float _373 = _370.x * TEXCOORD_1.w;
    float _374 = dot(vec3(_204, _205, _206), vec3(_286, _287, _288));
    float _377 = _374 * 2.0;
    float _382 = (_377 * _204) - _286;
    float _383 = (_377 * _205) - _287;
    float _384 = (_377 * _206) - _288;
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _745;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _470 = fma(_414, cbModelParam._m0[26u].z, fma(_410, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _406));
        float _474 = fma(_414, cbModelParam._m0[27u].z, fma(_410, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _406));
        float _478 = fma(_414, cbModelParam._m0[28u].z, fma(_410, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _406));
        float _503 = _406 + _204;
        float _504 = _410 + _205;
        float _505 = _414 + _206;
        float _515 = fma(_505, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503)) - _470;
        float _516 = fma(_505, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503)) - _474;
        float _517 = fma(_505, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503)) - _478;
        float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
        float _534 = ((_521 * _515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_521 * _516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_521 * _517) / cbModelParam._m0[34u].z) + ((((((_478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        float _573 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_539.x + (-0.5));
        float _575 = _573 * (_539.y + (-0.5));
        float _576 = _573 * (_539.z + (-0.5));
        float _583 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_546.x + (-0.5));
        float _585 = _583 * (_546.y + (-0.5));
        float _586 = _583 * (_546.z + (-0.5));
        float _593 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_553.x + (-0.5));
        float _595 = _593 * (_553.y + (-0.5));
        float _596 = _593 * (_553.z + (-0.5));
        float _603 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_560.x + (-0.5));
        float _605 = _603 * (_560.y + (-0.5));
        float _606 = _603 * (_560.z + (-0.5));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = _574 * 0.5;
        float _611 = _584 * 0.5;
        float _612 = _594 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _627 = (dot(vec3(_204, _205, _206), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _637 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _3345 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_639 + 1.0))) + _644) * _607;
        float _654 = _575 * 0.5;
        float _655 = _585 * 0.5;
        float _656 = _595 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_204, _205, _206), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3378 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_681 + 1.0))) + _686) * _608;
        float _696 = _576 * 0.5;
        float _697 = _586 * 0.5;
        float _698 = _596 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(_204, _205, _206), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3411 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_723 + 1.0))) + _728) * _609;
        _745 = _576;
        _747 = _575;
        _748 = _574;
        _749 = _586;
        _750 = _585;
        _751 = _584;
        _752 = _596;
        _753 = _595;
        _754 = _594;
        _755 = _609;
        _756 = _608;
        _757 = _607;
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
    }
    else
    {
        _745 = _746;
        _747 = _746;
        _748 = _746;
        _749 = _746;
        _750 = _746;
        _751 = _746;
        _752 = _746;
        _753 = _746;
        _754 = _746;
        _755 = _746;
        _756 = _746;
        _757 = _746;
        _758 = 0.0;
        _759 = 0.0;
        _760 = 0.0;
    }
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _789 = fma(_414, cbModelParam._m0[30u].z, fma(_410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _406));
        float _793 = fma(_414, cbModelParam._m0[31u].z, fma(_410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _406));
        float _797 = fma(_414, cbModelParam._m0[32u].z, fma(_410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _406));
        float _820 = _406 + _204;
        float _821 = _410 + _205;
        float _822 = _414 + _206;
        float _832 = fma(_822, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820)) - _789;
        float _833 = fma(_822, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820)) - _793;
        float _834 = fma(_822, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820)) - _797;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_789 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_793 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[35u].z) + ((((((_797 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _888 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_855.x + (-0.5));
        float _890 = _888 * (_855.y + (-0.5));
        float _891 = _888 * (_855.z + (-0.5));
        float _898 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_862.x + (-0.5));
        float _900 = _898 * (_862.y + (-0.5));
        float _901 = _898 * (_862.z + (-0.5));
        float _908 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_869.x + (-0.5));
        float _910 = _908 * (_869.y + (-0.5));
        float _911 = _908 * (_869.z + (-0.5));
        float _918 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_876.x + (-0.5));
        float _920 = _918 * (_876.y + (-0.5));
        float _921 = _918 * (_876.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_204, _205, _206), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3474 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_952 + 1.0))) + _957) * _922;
        float _967 = _890 * 0.5;
        float _968 = _900 * 0.5;
        float _969 = _910 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_204, _205, _206), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3507 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_994 + 1.0))) + _999) * _923;
        float _1009 = _891 * 0.5;
        float _1010 = _901 * 0.5;
        float _1011 = _911 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_204, _205, _206), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3540 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1036 + 1.0))) + _1041) * _924;
        _1058 = _891;
        _1059 = _890;
        _1060 = _889;
        _1061 = _901;
        _1062 = _900;
        _1063 = _899;
        _1064 = _911;
        _1065 = _910;
        _1066 = _909;
        _1067 = _924;
        _1068 = _923;
        _1069 = _922;
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _746;
        _1059 = _746;
        _1060 = _746;
        _1061 = _746;
        _1062 = _746;
        _1063 = _746;
        _1064 = _746;
        _1065 = _746;
        _1066 = _746;
        _1067 = _746;
        _1068 = _746;
        _1069 = _746;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _758)) + _758;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _759)) + _759;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _760)) + _760;
    float _1105 = fma(_1084, cbSceneParam._m0[89u].z, fma(_1083, cbSceneParam._m0[89u].y, _1082 * cbSceneParam._m0[89u].x));
    float _1108 = fma(_1084, cbSceneParam._m0[90u].z, fma(_1083, cbSceneParam._m0[90u].y, _1082 * cbSceneParam._m0[90u].x));
    float _1111 = fma(_1084, cbSceneParam._m0[91u].z, fma(_1083, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1082));
    float _1126 = _382 * 0.5;
    float _1127 = _383 * 0.5;
    float _1128 = _384 * 0.5;
    float _1129 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1132 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1135 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1169;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1142 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_745, _749, _752, _755));
        float _1146 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_747, _750, _753, _756));
        float _1150 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_748, _751, _754, _757));
        float _1157 = dot(vec4(cbModelParam._m0[39u]), vec4(_1126, _1127, _1128, 1.0));
        _1169 = dot(vec3(isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1157) ? 0.0 : (isnan(0.0) ? _1157 : max(0.0, _1157))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1169 = 1.0;
    }
    float _1180;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1171 = dot(vec4(cbModelParam._m0[40u]), vec4(_1126, _1127, _1128, 1.0));
        _1180 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1171) ? 0.0 : (isnan(0.0) ? _1171 : max(0.0, _1171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1180 = 1.0;
    }
    float _1184 = (_1180 * cbModelParam._m0[1u].x) + (_1169 * (1.0 - cbModelParam._m0[1u].x));
    float _1193 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1275;
    float _1277;
    float _1279;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1242 = fma(_414, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _406)) + cbModelParam._m0[13u].w;
        float _1246 = fma(_414, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _406)) + cbModelParam._m0[14u].w;
        float _1250 = fma(_414, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _406)) + cbModelParam._m0[15u].w;
        float _1253 = fma(_384, cbModelParam._m0[13u].z, fma(_383, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _382));
        float _1256 = fma(_384, cbModelParam._m0[14u].z, fma(_383, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _382));
        float _1259 = fma(_384, cbModelParam._m0[15u].z, fma(_383, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _382));
        float _1285;
        if (_1253 > 0.0)
        {
            _1285 = abs((1.0 - _1242) / _1253);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1242 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1285 = frontier_phi_17_15_ladder;
        }
        float _1460;
        if (_1256 > 0.0)
        {
            _1460 = abs((1.0 - _1246) / _1256);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1246 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1460 = frontier_phi_26_22_ladder;
        }
        float _1757;
        if (_1259 > 0.0)
        {
            _1757 = abs((1.0 - _1250) / _1259);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1250 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1757 = frontier_phi_38_33_ladder;
        }
        float _1759 = isnan(_1460) ? _1285 : (isnan(_1285) ? _1460 : min(_1285, _1460));
        float _1760 = isnan(_1757) ? _1759 : (isnan(_1759) ? _1757 : min(_1759, _1757));
        float _1764 = (_1760 * _1253) + _1242;
        float _1765 = (_1760 * _1256) + _1246;
        float _1766 = (_1760 * _1259) + _1250;
        float _1767 = _1760 * 9.9999997473787516355514526367188e-05;
        float _1769 = (-1.0) - _1767;
        float _1771 = _1767 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1766 > _1771) || ((_1766 < _1769) || ((_1765 > _1771) || ((_1765 < _1769) || ((_1764 < _1769) || (_1764 > _1771))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1766, cbModelParam._m0[9u].z, fma(_1765, cbModelParam._m0[9u].y, _1764 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1766, cbModelParam._m0[10u].z, fma(_1765, cbModelParam._m0[10u].y, _1764 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1766, cbModelParam._m0[11u].z, fma(_1765, cbModelParam._m0[11u].y, _1764 * cbModelParam._m0[11u].x))), _1193);
            frontier_phi_16_38_ladder = _1911.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1911.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1911.x * cbModelParam._m0[1u].y;
        }
        _1275 = frontier_phi_16_38_ladder_2;
        _1277 = frontier_phi_16_38_ladder_1;
        _1279 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_382, _383, _384), _1193);
        _1275 = _1263.x * cbModelParam._m0[1u].y;
        _1277 = _1263.y * cbModelParam._m0[1u].y;
        _1279 = _1263.z * cbModelParam._m0[1u].y;
    }
    float _1282 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1339 = fma(_414, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _406)) + cbModelParam._m0[21u].w;
        float _1343 = fma(_414, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _406)) + cbModelParam._m0[22u].w;
        float _1347 = fma(_414, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _406)) + cbModelParam._m0[23u].w;
        float _1350 = fma(_384, cbModelParam._m0[21u].z, fma(_383, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _382));
        float _1353 = fma(_384, cbModelParam._m0[22u].z, fma(_383, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _382));
        float _1356 = fma(_384, cbModelParam._m0[23u].z, fma(_383, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _382));
        float _1465;
        if (_1350 > 0.0)
        {
            _1465 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1465 = frontier_phi_28_24_ladder;
        }
        float _1784;
        if (_1353 > 0.0)
        {
            _1784 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1784 = frontier_phi_40_35_ladder;
        }
        float _2057;
        if (_1356 > 0.0)
        {
            _2057 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2057 = frontier_phi_50_47_ladder;
        }
        float _2059 = isnan(_1784) ? _1465 : (isnan(_1465) ? _1784 : min(_1465, _1784));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1350) + _1339;
        float _2065 = (_2060 * _1353) + _1343;
        float _2066 = (_2060 * _1356) + _1347;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2067;
        float _2070 = _2067 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2066 > _2070) || ((_2066 < _2068) || ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 < _2068) || (_2064 > _2070))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2066, cbModelParam._m0[17u].z, fma(_2065, cbModelParam._m0[17u].y, _2064 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2066, cbModelParam._m0[18u].z, fma(_2065, cbModelParam._m0[18u].y, _2064 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2066, cbModelParam._m0[19u].z, fma(_2065, cbModelParam._m0[19u].y, _2064 * cbModelParam._m0[19u].x))), _1282);
            frontier_phi_25_50_ladder = _2157.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2157.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2157.x * cbModelParam._m0[1u].z;
        }
        _1375 = frontier_phi_25_50_ladder_2;
        _1377 = frontier_phi_25_50_ladder_1;
        _1379 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_382, _383, _384), _1282);
        _1375 = _1359.x * cbModelParam._m0[1u].z;
        _1377 = _1359.y * cbModelParam._m0[1u].z;
        _1379 = _1359.z * cbModelParam._m0[1u].z;
    }
    float _1391 = _373 * 0.01200000010430812835693359375;
    float _1393 = _1391 * ((cbModelParam._m0[1u].w * (_1375 - _1275)) + _1275);
    float _1394 = _1391 * ((cbModelParam._m0[1u].w * (_1377 - _1277)) + _1277);
    float _1395 = _1391 * ((cbModelParam._m0[1u].w * (_1379 - _1279)) + _1279);
    float _1398 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, _1393 * cbSceneParam._m0[91u].x));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1452 = _1439 / _1451;
    float _1453 = _1443 / _1451;
    float _1454 = _1447 / _1451;
    float _1601;
    float _1602;
    float _1603;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1481 = ((uint(_1454 > cbSceneParam._m0[59u].y) + uint(_1454 > cbSceneParam._m0[59u].x)) + uint(_1454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1482 = _1481 + 43u;
        uint _1490 = _1481 + 44u;
        uint _1498 = _1481 + 45u;
        uint _1506 = _1481 + 46u;
        float _1517 = fma(_1451, cbSceneParam._m0[_1482].w, fma(_1447, cbSceneParam._m0[_1482].z, fma(_1443, cbSceneParam._m0[_1482].y, _1439 * cbSceneParam._m0[_1482].x)));
        float _1521 = fma(_1451, cbSceneParam._m0[_1490].w, fma(_1447, cbSceneParam._m0[_1490].z, fma(_1443, cbSceneParam._m0[_1490].y, _1439 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1451, cbSceneParam._m0[_1506].w, fma(_1447, cbSceneParam._m0[_1506].z, fma(_1443, cbSceneParam._m0[_1506].y, _1439 * cbSceneParam._m0[_1506].x)));
        float _1534 = cbSceneParam._m0[33u].z * _1529;
        float _1536 = cbSceneParam._m0[33u].w * _1529;
        float _1539 = fma(_1451, cbSceneParam._m0[_1498].w, fma(_1447, cbSceneParam._m0[_1498].z, fma(_1443, cbSceneParam._m0[_1498].y, _1439 * cbSceneParam._m0[_1498].x))) / _1529;
        float _1587 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
        float _3666 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1594 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 + _1517) / _1529, (_1536 + _1521) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1536 + _1517) / _1529, (_1521 - _1534) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1534) / _1529, (_1521 - _1536) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1536) / _1529, (_1534 + _1521) / _1529), _1539), 0.0)).x), vec4(0.25)));
        _1601 = 1.0 - (_1594 * cbSceneParam._m0[34u].x);
        _1602 = 1.0 - (_1594 * cbSceneParam._m0[34u].y);
        _1603 = 1.0 - (_1594 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1601 = 1.0;
        _1602 = 1.0;
        _1603 = 1.0;
    }
    float _1667;
    float _1669;
    float _1671;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1655 = fma(_1451, cbSceneParam._m0[63u].w, fma(_1447, cbSceneParam._m0[63u].z, fma(_1443, cbSceneParam._m0[63u].y, _1439 * cbSceneParam._m0[63u].x)));
        float _1656 = fma(_1451, cbSceneParam._m0[60u].w, fma(_1447, cbSceneParam._m0[60u].z, fma(_1443, cbSceneParam._m0[60u].y, _1439 * cbSceneParam._m0[60u].x))) / _1655;
        float _1657 = fma(_1451, cbSceneParam._m0[61u].w, fma(_1447, cbSceneParam._m0[61u].z, fma(_1443, cbSceneParam._m0[61u].y, _1439 * cbSceneParam._m0[61u].x))) / _1655;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1656 >= cbSceneParam._m0[64u].x) && (_1657 >= cbSceneParam._m0[64u].y)) && (_1656 <= cbSceneParam._m0[64u].z)) && (_1657 <= cbSceneParam._m0[64u].w))
        {
            float _1797 = fma(_1451, cbSceneParam._m0[62u].w, fma(_1447, cbSceneParam._m0[62u].z, fma(_1443, cbSceneParam._m0[62u].y, _1439 * cbSceneParam._m0[62u].x))) / _1655;
            float _1801 = isnan(cbSceneParam._m0[41u].w) ? _1797 : (isnan(_1797) ? cbSceneParam._m0[41u].w : max(_1797, cbSceneParam._m0[41u].w));
            float _1844 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
            float _3682 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
            float _1851 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1656, cbSceneParam._m0[33u].w + _1657), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1656, _1657 - cbSceneParam._m0[33u].z), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].z, _1657 - cbSceneParam._m0[33u].w), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1657), _1801), 0.0)).x), vec4(0.25)));
            float _1855 = 1.0 - (_1851 * cbSceneParam._m0[34u].x);
            float _1856 = 1.0 - (_1851 * cbSceneParam._m0[34u].y);
            float _1857 = 1.0 - (_1851 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1857) ? _1603 : (isnan(_1603) ? _1857 : min(_1603, _1857));
            frontier_phi_37_36_ladder_1 = isnan(_1856) ? _1602 : (isnan(_1602) ? _1856 : min(_1602, _1856));
            frontier_phi_37_36_ladder_2 = isnan(_1855) ? _1601 : (isnan(_1601) ? _1855 : min(_1601, _1855));
        }
        else
        {
            frontier_phi_37_36_ladder = _1603;
            frontier_phi_37_36_ladder_1 = _1602;
            frontier_phi_37_36_ladder_2 = _1601;
        }
        _1667 = frontier_phi_37_36_ladder_2;
        _1669 = frontier_phi_37_36_ladder_1;
        _1671 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1667 = _1601;
        _1669 = _1602;
        _1671 = _1603;
    }
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_347 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1686 = _373 + (-1.0);
    float _1692 = (cbLight._m0[_1679].x * _1686) + 1.0;
    float _1693 = (cbLight._m0[_1679].y * _1686) + 1.0;
    float _1694 = (cbLight._m0[_1679].z * _1686) + 1.0;
    float _1695 = (cbLight._m0[_1679].w * _1686) + 1.0;
    uint _1696 = _1678 + 5u;
    float _1702 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
    uint _1706 = _1678 + 4u;
    float _1716 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1720 = _1678 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_204, _205, _206));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_204, _205, _206));
    float _3718 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3729 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1696].x * _1702) * _1741) + (((cbLight._m0[_1706].x * _1667) * _1716) * _1739);
    float _1749 = ((_1702 * cbLight._m0[_1696].y) * _1741) + (((cbLight._m0[_1706].y * _1669) * _1716) * _1739);
    float _1750 = ((_1702 * cbLight._m0[_1696].z) * _1741) + (((cbLight._m0[_1706].z * _1671) * _1716) * _1739);
    uvec4 _1754 = floatBitsToUint(cbLight._m0[_1678 + 12u]);
    bool _1756 = _1754.x == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1756)
    {
        _1858 = _1748;
        _1860 = _1749;
        _1862 = _1750;
    }
    else
    {
        uint _1866 = _1678 + 6u;
        float _1882 = (dot(vec3(cbLight._m0[_1678 + 2u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _3740 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1885 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1858 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1748;
        _1860 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1749;
        _1862 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1750;
    }
    bool _1865 = _1754.y == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1865)
    {
        _1920 = _1858;
        _1922 = _1860;
        _1924 = _1862;
    }
    else
    {
        uint _2028 = _1678 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1678 + 3u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3756 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _2047 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _1920 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1858;
        _1922 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1860;
        _1924 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1862;
    }
    uint _1926 = _1678 + 8u;
    float _1932 = cbLight._m0[_1678].x + _286;
    float _1933 = cbLight._m0[_1678].y + _287;
    float _1934 = cbLight._m0[_1678].z + _288;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1942 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1678].xyz));
    float _3772 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _1946 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1932 * _1938, _1933 * _1938, _1934 * _1938));
    float _3794 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = (0.5 / ((_1945 + 9.9999999392252902907785028219223e-09) + _1946)) * _1945;
    float _3805 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.31831014156341552734375;
    uint _1980 = _1678 + 9u;
    float _1986 = cbLight._m0[_1720].x + _286;
    float _1987 = cbLight._m0[_1720].y + _287;
    float _1988 = cbLight._m0[_1720].z + _288;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1996 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1720].xyz));
    float _3816 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1986 * _1992, _1987 * _1992, _1988 * _1992));
    float _3827 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = (0.5 / ((_1999 + 9.9999999392252902907785028219223e-09) + _1946)) * _1999;
    float _3838 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.31831014156341552734375;
    float _2025 = (((_2009 * cbLight._m0[_1980].x) * _2015) * _1702) + ((((cbLight._m0[_1926].x * _1667) * _1958) * _1966) * _1716);
    float _2026 = (((_2009 * cbLight._m0[_1980].y) * _2015) * _1702) + ((((cbLight._m0[_1926].y * _1669) * _1958) * _1966) * _1716);
    float _2027 = (((_2009 * cbLight._m0[_1980].z) * _2015) * _1702) + ((((cbLight._m0[_1926].z * _1671) * _1958) * _1966) * _1716);
    float _2083;
    float _2085;
    float _2087;
    if (_1756)
    {
        _2083 = _2025;
        _2085 = _2026;
        _2087 = _2027;
    }
    else
    {
        uint _2089 = _1678 + 10u;
        uint _2095 = _1678 + 2u;
        float _2101 = cbLight._m0[_2095].x + _286;
        float _2102 = cbLight._m0[_2095].y + _287;
        float _2103 = cbLight._m0[_2095].z + _288;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2111 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_2095].xyz));
        float _3849 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2101 * _2107, _2102 * _2107, _2103 * _2107));
        float _3860 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2128 = (0.5 / ((_2114 + 9.9999999392252902907785028219223e-09) + _1946)) * _2114;
        float _3871 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.31831014156341552734375;
        float _2131 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2083 = (((_2124 * cbLight._m0[_2089].x) * _2130) * _2131) + _2025;
        _2085 = (((_2124 * cbLight._m0[_2089].y) * _2130) * _2131) + _2026;
        _2087 = (((_2124 * cbLight._m0[_2089].z) * _2130) * _2131) + _2027;
    }
    float _2162;
    float _2164;
    float _2166;
    if (_1865)
    {
        _2162 = _2083;
        _2164 = _2085;
        _2166 = _2087;
    }
    else
    {
        uint _2173 = _1678 + 11u;
        uint _2179 = _1678 + 3u;
        float _2185 = cbLight._m0[_2179].x + _286;
        float _2186 = cbLight._m0[_2179].y + _287;
        float _2187 = cbLight._m0[_2179].z + _288;
        float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
        float _2195 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_2179].xyz));
        float _3887 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2185 * _2191, _2186 * _2191, _2187 * _2191));
        float _3898 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = (0.5 / ((_2198 + 9.9999999392252902907785028219223e-09) + _1946)) * _2198;
        float _3909 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.31831014156341552734375;
        float _2215 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _2162 = (((_2208 * cbLight._m0[_2173].x) * _2214) * _2215) + _2083;
        _2164 = (((_2208 * cbLight._m0[_2173].y) * _2214) * _2215) + _2085;
        _2166 = (((_2208 * cbLight._m0[_2173].z) * _2214) * _2215) + _2087;
    }
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    if (_1676.y == 0u)
    {
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.x;
        uint _2248 = uint((float(_2236.y) * floor(float(uint(cbSceneParam._m0[85u].y * _308) / _2237))) + floor(float(uint(cbSceneParam._m0[85u].x * _307) / _2237)));
        float _2258 = (log2(_1454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2259 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        uint _2262 = uint(isnan(14.0) ? _2259 : (isnan(_2259) ? 14.0 : min(_2259, 14.0)));
        uvec4 _2267 = texelFetch(g_lightClusterGridBuffer, int(((_2262 << 2u) + (_2248 << 6u)) >> 2u));
        uint _2268 = _2267.x;
        uint _2269 = _2236.z;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((((1u << ((_2269 >> 4u) & 15u)) + 4294967295u) & _2268) == 0u) || ((_2269 & 240u) == 0u))
        {
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
        }
        else
        {
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            uint _2508 = 0u;
            uint _2517;
            bool _2518;
            for (;;)
            {
                _2517 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                _2518 = _2517 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2518)
                {
                    frontier_phi_71_pred = _2507;
                    frontier_phi_71_pred_1 = _2506;
                    frontier_phi_71_pred_2 = _2505;
                    frontier_phi_71_pred_3 = _2504;
                    frontier_phi_71_pred_4 = _2503;
                    frontier_phi_71_pred_5 = _2502;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2517;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2508 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _1452;
                        float _2714 = _2673.y - _1453;
                        float _2715 = _2673.z - _1454;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _3935 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * dot(vec3(_328, _331, _334), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715))) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _1452;
                        float _2749 = (-0.0) - _1453;
                        float _2750 = (-0.0) - _1454;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_328, _331, _334), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _3951 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _3962 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2762 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2766 = (0.5 / (((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) + 9.9999999392252902907785028219223e-09) + _2762)) * _2762;
                        float _3973 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2775 = (((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 3.1415927410125732421875) / ((_2740 * 2.1991131305694580078125) + 3.141590118408203125)) * _2729;
                        _2577 = (_2744 * _2692.x) + _2650;
                        _2578 = (_2744 * _2692.y) + _2651;
                        _2579 = (_2744 * _2692.z) + _2652;
                        _2574 = (_2775 * _2709.x) + _2647;
                        _2575 = (_2775 * _2709.y) + _2648;
                        _2576 = (_2775 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_71_pred = _2579;
                    frontier_phi_71_pred_1 = _2578;
                    frontier_phi_71_pred_2 = _2577;
                    frontier_phi_71_pred_3 = _2576;
                    frontier_phi_71_pred_4 = _2575;
                    frontier_phi_71_pred_5 = _2574;
                }
                _2361 = frontier_phi_71_pred;
                _2359 = frontier_phi_71_pred_1;
                _2357 = frontier_phi_71_pred_2;
                _2355 = frontier_phi_71_pred_3;
                _2353 = frontier_phi_71_pred_4;
                _2351 = frontier_phi_71_pred_5;
                uint _2509 = _2508 + 1u;
                if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2502 = _2351;
                    _2503 = _2353;
                    _2504 = _2355;
                    _2505 = _2357;
                    _2506 = _2359;
                    _2507 = _2361;
                    _2508 = _2509;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
        }
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.z;
        uint _2367 = (_2365 >> 8u) & 15u;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((4294967295u << _2367) & _2268) == 0u)
        {
            _2473 = _2350;
            _2475 = _2352;
            _2477 = _2354;
            _2479 = _2356;
            _2481 = _2358;
            _2483 = _2360;
        }
        else
        {
            float _2498 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2367 < ((_2365 >> 12u) & 15u))
            {
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2630 = _2350;
                float _2631 = _2352;
                float _2632 = _2354;
                float _2633 = _2356;
                float _2634 = _2358;
                float _2635 = _2360;
                uint _2636 = _2367;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2646)
                    {
                        frontier_phi_82_pred = _2635;
                        frontier_phi_82_pred_1 = _2634;
                        frontier_phi_82_pred_2 = _2633;
                        frontier_phi_82_pred_3 = _2632;
                        frontier_phi_82_pred_4 = _2631;
                        frontier_phi_82_pred_5 = _2630;
                    }
                    else
                    {
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _2802 = _2630;
                        float _2803 = _2631;
                        float _2804 = _2632;
                        float _2805 = _2633;
                        float _2806 = _2634;
                        float _2807 = _2635;
                        uint _2808 = _2645;
                        uint _2809;
                        vec4 _2834;
                        float _2835;
                        vec4 _2850;
                        vec3 _2862;
                        vec4 _2878;
                        vec4 _2894;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2819 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2808));
                            _2809 = (_2808 + 4294967295u) & _2808;
                            uint _2821 = _2819 * 40u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            _2835 = _2834.w;
                            uint _2837 = (_2819 * 40u) + 4u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2819 * 40u) + 8u;
                            _2862 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x));
                            uint _2865 = (_2819 * 40u) + 16u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2819 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2819 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2819 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_1454, _2929.z, fma(_1453, _2929.y, _2929.x * _1452)) + _2929.w;
                            _2942 = !((fma(_1454, _2910.z, fma(_1453, _2910.y, _2910.x * _1452)) + _2910.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2834.x - _1452;
                                float _2970 = _2834.y - _1453;
                                float _2971 = _2834.z - _1454;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2835 * _2835));
                                float _3984 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _2987 = sqrt(_2972) * _2850.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2991 = 1.0 - _2990;
                                float _2993 = (_2991 * dot(vec3(_2976, _2977, _2978), vec3(_328, _331, _334))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_1454, _2878.z, fma(_1453, _2878.y, _2878.x * _1452)) + _2878.w) / _2941;
                                float _3001 = (fma(_1454, _2894.z, fma(_1453, _2894.y, _2894.x * _1452)) + _2894.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _4000 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3017 = dot(vec3(_328, _331, _334), vec3((-0.0) - (_1452 * _2498), (-0.0) - (_1453 * _2498), (-0.0) - (_1454 * _2498)));
                                float _4011 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3025 = (_2991 * dot(vec3(_328, _331, _334), vec3(_2976, _2977, _2978))) + _2990;
                                float _4022 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3030 = (0.5 / (((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) + 9.9999999392252902907785028219223e-09) + _3026)) * _3026;
                                float _4033 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3037 = (_3006 * _2983) * (((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 3.1415927410125732421875) / ((_2996 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3007 * _2850.z;
                                frontier_phi_88_pred_1 = _3007 * _2850.y;
                                frontier_phi_88_pred_2 = _3007 * _2850.x;
                                frontier_phi_88_pred_3 = _3037 * _2862.z;
                                frontier_phi_88_pred_4 = _3037 * _2862.y;
                                frontier_phi_88_pred_5 = _3037 * _2862.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3046 = frontier_phi_88_pred;
                            _3045 = frontier_phi_88_pred_1;
                            _3044 = frontier_phi_88_pred_2;
                            _3043 = frontier_phi_88_pred_3;
                            _3042 = frontier_phi_88_pred_4;
                            _3041 = frontier_phi_88_pred_5;
                            _2792 = _3044 + _2805;
                            _2793 = _3045 + _2806;
                            _2794 = _3046 + _2807;
                            _2789 = _3041 + _2802;
                            _2790 = _3042 + _2803;
                            _2791 = _3043 + _2804;
                            if (_2809 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2809;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2794;
                        frontier_phi_82_pred_1 = _2793;
                        frontier_phi_82_pred_2 = _2792;
                        frontier_phi_82_pred_3 = _2791;
                        frontier_phi_82_pred_4 = _2790;
                        frontier_phi_82_pred_5 = _2789;
                    }
                    _2484 = frontier_phi_82_pred;
                    _2482 = frontier_phi_82_pred_1;
                    _2480 = frontier_phi_82_pred_2;
                    _2478 = frontier_phi_82_pred_3;
                    _2476 = frontier_phi_82_pred_4;
                    _2474 = frontier_phi_82_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2474;
                        _2631 = _2476;
                        _2632 = _2478;
                        _2633 = _2480;
                        _2634 = _2482;
                        _2635 = _2484;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2480;
                frontier_phi_63_64_ladder_1 = _2484;
                frontier_phi_63_64_ladder_2 = _2482;
                frontier_phi_63_64_ladder_3 = _2478;
                frontier_phi_63_64_ladder_4 = _2476;
                frontier_phi_63_64_ladder_5 = _2474;
            }
            else
            {
                frontier_phi_63_64_ladder = _2356;
                frontier_phi_63_64_ladder_1 = _2360;
                frontier_phi_63_64_ladder_2 = _2358;
                frontier_phi_63_64_ladder_3 = _2354;
                frontier_phi_63_64_ladder_4 = _2352;
                frontier_phi_63_64_ladder_5 = _2350;
            }
            _2473 = frontier_phi_63_64_ladder_5;
            _2475 = frontier_phi_63_64_ladder_4;
            _2477 = frontier_phi_63_64_ladder_3;
            _2479 = frontier_phi_63_64_ladder;
            _2481 = frontier_phi_63_64_ladder_2;
            _2483 = frontier_phi_63_64_ladder_1;
        }
        float _2488 = isnan(1.0) ? _373 : (isnan(_373) ? 1.0 : min(_373, 1.0));
        _2281 = (_2488 * _2479) + _1920;
        _2283 = (_2488 * _2481) + _1922;
        _2285 = (_2488 * _2483) + _1924;
        _2287 = ((_2473 * 0.039999999105930328369140625) * _2488) + _2162;
        _2289 = ((_2475 * 0.039999999105930328369140625) * _2488) + _2164;
        _2291 = ((_2477 * 0.039999999105930328369140625) * _2488) + _2166;
    }
    else
    {
        _2281 = _1920;
        _2283 = _1922;
        _2285 = _1924;
        _2287 = _2162;
        _2289 = _2164;
        _2291 = _2166;
    }
    float _4049 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _4060 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _4071 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _4082 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _2309 = ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2281 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _373))) + ((_2287 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2310 = ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2283 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _373))) + ((_2289 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2311 = ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2285 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _373))) + ((_2291 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2316 = cbInstanceData._m0[_347 + 6u].w * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)));
    float _2321 = _307 / cbSceneParam._m0[86u].x;
    float _2322 = _308 / cbSceneParam._m0[86u].y;
    vec4 _2336 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, (log2((isnan(cbSceneParam._m0[77u].w) ? _227 : (isnan(_227) ? cbSceneParam._m0[77u].w : min(_227, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2338 = _2336.x;
    float _2339 = _2336.y;
    float _2340 = _2336.z;
    float _2341 = _2336.w;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_227 > cbSceneParam._m0[78u].w)
    {
        float _2375 = isnan(_227) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _227 : min(cbSceneParam._m0[80u].w, _227));
        float _2376 = _2375 / _227;
        float _2387 = _2376 * _279;
        float _2388 = _280 * _2376;
        float _2389 = (-0.0) - _2388;
        float _2391 = _2376 * _281;
        float _2393 = (cbSceneParam._m0[77u].w * _2389) / _2375;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2388;
        float _2401 = sqrt(((_2387 * _2387) + (_2388 * _2388)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2375)) * _2401;
        float _2409 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2389 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2394 > 0.0) ? exp2(_2409 * _2394) : (2.0 - exp2(_2411 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2531 = 1.0 / cbSceneParam._m0[80u].x;
            float _2532 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2533 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            _2587 = ((abs(_2401 / _2389) * cbSceneParam._m0[80u].y) * ((((_2542 - _2543) * 2.0) - ((exp2(_2409 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)))) - exp2(_2409 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))))) * _2531)) - ((exp2(_2411 * _2542) - exp2(_2411 * _2543)) * _2531))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2341);
        _2413 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2338;
        _2415 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2339;
        _2417 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2340;
        _2419 = _2598 * _2341;
    }
    else
    {
        _2413 = _2338;
        _2415 = _2339;
        _2417 = _2340;
        _2419 = _2341;
    }
    bool _2625;
    vec4 _2429;
    vec4 _2452;
    float _2454;
    float _2458;
    float _2459;
    float _2460;
    float _2461;
    bool _2472;
    for (;;)
    {
        _2429 = cbMatDynParam._m0[0u];
        float _2431 = roundEven(_2429.y);
        bool _2432 = _2431 == 3.0;
        float _2434 = log2(_2419);
        float _2441 = exp2(_2434 * cbSceneParam._m0[78u].x) * _2309;
        float _2442 = exp2(_2434 * cbSceneParam._m0[78u].y) * _2310;
        float _2443 = exp2(_2434 * cbSceneParam._m0[78u].z) * _2311;
        float _2450 = _295 + (-0.5);
        _2452 = cbMtdParam._m0[1u];
        _2454 = _2452.y * _2450;
        float _2457 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2458 = _2457 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2413)));
        _2459 = _2457 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2415)));
        _2460 = _2457 * (_2432 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2417)));
        _2461 = _2450 * 0.999000012874603271484375;
        _2472 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2472)
        {
            if ((cbInstanceData._m0[_347 + 7u].x + _2461) < 0.5)
            {
                _2625 = true;
                break;
            }
        }
        uint _2566 = _349 + uint(_2429.w);
        if ((cbInstanceData._m0[_2566].w < 1.0) && ((cbInstanceData._m0[_2566].w + _2461) < 0.5))
        {
            _2625 = true;
            break;
        }
        if ((_2454 + _195) < _2452.x)
        {
            _2625 = true;
            break;
        }
        _2625 = false;
        break;
    }
    float _2780;
    if (_2625)
    {
        discard_state = true;
        _2780 = 0.0;
    }
    else
    {
        _2780 = _2316;
    }
    SV_Target.x = _2458;
    SV_Target.y = _2459;
    SV_Target.z = _2460;
    SV_Target.w = _2780;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2316;
    discard_exit();
}


