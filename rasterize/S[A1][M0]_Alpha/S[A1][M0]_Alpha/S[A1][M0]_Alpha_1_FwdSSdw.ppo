#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _693;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    vec4 _183 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _187 = _183.w * TEXCOORD_1.z;
    float _191 = inversesqrt(dot(vec3(_161, _162, _163), vec3(_161, _162, _163)));
    float _192 = _191 * _161;
    float _193 = _191 * _162;
    float _194 = _191 * _163;
    float _2829 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _196 = isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0));
    float _2840 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2851 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2862 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _273 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _274 = _267 * _273;
    float _275 = _268 * _273;
    float _276 = _269 * _273;
    float _282 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _283 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _304 = fma(_194, cbSceneParam._m0[5u].z, fma(_193, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _192));
    float _307 = fma(_194, cbSceneParam._m0[6u].z, fma(_193, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _192));
    float _310 = fma(_194, cbSceneParam._m0[7u].z, fma(_193, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _192));
    uint _323 = uint(roundEven(NORMAL.w)) * 13u;
    uint _326 = (_323 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _332 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0)))) * cbInstanceData._m0[_326].x;
    float _333 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0)))) * cbInstanceData._m0[_326].y;
    float _334 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0)))) * cbInstanceData._m0[_326].z;
    float _2873 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _335 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    float _2884 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _336 = isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0));
    float _2895 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _337 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
    vec4 _346 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _282, cbSceneParam._m0[86u].y * _283));
    float _349 = _346.x * TEXCOORD_1.w;
    float _350 = dot(vec3(_192, _193, _194), vec3(_274, _275, _276));
    float _353 = _350 * 2.0;
    float _358 = (_353 * _192) - _274;
    float _359 = (_353 * _193) - _275;
    float _360 = (_353 * _194) - _276;
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _692;
    float _694;
    float _695;
    float _696;
    float _697;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _417 = fma(_390, cbModelParam._m0[26u].z, fma(_386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _382));
        float _421 = fma(_390, cbModelParam._m0[27u].z, fma(_386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _382));
        float _425 = fma(_390, cbModelParam._m0[28u].z, fma(_386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _382));
        float _450 = _382 + _192;
        float _451 = _386 + _193;
        float _452 = _390 + _194;
        float _462 = fma(_452, cbModelParam._m0[26u].z, fma(_451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _450)) - _417;
        float _463 = fma(_452, cbModelParam._m0[27u].z, fma(_451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _450)) - _421;
        float _464 = fma(_452, cbModelParam._m0[28u].z, fma(_451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _450)) - _425;
        float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
        float _481 = ((_468 * _462) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_417 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _482 = ((_468 * _463) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_421 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _483 = ((_468 * _464) / cbModelParam._m0[34u].z) + ((((((_425 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _486 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _493 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _500 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _507 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        float _520 = exp2((_486.w + (-0.5)) * 20.0) * 2.0;
        float _521 = _520 * (_486.x + (-0.5));
        float _522 = _520 * (_486.y + (-0.5));
        float _523 = _520 * (_486.z + (-0.5));
        float _530 = exp2((_493.w + (-0.5)) * 20.0) * 2.0;
        float _531 = _530 * (_493.x + (-0.5));
        float _532 = _530 * (_493.y + (-0.5));
        float _533 = _530 * (_493.z + (-0.5));
        float _540 = exp2((_500.w + (-0.5)) * 20.0) * 2.0;
        float _541 = _540 * (_500.x + (-0.5));
        float _542 = _540 * (_500.y + (-0.5));
        float _543 = _540 * (_500.z + (-0.5));
        float _550 = exp2((_507.w + (-0.5)) * 20.0) * 2.0;
        float _551 = _550 * (_507.x + (-0.5));
        float _552 = _550 * (_507.y + (-0.5));
        float _553 = _550 * (_507.z + (-0.5));
        float _554 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _555 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        float _556 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _557 = _521 * 0.5;
        float _558 = _531 * 0.5;
        float _559 = _541 * 0.5;
        float _560 = dot(vec3(_557, _558, _559), vec3(_557, _558, _559));
        float _565 = (_560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_560);
        float _574 = (dot(vec3(_192, _193, _194), vec3(_565 * _557, _565 * _558, _565 * _559)) + 1.0) * 0.5;
        float _2921 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _584 = sqrt(((_558 * _558) + (_557 * _557)) + (_559 * _559)) / (_554 + 9.9999997473787516355514526367188e-06);
        float _2932 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _585 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
        float _586 = _585 * 2.0;
        float _590 = (1.0 - _585) / (_585 + 1.0);
        float _2943 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
        float _600 = ((((1.0 - _591) * (_586 + 2.0)) * exp2(log2(isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0))) * (_586 + 1.0))) + _591) * _554;
        float _601 = _522 * 0.5;
        float _602 = _532 * 0.5;
        float _603 = _542 * 0.5;
        float _604 = dot(vec3(_601, _602, _603), vec3(_601, _602, _603));
        float _609 = (_604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_604);
        float _617 = (dot(vec3(_192, _193, _194), vec3(_609 * _601, _609 * _602, _609 * _603)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _626 = sqrt(((_602 * _602) + (_601 * _601)) + (_603 * _603)) / (_555 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _628 = _627 * 2.0;
        float _632 = (1.0 - _627) / (_627 + 1.0);
        float _2976 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _642 = ((((1.0 - _633) * (_628 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_628 + 1.0))) + _633) * _555;
        float _643 = _523 * 0.5;
        float _644 = _533 * 0.5;
        float _645 = _543 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _659 = (dot(vec3(_192, _193, _194), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _2987 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _668 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_556 + 9.9999997473787516355514526367188e-06);
        float _2998 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3009 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * (_670 + 1.0))) + _675) * _556;
        _692 = _523;
        _694 = _522;
        _695 = _521;
        _696 = _533;
        _697 = _532;
        _698 = _531;
        _699 = _543;
        _700 = _542;
        _701 = _541;
        _702 = _556;
        _703 = _555;
        _704 = _554;
        _705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0)));
        _706 = cbModelParam._m0[36u].z * (isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0)));
        _707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
    }
    else
    {
        _692 = _693;
        _694 = _693;
        _695 = _693;
        _696 = _693;
        _697 = _693;
        _698 = _693;
        _699 = _693;
        _700 = _693;
        _701 = _693;
        _702 = _693;
        _703 = _693;
        _704 = _693;
        _705 = 0.0;
        _706 = 0.0;
        _707 = 0.0;
    }
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _733 = fma(_390, cbModelParam._m0[30u].z, fma(_386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _382));
        float _737 = fma(_390, cbModelParam._m0[31u].z, fma(_386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _382));
        float _741 = fma(_390, cbModelParam._m0[32u].z, fma(_386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _382));
        float _764 = _382 + _192;
        float _765 = _386 + _193;
        float _766 = _390 + _194;
        float _776 = fma(_766, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764)) - _733;
        float _777 = fma(_766, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764)) - _737;
        float _778 = fma(_766, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764)) - _741;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_733 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_737 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[35u].z) + ((((((_741 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _832 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_799.x + (-0.5));
        float _834 = _832 * (_799.y + (-0.5));
        float _835 = _832 * (_799.z + (-0.5));
        float _842 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_806.x + (-0.5));
        float _844 = _842 * (_806.y + (-0.5));
        float _845 = _842 * (_806.z + (-0.5));
        float _852 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_813.x + (-0.5));
        float _854 = _852 * (_813.y + (-0.5));
        float _855 = _852 * (_813.z + (-0.5));
        float _862 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_820.x + (-0.5));
        float _864 = _862 * (_820.y + (-0.5));
        float _865 = _862 * (_820.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_192, _193, _194), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3050 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3061 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3072 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_896 + 1.0))) + _901) * _866;
        float _911 = _834 * 0.5;
        float _912 = _844 * 0.5;
        float _913 = _854 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_192, _193, _194), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3105 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_938 + 1.0))) + _943) * _867;
        float _953 = _835 * 0.5;
        float _954 = _845 * 0.5;
        float _955 = _855 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_192, _193, _194), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3138 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_980 + 1.0))) + _985) * _868;
        _1002 = _835;
        _1003 = _834;
        _1004 = _833;
        _1005 = _845;
        _1006 = _844;
        _1007 = _843;
        _1008 = _855;
        _1009 = _854;
        _1010 = _853;
        _1011 = _868;
        _1012 = _867;
        _1013 = _866;
        _1014 = cbModelParam._m0[36u].w * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1015 = cbModelParam._m0[36u].w * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _693;
        _1003 = _693;
        _1004 = _693;
        _1005 = _693;
        _1006 = _693;
        _1007 = _693;
        _1008 = _693;
        _1009 = _693;
        _1010 = _693;
        _1011 = _693;
        _1012 = _693;
        _1013 = _693;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1026 = (cbModelParam._m0[1u].x * (_1014 - _705)) + _705;
    float _1027 = (cbModelParam._m0[1u].x * (_1015 - _706)) + _706;
    float _1028 = (cbModelParam._m0[1u].x * (_1016 - _707)) + _707;
    float _1049 = fma(_1028, cbSceneParam._m0[89u].z, fma(_1027, cbSceneParam._m0[89u].y, _1026 * cbSceneParam._m0[89u].x));
    float _1052 = fma(_1028, cbSceneParam._m0[90u].z, fma(_1027, cbSceneParam._m0[90u].y, _1026 * cbSceneParam._m0[90u].x));
    float _1055 = fma(_1028, cbSceneParam._m0[91u].z, fma(_1027, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1026));
    float _1070 = _358 * 0.5;
    float _1071 = _359 * 0.5;
    float _1072 = _360 * 0.5;
    float _1073 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1004, _1007, _1010, _1013));
    float _1076 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1003, _1006, _1009, _1012));
    float _1079 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1002, _1005, _1008, _1011));
    float _1113;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1086 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_692, _696, _699, _702));
        float _1090 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_694, _697, _700, _703));
        float _1094 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_695, _698, _701, _704));
        float _1101 = dot(vec4(cbModelParam._m0[39u]), vec4(_1070, _1071, _1072, 1.0));
        _1113 = dot(vec3(isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)), isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1101) ? 0.0 : (isnan(0.0) ? _1101 : max(0.0, _1101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1113 = 1.0;
    }
    float _1124;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1115 = dot(vec4(cbModelParam._m0[40u]), vec4(_1070, _1071, _1072, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)), isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)), isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1115) ? 0.0 : (isnan(0.0) ? _1115 : max(0.0, _1115))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1128 = (_1124 * cbModelParam._m0[1u].x) + (_1113 * (1.0 - cbModelParam._m0[1u].x));
    float _1137 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1219;
    float _1221;
    float _1223;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1186 = fma(_390, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _382)) + cbModelParam._m0[13u].w;
        float _1190 = fma(_390, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _382)) + cbModelParam._m0[14u].w;
        float _1194 = fma(_390, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _382)) + cbModelParam._m0[15u].w;
        float _1197 = fma(_360, cbModelParam._m0[13u].z, fma(_359, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _358));
        float _1200 = fma(_360, cbModelParam._m0[14u].z, fma(_359, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _358));
        float _1203 = fma(_360, cbModelParam._m0[15u].z, fma(_359, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _358));
        float _1229;
        if (_1197 > 0.0)
        {
            _1229 = abs((1.0 - _1186) / _1197);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1197 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1186 + 1.0) / _1197);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1229 = frontier_phi_14_12_ladder;
        }
        float _1458;
        if (_1200 > 0.0)
        {
            _1458 = abs((1.0 - _1190) / _1200);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1200 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1190 + 1.0) / _1200);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1458 = frontier_phi_23_19_ladder;
        }
        float _1650;
        if (_1203 > 0.0)
        {
            _1650 = abs((1.0 - _1194) / _1203);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1203 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1194 + 1.0) / _1203);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1650 = frontier_phi_35_30_ladder;
        }
        float _1652 = isnan(_1458) ? _1229 : (isnan(_1229) ? _1458 : min(_1229, _1458));
        float _1653 = isnan(_1650) ? _1652 : (isnan(_1652) ? _1650 : min(_1652, _1650));
        float _1657 = (_1653 * _1197) + _1186;
        float _1658 = (_1653 * _1200) + _1190;
        float _1659 = (_1653 * _1203) + _1194;
        float _1660 = _1653 * 9.9999997473787516355514526367188e-05;
        float _1662 = (-1.0) - _1660;
        float _1664 = _1660 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1659 > _1664) || ((_1659 < _1662) || ((_1658 > _1664) || ((_1658 < _1662) || ((_1657 < _1662) || (_1657 > _1664))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1659, cbModelParam._m0[9u].z, fma(_1658, cbModelParam._m0[9u].y, _1657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1659, cbModelParam._m0[10u].z, fma(_1658, cbModelParam._m0[10u].y, _1657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1659, cbModelParam._m0[11u].z, fma(_1658, cbModelParam._m0[11u].y, _1657 * cbModelParam._m0[11u].x))), _1137);
            frontier_phi_13_35_ladder = _1756.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1756.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1756.x * cbModelParam._m0[1u].y;
        }
        _1219 = frontier_phi_13_35_ladder_2;
        _1221 = frontier_phi_13_35_ladder_1;
        _1223 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_358, _359, _360), _1137);
        _1219 = _1207.x * cbModelParam._m0[1u].y;
        _1221 = _1207.y * cbModelParam._m0[1u].y;
        _1223 = _1207.z * cbModelParam._m0[1u].y;
    }
    float _1226 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1319;
    float _1321;
    float _1323;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1283 = fma(_390, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _382)) + cbModelParam._m0[21u].w;
        float _1287 = fma(_390, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _382)) + cbModelParam._m0[22u].w;
        float _1291 = fma(_390, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _382)) + cbModelParam._m0[23u].w;
        float _1294 = fma(_360, cbModelParam._m0[21u].z, fma(_359, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _358));
        float _1297 = fma(_360, cbModelParam._m0[22u].z, fma(_359, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _358));
        float _1300 = fma(_360, cbModelParam._m0[23u].z, fma(_359, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _358));
        float _1463;
        if (_1294 > 0.0)
        {
            _1463 = abs((1.0 - _1283) / _1294);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1283 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1463 = frontier_phi_25_21_ladder;
        }
        float _1677;
        if (_1297 > 0.0)
        {
            _1677 = abs((1.0 - _1287) / _1297);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1287 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1677 = frontier_phi_37_32_ladder;
        }
        float _1828;
        if (_1300 > 0.0)
        {
            _1828 = abs((1.0 - _1291) / _1300);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1291 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1828 = frontier_phi_46_43_ladder;
        }
        float _1830 = isnan(_1677) ? _1463 : (isnan(_1463) ? _1677 : min(_1463, _1677));
        float _1831 = isnan(_1828) ? _1830 : (isnan(_1830) ? _1828 : min(_1830, _1828));
        float _1835 = (_1831 * _1294) + _1283;
        float _1836 = (_1831 * _1297) + _1287;
        float _1837 = (_1831 * _1300) + _1291;
        float _1838 = _1831 * 9.9999997473787516355514526367188e-05;
        float _1839 = (-1.0) - _1838;
        float _1841 = _1838 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1837 > _1841) || ((_1837 < _1839) || ((_1836 > _1841) || ((_1836 < _1839) || ((_1835 < _1839) || (_1835 > _1841))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1837, cbModelParam._m0[17u].z, fma(_1836, cbModelParam._m0[17u].y, _1835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1837, cbModelParam._m0[18u].z, fma(_1836, cbModelParam._m0[18u].y, _1835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1837, cbModelParam._m0[19u].z, fma(_1836, cbModelParam._m0[19u].y, _1835 * cbModelParam._m0[19u].x))), _1226);
            frontier_phi_22_46_ladder = _2038.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2038.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2038.x * cbModelParam._m0[1u].z;
        }
        _1319 = frontier_phi_22_46_ladder_2;
        _1321 = frontier_phi_22_46_ladder_1;
        _1323 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_358, _359, _360), _1226);
        _1319 = _1303.x * cbModelParam._m0[1u].z;
        _1321 = _1303.y * cbModelParam._m0[1u].z;
        _1323 = _1303.z * cbModelParam._m0[1u].z;
    }
    float _1335 = _349 * 0.01200000010430812835693359375;
    float _1337 = _1335 * ((cbModelParam._m0[1u].w * (_1319 - _1219)) + _1219);
    float _1338 = _1335 * ((cbModelParam._m0[1u].w * (_1321 - _1221)) + _1221);
    float _1339 = _1335 * ((cbModelParam._m0[1u].w * (_1323 - _1223)) + _1223);
    float _1342 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, _1337 * cbSceneParam._m0[91u].x));
    vec4 _1356 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_282, _283));
    float _1358 = _1356.w;
    float _1370 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1358);
    float _1371 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1358);
    float _1372 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1358);
    uvec4 _1376 = floatBitsToUint(cbInstanceData._m0[_323 + 5u]);
    uint _1378 = _1376.x * 14u;
    uint _1379 = _1378 + 13u;
    float _1386 = _349 + (-1.0);
    float _1392 = (cbLight._m0[_1379].x * _1386) + 1.0;
    float _1393 = (cbLight._m0[_1379].y * _1386) + 1.0;
    float _1394 = (cbLight._m0[_1379].z * _1386) + 1.0;
    float _1395 = (cbLight._m0[_1379].w * _1386) + 1.0;
    uint _1396 = _1378 + 5u;
    float _1402 = isnan(1.0) ? _1393 : (isnan(_1393) ? 1.0 : min(_1393, 1.0));
    uint _1406 = _1378 + 4u;
    float _1416 = isnan(1.0) ? _1392 : (isnan(_1392) ? 1.0 : min(_1392, 1.0));
    uint _1420 = _1378 | 1u;
    float _1431 = dot(vec3(cbLight._m0[_1378].xyz), vec3(_192, _193, _194));
    float _1434 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_192, _193, _194));
    float _3274 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _3285 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
    float _1439 = (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * 0.3183098733425140380859375;
    float _1441 = (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * 0.3183098733425140380859375;
    float _1448 = ((cbLight._m0[_1396].x * _1402) * _1441) + (((cbLight._m0[_1406].x * _1370) * _1416) * _1439);
    float _1449 = ((_1402 * cbLight._m0[_1396].y) * _1441) + (((cbLight._m0[_1406].y * _1371) * _1416) * _1439);
    float _1450 = ((_1402 * cbLight._m0[_1396].z) * _1441) + (((cbLight._m0[_1406].z * _1372) * _1416) * _1439);
    uvec4 _1455 = floatBitsToUint(cbLight._m0[_1378 + 12u]);
    bool _1457 = _1455.x == 0u;
    float _1468;
    float _1470;
    float _1472;
    if (_1457)
    {
        _1468 = _1448;
        _1470 = _1449;
        _1472 = _1450;
    }
    else
    {
        uint _1476 = _1378 + 6u;
        float _1492 = (dot(vec3(cbLight._m0[_1378 + 2u].xyz), vec3(_192, _193, _194)) * 0.5) + 0.5;
        float _1493 = _1492 * _1492;
        float _3296 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _1495 = isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0));
        _1468 = (((cbLight._m0[_1476].x * 0.3183098733425140380859375) * _1494) * _1495) + _1448;
        _1470 = (((cbLight._m0[_1476].y * 0.3183098733425140380859375) * _1494) * _1495) + _1449;
        _1472 = (((cbLight._m0[_1476].z * 0.3183098733425140380859375) * _1494) * _1495) + _1450;
    }
    bool _1475 = _1455.y == 0u;
    float _1513;
    float _1515;
    float _1517;
    if (_1475)
    {
        _1513 = _1468;
        _1515 = _1470;
        _1517 = _1472;
    }
    else
    {
        uint _1621 = _1378 + 7u;
        float _1637 = (dot(vec3(cbLight._m0[_1378 + 3u].xyz), vec3(_192, _193, _194)) * 0.5) + 0.5;
        float _1638 = _1637 * _1637;
        float _3312 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1640 = isnan(1.0) ? _1395 : (isnan(_1395) ? 1.0 : min(_1395, 1.0));
        _1513 = (((cbLight._m0[_1621].x * 0.3183098733425140380859375) * _1639) * _1640) + _1468;
        _1515 = (((cbLight._m0[_1621].y * 0.3183098733425140380859375) * _1639) * _1640) + _1470;
        _1517 = (((cbLight._m0[_1621].z * 0.3183098733425140380859375) * _1639) * _1640) + _1472;
    }
    uint _1519 = _1378 + 8u;
    float _1525 = cbLight._m0[_1378].x + _274;
    float _1526 = cbLight._m0[_1378].y + _275;
    float _1527 = cbLight._m0[_1378].z + _276;
    float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
    float _1535 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1378].xyz));
    float _3328 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _1538 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _1539 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _1540 = dot(vec3(cbLight._m0[_1378].xyz), vec3(_1525 * _1531, _1526 * _1531, _1527 * _1531));
    float _3350 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1551 = (exp2(log2(1.0 - (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1557 = (0.5 / ((_1538 + 9.9999999392252902907785028219223e-09) + _1539)) * _1538;
    float _3361 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1559 = (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.31831014156341552734375;
    uint _1573 = _1378 + 9u;
    float _1579 = cbLight._m0[_1420].x + _274;
    float _1580 = cbLight._m0[_1420].y + _275;
    float _1581 = cbLight._m0[_1420].z + _276;
    float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
    float _1589 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1420].xyz));
    float _3372 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1592 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _1593 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_1579 * _1585, _1580 * _1585, _1581 * _1585));
    float _3383 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1602 = (exp2(log2(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1606 = (0.5 / ((_1592 + 9.9999999392252902907785028219223e-09) + _1539)) * _1592;
    float _3394 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1608 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.31831014156341552734375;
    float _1618 = (((_1602 * cbLight._m0[_1573].x) * _1608) * _1402) + ((((cbLight._m0[_1519].x * _1370) * _1551) * _1559) * _1416);
    float _1619 = (((_1602 * cbLight._m0[_1573].y) * _1608) * _1402) + ((((cbLight._m0[_1519].y * _1371) * _1551) * _1559) * _1416);
    float _1620 = (((_1602 * cbLight._m0[_1573].z) * _1608) * _1402) + ((((cbLight._m0[_1519].z * _1372) * _1551) * _1559) * _1416);
    float _1682;
    float _1684;
    float _1686;
    if (_1457)
    {
        _1682 = _1618;
        _1684 = _1619;
        _1686 = _1620;
    }
    else
    {
        uint _1688 = _1378 + 10u;
        uint _1694 = _1378 + 2u;
        float _1700 = cbLight._m0[_1694].x + _274;
        float _1701 = cbLight._m0[_1694].y + _275;
        float _1702 = cbLight._m0[_1694].z + _276;
        float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
        float _1710 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1694].xyz));
        float _3405 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1713 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1714 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1700 * _1706, _1701 * _1706, _1702 * _1706));
        float _3416 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = (exp2(log2(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1727 = (0.5 / ((_1713 + 9.9999999392252902907785028219223e-09) + _1539)) * _1713;
        float _3427 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1729 = (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 0.31831014156341552734375;
        float _1730 = isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0));
        _1682 = (((_1723 * cbLight._m0[_1688].x) * _1729) * _1730) + _1618;
        _1684 = (((_1723 * cbLight._m0[_1688].y) * _1729) * _1730) + _1619;
        _1686 = (((_1723 * cbLight._m0[_1688].z) * _1729) * _1730) + _1620;
    }
    float _1765;
    float _1767;
    float _1769;
    if (_1475)
    {
        _1765 = _1682;
        _1767 = _1684;
        _1769 = _1686;
    }
    else
    {
        uint _1776 = _1378 + 11u;
        uint _1782 = _1378 + 3u;
        float _1788 = cbLight._m0[_1782].x + _274;
        float _1789 = cbLight._m0[_1782].y + _275;
        float _1790 = cbLight._m0[_1782].z + _276;
        float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
        float _1798 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1782].xyz));
        float _3443 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1801 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1802 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1788 * _1794, _1789 * _1794, _1790 * _1794));
        float _3454 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = (exp2(log2(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1815 = (0.5 / ((_1801 + 9.9999999392252902907785028219223e-09) + _1539)) * _1801;
        float _3465 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1817 = (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.31831014156341552734375;
        float _1818 = isnan(1.0) ? _1395 : (isnan(_1395) ? 1.0 : min(_1395, 1.0));
        _1765 = (((_1811 * cbLight._m0[_1776].x) * _1817) * _1818) + _1682;
        _1767 = (((_1811 * cbLight._m0[_1776].y) * _1817) * _1818) + _1684;
        _1769 = (((_1811 * cbLight._m0[_1776].z) * _1817) * _1818) + _1686;
    }
    float _1953;
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    if (_1376.y == 0u)
    {
        float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1893;
        float _1895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1893;
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1893;
        uvec4 _1908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1909 = _1908.x;
        uint _1920 = uint((float(_1908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _283) / _1909))) + floor(float(uint(cbSceneParam._m0[85u].x * _282) / _1909)));
        float _1930 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1931 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        uint _1934 = uint(isnan(14.0) ? _1931 : (isnan(_1931) ? 14.0 : min(_1931, 14.0)));
        uvec4 _1939 = texelFetch(g_lightClusterGridBuffer, int(((_1934 << 2u) + (_1920 << 6u)) >> 2u));
        uint _1940 = _1939.x;
        uint _1941 = _1908.z;
        float _2043;
        float _2045;
        float _2047;
        float _2049;
        float _2051;
        float _2053;
        if (((((1u << ((_1941 >> 4u) & 15u)) + 4294967295u) & _1940) == 0u) || ((_1941 & 240u) == 0u))
        {
            _2043 = 0.0;
            _2045 = 0.0;
            _2047 = 0.0;
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
        }
        else
        {
            float _2044;
            float _2046;
            float _2048;
            float _2050;
            float _2052;
            float _2054;
            float _2186 = 0.0;
            float _2187 = 0.0;
            float _2188 = 0.0;
            float _2189 = 0.0;
            float _2190 = 0.0;
            float _2191 = 0.0;
            uint _2192 = 0u;
            uint _2201;
            bool _2202;
            for (;;)
            {
                _2201 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2192 << 2u)) >> 2u)).x;
                _2202 = _2201 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2202)
                {
                    frontier_phi_61_pred = _2186;
                    frontier_phi_61_pred_1 = _2191;
                    frontier_phi_61_pred_2 = _2190;
                    frontier_phi_61_pred_3 = _2189;
                    frontier_phi_61_pred_4 = _2188;
                    frontier_phi_61_pred_5 = _2187;
                }
                else
                {
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    uint _2316;
                    _2310 = _2186;
                    _2311 = _2187;
                    _2312 = _2188;
                    _2313 = _2189;
                    _2314 = _2190;
                    _2315 = _2191;
                    _2316 = _2201;
                    float _2242;
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    float _2247;
                    for (;;)
                    {
                        uint _2320 = uint(findLSB(_2316)) + (_2192 << 5u);
                        uint _2317 = (_2316 + 4294967295u) & _2316;
                        uint _2322 = _2320 * 48u;
                        vec4 _2336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2322)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 3u)).x));
                        uint _2342 = (_2320 * 48u) + 4u;
                        vec4 _2355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2342)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 3u)).x));
                        uint _2361 = (_2320 * 48u) + 8u;
                        vec3 _2372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2361)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 2u)).x));
                        float _2376 = _2336.x - _1894;
                        float _2377 = _2336.y - _1895;
                        float _2378 = _2336.z - _1896;
                        float _2379 = dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378));
                        float _2382 = inversesqrt(_2379);
                        float _2391 = 1.0 - (_2379 * _2336.w);
                        float _3491 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
                        float _2392 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
                        float _2393 = sqrt(_2379) * _2355.w;
                        float _2396 = 1.39999997615814208984375 / (_2393 + 1.39999997615814208984375);
                        float _2397 = _2396 * _2396;
                        float _2400 = ((1.0 - _2397) * dot(vec3(_304, _307, _310), vec3(_2382 * _2376, _2382 * _2377, _2382 * _2378))) + _2397;
                        float _2403 = _2393 * _2393;
                        float _2407 = ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2392) / ((_2403 * 0.699999988079071044921875) + 1.0);
                        float _2411 = (-0.0) - _1894;
                        float _2412 = (-0.0) - _1895;
                        float _2413 = (-0.0) - _1896;
                        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
                        float _2421 = dot(vec3(_304, _307, _310), vec3(_2417 * _2411, _2417 * _2412, _2417 * _2413));
                        float _3507 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                        float _3518 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
                        float _2425 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
                        float _2429 = (0.5 / (((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) + 9.9999999392252902907785028219223e-09) + _2425)) * _2425;
                        float _3529 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
                        float _2438 = (((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 3.1415927410125732421875) / ((_2403 * 2.1991131305694580078125) + 3.141590118408203125)) * _2392;
                        _2245 = (_2407 * _2355.x) + _2313;
                        _2246 = (_2407 * _2355.y) + _2314;
                        _2247 = (_2407 * _2355.z) + _2315;
                        _2242 = (_2438 * _2372.x) + _2310;
                        _2243 = (_2438 * _2372.y) + _2311;
                        _2244 = (_2438 * _2372.z) + _2312;
                        if (_2317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2310 = _2242;
                            _2311 = _2243;
                            _2312 = _2244;
                            _2313 = _2245;
                            _2314 = _2246;
                            _2315 = _2247;
                            _2316 = _2317;
                        }
                    }
                    frontier_phi_61_pred = _2242;
                    frontier_phi_61_pred_1 = _2247;
                    frontier_phi_61_pred_2 = _2246;
                    frontier_phi_61_pred_3 = _2245;
                    frontier_phi_61_pred_4 = _2244;
                    frontier_phi_61_pred_5 = _2243;
                }
                _2044 = frontier_phi_61_pred;
                _2054 = frontier_phi_61_pred_1;
                _2052 = frontier_phi_61_pred_2;
                _2050 = frontier_phi_61_pred_3;
                _2048 = frontier_phi_61_pred_4;
                _2046 = frontier_phi_61_pred_5;
                uint _2193 = _2192 + 1u;
                if (_2193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2186 = _2044;
                    _2187 = _2046;
                    _2188 = _2048;
                    _2189 = _2050;
                    _2190 = _2052;
                    _2191 = _2054;
                    _2192 = _2193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2043 = _2044;
            _2045 = _2046;
            _2047 = _2048;
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
        }
        uvec4 _2057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2058 = _2057.z;
        uint _2060 = (_2058 >> 8u) & 15u;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        if (((4294967295u << _2060) & _1940) == 0u)
        {
            _2157 = _2043;
            _2159 = _2045;
            _2161 = _2047;
            _2163 = _2049;
            _2165 = _2051;
            _2167 = _2053;
        }
        else
        {
            float _2182 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2060 < ((_2058 >> 12u) & 15u))
            {
                float _2158;
                float _2160;
                float _2162;
                float _2164;
                float _2166;
                float _2168;
                float _2293 = _2043;
                float _2294 = _2045;
                float _2295 = _2047;
                float _2296 = _2049;
                float _2297 = _2051;
                float _2298 = _2053;
                uint _2299 = _2060;
                uint _2308;
                bool _2309;
                for (;;)
                {
                    _2308 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2299 << 2u)) >> 2u)).x;
                    _2309 = _2308 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2309)
                    {
                        frontier_phi_67_pred = _2296;
                        frontier_phi_67_pred_1 = _2297;
                        frontier_phi_67_pred_2 = _2298;
                        frontier_phi_67_pred_3 = _2295;
                        frontier_phi_67_pred_4 = _2294;
                        frontier_phi_67_pred_5 = _2293;
                    }
                    else
                    {
                        float _2443;
                        float _2444;
                        float _2445;
                        float _2446;
                        float _2447;
                        float _2448;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2456 = _2293;
                        float _2457 = _2294;
                        float _2458 = _2295;
                        float _2459 = _2296;
                        float _2460 = _2297;
                        float _2461 = _2298;
                        uint _2462 = _2308;
                        uint _2463;
                        vec4 _2488;
                        float _2489;
                        vec4 _2504;
                        vec3 _2516;
                        vec4 _2532;
                        vec4 _2548;
                        float _2595;
                        bool _2596;
                        for (;;)
                        {
                            uint _2473 = ((_2299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2462));
                            _2463 = (_2462 + 4294967295u) & _2462;
                            uint _2475 = _2473 * 40u;
                            _2488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 3u)).x));
                            _2489 = _2488.w;
                            uint _2491 = (_2473 * 40u) + 4u;
                            _2504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 3u)).x));
                            uint _2506 = (_2473 * 40u) + 8u;
                            _2516 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 2u)).x));
                            uint _2519 = (_2473 * 40u) + 16u;
                            _2532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 3u)).x));
                            uint _2535 = (_2473 * 40u) + 20u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            uint _2551 = (_2473 * 40u) + 24u;
                            vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            uint _2570 = (_2473 * 40u) + 28u;
                            vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 3u)).x));
                            _2595 = fma(_1896, _2583.z, fma(_1895, _2583.y, _2583.x * _1894)) + _2583.w;
                            _2596 = !((fma(_1896, _2564.z, fma(_1895, _2564.y, _2564.x * _1894)) + _2564.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2596)
                            {
                                float _2623 = _2488.x - _1894;
                                float _2624 = _2488.y - _1895;
                                float _2625 = _2488.z - _1896;
                                float _2626 = dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625));
                                float _2629 = inversesqrt(_2626);
                                float _2630 = _2629 * _2623;
                                float _2631 = _2629 * _2624;
                                float _2632 = _2629 * _2625;
                                float _2636 = 1.0 - (_2626 / (_2489 * _2489));
                                float _3540 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                                float _2637 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                                float _2641 = sqrt(_2626) * _2504.w;
                                float _2643 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                                float _2644 = _2643 * _2643;
                                float _2645 = 1.0 - _2644;
                                float _2647 = (_2645 * dot(vec3(_2630, _2631, _2632), vec3(_304, _307, _310))) + _2644;
                                float _2650 = _2641 * _2641;
                                float _2654 = (fma(_1896, _2532.z, fma(_1895, _2532.y, _2532.x * _1894)) + _2532.w) / _2595;
                                float _2655 = (fma(_1896, _2548.z, fma(_1895, _2548.y, _2548.x * _1894)) + _2548.w) / _2595;
                                float _2659 = 1.0 - dot(vec2(_2654, _2655), vec2(_2654, _2655));
                                float _3556 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                                float _2660 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
                                float _2661 = _2660 * (((isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))) * _2637) / ((_2650 * 0.699999988079071044921875) + 1.0));
                                float _2671 = dot(vec3(_304, _307, _310), vec3((-0.0) - (_1894 * _2182), (-0.0) - (_1895 * _2182), (-0.0) - (_1896 * _2182)));
                                float _3567 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                                float _2679 = (_2645 * dot(vec3(_304, _307, _310), vec3(_2630, _2631, _2632))) + _2644;
                                float _3578 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                                float _2680 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
                                float _2684 = (0.5 / (((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) + 9.9999999392252902907785028219223e-09) + _2680)) * _2680;
                                float _3589 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                                float _2691 = (_2660 * _2637) * (((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 3.1415927410125732421875) / ((_2650 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2691 * _2516.x;
                                frontier_phi_73_pred_1 = _2691 * _2516.y;
                                frontier_phi_73_pred_2 = _2661 * _2504.z;
                                frontier_phi_73_pred_3 = _2661 * _2504.y;
                                frontier_phi_73_pred_4 = _2661 * _2504.x;
                                frontier_phi_73_pred_5 = _2691 * _2516.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2695 = frontier_phi_73_pred;
                            _2696 = frontier_phi_73_pred_1;
                            _2700 = frontier_phi_73_pred_2;
                            _2699 = frontier_phi_73_pred_3;
                            _2698 = frontier_phi_73_pred_4;
                            _2697 = frontier_phi_73_pred_5;
                            _2446 = _2698 + _2459;
                            _2447 = _2699 + _2460;
                            _2448 = _2700 + _2461;
                            _2443 = _2695 + _2456;
                            _2444 = _2696 + _2457;
                            _2445 = _2697 + _2458;
                            if (_2463 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2456 = _2443;
                                _2457 = _2444;
                                _2458 = _2445;
                                _2459 = _2446;
                                _2460 = _2447;
                                _2461 = _2448;
                                _2462 = _2463;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2446;
                        frontier_phi_67_pred_1 = _2447;
                        frontier_phi_67_pred_2 = _2448;
                        frontier_phi_67_pred_3 = _2445;
                        frontier_phi_67_pred_4 = _2444;
                        frontier_phi_67_pred_5 = _2443;
                    }
                    _2164 = frontier_phi_67_pred;
                    _2166 = frontier_phi_67_pred_1;
                    _2168 = frontier_phi_67_pred_2;
                    _2162 = frontier_phi_67_pred_3;
                    _2160 = frontier_phi_67_pred_4;
                    _2158 = frontier_phi_67_pred_5;
                    uint _2300 = _2299 + 1u;
                    if (_2300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2293 = _2158;
                        _2294 = _2160;
                        _2295 = _2162;
                        _2296 = _2164;
                        _2297 = _2166;
                        _2298 = _2168;
                        _2299 = _2300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2166;
                frontier_phi_55_56_ladder_1 = _2168;
                frontier_phi_55_56_ladder_2 = _2164;
                frontier_phi_55_56_ladder_3 = _2162;
                frontier_phi_55_56_ladder_4 = _2160;
                frontier_phi_55_56_ladder_5 = _2158;
            }
            else
            {
                frontier_phi_55_56_ladder = _2051;
                frontier_phi_55_56_ladder_1 = _2053;
                frontier_phi_55_56_ladder_2 = _2049;
                frontier_phi_55_56_ladder_3 = _2047;
                frontier_phi_55_56_ladder_4 = _2045;
                frontier_phi_55_56_ladder_5 = _2043;
            }
            _2157 = frontier_phi_55_56_ladder_5;
            _2159 = frontier_phi_55_56_ladder_4;
            _2161 = frontier_phi_55_56_ladder_3;
            _2163 = frontier_phi_55_56_ladder_2;
            _2165 = frontier_phi_55_56_ladder;
            _2167 = frontier_phi_55_56_ladder_1;
        }
        float _2172 = isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0));
        _1953 = (_2172 * _2163) + _1513;
        _1955 = (_2172 * _2165) + _1515;
        _1957 = (_2172 * _2167) + _1517;
        _1959 = ((_2157 * 0.039999999105930328369140625) * _2172) + _1765;
        _1961 = ((_2159 * 0.039999999105930328369140625) * _2172) + _1767;
        _1963 = ((_2161 * 0.039999999105930328369140625) * _2172) + _1769;
    }
    else
    {
        _1953 = _1513;
        _1955 = _1515;
        _1957 = _1517;
        _1959 = _1765;
        _1961 = _1767;
        _1963 = _1769;
    }
    float _3605 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3616 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3627 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3638 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _1988 = cbInstanceData._m0[_323 + 6u].w * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)));
    float _1993 = _282 / cbSceneParam._m0[86u].x;
    float _1994 = _283 / cbSceneParam._m0[86u].y;
    vec4 _2008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1993, _1994, (log2((isnan(cbSceneParam._m0[77u].w) ? _215 : (isnan(_215) ? cbSceneParam._m0[77u].w : min(_215, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2010 = _2008.x;
    float _2011 = _2008.y;
    float _2012 = _2008.z;
    float _2013 = _2008.w;
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    if (_215 > cbSceneParam._m0[78u].w)
    {
        float _2068 = isnan(_215) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _215 : min(cbSceneParam._m0[80u].w, _215));
        float _2069 = _2068 / _215;
        float _2080 = _2069 * _267;
        float _2081 = _268 * _2069;
        float _2082 = (-0.0) - _2081;
        float _2084 = _2069 * _269;
        float _2086 = (cbSceneParam._m0[77u].w * _2082) / _2068;
        float _2087 = _2086 + cbSceneParam._m0[79u].w;
        float _2088 = cbSceneParam._m0[79u].w - _2081;
        float _2094 = sqrt(((_2080 * _2080) + (_2081 * _2081)) + (_2084 * _2084));
        float _2097 = (1.0 - (cbSceneParam._m0[77u].w / _2068)) * _2094;
        float _2102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2255;
        if (abs((_2082 - _2086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2255 = ((((_2087 > 0.0) ? exp2(_2102 * _2087) : (2.0 - exp2(_2104 * _2087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2097;
        }
        else
        {
            float _2215 = 1.0 / cbSceneParam._m0[80u].x;
            float _2216 = isnan(_2088) ? _2087 : (isnan(_2087) ? _2088 : max(_2087, _2088));
            float _2217 = isnan(_2088) ? _2087 : (isnan(_2087) ? _2088 : min(_2087, _2088));
            float _2226 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : min(_2216, 0.0));
            float _2227 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : min(_2217, 0.0));
            _2255 = ((abs(_2094 / _2082) * cbSceneParam._m0[80u].y) * ((((_2226 - _2227) * 2.0) - ((exp2(_2102 * (isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0)))) - exp2(_2102 * (isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))))) * _2215)) - ((exp2(_2104 * _2226) - exp2(_2104 * _2227)) * _2215))) + (_2097 * cbSceneParam._m0[80u].z);
        }
        vec4 _2257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1993, _1994, 1.0), 0.0);
        float _2266 = exp2((_2255 * (-1.44269502162933349609375)) * (1.0 - _2257.w));
        float _2267 = log2(_2266);
        float _2283 = log2(_2013);
        _2106 = (exp2(_2283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].x)) * _2257.x) / cbSceneParam._m0[78u].x)) + _2010;
        _2108 = (exp2(_2283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].y)) * _2257.y) / cbSceneParam._m0[78u].y)) + _2011;
        _2110 = (exp2(_2283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].z)) * _2257.z) / cbSceneParam._m0[78u].z)) + _2012;
        _2112 = _2266 * _2013;
    }
    else
    {
        _2106 = _2010;
        _2108 = _2011;
        _2110 = _2012;
        _2112 = _2013;
    }
    float _2124 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2125 = _2124 == 3.0;
    float _2127 = log2(_2112);
    float _2134 = exp2(_2127 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1953 + ((isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0))) * _349))) + ((_1959 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2135 = exp2(_2127 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1955 + ((isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0))) * _349))) + ((_1961 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2136 = exp2(_2127 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1957 + ((isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0))) * _349))) + ((_1963 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2145 = (_2124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2145 * (_2125 ? _2134 : (_2134 + (cbSceneParam._m0[72u].w * _2106)));
    SV_Target.y = _2145 * (_2125 ? _2135 : (_2135 + (cbSceneParam._m0[72u].w * _2108)));
    SV_Target.z = _2145 * (_2125 ? _2136 : (_2136 + (cbSceneParam._m0[72u].w * _2110)));
    SV_Target.w = _1988;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1988;
}


