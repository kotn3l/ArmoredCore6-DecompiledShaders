#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _691;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    vec4 _181 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _185 = _181.w * TEXCOORD_1.z;
    float _189 = inversesqrt(dot(vec3(_159, _160, _161), vec3(_159, _160, _161)));
    float _190 = _189 * _159;
    float _191 = _189 * _160;
    float _192 = _189 * _161;
    float _2803 = isnan(0.0) ? _185 : (isnan(_185) ? 0.0 : max(_185, 0.0));
    float _194 = isnan(1.0) ? _2803 : (isnan(_2803) ? 1.0 : min(_2803, 1.0));
    float _2814 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2825 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2836 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _213 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    float _271 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _272 = _265 * _271;
    float _273 = _266 * _271;
    float _274 = _267 * _271;
    float _280 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _281 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _302 = fma(_192, cbSceneParam._m0[5u].z, fma(_191, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _190));
    float _305 = fma(_192, cbSceneParam._m0[6u].z, fma(_191, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _190));
    float _308 = fma(_192, cbSceneParam._m0[7u].z, fma(_191, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _190));
    uint _321 = uint(roundEven(NORMAL.w)) * 13u;
    uint _324 = (_321 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _330 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2814 : (isnan(_2814) ? 1.0 : min(_2814, 1.0)))) * cbInstanceData._m0[_324].x;
    float _331 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0)))) * cbInstanceData._m0[_324].y;
    float _332 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0)))) * cbInstanceData._m0[_324].z;
    float _2847 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _333 = isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0));
    float _2858 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _334 = isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0));
    float _2869 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _335 = isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0));
    vec4 _344 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _280, cbSceneParam._m0[86u].y * _281));
    float _347 = _344.x * TEXCOORD_1.w;
    float _348 = dot(vec3(_190, _191, _192), vec3(_272, _273, _274));
    float _351 = _348 * 2.0;
    float _356 = (_351 * _190) - _272;
    float _357 = (_351 * _191) - _273;
    float _358 = (_351 * _192) - _274;
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _690;
    float _692;
    float _693;
    float _694;
    float _695;
    float _696;
    float _697;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _415 = fma(_388, cbModelParam._m0[26u].z, fma(_384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _380));
        float _419 = fma(_388, cbModelParam._m0[27u].z, fma(_384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _380));
        float _423 = fma(_388, cbModelParam._m0[28u].z, fma(_384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _380));
        float _448 = _380 + _190;
        float _449 = _384 + _191;
        float _450 = _388 + _192;
        float _460 = fma(_450, cbModelParam._m0[26u].z, fma(_449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _448)) - _415;
        float _461 = fma(_450, cbModelParam._m0[27u].z, fma(_449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _448)) - _419;
        float _462 = fma(_450, cbModelParam._m0[28u].z, fma(_449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _448)) - _423;
        float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
        float _479 = ((_466 * _460) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_415 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _480 = ((_466 * _461) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_419 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _481 = ((_466 * _462) / cbModelParam._m0[34u].z) + ((((((_423 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _484 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_479, _480, _481), 0.0);
        vec4 _491 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_479, _480, _481), 0.0);
        vec4 _498 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_479, _480, _481), 0.0);
        vec4 _505 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_479, _480, _481), 0.0);
        float _518 = exp2((_484.w + (-0.5)) * 20.0) * 2.0;
        float _519 = _518 * (_484.x + (-0.5));
        float _520 = _518 * (_484.y + (-0.5));
        float _521 = _518 * (_484.z + (-0.5));
        float _528 = exp2((_491.w + (-0.5)) * 20.0) * 2.0;
        float _529 = _528 * (_491.x + (-0.5));
        float _530 = _528 * (_491.y + (-0.5));
        float _531 = _528 * (_491.z + (-0.5));
        float _538 = exp2((_498.w + (-0.5)) * 20.0) * 2.0;
        float _539 = _538 * (_498.x + (-0.5));
        float _540 = _538 * (_498.y + (-0.5));
        float _541 = _538 * (_498.z + (-0.5));
        float _548 = exp2((_505.w + (-0.5)) * 20.0) * 2.0;
        float _549 = _548 * (_505.x + (-0.5));
        float _550 = _548 * (_505.y + (-0.5));
        float _551 = _548 * (_505.z + (-0.5));
        float _552 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _553 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
        float _554 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _555 = _519 * 0.5;
        float _556 = _529 * 0.5;
        float _557 = _539 * 0.5;
        float _558 = dot(vec3(_555, _556, _557), vec3(_555, _556, _557));
        float _563 = (_558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_558);
        float _572 = (dot(vec3(_190, _191, _192), vec3(_563 * _555, _563 * _556, _563 * _557)) + 1.0) * 0.5;
        float _2895 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _582 = sqrt(((_556 * _556) + (_555 * _555)) + (_557 * _557)) / (_552 + 9.9999997473787516355514526367188e-06);
        float _2906 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        float _584 = _583 * 2.0;
        float _588 = (1.0 - _583) / (_583 + 1.0);
        float _2917 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
        float _598 = ((((1.0 - _589) * (_584 + 2.0)) * exp2(log2(isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0))) * (_584 + 1.0))) + _589) * _552;
        float _599 = _520 * 0.5;
        float _600 = _530 * 0.5;
        float _601 = _540 * 0.5;
        float _602 = dot(vec3(_599, _600, _601), vec3(_599, _600, _601));
        float _607 = (_602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_602);
        float _615 = (dot(vec3(_190, _191, _192), vec3(_607 * _599, _607 * _600, _607 * _601)) + 1.0) * 0.5;
        float _2928 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _624 = sqrt(((_600 * _600) + (_599 * _599)) + (_601 * _601)) / (_553 + 9.9999997473787516355514526367188e-06);
        float _2939 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _626 = _625 * 2.0;
        float _630 = (1.0 - _625) / (_625 + 1.0);
        float _2950 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
        float _640 = ((((1.0 - _631) * (_626 + 2.0)) * exp2(log2(isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))) * (_626 + 1.0))) + _631) * _553;
        float _641 = _521 * 0.5;
        float _642 = _531 * 0.5;
        float _643 = _541 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _657 = (dot(vec3(_190, _191, _192), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _2961 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _666 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_554 + 9.9999997473787516355514526367188e-06);
        float _2972 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _2983 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0))) * (_668 + 1.0))) + _673) * _554;
        _690 = _521;
        _692 = _520;
        _693 = _519;
        _694 = _531;
        _695 = _530;
        _696 = _529;
        _697 = _541;
        _698 = _540;
        _699 = _539;
        _700 = _554;
        _701 = _553;
        _702 = _552;
        _703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0)));
        _704 = cbModelParam._m0[36u].z * (isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0)));
        _705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
    }
    else
    {
        _690 = _691;
        _692 = _691;
        _693 = _691;
        _694 = _691;
        _695 = _691;
        _696 = _691;
        _697 = _691;
        _698 = _691;
        _699 = _691;
        _700 = _691;
        _701 = _691;
        _702 = _691;
        _703 = 0.0;
        _704 = 0.0;
        _705 = 0.0;
    }
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _731 = fma(_388, cbModelParam._m0[30u].z, fma(_384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _380));
        float _735 = fma(_388, cbModelParam._m0[31u].z, fma(_384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _380));
        float _739 = fma(_388, cbModelParam._m0[32u].z, fma(_384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _380));
        float _762 = _380 + _190;
        float _763 = _384 + _191;
        float _764 = _388 + _192;
        float _774 = fma(_764, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _762)) - _731;
        float _775 = fma(_764, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _762)) - _735;
        float _776 = fma(_764, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _762)) - _739;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_731 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_735 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[35u].z) + ((((((_739 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _830 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_797.x + (-0.5));
        float _832 = _830 * (_797.y + (-0.5));
        float _833 = _830 * (_797.z + (-0.5));
        float _840 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_804.x + (-0.5));
        float _842 = _840 * (_804.y + (-0.5));
        float _843 = _840 * (_804.z + (-0.5));
        float _850 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_811.x + (-0.5));
        float _852 = _850 * (_811.y + (-0.5));
        float _853 = _850 * (_811.z + (-0.5));
        float _860 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_818.x + (-0.5));
        float _862 = _860 * (_818.y + (-0.5));
        float _863 = _860 * (_818.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_190, _191, _192), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3024 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3035 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3046 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * (_894 + 1.0))) + _899) * _864;
        float _909 = _832 * 0.5;
        float _910 = _842 * 0.5;
        float _911 = _852 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_190, _191, _192), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3057 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3068 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3079 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_936 + 1.0))) + _941) * _865;
        float _951 = _833 * 0.5;
        float _952 = _843 * 0.5;
        float _953 = _853 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_190, _191, _192), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3090 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3101 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3112 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * (_978 + 1.0))) + _983) * _866;
        _1000 = _833;
        _1001 = _832;
        _1002 = _831;
        _1003 = _843;
        _1004 = _842;
        _1005 = _841;
        _1006 = _853;
        _1007 = _852;
        _1008 = _851;
        _1009 = _866;
        _1010 = _865;
        _1011 = _864;
        _1012 = cbModelParam._m0[36u].w * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1013 = cbModelParam._m0[36u].w * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1014 = cbModelParam._m0[36u].w * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _691;
        _1001 = _691;
        _1002 = _691;
        _1003 = _691;
        _1004 = _691;
        _1005 = _691;
        _1006 = _691;
        _1007 = _691;
        _1008 = _691;
        _1009 = _691;
        _1010 = _691;
        _1011 = _691;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1024 = (cbModelParam._m0[1u].x * (_1012 - _703)) + _703;
    float _1025 = (cbModelParam._m0[1u].x * (_1013 - _704)) + _704;
    float _1026 = (cbModelParam._m0[1u].x * (_1014 - _705)) + _705;
    float _1047 = fma(_1026, cbSceneParam._m0[89u].z, fma(_1025, cbSceneParam._m0[89u].y, _1024 * cbSceneParam._m0[89u].x));
    float _1050 = fma(_1026, cbSceneParam._m0[90u].z, fma(_1025, cbSceneParam._m0[90u].y, _1024 * cbSceneParam._m0[90u].x));
    float _1053 = fma(_1026, cbSceneParam._m0[91u].z, fma(_1025, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1024));
    float _1068 = _356 * 0.5;
    float _1069 = _357 * 0.5;
    float _1070 = _358 * 0.5;
    float _1071 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_1002, _1005, _1008, _1011));
    float _1074 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_1001, _1004, _1007, _1010));
    float _1077 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_1000, _1003, _1006, _1009));
    float _1111;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1084 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_690, _694, _697, _700));
        float _1088 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_692, _695, _698, _701));
        float _1092 = dot(vec4(_1068, _1069, _1070, 1.0), vec4(_693, _696, _699, _702));
        float _1099 = dot(vec4(cbModelParam._m0[39u]), vec4(_1068, _1069, _1070, 1.0));
        _1111 = dot(vec3(isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)), isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)), isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1099) ? 0.0 : (isnan(0.0) ? _1099 : max(0.0, _1099))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1111 = 1.0;
    }
    float _1122;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1113 = dot(vec4(cbModelParam._m0[40u]), vec4(_1068, _1069, _1070, 1.0));
        _1122 = dot(vec3(isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)), isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)), isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1113) ? 0.0 : (isnan(0.0) ? _1113 : max(0.0, _1113))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1122 = 1.0;
    }
    float _1126 = (_1122 * cbModelParam._m0[1u].x) + (_1111 * (1.0 - cbModelParam._m0[1u].x));
    float _1135 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1217;
    float _1219;
    float _1221;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1184 = fma(_388, cbModelParam._m0[13u].z, fma(_384, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _380)) + cbModelParam._m0[13u].w;
        float _1188 = fma(_388, cbModelParam._m0[14u].z, fma(_384, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _380)) + cbModelParam._m0[14u].w;
        float _1192 = fma(_388, cbModelParam._m0[15u].z, fma(_384, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _380)) + cbModelParam._m0[15u].w;
        float _1195 = fma(_358, cbModelParam._m0[13u].z, fma(_357, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _356));
        float _1198 = fma(_358, cbModelParam._m0[14u].z, fma(_357, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _356));
        float _1201 = fma(_358, cbModelParam._m0[15u].z, fma(_357, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _356));
        float _1227;
        if (_1195 > 0.0)
        {
            _1227 = abs((1.0 - _1184) / _1195);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1195 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1184 + 1.0) / _1195);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1227 = frontier_phi_14_12_ladder;
        }
        float _1435;
        if (_1198 > 0.0)
        {
            _1435 = abs((1.0 - _1188) / _1198);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1198 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1188 + 1.0) / _1198);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1435 = frontier_phi_23_19_ladder;
        }
        float _1624;
        if (_1201 > 0.0)
        {
            _1624 = abs((1.0 - _1192) / _1201);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1201 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1192 + 1.0) / _1201);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1624 = frontier_phi_35_30_ladder;
        }
        float _1626 = isnan(_1435) ? _1227 : (isnan(_1227) ? _1435 : min(_1227, _1435));
        float _1627 = isnan(_1624) ? _1626 : (isnan(_1626) ? _1624 : min(_1626, _1624));
        float _1631 = (_1627 * _1195) + _1184;
        float _1632 = (_1627 * _1198) + _1188;
        float _1633 = (_1627 * _1201) + _1192;
        float _1634 = _1627 * 9.9999997473787516355514526367188e-05;
        float _1636 = (-1.0) - _1634;
        float _1638 = _1634 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1633 > _1638) || ((_1633 < _1636) || ((_1632 > _1638) || ((_1632 < _1636) || ((_1631 < _1636) || (_1631 > _1638))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1633, cbModelParam._m0[9u].z, fma(_1632, cbModelParam._m0[9u].y, _1631 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1633, cbModelParam._m0[10u].z, fma(_1632, cbModelParam._m0[10u].y, _1631 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1633, cbModelParam._m0[11u].z, fma(_1632, cbModelParam._m0[11u].y, _1631 * cbModelParam._m0[11u].x))), _1135);
            frontier_phi_13_35_ladder = _1730.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1730.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1730.x * cbModelParam._m0[1u].y;
        }
        _1217 = frontier_phi_13_35_ladder_2;
        _1219 = frontier_phi_13_35_ladder_1;
        _1221 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1205 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_356, _357, _358), _1135);
        _1217 = _1205.x * cbModelParam._m0[1u].y;
        _1219 = _1205.y * cbModelParam._m0[1u].y;
        _1221 = _1205.z * cbModelParam._m0[1u].y;
    }
    float _1224 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1317;
    float _1319;
    float _1321;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1281 = fma(_388, cbModelParam._m0[21u].z, fma(_384, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _380)) + cbModelParam._m0[21u].w;
        float _1285 = fma(_388, cbModelParam._m0[22u].z, fma(_384, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _380)) + cbModelParam._m0[22u].w;
        float _1289 = fma(_388, cbModelParam._m0[23u].z, fma(_384, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _380)) + cbModelParam._m0[23u].w;
        float _1292 = fma(_358, cbModelParam._m0[21u].z, fma(_357, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _356));
        float _1295 = fma(_358, cbModelParam._m0[22u].z, fma(_357, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _356));
        float _1298 = fma(_358, cbModelParam._m0[23u].z, fma(_357, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _356));
        float _1440;
        if (_1292 > 0.0)
        {
            _1440 = abs((1.0 - _1281) / _1292);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1281 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1440 = frontier_phi_25_21_ladder;
        }
        float _1651;
        if (_1295 > 0.0)
        {
            _1651 = abs((1.0 - _1285) / _1295);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1285 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1651 = frontier_phi_37_32_ladder;
        }
        float _1802;
        if (_1298 > 0.0)
        {
            _1802 = abs((1.0 - _1289) / _1298);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1289 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1802 = frontier_phi_46_43_ladder;
        }
        float _1804 = isnan(_1651) ? _1440 : (isnan(_1440) ? _1651 : min(_1440, _1651));
        float _1805 = isnan(_1802) ? _1804 : (isnan(_1804) ? _1802 : min(_1804, _1802));
        float _1809 = (_1805 * _1292) + _1281;
        float _1810 = (_1805 * _1295) + _1285;
        float _1811 = (_1805 * _1298) + _1289;
        float _1812 = _1805 * 9.9999997473787516355514526367188e-05;
        float _1813 = (-1.0) - _1812;
        float _1815 = _1812 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1811 > _1815) || ((_1811 < _1813) || ((_1810 > _1815) || ((_1810 < _1813) || ((_1809 < _1813) || (_1809 > _1815))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1811, cbModelParam._m0[17u].z, fma(_1810, cbModelParam._m0[17u].y, _1809 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1811, cbModelParam._m0[18u].z, fma(_1810, cbModelParam._m0[18u].y, _1809 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1811, cbModelParam._m0[19u].z, fma(_1810, cbModelParam._m0[19u].y, _1809 * cbModelParam._m0[19u].x))), _1224);
            frontier_phi_22_46_ladder = _2012.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2012.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2012.x * cbModelParam._m0[1u].z;
        }
        _1317 = frontier_phi_22_46_ladder_2;
        _1319 = frontier_phi_22_46_ladder_1;
        _1321 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1301 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_356, _357, _358), _1224);
        _1317 = _1301.x * cbModelParam._m0[1u].z;
        _1319 = _1301.y * cbModelParam._m0[1u].z;
        _1321 = _1301.z * cbModelParam._m0[1u].z;
    }
    float _1333 = _347 * 0.01200000010430812835693359375;
    float _1335 = _1333 * ((cbModelParam._m0[1u].w * (_1317 - _1217)) + _1217);
    float _1336 = _1333 * ((cbModelParam._m0[1u].w * (_1319 - _1219)) + _1219);
    float _1337 = _1333 * ((cbModelParam._m0[1u].w * (_1321 - _1221)) + _1221);
    float _1340 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, _1335 * cbSceneParam._m0[91u].x));
    uvec4 _1356 = floatBitsToUint(cbInstanceData._m0[_321 + 5u]);
    uint _1358 = _1356.x * 14u;
    uint _1359 = _1358 + 13u;
    float _1366 = _347 + (-1.0);
    float _1372 = (cbLight._m0[_1359].x * _1366) + 1.0;
    float _1373 = (cbLight._m0[_1359].y * _1366) + 1.0;
    float _1374 = (cbLight._m0[_1359].z * _1366) + 1.0;
    float _1375 = (cbLight._m0[_1359].w * _1366) + 1.0;
    uint _1376 = _1358 + 5u;
    float _1382 = isnan(1.0) ? _1373 : (isnan(_1373) ? 1.0 : min(_1373, 1.0));
    uint _1386 = _1358 + 4u;
    float _1393 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
    uint _1397 = _1358 | 1u;
    float _1408 = dot(vec3(cbLight._m0[_1358].xyz), vec3(_190, _191, _192));
    float _1411 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_190, _191, _192));
    float _3248 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    float _3259 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1416 = (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * 0.3183098733425140380859375;
    float _1418 = (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * 0.3183098733425140380859375;
    float _1425 = ((cbLight._m0[_1376].x * _1382) * _1418) + ((cbLight._m0[_1386].x * _1393) * _1416);
    float _1426 = ((_1382 * cbLight._m0[_1376].y) * _1418) + ((_1393 * cbLight._m0[_1386].y) * _1416);
    float _1427 = ((_1382 * cbLight._m0[_1376].z) * _1418) + ((_1393 * cbLight._m0[_1386].z) * _1416);
    uvec4 _1432 = floatBitsToUint(cbLight._m0[_1358 + 12u]);
    bool _1434 = _1432.x == 0u;
    float _1445;
    float _1447;
    float _1449;
    if (_1434)
    {
        _1445 = _1425;
        _1447 = _1426;
        _1449 = _1427;
    }
    else
    {
        uint _1453 = _1358 + 6u;
        float _1469 = (dot(vec3(cbLight._m0[_1358 + 2u].xyz), vec3(_190, _191, _192)) * 0.5) + 0.5;
        float _1470 = _1469 * _1469;
        float _3270 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1472 = isnan(1.0) ? _1374 : (isnan(_1374) ? 1.0 : min(_1374, 1.0));
        _1445 = (((cbLight._m0[_1453].x * 0.3183098733425140380859375) * _1471) * _1472) + _1425;
        _1447 = (((cbLight._m0[_1453].y * 0.3183098733425140380859375) * _1471) * _1472) + _1426;
        _1449 = (((cbLight._m0[_1453].z * 0.3183098733425140380859375) * _1471) * _1472) + _1427;
    }
    bool _1452 = _1432.y == 0u;
    float _1490;
    float _1492;
    float _1494;
    if (_1452)
    {
        _1490 = _1445;
        _1492 = _1447;
        _1494 = _1449;
    }
    else
    {
        uint _1595 = _1358 + 7u;
        float _1611 = (dot(vec3(cbLight._m0[_1358 + 3u].xyz), vec3(_190, _191, _192)) * 0.5) + 0.5;
        float _1612 = _1611 * _1611;
        float _3286 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _1614 = isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0));
        _1490 = (((cbLight._m0[_1595].x * 0.3183098733425140380859375) * _1613) * _1614) + _1445;
        _1492 = (((cbLight._m0[_1595].y * 0.3183098733425140380859375) * _1613) * _1614) + _1447;
        _1494 = (((cbLight._m0[_1595].z * 0.3183098733425140380859375) * _1613) * _1614) + _1449;
    }
    uint _1496 = _1358 + 8u;
    float _1502 = cbLight._m0[_1358].x + _272;
    float _1503 = cbLight._m0[_1358].y + _273;
    float _1504 = cbLight._m0[_1358].z + _274;
    float _1508 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
    float _1512 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1358].xyz));
    float _3302 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1515 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _1516 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _1517 = dot(vec3(cbLight._m0[_1358].xyz), vec3(_1502 * _1508, _1503 * _1508, _1504 * _1508));
    float _3324 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1528 = (exp2(log2(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1534 = (0.5 / ((_1515 + 9.9999999392252902907785028219223e-09) + _1516)) * _1515;
    float _3335 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _1536 = (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.31831014156341552734375;
    uint _1547 = _1358 + 9u;
    float _1553 = cbLight._m0[_1397].x + _272;
    float _1554 = cbLight._m0[_1397].y + _273;
    float _1555 = cbLight._m0[_1397].z + _274;
    float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
    float _1563 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1397].xyz));
    float _3346 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1566 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _1567 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_1553 * _1559, _1554 * _1559, _1555 * _1559));
    float _3357 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1576 = (exp2(log2(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1580 = (0.5 / ((_1566 + 9.9999999392252902907785028219223e-09) + _1516)) * _1566;
    float _3368 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1582 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.31831014156341552734375;
    float _1592 = (((_1576 * cbLight._m0[_1547].x) * _1582) * _1382) + (((_1528 * cbLight._m0[_1496].x) * _1536) * _1393);
    float _1593 = (((_1576 * cbLight._m0[_1547].y) * _1582) * _1382) + (((_1528 * cbLight._m0[_1496].y) * _1536) * _1393);
    float _1594 = (((_1576 * cbLight._m0[_1547].z) * _1582) * _1382) + (((_1528 * cbLight._m0[_1496].z) * _1536) * _1393);
    float _1656;
    float _1658;
    float _1660;
    if (_1434)
    {
        _1656 = _1592;
        _1658 = _1593;
        _1660 = _1594;
    }
    else
    {
        uint _1662 = _1358 + 10u;
        uint _1668 = _1358 + 2u;
        float _1674 = cbLight._m0[_1668].x + _272;
        float _1675 = cbLight._m0[_1668].y + _273;
        float _1676 = cbLight._m0[_1668].z + _274;
        float _1680 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
        float _1684 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1668].xyz));
        float _3379 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1687 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1688 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1674 * _1680, _1675 * _1680, _1676 * _1680));
        float _3390 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = (exp2(log2(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1701 = (0.5 / ((_1687 + 9.9999999392252902907785028219223e-09) + _1516)) * _1687;
        float _3401 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1703 = (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.31831014156341552734375;
        float _1704 = isnan(1.0) ? _1374 : (isnan(_1374) ? 1.0 : min(_1374, 1.0));
        _1656 = (((_1697 * cbLight._m0[_1662].x) * _1703) * _1704) + _1592;
        _1658 = (((_1697 * cbLight._m0[_1662].y) * _1703) * _1704) + _1593;
        _1660 = (((_1697 * cbLight._m0[_1662].z) * _1703) * _1704) + _1594;
    }
    float _1739;
    float _1741;
    float _1743;
    if (_1452)
    {
        _1739 = _1656;
        _1741 = _1658;
        _1743 = _1660;
    }
    else
    {
        uint _1750 = _1358 + 11u;
        uint _1756 = _1358 + 3u;
        float _1762 = cbLight._m0[_1756].x + _272;
        float _1763 = cbLight._m0[_1756].y + _273;
        float _1764 = cbLight._m0[_1756].z + _274;
        float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
        float _1772 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1756].xyz));
        float _3417 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1775 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1776 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_1762 * _1768, _1763 * _1768, _1764 * _1768));
        float _3428 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1789 = (0.5 / ((_1775 + 9.9999999392252902907785028219223e-09) + _1516)) * _1775;
        float _3439 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1791 = (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.31831014156341552734375;
        float _1792 = isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0));
        _1739 = (((_1785 * cbLight._m0[_1750].x) * _1791) * _1792) + _1656;
        _1741 = (((_1785 * cbLight._m0[_1750].y) * _1791) * _1792) + _1658;
        _1743 = (((_1785 * cbLight._m0[_1750].z) * _1791) * _1792) + _1660;
    }
    float _1927;
    float _1929;
    float _1931;
    float _1933;
    float _1935;
    float _1937;
    if (_1356.y == 0u)
    {
        float _1867 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1868 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1867;
        float _1869 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1867;
        float _1870 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1867;
        uvec4 _1882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1883 = _1882.x;
        uint _1894 = uint((float(_1882.y) * floor(float(uint(cbSceneParam._m0[85u].y * _281) / _1883))) + floor(float(uint(cbSceneParam._m0[85u].x * _280) / _1883)));
        float _1904 = (log2(_1870 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1905 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        uint _1908 = uint(isnan(14.0) ? _1905 : (isnan(_1905) ? 14.0 : min(_1905, 14.0)));
        uvec4 _1913 = texelFetch(g_lightClusterGridBuffer, int(((_1908 << 2u) + (_1894 << 6u)) >> 2u));
        uint _1914 = _1913.x;
        uint _1915 = _1882.z;
        float _2017;
        float _2019;
        float _2021;
        float _2023;
        float _2025;
        float _2027;
        if (((((1u << ((_1915 >> 4u) & 15u)) + 4294967295u) & _1914) == 0u) || ((_1915 & 240u) == 0u))
        {
            _2017 = 0.0;
            _2019 = 0.0;
            _2021 = 0.0;
            _2023 = 0.0;
            _2025 = 0.0;
            _2027 = 0.0;
        }
        else
        {
            float _2018;
            float _2020;
            float _2022;
            float _2024;
            float _2026;
            float _2028;
            float _2160 = 0.0;
            float _2161 = 0.0;
            float _2162 = 0.0;
            float _2163 = 0.0;
            float _2164 = 0.0;
            float _2165 = 0.0;
            uint _2166 = 0u;
            uint _2175;
            bool _2176;
            for (;;)
            {
                _2175 = texelFetch(g_lightClassification, int((((_1908 << 5u) + (_1894 << 9u)) + (_2166 << 2u)) >> 2u)).x;
                _2176 = _2175 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2176)
                {
                    frontier_phi_61_pred = _2160;
                    frontier_phi_61_pred_1 = _2165;
                    frontier_phi_61_pred_2 = _2164;
                    frontier_phi_61_pred_3 = _2163;
                    frontier_phi_61_pred_4 = _2162;
                    frontier_phi_61_pred_5 = _2161;
                }
                else
                {
                    float _2284;
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    uint _2290;
                    _2284 = _2160;
                    _2285 = _2161;
                    _2286 = _2162;
                    _2287 = _2163;
                    _2288 = _2164;
                    _2289 = _2165;
                    _2290 = _2175;
                    float _2216;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    float _2221;
                    for (;;)
                    {
                        uint _2294 = uint(findLSB(_2290)) + (_2166 << 5u);
                        uint _2291 = (_2290 + 4294967295u) & _2290;
                        uint _2296 = _2294 * 48u;
                        vec4 _2310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2296)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 3u)).x));
                        uint _2316 = (_2294 * 48u) + 4u;
                        vec4 _2329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2316)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 3u)).x));
                        uint _2335 = (_2294 * 48u) + 8u;
                        vec3 _2346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2335)).x, texelFetch(g_PointLightRenderingBuffer, int(_2335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2335 + 2u)).x));
                        float _2350 = _2310.x - _1868;
                        float _2351 = _2310.y - _1869;
                        float _2352 = _2310.z - _1870;
                        float _2353 = dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352));
                        float _2356 = inversesqrt(_2353);
                        float _2365 = 1.0 - (_2353 * _2310.w);
                        float _3465 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
                        float _2366 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
                        float _2367 = sqrt(_2353) * _2329.w;
                        float _2370 = 1.39999997615814208984375 / (_2367 + 1.39999997615814208984375);
                        float _2371 = _2370 * _2370;
                        float _2374 = ((1.0 - _2371) * dot(vec3(_302, _305, _308), vec3(_2356 * _2350, _2356 * _2351, _2356 * _2352))) + _2371;
                        float _2377 = _2367 * _2367;
                        float _2381 = ((isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))) * _2366) / ((_2377 * 0.699999988079071044921875) + 1.0);
                        float _2385 = (-0.0) - _1868;
                        float _2386 = (-0.0) - _1869;
                        float _2387 = (-0.0) - _1870;
                        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
                        float _2395 = dot(vec3(_302, _305, _308), vec3(_2391 * _2385, _2391 * _2386, _2391 * _2387));
                        float _3481 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
                        float _3492 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                        float _2399 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
                        float _2403 = (0.5 / (((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) + 9.9999999392252902907785028219223e-09) + _2399)) * _2399;
                        float _3503 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
                        float _2412 = (((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 3.1415927410125732421875) / ((_2377 * 2.1991131305694580078125) + 3.141590118408203125)) * _2366;
                        _2219 = (_2381 * _2329.x) + _2287;
                        _2220 = (_2381 * _2329.y) + _2288;
                        _2221 = (_2381 * _2329.z) + _2289;
                        _2216 = (_2412 * _2346.x) + _2284;
                        _2217 = (_2412 * _2346.y) + _2285;
                        _2218 = (_2412 * _2346.z) + _2286;
                        if (_2291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2284 = _2216;
                            _2285 = _2217;
                            _2286 = _2218;
                            _2287 = _2219;
                            _2288 = _2220;
                            _2289 = _2221;
                            _2290 = _2291;
                        }
                    }
                    frontier_phi_61_pred = _2216;
                    frontier_phi_61_pred_1 = _2221;
                    frontier_phi_61_pred_2 = _2220;
                    frontier_phi_61_pred_3 = _2219;
                    frontier_phi_61_pred_4 = _2218;
                    frontier_phi_61_pred_5 = _2217;
                }
                _2018 = frontier_phi_61_pred;
                _2028 = frontier_phi_61_pred_1;
                _2026 = frontier_phi_61_pred_2;
                _2024 = frontier_phi_61_pred_3;
                _2022 = frontier_phi_61_pred_4;
                _2020 = frontier_phi_61_pred_5;
                uint _2167 = _2166 + 1u;
                if (_2167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2160 = _2018;
                    _2161 = _2020;
                    _2162 = _2022;
                    _2163 = _2024;
                    _2164 = _2026;
                    _2165 = _2028;
                    _2166 = _2167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2017 = _2018;
            _2019 = _2020;
            _2021 = _2022;
            _2023 = _2024;
            _2025 = _2026;
            _2027 = _2028;
        }
        uvec4 _2031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2032 = _2031.z;
        uint _2034 = (_2032 >> 8u) & 15u;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        if (((4294967295u << _2034) & _1914) == 0u)
        {
            _2131 = _2017;
            _2133 = _2019;
            _2135 = _2021;
            _2137 = _2023;
            _2139 = _2025;
            _2141 = _2027;
        }
        else
        {
            float _2156 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2034 < ((_2032 >> 12u) & 15u))
            {
                float _2132;
                float _2134;
                float _2136;
                float _2138;
                float _2140;
                float _2142;
                float _2267 = _2017;
                float _2268 = _2019;
                float _2269 = _2021;
                float _2270 = _2023;
                float _2271 = _2025;
                float _2272 = _2027;
                uint _2273 = _2034;
                uint _2282;
                bool _2283;
                for (;;)
                {
                    _2282 = texelFetch(g_lightClassification, int((((_1908 << 5u) + (_1894 << 9u)) + (_2273 << 2u)) >> 2u)).x;
                    _2283 = _2282 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2283)
                    {
                        frontier_phi_67_pred = _2270;
                        frontier_phi_67_pred_1 = _2271;
                        frontier_phi_67_pred_2 = _2272;
                        frontier_phi_67_pred_3 = _2269;
                        frontier_phi_67_pred_4 = _2268;
                        frontier_phi_67_pred_5 = _2267;
                    }
                    else
                    {
                        float _2417;
                        float _2418;
                        float _2419;
                        float _2420;
                        float _2421;
                        float _2422;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2430 = _2267;
                        float _2431 = _2268;
                        float _2432 = _2269;
                        float _2433 = _2270;
                        float _2434 = _2271;
                        float _2435 = _2272;
                        uint _2436 = _2282;
                        uint _2437;
                        vec4 _2462;
                        float _2463;
                        vec4 _2478;
                        vec3 _2490;
                        vec4 _2506;
                        vec4 _2522;
                        float _2569;
                        bool _2570;
                        for (;;)
                        {
                            uint _2447 = ((_2273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2436));
                            _2437 = (_2436 + 4294967295u) & _2436;
                            uint _2449 = _2447 * 40u;
                            _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            _2463 = _2462.w;
                            uint _2465 = (_2447 * 40u) + 4u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2480 = (_2447 * 40u) + 8u;
                            _2490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x));
                            uint _2493 = (_2447 * 40u) + 16u;
                            _2506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 3u)).x));
                            uint _2509 = (_2447 * 40u) + 20u;
                            _2522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 3u)).x));
                            uint _2525 = (_2447 * 40u) + 24u;
                            vec4 _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            uint _2544 = (_2447 * 40u) + 28u;
                            vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 3u)).x));
                            _2569 = fma(_1870, _2557.z, fma(_1869, _2557.y, _2557.x * _1868)) + _2557.w;
                            _2570 = !((fma(_1870, _2538.z, fma(_1869, _2538.y, _2538.x * _1868)) + _2538.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2570)
                            {
                                float _2597 = _2462.x - _1868;
                                float _2598 = _2462.y - _1869;
                                float _2599 = _2462.z - _1870;
                                float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                                float _2603 = inversesqrt(_2600);
                                float _2604 = _2603 * _2597;
                                float _2605 = _2603 * _2598;
                                float _2606 = _2603 * _2599;
                                float _2610 = 1.0 - (_2600 / (_2463 * _2463));
                                float _3514 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                                float _2611 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
                                float _2615 = sqrt(_2600) * _2478.w;
                                float _2617 = 1.39999997615814208984375 / (_2615 + 1.39999997615814208984375);
                                float _2618 = _2617 * _2617;
                                float _2619 = 1.0 - _2618;
                                float _2621 = (_2619 * dot(vec3(_2604, _2605, _2606), vec3(_302, _305, _308))) + _2618;
                                float _2624 = _2615 * _2615;
                                float _2628 = (fma(_1870, _2506.z, fma(_1869, _2506.y, _2506.x * _1868)) + _2506.w) / _2569;
                                float _2629 = (fma(_1870, _2522.z, fma(_1869, _2522.y, _2522.x * _1868)) + _2522.w) / _2569;
                                float _2633 = 1.0 - dot(vec2(_2628, _2629), vec2(_2628, _2629));
                                float _3530 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                                float _2634 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
                                float _2635 = _2634 * (((isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))) * _2611) / ((_2624 * 0.699999988079071044921875) + 1.0));
                                float _2645 = dot(vec3(_302, _305, _308), vec3((-0.0) - (_1868 * _2156), (-0.0) - (_1869 * _2156), (-0.0) - (_1870 * _2156)));
                                float _3541 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                                float _2653 = (_2619 * dot(vec3(_302, _305, _308), vec3(_2604, _2605, _2606))) + _2618;
                                float _3552 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                                float _2654 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
                                float _2658 = (0.5 / (((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) + 9.9999999392252902907785028219223e-09) + _2654)) * _2654;
                                float _3563 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                                float _2665 = (_2634 * _2611) * (((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 3.1415927410125732421875) / ((_2624 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2665 * _2490.x;
                                frontier_phi_73_pred_1 = _2665 * _2490.y;
                                frontier_phi_73_pred_2 = _2635 * _2478.z;
                                frontier_phi_73_pred_3 = _2635 * _2478.y;
                                frontier_phi_73_pred_4 = _2635 * _2478.x;
                                frontier_phi_73_pred_5 = _2665 * _2490.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2669 = frontier_phi_73_pred;
                            _2670 = frontier_phi_73_pred_1;
                            _2674 = frontier_phi_73_pred_2;
                            _2673 = frontier_phi_73_pred_3;
                            _2672 = frontier_phi_73_pred_4;
                            _2671 = frontier_phi_73_pred_5;
                            _2420 = _2672 + _2433;
                            _2421 = _2673 + _2434;
                            _2422 = _2674 + _2435;
                            _2417 = _2669 + _2430;
                            _2418 = _2670 + _2431;
                            _2419 = _2671 + _2432;
                            if (_2437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2430 = _2417;
                                _2431 = _2418;
                                _2432 = _2419;
                                _2433 = _2420;
                                _2434 = _2421;
                                _2435 = _2422;
                                _2436 = _2437;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2420;
                        frontier_phi_67_pred_1 = _2421;
                        frontier_phi_67_pred_2 = _2422;
                        frontier_phi_67_pred_3 = _2419;
                        frontier_phi_67_pred_4 = _2418;
                        frontier_phi_67_pred_5 = _2417;
                    }
                    _2138 = frontier_phi_67_pred;
                    _2140 = frontier_phi_67_pred_1;
                    _2142 = frontier_phi_67_pred_2;
                    _2136 = frontier_phi_67_pred_3;
                    _2134 = frontier_phi_67_pred_4;
                    _2132 = frontier_phi_67_pred_5;
                    uint _2274 = _2273 + 1u;
                    if (_2274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2267 = _2132;
                        _2268 = _2134;
                        _2269 = _2136;
                        _2270 = _2138;
                        _2271 = _2140;
                        _2272 = _2142;
                        _2273 = _2274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2140;
                frontier_phi_55_56_ladder_1 = _2142;
                frontier_phi_55_56_ladder_2 = _2138;
                frontier_phi_55_56_ladder_3 = _2136;
                frontier_phi_55_56_ladder_4 = _2134;
                frontier_phi_55_56_ladder_5 = _2132;
            }
            else
            {
                frontier_phi_55_56_ladder = _2025;
                frontier_phi_55_56_ladder_1 = _2027;
                frontier_phi_55_56_ladder_2 = _2023;
                frontier_phi_55_56_ladder_3 = _2021;
                frontier_phi_55_56_ladder_4 = _2019;
                frontier_phi_55_56_ladder_5 = _2017;
            }
            _2131 = frontier_phi_55_56_ladder_5;
            _2133 = frontier_phi_55_56_ladder_4;
            _2135 = frontier_phi_55_56_ladder_3;
            _2137 = frontier_phi_55_56_ladder_2;
            _2139 = frontier_phi_55_56_ladder;
            _2141 = frontier_phi_55_56_ladder_1;
        }
        float _2146 = isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0));
        _1927 = (_2146 * _2137) + _1490;
        _1929 = (_2146 * _2139) + _1492;
        _1931 = (_2146 * _2141) + _1494;
        _1933 = ((_2131 * 0.039999999105930328369140625) * _2146) + _1739;
        _1935 = ((_2133 * 0.039999999105930328369140625) * _2146) + _1741;
        _1937 = ((_2135 * 0.039999999105930328369140625) * _2146) + _1743;
    }
    else
    {
        _1927 = _1490;
        _1929 = _1492;
        _1931 = _1494;
        _1933 = _1739;
        _1935 = _1741;
        _1937 = _1743;
    }
    float _3579 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3590 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3601 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3612 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _1962 = cbInstanceData._m0[_321 + 6u].w * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)));
    float _1967 = _280 / cbSceneParam._m0[86u].x;
    float _1968 = _281 / cbSceneParam._m0[86u].y;
    vec4 _1982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1967, _1968, (log2((isnan(cbSceneParam._m0[77u].w) ? _213 : (isnan(_213) ? cbSceneParam._m0[77u].w : min(_213, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1984 = _1982.x;
    float _1985 = _1982.y;
    float _1986 = _1982.z;
    float _1987 = _1982.w;
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    if (_213 > cbSceneParam._m0[78u].w)
    {
        float _2042 = isnan(_213) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _213 : min(cbSceneParam._m0[80u].w, _213));
        float _2043 = _2042 / _213;
        float _2054 = _2043 * _265;
        float _2055 = _266 * _2043;
        float _2056 = (-0.0) - _2055;
        float _2058 = _2043 * _267;
        float _2060 = (cbSceneParam._m0[77u].w * _2056) / _2042;
        float _2061 = _2060 + cbSceneParam._m0[79u].w;
        float _2062 = cbSceneParam._m0[79u].w - _2055;
        float _2068 = sqrt(((_2054 * _2054) + (_2055 * _2055)) + (_2058 * _2058));
        float _2071 = (1.0 - (cbSceneParam._m0[77u].w / _2042)) * _2068;
        float _2076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2229;
        if (abs((_2056 - _2060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2229 = ((((_2061 > 0.0) ? exp2(_2076 * _2061) : (2.0 - exp2(_2078 * _2061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2071;
        }
        else
        {
            float _2189 = 1.0 / cbSceneParam._m0[80u].x;
            float _2190 = isnan(_2062) ? _2061 : (isnan(_2061) ? _2062 : max(_2061, _2062));
            float _2191 = isnan(_2062) ? _2061 : (isnan(_2061) ? _2062 : min(_2061, _2062));
            float _2200 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : min(_2190, 0.0));
            float _2201 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : min(_2191, 0.0));
            _2229 = ((abs(_2068 / _2056) * cbSceneParam._m0[80u].y) * ((((_2200 - _2201) * 2.0) - ((exp2(_2076 * (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0)))) - exp2(_2076 * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))))) * _2189)) - ((exp2(_2078 * _2200) - exp2(_2078 * _2201)) * _2189))) + (_2071 * cbSceneParam._m0[80u].z);
        }
        vec4 _2231 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1967, _1968, 1.0), 0.0);
        float _2240 = exp2((_2229 * (-1.44269502162933349609375)) * (1.0 - _2231.w));
        float _2241 = log2(_2240);
        float _2257 = log2(_1987);
        _2080 = (exp2(_2257 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].x)) * _2231.x) / cbSceneParam._m0[78u].x)) + _1984;
        _2082 = (exp2(_2257 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].y)) * _2231.y) / cbSceneParam._m0[78u].y)) + _1985;
        _2084 = (exp2(_2257 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].z)) * _2231.z) / cbSceneParam._m0[78u].z)) + _1986;
        _2086 = _2240 * _1987;
    }
    else
    {
        _2080 = _1984;
        _2082 = _1985;
        _2084 = _1986;
        _2086 = _1987;
    }
    float _2098 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2099 = _2098 == 3.0;
    float _2101 = log2(_2086);
    float _2108 = exp2(_2101 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1927 + ((isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0))) * _347))) + ((_1933 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _1126)) * cbPerFrame._m0[3u].x));
    float _2109 = exp2(_2101 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1929 + ((isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0))) * _347))) + ((_1935 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _1126)) * cbPerFrame._m0[3u].x));
    float _2110 = exp2(_2101 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1931 + ((isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0))) * _347))) + ((_1937 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _1126)) * cbPerFrame._m0[3u].x));
    float _2119 = (_2098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2119 * (_2099 ? _2108 : (_2108 + (cbSceneParam._m0[72u].w * _2080)));
    SV_Target.y = _2119 * (_2099 ? _2109 : (_2109 + (cbSceneParam._m0[72u].w * _2082)));
    SV_Target.z = _2119 * (_2099 ? _2110 : (_2110 + (cbSceneParam._m0[72u].w * _2084)));
    SV_Target.w = _1962;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1962;
}


