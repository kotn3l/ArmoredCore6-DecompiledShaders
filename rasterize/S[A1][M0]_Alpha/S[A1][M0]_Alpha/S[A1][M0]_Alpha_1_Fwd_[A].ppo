#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _736;
float _2903;
float _2904;
float _2905;
float _2906;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    vec4 _185 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _185.w;
    float _189 = _188 * TEXCOORD_1.z;
    float _193 = inversesqrt(dot(vec3(_163, _164, _165), vec3(_163, _164, _165)));
    float _194 = _193 * _163;
    float _195 = _193 * _164;
    float _196 = _193 * _165;
    float _2915 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _198 = isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0));
    float _2926 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2937 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2948 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _217 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _275 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _276 = _269 * _275;
    float _277 = _270 * _275;
    float _278 = _271 * _275;
    vec4 _283 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _285 = _283.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _415 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _421 = (cbMatDynParam._m0[5u].x * _415) + cbMatDynParam._m0[5u].y;
        float _2959 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
        float _422 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _426 = (cbMatDynParam._m0[5u].z * _415) + cbMatDynParam._m0[5u].w;
        float _2970 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) - _422)) + _422) < ((_285 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _297 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _298 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _318 = fma(_196, cbSceneParam._m0[5u].z, fma(_195, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _194));
    float _321 = fma(_196, cbSceneParam._m0[6u].z, fma(_195, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _194));
    float _324 = fma(_196, cbSceneParam._m0[7u].z, fma(_195, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _194));
    uint _337 = uint(roundEven(NORMAL.w)) * 13u;
    uint _339 = _337 + 9u;
    uint _340 = _339 + uint(cbMatDynParam._m0[0u].w);
    float _346 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0)))) * cbInstanceData._m0[_340].x;
    float _347 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0)))) * cbInstanceData._m0[_340].y;
    float _348 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0)))) * cbInstanceData._m0[_340].z;
    float _2981 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _349 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
    float _2992 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
    float _3003 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
    vec4 _360 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _297, cbSceneParam._m0[86u].y * _298));
    float _363 = _360.x * TEXCOORD_1.w;
    float _364 = dot(vec3(_194, _195, _196), vec3(_276, _277, _278));
    float _367 = _364 * 2.0;
    float _372 = (_367 * _194) - _276;
    float _373 = (_367 * _195) - _277;
    float _374 = (_367 * _196) - _278;
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _735;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _460 = fma(_404, cbModelParam._m0[26u].z, fma(_400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _396));
        float _464 = fma(_404, cbModelParam._m0[27u].z, fma(_400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _396));
        float _468 = fma(_404, cbModelParam._m0[28u].z, fma(_400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _396));
        float _493 = _396 + _194;
        float _494 = _400 + _195;
        float _495 = _404 + _196;
        float _505 = fma(_495, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _493)) - _460;
        float _506 = fma(_495, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _493)) - _464;
        float _507 = fma(_495, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _493)) - _468;
        float _511 = inversesqrt(dot(vec3(_505, _506, _507), vec3(_505, _506, _507)));
        float _524 = ((_511 * _505) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_460 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _525 = ((_511 * _506) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_464 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _526 = ((_511 * _507) / cbModelParam._m0[34u].z) + ((((((_468 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        float _563 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_529.x + (-0.5));
        float _565 = _563 * (_529.y + (-0.5));
        float _566 = _563 * (_529.z + (-0.5));
        float _573 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_536.x + (-0.5));
        float _575 = _573 * (_536.y + (-0.5));
        float _576 = _573 * (_536.z + (-0.5));
        float _583 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_543.x + (-0.5));
        float _585 = _583 * (_543.y + (-0.5));
        float _586 = _583 * (_543.z + (-0.5));
        float _593 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_550.x + (-0.5));
        float _595 = _593 * (_550.y + (-0.5));
        float _596 = _593 * (_550.z + (-0.5));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = _564 * 0.5;
        float _601 = _574 * 0.5;
        float _602 = _584 * 0.5;
        float _603 = dot(vec3(_600, _601, _602), vec3(_600, _601, _602));
        float _608 = (_603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_603);
        float _617 = (dot(vec3(_194, _195, _196), vec3(_608 * _600, _608 * _601, _608 * _602)) + 1.0) * 0.5;
        float _3029 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _627 = sqrt(((_601 * _601) + (_600 * _600)) + (_602 * _602)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _3040 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _629 = _628 * 2.0;
        float _633 = (1.0 - _628) / (_628 + 1.0);
        float _3051 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _643 = ((((1.0 - _634) * (_629 + 2.0)) * exp2(log2(isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) * (_629 + 1.0))) + _634) * _597;
        float _644 = _565 * 0.5;
        float _645 = _575 * 0.5;
        float _646 = _585 * 0.5;
        float _647 = dot(vec3(_644, _645, _646), vec3(_644, _645, _646));
        float _652 = (_647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_647);
        float _660 = (dot(vec3(_194, _195, _196), vec3(_652 * _644, _652 * _645, _652 * _646)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _669 = sqrt(((_645 * _645) + (_644 * _644)) + (_646 * _646)) / (_598 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _671 = _670 * 2.0;
        float _675 = (1.0 - _670) / (_670 + 1.0);
        float _3084 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _685 = ((((1.0 - _676) * (_671 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_671 + 1.0))) + _676) * _598;
        float _686 = _566 * 0.5;
        float _687 = _576 * 0.5;
        float _688 = _586 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _702 = (dot(vec3(_194, _195, _196), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3095 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _711 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3106 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _713 = _712 * 2.0;
        float _717 = (1.0 - _712) / (_712 + 1.0);
        float _3117 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _727 = ((((1.0 - _718) * (_713 + 2.0)) * exp2(log2(isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))) * (_713 + 1.0))) + _718) * _599;
        _735 = _566;
        _737 = _565;
        _738 = _564;
        _739 = _576;
        _740 = _575;
        _741 = _574;
        _742 = _586;
        _743 = _585;
        _744 = _584;
        _745 = _599;
        _746 = _598;
        _747 = _597;
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0)));
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0)));
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0)));
    }
    else
    {
        _735 = _736;
        _737 = _736;
        _738 = _736;
        _739 = _736;
        _740 = _736;
        _741 = _736;
        _742 = _736;
        _743 = _736;
        _744 = _736;
        _745 = _736;
        _746 = _736;
        _747 = _736;
        _748 = 0.0;
        _749 = 0.0;
        _750 = 0.0;
    }
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _779 = fma(_404, cbModelParam._m0[30u].z, fma(_400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _396));
        float _783 = fma(_404, cbModelParam._m0[31u].z, fma(_400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _396));
        float _787 = fma(_404, cbModelParam._m0[32u].z, fma(_400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _396));
        float _810 = _396 + _194;
        float _811 = _400 + _195;
        float _812 = _404 + _196;
        float _822 = fma(_812, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810)) - _779;
        float _823 = fma(_812, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810)) - _783;
        float _824 = fma(_812, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810)) - _787;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_779 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_783 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[35u].z) + ((((((_787 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _878 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_845.x + (-0.5));
        float _880 = _878 * (_845.y + (-0.5));
        float _881 = _878 * (_845.z + (-0.5));
        float _888 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_852.x + (-0.5));
        float _890 = _888 * (_852.y + (-0.5));
        float _891 = _888 * (_852.z + (-0.5));
        float _898 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_859.x + (-0.5));
        float _900 = _898 * (_859.y + (-0.5));
        float _901 = _898 * (_859.z + (-0.5));
        float _908 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_866.x + (-0.5));
        float _910 = _908 * (_866.y + (-0.5));
        float _911 = _908 * (_866.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_194, _195, _196), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3180 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_942 + 1.0))) + _947) * _912;
        float _957 = _880 * 0.5;
        float _958 = _890 * 0.5;
        float _959 = _900 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_194, _195, _196), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3213 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_984 + 1.0))) + _989) * _913;
        float _999 = _881 * 0.5;
        float _1000 = _891 * 0.5;
        float _1001 = _901 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_194, _195, _196), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3224 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3235 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3246 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_1026 + 1.0))) + _1031) * _914;
        _1048 = _881;
        _1049 = _880;
        _1050 = _879;
        _1051 = _891;
        _1052 = _890;
        _1053 = _889;
        _1054 = _901;
        _1055 = _900;
        _1056 = _899;
        _1057 = _914;
        _1058 = _913;
        _1059 = _912;
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _736;
        _1049 = _736;
        _1050 = _736;
        _1051 = _736;
        _1052 = _736;
        _1053 = _736;
        _1054 = _736;
        _1055 = _736;
        _1056 = _736;
        _1057 = _736;
        _1058 = _736;
        _1059 = _736;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _748)) + _748;
    float _1073 = (cbModelParam._m0[1u].x * (_1061 - _749)) + _749;
    float _1074 = (cbModelParam._m0[1u].x * (_1062 - _750)) + _750;
    float _1095 = fma(_1074, cbSceneParam._m0[89u].z, fma(_1073, cbSceneParam._m0[89u].y, _1072 * cbSceneParam._m0[89u].x));
    float _1098 = fma(_1074, cbSceneParam._m0[90u].z, fma(_1073, cbSceneParam._m0[90u].y, _1072 * cbSceneParam._m0[90u].x));
    float _1101 = fma(_1074, cbSceneParam._m0[91u].z, fma(_1073, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1072));
    float _1116 = _372 * 0.5;
    float _1117 = _373 * 0.5;
    float _1118 = _374 * 0.5;
    float _1119 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1050, _1053, _1056, _1059));
    float _1122 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1049, _1052, _1055, _1058));
    float _1125 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1159;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1132 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_735, _739, _742, _745));
        float _1136 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_737, _740, _743, _746));
        float _1140 = dot(vec4(_1116, _1117, _1118, 1.0), vec4(_738, _741, _744, _747));
        float _1147 = dot(vec4(cbModelParam._m0[39u]), vec4(_1116, _1117, _1118, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1147) ? 0.0 : (isnan(0.0) ? _1147 : max(0.0, _1147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1170;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1161 = dot(vec4(cbModelParam._m0[40u]), vec4(_1116, _1117, _1118, 1.0));
        _1170 = dot(vec3(isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1161) ? 0.0 : (isnan(0.0) ? _1161 : max(0.0, _1161))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1170 = 1.0;
    }
    float _1174 = (_1170 * cbModelParam._m0[1u].x) + (_1159 * (1.0 - cbModelParam._m0[1u].x));
    float _1183 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1265;
    float _1267;
    float _1269;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1232 = fma(_404, cbModelParam._m0[13u].z, fma(_400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _396)) + cbModelParam._m0[13u].w;
        float _1236 = fma(_404, cbModelParam._m0[14u].z, fma(_400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _396)) + cbModelParam._m0[14u].w;
        float _1240 = fma(_404, cbModelParam._m0[15u].z, fma(_400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _396)) + cbModelParam._m0[15u].w;
        float _1243 = fma(_374, cbModelParam._m0[13u].z, fma(_373, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _372));
        float _1246 = fma(_374, cbModelParam._m0[14u].z, fma(_373, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _372));
        float _1249 = fma(_374, cbModelParam._m0[15u].z, fma(_373, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _372));
        float _1275;
        if (_1243 > 0.0)
        {
            _1275 = abs((1.0 - _1232) / _1243);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1232 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1275 = frontier_phi_17_15_ladder;
        }
        float _1483;
        if (_1246 > 0.0)
        {
            _1483 = abs((1.0 - _1236) / _1246);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1236 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1483 = frontier_phi_26_22_ladder;
        }
        float _1672;
        if (_1249 > 0.0)
        {
            _1672 = abs((1.0 - _1240) / _1249);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1240 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1672 = frontier_phi_38_33_ladder;
        }
        float _1674 = isnan(_1483) ? _1275 : (isnan(_1275) ? _1483 : min(_1275, _1483));
        float _1675 = isnan(_1672) ? _1674 : (isnan(_1674) ? _1672 : min(_1674, _1672));
        float _1679 = (_1675 * _1243) + _1232;
        float _1680 = (_1675 * _1246) + _1236;
        float _1681 = (_1675 * _1249) + _1240;
        float _1682 = _1675 * 9.9999997473787516355514526367188e-05;
        float _1684 = (-1.0) - _1682;
        float _1686 = _1682 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1681 > _1686) || ((_1681 < _1684) || ((_1680 > _1686) || ((_1680 < _1684) || ((_1679 < _1684) || (_1679 > _1686))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1681, cbModelParam._m0[9u].z, fma(_1680, cbModelParam._m0[9u].y, _1679 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1681, cbModelParam._m0[10u].z, fma(_1680, cbModelParam._m0[10u].y, _1679 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1681, cbModelParam._m0[11u].z, fma(_1680, cbModelParam._m0[11u].y, _1679 * cbModelParam._m0[11u].x))), _1183);
            frontier_phi_16_38_ladder = _1778.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1778.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1778.x * cbModelParam._m0[1u].y;
        }
        _1265 = frontier_phi_16_38_ladder_2;
        _1267 = frontier_phi_16_38_ladder_1;
        _1269 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_372, _373, _374), _1183);
        _1265 = _1253.x * cbModelParam._m0[1u].y;
        _1267 = _1253.y * cbModelParam._m0[1u].y;
        _1269 = _1253.z * cbModelParam._m0[1u].y;
    }
    float _1272 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1365;
    float _1367;
    float _1369;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1329 = fma(_404, cbModelParam._m0[21u].z, fma(_400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _396)) + cbModelParam._m0[21u].w;
        float _1333 = fma(_404, cbModelParam._m0[22u].z, fma(_400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _396)) + cbModelParam._m0[22u].w;
        float _1337 = fma(_404, cbModelParam._m0[23u].z, fma(_400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _396)) + cbModelParam._m0[23u].w;
        float _1340 = fma(_374, cbModelParam._m0[21u].z, fma(_373, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _372));
        float _1343 = fma(_374, cbModelParam._m0[22u].z, fma(_373, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _372));
        float _1346 = fma(_374, cbModelParam._m0[23u].z, fma(_373, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _372));
        float _1488;
        if (_1340 > 0.0)
        {
            _1488 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1488 = frontier_phi_28_24_ladder;
        }
        float _1699;
        if (_1343 > 0.0)
        {
            _1699 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1699 = frontier_phi_40_35_ladder;
        }
        float _1850;
        if (_1346 > 0.0)
        {
            _1850 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1850 = frontier_phi_49_46_ladder;
        }
        float _1852 = isnan(_1699) ? _1488 : (isnan(_1488) ? _1699 : min(_1488, _1699));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1340) + _1329;
        float _1858 = (_1853 * _1343) + _1333;
        float _1859 = (_1853 * _1346) + _1337;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1860;
        float _1863 = _1860 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1859 > _1863) || ((_1859 < _1861) || ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 < _1861) || (_1857 > _1863))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1859, cbModelParam._m0[17u].z, fma(_1858, cbModelParam._m0[17u].y, _1857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1859, cbModelParam._m0[18u].z, fma(_1858, cbModelParam._m0[18u].y, _1857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1859, cbModelParam._m0[19u].z, fma(_1858, cbModelParam._m0[19u].y, _1857 * cbModelParam._m0[19u].x))), _1272);
            frontier_phi_25_49_ladder = _2060.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2060.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2060.x * cbModelParam._m0[1u].z;
        }
        _1365 = frontier_phi_25_49_ladder_2;
        _1367 = frontier_phi_25_49_ladder_1;
        _1369 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_372, _373, _374), _1272);
        _1365 = _1349.x * cbModelParam._m0[1u].z;
        _1367 = _1349.y * cbModelParam._m0[1u].z;
        _1369 = _1349.z * cbModelParam._m0[1u].z;
    }
    float _1381 = _363 * 0.01200000010430812835693359375;
    float _1383 = _1381 * ((cbModelParam._m0[1u].w * (_1365 - _1265)) + _1265);
    float _1384 = _1381 * ((cbModelParam._m0[1u].w * (_1367 - _1267)) + _1267);
    float _1385 = _1381 * ((cbModelParam._m0[1u].w * (_1369 - _1269)) + _1269);
    float _1388 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, _1383 * cbSceneParam._m0[91u].x));
    uvec4 _1404 = floatBitsToUint(cbInstanceData._m0[_337 + 5u]);
    uint _1406 = _1404.x * 14u;
    uint _1407 = _1406 + 13u;
    float _1414 = _363 + (-1.0);
    float _1420 = (cbLight._m0[_1407].x * _1414) + 1.0;
    float _1421 = (cbLight._m0[_1407].y * _1414) + 1.0;
    float _1422 = (cbLight._m0[_1407].z * _1414) + 1.0;
    float _1423 = (cbLight._m0[_1407].w * _1414) + 1.0;
    uint _1424 = _1406 + 5u;
    float _1430 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
    uint _1434 = _1406 + 4u;
    float _1441 = isnan(1.0) ? _1420 : (isnan(_1420) ? 1.0 : min(_1420, 1.0));
    uint _1445 = _1406 | 1u;
    float _1456 = dot(vec3(cbLight._m0[_1406].xyz), vec3(_194, _195, _196));
    float _1459 = dot(vec3(cbLight._m0[_1445].xyz), vec3(_194, _195, _196));
    float _3382 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
    float _3393 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
    float _1464 = (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * 0.3183098733425140380859375;
    float _1466 = (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.3183098733425140380859375;
    float _1473 = ((cbLight._m0[_1424].x * _1430) * _1466) + ((cbLight._m0[_1434].x * _1441) * _1464);
    float _1474 = ((_1430 * cbLight._m0[_1424].y) * _1466) + ((_1441 * cbLight._m0[_1434].y) * _1464);
    float _1475 = ((_1430 * cbLight._m0[_1424].z) * _1466) + ((_1441 * cbLight._m0[_1434].z) * _1464);
    uvec4 _1480 = floatBitsToUint(cbLight._m0[_1406 + 12u]);
    bool _1482 = _1480.x == 0u;
    float _1493;
    float _1495;
    float _1497;
    if (_1482)
    {
        _1493 = _1473;
        _1495 = _1474;
        _1497 = _1475;
    }
    else
    {
        uint _1501 = _1406 + 6u;
        float _1517 = (dot(vec3(cbLight._m0[_1406 + 2u].xyz), vec3(_194, _195, _196)) * 0.5) + 0.5;
        float _1518 = _1517 * _1517;
        float _3404 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1520 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
        _1493 = (((cbLight._m0[_1501].x * 0.3183098733425140380859375) * _1519) * _1520) + _1473;
        _1495 = (((cbLight._m0[_1501].y * 0.3183098733425140380859375) * _1519) * _1520) + _1474;
        _1497 = (((cbLight._m0[_1501].z * 0.3183098733425140380859375) * _1519) * _1520) + _1475;
    }
    bool _1500 = _1480.y == 0u;
    float _1538;
    float _1540;
    float _1542;
    if (_1500)
    {
        _1538 = _1493;
        _1540 = _1495;
        _1542 = _1497;
    }
    else
    {
        uint _1643 = _1406 + 7u;
        float _1659 = (dot(vec3(cbLight._m0[_1406 + 3u].xyz), vec3(_194, _195, _196)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3420 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1662 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1538 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1493;
        _1540 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1495;
        _1542 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1497;
    }
    uint _1544 = _1406 + 8u;
    float _1550 = cbLight._m0[_1406].x + _276;
    float _1551 = cbLight._m0[_1406].y + _277;
    float _1552 = cbLight._m0[_1406].z + _278;
    float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
    float _1560 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1406].xyz));
    float _3436 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1563 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _1564 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _1565 = dot(vec3(cbLight._m0[_1406].xyz), vec3(_1550 * _1556, _1551 * _1556, _1552 * _1556));
    float _3458 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1576 = (exp2(log2(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1582 = (0.5 / ((_1563 + 9.9999999392252902907785028219223e-09) + _1564)) * _1563;
    float _3469 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1584 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.31831014156341552734375;
    uint _1595 = _1406 + 9u;
    float _1601 = cbLight._m0[_1445].x + _276;
    float _1602 = cbLight._m0[_1445].y + _277;
    float _1603 = cbLight._m0[_1445].z + _278;
    float _1607 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
    float _1611 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1445].xyz));
    float _3480 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1614 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _1615 = dot(vec3(cbLight._m0[_1445].xyz), vec3(_1601 * _1607, _1602 * _1607, _1603 * _1607));
    float _3491 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1624 = (exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1628 = (0.5 / ((_1614 + 9.9999999392252902907785028219223e-09) + _1564)) * _1614;
    float _3502 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1630 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.31831014156341552734375;
    float _1640 = (((_1624 * cbLight._m0[_1595].x) * _1630) * _1430) + (((_1576 * cbLight._m0[_1544].x) * _1584) * _1441);
    float _1641 = (((_1624 * cbLight._m0[_1595].y) * _1630) * _1430) + (((_1576 * cbLight._m0[_1544].y) * _1584) * _1441);
    float _1642 = (((_1624 * cbLight._m0[_1595].z) * _1630) * _1430) + (((_1576 * cbLight._m0[_1544].z) * _1584) * _1441);
    float _1704;
    float _1706;
    float _1708;
    if (_1482)
    {
        _1704 = _1640;
        _1706 = _1641;
        _1708 = _1642;
    }
    else
    {
        uint _1710 = _1406 + 10u;
        uint _1716 = _1406 + 2u;
        float _1722 = cbLight._m0[_1716].x + _276;
        float _1723 = cbLight._m0[_1716].y + _277;
        float _1724 = cbLight._m0[_1716].z + _278;
        float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
        float _1732 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1716].xyz));
        float _3513 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1735 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1736 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1722 * _1728, _1723 * _1728, _1724 * _1728));
        float _3524 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1749 = (0.5 / ((_1735 + 9.9999999392252902907785028219223e-09) + _1564)) * _1735;
        float _3535 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1751 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
        float _1752 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
        _1704 = (((_1745 * cbLight._m0[_1710].x) * _1751) * _1752) + _1640;
        _1706 = (((_1745 * cbLight._m0[_1710].y) * _1751) * _1752) + _1641;
        _1708 = (((_1745 * cbLight._m0[_1710].z) * _1751) * _1752) + _1642;
    }
    float _1787;
    float _1789;
    float _1791;
    if (_1500)
    {
        _1787 = _1704;
        _1789 = _1706;
        _1791 = _1708;
    }
    else
    {
        uint _1798 = _1406 + 11u;
        uint _1804 = _1406 + 3u;
        float _1810 = cbLight._m0[_1804].x + _276;
        float _1811 = cbLight._m0[_1804].y + _277;
        float _1812 = cbLight._m0[_1804].z + _278;
        float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
        float _1820 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1804].xyz));
        float _3551 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1823 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1824 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_1810 * _1816, _1811 * _1816, _1812 * _1816));
        float _3562 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1837 = (0.5 / ((_1823 + 9.9999999392252902907785028219223e-09) + _1564)) * _1823;
        float _3573 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1839 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
        float _1840 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1787 = (((_1833 * cbLight._m0[_1798].x) * _1839) * _1840) + _1704;
        _1789 = (((_1833 * cbLight._m0[_1798].y) * _1839) * _1840) + _1706;
        _1791 = (((_1833 * cbLight._m0[_1798].z) * _1839) * _1840) + _1708;
    }
    float _1975;
    float _1977;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    if (_1404.y == 0u)
    {
        float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1915;
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1915;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1915;
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.x;
        uint _1942 = uint((float(_1930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _298) / _1931))) + floor(float(uint(cbSceneParam._m0[85u].x * _297) / _1931)));
        float _1952 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1953 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        uint _1956 = uint(isnan(14.0) ? _1953 : (isnan(_1953) ? 14.0 : min(_1953, 14.0)));
        uvec4 _1961 = texelFetch(g_lightClusterGridBuffer, int(((_1956 << 2u) + (_1942 << 6u)) >> 2u));
        uint _1962 = _1961.x;
        uint _1963 = _1930.z;
        float _2065;
        float _2067;
        float _2069;
        float _2071;
        float _2073;
        float _2075;
        if (((((1u << ((_1963 >> 4u) & 15u)) + 4294967295u) & _1962) == 0u) || ((_1963 & 240u) == 0u))
        {
            _2065 = 0.0;
            _2067 = 0.0;
            _2069 = 0.0;
            _2071 = 0.0;
            _2073 = 0.0;
            _2075 = 0.0;
        }
        else
        {
            float _2066;
            float _2068;
            float _2070;
            float _2072;
            float _2074;
            float _2076;
            float _2217 = 0.0;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            uint _2223 = 0u;
            uint _2232;
            bool _2233;
            for (;;)
            {
                _2232 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2223 << 2u)) >> 2u)).x;
                _2233 = _2232 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2233)
                {
                    frontier_phi_66_pred = _2217;
                    frontier_phi_66_pred_1 = _2222;
                    frontier_phi_66_pred_2 = _2221;
                    frontier_phi_66_pred_3 = _2220;
                    frontier_phi_66_pred_4 = _2219;
                    frontier_phi_66_pred_5 = _2218;
                }
                else
                {
                    float _2362;
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    uint _2368;
                    _2362 = _2217;
                    _2363 = _2218;
                    _2364 = _2219;
                    _2365 = _2220;
                    _2366 = _2221;
                    _2367 = _2222;
                    _2368 = _2232;
                    float _2289;
                    float _2290;
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    for (;;)
                    {
                        uint _2372 = uint(findLSB(_2368)) + (_2223 << 5u);
                        uint _2369 = (_2368 + 4294967295u) & _2368;
                        uint _2374 = _2372 * 48u;
                        vec4 _2388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2374)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 3u)).x));
                        uint _2394 = (_2372 * 48u) + 4u;
                        vec4 _2407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2394)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 3u)).x));
                        uint _2413 = (_2372 * 48u) + 8u;
                        vec3 _2424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2413)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 2u)).x));
                        float _2428 = _2388.x - _1916;
                        float _2429 = _2388.y - _1917;
                        float _2430 = _2388.z - _1918;
                        float _2431 = dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430));
                        float _2434 = inversesqrt(_2431);
                        float _2443 = 1.0 - (_2431 * _2388.w);
                        float _3599 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
                        float _2444 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                        float _2445 = sqrt(_2431) * _2407.w;
                        float _2448 = 1.39999997615814208984375 / (_2445 + 1.39999997615814208984375);
                        float _2449 = _2448 * _2448;
                        float _2452 = ((1.0 - _2449) * dot(vec3(_318, _321, _324), vec3(_2434 * _2428, _2434 * _2429, _2434 * _2430))) + _2449;
                        float _2455 = _2445 * _2445;
                        float _2459 = ((isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0))) * _2444) / ((_2455 * 0.699999988079071044921875) + 1.0);
                        float _2463 = (-0.0) - _1916;
                        float _2464 = (-0.0) - _1917;
                        float _2465 = (-0.0) - _1918;
                        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
                        float _2473 = dot(vec3(_318, _321, _324), vec3(_2469 * _2463, _2469 * _2464, _2469 * _2465));
                        float _3615 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _3626 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                        float _2477 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                        float _2481 = (0.5 / (((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) + 9.9999999392252902907785028219223e-09) + _2477)) * _2477;
                        float _3637 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
                        float _2490 = (((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 3.1415927410125732421875) / ((_2455 * 2.1991131305694580078125) + 3.141590118408203125)) * _2444;
                        _2292 = (_2459 * _2407.x) + _2365;
                        _2293 = (_2459 * _2407.y) + _2366;
                        _2294 = (_2459 * _2407.z) + _2367;
                        _2289 = (_2490 * _2424.x) + _2362;
                        _2290 = (_2490 * _2424.y) + _2363;
                        _2291 = (_2490 * _2424.z) + _2364;
                        if (_2369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2362 = _2289;
                            _2363 = _2290;
                            _2364 = _2291;
                            _2365 = _2292;
                            _2366 = _2293;
                            _2367 = _2294;
                            _2368 = _2369;
                        }
                    }
                    frontier_phi_66_pred = _2289;
                    frontier_phi_66_pred_1 = _2294;
                    frontier_phi_66_pred_2 = _2293;
                    frontier_phi_66_pred_3 = _2292;
                    frontier_phi_66_pred_4 = _2291;
                    frontier_phi_66_pred_5 = _2290;
                }
                _2066 = frontier_phi_66_pred;
                _2076 = frontier_phi_66_pred_1;
                _2074 = frontier_phi_66_pred_2;
                _2072 = frontier_phi_66_pred_3;
                _2070 = frontier_phi_66_pred_4;
                _2068 = frontier_phi_66_pred_5;
                uint _2224 = _2223 + 1u;
                if (_2224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2217 = _2066;
                    _2218 = _2068;
                    _2219 = _2070;
                    _2220 = _2072;
                    _2221 = _2074;
                    _2222 = _2076;
                    _2223 = _2224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2065 = _2066;
            _2067 = _2068;
            _2069 = _2070;
            _2071 = _2072;
            _2073 = _2074;
            _2075 = _2076;
        }
        uvec4 _2079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2080 = _2079.z;
        uint _2082 = (_2080 >> 8u) & 15u;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        if (((4294967295u << _2082) & _1962) == 0u)
        {
            _2188 = _2065;
            _2190 = _2067;
            _2192 = _2069;
            _2194 = _2071;
            _2196 = _2073;
            _2198 = _2075;
        }
        else
        {
            float _2213 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2082 < ((_2080 >> 12u) & 15u))
            {
                float _2189;
                float _2191;
                float _2193;
                float _2195;
                float _2197;
                float _2199;
                float _2345 = _2065;
                float _2346 = _2067;
                float _2347 = _2069;
                float _2348 = _2071;
                float _2349 = _2073;
                float _2350 = _2075;
                uint _2351 = _2082;
                uint _2360;
                bool _2361;
                for (;;)
                {
                    _2360 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2351 << 2u)) >> 2u)).x;
                    _2361 = _2360 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2361)
                    {
                        frontier_phi_77_pred = _2350;
                        frontier_phi_77_pred_1 = _2349;
                        frontier_phi_77_pred_2 = _2348;
                        frontier_phi_77_pred_3 = _2347;
                        frontier_phi_77_pred_4 = _2346;
                        frontier_phi_77_pred_5 = _2345;
                    }
                    else
                    {
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2517 = _2345;
                        float _2518 = _2346;
                        float _2519 = _2347;
                        float _2520 = _2348;
                        float _2521 = _2349;
                        float _2522 = _2350;
                        uint _2523 = _2360;
                        uint _2524;
                        vec4 _2549;
                        float _2550;
                        vec4 _2565;
                        vec3 _2577;
                        vec4 _2593;
                        vec4 _2609;
                        float _2656;
                        bool _2657;
                        for (;;)
                        {
                            uint _2534 = ((_2351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2523));
                            _2524 = (_2523 + 4294967295u) & _2523;
                            uint _2536 = _2534 * 40u;
                            _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            _2550 = _2549.w;
                            uint _2552 = (_2534 * 40u) + 4u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2567 = (_2534 * 40u) + 8u;
                            _2577 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x));
                            uint _2580 = (_2534 * 40u) + 16u;
                            _2593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 3u)).x));
                            uint _2596 = (_2534 * 40u) + 20u;
                            _2609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 3u)).x));
                            uint _2612 = (_2534 * 40u) + 24u;
                            vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 3u)).x));
                            uint _2631 = (_2534 * 40u) + 28u;
                            vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            _2656 = fma(_1918, _2644.z, fma(_1917, _2644.y, _2644.x * _1916)) + _2644.w;
                            _2657 = !((fma(_1918, _2625.z, fma(_1917, _2625.y, _2625.x * _1916)) + _2625.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2657)
                            {
                                float _2684 = _2549.x - _1916;
                                float _2685 = _2549.y - _1917;
                                float _2686 = _2549.z - _1918;
                                float _2687 = dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686));
                                float _2690 = inversesqrt(_2687);
                                float _2691 = _2690 * _2684;
                                float _2692 = _2690 * _2685;
                                float _2693 = _2690 * _2686;
                                float _2697 = 1.0 - (_2687 / (_2550 * _2550));
                                float _3648 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                                float _2698 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                                float _2702 = sqrt(_2687) * _2565.w;
                                float _2704 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                                float _2705 = _2704 * _2704;
                                float _2706 = 1.0 - _2705;
                                float _2708 = (_2706 * dot(vec3(_2691, _2692, _2693), vec3(_318, _321, _324))) + _2705;
                                float _2711 = _2702 * _2702;
                                float _2715 = (fma(_1918, _2593.z, fma(_1917, _2593.y, _2593.x * _1916)) + _2593.w) / _2656;
                                float _2716 = (fma(_1918, _2609.z, fma(_1917, _2609.y, _2609.x * _1916)) + _2609.w) / _2656;
                                float _2720 = 1.0 - dot(vec2(_2715, _2716), vec2(_2715, _2716));
                                float _3664 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                                float _2721 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                                float _2722 = _2721 * (((isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))) * _2698) / ((_2711 * 0.699999988079071044921875) + 1.0));
                                float _2732 = dot(vec3(_318, _321, _324), vec3((-0.0) - (_1916 * _2213), (-0.0) - (_1917 * _2213), (-0.0) - (_1918 * _2213)));
                                float _3675 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2740 = (_2706 * dot(vec3(_318, _321, _324), vec3(_2691, _2692, _2693))) + _2705;
                                float _3686 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                                float _2741 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                                float _2745 = (0.5 / (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) + 9.9999999392252902907785028219223e-09) + _2741)) * _2741;
                                float _3697 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2752 = (_2721 * _2698) * (((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 3.1415927410125732421875) / ((_2711 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2722 * _2565.y;
                                frontier_phi_83_pred_1 = _2722 * _2565.x;
                                frontier_phi_83_pred_2 = _2752 * _2577.z;
                                frontier_phi_83_pred_3 = _2752 * _2577.y;
                                frontier_phi_83_pred_4 = _2752 * _2577.x;
                                frontier_phi_83_pred_5 = _2722 * _2565.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2760 = frontier_phi_83_pred;
                            _2759 = frontier_phi_83_pred_1;
                            _2758 = frontier_phi_83_pred_2;
                            _2757 = frontier_phi_83_pred_3;
                            _2756 = frontier_phi_83_pred_4;
                            _2761 = frontier_phi_83_pred_5;
                            _2507 = _2759 + _2520;
                            _2508 = _2760 + _2521;
                            _2509 = _2761 + _2522;
                            _2504 = _2756 + _2517;
                            _2505 = _2757 + _2518;
                            _2506 = _2758 + _2519;
                            if (_2524 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2517 = _2504;
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2524;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2509;
                        frontier_phi_77_pred_1 = _2508;
                        frontier_phi_77_pred_2 = _2507;
                        frontier_phi_77_pred_3 = _2506;
                        frontier_phi_77_pred_4 = _2505;
                        frontier_phi_77_pred_5 = _2504;
                    }
                    _2199 = frontier_phi_77_pred;
                    _2197 = frontier_phi_77_pred_1;
                    _2195 = frontier_phi_77_pred_2;
                    _2193 = frontier_phi_77_pred_3;
                    _2191 = frontier_phi_77_pred_4;
                    _2189 = frontier_phi_77_pred_5;
                    uint _2352 = _2351 + 1u;
                    if (_2352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2345 = _2189;
                        _2346 = _2191;
                        _2347 = _2193;
                        _2348 = _2195;
                        _2349 = _2197;
                        _2350 = _2199;
                        _2351 = _2352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2193;
                frontier_phi_58_59_ladder_1 = _2199;
                frontier_phi_58_59_ladder_2 = _2197;
                frontier_phi_58_59_ladder_3 = _2195;
                frontier_phi_58_59_ladder_4 = _2191;
                frontier_phi_58_59_ladder_5 = _2189;
            }
            else
            {
                frontier_phi_58_59_ladder = _2069;
                frontier_phi_58_59_ladder_1 = _2075;
                frontier_phi_58_59_ladder_2 = _2073;
                frontier_phi_58_59_ladder_3 = _2071;
                frontier_phi_58_59_ladder_4 = _2067;
                frontier_phi_58_59_ladder_5 = _2065;
            }
            _2188 = frontier_phi_58_59_ladder_5;
            _2190 = frontier_phi_58_59_ladder_4;
            _2192 = frontier_phi_58_59_ladder;
            _2194 = frontier_phi_58_59_ladder_3;
            _2196 = frontier_phi_58_59_ladder_2;
            _2198 = frontier_phi_58_59_ladder_1;
        }
        float _2203 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
        _1975 = (_2203 * _2194) + _1538;
        _1977 = (_2203 * _2196) + _1540;
        _1979 = (_2203 * _2198) + _1542;
        _1981 = ((_2188 * 0.039999999105930328369140625) * _2203) + _1787;
        _1983 = ((_2190 * 0.039999999105930328369140625) * _2203) + _1789;
        _1985 = ((_2192 * 0.039999999105930328369140625) * _2203) + _1791;
    }
    else
    {
        _1975 = _1538;
        _1977 = _1540;
        _1979 = _1542;
        _1981 = _1787;
        _1983 = _1789;
        _1985 = _1791;
    }
    float _3713 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3724 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3735 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3746 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _2003 = ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1975 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _363))) + ((_1981 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1174)) * cbPerFrame._m0[3u].x);
    float _2004 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1977 + ((isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0))) * _363))) + ((_1983 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1174)) * cbPerFrame._m0[3u].x);
    float _2005 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1979 + ((isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))) * _363))) + ((_1985 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1174)) * cbPerFrame._m0[3u].x);
    float _2010 = cbInstanceData._m0[_337 + 6u].w * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)));
    float _2015 = _297 / cbSceneParam._m0[86u].x;
    float _2016 = _298 / cbSceneParam._m0[86u].y;
    vec4 _2030 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2015, _2016, (log2((isnan(cbSceneParam._m0[77u].w) ? _217 : (isnan(_217) ? cbSceneParam._m0[77u].w : min(_217, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2032 = _2030.x;
    float _2033 = _2030.y;
    float _2034 = _2030.z;
    float _2035 = _2030.w;
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    if (_217 > cbSceneParam._m0[78u].w)
    {
        float _2090 = isnan(_217) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _217 : min(cbSceneParam._m0[80u].w, _217));
        float _2091 = _2090 / _217;
        float _2102 = _2091 * _269;
        float _2103 = _270 * _2091;
        float _2104 = (-0.0) - _2103;
        float _2106 = _2091 * _271;
        float _2108 = (cbSceneParam._m0[77u].w * _2104) / _2090;
        float _2109 = _2108 + cbSceneParam._m0[79u].w;
        float _2110 = cbSceneParam._m0[79u].w - _2103;
        float _2116 = sqrt(((_2102 * _2102) + (_2103 * _2103)) + (_2106 * _2106));
        float _2119 = (1.0 - (cbSceneParam._m0[77u].w / _2090)) * _2116;
        float _2124 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2126 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2302;
        if (abs((_2104 - _2108) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2302 = ((((_2109 > 0.0) ? exp2(_2124 * _2109) : (2.0 - exp2(_2126 * _2109))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2119;
        }
        else
        {
            float _2246 = 1.0 / cbSceneParam._m0[80u].x;
            float _2247 = isnan(_2110) ? _2109 : (isnan(_2109) ? _2110 : max(_2109, _2110));
            float _2248 = isnan(_2110) ? _2109 : (isnan(_2109) ? _2110 : min(_2109, _2110));
            float _2257 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : min(_2247, 0.0));
            float _2258 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : min(_2248, 0.0));
            _2302 = ((abs(_2116 / _2104) * cbSceneParam._m0[80u].y) * ((((_2257 - _2258) * 2.0) - ((exp2(_2124 * (isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0)))) - exp2(_2124 * (isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))))) * _2246)) - ((exp2(_2126 * _2257) - exp2(_2126 * _2258)) * _2246))) + (_2119 * cbSceneParam._m0[80u].z);
        }
        vec4 _2304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2015, _2016, 1.0), 0.0);
        float _2313 = exp2((_2302 * (-1.44269502162933349609375)) * (1.0 - _2304.w));
        float _2314 = log2(_2313);
        float _2330 = log2(_2035);
        _2128 = (exp2(_2330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].x)) * _2304.x) / cbSceneParam._m0[78u].x)) + _2032;
        _2130 = (exp2(_2330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].y)) * _2304.y) / cbSceneParam._m0[78u].y)) + _2033;
        _2132 = (exp2(_2330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].z)) * _2304.z) / cbSceneParam._m0[78u].z)) + _2034;
        _2134 = _2313 * _2035;
    }
    else
    {
        _2128 = _2032;
        _2130 = _2033;
        _2132 = _2034;
        _2134 = _2035;
    }
    bool _2340;
    vec4 _2144;
    vec4 _2167;
    float _2169;
    float _2173;
    float _2174;
    float _2175;
    float _2176;
    bool _2187;
    for (;;)
    {
        _2144 = cbMatDynParam._m0[0u];
        float _2146 = roundEven(_2144.y);
        bool _2147 = _2146 == 3.0;
        float _2149 = log2(_2134);
        float _2156 = exp2(_2149 * cbSceneParam._m0[78u].x) * _2003;
        float _2157 = exp2(_2149 * cbSceneParam._m0[78u].y) * _2004;
        float _2158 = exp2(_2149 * cbSceneParam._m0[78u].z) * _2005;
        float _2165 = _285 + (-0.5);
        _2167 = cbMtdParam._m0[1u];
        _2169 = _2167.y * _2165;
        float _2172 = (_2146 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2173 = _2172 * (_2147 ? _2156 : (_2156 + (cbSceneParam._m0[72u].w * _2128)));
        _2174 = _2172 * (_2147 ? _2157 : (_2157 + (cbSceneParam._m0[72u].w * _2130)));
        _2175 = _2172 * (_2147 ? _2158 : (_2158 + (cbSceneParam._m0[72u].w * _2132)));
        _2176 = _2165 * 0.999000012874603271484375;
        _2187 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2187)
        {
            if ((cbInstanceData._m0[_337 + 7u].x + _2176) < 0.5)
            {
                _2340 = true;
                break;
            }
        }
        uint _2281 = _339 + uint(_2144.w);
        if ((cbInstanceData._m0[_2281].w < 1.0) && ((cbInstanceData._m0[_2281].w + _2176) < 0.5))
        {
            _2340 = true;
            break;
        }
        if ((_2169 + _188) < _2167.x)
        {
            _2340 = true;
            break;
        }
        _2340 = false;
        break;
    }
    float _2495;
    if (_2340)
    {
        discard_state = true;
        _2495 = 0.0;
    }
    else
    {
        _2495 = _2010;
    }
    SV_Target.x = _2173;
    SV_Target.y = _2174;
    SV_Target.z = _2175;
    SV_Target.w = _2495;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2010;
    discard_exit();
}


