#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _699;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    vec4 _183 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _183.x * cbMtdParam._m0[9u].x;
    float _191 = _183.y * cbMtdParam._m0[9u].y;
    float _192 = _183.z * cbMtdParam._m0[9u].z;
    float _193 = _183.w * TEXCOORD_1.z;
    float _197 = inversesqrt(dot(vec3(_161, _162, _163), vec3(_161, _162, _163)));
    float _198 = _197 * _161;
    float _199 = _197 * _162;
    float _200 = _197 * _163;
    float _2835 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _202 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
    float _2846 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2857 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2868 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _221 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _279 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _280 = _273 * _279;
    float _281 = _274 * _279;
    float _282 = _275 * _279;
    float _288 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _289 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _310 = fma(_200, cbSceneParam._m0[5u].z, fma(_199, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _198));
    float _313 = fma(_200, cbSceneParam._m0[6u].z, fma(_199, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _198));
    float _316 = fma(_200, cbSceneParam._m0[7u].z, fma(_199, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _198));
    uint _329 = uint(roundEven(NORMAL.w)) * 13u;
    uint _332 = (_329 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _338 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0)))) * cbInstanceData._m0[_332].x;
    float _339 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) * cbInstanceData._m0[_332].y;
    float _340 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * cbInstanceData._m0[_332].z;
    float _2879 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _341 = isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0));
    float _2890 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _342 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _343 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    vec4 _352 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _288, cbSceneParam._m0[86u].y * _289));
    float _355 = _352.x * TEXCOORD_1.w;
    float _356 = dot(vec3(_198, _199, _200), vec3(_280, _281, _282));
    float _359 = _356 * 2.0;
    float _364 = (_359 * _198) - _280;
    float _365 = (_359 * _199) - _281;
    float _366 = (_359 * _200) - _282;
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _698;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _423 = fma(_396, cbModelParam._m0[26u].z, fma(_392, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _388));
        float _427 = fma(_396, cbModelParam._m0[27u].z, fma(_392, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _388));
        float _431 = fma(_396, cbModelParam._m0[28u].z, fma(_392, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _388));
        float _456 = _388 + _198;
        float _457 = _392 + _199;
        float _458 = _396 + _200;
        float _468 = fma(_458, cbModelParam._m0[26u].z, fma(_457, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _456)) - _423;
        float _469 = fma(_458, cbModelParam._m0[27u].z, fma(_457, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _456)) - _427;
        float _470 = fma(_458, cbModelParam._m0[28u].z, fma(_457, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _456)) - _431;
        float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
        float _487 = ((_474 * _468) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_423 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _488 = ((_474 * _469) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_427 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _489 = ((_474 * _470) / cbModelParam._m0[34u].z) + ((((((_431 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _492 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_487, _488, _489), 0.0);
        vec4 _499 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_487, _488, _489), 0.0);
        vec4 _506 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_487, _488, _489), 0.0);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_487, _488, _489), 0.0);
        float _526 = exp2((_492.w + (-0.5)) * 20.0) * 2.0;
        float _527 = _526 * (_492.x + (-0.5));
        float _528 = _526 * (_492.y + (-0.5));
        float _529 = _526 * (_492.z + (-0.5));
        float _536 = exp2((_499.w + (-0.5)) * 20.0) * 2.0;
        float _537 = _536 * (_499.x + (-0.5));
        float _538 = _536 * (_499.y + (-0.5));
        float _539 = _536 * (_499.z + (-0.5));
        float _546 = exp2((_506.w + (-0.5)) * 20.0) * 2.0;
        float _547 = _546 * (_506.x + (-0.5));
        float _548 = _546 * (_506.y + (-0.5));
        float _549 = _546 * (_506.z + (-0.5));
        float _556 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _557 = _556 * (_513.x + (-0.5));
        float _558 = _556 * (_513.y + (-0.5));
        float _559 = _556 * (_513.z + (-0.5));
        float _560 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _561 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _562 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        float _563 = _527 * 0.5;
        float _564 = _537 * 0.5;
        float _565 = _547 * 0.5;
        float _566 = dot(vec3(_563, _564, _565), vec3(_563, _564, _565));
        float _571 = (_566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_566);
        float _580 = (dot(vec3(_198, _199, _200), vec3(_571 * _563, _571 * _564, _571 * _565)) + 1.0) * 0.5;
        float _2927 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _590 = sqrt(((_564 * _564) + (_563 * _563)) + (_565 * _565)) / (_560 + 9.9999997473787516355514526367188e-06);
        float _2938 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _592 = _591 * 2.0;
        float _596 = (1.0 - _591) / (_591 + 1.0);
        float _2949 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _597 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _606 = ((((1.0 - _597) * (_592 + 2.0)) * exp2(log2(isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * (_592 + 1.0))) + _597) * _560;
        float _607 = _528 * 0.5;
        float _608 = _538 * 0.5;
        float _609 = _548 * 0.5;
        float _610 = dot(vec3(_607, _608, _609), vec3(_607, _608, _609));
        float _615 = (_610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_610);
        float _623 = (dot(vec3(_198, _199, _200), vec3(_615 * _607, _615 * _608, _615 * _609)) + 1.0) * 0.5;
        float _2960 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _632 = sqrt(((_608 * _608) + (_607 * _607)) + (_609 * _609)) / (_561 + 9.9999997473787516355514526367188e-06);
        float _2971 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _634 = _633 * 2.0;
        float _638 = (1.0 - _633) / (_633 + 1.0);
        float _2982 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _648 = ((((1.0 - _639) * (_634 + 2.0)) * exp2(log2(isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (_634 + 1.0))) + _639) * _561;
        float _649 = _529 * 0.5;
        float _650 = _539 * 0.5;
        float _651 = _549 * 0.5;
        float _652 = dot(vec3(_649, _650, _651), vec3(_649, _650, _651));
        float _657 = (_652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_652);
        float _665 = (dot(vec3(_198, _199, _200), vec3(_657 * _649, _657 * _650, _657 * _651)) + 1.0) * 0.5;
        float _2993 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _674 = sqrt(((_650 * _650) + (_649 * _649)) + (_651 * _651)) / (_562 + 9.9999997473787516355514526367188e-06);
        float _3004 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _676 = _675 * 2.0;
        float _680 = (1.0 - _675) / (_675 + 1.0);
        float _3015 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _690 = ((((1.0 - _681) * (_676 + 2.0)) * exp2(log2(isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * (_676 + 1.0))) + _681) * _562;
        _698 = _529;
        _700 = _528;
        _701 = _527;
        _702 = _539;
        _703 = _538;
        _704 = _537;
        _705 = _549;
        _706 = _548;
        _707 = _547;
        _708 = _562;
        _709 = _561;
        _710 = _560;
        _711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0)));
        _712 = cbModelParam._m0[36u].z * (isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0)));
        _713 = cbModelParam._m0[36u].z * (isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0)));
    }
    else
    {
        _698 = _699;
        _700 = _699;
        _701 = _699;
        _702 = _699;
        _703 = _699;
        _704 = _699;
        _705 = _699;
        _706 = _699;
        _707 = _699;
        _708 = _699;
        _709 = _699;
        _710 = _699;
        _711 = 0.0;
        _712 = 0.0;
        _713 = 0.0;
    }
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _739 = fma(_396, cbModelParam._m0[30u].z, fma(_392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _388));
        float _743 = fma(_396, cbModelParam._m0[31u].z, fma(_392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _388));
        float _747 = fma(_396, cbModelParam._m0[32u].z, fma(_392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _388));
        float _770 = _388 + _198;
        float _771 = _392 + _199;
        float _772 = _396 + _200;
        float _782 = fma(_772, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770)) - _739;
        float _783 = fma(_772, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770)) - _743;
        float _784 = fma(_772, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770)) - _747;
        float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
        float _801 = ((_788 * _782) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_739 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_788 * _783) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_743 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_788 * _784) / cbModelParam._m0[35u].z) + ((((((_747 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        float _838 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_805.x + (-0.5));
        float _840 = _838 * (_805.y + (-0.5));
        float _841 = _838 * (_805.z + (-0.5));
        float _848 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_812.x + (-0.5));
        float _850 = _848 * (_812.y + (-0.5));
        float _851 = _848 * (_812.z + (-0.5));
        float _858 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_819.x + (-0.5));
        float _860 = _858 * (_819.y + (-0.5));
        float _861 = _858 * (_819.z + (-0.5));
        float _868 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_826.x + (-0.5));
        float _870 = _868 * (_826.y + (-0.5));
        float _871 = _868 * (_826.z + (-0.5));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = _839 * 0.5;
        float _876 = _849 * 0.5;
        float _877 = _859 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_198, _199, _200), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3078 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_902 + 1.0))) + _907) * _872;
        float _917 = _840 * 0.5;
        float _918 = _850 * 0.5;
        float _919 = _860 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_198, _199, _200), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3111 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_944 + 1.0))) + _949) * _873;
        float _959 = _841 * 0.5;
        float _960 = _851 * 0.5;
        float _961 = _861 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_198, _199, _200), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3144 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_986 + 1.0))) + _991) * _874;
        _1008 = _841;
        _1009 = _840;
        _1010 = _839;
        _1011 = _851;
        _1012 = _850;
        _1013 = _849;
        _1014 = _861;
        _1015 = _860;
        _1016 = _859;
        _1017 = _874;
        _1018 = _873;
        _1019 = _872;
        _1020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _1021 = cbModelParam._m0[36u].w * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1022 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
    }
    else
    {
        _1008 = _699;
        _1009 = _699;
        _1010 = _699;
        _1011 = _699;
        _1012 = _699;
        _1013 = _699;
        _1014 = _699;
        _1015 = _699;
        _1016 = _699;
        _1017 = _699;
        _1018 = _699;
        _1019 = _699;
        _1020 = 0.0;
        _1021 = 0.0;
        _1022 = 0.0;
    }
    float _1032 = (cbModelParam._m0[1u].x * (_1020 - _711)) + _711;
    float _1033 = (cbModelParam._m0[1u].x * (_1021 - _712)) + _712;
    float _1034 = (cbModelParam._m0[1u].x * (_1022 - _713)) + _713;
    float _1055 = fma(_1034, cbSceneParam._m0[89u].z, fma(_1033, cbSceneParam._m0[89u].y, _1032 * cbSceneParam._m0[89u].x));
    float _1058 = fma(_1034, cbSceneParam._m0[90u].z, fma(_1033, cbSceneParam._m0[90u].y, _1032 * cbSceneParam._m0[90u].x));
    float _1061 = fma(_1034, cbSceneParam._m0[91u].z, fma(_1033, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1032));
    float _1076 = _364 * 0.5;
    float _1077 = _365 * 0.5;
    float _1078 = _366 * 0.5;
    float _1079 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1010, _1013, _1016, _1019));
    float _1082 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1009, _1012, _1015, _1018));
    float _1085 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1008, _1011, _1014, _1017));
    float _1119;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1092 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_698, _702, _705, _708));
        float _1096 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_700, _703, _706, _709));
        float _1100 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_701, _704, _707, _710));
        float _1107 = dot(vec4(cbModelParam._m0[39u]), vec4(_1076, _1077, _1078, 1.0));
        _1119 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)), isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1107) ? 0.0 : (isnan(0.0) ? _1107 : max(0.0, _1107))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1119 = 1.0;
    }
    float _1130;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1121 = dot(vec4(cbModelParam._m0[40u]), vec4(_1076, _1077, _1078, 1.0));
        _1130 = dot(vec3(isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)), isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1121) ? 0.0 : (isnan(0.0) ? _1121 : max(0.0, _1121))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1130 = 1.0;
    }
    float _1134 = (_1130 * cbModelParam._m0[1u].x) + (_1119 * (1.0 - cbModelParam._m0[1u].x));
    float _1143 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1225;
    float _1227;
    float _1229;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1192 = fma(_396, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _388)) + cbModelParam._m0[13u].w;
        float _1196 = fma(_396, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _388)) + cbModelParam._m0[14u].w;
        float _1200 = fma(_396, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _388)) + cbModelParam._m0[15u].w;
        float _1203 = fma(_366, cbModelParam._m0[13u].z, fma(_365, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _364));
        float _1206 = fma(_366, cbModelParam._m0[14u].z, fma(_365, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _364));
        float _1209 = fma(_366, cbModelParam._m0[15u].z, fma(_365, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _364));
        float _1235;
        if (_1203 > 0.0)
        {
            _1235 = abs((1.0 - _1192) / _1203);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1203 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1192 + 1.0) / _1203);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1235 = frontier_phi_14_12_ladder;
        }
        float _1464;
        if (_1206 > 0.0)
        {
            _1464 = abs((1.0 - _1196) / _1206);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1206 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1196 + 1.0) / _1206);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1464 = frontier_phi_23_19_ladder;
        }
        float _1656;
        if (_1209 > 0.0)
        {
            _1656 = abs((1.0 - _1200) / _1209);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1209 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1200 + 1.0) / _1209);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1656 = frontier_phi_35_30_ladder;
        }
        float _1658 = isnan(_1464) ? _1235 : (isnan(_1235) ? _1464 : min(_1235, _1464));
        float _1659 = isnan(_1656) ? _1658 : (isnan(_1658) ? _1656 : min(_1658, _1656));
        float _1663 = (_1659 * _1203) + _1192;
        float _1664 = (_1659 * _1206) + _1196;
        float _1665 = (_1659 * _1209) + _1200;
        float _1666 = _1659 * 9.9999997473787516355514526367188e-05;
        float _1668 = (-1.0) - _1666;
        float _1670 = _1666 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1665 > _1670) || ((_1665 < _1668) || ((_1664 > _1670) || ((_1664 < _1668) || ((_1663 < _1668) || (_1663 > _1670))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1665, cbModelParam._m0[9u].z, fma(_1664, cbModelParam._m0[9u].y, _1663 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1665, cbModelParam._m0[10u].z, fma(_1664, cbModelParam._m0[10u].y, _1663 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1665, cbModelParam._m0[11u].z, fma(_1664, cbModelParam._m0[11u].y, _1663 * cbModelParam._m0[11u].x))), _1143);
            frontier_phi_13_35_ladder = _1762.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1762.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1762.x * cbModelParam._m0[1u].y;
        }
        _1225 = frontier_phi_13_35_ladder_2;
        _1227 = frontier_phi_13_35_ladder_1;
        _1229 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_364, _365, _366), _1143);
        _1225 = _1213.x * cbModelParam._m0[1u].y;
        _1227 = _1213.y * cbModelParam._m0[1u].y;
        _1229 = _1213.z * cbModelParam._m0[1u].y;
    }
    float _1232 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1289 = fma(_396, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _388)) + cbModelParam._m0[21u].w;
        float _1293 = fma(_396, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _388)) + cbModelParam._m0[22u].w;
        float _1297 = fma(_396, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _388)) + cbModelParam._m0[23u].w;
        float _1300 = fma(_366, cbModelParam._m0[21u].z, fma(_365, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _364));
        float _1303 = fma(_366, cbModelParam._m0[22u].z, fma(_365, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _364));
        float _1306 = fma(_366, cbModelParam._m0[23u].z, fma(_365, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _364));
        float _1469;
        if (_1300 > 0.0)
        {
            _1469 = abs((1.0 - _1289) / _1300);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1289 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1469 = frontier_phi_25_21_ladder;
        }
        float _1683;
        if (_1303 > 0.0)
        {
            _1683 = abs((1.0 - _1293) / _1303);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1293 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1683 = frontier_phi_37_32_ladder;
        }
        float _1834;
        if (_1306 > 0.0)
        {
            _1834 = abs((1.0 - _1297) / _1306);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1297 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1834 = frontier_phi_46_43_ladder;
        }
        float _1836 = isnan(_1683) ? _1469 : (isnan(_1469) ? _1683 : min(_1469, _1683));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1300) + _1289;
        float _1842 = (_1837 * _1303) + _1293;
        float _1843 = (_1837 * _1306) + _1297;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1845 = (-1.0) - _1844;
        float _1847 = _1844 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1843 > _1847) || ((_1843 < _1845) || ((_1842 > _1847) || ((_1842 < _1845) || ((_1841 < _1845) || (_1841 > _1847))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1843, cbModelParam._m0[17u].z, fma(_1842, cbModelParam._m0[17u].y, _1841 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1843, cbModelParam._m0[18u].z, fma(_1842, cbModelParam._m0[18u].y, _1841 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1843, cbModelParam._m0[19u].z, fma(_1842, cbModelParam._m0[19u].y, _1841 * cbModelParam._m0[19u].x))), _1232);
            frontier_phi_22_46_ladder = _2044.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2044.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2044.x * cbModelParam._m0[1u].z;
        }
        _1325 = frontier_phi_22_46_ladder_2;
        _1327 = frontier_phi_22_46_ladder_1;
        _1329 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1309 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_364, _365, _366), _1232);
        _1325 = _1309.x * cbModelParam._m0[1u].z;
        _1327 = _1309.y * cbModelParam._m0[1u].z;
        _1329 = _1309.z * cbModelParam._m0[1u].z;
    }
    float _1341 = _355 * 0.01200000010430812835693359375;
    float _1343 = _1341 * ((cbModelParam._m0[1u].w * (_1325 - _1225)) + _1225);
    float _1344 = _1341 * ((cbModelParam._m0[1u].w * (_1327 - _1227)) + _1227);
    float _1345 = _1341 * ((cbModelParam._m0[1u].w * (_1329 - _1229)) + _1229);
    float _1348 = fma(_1345, cbSceneParam._m0[89u].z, fma(_1344, cbSceneParam._m0[89u].y, _1343 * cbSceneParam._m0[89u].x));
    float _1351 = fma(_1345, cbSceneParam._m0[90u].z, fma(_1344, cbSceneParam._m0[90u].y, _1343 * cbSceneParam._m0[90u].x));
    float _1354 = fma(_1345, cbSceneParam._m0[91u].z, fma(_1344, cbSceneParam._m0[91u].y, _1343 * cbSceneParam._m0[91u].x));
    vec4 _1362 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_288, _289));
    float _1364 = _1362.w;
    float _1376 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1364);
    float _1377 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1364);
    float _1378 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1364);
    uvec4 _1382 = floatBitsToUint(cbInstanceData._m0[_329 + 5u]);
    uint _1384 = _1382.x * 14u;
    uint _1385 = _1384 + 13u;
    float _1392 = _355 + (-1.0);
    float _1398 = (cbLight._m0[_1385].x * _1392) + 1.0;
    float _1399 = (cbLight._m0[_1385].y * _1392) + 1.0;
    float _1400 = (cbLight._m0[_1385].z * _1392) + 1.0;
    float _1401 = (cbLight._m0[_1385].w * _1392) + 1.0;
    uint _1402 = _1384 + 5u;
    float _1408 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
    uint _1412 = _1384 + 4u;
    float _1422 = isnan(1.0) ? _1398 : (isnan(_1398) ? 1.0 : min(_1398, 1.0));
    uint _1426 = _1384 | 1u;
    float _1437 = dot(vec3(cbLight._m0[_1384].xyz), vec3(_198, _199, _200));
    float _1440 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_198, _199, _200));
    float _3280 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _3291 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1445 = (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * 0.3183098733425140380859375;
    float _1447 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.3183098733425140380859375;
    float _1454 = ((cbLight._m0[_1402].x * _1408) * _1447) + (((cbLight._m0[_1412].x * _1376) * _1422) * _1445);
    float _1455 = ((_1408 * cbLight._m0[_1402].y) * _1447) + (((cbLight._m0[_1412].y * _1377) * _1422) * _1445);
    float _1456 = ((_1408 * cbLight._m0[_1402].z) * _1447) + (((cbLight._m0[_1412].z * _1378) * _1422) * _1445);
    uvec4 _1461 = floatBitsToUint(cbLight._m0[_1384 + 12u]);
    bool _1463 = _1461.x == 0u;
    float _1474;
    float _1476;
    float _1478;
    if (_1463)
    {
        _1474 = _1454;
        _1476 = _1455;
        _1478 = _1456;
    }
    else
    {
        uint _1482 = _1384 + 6u;
        float _1498 = (dot(vec3(cbLight._m0[_1384 + 2u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1499 = _1498 * _1498;
        float _3302 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1501 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
        _1474 = (((cbLight._m0[_1482].x * 0.3183098733425140380859375) * _1500) * _1501) + _1454;
        _1476 = (((cbLight._m0[_1482].y * 0.3183098733425140380859375) * _1500) * _1501) + _1455;
        _1478 = (((cbLight._m0[_1482].z * 0.3183098733425140380859375) * _1500) * _1501) + _1456;
    }
    bool _1481 = _1461.y == 0u;
    float _1519;
    float _1521;
    float _1523;
    if (_1481)
    {
        _1519 = _1474;
        _1521 = _1476;
        _1523 = _1478;
    }
    else
    {
        uint _1627 = _1384 + 7u;
        float _1643 = (dot(vec3(cbLight._m0[_1384 + 3u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3318 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _1646 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
        _1519 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1474;
        _1521 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1476;
        _1523 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1478;
    }
    uint _1525 = _1384 + 8u;
    float _1531 = cbLight._m0[_1384].x + _280;
    float _1532 = cbLight._m0[_1384].y + _281;
    float _1533 = cbLight._m0[_1384].z + _282;
    float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
    float _1541 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1384].xyz));
    float _3334 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1544 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _1545 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _1546 = dot(vec3(cbLight._m0[_1384].xyz), vec3(_1531 * _1537, _1532 * _1537, _1533 * _1537));
    float _3356 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1557 = (exp2(log2(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1563 = (0.5 / ((_1544 + 9.9999999392252902907785028219223e-09) + _1545)) * _1544;
    float _3367 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1565 = (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.31831014156341552734375;
    uint _1579 = _1384 + 9u;
    float _1585 = cbLight._m0[_1426].x + _280;
    float _1586 = cbLight._m0[_1426].y + _281;
    float _1587 = cbLight._m0[_1426].z + _282;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1426].xyz));
    float _3378 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _1599 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3389 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1612 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1545)) * _1598;
    float _3400 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1614 = (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.31831014156341552734375;
    float _1624 = (((_1608 * cbLight._m0[_1579].x) * _1614) * _1408) + ((((cbLight._m0[_1525].x * _1376) * _1557) * _1565) * _1422);
    float _1625 = (((_1608 * cbLight._m0[_1579].y) * _1614) * _1408) + ((((cbLight._m0[_1525].y * _1377) * _1557) * _1565) * _1422);
    float _1626 = (((_1608 * cbLight._m0[_1579].z) * _1614) * _1408) + ((((cbLight._m0[_1525].z * _1378) * _1557) * _1565) * _1422);
    float _1688;
    float _1690;
    float _1692;
    if (_1463)
    {
        _1688 = _1624;
        _1690 = _1625;
        _1692 = _1626;
    }
    else
    {
        uint _1694 = _1384 + 10u;
        uint _1700 = _1384 + 2u;
        float _1706 = cbLight._m0[_1700].x + _280;
        float _1707 = cbLight._m0[_1700].y + _281;
        float _1708 = cbLight._m0[_1700].z + _282;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1716 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1700].xyz));
        float _3411 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1719 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1720 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1706 * _1712, _1707 * _1712, _1708 * _1712));
        float _3422 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1733 = (0.5 / ((_1719 + 9.9999999392252902907785028219223e-09) + _1545)) * _1719;
        float _3433 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1735 = (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * 0.31831014156341552734375;
        float _1736 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
        _1688 = (((_1729 * cbLight._m0[_1694].x) * _1735) * _1736) + _1624;
        _1690 = (((_1729 * cbLight._m0[_1694].y) * _1735) * _1736) + _1625;
        _1692 = (((_1729 * cbLight._m0[_1694].z) * _1735) * _1736) + _1626;
    }
    float _1771;
    float _1773;
    float _1775;
    if (_1481)
    {
        _1771 = _1688;
        _1773 = _1690;
        _1775 = _1692;
    }
    else
    {
        uint _1782 = _1384 + 11u;
        uint _1788 = _1384 + 3u;
        float _1794 = cbLight._m0[_1788].x + _280;
        float _1795 = cbLight._m0[_1788].y + _281;
        float _1796 = cbLight._m0[_1788].z + _282;
        float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
        float _1804 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1788].xyz));
        float _3449 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1807 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1808 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1794 * _1800, _1795 * _1800, _1796 * _1800));
        float _3460 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1821 = (0.5 / ((_1807 + 9.9999999392252902907785028219223e-09) + _1545)) * _1807;
        float _3471 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1823 = (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.31831014156341552734375;
        float _1824 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
        _1771 = (((_1817 * cbLight._m0[_1782].x) * _1823) * _1824) + _1688;
        _1773 = (((_1817 * cbLight._m0[_1782].y) * _1823) * _1824) + _1690;
        _1775 = (((_1817 * cbLight._m0[_1782].z) * _1823) * _1824) + _1692;
    }
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    if (_1382.y == 0u)
    {
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1899;
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1899;
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1899;
        uvec4 _1914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1915 = _1914.x;
        uint _1926 = uint((float(_1914.y) * floor(float(uint(cbSceneParam._m0[85u].y * _289) / _1915))) + floor(float(uint(cbSceneParam._m0[85u].x * _288) / _1915)));
        float _1936 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1937 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        uint _1940 = uint(isnan(14.0) ? _1937 : (isnan(_1937) ? 14.0 : min(_1937, 14.0)));
        uvec4 _1945 = texelFetch(g_lightClusterGridBuffer, int(((_1940 << 2u) + (_1926 << 6u)) >> 2u));
        uint _1946 = _1945.x;
        uint _1947 = _1914.z;
        float _2049;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        if (((((1u << ((_1947 >> 4u) & 15u)) + 4294967295u) & _1946) == 0u) || ((_1947 & 240u) == 0u))
        {
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
        }
        else
        {
            float _2050;
            float _2052;
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2192 = 0.0;
            float _2193 = 0.0;
            float _2194 = 0.0;
            float _2195 = 0.0;
            float _2196 = 0.0;
            float _2197 = 0.0;
            uint _2198 = 0u;
            uint _2207;
            bool _2208;
            for (;;)
            {
                _2207 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2198 << 2u)) >> 2u)).x;
                _2208 = _2207 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2208)
                {
                    frontier_phi_61_pred = _2192;
                    frontier_phi_61_pred_1 = _2197;
                    frontier_phi_61_pred_2 = _2196;
                    frontier_phi_61_pred_3 = _2195;
                    frontier_phi_61_pred_4 = _2194;
                    frontier_phi_61_pred_5 = _2193;
                }
                else
                {
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    uint _2322;
                    _2316 = _2192;
                    _2317 = _2193;
                    _2318 = _2194;
                    _2319 = _2195;
                    _2320 = _2196;
                    _2321 = _2197;
                    _2322 = _2207;
                    float _2248;
                    float _2249;
                    float _2250;
                    float _2251;
                    float _2252;
                    float _2253;
                    for (;;)
                    {
                        uint _2326 = uint(findLSB(_2322)) + (_2198 << 5u);
                        uint _2323 = (_2322 + 4294967295u) & _2322;
                        uint _2328 = _2326 * 48u;
                        vec4 _2342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2328)).x, texelFetch(g_PointLightRenderingBuffer, int(_2328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2328 + 3u)).x));
                        uint _2348 = (_2326 * 48u) + 4u;
                        vec4 _2361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2348)).x, texelFetch(g_PointLightRenderingBuffer, int(_2348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2348 + 3u)).x));
                        uint _2367 = (_2326 * 48u) + 8u;
                        vec3 _2378 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2367)).x, texelFetch(g_PointLightRenderingBuffer, int(_2367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2367 + 2u)).x));
                        float _2382 = _2342.x - _1900;
                        float _2383 = _2342.y - _1901;
                        float _2384 = _2342.z - _1902;
                        float _2385 = dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384));
                        float _2388 = inversesqrt(_2385);
                        float _2397 = 1.0 - (_2385 * _2342.w);
                        float _3497 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
                        float _2398 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
                        float _2399 = sqrt(_2385) * _2361.w;
                        float _2402 = 1.39999997615814208984375 / (_2399 + 1.39999997615814208984375);
                        float _2403 = _2402 * _2402;
                        float _2406 = ((1.0 - _2403) * dot(vec3(_310, _313, _316), vec3(_2388 * _2382, _2388 * _2383, _2388 * _2384))) + _2403;
                        float _2409 = _2399 * _2399;
                        float _2413 = ((isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0))) * _2398) / ((_2409 * 0.699999988079071044921875) + 1.0);
                        float _2417 = (-0.0) - _1900;
                        float _2418 = (-0.0) - _1901;
                        float _2419 = (-0.0) - _1902;
                        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
                        float _2427 = dot(vec3(_310, _313, _316), vec3(_2423 * _2417, _2423 * _2418, _2423 * _2419));
                        float _3513 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
                        float _3524 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
                        float _2431 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
                        float _2435 = (0.5 / (((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) + 9.9999999392252902907785028219223e-09) + _2431)) * _2431;
                        float _3535 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
                        float _2444 = (((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 3.1415927410125732421875) / ((_2409 * 2.1991131305694580078125) + 3.141590118408203125)) * _2398;
                        _2251 = (_2413 * _2361.x) + _2319;
                        _2252 = (_2413 * _2361.y) + _2320;
                        _2253 = (_2413 * _2361.z) + _2321;
                        _2248 = (_2444 * _2378.x) + _2316;
                        _2249 = (_2444 * _2378.y) + _2317;
                        _2250 = (_2444 * _2378.z) + _2318;
                        if (_2323 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2316 = _2248;
                            _2317 = _2249;
                            _2318 = _2250;
                            _2319 = _2251;
                            _2320 = _2252;
                            _2321 = _2253;
                            _2322 = _2323;
                        }
                    }
                    frontier_phi_61_pred = _2248;
                    frontier_phi_61_pred_1 = _2253;
                    frontier_phi_61_pred_2 = _2252;
                    frontier_phi_61_pred_3 = _2251;
                    frontier_phi_61_pred_4 = _2250;
                    frontier_phi_61_pred_5 = _2249;
                }
                _2050 = frontier_phi_61_pred;
                _2060 = frontier_phi_61_pred_1;
                _2058 = frontier_phi_61_pred_2;
                _2056 = frontier_phi_61_pred_3;
                _2054 = frontier_phi_61_pred_4;
                _2052 = frontier_phi_61_pred_5;
                uint _2199 = _2198 + 1u;
                if (_2199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2192 = _2050;
                    _2193 = _2052;
                    _2194 = _2054;
                    _2195 = _2056;
                    _2196 = _2058;
                    _2197 = _2060;
                    _2198 = _2199;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
        }
        uvec4 _2063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2064 = _2063.z;
        uint _2066 = (_2064 >> 8u) & 15u;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        if (((4294967295u << _2066) & _1946) == 0u)
        {
            _2163 = _2049;
            _2165 = _2051;
            _2167 = _2053;
            _2169 = _2055;
            _2171 = _2057;
            _2173 = _2059;
        }
        else
        {
            float _2188 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2066 < ((_2064 >> 12u) & 15u))
            {
                float _2164;
                float _2166;
                float _2168;
                float _2170;
                float _2172;
                float _2174;
                float _2299 = _2049;
                float _2300 = _2051;
                float _2301 = _2053;
                float _2302 = _2055;
                float _2303 = _2057;
                float _2304 = _2059;
                uint _2305 = _2066;
                uint _2314;
                bool _2315;
                for (;;)
                {
                    _2314 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2305 << 2u)) >> 2u)).x;
                    _2315 = _2314 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2315)
                    {
                        frontier_phi_67_pred = _2302;
                        frontier_phi_67_pred_1 = _2303;
                        frontier_phi_67_pred_2 = _2304;
                        frontier_phi_67_pred_3 = _2301;
                        frontier_phi_67_pred_4 = _2300;
                        frontier_phi_67_pred_5 = _2299;
                    }
                    else
                    {
                        float _2449;
                        float _2450;
                        float _2451;
                        float _2452;
                        float _2453;
                        float _2454;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2462 = _2299;
                        float _2463 = _2300;
                        float _2464 = _2301;
                        float _2465 = _2302;
                        float _2466 = _2303;
                        float _2467 = _2304;
                        uint _2468 = _2314;
                        uint _2469;
                        vec4 _2494;
                        float _2495;
                        vec4 _2510;
                        vec3 _2522;
                        vec4 _2538;
                        vec4 _2554;
                        float _2601;
                        bool _2602;
                        for (;;)
                        {
                            uint _2479 = ((_2305 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2468));
                            _2469 = (_2468 + 4294967295u) & _2468;
                            uint _2481 = _2479 * 40u;
                            _2494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 3u)).x));
                            _2495 = _2494.w;
                            uint _2497 = (_2479 * 40u) + 4u;
                            _2510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2497 + 3u)).x));
                            uint _2512 = (_2479 * 40u) + 8u;
                            _2522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 2u)).x));
                            uint _2525 = (_2479 * 40u) + 16u;
                            _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            uint _2541 = (_2479 * 40u) + 20u;
                            _2554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 3u)).x));
                            uint _2557 = (_2479 * 40u) + 24u;
                            vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 3u)).x));
                            uint _2576 = (_2479 * 40u) + 28u;
                            vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 3u)).x));
                            _2601 = fma(_1902, _2589.z, fma(_1901, _2589.y, _2589.x * _1900)) + _2589.w;
                            _2602 = !((fma(_1902, _2570.z, fma(_1901, _2570.y, _2570.x * _1900)) + _2570.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2602)
                            {
                                float _2629 = _2494.x - _1900;
                                float _2630 = _2494.y - _1901;
                                float _2631 = _2494.z - _1902;
                                float _2632 = dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631));
                                float _2635 = inversesqrt(_2632);
                                float _2636 = _2635 * _2629;
                                float _2637 = _2635 * _2630;
                                float _2638 = _2635 * _2631;
                                float _2642 = 1.0 - (_2632 / (_2495 * _2495));
                                float _3546 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                                float _2643 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                                float _2647 = sqrt(_2632) * _2510.w;
                                float _2649 = 1.39999997615814208984375 / (_2647 + 1.39999997615814208984375);
                                float _2650 = _2649 * _2649;
                                float _2651 = 1.0 - _2650;
                                float _2653 = (_2651 * dot(vec3(_2636, _2637, _2638), vec3(_310, _313, _316))) + _2650;
                                float _2656 = _2647 * _2647;
                                float _2660 = (fma(_1902, _2538.z, fma(_1901, _2538.y, _2538.x * _1900)) + _2538.w) / _2601;
                                float _2661 = (fma(_1902, _2554.z, fma(_1901, _2554.y, _2554.x * _1900)) + _2554.w) / _2601;
                                float _2665 = 1.0 - dot(vec2(_2660, _2661), vec2(_2660, _2661));
                                float _3562 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                                float _2666 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                                float _2667 = _2666 * (((isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))) * _2643) / ((_2656 * 0.699999988079071044921875) + 1.0));
                                float _2677 = dot(vec3(_310, _313, _316), vec3((-0.0) - (_1900 * _2188), (-0.0) - (_1901 * _2188), (-0.0) - (_1902 * _2188)));
                                float _3573 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                                float _2685 = (_2651 * dot(vec3(_310, _313, _316), vec3(_2636, _2637, _2638))) + _2650;
                                float _3584 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                                float _2686 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                                float _2690 = (0.5 / (((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) + 9.9999999392252902907785028219223e-09) + _2686)) * _2686;
                                float _3595 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                                float _2697 = (_2666 * _2643) * (((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 3.1415927410125732421875) / ((_2656 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2697 * _2522.x;
                                frontier_phi_73_pred_1 = _2697 * _2522.y;
                                frontier_phi_73_pred_2 = _2667 * _2510.z;
                                frontier_phi_73_pred_3 = _2667 * _2510.y;
                                frontier_phi_73_pred_4 = _2667 * _2510.x;
                                frontier_phi_73_pred_5 = _2697 * _2522.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2701 = frontier_phi_73_pred;
                            _2702 = frontier_phi_73_pred_1;
                            _2706 = frontier_phi_73_pred_2;
                            _2705 = frontier_phi_73_pred_3;
                            _2704 = frontier_phi_73_pred_4;
                            _2703 = frontier_phi_73_pred_5;
                            _2452 = _2704 + _2465;
                            _2453 = _2705 + _2466;
                            _2454 = _2706 + _2467;
                            _2449 = _2701 + _2462;
                            _2450 = _2702 + _2463;
                            _2451 = _2703 + _2464;
                            if (_2469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2462 = _2449;
                                _2463 = _2450;
                                _2464 = _2451;
                                _2465 = _2452;
                                _2466 = _2453;
                                _2467 = _2454;
                                _2468 = _2469;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2452;
                        frontier_phi_67_pred_1 = _2453;
                        frontier_phi_67_pred_2 = _2454;
                        frontier_phi_67_pred_3 = _2451;
                        frontier_phi_67_pred_4 = _2450;
                        frontier_phi_67_pred_5 = _2449;
                    }
                    _2170 = frontier_phi_67_pred;
                    _2172 = frontier_phi_67_pred_1;
                    _2174 = frontier_phi_67_pred_2;
                    _2168 = frontier_phi_67_pred_3;
                    _2166 = frontier_phi_67_pred_4;
                    _2164 = frontier_phi_67_pred_5;
                    uint _2306 = _2305 + 1u;
                    if (_2306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2299 = _2164;
                        _2300 = _2166;
                        _2301 = _2168;
                        _2302 = _2170;
                        _2303 = _2172;
                        _2304 = _2174;
                        _2305 = _2306;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2172;
                frontier_phi_55_56_ladder_1 = _2174;
                frontier_phi_55_56_ladder_2 = _2170;
                frontier_phi_55_56_ladder_3 = _2168;
                frontier_phi_55_56_ladder_4 = _2166;
                frontier_phi_55_56_ladder_5 = _2164;
            }
            else
            {
                frontier_phi_55_56_ladder = _2057;
                frontier_phi_55_56_ladder_1 = _2059;
                frontier_phi_55_56_ladder_2 = _2055;
                frontier_phi_55_56_ladder_3 = _2053;
                frontier_phi_55_56_ladder_4 = _2051;
                frontier_phi_55_56_ladder_5 = _2049;
            }
            _2163 = frontier_phi_55_56_ladder_5;
            _2165 = frontier_phi_55_56_ladder_4;
            _2167 = frontier_phi_55_56_ladder_3;
            _2169 = frontier_phi_55_56_ladder_2;
            _2171 = frontier_phi_55_56_ladder;
            _2173 = frontier_phi_55_56_ladder_1;
        }
        float _2178 = isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0));
        _1959 = (_2178 * _2169) + _1519;
        _1961 = (_2178 * _2171) + _1521;
        _1963 = (_2178 * _2173) + _1523;
        _1965 = ((_2163 * 0.039999999105930328369140625) * _2178) + _1771;
        _1967 = ((_2165 * 0.039999999105930328369140625) * _2178) + _1773;
        _1969 = ((_2167 * 0.039999999105930328369140625) * _2178) + _1775;
    }
    else
    {
        _1959 = _1519;
        _1961 = _1521;
        _1963 = _1523;
        _1965 = _1771;
        _1967 = _1773;
        _1969 = _1775;
    }
    float _3611 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3622 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3633 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3644 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _1994 = cbInstanceData._m0[_329 + 6u].w * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)));
    float _1999 = _288 / cbSceneParam._m0[86u].x;
    float _2000 = _289 / cbSceneParam._m0[86u].y;
    vec4 _2014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, (log2((isnan(cbSceneParam._m0[77u].w) ? _221 : (isnan(_221) ? cbSceneParam._m0[77u].w : min(_221, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2016 = _2014.x;
    float _2017 = _2014.y;
    float _2018 = _2014.z;
    float _2019 = _2014.w;
    float _2112;
    float _2114;
    float _2116;
    float _2118;
    if (_221 > cbSceneParam._m0[78u].w)
    {
        float _2074 = isnan(_221) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _221 : min(cbSceneParam._m0[80u].w, _221));
        float _2075 = _2074 / _221;
        float _2086 = _2075 * _273;
        float _2087 = _274 * _2075;
        float _2088 = (-0.0) - _2087;
        float _2090 = _2075 * _275;
        float _2092 = (cbSceneParam._m0[77u].w * _2088) / _2074;
        float _2093 = _2092 + cbSceneParam._m0[79u].w;
        float _2094 = cbSceneParam._m0[79u].w - _2087;
        float _2100 = sqrt(((_2086 * _2086) + (_2087 * _2087)) + (_2090 * _2090));
        float _2103 = (1.0 - (cbSceneParam._m0[77u].w / _2074)) * _2100;
        float _2108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2261;
        if (abs((_2088 - _2092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2261 = ((((_2093 > 0.0) ? exp2(_2108 * _2093) : (2.0 - exp2(_2110 * _2093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2103;
        }
        else
        {
            float _2221 = 1.0 / cbSceneParam._m0[80u].x;
            float _2222 = isnan(_2094) ? _2093 : (isnan(_2093) ? _2094 : max(_2093, _2094));
            float _2223 = isnan(_2094) ? _2093 : (isnan(_2093) ? _2094 : min(_2093, _2094));
            float _2232 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : min(_2222, 0.0));
            float _2233 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : min(_2223, 0.0));
            _2261 = ((abs(_2100 / _2088) * cbSceneParam._m0[80u].y) * ((((_2232 - _2233) * 2.0) - ((exp2(_2108 * (isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0)))) - exp2(_2108 * (isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))))) * _2221)) - ((exp2(_2110 * _2232) - exp2(_2110 * _2233)) * _2221))) + (_2103 * cbSceneParam._m0[80u].z);
        }
        vec4 _2263 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, 1.0), 0.0);
        float _2272 = exp2((_2261 * (-1.44269502162933349609375)) * (1.0 - _2263.w));
        float _2273 = log2(_2272);
        float _2289 = log2(_2019);
        _2112 = (exp2(_2289 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].x)) * _2263.x) / cbSceneParam._m0[78u].x)) + _2016;
        _2114 = (exp2(_2289 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].y)) * _2263.y) / cbSceneParam._m0[78u].y)) + _2017;
        _2116 = (exp2(_2289 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].z)) * _2263.z) / cbSceneParam._m0[78u].z)) + _2018;
        _2118 = _2272 * _2019;
    }
    else
    {
        _2112 = _2016;
        _2114 = _2017;
        _2116 = _2018;
        _2118 = _2019;
    }
    float _2130 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2131 = _2130 == 3.0;
    float _2133 = log2(_2118);
    float _2140 = exp2(_2133 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1959 + ((isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0))) * _355))) + ((_1965 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _1134)) * cbPerFrame._m0[3u].x));
    float _2141 = exp2(_2133 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1961 + ((isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))) * _355))) + ((_1967 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _1134)) * cbPerFrame._m0[3u].x));
    float _2142 = exp2(_2133 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1963 + ((isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0))) * _355))) + ((_1969 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _1134)) * cbPerFrame._m0[3u].x));
    float _2151 = (_2130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2151 * (_2131 ? _2140 : (_2140 + (cbSceneParam._m0[72u].w * _2112)));
    SV_Target.y = _2151 * (_2131 ? _2141 : (_2141 + (cbSceneParam._m0[72u].w * _2114)));
    SV_Target.z = _2151 * (_2131 ? _2142 : (_2142 + (cbSceneParam._m0[72u].w * _2116)));
    SV_Target.w = _1994;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1994;
}


