#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _740;
float _3191;
float _3192;
float _3193;
float _3194;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _189.w;
    float _193 = _192 * TEXCOORD_1.z;
    float _197 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _198 = _197 * _167;
    float _199 = _197 * _168;
    float _200 = _197 * _169;
    float _3203 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _202 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
    float _3214 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _3225 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3236 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _221 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _279 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _280 = _273 * _279;
    float _281 = _274 * _279;
    float _282 = _275 * _279;
    vec4 _287 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _289 = _287.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _419 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _425 = (cbMatDynParam._m0[5u].x * _419) + cbMatDynParam._m0[5u].y;
        float _3247 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
        float _426 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _430 = (cbMatDynParam._m0[5u].z * _419) + cbMatDynParam._m0[5u].w;
        float _3258 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) - _426)) + _426) < ((_289 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _301 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _302 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _322 = fma(_200, cbSceneParam._m0[5u].z, fma(_199, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _198));
    float _325 = fma(_200, cbSceneParam._m0[6u].z, fma(_199, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _198));
    float _328 = fma(_200, cbSceneParam._m0[7u].z, fma(_199, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _198));
    uint _341 = uint(roundEven(NORMAL.w)) * 13u;
    uint _343 = _341 + 9u;
    uint _344 = _343 + uint(cbMatDynParam._m0[0u].w);
    float _350 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0)))) * cbInstanceData._m0[_344].x;
    float _351 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_344].y;
    float _352 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_344].z;
    float _3269 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _3280 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _354 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _355 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    vec4 _364 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _301, cbSceneParam._m0[86u].y * _302));
    float _367 = _364.x * TEXCOORD_1.w;
    float _368 = dot(vec3(_198, _199, _200), vec3(_280, _281, _282));
    float _371 = _368 * 2.0;
    float _376 = (_371 * _198) - _280;
    float _377 = (_371 * _199) - _281;
    float _378 = (_371 * _200) - _282;
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _408 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _739;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _464 = fma(_408, cbModelParam._m0[26u].z, fma(_404, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _400));
        float _468 = fma(_408, cbModelParam._m0[27u].z, fma(_404, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _400));
        float _472 = fma(_408, cbModelParam._m0[28u].z, fma(_404, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _400));
        float _497 = _400 + _198;
        float _498 = _404 + _199;
        float _499 = _408 + _200;
        float _509 = fma(_499, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497)) - _464;
        float _510 = fma(_499, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497)) - _468;
        float _511 = fma(_499, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497)) - _472;
        float _515 = inversesqrt(dot(vec3(_509, _510, _511), vec3(_509, _510, _511)));
        float _528 = ((_515 * _509) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_464 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _529 = ((_515 * _510) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_468 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _530 = ((_515 * _511) / cbModelParam._m0[34u].z) + ((((((_472 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        float _567 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_533.x + (-0.5));
        float _569 = _567 * (_533.y + (-0.5));
        float _570 = _567 * (_533.z + (-0.5));
        float _577 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_540.x + (-0.5));
        float _579 = _577 * (_540.y + (-0.5));
        float _580 = _577 * (_540.z + (-0.5));
        float _587 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_547.x + (-0.5));
        float _589 = _587 * (_547.y + (-0.5));
        float _590 = _587 * (_547.z + (-0.5));
        float _597 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_554.x + (-0.5));
        float _599 = _597 * (_554.y + (-0.5));
        float _600 = _597 * (_554.z + (-0.5));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = _568 * 0.5;
        float _605 = _578 * 0.5;
        float _606 = _588 * 0.5;
        float _607 = dot(vec3(_604, _605, _606), vec3(_604, _605, _606));
        float _612 = (_607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_607);
        float _621 = (dot(vec3(_198, _199, _200), vec3(_612 * _604, _612 * _605, _612 * _606)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _631 = sqrt(((_605 * _605) + (_604 * _604)) + (_606 * _606)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _633 = _632 * 2.0;
        float _637 = (1.0 - _632) / (_632 + 1.0);
        float _3339 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _647 = ((((1.0 - _638) * (_633 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_633 + 1.0))) + _638) * _601;
        float _648 = _569 * 0.5;
        float _649 = _579 * 0.5;
        float _650 = _589 * 0.5;
        float _651 = dot(vec3(_648, _649, _650), vec3(_648, _649, _650));
        float _656 = (_651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_651);
        float _664 = (dot(vec3(_198, _199, _200), vec3(_656 * _648, _656 * _649, _656 * _650)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _673 = sqrt(((_649 * _649) + (_648 * _648)) + (_650 * _650)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _675 = _674 * 2.0;
        float _679 = (1.0 - _674) / (_674 + 1.0);
        float _3372 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _689 = ((((1.0 - _680) * (_675 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_675 + 1.0))) + _680) * _602;
        float _690 = _570 * 0.5;
        float _691 = _580 * 0.5;
        float _692 = _590 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _706 = (dot(vec3(_198, _199, _200), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _715 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _717 = _716 * 2.0;
        float _721 = (1.0 - _716) / (_716 + 1.0);
        float _3405 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _731 = ((((1.0 - _722) * (_717 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_717 + 1.0))) + _722) * _603;
        _739 = _570;
        _741 = _569;
        _742 = _568;
        _743 = _580;
        _744 = _579;
        _745 = _578;
        _746 = _590;
        _747 = _589;
        _748 = _588;
        _749 = _603;
        _750 = _602;
        _751 = _601;
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0)));
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0)));
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0)));
    }
    else
    {
        _739 = _740;
        _741 = _740;
        _742 = _740;
        _743 = _740;
        _744 = _740;
        _745 = _740;
        _746 = _740;
        _747 = _740;
        _748 = _740;
        _749 = _740;
        _750 = _740;
        _751 = _740;
        _752 = 0.0;
        _753 = 0.0;
        _754 = 0.0;
    }
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _783 = fma(_408, cbModelParam._m0[30u].z, fma(_404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _400));
        float _787 = fma(_408, cbModelParam._m0[31u].z, fma(_404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _400));
        float _791 = fma(_408, cbModelParam._m0[32u].z, fma(_404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _400));
        float _814 = _400 + _198;
        float _815 = _404 + _199;
        float _816 = _408 + _200;
        float _826 = fma(_816, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814)) - _783;
        float _827 = fma(_816, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814)) - _787;
        float _828 = fma(_816, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814)) - _791;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_783 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_787 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[35u].z) + ((((((_791 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _882 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_849.x + (-0.5));
        float _884 = _882 * (_849.y + (-0.5));
        float _885 = _882 * (_849.z + (-0.5));
        float _892 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_856.x + (-0.5));
        float _894 = _892 * (_856.y + (-0.5));
        float _895 = _892 * (_856.z + (-0.5));
        float _902 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_863.x + (-0.5));
        float _904 = _902 * (_863.y + (-0.5));
        float _905 = _902 * (_863.z + (-0.5));
        float _912 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_870.x + (-0.5));
        float _914 = _912 * (_870.y + (-0.5));
        float _915 = _912 * (_870.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_198, _199, _200), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3468 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_946 + 1.0))) + _951) * _916;
        float _961 = _884 * 0.5;
        float _962 = _894 * 0.5;
        float _963 = _904 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_198, _199, _200), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3501 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_988 + 1.0))) + _993) * _917;
        float _1003 = _885 * 0.5;
        float _1004 = _895 * 0.5;
        float _1005 = _905 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_198, _199, _200), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3534 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1030 + 1.0))) + _1035) * _918;
        _1052 = _885;
        _1053 = _884;
        _1054 = _883;
        _1055 = _895;
        _1056 = _894;
        _1057 = _893;
        _1058 = _905;
        _1059 = _904;
        _1060 = _903;
        _1061 = _918;
        _1062 = _917;
        _1063 = _916;
        _1064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _740;
        _1053 = _740;
        _1054 = _740;
        _1055 = _740;
        _1056 = _740;
        _1057 = _740;
        _1058 = _740;
        _1059 = _740;
        _1060 = _740;
        _1061 = _740;
        _1062 = _740;
        _1063 = _740;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1076 = (cbModelParam._m0[1u].x * (_1064 - _752)) + _752;
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _753)) + _753;
    float _1078 = (cbModelParam._m0[1u].x * (_1066 - _754)) + _754;
    float _1099 = fma(_1078, cbSceneParam._m0[89u].z, fma(_1077, cbSceneParam._m0[89u].y, _1076 * cbSceneParam._m0[89u].x));
    float _1102 = fma(_1078, cbSceneParam._m0[90u].z, fma(_1077, cbSceneParam._m0[90u].y, _1076 * cbSceneParam._m0[90u].x));
    float _1105 = fma(_1078, cbSceneParam._m0[91u].z, fma(_1077, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1076));
    float _1120 = _376 * 0.5;
    float _1121 = _377 * 0.5;
    float _1122 = _378 * 0.5;
    float _1123 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1126 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1129 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1163;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1136 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_739, _743, _746, _749));
        float _1140 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_741, _744, _747, _750));
        float _1144 = dot(vec4(_1120, _1121, _1122, 1.0), vec4(_742, _745, _748, _751));
        float _1151 = dot(vec4(cbModelParam._m0[39u]), vec4(_1120, _1121, _1122, 1.0));
        _1163 = dot(vec3(isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1151) ? 0.0 : (isnan(0.0) ? _1151 : max(0.0, _1151))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1163 = 1.0;
    }
    float _1174;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1165 = dot(vec4(cbModelParam._m0[40u]), vec4(_1120, _1121, _1122, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1165) ? 0.0 : (isnan(0.0) ? _1165 : max(0.0, _1165))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1178 = (_1174 * cbModelParam._m0[1u].x) + (_1163 * (1.0 - cbModelParam._m0[1u].x));
    float _1187 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1269;
    float _1271;
    float _1273;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1236 = fma(_408, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _400)) + cbModelParam._m0[13u].w;
        float _1240 = fma(_408, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _400)) + cbModelParam._m0[14u].w;
        float _1244 = fma(_408, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _400)) + cbModelParam._m0[15u].w;
        float _1247 = fma(_378, cbModelParam._m0[13u].z, fma(_377, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _376));
        float _1250 = fma(_378, cbModelParam._m0[14u].z, fma(_377, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _376));
        float _1253 = fma(_378, cbModelParam._m0[15u].z, fma(_377, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _376));
        float _1279;
        if (_1247 > 0.0)
        {
            _1279 = abs((1.0 - _1236) / _1247);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1236 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1279 = frontier_phi_17_15_ladder;
        }
        float _1454;
        if (_1250 > 0.0)
        {
            _1454 = abs((1.0 - _1240) / _1250);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1250 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1240 + 1.0) / _1250);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1454 = frontier_phi_26_22_ladder;
        }
        float _1751;
        if (_1253 > 0.0)
        {
            _1751 = abs((1.0 - _1244) / _1253);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1244 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1751 = frontier_phi_38_33_ladder;
        }
        float _1753 = isnan(_1454) ? _1279 : (isnan(_1279) ? _1454 : min(_1279, _1454));
        float _1754 = isnan(_1751) ? _1753 : (isnan(_1753) ? _1751 : min(_1753, _1751));
        float _1758 = (_1754 * _1247) + _1236;
        float _1759 = (_1754 * _1250) + _1240;
        float _1760 = (_1754 * _1253) + _1244;
        float _1761 = _1754 * 9.9999997473787516355514526367188e-05;
        float _1763 = (-1.0) - _1761;
        float _1765 = _1761 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1760 > _1765) || ((_1760 < _1763) || ((_1759 > _1765) || ((_1759 < _1763) || ((_1758 < _1763) || (_1758 > _1765))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1760, cbModelParam._m0[9u].z, fma(_1759, cbModelParam._m0[9u].y, _1758 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1760, cbModelParam._m0[10u].z, fma(_1759, cbModelParam._m0[10u].y, _1758 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1760, cbModelParam._m0[11u].z, fma(_1759, cbModelParam._m0[11u].y, _1758 * cbModelParam._m0[11u].x))), _1187);
            frontier_phi_16_38_ladder = _1905.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1905.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1905.x * cbModelParam._m0[1u].y;
        }
        _1269 = frontier_phi_16_38_ladder_2;
        _1271 = frontier_phi_16_38_ladder_1;
        _1273 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_376, _377, _378), _1187);
        _1269 = _1257.x * cbModelParam._m0[1u].y;
        _1271 = _1257.y * cbModelParam._m0[1u].y;
        _1273 = _1257.z * cbModelParam._m0[1u].y;
    }
    float _1276 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1369;
    float _1371;
    float _1373;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1333 = fma(_408, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _400)) + cbModelParam._m0[21u].w;
        float _1337 = fma(_408, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _400)) + cbModelParam._m0[22u].w;
        float _1341 = fma(_408, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _400)) + cbModelParam._m0[23u].w;
        float _1344 = fma(_378, cbModelParam._m0[21u].z, fma(_377, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _376));
        float _1347 = fma(_378, cbModelParam._m0[22u].z, fma(_377, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _376));
        float _1350 = fma(_378, cbModelParam._m0[23u].z, fma(_377, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _376));
        float _1459;
        if (_1344 > 0.0)
        {
            _1459 = abs((1.0 - _1333) / _1344);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1333 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1459 = frontier_phi_28_24_ladder;
        }
        float _1778;
        if (_1347 > 0.0)
        {
            _1778 = abs((1.0 - _1337) / _1347);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1337 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1778 = frontier_phi_40_35_ladder;
        }
        float _2051;
        if (_1350 > 0.0)
        {
            _2051 = abs((1.0 - _1341) / _1350);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1341 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2051 = frontier_phi_50_47_ladder;
        }
        float _2053 = isnan(_1778) ? _1459 : (isnan(_1459) ? _1778 : min(_1459, _1778));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1344) + _1333;
        float _2059 = (_2054 * _1347) + _1337;
        float _2060 = (_2054 * _1350) + _1341;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2060, cbModelParam._m0[17u].z, fma(_2059, cbModelParam._m0[17u].y, _2058 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2060, cbModelParam._m0[18u].z, fma(_2059, cbModelParam._m0[18u].y, _2058 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2060, cbModelParam._m0[19u].z, fma(_2059, cbModelParam._m0[19u].y, _2058 * cbModelParam._m0[19u].x))), _1276);
            frontier_phi_25_50_ladder = _2151.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2151.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2151.x * cbModelParam._m0[1u].z;
        }
        _1369 = frontier_phi_25_50_ladder_2;
        _1371 = frontier_phi_25_50_ladder_1;
        _1373 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1353 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_376, _377, _378), _1276);
        _1369 = _1353.x * cbModelParam._m0[1u].z;
        _1371 = _1353.y * cbModelParam._m0[1u].z;
        _1373 = _1353.z * cbModelParam._m0[1u].z;
    }
    float _1385 = _367 * 0.01200000010430812835693359375;
    float _1387 = _1385 * ((cbModelParam._m0[1u].w * (_1369 - _1269)) + _1269);
    float _1388 = _1385 * ((cbModelParam._m0[1u].w * (_1371 - _1271)) + _1271);
    float _1389 = _1385 * ((cbModelParam._m0[1u].w * (_1373 - _1273)) + _1273);
    float _1392 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, _1387 * cbSceneParam._m0[91u].x));
    float _1433 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1437 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1445 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1446 = _1433 / _1445;
    float _1447 = _1437 / _1445;
    float _1448 = _1441 / _1445;
    float _1595;
    float _1596;
    float _1597;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1475 = ((uint(_1448 > cbSceneParam._m0[59u].y) + uint(_1448 > cbSceneParam._m0[59u].x)) + uint(_1448 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1476 = _1475 + 43u;
        uint _1484 = _1475 + 44u;
        uint _1492 = _1475 + 45u;
        uint _1500 = _1475 + 46u;
        float _1511 = fma(_1445, cbSceneParam._m0[_1476].w, fma(_1441, cbSceneParam._m0[_1476].z, fma(_1437, cbSceneParam._m0[_1476].y, _1433 * cbSceneParam._m0[_1476].x)));
        float _1515 = fma(_1445, cbSceneParam._m0[_1484].w, fma(_1441, cbSceneParam._m0[_1484].z, fma(_1437, cbSceneParam._m0[_1484].y, _1433 * cbSceneParam._m0[_1484].x)));
        float _1523 = fma(_1445, cbSceneParam._m0[_1500].w, fma(_1441, cbSceneParam._m0[_1500].z, fma(_1437, cbSceneParam._m0[_1500].y, _1433 * cbSceneParam._m0[_1500].x)));
        float _1528 = cbSceneParam._m0[33u].z * _1523;
        float _1530 = cbSceneParam._m0[33u].w * _1523;
        float _1533 = fma(_1445, cbSceneParam._m0[_1492].w, fma(_1441, cbSceneParam._m0[_1492].z, fma(_1437, cbSceneParam._m0[_1492].y, _1433 * cbSceneParam._m0[_1492].x))) / _1523;
        float _1581 = (cbSceneParam._m0[33u].x - sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448))) * cbSceneParam._m0[33u].y;
        float _3660 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1588 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 + _1511) / _1523, (_1530 + _1515) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1530 + _1511) / _1523, (_1515 - _1528) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1511 - _1528) / _1523, (_1515 - _1530) / _1523), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1511 - _1530) / _1523, (_1528 + _1515) / _1523), _1533), 0.0)).x), vec4(0.25)));
        _1595 = 1.0 - (_1588 * cbSceneParam._m0[34u].x);
        _1596 = 1.0 - (_1588 * cbSceneParam._m0[34u].y);
        _1597 = 1.0 - (_1588 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1595 = 1.0;
        _1596 = 1.0;
        _1597 = 1.0;
    }
    float _1661;
    float _1663;
    float _1665;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1649 = fma(_1445, cbSceneParam._m0[63u].w, fma(_1441, cbSceneParam._m0[63u].z, fma(_1437, cbSceneParam._m0[63u].y, _1433 * cbSceneParam._m0[63u].x)));
        float _1650 = fma(_1445, cbSceneParam._m0[60u].w, fma(_1441, cbSceneParam._m0[60u].z, fma(_1437, cbSceneParam._m0[60u].y, _1433 * cbSceneParam._m0[60u].x))) / _1649;
        float _1651 = fma(_1445, cbSceneParam._m0[61u].w, fma(_1441, cbSceneParam._m0[61u].z, fma(_1437, cbSceneParam._m0[61u].y, _1433 * cbSceneParam._m0[61u].x))) / _1649;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1650 >= cbSceneParam._m0[64u].x) && (_1651 >= cbSceneParam._m0[64u].y)) && (_1650 <= cbSceneParam._m0[64u].z)) && (_1651 <= cbSceneParam._m0[64u].w))
        {
            float _1791 = fma(_1445, cbSceneParam._m0[62u].w, fma(_1441, cbSceneParam._m0[62u].z, fma(_1437, cbSceneParam._m0[62u].y, _1433 * cbSceneParam._m0[62u].x))) / _1649;
            float _1795 = isnan(cbSceneParam._m0[41u].w) ? _1791 : (isnan(_1791) ? cbSceneParam._m0[41u].w : max(_1791, cbSceneParam._m0[41u].w));
            float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448))) * cbSceneParam._m0[33u].y;
            float _3676 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
            float _1845 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1650, cbSceneParam._m0[33u].w + _1651), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1650, _1651 - cbSceneParam._m0[33u].z), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].z, _1651 - cbSceneParam._m0[33u].w), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1651), _1795), 0.0)).x), vec4(0.25)));
            float _1849 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
            float _1850 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
            float _1851 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1851) ? _1597 : (isnan(_1597) ? _1851 : min(_1597, _1851));
            frontier_phi_37_36_ladder_1 = isnan(_1850) ? _1596 : (isnan(_1596) ? _1850 : min(_1596, _1850));
            frontier_phi_37_36_ladder_2 = isnan(_1849) ? _1595 : (isnan(_1595) ? _1849 : min(_1595, _1849));
        }
        else
        {
            frontier_phi_37_36_ladder = _1597;
            frontier_phi_37_36_ladder_1 = _1596;
            frontier_phi_37_36_ladder_2 = _1595;
        }
        _1661 = frontier_phi_37_36_ladder_2;
        _1663 = frontier_phi_37_36_ladder_1;
        _1665 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1661 = _1595;
        _1663 = _1596;
        _1665 = _1597;
    }
    uvec4 _1670 = floatBitsToUint(cbInstanceData._m0[_341 + 5u]);
    uint _1672 = _1670.x * 14u;
    uint _1673 = _1672 + 13u;
    float _1680 = _367 + (-1.0);
    float _1686 = (cbLight._m0[_1673].x * _1680) + 1.0;
    float _1687 = (cbLight._m0[_1673].y * _1680) + 1.0;
    float _1688 = (cbLight._m0[_1673].z * _1680) + 1.0;
    float _1689 = (cbLight._m0[_1673].w * _1680) + 1.0;
    uint _1690 = _1672 + 5u;
    float _1696 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1700 = _1672 + 4u;
    float _1710 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1714 = _1672 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_198, _199, _200));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_198, _199, _200));
    float _3712 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3723 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1690].x * _1696) * _1735) + (((cbLight._m0[_1700].x * _1661) * _1710) * _1733);
    float _1743 = ((_1696 * cbLight._m0[_1690].y) * _1735) + (((cbLight._m0[_1700].y * _1663) * _1710) * _1733);
    float _1744 = ((_1696 * cbLight._m0[_1690].z) * _1735) + (((cbLight._m0[_1700].z * _1665) * _1710) * _1733);
    uvec4 _1748 = floatBitsToUint(cbLight._m0[_1672 + 12u]);
    bool _1750 = _1748.x == 0u;
    float _1852;
    float _1854;
    float _1856;
    if (_1750)
    {
        _1852 = _1742;
        _1854 = _1743;
        _1856 = _1744;
    }
    else
    {
        uint _1860 = _1672 + 6u;
        float _1876 = (dot(vec3(cbLight._m0[_1672 + 2u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1877 = _1876 * _1876;
        float _3734 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1879 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _1852 = (((cbLight._m0[_1860].x * 0.3183098733425140380859375) * _1878) * _1879) + _1742;
        _1854 = (((cbLight._m0[_1860].y * 0.3183098733425140380859375) * _1878) * _1879) + _1743;
        _1856 = (((cbLight._m0[_1860].z * 0.3183098733425140380859375) * _1878) * _1879) + _1744;
    }
    bool _1859 = _1748.y == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1859)
    {
        _1914 = _1852;
        _1916 = _1854;
        _1918 = _1856;
    }
    else
    {
        uint _2022 = _1672 + 7u;
        float _2038 = (dot(vec3(cbLight._m0[_1672 + 3u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _3750 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _2041 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1914 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1852;
        _1916 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1854;
        _1918 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1856;
    }
    uint _1920 = _1672 + 8u;
    float _1926 = cbLight._m0[_1672].x + _280;
    float _1927 = cbLight._m0[_1672].y + _281;
    float _1928 = cbLight._m0[_1672].z + _282;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1936 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1672].xyz));
    float _3766 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _1940 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1926 * _1932, _1927 * _1932, _1928 * _1932));
    float _3788 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1958 = (0.5 / ((_1939 + 9.9999999392252902907785028219223e-09) + _1940)) * _1939;
    float _3799 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.31831014156341552734375;
    uint _1974 = _1672 + 9u;
    float _1980 = cbLight._m0[_1714].x + _280;
    float _1981 = cbLight._m0[_1714].y + _281;
    float _1982 = cbLight._m0[_1714].z + _282;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1990 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1714].xyz));
    float _3810 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1980 * _1986, _1981 * _1986, _1982 * _1986));
    float _3821 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = (0.5 / ((_1993 + 9.9999999392252902907785028219223e-09) + _1940)) * _1993;
    float _3832 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.31831014156341552734375;
    float _2019 = (((_2003 * cbLight._m0[_1974].x) * _2009) * _1696) + ((((cbLight._m0[_1920].x * _1661) * _1952) * _1960) * _1710);
    float _2020 = (((_2003 * cbLight._m0[_1974].y) * _2009) * _1696) + ((((cbLight._m0[_1920].y * _1663) * _1952) * _1960) * _1710);
    float _2021 = (((_2003 * cbLight._m0[_1974].z) * _2009) * _1696) + ((((cbLight._m0[_1920].z * _1665) * _1952) * _1960) * _1710);
    float _2077;
    float _2079;
    float _2081;
    if (_1750)
    {
        _2077 = _2019;
        _2079 = _2020;
        _2081 = _2021;
    }
    else
    {
        uint _2083 = _1672 + 10u;
        uint _2089 = _1672 + 2u;
        float _2095 = cbLight._m0[_2089].x + _280;
        float _2096 = cbLight._m0[_2089].y + _281;
        float _2097 = cbLight._m0[_2089].z + _282;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2105 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_2089].xyz));
        float _3843 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _2109 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2095 * _2101, _2096 * _2101, _2097 * _2101));
        float _3854 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = (0.5 / ((_2108 + 9.9999999392252902907785028219223e-09) + _1940)) * _2108;
        float _3865 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.31831014156341552734375;
        float _2125 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
        _2077 = (((_2118 * cbLight._m0[_2083].x) * _2124) * _2125) + _2019;
        _2079 = (((_2118 * cbLight._m0[_2083].y) * _2124) * _2125) + _2020;
        _2081 = (((_2118 * cbLight._m0[_2083].z) * _2124) * _2125) + _2021;
    }
    float _2156;
    float _2158;
    float _2160;
    if (_1859)
    {
        _2156 = _2077;
        _2158 = _2079;
        _2160 = _2081;
    }
    else
    {
        uint _2167 = _1672 + 11u;
        uint _2173 = _1672 + 3u;
        float _2179 = cbLight._m0[_2173].x + _280;
        float _2180 = cbLight._m0[_2173].y + _281;
        float _2181 = cbLight._m0[_2173].z + _282;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2189 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_2173].xyz));
        float _3881 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2179 * _2185, _2180 * _2185, _2181 * _2185));
        float _3892 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2206 = (0.5 / ((_2192 + 9.9999999392252902907785028219223e-09) + _1940)) * _2192;
        float _3903 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.31831014156341552734375;
        float _2209 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2156 = (((_2202 * cbLight._m0[_2167].x) * _2208) * _2209) + _2077;
        _2158 = (((_2202 * cbLight._m0[_2167].y) * _2208) * _2209) + _2079;
        _2160 = (((_2202 * cbLight._m0[_2167].z) * _2208) * _2209) + _2081;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1670.y == 0u)
    {
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _302) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _301) / _2231)));
        float _2252 = (log2(_1448 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
        }
        else
        {
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            uint _2502 = 0u;
            uint _2511;
            bool _2512;
            for (;;)
            {
                _2511 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2502 << 2u)) >> 2u)).x;
                _2512 = _2511 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2512)
                {
                    frontier_phi_71_pred = _2501;
                    frontier_phi_71_pred_1 = _2500;
                    frontier_phi_71_pred_2 = _2499;
                    frontier_phi_71_pred_3 = _2498;
                    frontier_phi_71_pred_4 = _2497;
                    frontier_phi_71_pred_5 = _2496;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2511;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2502 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _1446;
                        float _2708 = _2667.y - _1447;
                        float _2709 = _2667.z - _1448;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _3929 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * dot(vec3(_322, _325, _328), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709))) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _1446;
                        float _2743 = (-0.0) - _1447;
                        float _2744 = (-0.0) - _1448;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2752 = dot(vec3(_322, _325, _328), vec3(_2748 * _2742, _2748 * _2743, _2748 * _2744));
                        float _3945 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _3956 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2756 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2760 = (0.5 / (((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) + 9.9999999392252902907785028219223e-09) + _2756)) * _2756;
                        float _3967 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2769 = (((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 3.1415927410125732421875) / ((_2734 * 2.1991131305694580078125) + 3.141590118408203125)) * _2723;
                        _2571 = (_2738 * _2686.x) + _2644;
                        _2572 = (_2738 * _2686.y) + _2645;
                        _2573 = (_2738 * _2686.z) + _2646;
                        _2568 = (_2769 * _2703.x) + _2641;
                        _2569 = (_2769 * _2703.y) + _2642;
                        _2570 = (_2769 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2568;
                            _2642 = _2569;
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_71_pred = _2573;
                    frontier_phi_71_pred_1 = _2572;
                    frontier_phi_71_pred_2 = _2571;
                    frontier_phi_71_pred_3 = _2570;
                    frontier_phi_71_pred_4 = _2569;
                    frontier_phi_71_pred_5 = _2568;
                }
                _2355 = frontier_phi_71_pred;
                _2353 = frontier_phi_71_pred_1;
                _2351 = frontier_phi_71_pred_2;
                _2349 = frontier_phi_71_pred_3;
                _2347 = frontier_phi_71_pred_4;
                _2345 = frontier_phi_71_pred_5;
                uint _2503 = _2502 + 1u;
                if (_2503 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2496 = _2345;
                    _2497 = _2347;
                    _2498 = _2349;
                    _2499 = _2351;
                    _2500 = _2353;
                    _2501 = _2355;
                    _2502 = _2503;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
        }
        uvec4 _2358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2359 = _2358.z;
        uint _2361 = (_2359 >> 8u) & 15u;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        if (((4294967295u << _2361) & _2262) == 0u)
        {
            _2467 = _2344;
            _2469 = _2346;
            _2471 = _2348;
            _2473 = _2350;
            _2475 = _2352;
            _2477 = _2354;
        }
        else
        {
            float _2492 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2361 < ((_2359 >> 12u) & 15u))
            {
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2624 = _2344;
                float _2625 = _2346;
                float _2626 = _2348;
                float _2627 = _2350;
                float _2628 = _2352;
                float _2629 = _2354;
                uint _2630 = _2361;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2640)
                    {
                        frontier_phi_82_pred = _2629;
                        frontier_phi_82_pred_1 = _2628;
                        frontier_phi_82_pred_2 = _2627;
                        frontier_phi_82_pred_3 = _2626;
                        frontier_phi_82_pred_4 = _2625;
                        frontier_phi_82_pred_5 = _2624;
                    }
                    else
                    {
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _2796 = _2624;
                        float _2797 = _2625;
                        float _2798 = _2626;
                        float _2799 = _2627;
                        float _2800 = _2628;
                        float _2801 = _2629;
                        uint _2802 = _2639;
                        uint _2803;
                        vec4 _2828;
                        float _2829;
                        vec4 _2844;
                        vec3 _2856;
                        vec4 _2872;
                        vec4 _2888;
                        float _2935;
                        bool _2936;
                        for (;;)
                        {
                            uint _2813 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2802));
                            _2803 = (_2802 + 4294967295u) & _2802;
                            uint _2815 = _2813 * 40u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            _2829 = _2828.w;
                            uint _2831 = (_2813 * 40u) + 4u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2846 = (_2813 * 40u) + 8u;
                            _2856 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x));
                            uint _2859 = (_2813 * 40u) + 16u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2813 * 40u) + 20u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2891 = (_2813 * 40u) + 24u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2910 = (_2813 * 40u) + 28u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2935 = fma(_1448, _2923.z, fma(_1447, _2923.y, _2923.x * _1446)) + _2923.w;
                            _2936 = !((fma(_1448, _2904.z, fma(_1447, _2904.y, _2904.x * _1446)) + _2904.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2936)
                            {
                                float _2963 = _2828.x - _1446;
                                float _2964 = _2828.y - _1447;
                                float _2965 = _2828.z - _1448;
                                float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                                float _2969 = inversesqrt(_2966);
                                float _2970 = _2969 * _2963;
                                float _2971 = _2969 * _2964;
                                float _2972 = _2969 * _2965;
                                float _2976 = 1.0 - (_2966 / (_2829 * _2829));
                                float _3978 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _2981 = sqrt(_2966) * _2844.w;
                                float _2983 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                                float _2984 = _2983 * _2983;
                                float _2985 = 1.0 - _2984;
                                float _2987 = (_2985 * dot(vec3(_2970, _2971, _2972), vec3(_322, _325, _328))) + _2984;
                                float _2990 = _2981 * _2981;
                                float _2994 = (fma(_1448, _2872.z, fma(_1447, _2872.y, _2872.x * _1446)) + _2872.w) / _2935;
                                float _2995 = (fma(_1448, _2888.z, fma(_1447, _2888.y, _2888.x * _1446)) + _2888.w) / _2935;
                                float _2999 = 1.0 - dot(vec2(_2994, _2995), vec2(_2994, _2995));
                                float _3994 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3000 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3001 = _3000 * (((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2977) / ((_2990 * 0.699999988079071044921875) + 1.0));
                                float _3011 = dot(vec3(_322, _325, _328), vec3((-0.0) - (_1446 * _2492), (-0.0) - (_1447 * _2492), (-0.0) - (_1448 * _2492)));
                                float _4005 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3019 = (_2985 * dot(vec3(_322, _325, _328), vec3(_2970, _2971, _2972))) + _2984;
                                float _4016 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3024 = (0.5 / (((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) + 9.9999999392252902907785028219223e-09) + _3020)) * _3020;
                                float _4027 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3031 = (_3000 * _2977) * (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 3.1415927410125732421875) / ((_2990 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3001 * _2844.z;
                                frontier_phi_88_pred_1 = _3001 * _2844.y;
                                frontier_phi_88_pred_2 = _3001 * _2844.x;
                                frontier_phi_88_pred_3 = _3031 * _2856.z;
                                frontier_phi_88_pred_4 = _3031 * _2856.y;
                                frontier_phi_88_pred_5 = _3031 * _2856.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3040 = frontier_phi_88_pred;
                            _3039 = frontier_phi_88_pred_1;
                            _3038 = frontier_phi_88_pred_2;
                            _3037 = frontier_phi_88_pred_3;
                            _3036 = frontier_phi_88_pred_4;
                            _3035 = frontier_phi_88_pred_5;
                            _2786 = _3038 + _2799;
                            _2787 = _3039 + _2800;
                            _2788 = _3040 + _2801;
                            _2783 = _3035 + _2796;
                            _2784 = _3036 + _2797;
                            _2785 = _3037 + _2798;
                            if (_2803 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2803;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2788;
                        frontier_phi_82_pred_1 = _2787;
                        frontier_phi_82_pred_2 = _2786;
                        frontier_phi_82_pred_3 = _2785;
                        frontier_phi_82_pred_4 = _2784;
                        frontier_phi_82_pred_5 = _2783;
                    }
                    _2478 = frontier_phi_82_pred;
                    _2476 = frontier_phi_82_pred_1;
                    _2474 = frontier_phi_82_pred_2;
                    _2472 = frontier_phi_82_pred_3;
                    _2470 = frontier_phi_82_pred_4;
                    _2468 = frontier_phi_82_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2468;
                        _2625 = _2470;
                        _2626 = _2472;
                        _2627 = _2474;
                        _2628 = _2476;
                        _2629 = _2478;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2474;
                frontier_phi_63_64_ladder_1 = _2478;
                frontier_phi_63_64_ladder_2 = _2476;
                frontier_phi_63_64_ladder_3 = _2472;
                frontier_phi_63_64_ladder_4 = _2470;
                frontier_phi_63_64_ladder_5 = _2468;
            }
            else
            {
                frontier_phi_63_64_ladder = _2350;
                frontier_phi_63_64_ladder_1 = _2354;
                frontier_phi_63_64_ladder_2 = _2352;
                frontier_phi_63_64_ladder_3 = _2348;
                frontier_phi_63_64_ladder_4 = _2346;
                frontier_phi_63_64_ladder_5 = _2344;
            }
            _2467 = frontier_phi_63_64_ladder_5;
            _2469 = frontier_phi_63_64_ladder_4;
            _2471 = frontier_phi_63_64_ladder_3;
            _2473 = frontier_phi_63_64_ladder;
            _2475 = frontier_phi_63_64_ladder_2;
            _2477 = frontier_phi_63_64_ladder_1;
        }
        float _2482 = isnan(1.0) ? _367 : (isnan(_367) ? 1.0 : min(_367, 1.0));
        _2275 = (_2482 * _2473) + _1914;
        _2277 = (_2482 * _2475) + _1916;
        _2279 = (_2482 * _2477) + _1918;
        _2281 = ((_2467 * 0.039999999105930328369140625) * _2482) + _2156;
        _2283 = ((_2469 * 0.039999999105930328369140625) * _2482) + _2158;
        _2285 = ((_2471 * 0.039999999105930328369140625) * _2482) + _2160;
    }
    else
    {
        _2275 = _1914;
        _2277 = _1916;
        _2279 = _1918;
        _2281 = _2156;
        _2283 = _2158;
        _2285 = _2160;
    }
    float _4043 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _4054 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _4065 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _4076 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2303 = ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2275 + ((isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))) * _367))) + ((_2281 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _1178)) * cbPerFrame._m0[3u].x);
    float _2304 = ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2277 + ((isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))) * _367))) + ((_2283 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1178)) * cbPerFrame._m0[3u].x);
    float _2305 = ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2279 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _367))) + ((_2285 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1178)) * cbPerFrame._m0[3u].x);
    float _2310 = cbInstanceData._m0[_341 + 6u].w * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)));
    float _2315 = _301 / cbSceneParam._m0[86u].x;
    float _2316 = _302 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _221 : (isnan(_221) ? cbSceneParam._m0[77u].w : min(_221, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    if (_221 > cbSceneParam._m0[78u].w)
    {
        float _2369 = isnan(_221) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _221 : min(cbSceneParam._m0[80u].w, _221));
        float _2370 = _2369 / _221;
        float _2381 = _2370 * _273;
        float _2382 = _274 * _2370;
        float _2383 = (-0.0) - _2382;
        float _2385 = _2370 * _275;
        float _2387 = (cbSceneParam._m0[77u].w * _2383) / _2369;
        float _2388 = _2387 + cbSceneParam._m0[79u].w;
        float _2389 = cbSceneParam._m0[79u].w - _2382;
        float _2395 = sqrt(((_2381 * _2381) + (_2382 * _2382)) + (_2385 * _2385));
        float _2398 = (1.0 - (cbSceneParam._m0[77u].w / _2369)) * _2395;
        float _2403 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2405 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2581;
        if (abs((_2383 - _2387) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2581 = ((((_2388 > 0.0) ? exp2(_2403 * _2388) : (2.0 - exp2(_2405 * _2388))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2398;
        }
        else
        {
            float _2525 = 1.0 / cbSceneParam._m0[80u].x;
            float _2526 = isnan(_2389) ? _2388 : (isnan(_2388) ? _2389 : max(_2388, _2389));
            float _2527 = isnan(_2389) ? _2388 : (isnan(_2388) ? _2389 : min(_2388, _2389));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            _2581 = ((abs(_2395 / _2383) * cbSceneParam._m0[80u].y) * ((((_2536 - _2537) * 2.0) - ((exp2(_2403 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0)))) - exp2(_2403 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0))))) * _2525)) - ((exp2(_2405 * _2536) - exp2(_2405 * _2537)) * _2525))) + (_2398 * cbSceneParam._m0[80u].z);
        }
        vec4 _2583 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2592 = exp2((_2581 * (-1.44269502162933349609375)) * (1.0 - _2583.w));
        float _2593 = log2(_2592);
        float _2609 = log2(_2335);
        _2407 = (exp2(_2609 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].x)) * _2583.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2409 = (exp2(_2609 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].y)) * _2583.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2411 = (exp2(_2609 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].z)) * _2583.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2413 = _2592 * _2335;
    }
    else
    {
        _2407 = _2332;
        _2409 = _2333;
        _2411 = _2334;
        _2413 = _2335;
    }
    bool _2619;
    vec4 _2423;
    vec4 _2446;
    float _2448;
    float _2452;
    float _2453;
    float _2454;
    float _2455;
    bool _2466;
    for (;;)
    {
        _2423 = cbMatDynParam._m0[0u];
        float _2425 = roundEven(_2423.y);
        bool _2426 = _2425 == 3.0;
        float _2428 = log2(_2413);
        float _2435 = exp2(_2428 * cbSceneParam._m0[78u].x) * _2303;
        float _2436 = exp2(_2428 * cbSceneParam._m0[78u].y) * _2304;
        float _2437 = exp2(_2428 * cbSceneParam._m0[78u].z) * _2305;
        float _2444 = _289 + (-0.5);
        _2446 = cbMtdParam._m0[1u];
        _2448 = _2446.y * _2444;
        float _2451 = (_2425 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2452 = _2451 * (_2426 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2407)));
        _2453 = _2451 * (_2426 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
        _2454 = _2451 * (_2426 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
        _2455 = _2444 * 0.999000012874603271484375;
        _2466 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2466)
        {
            if ((cbInstanceData._m0[_341 + 7u].x + _2455) < 0.5)
            {
                _2619 = true;
                break;
            }
        }
        uint _2560 = _343 + uint(_2423.w);
        if ((cbInstanceData._m0[_2560].w < 1.0) && ((cbInstanceData._m0[_2560].w + _2455) < 0.5))
        {
            _2619 = true;
            break;
        }
        if ((_2448 + _192) < _2446.x)
        {
            _2619 = true;
            break;
        }
        _2619 = false;
        break;
    }
    float _2774;
    if (_2619)
    {
        discard_state = true;
        _2774 = 0.0;
    }
    else
    {
        _2774 = _2310;
    }
    SV_Target.x = _2452;
    SV_Target.y = _2453;
    SV_Target.z = _2454;
    SV_Target.w = _2774;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2310;
    discard_exit();
}


