#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _738;
float _2929;
float _2930;
float _2931;
float _2932;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _187 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _187.w;
    float _191 = _190 * TEXCOORD_1.z;
    float _195 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _196 = _195 * _165;
    float _197 = _195 * _166;
    float _198 = _195 * _167;
    float _2941 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _200 = isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0));
    float _2952 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2963 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2974 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _219 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _277 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _278 = _271 * _277;
    float _279 = _272 * _277;
    float _280 = _273 * _277;
    vec4 _285 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _287 = _285.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _417 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _423 = (cbMatDynParam._m0[5u].x * _417) + cbMatDynParam._m0[5u].y;
        float _2985 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
        float _424 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
        float _428 = (cbMatDynParam._m0[5u].z * _417) + cbMatDynParam._m0[5u].w;
        float _2996 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) - _424)) + _424) < ((_287 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _299 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _300 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _320 = fma(_198, cbSceneParam._m0[5u].z, fma(_197, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _196));
    float _323 = fma(_198, cbSceneParam._m0[6u].z, fma(_197, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _196));
    float _326 = fma(_198, cbSceneParam._m0[7u].z, fma(_197, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _196));
    uint _339 = uint(roundEven(NORMAL.w)) * 13u;
    uint _341 = _339 + 9u;
    uint _342 = _341 + uint(cbMatDynParam._m0[0u].w);
    float _348 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0)))) * cbInstanceData._m0[_342].x;
    float _349 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0)))) * cbInstanceData._m0[_342].y;
    float _350 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0)))) * cbInstanceData._m0[_342].z;
    float _3007 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
    float _3018 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
    float _3029 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
    vec4 _362 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _299, cbSceneParam._m0[86u].y * _300));
    float _365 = _362.x * TEXCOORD_1.w;
    float _366 = dot(vec3(_196, _197, _198), vec3(_278, _279, _280));
    float _369 = _366 * 2.0;
    float _374 = (_369 * _196) - _278;
    float _375 = (_369 * _197) - _279;
    float _376 = (_369 * _198) - _280;
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _737;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _462 = fma(_406, cbModelParam._m0[26u].z, fma(_402, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _398));
        float _466 = fma(_406, cbModelParam._m0[27u].z, fma(_402, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _398));
        float _470 = fma(_406, cbModelParam._m0[28u].z, fma(_402, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _398));
        float _495 = _398 + _196;
        float _496 = _402 + _197;
        float _497 = _406 + _198;
        float _507 = fma(_497, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) - _462;
        float _508 = fma(_497, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) - _466;
        float _509 = fma(_497, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) - _470;
        float _513 = inversesqrt(dot(vec3(_507, _508, _509), vec3(_507, _508, _509)));
        float _526 = ((_513 * _507) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_462 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_513 * _508) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_466 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_513 * _509) / cbModelParam._m0[34u].z) + ((((((_470 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        float _565 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_531.x + (-0.5));
        float _567 = _565 * (_531.y + (-0.5));
        float _568 = _565 * (_531.z + (-0.5));
        float _575 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_538.x + (-0.5));
        float _577 = _575 * (_538.y + (-0.5));
        float _578 = _575 * (_538.z + (-0.5));
        float _585 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_545.x + (-0.5));
        float _587 = _585 * (_545.y + (-0.5));
        float _588 = _585 * (_545.z + (-0.5));
        float _595 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_552.x + (-0.5));
        float _597 = _595 * (_552.y + (-0.5));
        float _598 = _595 * (_552.z + (-0.5));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = _566 * 0.5;
        float _603 = _576 * 0.5;
        float _604 = _586 * 0.5;
        float _605 = dot(vec3(_602, _603, _604), vec3(_602, _603, _604));
        float _610 = (_605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_605);
        float _619 = (dot(vec3(_196, _197, _198), vec3(_610 * _602, _610 * _603, _610 * _604)) + 1.0) * 0.5;
        float _3055 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _629 = sqrt(((_603 * _603) + (_602 * _602)) + (_604 * _604)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3066 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _631 = _630 * 2.0;
        float _635 = (1.0 - _630) / (_630 + 1.0);
        float _3077 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
        float _645 = ((((1.0 - _636) * (_631 + 2.0)) * exp2(log2(isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0))) * (_631 + 1.0))) + _636) * _599;
        float _646 = _567 * 0.5;
        float _647 = _577 * 0.5;
        float _648 = _587 * 0.5;
        float _649 = dot(vec3(_646, _647, _648), vec3(_646, _647, _648));
        float _654 = (_649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_649);
        float _662 = (dot(vec3(_196, _197, _198), vec3(_654 * _646, _654 * _647, _654 * _648)) + 1.0) * 0.5;
        float _3088 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _671 = sqrt(((_647 * _647) + (_646 * _646)) + (_648 * _648)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3099 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3110 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0))) * (_673 + 1.0))) + _678) * _600;
        float _688 = _568 * 0.5;
        float _689 = _578 * 0.5;
        float _690 = _588 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_196, _197, _198), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3121 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3132 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3143 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_715 + 1.0))) + _720) * _601;
        _737 = _568;
        _739 = _567;
        _740 = _566;
        _741 = _578;
        _742 = _577;
        _743 = _576;
        _744 = _588;
        _745 = _587;
        _746 = _586;
        _747 = _601;
        _748 = _600;
        _749 = _599;
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
    }
    else
    {
        _737 = _738;
        _739 = _738;
        _740 = _738;
        _741 = _738;
        _742 = _738;
        _743 = _738;
        _744 = _738;
        _745 = _738;
        _746 = _738;
        _747 = _738;
        _748 = _738;
        _749 = _738;
        _750 = 0.0;
        _751 = 0.0;
        _752 = 0.0;
    }
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _781 = fma(_406, cbModelParam._m0[30u].z, fma(_402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _398));
        float _785 = fma(_406, cbModelParam._m0[31u].z, fma(_402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _398));
        float _789 = fma(_406, cbModelParam._m0[32u].z, fma(_402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _398));
        float _812 = _398 + _196;
        float _813 = _402 + _197;
        float _814 = _406 + _198;
        float _824 = fma(_814, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812)) - _781;
        float _825 = fma(_814, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812)) - _785;
        float _826 = fma(_814, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812)) - _789;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_781 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_785 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[35u].z) + ((((((_789 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _880 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_847.x + (-0.5));
        float _882 = _880 * (_847.y + (-0.5));
        float _883 = _880 * (_847.z + (-0.5));
        float _890 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_854.x + (-0.5));
        float _892 = _890 * (_854.y + (-0.5));
        float _893 = _890 * (_854.z + (-0.5));
        float _900 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_861.x + (-0.5));
        float _902 = _900 * (_861.y + (-0.5));
        float _903 = _900 * (_861.z + (-0.5));
        float _910 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_868.x + (-0.5));
        float _912 = _910 * (_868.y + (-0.5));
        float _913 = _910 * (_868.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_196, _197, _198), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3184 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3195 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3206 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * (_944 + 1.0))) + _949) * _914;
        float _959 = _882 * 0.5;
        float _960 = _892 * 0.5;
        float _961 = _902 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_196, _197, _198), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3239 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_986 + 1.0))) + _991) * _915;
        float _1001 = _883 * 0.5;
        float _1002 = _893 * 0.5;
        float _1003 = _903 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_196, _197, _198), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3272 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_1028 + 1.0))) + _1033) * _916;
        _1050 = _883;
        _1051 = _882;
        _1052 = _881;
        _1053 = _893;
        _1054 = _892;
        _1055 = _891;
        _1056 = _903;
        _1057 = _902;
        _1058 = _901;
        _1059 = _916;
        _1060 = _915;
        _1061 = _914;
        _1062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1063 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _738;
        _1051 = _738;
        _1052 = _738;
        _1053 = _738;
        _1054 = _738;
        _1055 = _738;
        _1056 = _738;
        _1057 = _738;
        _1058 = _738;
        _1059 = _738;
        _1060 = _738;
        _1061 = _738;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1074 = (cbModelParam._m0[1u].x * (_1062 - _750)) + _750;
    float _1075 = (cbModelParam._m0[1u].x * (_1063 - _751)) + _751;
    float _1076 = (cbModelParam._m0[1u].x * (_1064 - _752)) + _752;
    float _1097 = fma(_1076, cbSceneParam._m0[89u].z, fma(_1075, cbSceneParam._m0[89u].y, _1074 * cbSceneParam._m0[89u].x));
    float _1100 = fma(_1076, cbSceneParam._m0[90u].z, fma(_1075, cbSceneParam._m0[90u].y, _1074 * cbSceneParam._m0[90u].x));
    float _1103 = fma(_1076, cbSceneParam._m0[91u].z, fma(_1075, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1074));
    float _1118 = _374 * 0.5;
    float _1119 = _375 * 0.5;
    float _1120 = _376 * 0.5;
    float _1121 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1124 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_1051, _1054, _1057, _1060));
    float _1127 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_1050, _1053, _1056, _1059));
    float _1161;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1134 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_737, _741, _744, _747));
        float _1138 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_739, _742, _745, _748));
        float _1142 = dot(vec4(_1118, _1119, _1120, 1.0), vec4(_740, _743, _746, _749));
        float _1149 = dot(vec4(cbModelParam._m0[39u]), vec4(_1118, _1119, _1120, 1.0));
        _1161 = dot(vec3(isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1149) ? 0.0 : (isnan(0.0) ? _1149 : max(0.0, _1149))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1161 = 1.0;
    }
    float _1172;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1163 = dot(vec4(cbModelParam._m0[40u]), vec4(_1118, _1119, _1120, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1163) ? 0.0 : (isnan(0.0) ? _1163 : max(0.0, _1163))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1176 = (_1172 * cbModelParam._m0[1u].x) + (_1161 * (1.0 - cbModelParam._m0[1u].x));
    float _1185 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1267;
    float _1269;
    float _1271;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1234 = fma(_406, cbModelParam._m0[13u].z, fma(_402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _398)) + cbModelParam._m0[13u].w;
        float _1238 = fma(_406, cbModelParam._m0[14u].z, fma(_402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _398)) + cbModelParam._m0[14u].w;
        float _1242 = fma(_406, cbModelParam._m0[15u].z, fma(_402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _398)) + cbModelParam._m0[15u].w;
        float _1245 = fma(_376, cbModelParam._m0[13u].z, fma(_375, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _374));
        float _1248 = fma(_376, cbModelParam._m0[14u].z, fma(_375, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _374));
        float _1251 = fma(_376, cbModelParam._m0[15u].z, fma(_375, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _374));
        float _1277;
        if (_1245 > 0.0)
        {
            _1277 = abs((1.0 - _1234) / _1245);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1234 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1277 = frontier_phi_17_15_ladder;
        }
        float _1506;
        if (_1248 > 0.0)
        {
            _1506 = abs((1.0 - _1238) / _1248);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1248 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1238 + 1.0) / _1248);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1506 = frontier_phi_26_22_ladder;
        }
        float _1698;
        if (_1251 > 0.0)
        {
            _1698 = abs((1.0 - _1242) / _1251);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1242 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1698 = frontier_phi_38_33_ladder;
        }
        float _1700 = isnan(_1506) ? _1277 : (isnan(_1277) ? _1506 : min(_1277, _1506));
        float _1701 = isnan(_1698) ? _1700 : (isnan(_1700) ? _1698 : min(_1700, _1698));
        float _1705 = (_1701 * _1245) + _1234;
        float _1706 = (_1701 * _1248) + _1238;
        float _1707 = (_1701 * _1251) + _1242;
        float _1708 = _1701 * 9.9999997473787516355514526367188e-05;
        float _1710 = (-1.0) - _1708;
        float _1712 = _1708 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1707 > _1712) || ((_1707 < _1710) || ((_1706 > _1712) || ((_1706 < _1710) || ((_1705 < _1710) || (_1705 > _1712))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1707, cbModelParam._m0[9u].z, fma(_1706, cbModelParam._m0[9u].y, _1705 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1707, cbModelParam._m0[10u].z, fma(_1706, cbModelParam._m0[10u].y, _1705 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1707, cbModelParam._m0[11u].z, fma(_1706, cbModelParam._m0[11u].y, _1705 * cbModelParam._m0[11u].x))), _1185);
            frontier_phi_16_38_ladder = _1804.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1804.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1804.x * cbModelParam._m0[1u].y;
        }
        _1267 = frontier_phi_16_38_ladder_2;
        _1269 = frontier_phi_16_38_ladder_1;
        _1271 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1255 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_374, _375, _376), _1185);
        _1267 = _1255.x * cbModelParam._m0[1u].y;
        _1269 = _1255.y * cbModelParam._m0[1u].y;
        _1271 = _1255.z * cbModelParam._m0[1u].y;
    }
    float _1274 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1367;
    float _1369;
    float _1371;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1331 = fma(_406, cbModelParam._m0[21u].z, fma(_402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _398)) + cbModelParam._m0[21u].w;
        float _1335 = fma(_406, cbModelParam._m0[22u].z, fma(_402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _398)) + cbModelParam._m0[22u].w;
        float _1339 = fma(_406, cbModelParam._m0[23u].z, fma(_402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _398)) + cbModelParam._m0[23u].w;
        float _1342 = fma(_376, cbModelParam._m0[21u].z, fma(_375, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _374));
        float _1345 = fma(_376, cbModelParam._m0[22u].z, fma(_375, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _374));
        float _1348 = fma(_376, cbModelParam._m0[23u].z, fma(_375, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _374));
        float _1511;
        if (_1342 > 0.0)
        {
            _1511 = abs((1.0 - _1331) / _1342);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1331 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1511 = frontier_phi_28_24_ladder;
        }
        float _1725;
        if (_1345 > 0.0)
        {
            _1725 = abs((1.0 - _1335) / _1345);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1335 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1725 = frontier_phi_40_35_ladder;
        }
        float _1876;
        if (_1348 > 0.0)
        {
            _1876 = abs((1.0 - _1339) / _1348);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1339 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1876 = frontier_phi_49_46_ladder;
        }
        float _1878 = isnan(_1725) ? _1511 : (isnan(_1511) ? _1725 : min(_1511, _1725));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1342) + _1331;
        float _1884 = (_1879 * _1345) + _1335;
        float _1885 = (_1879 * _1348) + _1339;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1886;
        float _1889 = _1886 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1885 > _1889) || ((_1885 < _1887) || ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 < _1887) || (_1883 > _1889))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1885, cbModelParam._m0[17u].z, fma(_1884, cbModelParam._m0[17u].y, _1883 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1885, cbModelParam._m0[18u].z, fma(_1884, cbModelParam._m0[18u].y, _1883 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1885, cbModelParam._m0[19u].z, fma(_1884, cbModelParam._m0[19u].y, _1883 * cbModelParam._m0[19u].x))), _1274);
            frontier_phi_25_49_ladder = _2086.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2086.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2086.x * cbModelParam._m0[1u].z;
        }
        _1367 = frontier_phi_25_49_ladder_2;
        _1369 = frontier_phi_25_49_ladder_1;
        _1371 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_374, _375, _376), _1274);
        _1367 = _1351.x * cbModelParam._m0[1u].z;
        _1369 = _1351.y * cbModelParam._m0[1u].z;
        _1371 = _1351.z * cbModelParam._m0[1u].z;
    }
    float _1383 = _365 * 0.01200000010430812835693359375;
    float _1385 = _1383 * ((cbModelParam._m0[1u].w * (_1367 - _1267)) + _1267);
    float _1386 = _1383 * ((cbModelParam._m0[1u].w * (_1369 - _1269)) + _1269);
    float _1387 = _1383 * ((cbModelParam._m0[1u].w * (_1371 - _1271)) + _1271);
    float _1390 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, _1385 * cbSceneParam._m0[91u].x));
    vec4 _1404 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_299, _300));
    float _1406 = _1404.w;
    float _1418 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1406);
    float _1419 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1406);
    float _1420 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1406);
    uvec4 _1424 = floatBitsToUint(cbInstanceData._m0[_339 + 5u]);
    uint _1426 = _1424.x * 14u;
    uint _1427 = _1426 + 13u;
    float _1434 = _365 + (-1.0);
    float _1440 = (cbLight._m0[_1427].x * _1434) + 1.0;
    float _1441 = (cbLight._m0[_1427].y * _1434) + 1.0;
    float _1442 = (cbLight._m0[_1427].z * _1434) + 1.0;
    float _1443 = (cbLight._m0[_1427].w * _1434) + 1.0;
    uint _1444 = _1426 + 5u;
    float _1450 = isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0));
    uint _1454 = _1426 + 4u;
    float _1464 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
    uint _1468 = _1426 | 1u;
    float _1479 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_196, _197, _198));
    float _1482 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_196, _197, _198));
    float _3408 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _3419 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _1487 = (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.3183098733425140380859375;
    float _1489 = (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.3183098733425140380859375;
    float _1496 = ((cbLight._m0[_1444].x * _1450) * _1489) + (((cbLight._m0[_1454].x * _1418) * _1464) * _1487);
    float _1497 = ((_1450 * cbLight._m0[_1444].y) * _1489) + (((cbLight._m0[_1454].y * _1419) * _1464) * _1487);
    float _1498 = ((_1450 * cbLight._m0[_1444].z) * _1489) + (((cbLight._m0[_1454].z * _1420) * _1464) * _1487);
    uvec4 _1503 = floatBitsToUint(cbLight._m0[_1426 + 12u]);
    bool _1505 = _1503.x == 0u;
    float _1516;
    float _1518;
    float _1520;
    if (_1505)
    {
        _1516 = _1496;
        _1518 = _1497;
        _1520 = _1498;
    }
    else
    {
        uint _1524 = _1426 + 6u;
        float _1540 = (dot(vec3(cbLight._m0[_1426 + 2u].xyz), vec3(_196, _197, _198)) * 0.5) + 0.5;
        float _1541 = _1540 * _1540;
        float _3430 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1543 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
        _1516 = (((cbLight._m0[_1524].x * 0.3183098733425140380859375) * _1542) * _1543) + _1496;
        _1518 = (((cbLight._m0[_1524].y * 0.3183098733425140380859375) * _1542) * _1543) + _1497;
        _1520 = (((cbLight._m0[_1524].z * 0.3183098733425140380859375) * _1542) * _1543) + _1498;
    }
    bool _1523 = _1503.y == 0u;
    float _1561;
    float _1563;
    float _1565;
    if (_1523)
    {
        _1561 = _1516;
        _1563 = _1518;
        _1565 = _1520;
    }
    else
    {
        uint _1669 = _1426 + 7u;
        float _1685 = (dot(vec3(cbLight._m0[_1426 + 3u].xyz), vec3(_196, _197, _198)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3446 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1688 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
        _1561 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1516;
        _1563 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1518;
        _1565 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1520;
    }
    uint _1567 = _1426 + 8u;
    float _1573 = cbLight._m0[_1426].x + _278;
    float _1574 = cbLight._m0[_1426].y + _279;
    float _1575 = cbLight._m0[_1426].z + _280;
    float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
    float _1583 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1426].xyz));
    float _3462 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1586 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _1587 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _1588 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_1573 * _1579, _1574 * _1579, _1575 * _1579));
    float _3484 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1599 = (exp2(log2(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1605 = (0.5 / ((_1586 + 9.9999999392252902907785028219223e-09) + _1587)) * _1586;
    float _3495 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1607 = (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.31831014156341552734375;
    uint _1621 = _1426 + 9u;
    float _1627 = cbLight._m0[_1468].x + _278;
    float _1628 = cbLight._m0[_1468].y + _279;
    float _1629 = cbLight._m0[_1468].z + _280;
    float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
    float _1637 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1468].xyz));
    float _3506 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1640 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _1641 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_1627 * _1633, _1628 * _1633, _1629 * _1633));
    float _3517 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1650 = (exp2(log2(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1654 = (0.5 / ((_1640 + 9.9999999392252902907785028219223e-09) + _1587)) * _1640;
    float _3528 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1656 = (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.31831014156341552734375;
    float _1666 = (((_1650 * cbLight._m0[_1621].x) * _1656) * _1450) + ((((cbLight._m0[_1567].x * _1418) * _1599) * _1607) * _1464);
    float _1667 = (((_1650 * cbLight._m0[_1621].y) * _1656) * _1450) + ((((cbLight._m0[_1567].y * _1419) * _1599) * _1607) * _1464);
    float _1668 = (((_1650 * cbLight._m0[_1621].z) * _1656) * _1450) + ((((cbLight._m0[_1567].z * _1420) * _1599) * _1607) * _1464);
    float _1730;
    float _1732;
    float _1734;
    if (_1505)
    {
        _1730 = _1666;
        _1732 = _1667;
        _1734 = _1668;
    }
    else
    {
        uint _1736 = _1426 + 10u;
        uint _1742 = _1426 + 2u;
        float _1748 = cbLight._m0[_1742].x + _278;
        float _1749 = cbLight._m0[_1742].y + _279;
        float _1750 = cbLight._m0[_1742].z + _280;
        float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
        float _1758 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1742].xyz));
        float _3539 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1761 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1762 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1748 * _1754, _1749 * _1754, _1750 * _1754));
        float _3550 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1775 = (0.5 / ((_1761 + 9.9999999392252902907785028219223e-09) + _1587)) * _1761;
        float _3561 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1777 = (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.31831014156341552734375;
        float _1778 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
        _1730 = (((_1771 * cbLight._m0[_1736].x) * _1777) * _1778) + _1666;
        _1732 = (((_1771 * cbLight._m0[_1736].y) * _1777) * _1778) + _1667;
        _1734 = (((_1771 * cbLight._m0[_1736].z) * _1777) * _1778) + _1668;
    }
    float _1813;
    float _1815;
    float _1817;
    if (_1523)
    {
        _1813 = _1730;
        _1815 = _1732;
        _1817 = _1734;
    }
    else
    {
        uint _1824 = _1426 + 11u;
        uint _1830 = _1426 + 3u;
        float _1836 = cbLight._m0[_1830].x + _278;
        float _1837 = cbLight._m0[_1830].y + _279;
        float _1838 = cbLight._m0[_1830].z + _280;
        float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
        float _1846 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1830].xyz));
        float _3577 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1849 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1850 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1836 * _1842, _1837 * _1842, _1838 * _1842));
        float _3588 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1863 = (0.5 / ((_1849 + 9.9999999392252902907785028219223e-09) + _1587)) * _1849;
        float _3599 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1865 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.31831014156341552734375;
        float _1866 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
        _1813 = (((_1859 * cbLight._m0[_1824].x) * _1865) * _1866) + _1730;
        _1815 = (((_1859 * cbLight._m0[_1824].y) * _1865) * _1866) + _1732;
        _1817 = (((_1859 * cbLight._m0[_1824].z) * _1865) * _1866) + _1734;
    }
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_1424.y == 0u)
    {
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1941;
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1941;
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1941;
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.x;
        uint _1968 = uint((float(_1956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _300) / _1957))) + floor(float(uint(cbSceneParam._m0[85u].x * _299) / _1957)));
        float _1978 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1979 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        uint _1982 = uint(isnan(14.0) ? _1979 : (isnan(_1979) ? 14.0 : min(_1979, 14.0)));
        uvec4 _1987 = texelFetch(g_lightClusterGridBuffer, int(((_1982 << 2u) + (_1968 << 6u)) >> 2u));
        uint _1988 = _1987.x;
        uint _1989 = _1956.z;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        float _2101;
        if (((((1u << ((_1989 >> 4u) & 15u)) + 4294967295u) & _1988) == 0u) || ((_1989 & 240u) == 0u))
        {
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
        }
        else
        {
            float _2092;
            float _2094;
            float _2096;
            float _2098;
            float _2100;
            float _2102;
            float _2243 = 0.0;
            float _2244 = 0.0;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            uint _2249 = 0u;
            uint _2258;
            bool _2259;
            for (;;)
            {
                _2258 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2249 << 2u)) >> 2u)).x;
                _2259 = _2258 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2259)
                {
                    frontier_phi_66_pred = _2243;
                    frontier_phi_66_pred_1 = _2248;
                    frontier_phi_66_pred_2 = _2247;
                    frontier_phi_66_pred_3 = _2246;
                    frontier_phi_66_pred_4 = _2245;
                    frontier_phi_66_pred_5 = _2244;
                }
                else
                {
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    uint _2394;
                    _2388 = _2243;
                    _2389 = _2244;
                    _2390 = _2245;
                    _2391 = _2246;
                    _2392 = _2247;
                    _2393 = _2248;
                    _2394 = _2258;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    for (;;)
                    {
                        uint _2398 = uint(findLSB(_2394)) + (_2249 << 5u);
                        uint _2395 = (_2394 + 4294967295u) & _2394;
                        uint _2400 = _2398 * 48u;
                        vec4 _2414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 3u)).x));
                        uint _2420 = (_2398 * 48u) + 4u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 3u)).x));
                        uint _2439 = (_2398 * 48u) + 8u;
                        vec3 _2450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x));
                        float _2454 = _2414.x - _1942;
                        float _2455 = _2414.y - _1943;
                        float _2456 = _2414.z - _1944;
                        float _2457 = dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456));
                        float _2460 = inversesqrt(_2457);
                        float _2469 = 1.0 - (_2457 * _2414.w);
                        float _3625 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2470 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
                        float _2471 = sqrt(_2457) * _2433.w;
                        float _2474 = 1.39999997615814208984375 / (_2471 + 1.39999997615814208984375);
                        float _2475 = _2474 * _2474;
                        float _2478 = ((1.0 - _2475) * dot(vec3(_320, _323, _326), vec3(_2460 * _2454, _2460 * _2455, _2460 * _2456))) + _2475;
                        float _2481 = _2471 * _2471;
                        float _2485 = ((isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))) * _2470) / ((_2481 * 0.699999988079071044921875) + 1.0);
                        float _2489 = (-0.0) - _1942;
                        float _2490 = (-0.0) - _1943;
                        float _2491 = (-0.0) - _1944;
                        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
                        float _2499 = dot(vec3(_320, _323, _326), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491));
                        float _3641 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _3652 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                        float _2503 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
                        float _2507 = (0.5 / (((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) + 9.9999999392252902907785028219223e-09) + _2503)) * _2503;
                        float _3663 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2516 = (((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 3.1415927410125732421875) / ((_2481 * 2.1991131305694580078125) + 3.141590118408203125)) * _2470;
                        _2318 = (_2485 * _2433.x) + _2391;
                        _2319 = (_2485 * _2433.y) + _2392;
                        _2320 = (_2485 * _2433.z) + _2393;
                        _2315 = (_2516 * _2450.x) + _2388;
                        _2316 = (_2516 * _2450.y) + _2389;
                        _2317 = (_2516 * _2450.z) + _2390;
                        if (_2395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2388 = _2315;
                            _2389 = _2316;
                            _2390 = _2317;
                            _2391 = _2318;
                            _2392 = _2319;
                            _2393 = _2320;
                            _2394 = _2395;
                        }
                    }
                    frontier_phi_66_pred = _2315;
                    frontier_phi_66_pred_1 = _2320;
                    frontier_phi_66_pred_2 = _2319;
                    frontier_phi_66_pred_3 = _2318;
                    frontier_phi_66_pred_4 = _2317;
                    frontier_phi_66_pred_5 = _2316;
                }
                _2092 = frontier_phi_66_pred;
                _2102 = frontier_phi_66_pred_1;
                _2100 = frontier_phi_66_pred_2;
                _2098 = frontier_phi_66_pred_3;
                _2096 = frontier_phi_66_pred_4;
                _2094 = frontier_phi_66_pred_5;
                uint _2250 = _2249 + 1u;
                if (_2250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2243 = _2092;
                    _2244 = _2094;
                    _2245 = _2096;
                    _2246 = _2098;
                    _2247 = _2100;
                    _2248 = _2102;
                    _2249 = _2250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
        }
        uvec4 _2105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2106 = _2105.z;
        uint _2108 = (_2106 >> 8u) & 15u;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        if (((4294967295u << _2108) & _1988) == 0u)
        {
            _2214 = _2091;
            _2216 = _2093;
            _2218 = _2095;
            _2220 = _2097;
            _2222 = _2099;
            _2224 = _2101;
        }
        else
        {
            float _2239 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2108 < ((_2106 >> 12u) & 15u))
            {
                float _2215;
                float _2217;
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2371 = _2091;
                float _2372 = _2093;
                float _2373 = _2095;
                float _2374 = _2097;
                float _2375 = _2099;
                float _2376 = _2101;
                uint _2377 = _2108;
                uint _2386;
                bool _2387;
                for (;;)
                {
                    _2386 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2377 << 2u)) >> 2u)).x;
                    _2387 = _2386 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2387)
                    {
                        frontier_phi_77_pred = _2376;
                        frontier_phi_77_pred_1 = _2375;
                        frontier_phi_77_pred_2 = _2374;
                        frontier_phi_77_pred_3 = _2373;
                        frontier_phi_77_pred_4 = _2372;
                        frontier_phi_77_pred_5 = _2371;
                    }
                    else
                    {
                        float _2530;
                        float _2531;
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2535;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2543 = _2371;
                        float _2544 = _2372;
                        float _2545 = _2373;
                        float _2546 = _2374;
                        float _2547 = _2375;
                        float _2548 = _2376;
                        uint _2549 = _2386;
                        uint _2550;
                        vec4 _2575;
                        float _2576;
                        vec4 _2591;
                        vec3 _2603;
                        vec4 _2619;
                        vec4 _2635;
                        float _2682;
                        bool _2683;
                        for (;;)
                        {
                            uint _2560 = ((_2377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2549));
                            _2550 = (_2549 + 4294967295u) & _2549;
                            uint _2562 = _2560 * 40u;
                            _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            _2576 = _2575.w;
                            uint _2578 = (_2560 * 40u) + 4u;
                            _2591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 3u)).x));
                            uint _2593 = (_2560 * 40u) + 8u;
                            _2603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 2u)).x));
                            uint _2606 = (_2560 * 40u) + 16u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            uint _2622 = (_2560 * 40u) + 20u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2638 = (_2560 * 40u) + 24u;
                            vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2657 = (_2560 * 40u) + 28u;
                            vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            _2682 = fma(_1944, _2670.z, fma(_1943, _2670.y, _2670.x * _1942)) + _2670.w;
                            _2683 = !((fma(_1944, _2651.z, fma(_1943, _2651.y, _2651.x * _1942)) + _2651.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2683)
                            {
                                float _2710 = _2575.x - _1942;
                                float _2711 = _2575.y - _1943;
                                float _2712 = _2575.z - _1944;
                                float _2713 = dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712));
                                float _2716 = inversesqrt(_2713);
                                float _2717 = _2716 * _2710;
                                float _2718 = _2716 * _2711;
                                float _2719 = _2716 * _2712;
                                float _2723 = 1.0 - (_2713 / (_2576 * _2576));
                                float _3674 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                                float _2724 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
                                float _2728 = sqrt(_2713) * _2591.w;
                                float _2730 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                                float _2731 = _2730 * _2730;
                                float _2732 = 1.0 - _2731;
                                float _2734 = (_2732 * dot(vec3(_2717, _2718, _2719), vec3(_320, _323, _326))) + _2731;
                                float _2737 = _2728 * _2728;
                                float _2741 = (fma(_1944, _2619.z, fma(_1943, _2619.y, _2619.x * _1942)) + _2619.w) / _2682;
                                float _2742 = (fma(_1944, _2635.z, fma(_1943, _2635.y, _2635.x * _1942)) + _2635.w) / _2682;
                                float _2746 = 1.0 - dot(vec2(_2741, _2742), vec2(_2741, _2742));
                                float _3690 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                                float _2748 = _2747 * (((isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))) * _2724) / ((_2737 * 0.699999988079071044921875) + 1.0));
                                float _2758 = dot(vec3(_320, _323, _326), vec3((-0.0) - (_1942 * _2239), (-0.0) - (_1943 * _2239), (-0.0) - (_1944 * _2239)));
                                float _3701 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2766 = (_2732 * dot(vec3(_320, _323, _326), vec3(_2717, _2718, _2719))) + _2731;
                                float _3712 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                                float _2767 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
                                float _2771 = (0.5 / (((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) + 9.9999999392252902907785028219223e-09) + _2767)) * _2767;
                                float _3723 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                                float _2778 = (_2747 * _2724) * (((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 3.1415927410125732421875) / ((_2737 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2748 * _2591.y;
                                frontier_phi_83_pred_1 = _2748 * _2591.x;
                                frontier_phi_83_pred_2 = _2778 * _2603.z;
                                frontier_phi_83_pred_3 = _2778 * _2603.y;
                                frontier_phi_83_pred_4 = _2778 * _2603.x;
                                frontier_phi_83_pred_5 = _2748 * _2591.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2786 = frontier_phi_83_pred;
                            _2785 = frontier_phi_83_pred_1;
                            _2784 = frontier_phi_83_pred_2;
                            _2783 = frontier_phi_83_pred_3;
                            _2782 = frontier_phi_83_pred_4;
                            _2787 = frontier_phi_83_pred_5;
                            _2533 = _2785 + _2546;
                            _2534 = _2786 + _2547;
                            _2535 = _2787 + _2548;
                            _2530 = _2782 + _2543;
                            _2531 = _2783 + _2544;
                            _2532 = _2784 + _2545;
                            if (_2550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2543 = _2530;
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2550;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2535;
                        frontier_phi_77_pred_1 = _2534;
                        frontier_phi_77_pred_2 = _2533;
                        frontier_phi_77_pred_3 = _2532;
                        frontier_phi_77_pred_4 = _2531;
                        frontier_phi_77_pred_5 = _2530;
                    }
                    _2225 = frontier_phi_77_pred;
                    _2223 = frontier_phi_77_pred_1;
                    _2221 = frontier_phi_77_pred_2;
                    _2219 = frontier_phi_77_pred_3;
                    _2217 = frontier_phi_77_pred_4;
                    _2215 = frontier_phi_77_pred_5;
                    uint _2378 = _2377 + 1u;
                    if (_2378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2371 = _2215;
                        _2372 = _2217;
                        _2373 = _2219;
                        _2374 = _2221;
                        _2375 = _2223;
                        _2376 = _2225;
                        _2377 = _2378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2219;
                frontier_phi_58_59_ladder_1 = _2225;
                frontier_phi_58_59_ladder_2 = _2223;
                frontier_phi_58_59_ladder_3 = _2221;
                frontier_phi_58_59_ladder_4 = _2217;
                frontier_phi_58_59_ladder_5 = _2215;
            }
            else
            {
                frontier_phi_58_59_ladder = _2095;
                frontier_phi_58_59_ladder_1 = _2101;
                frontier_phi_58_59_ladder_2 = _2099;
                frontier_phi_58_59_ladder_3 = _2097;
                frontier_phi_58_59_ladder_4 = _2093;
                frontier_phi_58_59_ladder_5 = _2091;
            }
            _2214 = frontier_phi_58_59_ladder_5;
            _2216 = frontier_phi_58_59_ladder_4;
            _2218 = frontier_phi_58_59_ladder;
            _2220 = frontier_phi_58_59_ladder_3;
            _2222 = frontier_phi_58_59_ladder_2;
            _2224 = frontier_phi_58_59_ladder_1;
        }
        float _2229 = isnan(1.0) ? _365 : (isnan(_365) ? 1.0 : min(_365, 1.0));
        _2001 = (_2229 * _2220) + _1561;
        _2003 = (_2229 * _2222) + _1563;
        _2005 = (_2229 * _2224) + _1565;
        _2007 = ((_2214 * 0.039999999105930328369140625) * _2229) + _1813;
        _2009 = ((_2216 * 0.039999999105930328369140625) * _2229) + _1815;
        _2011 = ((_2218 * 0.039999999105930328369140625) * _2229) + _1817;
    }
    else
    {
        _2001 = _1561;
        _2003 = _1563;
        _2005 = _1565;
        _2007 = _1813;
        _2009 = _1815;
        _2011 = _1817;
    }
    float _3739 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3750 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3761 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3772 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _2029 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_2001 + ((isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))) * _365))) + ((_2007 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _1176)) * cbPerFrame._m0[3u].x);
    float _2030 = ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_2003 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _365))) + ((_2009 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1176)) * cbPerFrame._m0[3u].x);
    float _2031 = ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_2005 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _365))) + ((_2011 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1176)) * cbPerFrame._m0[3u].x);
    float _2036 = cbInstanceData._m0[_339 + 6u].w * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)));
    float _2041 = _299 / cbSceneParam._m0[86u].x;
    float _2042 = _300 / cbSceneParam._m0[86u].y;
    vec4 _2056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2041, _2042, (log2((isnan(cbSceneParam._m0[77u].w) ? _219 : (isnan(_219) ? cbSceneParam._m0[77u].w : min(_219, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2058 = _2056.x;
    float _2059 = _2056.y;
    float _2060 = _2056.z;
    float _2061 = _2056.w;
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    if (_219 > cbSceneParam._m0[78u].w)
    {
        float _2116 = isnan(_219) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _219 : min(cbSceneParam._m0[80u].w, _219));
        float _2117 = _2116 / _219;
        float _2128 = _2117 * _271;
        float _2129 = _272 * _2117;
        float _2130 = (-0.0) - _2129;
        float _2132 = _2117 * _273;
        float _2134 = (cbSceneParam._m0[77u].w * _2130) / _2116;
        float _2135 = _2134 + cbSceneParam._m0[79u].w;
        float _2136 = cbSceneParam._m0[79u].w - _2129;
        float _2142 = sqrt(((_2128 * _2128) + (_2129 * _2129)) + (_2132 * _2132));
        float _2145 = (1.0 - (cbSceneParam._m0[77u].w / _2116)) * _2142;
        float _2150 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2152 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2328;
        if (abs((_2130 - _2134) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2328 = ((((_2135 > 0.0) ? exp2(_2150 * _2135) : (2.0 - exp2(_2152 * _2135))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2145;
        }
        else
        {
            float _2272 = 1.0 / cbSceneParam._m0[80u].x;
            float _2273 = isnan(_2136) ? _2135 : (isnan(_2135) ? _2136 : max(_2135, _2136));
            float _2274 = isnan(_2136) ? _2135 : (isnan(_2135) ? _2136 : min(_2135, _2136));
            float _2283 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : min(_2273, 0.0));
            float _2284 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : min(_2274, 0.0));
            _2328 = ((abs(_2142 / _2130) * cbSceneParam._m0[80u].y) * ((((_2283 - _2284) * 2.0) - ((exp2(_2150 * (isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0)))) - exp2(_2150 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))))) * _2272)) - ((exp2(_2152 * _2283) - exp2(_2152 * _2284)) * _2272))) + (_2145 * cbSceneParam._m0[80u].z);
        }
        vec4 _2330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2041, _2042, 1.0), 0.0);
        float _2339 = exp2((_2328 * (-1.44269502162933349609375)) * (1.0 - _2330.w));
        float _2340 = log2(_2339);
        float _2356 = log2(_2061);
        _2154 = (exp2(_2356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].x)) * _2330.x) / cbSceneParam._m0[78u].x)) + _2058;
        _2156 = (exp2(_2356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].y)) * _2330.y) / cbSceneParam._m0[78u].y)) + _2059;
        _2158 = (exp2(_2356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].z)) * _2330.z) / cbSceneParam._m0[78u].z)) + _2060;
        _2160 = _2339 * _2061;
    }
    else
    {
        _2154 = _2058;
        _2156 = _2059;
        _2158 = _2060;
        _2160 = _2061;
    }
    bool _2366;
    vec4 _2170;
    vec4 _2193;
    float _2195;
    float _2199;
    float _2200;
    float _2201;
    float _2202;
    bool _2213;
    for (;;)
    {
        _2170 = cbMatDynParam._m0[0u];
        float _2172 = roundEven(_2170.y);
        bool _2173 = _2172 == 3.0;
        float _2175 = log2(_2160);
        float _2182 = exp2(_2175 * cbSceneParam._m0[78u].x) * _2029;
        float _2183 = exp2(_2175 * cbSceneParam._m0[78u].y) * _2030;
        float _2184 = exp2(_2175 * cbSceneParam._m0[78u].z) * _2031;
        float _2191 = _287 + (-0.5);
        _2193 = cbMtdParam._m0[1u];
        _2195 = _2193.y * _2191;
        float _2198 = (_2172 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2199 = _2198 * (_2173 ? _2182 : (_2182 + (cbSceneParam._m0[72u].w * _2154)));
        _2200 = _2198 * (_2173 ? _2183 : (_2183 + (cbSceneParam._m0[72u].w * _2156)));
        _2201 = _2198 * (_2173 ? _2184 : (_2184 + (cbSceneParam._m0[72u].w * _2158)));
        _2202 = _2191 * 0.999000012874603271484375;
        _2213 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2213)
        {
            if ((cbInstanceData._m0[_339 + 7u].x + _2202) < 0.5)
            {
                _2366 = true;
                break;
            }
        }
        uint _2307 = _341 + uint(_2170.w);
        if ((cbInstanceData._m0[_2307].w < 1.0) && ((cbInstanceData._m0[_2307].w + _2202) < 0.5))
        {
            _2366 = true;
            break;
        }
        if ((_2195 + _190) < _2193.x)
        {
            _2366 = true;
            break;
        }
        _2366 = false;
        break;
    }
    float _2521;
    if (_2366)
    {
        discard_state = true;
        _2521 = 0.0;
    }
    else
    {
        _2521 = _2036;
    }
    SV_Target.x = _2199;
    SV_Target.y = _2200;
    SV_Target.z = _2201;
    SV_Target.w = _2521;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2036;
    discard_exit();
}


