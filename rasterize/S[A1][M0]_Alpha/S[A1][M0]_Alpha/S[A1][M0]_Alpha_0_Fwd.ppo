#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _697;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    vec4 _181 = texture(sampler2D(S_A1_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _181.x * cbMtdParam._m0[9u].x;
    float _189 = _181.y * cbMtdParam._m0[9u].y;
    float _190 = _181.z * cbMtdParam._m0[9u].z;
    float _191 = _181.w * TEXCOORD_1.z;
    float _195 = inversesqrt(dot(vec3(_159, _160, _161), vec3(_159, _160, _161)));
    float _196 = _195 * _159;
    float _197 = _195 * _160;
    float _198 = _195 * _161;
    float _2809 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _200 = isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0));
    float _2820 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2831 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2842 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _219 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _277 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _278 = _271 * _277;
    float _279 = _272 * _277;
    float _280 = _273 * _277;
    float _286 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _287 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _308 = fma(_198, cbSceneParam._m0[5u].z, fma(_197, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _196));
    float _311 = fma(_198, cbSceneParam._m0[6u].z, fma(_197, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _196));
    float _314 = fma(_198, cbSceneParam._m0[7u].z, fma(_197, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _196));
    uint _327 = uint(roundEven(NORMAL.w)) * 13u;
    uint _330 = (_327 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _336 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0)))) * cbInstanceData._m0[_330].x;
    float _337 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0)))) * cbInstanceData._m0[_330].y;
    float _338 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0)))) * cbInstanceData._m0[_330].z;
    float _2853 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _339 = isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0));
    float _2864 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _340 = isnan(1.0) ? _2864 : (isnan(_2864) ? 1.0 : min(_2864, 1.0));
    float _2875 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _341 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
    vec4 _350 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _286, cbSceneParam._m0[86u].y * _287));
    float _353 = _350.x * TEXCOORD_1.w;
    float _354 = dot(vec3(_196, _197, _198), vec3(_278, _279, _280));
    float _357 = _354 * 2.0;
    float _362 = (_357 * _196) - _278;
    float _363 = (_357 * _197) - _279;
    float _364 = (_357 * _198) - _280;
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _696;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _421 = fma(_394, cbModelParam._m0[26u].z, fma(_390, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _386));
        float _425 = fma(_394, cbModelParam._m0[27u].z, fma(_390, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _386));
        float _429 = fma(_394, cbModelParam._m0[28u].z, fma(_390, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _386));
        float _454 = _386 + _196;
        float _455 = _390 + _197;
        float _456 = _394 + _198;
        float _466 = fma(_456, cbModelParam._m0[26u].z, fma(_455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _454)) - _421;
        float _467 = fma(_456, cbModelParam._m0[27u].z, fma(_455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _454)) - _425;
        float _468 = fma(_456, cbModelParam._m0[28u].z, fma(_455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _454)) - _429;
        float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
        float _485 = ((_472 * _466) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_421 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _486 = ((_472 * _467) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_425 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _487 = ((_472 * _468) / cbModelParam._m0[34u].z) + ((((((_429 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _490 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _497 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _504 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        float _524 = exp2((_490.w + (-0.5)) * 20.0) * 2.0;
        float _525 = _524 * (_490.x + (-0.5));
        float _526 = _524 * (_490.y + (-0.5));
        float _527 = _524 * (_490.z + (-0.5));
        float _534 = exp2((_497.w + (-0.5)) * 20.0) * 2.0;
        float _535 = _534 * (_497.x + (-0.5));
        float _536 = _534 * (_497.y + (-0.5));
        float _537 = _534 * (_497.z + (-0.5));
        float _544 = exp2((_504.w + (-0.5)) * 20.0) * 2.0;
        float _545 = _544 * (_504.x + (-0.5));
        float _546 = _544 * (_504.y + (-0.5));
        float _547 = _544 * (_504.z + (-0.5));
        float _554 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _555 = _554 * (_511.x + (-0.5));
        float _556 = _554 * (_511.y + (-0.5));
        float _557 = _554 * (_511.z + (-0.5));
        float _558 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _559 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _560 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _561 = _525 * 0.5;
        float _562 = _535 * 0.5;
        float _563 = _545 * 0.5;
        float _564 = dot(vec3(_561, _562, _563), vec3(_561, _562, _563));
        float _569 = (_564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_564);
        float _578 = (dot(vec3(_196, _197, _198), vec3(_569 * _561, _569 * _562, _569 * _563)) + 1.0) * 0.5;
        float _2901 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _588 = sqrt(((_562 * _562) + (_561 * _561)) + (_563 * _563)) / (_558 + 9.9999997473787516355514526367188e-06);
        float _2912 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
        float _590 = _589 * 2.0;
        float _594 = (1.0 - _589) / (_589 + 1.0);
        float _2923 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _595 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
        float _604 = ((((1.0 - _595) * (_590 + 2.0)) * exp2(log2(isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0))) * (_590 + 1.0))) + _595) * _558;
        float _605 = _526 * 0.5;
        float _606 = _536 * 0.5;
        float _607 = _546 * 0.5;
        float _608 = dot(vec3(_605, _606, _607), vec3(_605, _606, _607));
        float _613 = (_608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_608);
        float _621 = (dot(vec3(_196, _197, _198), vec3(_613 * _605, _613 * _606, _613 * _607)) + 1.0) * 0.5;
        float _2934 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _630 = sqrt(((_606 * _606) + (_605 * _605)) + (_607 * _607)) / (_559 + 9.9999997473787516355514526367188e-06);
        float _2945 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0));
        float _632 = _631 * 2.0;
        float _636 = (1.0 - _631) / (_631 + 1.0);
        float _2956 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
        float _646 = ((((1.0 - _637) * (_632 + 2.0)) * exp2(log2(isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0))) * (_632 + 1.0))) + _637) * _559;
        float _647 = _527 * 0.5;
        float _648 = _537 * 0.5;
        float _649 = _547 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _663 = (dot(vec3(_196, _197, _198), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _2967 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _672 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_560 + 9.9999997473787516355514526367188e-06);
        float _2978 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _2989 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0))) * (_674 + 1.0))) + _679) * _560;
        _696 = _527;
        _698 = _526;
        _699 = _525;
        _700 = _537;
        _701 = _536;
        _702 = _535;
        _703 = _547;
        _704 = _546;
        _705 = _545;
        _706 = _560;
        _707 = _559;
        _708 = _558;
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0)));
        _710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0)));
        _711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
    }
    else
    {
        _696 = _697;
        _698 = _697;
        _699 = _697;
        _700 = _697;
        _701 = _697;
        _702 = _697;
        _703 = _697;
        _704 = _697;
        _705 = _697;
        _706 = _697;
        _707 = _697;
        _708 = _697;
        _709 = 0.0;
        _710 = 0.0;
        _711 = 0.0;
    }
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _737 = fma(_394, cbModelParam._m0[30u].z, fma(_390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _386));
        float _741 = fma(_394, cbModelParam._m0[31u].z, fma(_390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _386));
        float _745 = fma(_394, cbModelParam._m0[32u].z, fma(_390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _386));
        float _768 = _386 + _196;
        float _769 = _390 + _197;
        float _770 = _394 + _198;
        float _780 = fma(_770, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768)) - _737;
        float _781 = fma(_770, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768)) - _741;
        float _782 = fma(_770, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768)) - _745;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_737 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_741 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[35u].z) + ((((((_745 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _836 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_803.x + (-0.5));
        float _838 = _836 * (_803.y + (-0.5));
        float _839 = _836 * (_803.z + (-0.5));
        float _846 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_810.x + (-0.5));
        float _848 = _846 * (_810.y + (-0.5));
        float _849 = _846 * (_810.z + (-0.5));
        float _856 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_817.x + (-0.5));
        float _858 = _856 * (_817.y + (-0.5));
        float _859 = _856 * (_817.z + (-0.5));
        float _866 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_824.x + (-0.5));
        float _868 = _866 * (_824.y + (-0.5));
        float _869 = _866 * (_824.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_196, _197, _198), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3030 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3041 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3052 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * (_900 + 1.0))) + _905) * _870;
        float _915 = _838 * 0.5;
        float _916 = _848 * 0.5;
        float _917 = _858 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_196, _197, _198), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3063 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3074 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3085 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) * (_942 + 1.0))) + _947) * _871;
        float _957 = _839 * 0.5;
        float _958 = _849 * 0.5;
        float _959 = _859 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_196, _197, _198), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3096 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3107 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3118 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))) * (_984 + 1.0))) + _989) * _872;
        _1006 = _839;
        _1007 = _838;
        _1008 = _837;
        _1009 = _849;
        _1010 = _848;
        _1011 = _847;
        _1012 = _859;
        _1013 = _858;
        _1014 = _857;
        _1015 = _872;
        _1016 = _871;
        _1017 = _870;
        _1018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _697;
        _1007 = _697;
        _1008 = _697;
        _1009 = _697;
        _1010 = _697;
        _1011 = _697;
        _1012 = _697;
        _1013 = _697;
        _1014 = _697;
        _1015 = _697;
        _1016 = _697;
        _1017 = _697;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1030 = (cbModelParam._m0[1u].x * (_1018 - _709)) + _709;
    float _1031 = (cbModelParam._m0[1u].x * (_1019 - _710)) + _710;
    float _1032 = (cbModelParam._m0[1u].x * (_1020 - _711)) + _711;
    float _1053 = fma(_1032, cbSceneParam._m0[89u].z, fma(_1031, cbSceneParam._m0[89u].y, _1030 * cbSceneParam._m0[89u].x));
    float _1056 = fma(_1032, cbSceneParam._m0[90u].z, fma(_1031, cbSceneParam._m0[90u].y, _1030 * cbSceneParam._m0[90u].x));
    float _1059 = fma(_1032, cbSceneParam._m0[91u].z, fma(_1031, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1030));
    float _1074 = _362 * 0.5;
    float _1075 = _363 * 0.5;
    float _1076 = _364 * 0.5;
    float _1077 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1008, _1011, _1014, _1017));
    float _1080 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1007, _1010, _1013, _1016));
    float _1083 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1006, _1009, _1012, _1015));
    float _1117;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1090 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_696, _700, _703, _706));
        float _1094 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_698, _701, _704, _707));
        float _1098 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_699, _702, _705, _708));
        float _1105 = dot(vec4(cbModelParam._m0[39u]), vec4(_1074, _1075, _1076, 1.0));
        _1117 = dot(vec3(isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)), isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1105) ? 0.0 : (isnan(0.0) ? _1105 : max(0.0, _1105))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1117 = 1.0;
    }
    float _1128;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1119 = dot(vec4(cbModelParam._m0[40u]), vec4(_1074, _1075, _1076, 1.0));
        _1128 = dot(vec3(isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)), isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)), isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1119) ? 0.0 : (isnan(0.0) ? _1119 : max(0.0, _1119))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1128 = 1.0;
    }
    float _1132 = (_1128 * cbModelParam._m0[1u].x) + (_1117 * (1.0 - cbModelParam._m0[1u].x));
    float _1141 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1223;
    float _1225;
    float _1227;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1190 = fma(_394, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _386)) + cbModelParam._m0[13u].w;
        float _1194 = fma(_394, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _386)) + cbModelParam._m0[14u].w;
        float _1198 = fma(_394, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _386)) + cbModelParam._m0[15u].w;
        float _1201 = fma(_364, cbModelParam._m0[13u].z, fma(_363, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _362));
        float _1204 = fma(_364, cbModelParam._m0[14u].z, fma(_363, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _362));
        float _1207 = fma(_364, cbModelParam._m0[15u].z, fma(_363, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _362));
        float _1233;
        if (_1201 > 0.0)
        {
            _1233 = abs((1.0 - _1190) / _1201);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1201 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1190 + 1.0) / _1201);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1233 = frontier_phi_14_12_ladder;
        }
        float _1441;
        if (_1204 > 0.0)
        {
            _1441 = abs((1.0 - _1194) / _1204);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1204 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1194 + 1.0) / _1204);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1441 = frontier_phi_23_19_ladder;
        }
        float _1630;
        if (_1207 > 0.0)
        {
            _1630 = abs((1.0 - _1198) / _1207);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1207 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1198 + 1.0) / _1207);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1630 = frontier_phi_35_30_ladder;
        }
        float _1632 = isnan(_1441) ? _1233 : (isnan(_1233) ? _1441 : min(_1233, _1441));
        float _1633 = isnan(_1630) ? _1632 : (isnan(_1632) ? _1630 : min(_1632, _1630));
        float _1637 = (_1633 * _1201) + _1190;
        float _1638 = (_1633 * _1204) + _1194;
        float _1639 = (_1633 * _1207) + _1198;
        float _1640 = _1633 * 9.9999997473787516355514526367188e-05;
        float _1642 = (-1.0) - _1640;
        float _1644 = _1640 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1639 > _1644) || ((_1639 < _1642) || ((_1638 > _1644) || ((_1638 < _1642) || ((_1637 < _1642) || (_1637 > _1644))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1639, cbModelParam._m0[9u].z, fma(_1638, cbModelParam._m0[9u].y, _1637 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1639, cbModelParam._m0[10u].z, fma(_1638, cbModelParam._m0[10u].y, _1637 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1639, cbModelParam._m0[11u].z, fma(_1638, cbModelParam._m0[11u].y, _1637 * cbModelParam._m0[11u].x))), _1141);
            frontier_phi_13_35_ladder = _1736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1736.x * cbModelParam._m0[1u].y;
        }
        _1223 = frontier_phi_13_35_ladder_2;
        _1225 = frontier_phi_13_35_ladder_1;
        _1227 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_362, _363, _364), _1141);
        _1223 = _1211.x * cbModelParam._m0[1u].y;
        _1225 = _1211.y * cbModelParam._m0[1u].y;
        _1227 = _1211.z * cbModelParam._m0[1u].y;
    }
    float _1230 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1323;
    float _1325;
    float _1327;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1287 = fma(_394, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _386)) + cbModelParam._m0[21u].w;
        float _1291 = fma(_394, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _386)) + cbModelParam._m0[22u].w;
        float _1295 = fma(_394, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _386)) + cbModelParam._m0[23u].w;
        float _1298 = fma(_364, cbModelParam._m0[21u].z, fma(_363, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _362));
        float _1301 = fma(_364, cbModelParam._m0[22u].z, fma(_363, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _362));
        float _1304 = fma(_364, cbModelParam._m0[23u].z, fma(_363, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _362));
        float _1446;
        if (_1298 > 0.0)
        {
            _1446 = abs((1.0 - _1287) / _1298);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1287 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1446 = frontier_phi_25_21_ladder;
        }
        float _1657;
        if (_1301 > 0.0)
        {
            _1657 = abs((1.0 - _1291) / _1301);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1291 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1657 = frontier_phi_37_32_ladder;
        }
        float _1808;
        if (_1304 > 0.0)
        {
            _1808 = abs((1.0 - _1295) / _1304);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1295 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1808 = frontier_phi_46_43_ladder;
        }
        float _1810 = isnan(_1657) ? _1446 : (isnan(_1446) ? _1657 : min(_1446, _1657));
        float _1811 = isnan(_1808) ? _1810 : (isnan(_1810) ? _1808 : min(_1810, _1808));
        float _1815 = (_1811 * _1298) + _1287;
        float _1816 = (_1811 * _1301) + _1291;
        float _1817 = (_1811 * _1304) + _1295;
        float _1818 = _1811 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1818;
        float _1821 = _1818 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1817 > _1821) || ((_1817 < _1819) || ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 < _1819) || (_1815 > _1821))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1817, cbModelParam._m0[17u].z, fma(_1816, cbModelParam._m0[17u].y, _1815 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1817, cbModelParam._m0[18u].z, fma(_1816, cbModelParam._m0[18u].y, _1815 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1817, cbModelParam._m0[19u].z, fma(_1816, cbModelParam._m0[19u].y, _1815 * cbModelParam._m0[19u].x))), _1230);
            frontier_phi_22_46_ladder = _2018.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2018.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2018.x * cbModelParam._m0[1u].z;
        }
        _1323 = frontier_phi_22_46_ladder_2;
        _1325 = frontier_phi_22_46_ladder_1;
        _1327 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_362, _363, _364), _1230);
        _1323 = _1307.x * cbModelParam._m0[1u].z;
        _1325 = _1307.y * cbModelParam._m0[1u].z;
        _1327 = _1307.z * cbModelParam._m0[1u].z;
    }
    float _1339 = _353 * 0.01200000010430812835693359375;
    float _1341 = _1339 * ((cbModelParam._m0[1u].w * (_1323 - _1223)) + _1223);
    float _1342 = _1339 * ((cbModelParam._m0[1u].w * (_1325 - _1225)) + _1225);
    float _1343 = _1339 * ((cbModelParam._m0[1u].w * (_1327 - _1227)) + _1227);
    float _1346 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, _1341 * cbSceneParam._m0[91u].x));
    uvec4 _1362 = floatBitsToUint(cbInstanceData._m0[_327 + 5u]);
    uint _1364 = _1362.x * 14u;
    uint _1365 = _1364 + 13u;
    float _1372 = _353 + (-1.0);
    float _1378 = (cbLight._m0[_1365].x * _1372) + 1.0;
    float _1379 = (cbLight._m0[_1365].y * _1372) + 1.0;
    float _1380 = (cbLight._m0[_1365].z * _1372) + 1.0;
    float _1381 = (cbLight._m0[_1365].w * _1372) + 1.0;
    uint _1382 = _1364 + 5u;
    float _1388 = isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0));
    uint _1392 = _1364 + 4u;
    float _1399 = isnan(1.0) ? _1378 : (isnan(_1378) ? 1.0 : min(_1378, 1.0));
    uint _1403 = _1364 | 1u;
    float _1414 = dot(vec3(cbLight._m0[_1364].xyz), vec3(_196, _197, _198));
    float _1417 = dot(vec3(cbLight._m0[_1403].xyz), vec3(_196, _197, _198));
    float _3254 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _3265 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _1422 = (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * 0.3183098733425140380859375;
    float _1424 = (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * 0.3183098733425140380859375;
    float _1431 = ((cbLight._m0[_1382].x * _1388) * _1424) + ((cbLight._m0[_1392].x * _1399) * _1422);
    float _1432 = ((_1388 * cbLight._m0[_1382].y) * _1424) + ((_1399 * cbLight._m0[_1392].y) * _1422);
    float _1433 = ((_1388 * cbLight._m0[_1382].z) * _1424) + ((_1399 * cbLight._m0[_1392].z) * _1422);
    uvec4 _1438 = floatBitsToUint(cbLight._m0[_1364 + 12u]);
    bool _1440 = _1438.x == 0u;
    float _1451;
    float _1453;
    float _1455;
    if (_1440)
    {
        _1451 = _1431;
        _1453 = _1432;
        _1455 = _1433;
    }
    else
    {
        uint _1459 = _1364 + 6u;
        float _1475 = (dot(vec3(cbLight._m0[_1364 + 2u].xyz), vec3(_196, _197, _198)) * 0.5) + 0.5;
        float _1476 = _1475 * _1475;
        float _3276 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _1478 = isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0));
        _1451 = (((cbLight._m0[_1459].x * 0.3183098733425140380859375) * _1477) * _1478) + _1431;
        _1453 = (((cbLight._m0[_1459].y * 0.3183098733425140380859375) * _1477) * _1478) + _1432;
        _1455 = (((cbLight._m0[_1459].z * 0.3183098733425140380859375) * _1477) * _1478) + _1433;
    }
    bool _1458 = _1438.y == 0u;
    float _1496;
    float _1498;
    float _1500;
    if (_1458)
    {
        _1496 = _1451;
        _1498 = _1453;
        _1500 = _1455;
    }
    else
    {
        uint _1601 = _1364 + 7u;
        float _1617 = (dot(vec3(cbLight._m0[_1364 + 3u].xyz), vec3(_196, _197, _198)) * 0.5) + 0.5;
        float _1618 = _1617 * _1617;
        float _3292 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _1620 = isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0));
        _1496 = (((cbLight._m0[_1601].x * 0.3183098733425140380859375) * _1619) * _1620) + _1451;
        _1498 = (((cbLight._m0[_1601].y * 0.3183098733425140380859375) * _1619) * _1620) + _1453;
        _1500 = (((cbLight._m0[_1601].z * 0.3183098733425140380859375) * _1619) * _1620) + _1455;
    }
    uint _1502 = _1364 + 8u;
    float _1508 = cbLight._m0[_1364].x + _278;
    float _1509 = cbLight._m0[_1364].y + _279;
    float _1510 = cbLight._m0[_1364].z + _280;
    float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
    float _1518 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1364].xyz));
    float _3308 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1521 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _1522 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _1523 = dot(vec3(cbLight._m0[_1364].xyz), vec3(_1508 * _1514, _1509 * _1514, _1510 * _1514));
    float _3330 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1534 = (exp2(log2(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1540 = (0.5 / ((_1521 + 9.9999999392252902907785028219223e-09) + _1522)) * _1521;
    float _3341 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1542 = (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.31831014156341552734375;
    uint _1553 = _1364 + 9u;
    float _1559 = cbLight._m0[_1403].x + _278;
    float _1560 = cbLight._m0[_1403].y + _279;
    float _1561 = cbLight._m0[_1403].z + _280;
    float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
    float _1569 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1403].xyz));
    float _3352 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1572 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _1573 = dot(vec3(cbLight._m0[_1403].xyz), vec3(_1559 * _1565, _1560 * _1565, _1561 * _1565));
    float _3363 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1582 = (exp2(log2(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1586 = (0.5 / ((_1572 + 9.9999999392252902907785028219223e-09) + _1522)) * _1572;
    float _3374 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1588 = (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * 0.31831014156341552734375;
    float _1598 = (((_1582 * cbLight._m0[_1553].x) * _1588) * _1388) + (((_1534 * cbLight._m0[_1502].x) * _1542) * _1399);
    float _1599 = (((_1582 * cbLight._m0[_1553].y) * _1588) * _1388) + (((_1534 * cbLight._m0[_1502].y) * _1542) * _1399);
    float _1600 = (((_1582 * cbLight._m0[_1553].z) * _1588) * _1388) + (((_1534 * cbLight._m0[_1502].z) * _1542) * _1399);
    float _1662;
    float _1664;
    float _1666;
    if (_1440)
    {
        _1662 = _1598;
        _1664 = _1599;
        _1666 = _1600;
    }
    else
    {
        uint _1668 = _1364 + 10u;
        uint _1674 = _1364 + 2u;
        float _1680 = cbLight._m0[_1674].x + _278;
        float _1681 = cbLight._m0[_1674].y + _279;
        float _1682 = cbLight._m0[_1674].z + _280;
        float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
        float _1690 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1674].xyz));
        float _3385 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1693 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1694 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1680 * _1686, _1681 * _1686, _1682 * _1686));
        float _3396 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = (exp2(log2(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1707 = (0.5 / ((_1693 + 9.9999999392252902907785028219223e-09) + _1522)) * _1693;
        float _3407 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1709 = (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * 0.31831014156341552734375;
        float _1710 = isnan(1.0) ? _1380 : (isnan(_1380) ? 1.0 : min(_1380, 1.0));
        _1662 = (((_1703 * cbLight._m0[_1668].x) * _1709) * _1710) + _1598;
        _1664 = (((_1703 * cbLight._m0[_1668].y) * _1709) * _1710) + _1599;
        _1666 = (((_1703 * cbLight._m0[_1668].z) * _1709) * _1710) + _1600;
    }
    float _1745;
    float _1747;
    float _1749;
    if (_1458)
    {
        _1745 = _1662;
        _1747 = _1664;
        _1749 = _1666;
    }
    else
    {
        uint _1756 = _1364 + 11u;
        uint _1762 = _1364 + 3u;
        float _1768 = cbLight._m0[_1762].x + _278;
        float _1769 = cbLight._m0[_1762].y + _279;
        float _1770 = cbLight._m0[_1762].z + _280;
        float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
        float _1778 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1762].xyz));
        float _3423 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1781 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1782 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1768 * _1774, _1769 * _1774, _1770 * _1774));
        float _3434 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = (exp2(log2(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1795 = (0.5 / ((_1781 + 9.9999999392252902907785028219223e-09) + _1522)) * _1781;
        float _3445 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1797 = (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.31831014156341552734375;
        float _1798 = isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0));
        _1745 = (((_1791 * cbLight._m0[_1756].x) * _1797) * _1798) + _1662;
        _1747 = (((_1791 * cbLight._m0[_1756].y) * _1797) * _1798) + _1664;
        _1749 = (((_1791 * cbLight._m0[_1756].z) * _1797) * _1798) + _1666;
    }
    float _1933;
    float _1935;
    float _1937;
    float _1939;
    float _1941;
    float _1943;
    if (_1362.y == 0u)
    {
        float _1873 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1874 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1873;
        float _1875 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1873;
        float _1876 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1873;
        uvec4 _1888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1889 = _1888.x;
        uint _1900 = uint((float(_1888.y) * floor(float(uint(cbSceneParam._m0[85u].y * _287) / _1889))) + floor(float(uint(cbSceneParam._m0[85u].x * _286) / _1889)));
        float _1910 = (log2(_1876 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1911 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        uint _1914 = uint(isnan(14.0) ? _1911 : (isnan(_1911) ? 14.0 : min(_1911, 14.0)));
        uvec4 _1919 = texelFetch(g_lightClusterGridBuffer, int(((_1914 << 2u) + (_1900 << 6u)) >> 2u));
        uint _1920 = _1919.x;
        uint _1921 = _1888.z;
        float _2023;
        float _2025;
        float _2027;
        float _2029;
        float _2031;
        float _2033;
        if (((((1u << ((_1921 >> 4u) & 15u)) + 4294967295u) & _1920) == 0u) || ((_1921 & 240u) == 0u))
        {
            _2023 = 0.0;
            _2025 = 0.0;
            _2027 = 0.0;
            _2029 = 0.0;
            _2031 = 0.0;
            _2033 = 0.0;
        }
        else
        {
            float _2024;
            float _2026;
            float _2028;
            float _2030;
            float _2032;
            float _2034;
            float _2166 = 0.0;
            float _2167 = 0.0;
            float _2168 = 0.0;
            float _2169 = 0.0;
            float _2170 = 0.0;
            float _2171 = 0.0;
            uint _2172 = 0u;
            uint _2181;
            bool _2182;
            for (;;)
            {
                _2181 = texelFetch(g_lightClassification, int((((_1914 << 5u) + (_1900 << 9u)) + (_2172 << 2u)) >> 2u)).x;
                _2182 = _2181 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2182)
                {
                    frontier_phi_61_pred = _2166;
                    frontier_phi_61_pred_1 = _2171;
                    frontier_phi_61_pred_2 = _2170;
                    frontier_phi_61_pred_3 = _2169;
                    frontier_phi_61_pred_4 = _2168;
                    frontier_phi_61_pred_5 = _2167;
                }
                else
                {
                    float _2290;
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    float _2295;
                    uint _2296;
                    _2290 = _2166;
                    _2291 = _2167;
                    _2292 = _2168;
                    _2293 = _2169;
                    _2294 = _2170;
                    _2295 = _2171;
                    _2296 = _2181;
                    float _2222;
                    float _2223;
                    float _2224;
                    float _2225;
                    float _2226;
                    float _2227;
                    for (;;)
                    {
                        uint _2300 = uint(findLSB(_2296)) + (_2172 << 5u);
                        uint _2297 = (_2296 + 4294967295u) & _2296;
                        uint _2302 = _2300 * 48u;
                        vec4 _2316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2302)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 3u)).x));
                        uint _2322 = (_2300 * 48u) + 4u;
                        vec4 _2335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2322)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 3u)).x));
                        uint _2341 = (_2300 * 48u) + 8u;
                        vec3 _2352 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2341)).x, texelFetch(g_PointLightRenderingBuffer, int(_2341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2341 + 2u)).x));
                        float _2356 = _2316.x - _1874;
                        float _2357 = _2316.y - _1875;
                        float _2358 = _2316.z - _1876;
                        float _2359 = dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358));
                        float _2362 = inversesqrt(_2359);
                        float _2371 = 1.0 - (_2359 * _2316.w);
                        float _3471 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
                        float _2372 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
                        float _2373 = sqrt(_2359) * _2335.w;
                        float _2376 = 1.39999997615814208984375 / (_2373 + 1.39999997615814208984375);
                        float _2377 = _2376 * _2376;
                        float _2380 = ((1.0 - _2377) * dot(vec3(_308, _311, _314), vec3(_2362 * _2356, _2362 * _2357, _2362 * _2358))) + _2377;
                        float _2383 = _2373 * _2373;
                        float _2387 = ((isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))) * _2372) / ((_2383 * 0.699999988079071044921875) + 1.0);
                        float _2391 = (-0.0) - _1874;
                        float _2392 = (-0.0) - _1875;
                        float _2393 = (-0.0) - _1876;
                        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
                        float _2401 = dot(vec3(_308, _311, _314), vec3(_2397 * _2391, _2397 * _2392, _2397 * _2393));
                        float _3487 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
                        float _3498 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
                        float _2405 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
                        float _2409 = (0.5 / (((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) + 9.9999999392252902907785028219223e-09) + _2405)) * _2405;
                        float _3509 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
                        float _2418 = (((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 3.1415927410125732421875) / ((_2383 * 2.1991131305694580078125) + 3.141590118408203125)) * _2372;
                        _2225 = (_2387 * _2335.x) + _2293;
                        _2226 = (_2387 * _2335.y) + _2294;
                        _2227 = (_2387 * _2335.z) + _2295;
                        _2222 = (_2418 * _2352.x) + _2290;
                        _2223 = (_2418 * _2352.y) + _2291;
                        _2224 = (_2418 * _2352.z) + _2292;
                        if (_2297 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2290 = _2222;
                            _2291 = _2223;
                            _2292 = _2224;
                            _2293 = _2225;
                            _2294 = _2226;
                            _2295 = _2227;
                            _2296 = _2297;
                        }
                    }
                    frontier_phi_61_pred = _2222;
                    frontier_phi_61_pred_1 = _2227;
                    frontier_phi_61_pred_2 = _2226;
                    frontier_phi_61_pred_3 = _2225;
                    frontier_phi_61_pred_4 = _2224;
                    frontier_phi_61_pred_5 = _2223;
                }
                _2024 = frontier_phi_61_pred;
                _2034 = frontier_phi_61_pred_1;
                _2032 = frontier_phi_61_pred_2;
                _2030 = frontier_phi_61_pred_3;
                _2028 = frontier_phi_61_pred_4;
                _2026 = frontier_phi_61_pred_5;
                uint _2173 = _2172 + 1u;
                if (_2173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2166 = _2024;
                    _2167 = _2026;
                    _2168 = _2028;
                    _2169 = _2030;
                    _2170 = _2032;
                    _2171 = _2034;
                    _2172 = _2173;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2023 = _2024;
            _2025 = _2026;
            _2027 = _2028;
            _2029 = _2030;
            _2031 = _2032;
            _2033 = _2034;
        }
        uvec4 _2037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2038 = _2037.z;
        uint _2040 = (_2038 >> 8u) & 15u;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        if (((4294967295u << _2040) & _1920) == 0u)
        {
            _2137 = _2023;
            _2139 = _2025;
            _2141 = _2027;
            _2143 = _2029;
            _2145 = _2031;
            _2147 = _2033;
        }
        else
        {
            float _2162 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2040 < ((_2038 >> 12u) & 15u))
            {
                float _2138;
                float _2140;
                float _2142;
                float _2144;
                float _2146;
                float _2148;
                float _2273 = _2023;
                float _2274 = _2025;
                float _2275 = _2027;
                float _2276 = _2029;
                float _2277 = _2031;
                float _2278 = _2033;
                uint _2279 = _2040;
                uint _2288;
                bool _2289;
                for (;;)
                {
                    _2288 = texelFetch(g_lightClassification, int((((_1914 << 5u) + (_1900 << 9u)) + (_2279 << 2u)) >> 2u)).x;
                    _2289 = _2288 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2289)
                    {
                        frontier_phi_67_pred = _2276;
                        frontier_phi_67_pred_1 = _2277;
                        frontier_phi_67_pred_2 = _2278;
                        frontier_phi_67_pred_3 = _2275;
                        frontier_phi_67_pred_4 = _2274;
                        frontier_phi_67_pred_5 = _2273;
                    }
                    else
                    {
                        float _2423;
                        float _2424;
                        float _2425;
                        float _2426;
                        float _2427;
                        float _2428;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2680;
                        float _2436 = _2273;
                        float _2437 = _2274;
                        float _2438 = _2275;
                        float _2439 = _2276;
                        float _2440 = _2277;
                        float _2441 = _2278;
                        uint _2442 = _2288;
                        uint _2443;
                        vec4 _2468;
                        float _2469;
                        vec4 _2484;
                        vec3 _2496;
                        vec4 _2512;
                        vec4 _2528;
                        float _2575;
                        bool _2576;
                        for (;;)
                        {
                            uint _2453 = ((_2279 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2442));
                            _2443 = (_2442 + 4294967295u) & _2442;
                            uint _2455 = _2453 * 40u;
                            _2468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 3u)).x));
                            _2469 = _2468.w;
                            uint _2471 = (_2453 * 40u) + 4u;
                            _2484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 3u)).x));
                            uint _2486 = (_2453 * 40u) + 8u;
                            _2496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x));
                            uint _2499 = (_2453 * 40u) + 16u;
                            _2512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 3u)).x));
                            uint _2515 = (_2453 * 40u) + 20u;
                            _2528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 3u)).x));
                            uint _2531 = (_2453 * 40u) + 24u;
                            vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2531 + 3u)).x));
                            uint _2550 = (_2453 * 40u) + 28u;
                            vec4 _2563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 3u)).x));
                            _2575 = fma(_1876, _2563.z, fma(_1875, _2563.y, _2563.x * _1874)) + _2563.w;
                            _2576 = !((fma(_1876, _2544.z, fma(_1875, _2544.y, _2544.x * _1874)) + _2544.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2576)
                            {
                                float _2603 = _2468.x - _1874;
                                float _2604 = _2468.y - _1875;
                                float _2605 = _2468.z - _1876;
                                float _2606 = dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605));
                                float _2609 = inversesqrt(_2606);
                                float _2610 = _2609 * _2603;
                                float _2611 = _2609 * _2604;
                                float _2612 = _2609 * _2605;
                                float _2616 = 1.0 - (_2606 / (_2469 * _2469));
                                float _3520 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                                float _2617 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
                                float _2621 = sqrt(_2606) * _2484.w;
                                float _2623 = 1.39999997615814208984375 / (_2621 + 1.39999997615814208984375);
                                float _2624 = _2623 * _2623;
                                float _2625 = 1.0 - _2624;
                                float _2627 = (_2625 * dot(vec3(_2610, _2611, _2612), vec3(_308, _311, _314))) + _2624;
                                float _2630 = _2621 * _2621;
                                float _2634 = (fma(_1876, _2512.z, fma(_1875, _2512.y, _2512.x * _1874)) + _2512.w) / _2575;
                                float _2635 = (fma(_1876, _2528.z, fma(_1875, _2528.y, _2528.x * _1874)) + _2528.w) / _2575;
                                float _2639 = 1.0 - dot(vec2(_2634, _2635), vec2(_2634, _2635));
                                float _3536 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                                float _2640 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
                                float _2641 = _2640 * (((isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))) * _2617) / ((_2630 * 0.699999988079071044921875) + 1.0));
                                float _2651 = dot(vec3(_308, _311, _314), vec3((-0.0) - (_1874 * _2162), (-0.0) - (_1875 * _2162), (-0.0) - (_1876 * _2162)));
                                float _3547 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                                float _2659 = (_2625 * dot(vec3(_308, _311, _314), vec3(_2610, _2611, _2612))) + _2624;
                                float _3558 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                                float _2660 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
                                float _2664 = (0.5 / (((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) + 9.9999999392252902907785028219223e-09) + _2660)) * _2660;
                                float _3569 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                                float _2671 = (_2640 * _2617) * (((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 3.1415927410125732421875) / ((_2630 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2671 * _2496.x;
                                frontier_phi_73_pred_1 = _2671 * _2496.y;
                                frontier_phi_73_pred_2 = _2641 * _2484.z;
                                frontier_phi_73_pred_3 = _2641 * _2484.y;
                                frontier_phi_73_pred_4 = _2641 * _2484.x;
                                frontier_phi_73_pred_5 = _2671 * _2496.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2675 = frontier_phi_73_pred;
                            _2676 = frontier_phi_73_pred_1;
                            _2680 = frontier_phi_73_pred_2;
                            _2679 = frontier_phi_73_pred_3;
                            _2678 = frontier_phi_73_pred_4;
                            _2677 = frontier_phi_73_pred_5;
                            _2426 = _2678 + _2439;
                            _2427 = _2679 + _2440;
                            _2428 = _2680 + _2441;
                            _2423 = _2675 + _2436;
                            _2424 = _2676 + _2437;
                            _2425 = _2677 + _2438;
                            if (_2443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2436 = _2423;
                                _2437 = _2424;
                                _2438 = _2425;
                                _2439 = _2426;
                                _2440 = _2427;
                                _2441 = _2428;
                                _2442 = _2443;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2426;
                        frontier_phi_67_pred_1 = _2427;
                        frontier_phi_67_pred_2 = _2428;
                        frontier_phi_67_pred_3 = _2425;
                        frontier_phi_67_pred_4 = _2424;
                        frontier_phi_67_pred_5 = _2423;
                    }
                    _2144 = frontier_phi_67_pred;
                    _2146 = frontier_phi_67_pred_1;
                    _2148 = frontier_phi_67_pred_2;
                    _2142 = frontier_phi_67_pred_3;
                    _2140 = frontier_phi_67_pred_4;
                    _2138 = frontier_phi_67_pred_5;
                    uint _2280 = _2279 + 1u;
                    if (_2280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2273 = _2138;
                        _2274 = _2140;
                        _2275 = _2142;
                        _2276 = _2144;
                        _2277 = _2146;
                        _2278 = _2148;
                        _2279 = _2280;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2146;
                frontier_phi_55_56_ladder_1 = _2148;
                frontier_phi_55_56_ladder_2 = _2144;
                frontier_phi_55_56_ladder_3 = _2142;
                frontier_phi_55_56_ladder_4 = _2140;
                frontier_phi_55_56_ladder_5 = _2138;
            }
            else
            {
                frontier_phi_55_56_ladder = _2031;
                frontier_phi_55_56_ladder_1 = _2033;
                frontier_phi_55_56_ladder_2 = _2029;
                frontier_phi_55_56_ladder_3 = _2027;
                frontier_phi_55_56_ladder_4 = _2025;
                frontier_phi_55_56_ladder_5 = _2023;
            }
            _2137 = frontier_phi_55_56_ladder_5;
            _2139 = frontier_phi_55_56_ladder_4;
            _2141 = frontier_phi_55_56_ladder_3;
            _2143 = frontier_phi_55_56_ladder_2;
            _2145 = frontier_phi_55_56_ladder;
            _2147 = frontier_phi_55_56_ladder_1;
        }
        float _2152 = isnan(1.0) ? _353 : (isnan(_353) ? 1.0 : min(_353, 1.0));
        _1933 = (_2152 * _2143) + _1496;
        _1935 = (_2152 * _2145) + _1498;
        _1937 = (_2152 * _2147) + _1500;
        _1939 = ((_2137 * 0.039999999105930328369140625) * _2152) + _1745;
        _1941 = ((_2139 * 0.039999999105930328369140625) * _2152) + _1747;
        _1943 = ((_2141 * 0.039999999105930328369140625) * _2152) + _1749;
    }
    else
    {
        _1933 = _1496;
        _1935 = _1498;
        _1937 = _1500;
        _1939 = _1745;
        _1941 = _1747;
        _1943 = _1749;
    }
    float _3585 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3596 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3607 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3618 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _1968 = cbInstanceData._m0[_327 + 6u].w * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)));
    float _1973 = _286 / cbSceneParam._m0[86u].x;
    float _1974 = _287 / cbSceneParam._m0[86u].y;
    vec4 _1988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1973, _1974, (log2((isnan(cbSceneParam._m0[77u].w) ? _219 : (isnan(_219) ? cbSceneParam._m0[77u].w : min(_219, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1990 = _1988.x;
    float _1991 = _1988.y;
    float _1992 = _1988.z;
    float _1993 = _1988.w;
    float _2086;
    float _2088;
    float _2090;
    float _2092;
    if (_219 > cbSceneParam._m0[78u].w)
    {
        float _2048 = isnan(_219) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _219 : min(cbSceneParam._m0[80u].w, _219));
        float _2049 = _2048 / _219;
        float _2060 = _2049 * _271;
        float _2061 = _272 * _2049;
        float _2062 = (-0.0) - _2061;
        float _2064 = _2049 * _273;
        float _2066 = (cbSceneParam._m0[77u].w * _2062) / _2048;
        float _2067 = _2066 + cbSceneParam._m0[79u].w;
        float _2068 = cbSceneParam._m0[79u].w - _2061;
        float _2074 = sqrt(((_2060 * _2060) + (_2061 * _2061)) + (_2064 * _2064));
        float _2077 = (1.0 - (cbSceneParam._m0[77u].w / _2048)) * _2074;
        float _2082 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2084 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2235;
        if (abs((_2062 - _2066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2235 = ((((_2067 > 0.0) ? exp2(_2082 * _2067) : (2.0 - exp2(_2084 * _2067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2077;
        }
        else
        {
            float _2195 = 1.0 / cbSceneParam._m0[80u].x;
            float _2196 = isnan(_2068) ? _2067 : (isnan(_2067) ? _2068 : max(_2067, _2068));
            float _2197 = isnan(_2068) ? _2067 : (isnan(_2067) ? _2068 : min(_2067, _2068));
            float _2206 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : min(_2196, 0.0));
            float _2207 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : min(_2197, 0.0));
            _2235 = ((abs(_2074 / _2062) * cbSceneParam._m0[80u].y) * ((((_2206 - _2207) * 2.0) - ((exp2(_2082 * (isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0)))) - exp2(_2082 * (isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))))) * _2195)) - ((exp2(_2084 * _2206) - exp2(_2084 * _2207)) * _2195))) + (_2077 * cbSceneParam._m0[80u].z);
        }
        vec4 _2237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1973, _1974, 1.0), 0.0);
        float _2246 = exp2((_2235 * (-1.44269502162933349609375)) * (1.0 - _2237.w));
        float _2247 = log2(_2246);
        float _2263 = log2(_1993);
        _2086 = (exp2(_2263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].x)) * _2237.x) / cbSceneParam._m0[78u].x)) + _1990;
        _2088 = (exp2(_2263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].y)) * _2237.y) / cbSceneParam._m0[78u].y)) + _1991;
        _2090 = (exp2(_2263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].z)) * _2237.z) / cbSceneParam._m0[78u].z)) + _1992;
        _2092 = _2246 * _1993;
    }
    else
    {
        _2086 = _1990;
        _2088 = _1991;
        _2090 = _1992;
        _2092 = _1993;
    }
    float _2104 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2105 = _2104 == 3.0;
    float _2107 = log2(_2092);
    float _2114 = exp2(_2107 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1933 + ((isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0))) * _353))) + ((_1939 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2115 = exp2(_2107 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1935 + ((isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0))) * _353))) + ((_1941 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2116 = exp2(_2107 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1937 + ((isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0))) * _353))) + ((_1943 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2125 = (_2104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2125 * (_2105 ? _2114 : (_2114 + (cbSceneParam._m0[72u].w * _2086)));
    SV_Target.y = _2125 * (_2105 ? _2115 : (_2115 + (cbSceneParam._m0[72u].w * _2088)));
    SV_Target.z = _2125 * (_2105 ? _2116 : (_2116 + (cbSceneParam._m0[72u].w * _2090)));
    SV_Target.w = _1968;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1968;
}


