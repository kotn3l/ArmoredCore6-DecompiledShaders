#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _3165;
float _3166;
float _3167;
float _3168;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.w;
    float _204 = _197.x * cbMtdParam._m0[9u].x;
    float _205 = _197.y * cbMtdParam._m0[9u].y;
    float _206 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _218 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = cbMtdParam._m0[10u].x * _218.x;
    float _229 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _230 = _229 * _175;
    float _231 = _229 * _176;
    float _232 = _229 * _177;
    float _233 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3182 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3193 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3204 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _253 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    vec4 _318 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _320 = _318.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_304 * _304) + (_305 * _305)) + (_306 * _306));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3215 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3226 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) - _457)) + _457) < ((_320 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _353 = fma(_232, cbSceneParam._m0[5u].z, fma(_231, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _230));
    float _356 = fma(_232, cbSceneParam._m0[6u].z, fma(_231, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _230));
    float _359 = fma(_232, cbSceneParam._m0[7u].z, fma(_231, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _230));
    uint _372 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _372 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_375].z;
    float _3237 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _3248 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD.z;
    float _399 = dot(vec3(_230, _231, _232), vec3(_311, _312, _313));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _230) - _311;
    float _408 = (_402 * _231) - _312;
    float _409 = (_402 * _232) - _313;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _230;
        float _529 = _435 + _231;
        float _530 = _439 + _232;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_230, _231, _232), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3307 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_230, _231, _232), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3340 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_230, _231, _232), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3373 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _230;
        float _846 = _435 + _231;
        float _847 = _439 + _232;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_230, _231, _232), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3436 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_230, _231, _232), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3469 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_230, _231, _232), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3502 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1218 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1300;
    float _1302;
    float _1304;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1267 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1271 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1275 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1278 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1281 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1284 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1310;
        if (_1278 > 0.0)
        {
            _1310 = abs((1.0 - _1267) / _1278);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1267 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1310 = frontier_phi_19_17_ladder;
        }
        float _1492;
        if (_1281 > 0.0)
        {
            _1492 = abs((1.0 - _1271) / _1281);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1271 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1492 = frontier_phi_28_24_ladder;
        }
        float _1566;
        if (_1284 > 0.0)
        {
            _1566 = abs((1.0 - _1275) / _1284);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1275 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1566 = frontier_phi_39_35_ladder;
        }
        float _1568 = isnan(_1492) ? _1310 : (isnan(_1310) ? _1492 : min(_1310, _1492));
        float _1569 = isnan(_1566) ? _1568 : (isnan(_1568) ? _1566 : min(_1568, _1566));
        float _1573 = (_1569 * _1278) + _1267;
        float _1574 = (_1569 * _1281) + _1271;
        float _1575 = (_1569 * _1284) + _1275;
        float _1576 = _1569 * 9.9999997473787516355514526367188e-05;
        float _1578 = (-1.0) - _1576;
        float _1580 = _1576 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_1575 > _1580) || ((_1575 < _1578) || ((_1574 > _1580) || ((_1574 < _1578) || ((_1573 < _1578) || (_1573 > _1580))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1575, cbModelParam._m0[9u].z, fma(_1574, cbModelParam._m0[9u].y, _1573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1575, cbModelParam._m0[10u].z, fma(_1574, cbModelParam._m0[10u].y, _1573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1575, cbModelParam._m0[11u].z, fma(_1574, cbModelParam._m0[11u].y, _1573 * cbModelParam._m0[11u].x))), _1218);
            frontier_phi_18_39_ladder = _1651.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _1651.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _1651.x * cbModelParam._m0[1u].y;
        }
        _1300 = frontier_phi_18_39_ladder_2;
        _1302 = frontier_phi_18_39_ladder_1;
        _1304 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1218);
        _1300 = _1288.x * cbModelParam._m0[1u].y;
        _1302 = _1288.y * cbModelParam._m0[1u].y;
        _1304 = _1288.z * cbModelParam._m0[1u].y;
    }
    float _1307 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1378 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1381 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1497;
        if (_1375 > 0.0)
        {
            _1497 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1497 = frontier_phi_30_26_ladder;
        }
        float _1593;
        if (_1378 > 0.0)
        {
            _1593 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1593 = frontier_phi_41_37_ladder;
        }
        float _1807;
        if (_1381 > 0.0)
        {
            _1807 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _1807 = frontier_phi_50_47_ladder;
        }
        float _1809 = isnan(_1593) ? _1497 : (isnan(_1497) ? _1593 : min(_1497, _1593));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1375) + _1364;
        float _1815 = (_1810 * _1378) + _1368;
        float _1816 = (_1810 * _1381) + _1372;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1818 = (-1.0) - _1817;
        float _1820 = _1817 + 1.0;
        float frontier_phi_27_50_ladder;
        float frontier_phi_27_50_ladder_1;
        float frontier_phi_27_50_ladder_2;
        if ((_1816 > _1820) || ((_1816 < _1818) || ((_1815 > _1820) || ((_1815 < _1818) || ((_1814 < _1818) || (_1814 > _1820))))))
        {
            frontier_phi_27_50_ladder = 0.0;
            frontier_phi_27_50_ladder_1 = 0.0;
            frontier_phi_27_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1816, cbModelParam._m0[17u].z, fma(_1815, cbModelParam._m0[17u].y, _1814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1816, cbModelParam._m0[18u].z, fma(_1815, cbModelParam._m0[18u].y, _1814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1816, cbModelParam._m0[19u].z, fma(_1815, cbModelParam._m0[19u].y, _1814 * cbModelParam._m0[19u].x))), _1307);
            frontier_phi_27_50_ladder = _1907.z * cbModelParam._m0[1u].z;
            frontier_phi_27_50_ladder_1 = _1907.y * cbModelParam._m0[1u].z;
            frontier_phi_27_50_ladder_2 = _1907.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_27_50_ladder_2;
        _1402 = frontier_phi_27_50_ladder_1;
        _1404 = frontier_phi_27_50_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1307);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _398 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    uvec4 _1439 = floatBitsToUint(cbInstanceData._m0[_372 + 5u]);
    uint _1441 = _1439.x * 14u;
    uint _1442 = _1441 + 13u;
    float _1449 = _398 + (-1.0);
    float _1455 = (cbLight._m0[_1442].x * _1449) + 1.0;
    float _1456 = (cbLight._m0[_1442].y * _1449) + 1.0;
    float _1457 = (cbLight._m0[_1442].z * _1449) + 1.0;
    float _1458 = (cbLight._m0[_1442].w * _1449) + 1.0;
    uint _1460 = _1441 + 4u;
    float _1472 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_230, _231, _232));
    float _1475 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
    uint _1476 = _1441 + 5u;
    float _1488 = dot(vec3(cbLight._m0[_1441 | 1u].xyz), vec3(_230, _231, _232));
    float _1491 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
    float _1556;
    float _1557;
    float _1558;
    if (_233 == 0.0)
    {
        float _3638 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _3649 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1510 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.3183098733425140380859375;
        float _1512 = (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.3183098733425140380859375;
        _1556 = ((cbLight._m0[_1476].x * _1491) * _1512) + ((cbLight._m0[_1460].x * _1475) * _1510);
        _1557 = ((_1491 * cbLight._m0[_1476].y) * _1512) + ((_1475 * cbLight._m0[_1460].y) * _1510);
        _1558 = ((_1491 * cbLight._m0[_1476].z) * _1512) + ((_1475 * cbLight._m0[_1460].z) * _1510);
    }
    else
    {
        float _1522 = _1472 + _233;
        float _1525 = (_233 * 2.0) + 1.0;
        float _1526 = (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) / _1525;
        float _1533 = _1488 + _233;
        float _1535 = (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) / _1525;
        _1556 = (((_1535 * cbLight._m0[_1476].x) * _1491) + ((_1526 * cbLight._m0[_1460].x) * _1475)) * 0.3183098733425140380859375;
        _1557 = (((_1535 * cbLight._m0[_1476].y) * _1491) + ((_1526 * cbLight._m0[_1460].y) * _1475)) * 0.3183098733425140380859375;
        _1558 = (((_1535 * cbLight._m0[_1476].z) * _1491) + ((_1526 * cbLight._m0[_1460].z) * _1475)) * 0.3183098733425140380859375;
    }
    uvec4 _1563 = floatBitsToUint(cbLight._m0[_1441 + 12u]);
    bool _1565 = _1563.x == 0u;
    float _1598;
    float _1600;
    float _1602;
    if (_1565)
    {
        _1598 = _1556;
        _1600 = _1557;
        _1602 = _1558;
    }
    else
    {
        uint _1606 = _1441 + 6u;
        float _1622 = (dot(vec3(cbLight._m0[_1441 + 2u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1623 = _1622 * _1622;
        float _3670 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1625 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1598 = (((cbLight._m0[_1606].x * 0.3183098733425140380859375) * _1624) * _1625) + _1556;
        _1600 = (((cbLight._m0[_1606].y * 0.3183098733425140380859375) * _1624) * _1625) + _1557;
        _1602 = (((cbLight._m0[_1606].z * 0.3183098733425140380859375) * _1624) * _1625) + _1558;
    }
    bool _1605 = _1563.y == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1605)
    {
        _1660 = _1598;
        _1662 = _1600;
        _1664 = _1602;
    }
    else
    {
        uint _1778 = _1441 + 7u;
        float _1794 = (dot(vec3(cbLight._m0[_1441 + 3u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1795 = _1794 * _1794;
        float _3686 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1797 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1660 = (((cbLight._m0[_1778].x * 0.3183098733425140380859375) * _1796) * _1797) + _1598;
        _1662 = (((cbLight._m0[_1778].y * 0.3183098733425140380859375) * _1796) * _1797) + _1600;
        _1664 = (((cbLight._m0[_1778].z * 0.3183098733425140380859375) * _1796) * _1797) + _1602;
    }
    uint _1666 = _1441 + 8u;
    float _1677 = cbLight._m0[_1441].x + _311;
    float _1678 = cbLight._m0[_1441].y + _312;
    float _1679 = cbLight._m0[_1441].z + _313;
    float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
    float _1687 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1441].xyz));
    float _3702 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1691 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1692 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_1677 * _1683, _1678 * _1683, _1679 * _1683));
    float _3724 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1703 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1709 = (0.5 / ((_1690 + 9.9999999392252902907785028219223e-09) + _1691)) * _1690;
    float _3735 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1711 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.31831014156341552734375;
    float _1713 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
    uint _1723 = _1441 + 9u;
    uint _1729 = _1441 | 1u;
    float _1735 = cbLight._m0[_1729].x + _311;
    float _1736 = cbLight._m0[_1729].y + _312;
    float _1737 = cbLight._m0[_1729].z + _313;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1745 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1729].xyz));
    float _3751 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1749 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1735 * _1741, _1736 * _1741, _1737 * _1741));
    float _3762 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1758 = (exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1762 = (0.5 / ((_1748 + 9.9999999392252902907785028219223e-09) + _1691)) * _1748;
    float _3773 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1764 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.31831014156341552734375;
    float _1765 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
    float _1775 = (((_1758 * cbLight._m0[_1723].x) * _1764) * _1765) + (((_1703 * cbLight._m0[_1666].x) * _1711) * _1713);
    float _1776 = (((_1758 * cbLight._m0[_1723].y) * _1764) * _1765) + (((_1703 * cbLight._m0[_1666].y) * _1711) * _1713);
    float _1777 = (((_1758 * cbLight._m0[_1723].z) * _1764) * _1765) + (((_1703 * cbLight._m0[_1666].z) * _1711) * _1713);
    float _1833;
    float _1835;
    float _1837;
    if (_1565)
    {
        _1833 = _1775;
        _1835 = _1776;
        _1837 = _1777;
    }
    else
    {
        uint _1839 = _1441 + 10u;
        uint _1845 = _1441 + 2u;
        float _1851 = cbLight._m0[_1845].x + _311;
        float _1852 = cbLight._m0[_1845].y + _312;
        float _1853 = cbLight._m0[_1845].z + _313;
        float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
        float _1861 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1845].xyz));
        float _3789 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1864 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1865 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_1851 * _1857, _1852 * _1857, _1853 * _1857));
        float _3800 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1874 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1878 = (0.5 / ((_1864 + 9.9999999392252902907785028219223e-09) + _1691)) * _1864;
        float _3811 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1880 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.31831014156341552734375;
        float _1881 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1833 = (((_1874 * cbLight._m0[_1839].x) * _1880) * _1881) + _1775;
        _1835 = (((_1874 * cbLight._m0[_1839].y) * _1880) * _1881) + _1776;
        _1837 = (((_1874 * cbLight._m0[_1839].z) * _1880) * _1881) + _1777;
    }
    float _1912;
    float _1914;
    float _1916;
    if (_1605)
    {
        _1912 = _1833;
        _1914 = _1835;
        _1916 = _1837;
    }
    else
    {
        uint _1923 = _1441 + 11u;
        uint _1929 = _1441 + 3u;
        float _1935 = cbLight._m0[_1929].x + _311;
        float _1936 = cbLight._m0[_1929].y + _312;
        float _1937 = cbLight._m0[_1929].z + _313;
        float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
        float _1945 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1929].xyz));
        float _3827 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1935 * _1941, _1936 * _1941, _1937 * _1941));
        float _3838 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1962 = (0.5 / ((_1948 + 9.9999999392252902907785028219223e-09) + _1691)) * _1948;
        float _3849 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1964 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.31831014156341552734375;
        float _1965 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1912 = (((_1958 * cbLight._m0[_1923].x) * _1964) * _1965) + _1833;
        _1914 = (((_1958 * cbLight._m0[_1923].y) * _1964) * _1965) + _1835;
        _1916 = (((_1958 * cbLight._m0[_1923].z) * _1964) * _1965) + _1837;
    }
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    if (_1439.y == 0u)
    {
        float _2014 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2014;
        float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2014;
        float _2017 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2014;
        uvec4 _2029 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2030 = _2029.x;
        uint _2041 = uint((float(_2029.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _2030))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _2030)));
        float _2051 = (log2(_2017 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2052 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        uint _2055 = uint(isnan(14.0) ? _2052 : (isnan(_2052) ? 14.0 : min(_2052, 14.0)));
        uvec4 _2060 = texelFetch(g_lightClusterGridBuffer, int(((_2055 << 2u) + (_2041 << 6u)) >> 2u));
        uint _2061 = _2060.x;
        uint _2062 = _2029.z;
        float _2086;
        float _2088;
        float _2090;
        float _2092;
        float _2094;
        float _2096;
        if (((((1u << ((_2062 >> 4u) & 15u)) + 4294967295u) & _2061) == 0u) || ((_2062 & 240u) == 0u))
        {
            _2086 = 0.0;
            _2088 = 0.0;
            _2090 = 0.0;
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
        }
        else
        {
            float _2087;
            float _2089;
            float _2091;
            float _2093;
            float _2095;
            float _2097;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            float _2270 = 0.0;
            float _2271 = 0.0;
            float _2272 = 0.0;
            uint _2273 = 0u;
            uint _2282;
            bool _2283;
            for (;;)
            {
                _2282 = texelFetch(g_lightClassification, int((((_2055 << 5u) + (_2041 << 9u)) + (_2273 << 2u)) >> 2u)).x;
                _2283 = _2282 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2283)
                {
                    frontier_phi_69_pred = _2272;
                    frontier_phi_69_pred_1 = _2271;
                    frontier_phi_69_pred_2 = _2270;
                    frontier_phi_69_pred_3 = _2269;
                    frontier_phi_69_pred_4 = _2268;
                    frontier_phi_69_pred_5 = _2267;
                }
                else
                {
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    uint _2476;
                    _2470 = _2267;
                    _2471 = _2268;
                    _2472 = _2269;
                    _2473 = _2270;
                    _2474 = _2271;
                    _2475 = _2272;
                    _2476 = _2282;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    for (;;)
                    {
                        uint _2480 = uint(findLSB(_2476)) + (_2273 << 5u);
                        uint _2477 = (_2476 + 4294967295u) & _2476;
                        uint _2482 = _2480 * 48u;
                        vec4 _2496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2482)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 3u)).x));
                        uint _2502 = (_2480 * 48u) + 4u;
                        vec4 _2515 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2502)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 3u)).x));
                        float _2516 = _2515.x;
                        float _2517 = _2515.y;
                        float _2518 = _2515.z;
                        uint _2521 = (_2480 * 48u) + 8u;
                        vec3 _2532 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2521)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 2u)).x));
                        uint _2537 = (_2480 * 48u) + 12u;
                        vec2 _2545 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x));
                        float _2551 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
                        float _2552 = _2551 * _2015;
                        float _2553 = _2551 * _2016;
                        float _2554 = _2551 * _2017;
                        float _2555 = _2496.x - _2015;
                        float _2556 = _2496.y - _2016;
                        float _2557 = _2496.z - _2017;
                        float _2558 = dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557));
                        float _2561 = inversesqrt(_2558);
                        float _2562 = _2561 * _2555;
                        float _2563 = _2561 * _2556;
                        float _2564 = _2561 * _2557;
                        float _2570 = 1.0 - (_2558 * _2496.w);
                        float _3875 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2571 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2572 = sqrt(_2558) * _2515.w;
                        float _2575 = 1.39999997615814208984375 / (_2572 + 1.39999997615814208984375);
                        float _2576 = _2575 * _2575;
                        float _2577 = 1.0 - _2576;
                        float _2579 = (_2577 * _2577) * _233;
                        float _2581 = (_2577 * dot(vec3(_353, _356, _359), vec3(_2562, _2563, _2564))) + _2576;
                        float _2582 = _2581 + _2579;
                        float _2587 = _2572 * _2572;
                        float _2592 = ((isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))) * _2571) / (((_2579 * 2.0) + 1.0) * ((_2587 * 0.699999988079071044921875) + 1.0));
                        float _2596 = dot(vec3(_2562, _2563, _2564), vec3(_2552, _2553, _2554));
                        float _3891 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2603 = dot(vec3((-0.0) - _2552, (-0.0) - _2553, (-0.0) - _2554), vec3(_353, _356, _359)) + 1.0;
                        float _2605 = (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))) * 0.5;
                        float _2612 = ((_2605 * _2605) * _2545.x) * exp2((_2545.y * 32.0) * log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))));
                        float _2614 = _233 / (_233 + 1.0);
                        float _2630 = (-0.0) - _2015;
                        float _2631 = (-0.0) - _2016;
                        float _2632 = (-0.0) - _2017;
                        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
                        float _2640 = dot(vec3(_353, _356, _359), vec3(_2636 * _2630, _2636 * _2631, _2636 * _2632));
                        float _3907 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _3918 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
                        float _2644 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                        float _2648 = (0.5 / (((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) + 9.9999999392252902907785028219223e-09) + _2644)) * _2644;
                        float _3929 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2657 = (((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 3.1415927410125732421875) / ((_2587 * 2.1991131305694580078125) + 3.141590118408203125)) * _2571;
                        _2388 = (((((_2516 * 0.3183098733425140380859375) * _2614) * _2612) + _2516) * _2592) + _2473;
                        _2389 = (((((_2517 * 0.3183098733425140380859375) * _2614) * _2612) + _2517) * _2592) + _2474;
                        _2390 = (((((_2518 * 0.3183098733425140380859375) * _2614) * _2612) + _2518) * _2592) + _2475;
                        _2385 = (_2657 * _2532.x) + _2470;
                        _2386 = (_2657 * _2532.y) + _2471;
                        _2387 = (_2657 * _2532.z) + _2472;
                        if (_2477 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2470 = _2385;
                            _2471 = _2386;
                            _2472 = _2387;
                            _2473 = _2388;
                            _2474 = _2389;
                            _2475 = _2390;
                            _2476 = _2477;
                        }
                    }
                    frontier_phi_69_pred = _2390;
                    frontier_phi_69_pred_1 = _2389;
                    frontier_phi_69_pred_2 = _2388;
                    frontier_phi_69_pred_3 = _2387;
                    frontier_phi_69_pred_4 = _2386;
                    frontier_phi_69_pred_5 = _2385;
                }
                _2097 = frontier_phi_69_pred;
                _2095 = frontier_phi_69_pred_1;
                _2093 = frontier_phi_69_pred_2;
                _2091 = frontier_phi_69_pred_3;
                _2089 = frontier_phi_69_pred_4;
                _2087 = frontier_phi_69_pred_5;
                uint _2274 = _2273 + 1u;
                if (_2274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2267 = _2087;
                    _2268 = _2089;
                    _2269 = _2091;
                    _2270 = _2093;
                    _2271 = _2095;
                    _2272 = _2097;
                    _2273 = _2274;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2086 = _2087;
            _2088 = _2089;
            _2090 = _2091;
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
        }
        uvec4 _2100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2101 = _2100.z;
        uint _2103 = (_2101 >> 8u) & 15u;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((4294967295u << _2103) & _2061) == 0u)
        {
            _2235 = _2086;
            _2237 = _2088;
            _2239 = _2090;
            _2241 = _2092;
            _2243 = _2094;
            _2245 = _2096;
        }
        else
        {
            float _2260 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
            float _2261 = _2260 * _2015;
            float _2262 = _2260 * _2016;
            float _2263 = _2260 * _2017;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2103 < ((_2101 >> 12u) & 15u))
            {
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2453 = _2086;
                float _2454 = _2088;
                float _2455 = _2090;
                float _2456 = _2092;
                float _2457 = _2094;
                float _2458 = _2096;
                uint _2459 = _2103;
                uint _2468;
                bool _2469;
                for (;;)
                {
                    _2468 = texelFetch(g_lightClassification, int((((_2055 << 5u) + (_2041 << 9u)) + (_2459 << 2u)) >> 2u)).x;
                    _2469 = _2468 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2469)
                    {
                        frontier_phi_81_pred = _2453;
                        frontier_phi_81_pred_1 = _2455;
                        frontier_phi_81_pred_2 = _2454;
                        frontier_phi_81_pred_3 = _2458;
                        frontier_phi_81_pred_4 = _2457;
                        frontier_phi_81_pred_5 = _2456;
                    }
                    else
                    {
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _2727 = _2453;
                        float _2728 = _2454;
                        float _2729 = _2455;
                        float _2730 = _2456;
                        float _2731 = _2457;
                        float _2732 = _2458;
                        uint _2733 = _2468;
                        uint _2734;
                        vec4 _2759;
                        float _2760;
                        vec4 _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        vec3 _2790;
                        vec2 _2799;
                        vec4 _2815;
                        vec4 _2831;
                        float _2878;
                        bool _2879;
                        for (;;)
                        {
                            uint _2744 = ((_2459 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2733));
                            _2734 = (_2733 + 4294967295u) & _2733;
                            uint _2746 = _2744 * 40u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            _2760 = _2759.w;
                            uint _2762 = (_2744 * 40u) + 4u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            _2776 = _2775.x;
                            _2777 = _2775.y;
                            _2778 = _2775.z;
                            uint _2780 = (_2744 * 40u) + 8u;
                            _2790 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x));
                            uint _2792 = (_2744 * 40u) + 12u;
                            _2799 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x));
                            uint _2802 = (_2744 * 40u) + 16u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            uint _2818 = (_2744 * 40u) + 20u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2834 = (_2744 * 40u) + 24u;
                            vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2853 = (_2744 * 40u) + 28u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2878 = fma(_2017, _2866.z, fma(_2016, _2866.y, _2866.x * _2015)) + _2866.w;
                            _2879 = !((fma(_2017, _2847.z, fma(_2016, _2847.y, _2847.x * _2015)) + _2847.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2879)
                            {
                                float _2905 = _2759.x - _2015;
                                float _2906 = _2759.y - _2016;
                                float _2907 = _2759.z - _2017;
                                float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                                float _2911 = inversesqrt(_2908);
                                float _2912 = _2911 * _2905;
                                float _2913 = _2911 * _2906;
                                float _2914 = _2911 * _2907;
                                float _2918 = 1.0 - (_2908 / (_2760 * _2760));
                                float _3940 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                                float _2919 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _2923 = sqrt(_2908) * _2775.w;
                                float _2925 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                                float _2926 = _2925 * _2925;
                                float _2927 = 1.0 - _2926;
                                float _2929 = (_2927 * _2927) * _233;
                                float _2932 = ((_2927 * dot(vec3(_2912, _2913, _2914), vec3(_353, _356, _359))) + _2926) + _2929;
                                float _2937 = _2923 * _2923;
                                float _2942 = (fma(_2017, _2815.z, fma(_2016, _2815.y, _2815.x * _2015)) + _2815.w) / _2878;
                                float _2943 = (fma(_2017, _2831.z, fma(_2016, _2831.y, _2831.x * _2015)) + _2831.w) / _2878;
                                float _2947 = 1.0 - dot(vec2(_2942, _2943), vec2(_2942, _2943));
                                float _3956 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2948 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _2949 = _2948 * (((isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))) * _2919) / (((_2929 * 2.0) + 1.0) * ((_2937 * 0.699999988079071044921875) + 1.0)));
                                float _2950 = (-0.0) - _2261;
                                float _2951 = (-0.0) - _2262;
                                float _2952 = (-0.0) - _2263;
                                float _2953 = dot(vec3(_2912, _2913, _2914), vec3(_2261, _2262, _2263));
                                float _3967 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2960 = dot(vec3(_2950, _2951, _2952), vec3(_353, _356, _359)) + 1.0;
                                float _2962 = (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * 0.5;
                                float _2969 = ((_2962 * _2962) * _2799.x) * exp2((_2799.y * 32.0) * log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
                                float _2971 = _233 / (_233 + 1.0);
                                float _2987 = dot(vec3(_353, _356, _359), vec3(_2950, _2951, _2952));
                                float _3983 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2995 = (_2927 * dot(vec3(_353, _356, _359), vec3(_2912, _2913, _2914))) + _2926;
                                float _3994 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3000 = (0.5 / (((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) + 9.9999999392252902907785028219223e-09) + _2996)) * _2996;
                                float _4005 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3007 = (_2948 * _2919) * (((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 3.1415927410125732421875) / ((_2937 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = ((((_2778 * 0.3183098733425140380859375) * _2971) * _2969) + _2778) * _2949;
                                frontier_phi_90_pred_1 = ((((_2777 * 0.3183098733425140380859375) * _2971) * _2969) + _2777) * _2949;
                                frontier_phi_90_pred_2 = ((((_2776 * 0.3183098733425140380859375) * _2971) * _2969) + _2776) * _2949;
                                frontier_phi_90_pred_3 = _3007 * _2790.z;
                                frontier_phi_90_pred_4 = _3007 * _2790.y;
                                frontier_phi_90_pred_5 = _3007 * _2790.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3016 = frontier_phi_90_pred;
                            _3015 = frontier_phi_90_pred_1;
                            _3014 = frontier_phi_90_pred_2;
                            _3013 = frontier_phi_90_pred_3;
                            _3012 = frontier_phi_90_pred_4;
                            _3011 = frontier_phi_90_pred_5;
                            _2708 = _3014 + _2730;
                            _2709 = _3015 + _2731;
                            _2710 = _3016 + _2732;
                            _2705 = _3011 + _2727;
                            _2706 = _3012 + _2728;
                            _2707 = _3013 + _2729;
                            if (_2734 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2727 = _2705;
                                _2728 = _2706;
                                _2729 = _2707;
                                _2730 = _2708;
                                _2731 = _2709;
                                _2732 = _2710;
                                _2733 = _2734;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2705;
                        frontier_phi_81_pred_1 = _2707;
                        frontier_phi_81_pred_2 = _2706;
                        frontier_phi_81_pred_3 = _2710;
                        frontier_phi_81_pred_4 = _2709;
                        frontier_phi_81_pred_5 = _2708;
                    }
                    _2236 = frontier_phi_81_pred;
                    _2240 = frontier_phi_81_pred_1;
                    _2238 = frontier_phi_81_pred_2;
                    _2246 = frontier_phi_81_pred_3;
                    _2244 = frontier_phi_81_pred_4;
                    _2242 = frontier_phi_81_pred_5;
                    uint _2460 = _2459 + 1u;
                    if (_2460 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2453 = _2236;
                        _2454 = _2238;
                        _2455 = _2240;
                        _2456 = _2242;
                        _2457 = _2244;
                        _2458 = _2246;
                        _2459 = _2460;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2238;
                frontier_phi_63_64_ladder_1 = _2246;
                frontier_phi_63_64_ladder_2 = _2244;
                frontier_phi_63_64_ladder_3 = _2242;
                frontier_phi_63_64_ladder_4 = _2240;
                frontier_phi_63_64_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_63_64_ladder = _2088;
                frontier_phi_63_64_ladder_1 = _2096;
                frontier_phi_63_64_ladder_2 = _2094;
                frontier_phi_63_64_ladder_3 = _2092;
                frontier_phi_63_64_ladder_4 = _2090;
                frontier_phi_63_64_ladder_5 = _2086;
            }
            _2235 = frontier_phi_63_64_ladder_5;
            _2237 = frontier_phi_63_64_ladder;
            _2239 = frontier_phi_63_64_ladder_4;
            _2241 = frontier_phi_63_64_ladder_3;
            _2243 = frontier_phi_63_64_ladder_2;
            _2245 = frontier_phi_63_64_ladder_1;
        }
        float _2250 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _2073 = (_2250 * _2241) + _1660;
        _2075 = (_2250 * _2243) + _1662;
        _2077 = (_2250 * _2245) + _1664;
        _2079 = ((_2235 * 0.039999999105930328369140625) * _2250) + _1912;
        _2081 = ((_2237 * 0.039999999105930328369140625) * _2250) + _1914;
        _2083 = ((_2239 * 0.039999999105930328369140625) * _2250) + _1916;
    }
    else
    {
        _2073 = _1660;
        _2075 = _1662;
        _2077 = _1664;
        _2079 = _1912;
        _2081 = _1914;
        _2083 = _1916;
    }
    float _2174;
    float _2175;
    float _2176;
    if (_233 > 0.0)
    {
        uint _2107 = _1441 + 4u;
        float _2113 = (-0.0) - _311;
        float _2114 = (-0.0) - _312;
        float _2115 = (-0.0) - _313;
        float _2116 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_2113, _2114, _2115));
        float _4021 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2123 = dot(vec3(_311, _312, _313), vec3(_230, _231, _232)) + 1.0;
        float _2125 = (isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * 0.5;
        float _2130 = _2125 * _2125;
        float _2131 = _2130 * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 32.0);
        float _2133 = _233 / (_233 + 1.0);
        float _2134 = isnan(_1455) ? 1.0 : (isnan(1.0) ? _1455 : min(1.0, _1455));
        uint _2144 = _1441 + 5u;
        float _2150 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_2113, _2114, _2115));
        float _4042 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2157 = _2130 * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 32.0);
        float _2158 = isnan(_1456) ? 1.0 : (isnan(1.0) ? _1456 : min(1.0, _1456));
        _2174 = ((((_2157 * cbLight._m0[_2144].x) * _2133) * _2158) + (((_2131 * cbLight._m0[_2107].x) * _2133) * _2134)) * 0.3183098733425140380859375;
        _2175 = ((((_2157 * cbLight._m0[_2144].y) * _2133) * _2158) + (((_2131 * cbLight._m0[_2107].y) * _2133) * _2134)) * 0.3183098733425140380859375;
        _2176 = ((((_2157 * cbLight._m0[_2144].z) * _2133) * _2158) + (((_2131 * cbLight._m0[_2107].z) * _2133) * _2134)) * 0.3183098733425140380859375;
    }
    else
    {
        _2174 = 0.0;
        _2175 = 0.0;
        _2176 = 0.0;
    }
    float _4058 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _4069 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _4080 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2195 = ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * ((_2073 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _398)) + _2174)) + ((_2079 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2196 = ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * ((_2075 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _398)) + _2175)) + ((_2081 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2197 = ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * ((_2077 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _398)) + _2176)) + ((_2083 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    uint _2198 = _372 + 6u;
    float _2206 = _332 / cbSceneParam._m0[86u].x;
    float _2207 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2221 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2223 = _2221.x;
    float _2224 = _2221.y;
    float _2225 = _2221.z;
    float _2226 = _2221.w;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2288 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2289 = _2288 / _253;
        float _2300 = _2289 * _304;
        float _2301 = _305 * _2289;
        float _2302 = (-0.0) - _2301;
        float _2303 = _2289 * _306;
        float _2305 = (cbSceneParam._m0[77u].w * _2302) / _2288;
        float _2306 = _2305 + cbSceneParam._m0[79u].w;
        float _2307 = cbSceneParam._m0[79u].w - _2301;
        float _2313 = sqrt(((_2300 * _2300) + (_2301 * _2301)) + (_2303 * _2303));
        float _2316 = (1.0 - (cbSceneParam._m0[77u].w / _2288)) * _2313;
        float _2321 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2323 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2302 - _2305) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2306 > 0.0) ? exp2(_2321 * _2306) : (2.0 - exp2(_2323 * _2306))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2316;
        }
        else
        {
            float _2410 = 1.0 / cbSceneParam._m0[80u].x;
            float _2411 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : max(_2306, _2307));
            float _2412 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : min(_2306, _2307));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            float _2422 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : min(_2412, 0.0));
            _2662 = ((abs(_2313 / _2302) * cbSceneParam._m0[80u].y) * ((((_2421 - _2422) * 2.0) - ((exp2(_2321 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0)))) - exp2(_2321 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0))))) * _2410)) - ((exp2(_2323 * _2421) - exp2(_2323 * _2422)) * _2410))) + (_2316 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2226);
        _2325 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2223;
        _2327 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2224;
        _2329 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2225;
        _2331 = _2673 * _2226;
    }
    else
    {
        _2325 = _2223;
        _2327 = _2224;
        _2329 = _2225;
        _2331 = _2226;
    }
    bool _2700;
    vec4 _2341;
    vec4 _2364;
    float _2366;
    float _2370;
    float _2371;
    float _2372;
    float _2373;
    bool _2384;
    for (;;)
    {
        _2341 = cbMatDynParam._m0[0u];
        float _2343 = roundEven(_2341.y);
        bool _2344 = _2343 == 3.0;
        float _2346 = log2(_2331);
        float _2353 = exp2(_2346 * cbSceneParam._m0[78u].x) * _2195;
        float _2354 = exp2(_2346 * cbSceneParam._m0[78u].y) * _2196;
        float _2355 = exp2(_2346 * cbSceneParam._m0[78u].z) * _2197;
        float _2362 = _320 + (-0.5);
        _2364 = cbMtdParam._m0[1u];
        _2366 = _2364.y * _2362;
        float _2369 = (_2343 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2370 = _2369 * (_2344 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2325)));
        _2371 = _2369 * (_2344 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2327)));
        _2372 = _2369 * (_2344 ? _2355 : (_2355 + (cbSceneParam._m0[72u].w * _2329)));
        _2373 = _2362 * 0.999000012874603271484375;
        _2384 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2384)
        {
            if ((cbInstanceData._m0[_372 + 7u].x + _2373) < 0.5)
            {
                _2700 = true;
                break;
            }
        }
        uint _2445 = _374 + uint(_2341.w);
        if ((cbInstanceData._m0[_2445].w < 1.0) && ((cbInstanceData._m0[_2445].w + _2373) < 0.5))
        {
            _2700 = true;
            break;
        }
        if ((_2366 + _203) < _2364.x)
        {
            _2700 = true;
            break;
        }
        _2700 = false;
        break;
    }
    float _2718;
    if (_2700)
    {
        discard_state = true;
        _2718 = 0.0;
    }
    else
    {
        _2718 = cbInstanceData._m0[_2198].w;
    }
    SV_Target.x = _2370;
    SV_Target.y = _2371;
    SV_Target.z = _2372;
    SV_Target.w = _2718;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2198].w;
    discard_exit();
}


