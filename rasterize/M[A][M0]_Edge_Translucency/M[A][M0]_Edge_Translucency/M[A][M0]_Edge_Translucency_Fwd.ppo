#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _725;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _193 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _193.x * cbMtdParam._m0[9u].x;
    float _200 = _193.y * cbMtdParam._m0[9u].y;
    float _201 = _193.z * cbMtdParam._m0[9u].z;
    vec4 _213 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _220 = cbMtdParam._m0[10u].x * _213.x;
    float _224 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _225 = _224 * _171;
    float _226 = _224 * _172;
    float _227 = _224 * _173;
    float _228 = isnan(0.0) ? _220 : (isnan(_220) ? 0.0 : max(_220, 0.0));
    float _3069 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3080 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3091 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _299 * _305;
    float _307 = _300 * _305;
    float _308 = _301 * _305;
    float _314 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _315 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _336 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _339 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _342 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _355 = uint(roundEven(NORMAL.w)) * 13u;
    uint _358 = (_355 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _364 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0)))) * cbInstanceData._m0[_358].x;
    float _365 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0)))) * cbInstanceData._m0[_358].y;
    float _366 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0)))) * cbInstanceData._m0[_358].z;
    float _3102 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    float _3113 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
    float _3124 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
    vec4 _378 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _314, cbSceneParam._m0[86u].y * _315));
    float _381 = _378.x * TEXCOORD.z;
    float _382 = dot(vec3(_225, _226, _227), vec3(_306, _307, _308));
    float _385 = _382 * 2.0;
    float _390 = (_385 * _225) - _306;
    float _391 = (_385 * _226) - _307;
    float _392 = (_385 * _227) - _308;
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _724;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _449 = fma(_422, cbModelParam._m0[26u].z, fma(_418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _414));
        float _453 = fma(_422, cbModelParam._m0[27u].z, fma(_418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _414));
        float _457 = fma(_422, cbModelParam._m0[28u].z, fma(_418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _414));
        float _482 = _414 + _225;
        float _483 = _418 + _226;
        float _484 = _422 + _227;
        float _494 = fma(_484, cbModelParam._m0[26u].z, fma(_483, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _482)) - _449;
        float _495 = fma(_484, cbModelParam._m0[27u].z, fma(_483, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _482)) - _453;
        float _496 = fma(_484, cbModelParam._m0[28u].z, fma(_483, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _482)) - _457;
        float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
        float _513 = ((_500 * _494) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_449 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_500 * _495) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_453 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_500 * _496) / cbModelParam._m0[34u].z) + ((((((_457 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        float _552 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _553 = _552 * (_518.x + (-0.5));
        float _554 = _552 * (_518.y + (-0.5));
        float _555 = _552 * (_518.z + (-0.5));
        float _562 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _563 = _562 * (_525.x + (-0.5));
        float _564 = _562 * (_525.y + (-0.5));
        float _565 = _562 * (_525.z + (-0.5));
        float _572 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _573 = _572 * (_532.x + (-0.5));
        float _574 = _572 * (_532.y + (-0.5));
        float _575 = _572 * (_532.z + (-0.5));
        float _582 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_539.x + (-0.5));
        float _584 = _582 * (_539.y + (-0.5));
        float _585 = _582 * (_539.z + (-0.5));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = _553 * 0.5;
        float _590 = _563 * 0.5;
        float _591 = _573 * 0.5;
        float _592 = dot(vec3(_589, _590, _591), vec3(_589, _590, _591));
        float _597 = (_592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_592);
        float _606 = (dot(vec3(_225, _226, _227), vec3(_597 * _589, _597 * _590, _597 * _591)) + 1.0) * 0.5;
        float _3150 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _616 = sqrt(((_590 * _590) + (_589 * _589)) + (_591 * _591)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _3161 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _617 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _618 = _617 * 2.0;
        float _622 = (1.0 - _617) / (_617 + 1.0);
        float _3172 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _632 = ((((1.0 - _623) * (_618 + 2.0)) * exp2(log2(isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))) * (_618 + 1.0))) + _623) * _586;
        float _633 = _554 * 0.5;
        float _634 = _564 * 0.5;
        float _635 = _574 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _649 = (dot(vec3(_225, _226, _227), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3183 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _658 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3194 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _3205 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * (_660 + 1.0))) + _665) * _587;
        float _675 = _555 * 0.5;
        float _676 = _565 * 0.5;
        float _677 = _575 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _691 = (dot(vec3(_225, _226, _227), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3216 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _700 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3227 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3238 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_702 + 1.0))) + _707) * _588;
        _724 = _555;
        _726 = _554;
        _727 = _553;
        _728 = _565;
        _729 = _564;
        _730 = _563;
        _731 = _575;
        _732 = _574;
        _733 = _573;
        _734 = _588;
        _735 = _587;
        _736 = _586;
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0)));
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
    }
    else
    {
        _724 = _725;
        _726 = _725;
        _727 = _725;
        _728 = _725;
        _729 = _725;
        _730 = _725;
        _731 = _725;
        _732 = _725;
        _733 = _725;
        _734 = _725;
        _735 = _725;
        _736 = _725;
        _737 = 0.0;
        _738 = 0.0;
        _739 = 0.0;
    }
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _765 = fma(_422, cbModelParam._m0[30u].z, fma(_418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _414));
        float _769 = fma(_422, cbModelParam._m0[31u].z, fma(_418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _414));
        float _773 = fma(_422, cbModelParam._m0[32u].z, fma(_418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _414));
        float _796 = _414 + _225;
        float _797 = _418 + _226;
        float _798 = _422 + _227;
        float _808 = fma(_798, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _796)) - _765;
        float _809 = fma(_798, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _796)) - _769;
        float _810 = fma(_798, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _796)) - _773;
        float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
        float _827 = ((_814 * _808) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_765 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_814 * _809) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_769 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_814 * _810) / cbModelParam._m0[35u].z) + ((((((_773 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        float _864 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_831.x + (-0.5));
        float _866 = _864 * (_831.y + (-0.5));
        float _867 = _864 * (_831.z + (-0.5));
        float _874 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_838.x + (-0.5));
        float _876 = _874 * (_838.y + (-0.5));
        float _877 = _874 * (_838.z + (-0.5));
        float _884 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_845.x + (-0.5));
        float _886 = _884 * (_845.y + (-0.5));
        float _887 = _884 * (_845.z + (-0.5));
        float _894 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_852.x + (-0.5));
        float _896 = _894 * (_852.y + (-0.5));
        float _897 = _894 * (_852.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_225, _226, _227), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3279 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3290 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3301 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * (_928 + 1.0))) + _933) * _898;
        float _943 = _866 * 0.5;
        float _944 = _876 * 0.5;
        float _945 = _886 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_225, _226, _227), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3312 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3323 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3334 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * (_970 + 1.0))) + _975) * _899;
        float _985 = _867 * 0.5;
        float _986 = _877 * 0.5;
        float _987 = _887 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_225, _226, _227), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3367 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_1012 + 1.0))) + _1017) * _900;
        _1034 = _867;
        _1035 = _866;
        _1036 = _865;
        _1037 = _877;
        _1038 = _876;
        _1039 = _875;
        _1040 = _887;
        _1041 = _886;
        _1042 = _885;
        _1043 = _900;
        _1044 = _899;
        _1045 = _898;
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _725;
        _1035 = _725;
        _1036 = _725;
        _1037 = _725;
        _1038 = _725;
        _1039 = _725;
        _1040 = _725;
        _1041 = _725;
        _1042 = _725;
        _1043 = _725;
        _1044 = _725;
        _1045 = _725;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1081 = fma(_1060, cbSceneParam._m0[89u].z, fma(_1059, cbSceneParam._m0[89u].y, _1058 * cbSceneParam._m0[89u].x));
    float _1084 = fma(_1060, cbSceneParam._m0[90u].z, fma(_1059, cbSceneParam._m0[90u].y, _1058 * cbSceneParam._m0[90u].x));
    float _1087 = fma(_1060, cbSceneParam._m0[91u].z, fma(_1059, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1058));
    float _1102 = _390 * 0.5;
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1108 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1111 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1145;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1118 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_724, _728, _731, _734));
        float _1122 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_726, _729, _732, _735));
        float _1126 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_727, _730, _733, _736));
        float _1133 = dot(vec4(cbModelParam._m0[39u]), vec4(_1102, _1103, _1104, 1.0));
        _1145 = dot(vec3(isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1133) ? 0.0 : (isnan(0.0) ? _1133 : max(0.0, _1133))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1145 = 1.0;
    }
    float _1156;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1147 = dot(vec4(cbModelParam._m0[40u]), vec4(_1102, _1103, _1104, 1.0));
        _1156 = dot(vec3(isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1147) ? 0.0 : (isnan(0.0) ? _1147 : max(0.0, _1147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1156 = 1.0;
    }
    float _1160 = (_1156 * cbModelParam._m0[1u].x) + (_1145 * (1.0 - cbModelParam._m0[1u].x));
    float _1169 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1251;
    float _1253;
    float _1255;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1218 = fma(_422, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _414)) + cbModelParam._m0[13u].w;
        float _1222 = fma(_422, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _414)) + cbModelParam._m0[14u].w;
        float _1226 = fma(_422, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _414)) + cbModelParam._m0[15u].w;
        float _1229 = fma(_392, cbModelParam._m0[13u].z, fma(_391, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _390));
        float _1232 = fma(_392, cbModelParam._m0[14u].z, fma(_391, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _390));
        float _1235 = fma(_392, cbModelParam._m0[15u].z, fma(_391, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _390));
        float _1261;
        if (_1229 > 0.0)
        {
            _1261 = abs((1.0 - _1218) / _1229);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1218 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1261 = frontier_phi_16_14_ladder;
        }
        float _1443;
        if (_1232 > 0.0)
        {
            _1443 = abs((1.0 - _1222) / _1232);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1222 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1443 = frontier_phi_25_21_ladder;
        }
        float _1517;
        if (_1235 > 0.0)
        {
            _1517 = abs((1.0 - _1226) / _1235);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1226 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1517 = frontier_phi_36_32_ladder;
        }
        float _1519 = isnan(_1443) ? _1261 : (isnan(_1261) ? _1443 : min(_1261, _1443));
        float _1520 = isnan(_1517) ? _1519 : (isnan(_1519) ? _1517 : min(_1519, _1517));
        float _1524 = (_1520 * _1229) + _1218;
        float _1525 = (_1520 * _1232) + _1222;
        float _1526 = (_1520 * _1235) + _1226;
        float _1527 = _1520 * 9.9999997473787516355514526367188e-05;
        float _1529 = (-1.0) - _1527;
        float _1531 = _1527 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_1526 > _1531) || ((_1526 < _1529) || ((_1525 > _1531) || ((_1525 < _1529) || ((_1524 < _1529) || (_1524 > _1531))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1526, cbModelParam._m0[9u].z, fma(_1525, cbModelParam._m0[9u].y, _1524 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1526, cbModelParam._m0[10u].z, fma(_1525, cbModelParam._m0[10u].y, _1524 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1526, cbModelParam._m0[11u].z, fma(_1525, cbModelParam._m0[11u].y, _1524 * cbModelParam._m0[11u].x))), _1169);
            frontier_phi_15_36_ladder = _1602.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _1602.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _1602.x * cbModelParam._m0[1u].y;
        }
        _1251 = frontier_phi_15_36_ladder_2;
        _1253 = frontier_phi_15_36_ladder_1;
        _1255 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_390, _391, _392), _1169);
        _1251 = _1239.x * cbModelParam._m0[1u].y;
        _1253 = _1239.y * cbModelParam._m0[1u].y;
        _1255 = _1239.z * cbModelParam._m0[1u].y;
    }
    float _1258 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1315 = fma(_422, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _414)) + cbModelParam._m0[21u].w;
        float _1319 = fma(_422, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _414)) + cbModelParam._m0[22u].w;
        float _1323 = fma(_422, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _414)) + cbModelParam._m0[23u].w;
        float _1326 = fma(_392, cbModelParam._m0[21u].z, fma(_391, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _390));
        float _1329 = fma(_392, cbModelParam._m0[22u].z, fma(_391, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _390));
        float _1332 = fma(_392, cbModelParam._m0[23u].z, fma(_391, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _390));
        float _1448;
        if (_1326 > 0.0)
        {
            _1448 = abs((1.0 - _1315) / _1326);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1315 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1448 = frontier_phi_27_23_ladder;
        }
        float _1544;
        if (_1329 > 0.0)
        {
            _1544 = abs((1.0 - _1319) / _1329);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1319 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1544 = frontier_phi_38_34_ladder;
        }
        float _1758;
        if (_1332 > 0.0)
        {
            _1758 = abs((1.0 - _1323) / _1332);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1323 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _1758 = frontier_phi_47_44_ladder;
        }
        float _1760 = isnan(_1544) ? _1448 : (isnan(_1448) ? _1544 : min(_1448, _1544));
        float _1761 = isnan(_1758) ? _1760 : (isnan(_1760) ? _1758 : min(_1760, _1758));
        float _1765 = (_1761 * _1326) + _1315;
        float _1766 = (_1761 * _1329) + _1319;
        float _1767 = (_1761 * _1332) + _1323;
        float _1768 = _1761 * 9.9999997473787516355514526367188e-05;
        float _1769 = (-1.0) - _1768;
        float _1771 = _1768 + 1.0;
        float frontier_phi_24_47_ladder;
        float frontier_phi_24_47_ladder_1;
        float frontier_phi_24_47_ladder_2;
        if ((_1767 > _1771) || ((_1767 < _1769) || ((_1766 > _1771) || ((_1766 < _1769) || ((_1765 < _1769) || (_1765 > _1771))))))
        {
            frontier_phi_24_47_ladder = 0.0;
            frontier_phi_24_47_ladder_1 = 0.0;
            frontier_phi_24_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1767, cbModelParam._m0[17u].z, fma(_1766, cbModelParam._m0[17u].y, _1765 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1767, cbModelParam._m0[18u].z, fma(_1766, cbModelParam._m0[18u].y, _1765 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1767, cbModelParam._m0[19u].z, fma(_1766, cbModelParam._m0[19u].y, _1765 * cbModelParam._m0[19u].x))), _1258);
            frontier_phi_24_47_ladder = _1858.z * cbModelParam._m0[1u].z;
            frontier_phi_24_47_ladder_1 = _1858.y * cbModelParam._m0[1u].z;
            frontier_phi_24_47_ladder_2 = _1858.x * cbModelParam._m0[1u].z;
        }
        _1351 = frontier_phi_24_47_ladder_2;
        _1353 = frontier_phi_24_47_ladder_1;
        _1355 = frontier_phi_24_47_ladder;
    }
    else
    {
        vec4 _1335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_390, _391, _392), _1258);
        _1351 = _1335.x * cbModelParam._m0[1u].z;
        _1353 = _1335.y * cbModelParam._m0[1u].z;
        _1355 = _1335.z * cbModelParam._m0[1u].z;
    }
    float _1367 = _381 * 0.01200000010430812835693359375;
    float _1369 = _1367 * ((cbModelParam._m0[1u].w * (_1351 - _1251)) + _1251);
    float _1370 = _1367 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1371 = _1367 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1374 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, _1369 * cbSceneParam._m0[91u].x));
    uvec4 _1390 = floatBitsToUint(cbInstanceData._m0[_355 + 5u]);
    uint _1392 = _1390.x * 14u;
    uint _1393 = _1392 + 13u;
    float _1400 = _381 + (-1.0);
    float _1406 = (cbLight._m0[_1393].x * _1400) + 1.0;
    float _1407 = (cbLight._m0[_1393].y * _1400) + 1.0;
    float _1408 = (cbLight._m0[_1393].z * _1400) + 1.0;
    float _1409 = (cbLight._m0[_1393].w * _1400) + 1.0;
    uint _1411 = _1392 + 4u;
    float _1423 = dot(vec3(cbLight._m0[_1392].xyz), vec3(_225, _226, _227));
    float _1426 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
    uint _1427 = _1392 + 5u;
    float _1439 = dot(vec3(cbLight._m0[_1392 | 1u].xyz), vec3(_225, _226, _227));
    float _1442 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
    float _1507;
    float _1508;
    float _1509;
    if (_228 == 0.0)
    {
        float _3503 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _3514 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1461 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.3183098733425140380859375;
        float _1463 = (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.3183098733425140380859375;
        _1507 = ((cbLight._m0[_1427].x * _1442) * _1463) + ((cbLight._m0[_1411].x * _1426) * _1461);
        _1508 = ((_1442 * cbLight._m0[_1427].y) * _1463) + ((_1426 * cbLight._m0[_1411].y) * _1461);
        _1509 = ((_1442 * cbLight._m0[_1427].z) * _1463) + ((_1426 * cbLight._m0[_1411].z) * _1461);
    }
    else
    {
        float _1473 = _1423 + _228;
        float _1476 = (_228 * 2.0) + 1.0;
        float _1477 = (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) / _1476;
        float _1484 = _1439 + _228;
        float _1486 = (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) / _1476;
        _1507 = (((_1486 * cbLight._m0[_1427].x) * _1442) + ((_1477 * cbLight._m0[_1411].x) * _1426)) * 0.3183098733425140380859375;
        _1508 = (((_1486 * cbLight._m0[_1427].y) * _1442) + ((_1477 * cbLight._m0[_1411].y) * _1426)) * 0.3183098733425140380859375;
        _1509 = (((_1486 * cbLight._m0[_1427].z) * _1442) + ((_1477 * cbLight._m0[_1411].z) * _1426)) * 0.3183098733425140380859375;
    }
    uvec4 _1514 = floatBitsToUint(cbLight._m0[_1392 + 12u]);
    bool _1516 = _1514.x == 0u;
    float _1549;
    float _1551;
    float _1553;
    if (_1516)
    {
        _1549 = _1507;
        _1551 = _1508;
        _1553 = _1509;
    }
    else
    {
        uint _1557 = _1392 + 6u;
        float _1573 = (dot(vec3(cbLight._m0[_1392 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1574 = _1573 * _1573;
        float _3535 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1576 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1549 = (((cbLight._m0[_1557].x * 0.3183098733425140380859375) * _1575) * _1576) + _1507;
        _1551 = (((cbLight._m0[_1557].y * 0.3183098733425140380859375) * _1575) * _1576) + _1508;
        _1553 = (((cbLight._m0[_1557].z * 0.3183098733425140380859375) * _1575) * _1576) + _1509;
    }
    bool _1556 = _1514.y == 0u;
    float _1611;
    float _1613;
    float _1615;
    if (_1556)
    {
        _1611 = _1549;
        _1613 = _1551;
        _1615 = _1553;
    }
    else
    {
        uint _1729 = _1392 + 7u;
        float _1745 = (dot(vec3(cbLight._m0[_1392 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3551 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1748 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
        _1611 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1549;
        _1613 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1551;
        _1615 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1553;
    }
    uint _1617 = _1392 + 8u;
    float _1628 = cbLight._m0[_1392].x + _306;
    float _1629 = cbLight._m0[_1392].y + _307;
    float _1630 = cbLight._m0[_1392].z + _308;
    float _1634 = inversesqrt(dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630)));
    float _1638 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1392].xyz));
    float _3567 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1641 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _1642 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1392].xyz), vec3(_1628 * _1634, _1629 * _1634, _1630 * _1634));
    float _3589 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1654 = (exp2(log2(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1641 + 9.9999999392252902907785028219223e-09) + _1642)) * _1641;
    float _3600 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.31831014156341552734375;
    float _1664 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
    uint _1674 = _1392 + 9u;
    uint _1680 = _1392 | 1u;
    float _1686 = cbLight._m0[_1680].x + _306;
    float _1687 = cbLight._m0[_1680].y + _307;
    float _1688 = cbLight._m0[_1680].z + _308;
    float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
    float _1696 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1680].xyz));
    float _3616 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _1700 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1686 * _1692, _1687 * _1692, _1688 * _1692));
    float _3627 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1709 = (exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1713 = (0.5 / ((_1699 + 9.9999999392252902907785028219223e-09) + _1642)) * _1699;
    float _3638 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1715 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.31831014156341552734375;
    float _1716 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
    float _1726 = (((_1709 * cbLight._m0[_1674].x) * _1715) * _1716) + (((_1654 * cbLight._m0[_1617].x) * _1662) * _1664);
    float _1727 = (((_1709 * cbLight._m0[_1674].y) * _1715) * _1716) + (((_1654 * cbLight._m0[_1617].y) * _1662) * _1664);
    float _1728 = (((_1709 * cbLight._m0[_1674].z) * _1715) * _1716) + (((_1654 * cbLight._m0[_1617].z) * _1662) * _1664);
    float _1784;
    float _1786;
    float _1788;
    if (_1516)
    {
        _1784 = _1726;
        _1786 = _1727;
        _1788 = _1728;
    }
    else
    {
        uint _1790 = _1392 + 10u;
        uint _1796 = _1392 + 2u;
        float _1802 = cbLight._m0[_1796].x + _306;
        float _1803 = cbLight._m0[_1796].y + _307;
        float _1804 = cbLight._m0[_1796].z + _308;
        float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
        float _1812 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1796].xyz));
        float _3654 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1815 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1816 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1802 * _1808, _1803 * _1808, _1804 * _1808));
        float _3665 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = (exp2(log2(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1829 = (0.5 / ((_1815 + 9.9999999392252902907785028219223e-09) + _1642)) * _1815;
        float _3676 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1831 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.31831014156341552734375;
        float _1832 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1784 = (((_1825 * cbLight._m0[_1790].x) * _1831) * _1832) + _1726;
        _1786 = (((_1825 * cbLight._m0[_1790].y) * _1831) * _1832) + _1727;
        _1788 = (((_1825 * cbLight._m0[_1790].z) * _1831) * _1832) + _1728;
    }
    float _1863;
    float _1865;
    float _1867;
    if (_1556)
    {
        _1863 = _1784;
        _1865 = _1786;
        _1867 = _1788;
    }
    else
    {
        uint _1874 = _1392 + 11u;
        uint _1880 = _1392 + 3u;
        float _1886 = cbLight._m0[_1880].x + _306;
        float _1887 = cbLight._m0[_1880].y + _307;
        float _1888 = cbLight._m0[_1880].z + _308;
        float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
        float _1896 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1880].xyz));
        float _3692 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1900 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_1886 * _1892, _1887 * _1892, _1888 * _1892));
        float _3703 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1913 = (0.5 / ((_1899 + 9.9999999392252902907785028219223e-09) + _1642)) * _1899;
        float _3714 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1915 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.31831014156341552734375;
        float _1916 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
        _1863 = (((_1909 * cbLight._m0[_1874].x) * _1915) * _1916) + _1784;
        _1865 = (((_1909 * cbLight._m0[_1874].y) * _1915) * _1916) + _1786;
        _1867 = (((_1909 * cbLight._m0[_1874].z) * _1915) * _1916) + _1788;
    }
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    if (_1390.y == 0u)
    {
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1965;
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1965;
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1965;
        uvec4 _1980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1981 = _1980.x;
        uint _1992 = uint((float(_1980.y) * floor(float(uint(cbSceneParam._m0[85u].y * _315) / _1981))) + floor(float(uint(cbSceneParam._m0[85u].x * _314) / _1981)));
        float _2002 = (log2(_1968 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2003 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        uint _2006 = uint(isnan(14.0) ? _2003 : (isnan(_2003) ? 14.0 : min(_2003, 14.0)));
        uvec4 _2011 = texelFetch(g_lightClusterGridBuffer, int(((_2006 << 2u) + (_1992 << 6u)) >> 2u));
        uint _2012 = _2011.x;
        uint _2013 = _1980.z;
        float _2037;
        float _2039;
        float _2041;
        float _2043;
        float _2045;
        float _2047;
        if (((((1u << ((_2013 >> 4u) & 15u)) + 4294967295u) & _2012) == 0u) || ((_2013 & 240u) == 0u))
        {
            _2037 = 0.0;
            _2039 = 0.0;
            _2041 = 0.0;
            _2043 = 0.0;
            _2045 = 0.0;
            _2047 = 0.0;
        }
        else
        {
            float _2038;
            float _2040;
            float _2042;
            float _2044;
            float _2046;
            float _2048;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            float _2223 = 0.0;
            uint _2224 = 0u;
            uint _2233;
            bool _2234;
            for (;;)
            {
                _2233 = texelFetch(g_lightClassification, int((((_2006 << 5u) + (_1992 << 9u)) + (_2224 << 2u)) >> 2u)).x;
                _2234 = _2233 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2234)
                {
                    frontier_phi_66_pred = _2218;
                    frontier_phi_66_pred_1 = _2223;
                    frontier_phi_66_pred_2 = _2222;
                    frontier_phi_66_pred_3 = _2221;
                    frontier_phi_66_pred_4 = _2220;
                    frontier_phi_66_pred_5 = _2219;
                }
                else
                {
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    uint _2402;
                    _2396 = _2218;
                    _2397 = _2219;
                    _2398 = _2220;
                    _2399 = _2221;
                    _2400 = _2222;
                    _2401 = _2223;
                    _2402 = _2233;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    for (;;)
                    {
                        uint _2406 = uint(findLSB(_2402)) + (_2224 << 5u);
                        uint _2403 = (_2402 + 4294967295u) & _2402;
                        uint _2408 = _2406 * 48u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 3u)).x));
                        uint _2428 = (_2406 * 48u) + 4u;
                        vec4 _2441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 3u)).x));
                        float _2442 = _2441.x;
                        float _2443 = _2441.y;
                        float _2444 = _2441.z;
                        uint _2447 = (_2406 * 48u) + 8u;
                        vec3 _2458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2447)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 2u)).x));
                        uint _2463 = (_2406 * 48u) + 12u;
                        vec2 _2471 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2463)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 1u)).x));
                        float _2477 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
                        float _2478 = _2477 * _1966;
                        float _2479 = _2477 * _1967;
                        float _2480 = _2477 * _1968;
                        float _2481 = _2422.x - _1966;
                        float _2482 = _2422.y - _1967;
                        float _2483 = _2422.z - _1968;
                        float _2484 = dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483));
                        float _2487 = inversesqrt(_2484);
                        float _2488 = _2487 * _2481;
                        float _2489 = _2487 * _2482;
                        float _2490 = _2487 * _2483;
                        float _2496 = 1.0 - (_2484 * _2422.w);
                        float _3740 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2497 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                        float _2498 = sqrt(_2484) * _2441.w;
                        float _2501 = 1.39999997615814208984375 / (_2498 + 1.39999997615814208984375);
                        float _2502 = _2501 * _2501;
                        float _2503 = 1.0 - _2502;
                        float _2505 = (_2503 * _2503) * _228;
                        float _2507 = (_2503 * dot(vec3(_336, _339, _342), vec3(_2488, _2489, _2490))) + _2502;
                        float _2508 = _2507 + _2505;
                        float _2513 = _2498 * _2498;
                        float _2518 = ((isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))) * _2497) / (((_2505 * 2.0) + 1.0) * ((_2513 * 0.699999988079071044921875) + 1.0));
                        float _2522 = dot(vec3(_2488, _2489, _2490), vec3(_2478, _2479, _2480));
                        float _3756 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2529 = dot(vec3((-0.0) - _2478, (-0.0) - _2479, (-0.0) - _2480), vec3(_336, _339, _342)) + 1.0;
                        float _2531 = (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0))) * 0.5;
                        float _2538 = ((_2531 * _2531) * _2471.x) * exp2((_2471.y * 32.0) * log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))));
                        float _2540 = _228 / (_228 + 1.0);
                        float _2556 = (-0.0) - _1966;
                        float _2557 = (-0.0) - _1967;
                        float _2558 = (-0.0) - _1968;
                        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
                        float _2566 = dot(vec3(_336, _339, _342), vec3(_2562 * _2556, _2562 * _2557, _2562 * _2558));
                        float _3772 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _3783 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2570 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                        float _2574 = (0.5 / (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2570)) * _2570;
                        float _3794 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                        float _2583 = (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 3.1415927410125732421875) / ((_2513 * 2.1991131305694580078125) + 3.141590118408203125)) * _2497;
                        _2330 = (((((_2442 * 0.3183098733425140380859375) * _2540) * _2538) + _2442) * _2518) + _2399;
                        _2331 = (((((_2443 * 0.3183098733425140380859375) * _2540) * _2538) + _2443) * _2518) + _2400;
                        _2332 = (((((_2444 * 0.3183098733425140380859375) * _2540) * _2538) + _2444) * _2518) + _2401;
                        _2327 = (_2583 * _2458.x) + _2396;
                        _2328 = (_2583 * _2458.y) + _2397;
                        _2329 = (_2583 * _2458.z) + _2398;
                        if (_2403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2396 = _2327;
                            _2397 = _2328;
                            _2398 = _2329;
                            _2399 = _2330;
                            _2400 = _2331;
                            _2401 = _2332;
                            _2402 = _2403;
                        }
                    }
                    frontier_phi_66_pred = _2327;
                    frontier_phi_66_pred_1 = _2332;
                    frontier_phi_66_pred_2 = _2331;
                    frontier_phi_66_pred_3 = _2330;
                    frontier_phi_66_pred_4 = _2329;
                    frontier_phi_66_pred_5 = _2328;
                }
                _2038 = frontier_phi_66_pred;
                _2048 = frontier_phi_66_pred_1;
                _2046 = frontier_phi_66_pred_2;
                _2044 = frontier_phi_66_pred_3;
                _2042 = frontier_phi_66_pred_4;
                _2040 = frontier_phi_66_pred_5;
                uint _2225 = _2224 + 1u;
                if (_2225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2218 = _2038;
                    _2219 = _2040;
                    _2220 = _2042;
                    _2221 = _2044;
                    _2222 = _2046;
                    _2223 = _2048;
                    _2224 = _2225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2037 = _2038;
            _2039 = _2040;
            _2041 = _2042;
            _2043 = _2044;
            _2045 = _2046;
            _2047 = _2048;
        }
        uvec4 _2051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2052 = _2051.z;
        uint _2054 = (_2052 >> 8u) & 15u;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        if (((4294967295u << _2054) & _2012) == 0u)
        {
            _2186 = _2037;
            _2188 = _2039;
            _2190 = _2041;
            _2192 = _2043;
            _2194 = _2045;
            _2196 = _2047;
        }
        else
        {
            float _2211 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
            float _2212 = _2211 * _1966;
            float _2213 = _2211 * _1967;
            float _2214 = _2211 * _1968;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2054 < ((_2052 >> 12u) & 15u))
            {
                float _2187;
                float _2189;
                float _2191;
                float _2193;
                float _2195;
                float _2197;
                float _2379 = _2037;
                float _2380 = _2039;
                float _2381 = _2041;
                float _2382 = _2043;
                float _2383 = _2045;
                float _2384 = _2047;
                uint _2385 = _2054;
                uint _2394;
                bool _2395;
                for (;;)
                {
                    _2394 = texelFetch(g_lightClassification, int((((_2006 << 5u) + (_1992 << 9u)) + (_2385 << 2u)) >> 2u)).x;
                    _2395 = _2394 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2395)
                    {
                        frontier_phi_74_pred = _2384;
                        frontier_phi_74_pred_1 = _2383;
                        frontier_phi_74_pred_2 = _2382;
                        frontier_phi_74_pred_3 = _2381;
                        frontier_phi_74_pred_4 = _2380;
                        frontier_phi_74_pred_5 = _2379;
                    }
                    else
                    {
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2639 = _2379;
                        float _2640 = _2380;
                        float _2641 = _2381;
                        float _2642 = _2382;
                        float _2643 = _2383;
                        float _2644 = _2384;
                        uint _2645 = _2394;
                        uint _2646;
                        vec4 _2671;
                        float _2672;
                        vec4 _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        vec3 _2702;
                        vec2 _2711;
                        vec4 _2727;
                        vec4 _2743;
                        float _2790;
                        bool _2791;
                        for (;;)
                        {
                            uint _2656 = ((_2385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2645));
                            _2646 = (_2645 + 4294967295u) & _2645;
                            uint _2658 = _2656 * 40u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            _2672 = _2671.w;
                            uint _2674 = (_2656 * 40u) + 4u;
                            _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            _2688 = _2687.x;
                            _2689 = _2687.y;
                            _2690 = _2687.z;
                            uint _2692 = (_2656 * 40u) + 8u;
                            _2702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x));
                            uint _2704 = (_2656 * 40u) + 12u;
                            _2711 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x));
                            uint _2714 = (_2656 * 40u) + 16u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2730 = (_2656 * 40u) + 20u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2746 = (_2656 * 40u) + 24u;
                            vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2765 = (_2656 * 40u) + 28u;
                            vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            _2790 = fma(_1968, _2778.z, fma(_1967, _2778.y, _2778.x * _1966)) + _2778.w;
                            _2791 = !((fma(_1968, _2759.z, fma(_1967, _2759.y, _2759.x * _1966)) + _2759.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2791)
                            {
                                float _2817 = _2671.x - _1966;
                                float _2818 = _2671.y - _1967;
                                float _2819 = _2671.z - _1968;
                                float _2820 = dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819));
                                float _2823 = inversesqrt(_2820);
                                float _2824 = _2823 * _2817;
                                float _2825 = _2823 * _2818;
                                float _2826 = _2823 * _2819;
                                float _2830 = 1.0 - (_2820 / (_2672 * _2672));
                                float _3805 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                                float _2831 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2835 = sqrt(_2820) * _2687.w;
                                float _2837 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                                float _2838 = _2837 * _2837;
                                float _2839 = 1.0 - _2838;
                                float _2841 = (_2839 * _2839) * _228;
                                float _2844 = ((_2839 * dot(vec3(_2824, _2825, _2826), vec3(_336, _339, _342))) + _2838) + _2841;
                                float _2849 = _2835 * _2835;
                                float _2854 = (fma(_1968, _2727.z, fma(_1967, _2727.y, _2727.x * _1966)) + _2727.w) / _2790;
                                float _2855 = (fma(_1968, _2743.z, fma(_1967, _2743.y, _2743.x * _1966)) + _2743.w) / _2790;
                                float _2859 = 1.0 - dot(vec2(_2854, _2855), vec2(_2854, _2855));
                                float _3821 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                                float _2861 = _2860 * (((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2831) / (((_2841 * 2.0) + 1.0) * ((_2849 * 0.699999988079071044921875) + 1.0)));
                                float _2862 = (-0.0) - _2212;
                                float _2863 = (-0.0) - _2213;
                                float _2864 = (-0.0) - _2214;
                                float _2865 = dot(vec3(_2824, _2825, _2826), vec3(_2212, _2213, _2214));
                                float _3832 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                                float _2872 = dot(vec3(_2862, _2863, _2864), vec3(_336, _339, _342)) + 1.0;
                                float _2874 = (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * 0.5;
                                float _2881 = ((_2874 * _2874) * _2711.x) * exp2((_2711.y * 32.0) * log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
                                float _2883 = _228 / (_228 + 1.0);
                                float _2899 = dot(vec3(_336, _339, _342), vec3(_2862, _2863, _2864));
                                float _3848 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                                float _2907 = (_2839 * dot(vec3(_336, _339, _342), vec3(_2824, _2825, _2826))) + _2838;
                                float _3859 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2908 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
                                float _2912 = (0.5 / (((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) + 9.9999999392252902907785028219223e-09) + _2908)) * _2908;
                                float _3870 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2919 = (_2860 * _2831) * (((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 3.1415927410125732421875) / ((_2849 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = ((((_2690 * 0.3183098733425140380859375) * _2883) * _2881) + _2690) * _2861;
                                frontier_phi_80_pred_1 = ((((_2689 * 0.3183098733425140380859375) * _2883) * _2881) + _2689) * _2861;
                                frontier_phi_80_pred_2 = ((((_2688 * 0.3183098733425140380859375) * _2883) * _2881) + _2688) * _2861;
                                frontier_phi_80_pred_3 = _2919 * _2702.z;
                                frontier_phi_80_pred_4 = _2919 * _2702.y;
                                frontier_phi_80_pred_5 = _2919 * _2702.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2928 = frontier_phi_80_pred;
                            _2927 = frontier_phi_80_pred_1;
                            _2926 = frontier_phi_80_pred_2;
                            _2925 = frontier_phi_80_pred_3;
                            _2924 = frontier_phi_80_pred_4;
                            _2923 = frontier_phi_80_pred_5;
                            _2629 = _2926 + _2642;
                            _2630 = _2927 + _2643;
                            _2631 = _2928 + _2644;
                            _2626 = _2923 + _2639;
                            _2627 = _2924 + _2640;
                            _2628 = _2925 + _2641;
                            if (_2646 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2646;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2631;
                        frontier_phi_74_pred_1 = _2630;
                        frontier_phi_74_pred_2 = _2629;
                        frontier_phi_74_pred_3 = _2628;
                        frontier_phi_74_pred_4 = _2627;
                        frontier_phi_74_pred_5 = _2626;
                    }
                    _2197 = frontier_phi_74_pred;
                    _2195 = frontier_phi_74_pred_1;
                    _2193 = frontier_phi_74_pred_2;
                    _2191 = frontier_phi_74_pred_3;
                    _2189 = frontier_phi_74_pred_4;
                    _2187 = frontier_phi_74_pred_5;
                    uint _2386 = _2385 + 1u;
                    if (_2386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2379 = _2187;
                        _2380 = _2189;
                        _2381 = _2191;
                        _2382 = _2193;
                        _2383 = _2195;
                        _2384 = _2197;
                        _2385 = _2386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2191;
                frontier_phi_60_61_ladder_1 = _2197;
                frontier_phi_60_61_ladder_2 = _2195;
                frontier_phi_60_61_ladder_3 = _2193;
                frontier_phi_60_61_ladder_4 = _2189;
                frontier_phi_60_61_ladder_5 = _2187;
            }
            else
            {
                frontier_phi_60_61_ladder = _2041;
                frontier_phi_60_61_ladder_1 = _2047;
                frontier_phi_60_61_ladder_2 = _2045;
                frontier_phi_60_61_ladder_3 = _2043;
                frontier_phi_60_61_ladder_4 = _2039;
                frontier_phi_60_61_ladder_5 = _2037;
            }
            _2186 = frontier_phi_60_61_ladder_5;
            _2188 = frontier_phi_60_61_ladder_4;
            _2190 = frontier_phi_60_61_ladder;
            _2192 = frontier_phi_60_61_ladder_3;
            _2194 = frontier_phi_60_61_ladder_2;
            _2196 = frontier_phi_60_61_ladder_1;
        }
        float _2201 = isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0));
        _2024 = (_2201 * _2192) + _1611;
        _2026 = (_2201 * _2194) + _1613;
        _2028 = (_2201 * _2196) + _1615;
        _2030 = ((_2186 * 0.039999999105930328369140625) * _2201) + _1863;
        _2032 = ((_2188 * 0.039999999105930328369140625) * _2201) + _1865;
        _2034 = ((_2190 * 0.039999999105930328369140625) * _2201) + _1867;
    }
    else
    {
        _2024 = _1611;
        _2026 = _1613;
        _2028 = _1615;
        _2030 = _1863;
        _2032 = _1865;
        _2034 = _1867;
    }
    float _2125;
    float _2126;
    float _2127;
    if (_228 > 0.0)
    {
        uint _2058 = _1392 + 4u;
        float _2064 = (-0.0) - _306;
        float _2065 = (-0.0) - _307;
        float _2066 = (-0.0) - _308;
        float _2067 = dot(vec3(cbLight._m0[_1392].xyz), vec3(_2064, _2065, _2066));
        float _3886 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = dot(vec3(_306, _307, _308), vec3(_225, _226, _227)) + 1.0;
        float _2076 = (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * 0.5;
        float _2081 = _2076 * _2076;
        float _2082 = _2081 * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 32.0);
        float _2084 = _228 / (_228 + 1.0);
        float _2085 = isnan(_1406) ? 1.0 : (isnan(1.0) ? _1406 : min(1.0, _1406));
        uint _2095 = _1392 + 5u;
        float _2101 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_2064, _2065, _2066));
        float _3907 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2108 = _2081 * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 32.0);
        float _2109 = isnan(_1407) ? 1.0 : (isnan(1.0) ? _1407 : min(1.0, _1407));
        _2125 = ((((_2108 * cbLight._m0[_2095].x) * _2084) * _2109) + (((_2082 * cbLight._m0[_2058].x) * _2084) * _2085)) * 0.3183098733425140380859375;
        _2126 = ((((_2108 * cbLight._m0[_2095].y) * _2084) * _2109) + (((_2082 * cbLight._m0[_2058].y) * _2084) * _2085)) * 0.3183098733425140380859375;
        _2127 = ((((_2108 * cbLight._m0[_2095].z) * _2084) * _2109) + (((_2082 * cbLight._m0[_2058].z) * _2084) * _2085)) * 0.3183098733425140380859375;
    }
    else
    {
        _2125 = 0.0;
        _2126 = 0.0;
        _2127 = 0.0;
    }
    float _3923 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3934 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3945 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _2149 = _355 + 6u;
    float _2157 = _314 / cbSceneParam._m0[86u].x;
    float _2158 = _315 / cbSceneParam._m0[86u].y;
    vec4 _2172 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2157, _2158, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2174 = _2172.x;
    float _2175 = _2172.y;
    float _2176 = _2172.z;
    float _2177 = _2172.w;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _2239 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _2240 = _2239 / _248;
        float _2251 = _2240 * _299;
        float _2252 = _300 * _2240;
        float _2253 = (-0.0) - _2252;
        float _2254 = _2240 * _301;
        float _2256 = (cbSceneParam._m0[77u].w * _2253) / _2239;
        float _2257 = _2256 + cbSceneParam._m0[79u].w;
        float _2258 = cbSceneParam._m0[79u].w - _2252;
        float _2264 = sqrt(((_2251 * _2251) + (_2252 * _2252)) + (_2254 * _2254));
        float _2267 = (1.0 - (cbSceneParam._m0[77u].w / _2239)) * _2264;
        float _2272 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2274 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2588;
        if (abs((_2253 - _2256) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2588 = ((((_2257 > 0.0) ? exp2(_2272 * _2257) : (2.0 - exp2(_2274 * _2257))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2267;
        }
        else
        {
            float _2352 = 1.0 / cbSceneParam._m0[80u].x;
            float _2353 = isnan(_2258) ? _2257 : (isnan(_2257) ? _2258 : max(_2257, _2258));
            float _2354 = isnan(_2258) ? _2257 : (isnan(_2257) ? _2258 : min(_2257, _2258));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            float _2364 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : min(_2354, 0.0));
            _2588 = ((abs(_2264 / _2253) * cbSceneParam._m0[80u].y) * ((((_2363 - _2364) * 2.0) - ((exp2(_2272 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0)))) - exp2(_2272 * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))))) * _2352)) - ((exp2(_2274 * _2363) - exp2(_2274 * _2364)) * _2352))) + (_2267 * cbSceneParam._m0[80u].z);
        }
        vec4 _2590 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2157, _2158, 1.0), 0.0);
        float _2599 = exp2((_2588 * (-1.44269502162933349609375)) * (1.0 - _2590.w));
        float _2600 = log2(_2599);
        float _2616 = log2(_2177);
        _2276 = (exp2(_2616 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].x)) * _2590.x) / cbSceneParam._m0[78u].x)) + _2174;
        _2278 = (exp2(_2616 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].y)) * _2590.y) / cbSceneParam._m0[78u].y)) + _2175;
        _2280 = (exp2(_2616 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].z)) * _2590.z) / cbSceneParam._m0[78u].z)) + _2176;
        _2282 = _2599 * _2177;
    }
    else
    {
        _2276 = _2174;
        _2278 = _2175;
        _2280 = _2176;
        _2282 = _2177;
    }
    float _2294 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2295 = _2294 == 3.0;
    float _2297 = log2(_2282);
    float _2304 = exp2(_2297 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * ((_2024 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _381)) + _2125)) + ((_2030 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _1160)) * cbPerFrame._m0[3u].x));
    float _2305 = exp2(_2297 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * ((_2026 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _381)) + _2126)) + ((_2032 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1160)) * cbPerFrame._m0[3u].x));
    float _2306 = exp2(_2297 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * ((_2028 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _381)) + _2127)) + ((_2034 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1160)) * cbPerFrame._m0[3u].x));
    float _2315 = (_2294 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2315 * (_2295 ? _2304 : (_2304 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.y = _2315 * (_2295 ? _2305 : (_2305 + (cbSceneParam._m0[72u].w * _2278)));
    SV_Target.z = _2315 * (_2295 ? _2306 : (_2306 + (cbSceneParam._m0[72u].w * _2280)));
    SV_Target.w = cbInstanceData._m0[_2149].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2149].w;
}


