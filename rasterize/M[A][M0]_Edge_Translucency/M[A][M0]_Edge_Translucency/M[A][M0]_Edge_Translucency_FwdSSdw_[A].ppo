#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _773;
float _3194;
float _3195;
float _3196;
float _3197;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.w;
    float _206 = _199.x * cbMtdParam._m0[9u].x;
    float _207 = _199.y * cbMtdParam._m0[9u].y;
    float _208 = _199.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = cbMtdParam._m0[10u].x * _220.x;
    float _231 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _232 = _231 * _177;
    float _233 = _231 * _178;
    float _234 = _231 * _179;
    float _235 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3211 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3222 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3233 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _255 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _306 * _312;
    float _314 = _307 * _312;
    float _315 = _308 * _312;
    vec4 _320 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _322 = _320.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _452 = sqrt(((_306 * _306) + (_307 * _307)) + (_308 * _308));
        float _458 = (cbMatDynParam._m0[5u].x * _452) + cbMatDynParam._m0[5u].y;
        float _3244 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        float _459 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _463 = (cbMatDynParam._m0[5u].z * _452) + cbMatDynParam._m0[5u].w;
        float _3255 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) - _459)) + _459) < ((_322 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _355 = fma(_234, cbSceneParam._m0[5u].z, fma(_233, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _232));
    float _358 = fma(_234, cbSceneParam._m0[6u].z, fma(_233, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _232));
    float _361 = fma(_234, cbSceneParam._m0[7u].z, fma(_233, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _232));
    uint _374 = uint(roundEven(NORMAL.w)) * 13u;
    uint _376 = _374 + 9u;
    uint _377 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _383 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0)))) * cbInstanceData._m0[_377].x;
    float _384 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0)))) * cbInstanceData._m0[_377].y;
    float _385 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0)))) * cbInstanceData._m0[_377].z;
    float _3266 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _3288 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    vec4 _397 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _400 = _397.x * TEXCOORD.z;
    float _401 = dot(vec3(_232, _233, _234), vec3(_313, _314, _315));
    float _404 = _401 * 2.0;
    float _409 = (_404 * _232) - _313;
    float _410 = (_404 * _233) - _314;
    float _411 = (_404 * _234) - _315;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _501 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _505 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _530 = _433 + _232;
        float _531 = _437 + _233;
        float _532 = _441 + _234;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_232, _233, _234), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3336 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_232, _233, _234), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3369 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_232, _233, _234), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3402 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _820 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _824 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _847 = _433 + _232;
        float _848 = _437 + _233;
        float _849 = _441 + _234;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_232, _233, _234), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3465 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_232, _233, _234), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3498 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_232, _233, _234), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3531 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _773;
        _1086 = _773;
        _1087 = _773;
        _1088 = _773;
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _786)) + _786;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _409 * 0.5;
    float _1154 = _410 * 0.5;
    float _1155 = _411 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_772, _776, _779, _782));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_774, _777, _780, _783));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _778, _781, _784));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1220 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1302;
    float _1304;
    float _1306;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1269 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1273 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1277 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1280 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1283 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1286 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1312;
        if (_1280 > 0.0)
        {
            _1312 = abs((1.0 - _1269) / _1280);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1269 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1312 = frontier_phi_19_17_ladder;
        }
        float _1515;
        if (_1283 > 0.0)
        {
            _1515 = abs((1.0 - _1273) / _1283);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1273 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1515 = frontier_phi_28_24_ladder;
        }
        float _1589;
        if (_1286 > 0.0)
        {
            _1589 = abs((1.0 - _1277) / _1286);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1277 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1589 = frontier_phi_39_35_ladder;
        }
        float _1591 = isnan(_1515) ? _1312 : (isnan(_1312) ? _1515 : min(_1312, _1515));
        float _1592 = isnan(_1589) ? _1591 : (isnan(_1591) ? _1589 : min(_1591, _1589));
        float _1596 = (_1592 * _1280) + _1269;
        float _1597 = (_1592 * _1283) + _1273;
        float _1598 = (_1592 * _1286) + _1277;
        float _1599 = _1592 * 9.9999997473787516355514526367188e-05;
        float _1601 = (-1.0) - _1599;
        float _1603 = _1599 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_1598 > _1603) || ((_1598 < _1601) || ((_1597 > _1603) || ((_1597 < _1601) || ((_1596 < _1601) || (_1596 > _1603))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1598, cbModelParam._m0[9u].z, fma(_1597, cbModelParam._m0[9u].y, _1596 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1598, cbModelParam._m0[10u].z, fma(_1597, cbModelParam._m0[10u].y, _1596 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1598, cbModelParam._m0[11u].z, fma(_1597, cbModelParam._m0[11u].y, _1596 * cbModelParam._m0[11u].x))), _1220);
            frontier_phi_18_39_ladder = _1674.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _1674.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _1674.x * cbModelParam._m0[1u].y;
        }
        _1302 = frontier_phi_18_39_ladder_2;
        _1304 = frontier_phi_18_39_ladder_1;
        _1306 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1220);
        _1302 = _1290.x * cbModelParam._m0[1u].y;
        _1304 = _1290.y * cbModelParam._m0[1u].y;
        _1306 = _1290.z * cbModelParam._m0[1u].y;
    }
    float _1309 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1366 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1370 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1374 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1377 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1380 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1383 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1520;
        if (_1377 > 0.0)
        {
            _1520 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1520 = frontier_phi_30_26_ladder;
        }
        float _1616;
        if (_1380 > 0.0)
        {
            _1616 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1616 = frontier_phi_41_37_ladder;
        }
        float _1833;
        if (_1383 > 0.0)
        {
            _1833 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _1833 = frontier_phi_50_47_ladder;
        }
        float _1835 = isnan(_1616) ? _1520 : (isnan(_1520) ? _1616 : min(_1520, _1616));
        float _1836 = isnan(_1833) ? _1835 : (isnan(_1835) ? _1833 : min(_1835, _1833));
        float _1840 = (_1836 * _1377) + _1366;
        float _1841 = (_1836 * _1380) + _1370;
        float _1842 = (_1836 * _1383) + _1374;
        float _1843 = _1836 * 9.9999997473787516355514526367188e-05;
        float _1844 = (-1.0) - _1843;
        float _1846 = _1843 + 1.0;
        float frontier_phi_27_50_ladder;
        float frontier_phi_27_50_ladder_1;
        float frontier_phi_27_50_ladder_2;
        if ((_1842 > _1846) || ((_1842 < _1844) || ((_1841 > _1846) || ((_1841 < _1844) || ((_1840 < _1844) || (_1840 > _1846))))))
        {
            frontier_phi_27_50_ladder = 0.0;
            frontier_phi_27_50_ladder_1 = 0.0;
            frontier_phi_27_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1842, cbModelParam._m0[17u].z, fma(_1841, cbModelParam._m0[17u].y, _1840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1842, cbModelParam._m0[18u].z, fma(_1841, cbModelParam._m0[18u].y, _1840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1842, cbModelParam._m0[19u].z, fma(_1841, cbModelParam._m0[19u].y, _1840 * cbModelParam._m0[19u].x))), _1309);
            frontier_phi_27_50_ladder = _1933.z * cbModelParam._m0[1u].z;
            frontier_phi_27_50_ladder_1 = _1933.y * cbModelParam._m0[1u].z;
            frontier_phi_27_50_ladder_2 = _1933.x * cbModelParam._m0[1u].z;
        }
        _1402 = frontier_phi_27_50_ladder_2;
        _1404 = frontier_phi_27_50_ladder_1;
        _1406 = frontier_phi_27_50_ladder;
    }
    else
    {
        vec4 _1386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1309);
        _1402 = _1386.x * cbModelParam._m0[1u].z;
        _1404 = _1386.y * cbModelParam._m0[1u].z;
        _1406 = _1386.z * cbModelParam._m0[1u].z;
    }
    float _1418 = _400 * 0.01200000010430812835693359375;
    float _1420 = _1418 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = _1418 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1422 = _1418 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, _1420 * cbSceneParam._m0[91u].x));
    vec4 _1439 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_334, _335));
    float _1441 = _1439.w;
    float _1453 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1441);
    float _1454 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1441);
    float _1455 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1441);
    uvec4 _1459 = floatBitsToUint(cbInstanceData._m0[_374 + 5u]);
    uint _1461 = _1459.x * 14u;
    uint _1462 = _1461 + 13u;
    float _1469 = _400 + (-1.0);
    float _1475 = (cbLight._m0[_1462].x * _1469) + 1.0;
    float _1476 = (cbLight._m0[_1462].y * _1469) + 1.0;
    float _1477 = (cbLight._m0[_1462].z * _1469) + 1.0;
    float _1478 = (cbLight._m0[_1462].w * _1469) + 1.0;
    uint _1480 = _1461 + 4u;
    float _1492 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_232, _233, _234));
    float _1495 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
    float _1496 = cbLight._m0[_1480].x * _1453;
    float _1497 = cbLight._m0[_1480].y * _1454;
    float _1498 = cbLight._m0[_1480].z * _1455;
    uint _1499 = _1461 + 5u;
    float _1511 = dot(vec3(cbLight._m0[_1461 | 1u].xyz), vec3(_232, _233, _234));
    float _1514 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    float _1579;
    float _1580;
    float _1581;
    if (_235 == 0.0)
    {
        float _3667 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _3678 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1533 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.3183098733425140380859375;
        float _1535 = (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.3183098733425140380859375;
        _1579 = ((cbLight._m0[_1499].x * _1514) * _1535) + ((_1496 * _1495) * _1533);
        _1580 = ((_1514 * cbLight._m0[_1499].y) * _1535) + ((_1497 * _1495) * _1533);
        _1581 = ((_1514 * cbLight._m0[_1499].z) * _1535) + ((_1498 * _1495) * _1533);
    }
    else
    {
        float _1545 = _1492 + _235;
        float _1548 = (_235 * 2.0) + 1.0;
        float _1549 = (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) / _1548;
        float _1556 = _1511 + _235;
        float _1558 = (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) / _1548;
        _1579 = (((_1558 * cbLight._m0[_1499].x) * _1514) + ((_1496 * _1549) * _1495)) * 0.3183098733425140380859375;
        _1580 = (((_1558 * cbLight._m0[_1499].y) * _1514) + ((_1497 * _1549) * _1495)) * 0.3183098733425140380859375;
        _1581 = (((_1558 * cbLight._m0[_1499].z) * _1514) + ((_1498 * _1549) * _1495)) * 0.3183098733425140380859375;
    }
    uvec4 _1586 = floatBitsToUint(cbLight._m0[_1461 + 12u]);
    bool _1588 = _1586.x == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1588)
    {
        _1621 = _1579;
        _1623 = _1580;
        _1625 = _1581;
    }
    else
    {
        uint _1629 = _1461 + 6u;
        float _1645 = (dot(vec3(cbLight._m0[_1461 + 2u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1646 = _1645 * _1645;
        float _3699 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1648 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1621 = (((cbLight._m0[_1629].x * 0.3183098733425140380859375) * _1647) * _1648) + _1579;
        _1623 = (((cbLight._m0[_1629].y * 0.3183098733425140380859375) * _1647) * _1648) + _1580;
        _1625 = (((cbLight._m0[_1629].z * 0.3183098733425140380859375) * _1647) * _1648) + _1581;
    }
    bool _1628 = _1586.y == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1628)
    {
        _1683 = _1621;
        _1685 = _1623;
        _1687 = _1625;
    }
    else
    {
        uint _1804 = _1461 + 7u;
        float _1820 = (dot(vec3(cbLight._m0[_1461 + 3u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3715 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1823 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1683 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1621;
        _1685 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1623;
        _1687 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1625;
    }
    uint _1689 = _1461 + 8u;
    float _1700 = cbLight._m0[_1461].x + _313;
    float _1701 = cbLight._m0[_1461].y + _314;
    float _1702 = cbLight._m0[_1461].z + _315;
    float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
    float _1710 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1461].xyz));
    float _3731 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _1714 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_1700 * _1706, _1701 * _1706, _1702 * _1706));
    float _3753 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1726 = (exp2(log2(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1732 = (0.5 / ((_1713 + 9.9999999392252902907785028219223e-09) + _1714)) * _1713;
    float _3764 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1734 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.31831014156341552734375;
    float _1736 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
    uint _1749 = _1461 + 9u;
    uint _1755 = _1461 | 1u;
    float _1761 = cbLight._m0[_1755].x + _313;
    float _1762 = cbLight._m0[_1755].y + _314;
    float _1763 = cbLight._m0[_1755].z + _315;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1771 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1755].xyz));
    float _3780 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1761 * _1767, _1762 * _1767, _1763 * _1767));
    float _3791 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1784 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1788 = (0.5 / ((_1774 + 9.9999999392252902907785028219223e-09) + _1714)) * _1774;
    float _3802 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.31831014156341552734375;
    float _1791 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    float _1801 = (((_1784 * cbLight._m0[_1749].x) * _1790) * _1791) + ((((cbLight._m0[_1689].x * _1453) * _1726) * _1734) * _1736);
    float _1802 = (((_1784 * cbLight._m0[_1749].y) * _1790) * _1791) + ((((cbLight._m0[_1689].y * _1454) * _1726) * _1734) * _1736);
    float _1803 = (((_1784 * cbLight._m0[_1749].z) * _1790) * _1791) + ((((cbLight._m0[_1689].z * _1455) * _1726) * _1734) * _1736);
    float _1859;
    float _1861;
    float _1863;
    if (_1588)
    {
        _1859 = _1801;
        _1861 = _1802;
        _1863 = _1803;
    }
    else
    {
        uint _1865 = _1461 + 10u;
        uint _1871 = _1461 + 2u;
        float _1877 = cbLight._m0[_1871].x + _313;
        float _1878 = cbLight._m0[_1871].y + _314;
        float _1879 = cbLight._m0[_1871].z + _315;
        float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
        float _1887 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1871].xyz));
        float _3818 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1890 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1891 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_1877 * _1883, _1878 * _1883, _1879 * _1883));
        float _3829 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1904 = (0.5 / ((_1890 + 9.9999999392252902907785028219223e-09) + _1714)) * _1890;
        float _3840 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1906 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.31831014156341552734375;
        float _1907 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1859 = (((_1900 * cbLight._m0[_1865].x) * _1906) * _1907) + _1801;
        _1861 = (((_1900 * cbLight._m0[_1865].y) * _1906) * _1907) + _1802;
        _1863 = (((_1900 * cbLight._m0[_1865].z) * _1906) * _1907) + _1803;
    }
    float _1938;
    float _1940;
    float _1942;
    if (_1628)
    {
        _1938 = _1859;
        _1940 = _1861;
        _1942 = _1863;
    }
    else
    {
        uint _1949 = _1461 + 11u;
        uint _1955 = _1461 + 3u;
        float _1961 = cbLight._m0[_1955].x + _313;
        float _1962 = cbLight._m0[_1955].y + _314;
        float _1963 = cbLight._m0[_1955].z + _315;
        float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
        float _1971 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1955].xyz));
        float _3856 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1974 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1975 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1961 * _1967, _1962 * _1967, _1963 * _1967));
        float _3867 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1988 = (0.5 / ((_1974 + 9.9999999392252902907785028219223e-09) + _1714)) * _1974;
        float _3878 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1990 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.31831014156341552734375;
        float _1991 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1938 = (((_1984 * cbLight._m0[_1949].x) * _1990) * _1991) + _1859;
        _1940 = (((_1984 * cbLight._m0[_1949].y) * _1990) * _1991) + _1861;
        _1942 = (((_1984 * cbLight._m0[_1949].z) * _1990) * _1991) + _1863;
    }
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    if (_1459.y == 0u)
    {
        float _2040 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2041 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2040;
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2040;
        float _2043 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2040;
        uvec4 _2055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2056 = _2055.x;
        uint _2067 = uint((float(_2055.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _2056))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _2056)));
        float _2077 = (log2(_2043 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2078 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        uint _2081 = uint(isnan(14.0) ? _2078 : (isnan(_2078) ? 14.0 : min(_2078, 14.0)));
        uvec4 _2086 = texelFetch(g_lightClusterGridBuffer, int(((_2081 << 2u) + (_2067 << 6u)) >> 2u));
        uint _2087 = _2086.x;
        uint _2088 = _2055.z;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        if (((((1u << ((_2088 >> 4u) & 15u)) + 4294967295u) & _2087) == 0u) || ((_2088 & 240u) == 0u))
        {
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
            _2122 = 0.0;
        }
        else
        {
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2123;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            uint _2302 = 0u;
            uint _2311;
            bool _2312;
            for (;;)
            {
                _2311 = texelFetch(g_lightClassification, int((((_2081 << 5u) + (_2067 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                _2312 = _2311 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2312)
                {
                    frontier_phi_69_pred = _2301;
                    frontier_phi_69_pred_1 = _2300;
                    frontier_phi_69_pred_2 = _2299;
                    frontier_phi_69_pred_3 = _2298;
                    frontier_phi_69_pred_4 = _2297;
                    frontier_phi_69_pred_5 = _2296;
                }
                else
                {
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    uint _2505;
                    _2499 = _2296;
                    _2500 = _2297;
                    _2501 = _2298;
                    _2502 = _2299;
                    _2503 = _2300;
                    _2504 = _2301;
                    _2505 = _2311;
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    for (;;)
                    {
                        uint _2509 = uint(findLSB(_2505)) + (_2302 << 5u);
                        uint _2506 = (_2505 + 4294967295u) & _2505;
                        uint _2511 = _2509 * 48u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2531 = (_2509 * 48u) + 4u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        float _2545 = _2544.x;
                        float _2546 = _2544.y;
                        float _2547 = _2544.z;
                        uint _2550 = (_2509 * 48u) + 8u;
                        vec3 _2561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x));
                        uint _2566 = (_2509 * 48u) + 12u;
                        vec2 _2574 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x));
                        float _2580 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
                        float _2581 = _2580 * _2041;
                        float _2582 = _2580 * _2042;
                        float _2583 = _2580 * _2043;
                        float _2584 = _2525.x - _2041;
                        float _2585 = _2525.y - _2042;
                        float _2586 = _2525.z - _2043;
                        float _2587 = dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586));
                        float _2590 = inversesqrt(_2587);
                        float _2591 = _2590 * _2584;
                        float _2592 = _2590 * _2585;
                        float _2593 = _2590 * _2586;
                        float _2599 = 1.0 - (_2587 * _2525.w);
                        float _3904 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2600 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                        float _2601 = sqrt(_2587) * _2544.w;
                        float _2604 = 1.39999997615814208984375 / (_2601 + 1.39999997615814208984375);
                        float _2605 = _2604 * _2604;
                        float _2606 = 1.0 - _2605;
                        float _2608 = (_2606 * _2606) * _235;
                        float _2610 = (_2606 * dot(vec3(_355, _358, _361), vec3(_2591, _2592, _2593))) + _2605;
                        float _2611 = _2610 + _2608;
                        float _2616 = _2601 * _2601;
                        float _2621 = ((isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))) * _2600) / (((_2608 * 2.0) + 1.0) * ((_2616 * 0.699999988079071044921875) + 1.0));
                        float _2625 = dot(vec3(_2591, _2592, _2593), vec3(_2581, _2582, _2583));
                        float _3920 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2632 = dot(vec3((-0.0) - _2581, (-0.0) - _2582, (-0.0) - _2583), vec3(_355, _358, _361)) + 1.0;
                        float _2634 = (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))) * 0.5;
                        float _2641 = ((_2634 * _2634) * _2574.x) * exp2((_2574.y * 32.0) * log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
                        float _2643 = _235 / (_235 + 1.0);
                        float _2659 = (-0.0) - _2041;
                        float _2660 = (-0.0) - _2042;
                        float _2661 = (-0.0) - _2043;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(_355, _358, _361), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3936 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _3947 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                        float _2673 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                        float _2677 = (0.5 / (((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) + 9.9999999392252902907785028219223e-09) + _2673)) * _2673;
                        float _3958 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2686 = (((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 3.1415927410125732421875) / ((_2616 * 2.1991131305694580078125) + 3.141590118408203125)) * _2600;
                        _2417 = (((((_2545 * 0.3183098733425140380859375) * _2643) * _2641) + _2545) * _2621) + _2502;
                        _2418 = (((((_2546 * 0.3183098733425140380859375) * _2643) * _2641) + _2546) * _2621) + _2503;
                        _2419 = (((((_2547 * 0.3183098733425140380859375) * _2643) * _2641) + _2547) * _2621) + _2504;
                        _2414 = (_2686 * _2561.x) + _2499;
                        _2415 = (_2686 * _2561.y) + _2500;
                        _2416 = (_2686 * _2561.z) + _2501;
                        if (_2506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2499 = _2414;
                            _2500 = _2415;
                            _2501 = _2416;
                            _2502 = _2417;
                            _2503 = _2418;
                            _2504 = _2419;
                            _2505 = _2506;
                        }
                    }
                    frontier_phi_69_pred = _2419;
                    frontier_phi_69_pred_1 = _2418;
                    frontier_phi_69_pred_2 = _2417;
                    frontier_phi_69_pred_3 = _2416;
                    frontier_phi_69_pred_4 = _2415;
                    frontier_phi_69_pred_5 = _2414;
                }
                _2123 = frontier_phi_69_pred;
                _2121 = frontier_phi_69_pred_1;
                _2119 = frontier_phi_69_pred_2;
                _2117 = frontier_phi_69_pred_3;
                _2115 = frontier_phi_69_pred_4;
                _2113 = frontier_phi_69_pred_5;
                uint _2303 = _2302 + 1u;
                if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2296 = _2113;
                    _2297 = _2115;
                    _2298 = _2117;
                    _2299 = _2119;
                    _2300 = _2121;
                    _2301 = _2123;
                    _2302 = _2303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
            _2122 = _2123;
        }
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.z;
        uint _2129 = (_2127 >> 8u) & 15u;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        if (((4294967295u << _2129) & _2087) == 0u)
        {
            _2264 = _2112;
            _2266 = _2114;
            _2268 = _2116;
            _2270 = _2118;
            _2272 = _2120;
            _2274 = _2122;
        }
        else
        {
            float _2289 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
            float _2290 = _2289 * _2041;
            float _2291 = _2289 * _2042;
            float _2292 = _2289 * _2043;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2129 < ((_2127 >> 12u) & 15u))
            {
                float _2265;
                float _2267;
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2482 = _2112;
                float _2483 = _2114;
                float _2484 = _2116;
                float _2485 = _2118;
                float _2486 = _2120;
                float _2487 = _2122;
                uint _2488 = _2129;
                uint _2497;
                bool _2498;
                for (;;)
                {
                    _2497 = texelFetch(g_lightClassification, int((((_2081 << 5u) + (_2067 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                    _2498 = _2497 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2498)
                    {
                        frontier_phi_81_pred = _2482;
                        frontier_phi_81_pred_1 = _2484;
                        frontier_phi_81_pred_2 = _2483;
                        frontier_phi_81_pred_3 = _2487;
                        frontier_phi_81_pred_4 = _2486;
                        frontier_phi_81_pred_5 = _2485;
                    }
                    else
                    {
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2739;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _2756 = _2482;
                        float _2757 = _2483;
                        float _2758 = _2484;
                        float _2759 = _2485;
                        float _2760 = _2486;
                        float _2761 = _2487;
                        uint _2762 = _2497;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        vec3 _2819;
                        vec2 _2828;
                        vec4 _2844;
                        vec4 _2860;
                        float _2907;
                        bool _2908;
                        for (;;)
                        {
                            uint _2773 = ((_2488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2805 = _2804.x;
                            _2806 = _2804.y;
                            _2807 = _2804.z;
                            uint _2809 = (_2773 * 40u) + 8u;
                            _2819 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x));
                            uint _2821 = (_2773 * 40u) + 12u;
                            _2828 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x));
                            uint _2831 = (_2773 * 40u) + 16u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2847 = (_2773 * 40u) + 20u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2773 * 40u) + 24u;
                            vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2882 = (_2773 * 40u) + 28u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2907 = fma(_2043, _2895.z, fma(_2042, _2895.y, _2895.x * _2041)) + _2895.w;
                            _2908 = !((fma(_2043, _2876.z, fma(_2042, _2876.y, _2876.x * _2041)) + _2876.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2908)
                            {
                                float _2934 = _2788.x - _2041;
                                float _2935 = _2788.y - _2042;
                                float _2936 = _2788.z - _2043;
                                float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                                float _2940 = inversesqrt(_2937);
                                float _2941 = _2940 * _2934;
                                float _2942 = _2940 * _2935;
                                float _2943 = _2940 * _2936;
                                float _2947 = 1.0 - (_2937 / (_2789 * _2789));
                                float _3969 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2948 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _2952 = sqrt(_2937) * _2804.w;
                                float _2954 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                                float _2955 = _2954 * _2954;
                                float _2956 = 1.0 - _2955;
                                float _2958 = (_2956 * _2956) * _235;
                                float _2961 = ((_2956 * dot(vec3(_2941, _2942, _2943), vec3(_355, _358, _361))) + _2955) + _2958;
                                float _2966 = _2952 * _2952;
                                float _2971 = (fma(_2043, _2844.z, fma(_2042, _2844.y, _2844.x * _2041)) + _2844.w) / _2907;
                                float _2972 = (fma(_2043, _2860.z, fma(_2042, _2860.y, _2860.x * _2041)) + _2860.w) / _2907;
                                float _2976 = 1.0 - dot(vec2(_2971, _2972), vec2(_2971, _2972));
                                float _3985 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _2978 = _2977 * (((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2948) / (((_2958 * 2.0) + 1.0) * ((_2966 * 0.699999988079071044921875) + 1.0)));
                                float _2979 = (-0.0) - _2290;
                                float _2980 = (-0.0) - _2291;
                                float _2981 = (-0.0) - _2292;
                                float _2982 = dot(vec3(_2941, _2942, _2943), vec3(_2290, _2291, _2292));
                                float _3996 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2989 = dot(vec3(_2979, _2980, _2981), vec3(_355, _358, _361)) + 1.0;
                                float _2991 = (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * 0.5;
                                float _2998 = ((_2991 * _2991) * _2828.x) * exp2((_2828.y * 32.0) * log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))));
                                float _3000 = _235 / (_235 + 1.0);
                                float _3016 = dot(vec3(_355, _358, _361), vec3(_2979, _2980, _2981));
                                float _4012 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3024 = (_2956 * dot(vec3(_355, _358, _361), vec3(_2941, _2942, _2943))) + _2955;
                                float _4023 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3029 = (0.5 / (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) + 9.9999999392252902907785028219223e-09) + _3025)) * _3025;
                                float _4034 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3036 = (_2977 * _2948) * (((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 3.1415927410125732421875) / ((_2966 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = ((((_2807 * 0.3183098733425140380859375) * _3000) * _2998) + _2807) * _2978;
                                frontier_phi_90_pred_1 = ((((_2806 * 0.3183098733425140380859375) * _3000) * _2998) + _2806) * _2978;
                                frontier_phi_90_pred_2 = ((((_2805 * 0.3183098733425140380859375) * _3000) * _2998) + _2805) * _2978;
                                frontier_phi_90_pred_3 = _3036 * _2819.z;
                                frontier_phi_90_pred_4 = _3036 * _2819.y;
                                frontier_phi_90_pred_5 = _3036 * _2819.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3045 = frontier_phi_90_pred;
                            _3044 = frontier_phi_90_pred_1;
                            _3043 = frontier_phi_90_pred_2;
                            _3042 = frontier_phi_90_pred_3;
                            _3041 = frontier_phi_90_pred_4;
                            _3040 = frontier_phi_90_pred_5;
                            _2737 = _3043 + _2759;
                            _2738 = _3044 + _2760;
                            _2739 = _3045 + _2761;
                            _2734 = _3040 + _2756;
                            _2735 = _3041 + _2757;
                            _2736 = _3042 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2734;
                                _2757 = _2735;
                                _2758 = _2736;
                                _2759 = _2737;
                                _2760 = _2738;
                                _2761 = _2739;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2734;
                        frontier_phi_81_pred_1 = _2736;
                        frontier_phi_81_pred_2 = _2735;
                        frontier_phi_81_pred_3 = _2739;
                        frontier_phi_81_pred_4 = _2738;
                        frontier_phi_81_pred_5 = _2737;
                    }
                    _2265 = frontier_phi_81_pred;
                    _2269 = frontier_phi_81_pred_1;
                    _2267 = frontier_phi_81_pred_2;
                    _2275 = frontier_phi_81_pred_3;
                    _2273 = frontier_phi_81_pred_4;
                    _2271 = frontier_phi_81_pred_5;
                    uint _2489 = _2488 + 1u;
                    if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2482 = _2265;
                        _2483 = _2267;
                        _2484 = _2269;
                        _2485 = _2271;
                        _2486 = _2273;
                        _2487 = _2275;
                        _2488 = _2489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2267;
                frontier_phi_63_64_ladder_1 = _2275;
                frontier_phi_63_64_ladder_2 = _2273;
                frontier_phi_63_64_ladder_3 = _2271;
                frontier_phi_63_64_ladder_4 = _2269;
                frontier_phi_63_64_ladder_5 = _2265;
            }
            else
            {
                frontier_phi_63_64_ladder = _2114;
                frontier_phi_63_64_ladder_1 = _2122;
                frontier_phi_63_64_ladder_2 = _2120;
                frontier_phi_63_64_ladder_3 = _2118;
                frontier_phi_63_64_ladder_4 = _2116;
                frontier_phi_63_64_ladder_5 = _2112;
            }
            _2264 = frontier_phi_63_64_ladder_5;
            _2266 = frontier_phi_63_64_ladder;
            _2268 = frontier_phi_63_64_ladder_4;
            _2270 = frontier_phi_63_64_ladder_3;
            _2272 = frontier_phi_63_64_ladder_2;
            _2274 = frontier_phi_63_64_ladder_1;
        }
        float _2279 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
        _2099 = (_2279 * _2270) + _1683;
        _2101 = (_2279 * _2272) + _1685;
        _2103 = (_2279 * _2274) + _1687;
        _2105 = ((_2264 * 0.039999999105930328369140625) * _2279) + _1938;
        _2107 = ((_2266 * 0.039999999105930328369140625) * _2279) + _1940;
        _2109 = ((_2268 * 0.039999999105930328369140625) * _2279) + _1942;
    }
    else
    {
        _2099 = _1683;
        _2101 = _1685;
        _2103 = _1687;
        _2105 = _1938;
        _2107 = _1940;
        _2109 = _1942;
    }
    float _2203;
    float _2204;
    float _2205;
    if (_235 > 0.0)
    {
        uint _2133 = _1461 + 4u;
        float _2139 = (-0.0) - _313;
        float _2140 = (-0.0) - _314;
        float _2141 = (-0.0) - _315;
        float _2142 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_2139, _2140, _2141));
        float _4050 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2149 = dot(vec3(_313, _314, _315), vec3(_232, _233, _234)) + 1.0;
        float _2151 = (isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * 0.5;
        float _2156 = _2151 * _2151;
        float _2157 = _2156 * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 32.0);
        float _2159 = _235 / (_235 + 1.0);
        float _2160 = isnan(_1475) ? 1.0 : (isnan(1.0) ? _1475 : min(1.0, _1475));
        uint _2173 = _1461 + 5u;
        float _2179 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_2139, _2140, _2141));
        float _4071 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2186 = _2156 * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 32.0);
        float _2187 = isnan(_1476) ? 1.0 : (isnan(1.0) ? _1476 : min(1.0, _1476));
        _2203 = ((((_2186 * cbLight._m0[_2173].x) * _2159) * _2187) + ((((cbLight._m0[_2133].x * _1453) * _2157) * _2159) * _2160)) * 0.3183098733425140380859375;
        _2204 = ((((_2186 * cbLight._m0[_2173].y) * _2159) * _2187) + ((((cbLight._m0[_2133].y * _1454) * _2157) * _2159) * _2160)) * 0.3183098733425140380859375;
        _2205 = ((((_2186 * cbLight._m0[_2173].z) * _2159) * _2187) + ((((cbLight._m0[_2133].z * _1455) * _2157) * _2159) * _2160)) * 0.3183098733425140380859375;
    }
    else
    {
        _2203 = 0.0;
        _2204 = 0.0;
        _2205 = 0.0;
    }
    float _4087 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _4098 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _4109 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _2224 = ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * ((_2099 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _400)) + _2203)) + ((_2105 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2225 = ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * ((_2101 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _400)) + _2204)) + ((_2107 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2226 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * ((_2103 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _400)) + _2205)) + ((_2109 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    uint _2227 = _374 + 6u;
    float _2235 = _334 / cbSceneParam._m0[86u].x;
    float _2236 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2250 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2235, _2236, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2252 = _2250.x;
    float _2253 = _2250.y;
    float _2254 = _2250.z;
    float _2255 = _2250.w;
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2317 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2318 = _2317 / _255;
        float _2329 = _2318 * _306;
        float _2330 = _307 * _2318;
        float _2331 = (-0.0) - _2330;
        float _2332 = _2318 * _308;
        float _2334 = (cbSceneParam._m0[77u].w * _2331) / _2317;
        float _2335 = _2334 + cbSceneParam._m0[79u].w;
        float _2336 = cbSceneParam._m0[79u].w - _2330;
        float _2342 = sqrt(((_2329 * _2329) + (_2330 * _2330)) + (_2332 * _2332));
        float _2345 = (1.0 - (cbSceneParam._m0[77u].w / _2317)) * _2342;
        float _2350 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2352 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2691;
        if (abs((_2331 - _2334) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2691 = ((((_2335 > 0.0) ? exp2(_2350 * _2335) : (2.0 - exp2(_2352 * _2335))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2345;
        }
        else
        {
            float _2439 = 1.0 / cbSceneParam._m0[80u].x;
            float _2440 = isnan(_2336) ? _2335 : (isnan(_2335) ? _2336 : max(_2335, _2336));
            float _2441 = isnan(_2336) ? _2335 : (isnan(_2335) ? _2336 : min(_2335, _2336));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            float _2451 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : min(_2441, 0.0));
            _2691 = ((abs(_2342 / _2331) * cbSceneParam._m0[80u].y) * ((((_2450 - _2451) * 2.0) - ((exp2(_2350 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0)))) - exp2(_2350 * (isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0))))) * _2439)) - ((exp2(_2352 * _2450) - exp2(_2352 * _2451)) * _2439))) + (_2345 * cbSceneParam._m0[80u].z);
        }
        vec4 _2693 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2235, _2236, 1.0), 0.0);
        float _2702 = exp2((_2691 * (-1.44269502162933349609375)) * (1.0 - _2693.w));
        float _2703 = log2(_2702);
        float _2719 = log2(_2255);
        _2354 = (exp2(_2719 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].x)) * _2693.x) / cbSceneParam._m0[78u].x)) + _2252;
        _2356 = (exp2(_2719 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].y)) * _2693.y) / cbSceneParam._m0[78u].y)) + _2253;
        _2358 = (exp2(_2719 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].z)) * _2693.z) / cbSceneParam._m0[78u].z)) + _2254;
        _2360 = _2702 * _2255;
    }
    else
    {
        _2354 = _2252;
        _2356 = _2253;
        _2358 = _2254;
        _2360 = _2255;
    }
    bool _2729;
    vec4 _2370;
    vec4 _2393;
    float _2395;
    float _2399;
    float _2400;
    float _2401;
    float _2402;
    bool _2413;
    for (;;)
    {
        _2370 = cbMatDynParam._m0[0u];
        float _2372 = roundEven(_2370.y);
        bool _2373 = _2372 == 3.0;
        float _2375 = log2(_2360);
        float _2382 = exp2(_2375 * cbSceneParam._m0[78u].x) * _2224;
        float _2383 = exp2(_2375 * cbSceneParam._m0[78u].y) * _2225;
        float _2384 = exp2(_2375 * cbSceneParam._m0[78u].z) * _2226;
        float _2391 = _322 + (-0.5);
        _2393 = cbMtdParam._m0[1u];
        _2395 = _2393.y * _2391;
        float _2398 = (_2372 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2399 = _2398 * (_2373 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2354)));
        _2400 = _2398 * (_2373 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2356)));
        _2401 = _2398 * (_2373 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2358)));
        _2402 = _2391 * 0.999000012874603271484375;
        _2413 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2413)
        {
            if ((cbInstanceData._m0[_374 + 7u].x + _2402) < 0.5)
            {
                _2729 = true;
                break;
            }
        }
        uint _2474 = _376 + uint(_2370.w);
        if ((cbInstanceData._m0[_2474].w < 1.0) && ((cbInstanceData._m0[_2474].w + _2402) < 0.5))
        {
            _2729 = true;
            break;
        }
        if ((_2395 + _205) < _2393.x)
        {
            _2729 = true;
            break;
        }
        _2729 = false;
        break;
    }
    float _2747;
    if (_2729)
    {
        discard_state = true;
        _2747 = 0.0;
    }
    else
    {
        _2747 = cbInstanceData._m0[_2227].w;
    }
    SV_Target.x = _2399;
    SV_Target.y = _2400;
    SV_Target.z = _2401;
    SV_Target.w = _2747;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2227].w;
    discard_exit();
}


