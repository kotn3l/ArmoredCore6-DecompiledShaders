#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _775;
float _3456;
float _3457;
float _3458;
float _3459;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = _201.w;
    float _208 = _201.x * cbMtdParam._m0[9u].x;
    float _209 = _201.y * cbMtdParam._m0[9u].y;
    float _210 = _201.z * cbMtdParam._m0[9u].z;
    vec4 _222 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = cbMtdParam._m0[10u].x * _222.x;
    float _233 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _234 = _233 * _179;
    float _235 = _233 * _180;
    float _236 = _233 * _181;
    float _237 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3473 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3484 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _3495 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _257 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _308 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _298);
    float _309 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _298);
    float _310 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _298);
    float _314 = inversesqrt(dot(vec3(_308, _309, _310), vec3(_308, _309, _310)));
    float _315 = _308 * _314;
    float _316 = _309 * _314;
    float _317 = _310 * _314;
    vec4 _322 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _324 = _322.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _454 = sqrt(((_308 * _308) + (_309 * _309)) + (_310 * _310));
        float _460 = (cbMatDynParam._m0[5u].x * _454) + cbMatDynParam._m0[5u].y;
        float _3506 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
        float _461 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _465 = (cbMatDynParam._m0[5u].z * _454) + cbMatDynParam._m0[5u].w;
        float _3517 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) - _461)) + _461) < ((_324 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _336 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _337 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _357 = fma(_236, cbSceneParam._m0[5u].z, fma(_235, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _234));
    float _360 = fma(_236, cbSceneParam._m0[6u].z, fma(_235, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _234));
    float _363 = fma(_236, cbSceneParam._m0[7u].z, fma(_235, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _234));
    uint _376 = uint(roundEven(NORMAL.w)) * 13u;
    uint _378 = _376 + 9u;
    uint _379 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _385 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_379].x;
    float _386 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_379].y;
    float _387 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_379].z;
    float _3528 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    vec4 _399 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _336, cbSceneParam._m0[86u].y * _337));
    float _402 = _399.x * TEXCOORD.z;
    float _403 = dot(vec3(_234, _235, _236), vec3(_315, _316, _317));
    float _406 = _403 * 2.0;
    float _411 = (_406 * _234) - _315;
    float _412 = (_406 * _235) - _316;
    float _413 = (_406 * _236) - _317;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _503 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _507 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _532 = _435 + _234;
        float _533 = _439 + _235;
        float _534 = _443 + _236;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_234, _235, _236), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3598 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_234, _235, _236), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3631 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_234, _235, _236), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3664 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _822 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _826 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _849 = _435 + _234;
        float _850 = _439 + _235;
        float _851 = _443 + _236;
        float _861 = fma(_851, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849)) - _818;
        float _862 = fma(_851, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849)) - _822;
        float _863 = fma(_851, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849)) - _826;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_818 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_822 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[35u].z) + ((((((_826 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _917 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_884.x + (-0.5));
        float _919 = _917 * (_884.y + (-0.5));
        float _920 = _917 * (_884.z + (-0.5));
        float _927 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_891.x + (-0.5));
        float _929 = _927 * (_891.y + (-0.5));
        float _930 = _927 * (_891.z + (-0.5));
        float _937 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_898.x + (-0.5));
        float _939 = _937 * (_898.y + (-0.5));
        float _940 = _937 * (_898.z + (-0.5));
        float _947 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_905.x + (-0.5));
        float _949 = _947 * (_905.y + (-0.5));
        float _950 = _947 * (_905.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_234, _235, _236), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3727 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_981 + 1.0))) + _986) * _951;
        float _996 = _919 * 0.5;
        float _997 = _929 * 0.5;
        float _998 = _939 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_234, _235, _236), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3760 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1023 + 1.0))) + _1028) * _952;
        float _1038 = _920 * 0.5;
        float _1039 = _930 * 0.5;
        float _1040 = _940 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_234, _235, _236), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3793 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1065 + 1.0))) + _1070) * _953;
        _1087 = _920;
        _1088 = _919;
        _1089 = _918;
        _1090 = _930;
        _1091 = _929;
        _1092 = _928;
        _1093 = _940;
        _1094 = _939;
        _1095 = _938;
        _1096 = _953;
        _1097 = _952;
        _1098 = _951;
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _775;
        _1088 = _775;
        _1089 = _775;
        _1090 = _775;
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _788)) + _788;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1111));
    float _1155 = _411 * 0.5;
    float _1156 = _412 * 0.5;
    float _1157 = _413 * 0.5;
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1198;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1171 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_774, _778, _781, _784));
        float _1175 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_776, _779, _782, _785));
        float _1179 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_777, _780, _783, _786));
        float _1186 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1198 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1198 = 1.0;
    }
    float _1209;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1200 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1209 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1209 = 1.0;
    }
    float _1213 = (_1209 * cbModelParam._m0[1u].x) + (_1198 * (1.0 - cbModelParam._m0[1u].x));
    float _1222 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1304;
    float _1306;
    float _1308;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1271 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1275 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1279 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1282 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1285 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1288 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1314;
        if (_1282 > 0.0)
        {
            _1314 = abs((1.0 - _1271) / _1282);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1271 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1314 = frontier_phi_19_17_ladder;
        }
        float _1489;
        if (_1285 > 0.0)
        {
            _1489 = abs((1.0 - _1275) / _1285);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1275 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1489 = frontier_phi_28_24_ladder;
        }
        float _1761;
        if (_1288 > 0.0)
        {
            _1761 = abs((1.0 - _1279) / _1288);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1279 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1761 = frontier_phi_40_35_ladder;
        }
        float _1763 = isnan(_1489) ? _1314 : (isnan(_1314) ? _1489 : min(_1314, _1489));
        float _1764 = isnan(_1761) ? _1763 : (isnan(_1763) ? _1761 : min(_1763, _1761));
        float _1768 = (_1764 * _1282) + _1271;
        float _1769 = (_1764 * _1285) + _1275;
        float _1770 = (_1764 * _1288) + _1279;
        float _1771 = _1764 * 9.9999997473787516355514526367188e-05;
        float _1773 = (-1.0) - _1771;
        float _1775 = _1771 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1770 > _1775) || ((_1770 < _1773) || ((_1769 > _1775) || ((_1769 < _1773) || ((_1768 < _1773) || (_1768 > _1775))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1770, cbModelParam._m0[9u].z, fma(_1769, cbModelParam._m0[9u].y, _1768 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1770, cbModelParam._m0[10u].z, fma(_1769, cbModelParam._m0[10u].y, _1768 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1770, cbModelParam._m0[11u].z, fma(_1769, cbModelParam._m0[11u].y, _1768 * cbModelParam._m0[11u].x))), _1222);
            frontier_phi_18_40_ladder = _1924.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1924.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1924.x * cbModelParam._m0[1u].y;
        }
        _1304 = frontier_phi_18_40_ladder_2;
        _1306 = frontier_phi_18_40_ladder_1;
        _1308 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1222);
        _1304 = _1292.x * cbModelParam._m0[1u].y;
        _1306 = _1292.y * cbModelParam._m0[1u].y;
        _1308 = _1292.z * cbModelParam._m0[1u].y;
    }
    float _1311 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1368 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1372 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1376 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1379 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1382 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1385 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1494;
        if (_1379 > 0.0)
        {
            _1494 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1494 = frontier_phi_30_26_ladder;
        }
        float _1788;
        if (_1382 > 0.0)
        {
            _1788 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1788 = frontier_phi_42_37_ladder;
        }
        float _1942;
        if (_1385 > 0.0)
        {
            _1942 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_51_49_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_51_49_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_51_49_ladder = 5000.0;
            }
            _1942 = frontier_phi_51_49_ladder;
        }
        float _1944 = isnan(_1788) ? _1494 : (isnan(_1494) ? _1788 : min(_1494, _1788));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1379) + _1368;
        float _1950 = (_1945 * _1382) + _1372;
        float _1951 = (_1945 * _1385) + _1376;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1952;
        float _1955 = _1952 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1951 > _1955) || ((_1951 < _1953) || ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 < _1953) || (_1949 > _1955))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1951, cbModelParam._m0[17u].z, fma(_1950, cbModelParam._m0[17u].y, _1949 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1951, cbModelParam._m0[18u].z, fma(_1950, cbModelParam._m0[18u].y, _1949 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1951, cbModelParam._m0[19u].z, fma(_1950, cbModelParam._m0[19u].y, _1949 * cbModelParam._m0[19u].x))), _1311);
            frontier_phi_27_51_ladder = _2021.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2021.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2021.x * cbModelParam._m0[1u].z;
        }
        _1404 = frontier_phi_27_51_ladder_2;
        _1406 = frontier_phi_27_51_ladder_1;
        _1408 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1311);
        _1404 = _1388.x * cbModelParam._m0[1u].z;
        _1406 = _1388.y * cbModelParam._m0[1u].z;
        _1408 = _1388.z * cbModelParam._m0[1u].z;
    }
    float _1420 = _402 * 0.01200000010430812835693359375;
    float _1422 = _1420 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = _1420 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1424 = _1420 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, _1422 * cbSceneParam._m0[91u].x));
    float _1468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1481 = _1468 / _1480;
    float _1482 = _1472 / _1480;
    float _1483 = _1476 / _1480;
    float _1630;
    float _1631;
    float _1632;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1510 = ((uint(_1483 > cbSceneParam._m0[59u].y) + uint(_1483 > cbSceneParam._m0[59u].x)) + uint(_1483 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1511 = _1510 + 43u;
        uint _1519 = _1510 + 44u;
        uint _1527 = _1510 + 45u;
        uint _1535 = _1510 + 46u;
        float _1546 = fma(_1480, cbSceneParam._m0[_1511].w, fma(_1476, cbSceneParam._m0[_1511].z, fma(_1472, cbSceneParam._m0[_1511].y, _1468 * cbSceneParam._m0[_1511].x)));
        float _1550 = fma(_1480, cbSceneParam._m0[_1519].w, fma(_1476, cbSceneParam._m0[_1519].z, fma(_1472, cbSceneParam._m0[_1519].y, _1468 * cbSceneParam._m0[_1519].x)));
        float _1558 = fma(_1480, cbSceneParam._m0[_1535].w, fma(_1476, cbSceneParam._m0[_1535].z, fma(_1472, cbSceneParam._m0[_1535].y, _1468 * cbSceneParam._m0[_1535].x)));
        float _1563 = cbSceneParam._m0[33u].z * _1558;
        float _1565 = cbSceneParam._m0[33u].w * _1558;
        float _1568 = fma(_1480, cbSceneParam._m0[_1527].w, fma(_1476, cbSceneParam._m0[_1527].z, fma(_1472, cbSceneParam._m0[_1527].y, _1468 * cbSceneParam._m0[_1527].x))) / _1558;
        float _1616 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
        float _3919 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1623 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1563 + _1546) / _1558, (_1565 + _1550) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1565 + _1546) / _1558, (_1550 - _1563) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1563) / _1558, (_1550 - _1565) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1565) / _1558, (_1563 + _1550) / _1558), _1568), 0.0)).x), vec4(0.25)));
        _1630 = 1.0 - (_1623 * cbSceneParam._m0[34u].x);
        _1631 = 1.0 - (_1623 * cbSceneParam._m0[34u].y);
        _1632 = 1.0 - (_1623 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1630 = 1.0;
        _1631 = 1.0;
        _1632 = 1.0;
    }
    float _1696;
    float _1698;
    float _1700;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1684 = fma(_1480, cbSceneParam._m0[63u].w, fma(_1476, cbSceneParam._m0[63u].z, fma(_1472, cbSceneParam._m0[63u].y, _1468 * cbSceneParam._m0[63u].x)));
        float _1685 = fma(_1480, cbSceneParam._m0[60u].w, fma(_1476, cbSceneParam._m0[60u].z, fma(_1472, cbSceneParam._m0[60u].y, _1468 * cbSceneParam._m0[60u].x))) / _1684;
        float _1686 = fma(_1480, cbSceneParam._m0[61u].w, fma(_1476, cbSceneParam._m0[61u].z, fma(_1472, cbSceneParam._m0[61u].y, _1468 * cbSceneParam._m0[61u].x))) / _1684;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1685 >= cbSceneParam._m0[64u].x) && (_1686 >= cbSceneParam._m0[64u].y)) && (_1685 <= cbSceneParam._m0[64u].z)) && (_1686 <= cbSceneParam._m0[64u].w))
        {
            float _1801 = fma(_1480, cbSceneParam._m0[62u].w, fma(_1476, cbSceneParam._m0[62u].z, fma(_1472, cbSceneParam._m0[62u].y, _1468 * cbSceneParam._m0[62u].x))) / _1684;
            float _1805 = isnan(cbSceneParam._m0[41u].w) ? _1801 : (isnan(_1801) ? cbSceneParam._m0[41u].w : max(_1801, cbSceneParam._m0[41u].w));
            float _1848 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
            float _3935 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
            float _1855 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1685, cbSceneParam._m0[33u].w + _1686), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1685, _1686 - cbSceneParam._m0[33u].z), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].z, _1686 - cbSceneParam._m0[33u].w), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1686), _1805), 0.0)).x), vec4(0.25)));
            float _1859 = 1.0 - (_1855 * cbSceneParam._m0[34u].x);
            float _1860 = 1.0 - (_1855 * cbSceneParam._m0[34u].y);
            float _1861 = 1.0 - (_1855 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1861) ? _1632 : (isnan(_1632) ? _1861 : min(_1632, _1861));
            frontier_phi_39_38_ladder_1 = isnan(_1860) ? _1631 : (isnan(_1631) ? _1860 : min(_1631, _1860));
            frontier_phi_39_38_ladder_2 = isnan(_1859) ? _1630 : (isnan(_1630) ? _1859 : min(_1630, _1859));
        }
        else
        {
            frontier_phi_39_38_ladder = _1632;
            frontier_phi_39_38_ladder_1 = _1631;
            frontier_phi_39_38_ladder_2 = _1630;
        }
        _1696 = frontier_phi_39_38_ladder_2;
        _1698 = frontier_phi_39_38_ladder_1;
        _1700 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1696 = _1630;
        _1698 = _1631;
        _1700 = _1632;
    }
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_376 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _402 + (-1.0);
    float _1721 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1724 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1726 = _1707 + 4u;
    float _1738 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_234, _235, _236));
    float _1741 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    float _1742 = cbLight._m0[_1726].x * _1696;
    float _1743 = cbLight._m0[_1726].y * _1698;
    float _1744 = cbLight._m0[_1726].z * _1700;
    uint _1745 = _1707 + 5u;
    float _1757 = dot(vec3(cbLight._m0[_1707 | 1u].xyz), vec3(_234, _235, _236));
    float _1760 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    float _1933;
    float _1934;
    float _1935;
    if (_237 == 0.0)
    {
        float _3971 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _3982 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1870 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
        float _1872 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.3183098733425140380859375;
        _1933 = ((cbLight._m0[_1745].x * _1760) * _1872) + ((_1742 * _1741) * _1870);
        _1934 = ((_1760 * cbLight._m0[_1745].y) * _1872) + ((_1743 * _1741) * _1870);
        _1935 = ((_1760 * cbLight._m0[_1745].z) * _1872) + ((_1744 * _1741) * _1870);
    }
    else
    {
        float _1882 = _1738 + _237;
        float _1885 = (_237 * 2.0) + 1.0;
        float _1886 = (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) / _1885;
        float _1893 = _1757 + _237;
        float _1895 = (isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) / _1885;
        _1933 = (((_1895 * cbLight._m0[_1745].x) * _1760) + ((_1742 * _1886) * _1741)) * 0.3183098733425140380859375;
        _1934 = (((_1895 * cbLight._m0[_1745].y) * _1760) + ((_1743 * _1886) * _1741)) * 0.3183098733425140380859375;
        _1935 = (((_1895 * cbLight._m0[_1745].z) * _1760) + ((_1744 * _1886) * _1741)) * 0.3183098733425140380859375;
    }
    uvec4 _1939 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1941 = _1939.x == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1941)
    {
        _1968 = _1933;
        _1970 = _1934;
        _1972 = _1935;
    }
    else
    {
        uint _1976 = _1707 + 6u;
        float _1992 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _4003 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1995 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1968 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1933;
        _1970 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1934;
        _1972 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1935;
    }
    bool _1975 = _1939.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1975)
    {
        _2026 = _1968;
        _2028 = _1970;
        _2030 = _1972;
    }
    else
    {
        uint _2147 = _1707 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4019 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2166 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2026 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1968;
        _2028 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1970;
        _2030 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1972;
    }
    uint _2032 = _1707 + 8u;
    float _2043 = cbLight._m0[_1707].x + _315;
    float _2044 = cbLight._m0[_1707].y + _316;
    float _2045 = cbLight._m0[_1707].z + _317;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2053 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1707].xyz));
    float _4035 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _2057 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_2043 * _2049, _2044 * _2049, _2045 * _2049));
    float _4057 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2075 = (0.5 / ((_2056 + 9.9999999392252902907785028219223e-09) + _2057)) * _2056;
    float _4068 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.31831014156341552734375;
    float _2079 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _2092 = _1707 + 9u;
    uint _2098 = _1707 | 1u;
    float _2104 = cbLight._m0[_2098].x + _315;
    float _2105 = cbLight._m0[_2098].y + _316;
    float _2106 = cbLight._m0[_2098].z + _317;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2114 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_2098].xyz));
    float _4084 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2104 * _2110, _2105 * _2110, _2106 * _2110));
    float _4095 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2131 = (0.5 / ((_2117 + 9.9999999392252902907785028219223e-09) + _2057)) * _2117;
    float _4106 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.31831014156341552734375;
    float _2134 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    float _2144 = (((_2127 * cbLight._m0[_2092].x) * _2133) * _2134) + ((((cbLight._m0[_2032].x * _1696) * _2069) * _2077) * _2079);
    float _2145 = (((_2127 * cbLight._m0[_2092].y) * _2133) * _2134) + ((((cbLight._m0[_2032].y * _1698) * _2069) * _2077) * _2079);
    float _2146 = (((_2127 * cbLight._m0[_2092].z) * _2133) * _2134) + ((((cbLight._m0[_2032].z * _1700) * _2069) * _2077) * _2079);
    float _2176;
    float _2178;
    float _2180;
    if (_1941)
    {
        _2176 = _2144;
        _2178 = _2145;
        _2180 = _2146;
    }
    else
    {
        uint _2182 = _1707 + 10u;
        uint _2188 = _1707 + 2u;
        float _2194 = cbLight._m0[_2188].x + _315;
        float _2195 = cbLight._m0[_2188].y + _316;
        float _2196 = cbLight._m0[_2188].z + _317;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2204 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_2188].xyz));
        float _4122 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2194 * _2200, _2195 * _2200, _2196 * _2200));
        float _4133 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2221 = (0.5 / ((_2207 + 9.9999999392252902907785028219223e-09) + _2057)) * _2207;
        float _4144 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.31831014156341552734375;
        float _2224 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2176 = (((_2217 * cbLight._m0[_2182].x) * _2223) * _2224) + _2144;
        _2178 = (((_2217 * cbLight._m0[_2182].y) * _2223) * _2224) + _2145;
        _2180 = (((_2217 * cbLight._m0[_2182].z) * _2223) * _2224) + _2146;
    }
    float _2234;
    float _2236;
    float _2238;
    if (_1975)
    {
        _2234 = _2176;
        _2236 = _2178;
        _2238 = _2180;
    }
    else
    {
        uint _2245 = _1707 + 11u;
        uint _2251 = _1707 + 3u;
        float _2257 = cbLight._m0[_2251].x + _315;
        float _2258 = cbLight._m0[_2251].y + _316;
        float _2259 = cbLight._m0[_2251].z + _317;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2267 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_2251].xyz));
        float _4160 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2271 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2257 * _2263, _2258 * _2263, _2259 * _2263));
        float _4171 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2284 = (0.5 / ((_2270 + 9.9999999392252902907785028219223e-09) + _2057)) * _2270;
        float _4182 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.31831014156341552734375;
        float _2287 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2234 = (((_2280 * cbLight._m0[_2245].x) * _2286) * _2287) + _2176;
        _2236 = (((_2280 * cbLight._m0[_2245].y) * _2286) * _2287) + _2178;
        _2238 = (((_2280 * cbLight._m0[_2245].z) * _2286) * _2287) + _2180;
    }
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    if (_1705.y == 0u)
    {
        uvec4 _2308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2309 = _2308.x;
        uint _2320 = uint((float(_2308.y) * floor(float(uint(cbSceneParam._m0[85u].y * _337) / _2309))) + floor(float(uint(cbSceneParam._m0[85u].x * _336) / _2309)));
        float _2330 = (log2(_1483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2331 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        uint _2334 = uint(isnan(14.0) ? _2331 : (isnan(_2331) ? 14.0 : min(_2331, 14.0)));
        uvec4 _2339 = texelFetch(g_lightClusterGridBuffer, int(((_2334 << 2u) + (_2320 << 6u)) >> 2u));
        uint _2340 = _2339.x;
        uint _2341 = _2308.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2341 >> 4u) & 15u)) + 4294967295u) & _2340) == 0u) || ((_2341 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2565)
                {
                    frontier_phi_74_pred = _2554;
                    frontier_phi_74_pred_1 = _2553;
                    frontier_phi_74_pred_2 = _2552;
                    frontier_phi_74_pred_3 = _2551;
                    frontier_phi_74_pred_4 = _2550;
                    frontier_phi_74_pred_5 = _2549;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2549;
                    _2753 = _2550;
                    _2754 = _2551;
                    _2755 = _2552;
                    _2756 = _2553;
                    _2757 = _2554;
                    _2758 = _2564;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2555 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        float _2798 = _2797.x;
                        float _2799 = _2797.y;
                        float _2800 = _2797.z;
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        uint _2819 = (_2762 * 48u) + 12u;
                        vec2 _2827 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x));
                        float _2833 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
                        float _2834 = _2833 * _1481;
                        float _2835 = _2833 * _1482;
                        float _2836 = _2833 * _1483;
                        float _2837 = _2778.x - _1481;
                        float _2838 = _2778.y - _1482;
                        float _2839 = _2778.z - _1483;
                        float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                        float _2843 = inversesqrt(_2840);
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2852 = 1.0 - (_2840 * _2778.w);
                        float _4208 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2854 = sqrt(_2840) * _2797.w;
                        float _2857 = 1.39999997615814208984375 / (_2854 + 1.39999997615814208984375);
                        float _2858 = _2857 * _2857;
                        float _2859 = 1.0 - _2858;
                        float _2861 = (_2859 * _2859) * _237;
                        float _2863 = (_2859 * dot(vec3(_357, _360, _363), vec3(_2844, _2845, _2846))) + _2858;
                        float _2864 = _2863 + _2861;
                        float _2869 = _2854 * _2854;
                        float _2874 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2853) / (((_2861 * 2.0) + 1.0) * ((_2869 * 0.699999988079071044921875) + 1.0));
                        float _2878 = dot(vec3(_2844, _2845, _2846), vec3(_2834, _2835, _2836));
                        float _4224 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2885 = dot(vec3((-0.0) - _2834, (-0.0) - _2835, (-0.0) - _2836), vec3(_357, _360, _363)) + 1.0;
                        float _2887 = (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * 0.5;
                        float _2894 = ((_2887 * _2887) * _2827.x) * exp2((_2827.y * 32.0) * log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))));
                        float _2896 = _237 / (_237 + 1.0);
                        float _2912 = (-0.0) - _1481;
                        float _2913 = (-0.0) - _1482;
                        float _2914 = (-0.0) - _1483;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2922 = dot(vec3(_357, _360, _363), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                        float _4240 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _4251 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2926 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2930 = (0.5 / (((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) + 9.9999999392252902907785028219223e-09) + _2926)) * _2926;
                        float _4262 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2939 = (((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 3.1415927410125732421875) / ((_2869 * 2.1991131305694580078125) + 3.141590118408203125)) * _2853;
                        _2670 = (((((_2798 * 0.3183098733425140380859375) * _2896) * _2894) + _2798) * _2874) + _2755;
                        _2671 = (((((_2799 * 0.3183098733425140380859375) * _2896) * _2894) + _2799) * _2874) + _2756;
                        _2672 = (((((_2800 * 0.3183098733425140380859375) * _2896) * _2894) + _2800) * _2874) + _2757;
                        _2667 = (_2939 * _2814.x) + _2752;
                        _2668 = (_2939 * _2814.y) + _2753;
                        _2669 = (_2939 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2667;
                            _2753 = _2668;
                            _2754 = _2669;
                            _2755 = _2670;
                            _2756 = _2671;
                            _2757 = _2672;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_74_pred = _2672;
                    frontier_phi_74_pred_1 = _2671;
                    frontier_phi_74_pred_2 = _2670;
                    frontier_phi_74_pred_3 = _2669;
                    frontier_phi_74_pred_4 = _2668;
                    frontier_phi_74_pred_5 = _2667;
                }
                _2376 = frontier_phi_74_pred;
                _2374 = frontier_phi_74_pred_1;
                _2372 = frontier_phi_74_pred_2;
                _2370 = frontier_phi_74_pred_3;
                _2368 = frontier_phi_74_pred_4;
                _2366 = frontier_phi_74_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2366;
                    _2550 = _2368;
                    _2551 = _2370;
                    _2552 = _2372;
                    _2553 = _2374;
                    _2554 = _2376;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2382) & _2340) == 0u)
        {
            _2517 = _2365;
            _2519 = _2367;
            _2521 = _2369;
            _2523 = _2371;
            _2525 = _2373;
            _2527 = _2375;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
            float _2543 = _2542 * _1481;
            float _2544 = _2542 * _1482;
            float _2545 = _2542 * _1483;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2735 = _2365;
                float _2736 = _2367;
                float _2737 = _2369;
                float _2738 = _2371;
                float _2739 = _2373;
                float _2740 = _2375;
                uint _2741 = _2382;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2751)
                    {
                        frontier_phi_86_pred = _2739;
                        frontier_phi_86_pred_1 = _2738;
                        frontier_phi_86_pred_2 = _2737;
                        frontier_phi_86_pred_3 = _2736;
                        frontier_phi_86_pred_4 = _2735;
                        frontier_phi_86_pred_5 = _2740;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3009 = _2735;
                        float _3010 = _2736;
                        float _3011 = _2737;
                        float _3012 = _2738;
                        float _3013 = _2739;
                        float _3014 = _2740;
                        uint _3015 = _2750;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        vec3 _3072;
                        vec2 _3081;
                        vec4 _3097;
                        vec4 _3113;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3026 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3058 = _3057.x;
                            _3059 = _3057.y;
                            _3060 = _3057.z;
                            uint _3062 = (_3026 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3026 * 40u) + 12u;
                            _3081 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x));
                            uint _3084 = (_3026 * 40u) + 16u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3100 = (_3026 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3026 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3026 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_1483, _3148.z, fma(_1482, _3148.y, _3148.x * _1481)) + _3148.w;
                            _3161 = !((fma(_1483, _3129.z, fma(_1482, _3129.y, _3129.x * _1481)) + _3129.w) <= 0.0);
                            float frontier_phi_95_pred;
                            float frontier_phi_95_pred_1;
                            float frontier_phi_95_pred_2;
                            float frontier_phi_95_pred_3;
                            float frontier_phi_95_pred_4;
                            float frontier_phi_95_pred_5;
                            if (_3161)
                            {
                                float _3187 = _3041.x - _1481;
                                float _3188 = _3041.y - _1482;
                                float _3189 = _3041.z - _1483;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3042 * _3042));
                                float _4273 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3205 = sqrt(_3190) * _3057.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3209 = 1.0 - _3208;
                                float _3211 = (_3209 * _3209) * _237;
                                float _3214 = ((_3209 * dot(vec3(_3194, _3195, _3196), vec3(_357, _360, _363))) + _3208) + _3211;
                                float _3219 = _3205 * _3205;
                                float _3224 = (fma(_1483, _3097.z, fma(_1482, _3097.y, _3097.x * _1481)) + _3097.w) / _3160;
                                float _3225 = (fma(_1483, _3113.z, fma(_1482, _3113.y, _3113.x * _1481)) + _3113.w) / _3160;
                                float _3229 = 1.0 - dot(vec2(_3224, _3225), vec2(_3224, _3225));
                                float _4289 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3231 = _3230 * (((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3201) / (((_3211 * 2.0) + 1.0) * ((_3219 * 0.699999988079071044921875) + 1.0)));
                                float _3232 = (-0.0) - _2543;
                                float _3233 = (-0.0) - _2544;
                                float _3234 = (-0.0) - _2545;
                                float _3235 = dot(vec3(_3194, _3195, _3196), vec3(_2543, _2544, _2545));
                                float _4300 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3242 = dot(vec3(_3232, _3233, _3234), vec3(_357, _360, _363)) + 1.0;
                                float _3244 = (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * 0.5;
                                float _3251 = ((_3244 * _3244) * _3081.x) * exp2((_3081.y * 32.0) * log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))));
                                float _3253 = _237 / (_237 + 1.0);
                                float _3269 = dot(vec3(_357, _360, _363), vec3(_3232, _3233, _3234));
                                float _4316 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3277 = (_3209 * dot(vec3(_357, _360, _363), vec3(_3194, _3195, _3196))) + _3208;
                                float _4327 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3282 = (0.5 / (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) + 9.9999999392252902907785028219223e-09) + _3278)) * _3278;
                                float _4338 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3289 = (_3230 * _3201) * (((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 3.1415927410125732421875) / ((_3219 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_95_pred = ((((_3059 * 0.3183098733425140380859375) * _3253) * _3251) + _3059) * _3231;
                                frontier_phi_95_pred_1 = ((((_3058 * 0.3183098733425140380859375) * _3253) * _3251) + _3058) * _3231;
                                frontier_phi_95_pred_2 = _3289 * _3072.z;
                                frontier_phi_95_pred_3 = _3289 * _3072.y;
                                frontier_phi_95_pred_4 = _3289 * _3072.x;
                                frontier_phi_95_pred_5 = ((((_3060 * 0.3183098733425140380859375) * _3253) * _3251) + _3060) * _3231;
                            }
                            else
                            {
                                frontier_phi_95_pred = 0.0;
                                frontier_phi_95_pred_1 = 0.0;
                                frontier_phi_95_pred_2 = 0.0;
                                frontier_phi_95_pred_3 = 0.0;
                                frontier_phi_95_pred_4 = 0.0;
                                frontier_phi_95_pred_5 = 0.0;
                            }
                            _3297 = frontier_phi_95_pred;
                            _3296 = frontier_phi_95_pred_1;
                            _3295 = frontier_phi_95_pred_2;
                            _3294 = frontier_phi_95_pred_3;
                            _3293 = frontier_phi_95_pred_4;
                            _3298 = frontier_phi_95_pred_5;
                            _2990 = _3296 + _3012;
                            _2991 = _3297 + _3013;
                            _2992 = _3298 + _3014;
                            _2987 = _3293 + _3009;
                            _2988 = _3294 + _3010;
                            _2989 = _3295 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2987;
                                _3010 = _2988;
                                _3011 = _2989;
                                _3012 = _2990;
                                _3013 = _2991;
                                _3014 = _2992;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2991;
                        frontier_phi_86_pred_1 = _2990;
                        frontier_phi_86_pred_2 = _2989;
                        frontier_phi_86_pred_3 = _2988;
                        frontier_phi_86_pred_4 = _2987;
                        frontier_phi_86_pred_5 = _2992;
                    }
                    _2526 = frontier_phi_86_pred;
                    _2524 = frontier_phi_86_pred_1;
                    _2522 = frontier_phi_86_pred_2;
                    _2520 = frontier_phi_86_pred_3;
                    _2518 = frontier_phi_86_pred_4;
                    _2528 = frontier_phi_86_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2518;
                        _2736 = _2520;
                        _2737 = _2522;
                        _2738 = _2524;
                        _2739 = _2526;
                        _2740 = _2528;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2528;
                frontier_phi_68_69_ladder_1 = _2526;
                frontier_phi_68_69_ladder_2 = _2524;
                frontier_phi_68_69_ladder_3 = _2522;
                frontier_phi_68_69_ladder_4 = _2518;
                frontier_phi_68_69_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_68_69_ladder = _2375;
                frontier_phi_68_69_ladder_1 = _2373;
                frontier_phi_68_69_ladder_2 = _2371;
                frontier_phi_68_69_ladder_3 = _2369;
                frontier_phi_68_69_ladder_4 = _2365;
                frontier_phi_68_69_ladder_5 = _2367;
            }
            _2517 = frontier_phi_68_69_ladder_4;
            _2519 = frontier_phi_68_69_ladder_5;
            _2521 = frontier_phi_68_69_ladder_3;
            _2523 = frontier_phi_68_69_ladder_2;
            _2525 = frontier_phi_68_69_ladder_1;
            _2527 = frontier_phi_68_69_ladder;
        }
        float _2532 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
        _2352 = (_2532 * _2523) + _2026;
        _2354 = (_2532 * _2525) + _2028;
        _2356 = (_2532 * _2527) + _2030;
        _2358 = ((_2517 * 0.039999999105930328369140625) * _2532) + _2234;
        _2360 = ((_2519 * 0.039999999105930328369140625) * _2532) + _2236;
        _2362 = ((_2521 * 0.039999999105930328369140625) * _2532) + _2238;
    }
    else
    {
        _2352 = _2026;
        _2354 = _2028;
        _2356 = _2030;
        _2358 = _2234;
        _2360 = _2236;
        _2362 = _2238;
    }
    float _2456;
    float _2457;
    float _2458;
    if (_237 > 0.0)
    {
        uint _2386 = _1707 + 4u;
        float _2392 = (-0.0) - _315;
        float _2393 = (-0.0) - _316;
        float _2394 = (-0.0) - _317;
        float _2395 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_2392, _2393, _2394));
        float _4354 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2402 = dot(vec3(_315, _316, _317), vec3(_234, _235, _236)) + 1.0;
        float _2404 = (isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))) * 0.5;
        float _2409 = _2404 * _2404;
        float _2410 = _2409 * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 32.0);
        float _2412 = _237 / (_237 + 1.0);
        float _2413 = isnan(_1721) ? 1.0 : (isnan(1.0) ? _1721 : min(1.0, _1721));
        uint _2426 = _1707 + 5u;
        float _2432 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2392, _2393, _2394));
        float _4375 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2439 = _2409 * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 32.0);
        float _2440 = isnan(_1722) ? 1.0 : (isnan(1.0) ? _1722 : min(1.0, _1722));
        _2456 = ((((_2439 * cbLight._m0[_2426].x) * _2412) * _2440) + ((((cbLight._m0[_2386].x * _1696) * _2410) * _2412) * _2413)) * 0.3183098733425140380859375;
        _2457 = ((((_2439 * cbLight._m0[_2426].y) * _2412) * _2440) + ((((cbLight._m0[_2386].y * _1698) * _2410) * _2412) * _2413)) * 0.3183098733425140380859375;
        _2458 = ((((_2439 * cbLight._m0[_2426].z) * _2412) * _2440) + ((((cbLight._m0[_2386].z * _1700) * _2410) * _2412) * _2413)) * 0.3183098733425140380859375;
    }
    else
    {
        _2456 = 0.0;
        _2457 = 0.0;
        _2458 = 0.0;
    }
    float _4391 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _4402 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _4413 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _2477 = ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * ((_2352 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _402)) + _2456)) + ((_2358 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2478 = ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * ((_2354 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _402)) + _2457)) + ((_2360 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2479 = ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * ((_2356 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _402)) + _2458)) + ((_2362 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    uint _2480 = _376 + 6u;
    float _2488 = _336 / cbSceneParam._m0[86u].x;
    float _2489 = _337 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _257 : (isnan(_257) ? cbSceneParam._m0[77u].w : min(_257, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_257 > cbSceneParam._m0[78u].w)
    {
        float _2570 = isnan(_257) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _257 : min(cbSceneParam._m0[80u].w, _257));
        float _2571 = _2570 / _257;
        float _2582 = _2571 * _308;
        float _2583 = _309 * _2571;
        float _2584 = (-0.0) - _2583;
        float _2585 = _2571 * _310;
        float _2587 = (cbSceneParam._m0[77u].w * _2584) / _2570;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2583;
        float _2595 = sqrt(((_2582 * _2582) + (_2583 * _2583)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2570)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2584 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2692 = 1.0 / cbSceneParam._m0[80u].x;
            float _2693 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2694 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            _2944 = ((abs(_2595 / _2584) * cbSceneParam._m0[80u].y) * ((((_2703 - _2704) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))))) * _2692)) - ((exp2(_2605 * _2703) - exp2(_2605 * _2704)) * _2692))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2508);
        _2607 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2609 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2611 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2613 = _2955 * _2508;
    }
    else
    {
        _2607 = _2505;
        _2609 = _2506;
        _2611 = _2507;
        _2613 = _2508;
    }
    bool _2982;
    vec4 _2623;
    vec4 _2646;
    float _2648;
    float _2652;
    float _2653;
    float _2654;
    float _2655;
    bool _2666;
    for (;;)
    {
        _2623 = cbMatDynParam._m0[0u];
        float _2625 = roundEven(_2623.y);
        bool _2626 = _2625 == 3.0;
        float _2628 = log2(_2613);
        float _2635 = exp2(_2628 * cbSceneParam._m0[78u].x) * _2477;
        float _2636 = exp2(_2628 * cbSceneParam._m0[78u].y) * _2478;
        float _2637 = exp2(_2628 * cbSceneParam._m0[78u].z) * _2479;
        float _2644 = _324 + (-0.5);
        _2646 = cbMtdParam._m0[1u];
        _2648 = _2646.y * _2644;
        float _2651 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2652 = _2651 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2607)));
        _2653 = _2651 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
        _2654 = _2651 * (_2626 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
        _2655 = _2644 * 0.999000012874603271484375;
        _2666 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2666)
        {
            if ((cbInstanceData._m0[_376 + 7u].x + _2655) < 0.5)
            {
                _2982 = true;
                break;
            }
        }
        uint _2727 = _378 + uint(_2623.w);
        if ((cbInstanceData._m0[_2727].w < 1.0) && ((cbInstanceData._m0[_2727].w + _2655) < 0.5))
        {
            _2982 = true;
            break;
        }
        if ((_2648 + _207) < _2646.x)
        {
            _2982 = true;
            break;
        }
        _2982 = false;
        break;
    }
    float _3000;
    if (_2982)
    {
        discard_state = true;
        _3000 = 0.0;
    }
    else
    {
        _3000 = cbInstanceData._m0[_2480].w;
    }
    SV_Target.x = _2652;
    SV_Target.y = _2653;
    SV_Target.z = _2654;
    SV_Target.w = _3000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
    discard_exit();
}


