#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _729;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _217 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = cbMtdParam._m0[10u].x * _217.x;
    float _228 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _229 = _228 * _175;
    float _230 = _228 * _176;
    float _231 = _228 * _177;
    float _232 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3360 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3371 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3382 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _252 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _303 * _309;
    float _311 = _304 * _309;
    float _312 = _305 * _309;
    float _318 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _319 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _340 = fma(_231, cbSceneParam._m0[5u].z, fma(_230, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _229));
    float _343 = fma(_231, cbSceneParam._m0[6u].z, fma(_230, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _229));
    float _346 = fma(_231, cbSceneParam._m0[7u].z, fma(_230, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _229));
    uint _359 = uint(roundEven(NORMAL.w)) * 13u;
    uint _362 = (_359 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _368 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_362].x;
    float _369 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_362].y;
    float _370 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_362].z;
    float _3393 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    vec4 _382 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _318, cbSceneParam._m0[86u].y * _319));
    float _385 = _382.x * TEXCOORD.z;
    float _386 = dot(vec3(_229, _230, _231), vec3(_310, _311, _312));
    float _389 = _386 * 2.0;
    float _394 = (_389 * _229) - _310;
    float _395 = (_389 * _230) - _311;
    float _396 = (_389 * _231) - _312;
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _728;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _453 = fma(_426, cbModelParam._m0[26u].z, fma(_422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _418));
        float _457 = fma(_426, cbModelParam._m0[27u].z, fma(_422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _418));
        float _461 = fma(_426, cbModelParam._m0[28u].z, fma(_422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _418));
        float _486 = _418 + _229;
        float _487 = _422 + _230;
        float _488 = _426 + _231;
        float _498 = fma(_488, cbModelParam._m0[26u].z, fma(_487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486)) - _453;
        float _499 = fma(_488, cbModelParam._m0[27u].z, fma(_487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486)) - _457;
        float _500 = fma(_488, cbModelParam._m0[28u].z, fma(_487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486)) - _461;
        float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
        float _517 = ((_504 * _498) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_453 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _518 = ((_504 * _499) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_457 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _519 = ((_504 * _500) / cbModelParam._m0[34u].z) + ((((((_461 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_517, _518, _519), 0.0);
        float _556 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _557 = _556 * (_522.x + (-0.5));
        float _558 = _556 * (_522.y + (-0.5));
        float _559 = _556 * (_522.z + (-0.5));
        float _566 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _567 = _566 * (_529.x + (-0.5));
        float _568 = _566 * (_529.y + (-0.5));
        float _569 = _566 * (_529.z + (-0.5));
        float _576 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_536.x + (-0.5));
        float _578 = _576 * (_536.y + (-0.5));
        float _579 = _576 * (_536.z + (-0.5));
        float _586 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_543.x + (-0.5));
        float _588 = _586 * (_543.y + (-0.5));
        float _589 = _586 * (_543.z + (-0.5));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = _557 * 0.5;
        float _594 = _567 * 0.5;
        float _595 = _577 * 0.5;
        float _596 = dot(vec3(_593, _594, _595), vec3(_593, _594, _595));
        float _601 = (_596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_596);
        float _610 = (dot(vec3(_229, _230, _231), vec3(_601 * _593, _601 * _594, _601 * _595)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _620 = sqrt(((_594 * _594) + (_593 * _593)) + (_595 * _595)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _621 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _622 = _621 * 2.0;
        float _626 = (1.0 - _621) / (_621 + 1.0);
        float _3463 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _636 = ((((1.0 - _627) * (_622 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_622 + 1.0))) + _627) * _590;
        float _637 = _558 * 0.5;
        float _638 = _568 * 0.5;
        float _639 = _578 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _653 = (dot(vec3(_229, _230, _231), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _662 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3496 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_664 + 1.0))) + _669) * _591;
        float _679 = _559 * 0.5;
        float _680 = _569 * 0.5;
        float _681 = _579 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_229, _230, _231), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3529 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_706 + 1.0))) + _711) * _592;
        _728 = _559;
        _730 = _558;
        _731 = _557;
        _732 = _569;
        _733 = _568;
        _734 = _567;
        _735 = _579;
        _736 = _578;
        _737 = _577;
        _738 = _592;
        _739 = _591;
        _740 = _590;
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0)));
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
    }
    else
    {
        _728 = _729;
        _730 = _729;
        _731 = _729;
        _732 = _729;
        _733 = _729;
        _734 = _729;
        _735 = _729;
        _736 = _729;
        _737 = _729;
        _738 = _729;
        _739 = _729;
        _740 = _729;
        _741 = 0.0;
        _742 = 0.0;
        _743 = 0.0;
    }
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _769 = fma(_426, cbModelParam._m0[30u].z, fma(_422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _418));
        float _773 = fma(_426, cbModelParam._m0[31u].z, fma(_422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _418));
        float _777 = fma(_426, cbModelParam._m0[32u].z, fma(_422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _418));
        float _800 = _418 + _229;
        float _801 = _422 + _230;
        float _802 = _426 + _231;
        float _812 = fma(_802, cbModelParam._m0[30u].z, fma(_801, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800)) - _769;
        float _813 = fma(_802, cbModelParam._m0[31u].z, fma(_801, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800)) - _773;
        float _814 = fma(_802, cbModelParam._m0[32u].z, fma(_801, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800)) - _777;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_769 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_773 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[35u].z) + ((((((_777 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _868 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_835.x + (-0.5));
        float _870 = _868 * (_835.y + (-0.5));
        float _871 = _868 * (_835.z + (-0.5));
        float _878 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_842.x + (-0.5));
        float _880 = _878 * (_842.y + (-0.5));
        float _881 = _878 * (_842.z + (-0.5));
        float _888 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_849.x + (-0.5));
        float _890 = _888 * (_849.y + (-0.5));
        float _891 = _888 * (_849.z + (-0.5));
        float _898 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_856.x + (-0.5));
        float _900 = _898 * (_856.y + (-0.5));
        float _901 = _898 * (_856.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_229, _230, _231), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3592 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_932 + 1.0))) + _937) * _902;
        float _947 = _870 * 0.5;
        float _948 = _880 * 0.5;
        float _949 = _890 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_229, _230, _231), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3625 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_974 + 1.0))) + _979) * _903;
        float _989 = _871 * 0.5;
        float _990 = _881 * 0.5;
        float _991 = _891 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_229, _230, _231), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3658 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1016 + 1.0))) + _1021) * _904;
        _1038 = _871;
        _1039 = _870;
        _1040 = _869;
        _1041 = _881;
        _1042 = _880;
        _1043 = _879;
        _1044 = _891;
        _1045 = _890;
        _1046 = _889;
        _1047 = _904;
        _1048 = _903;
        _1049 = _902;
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
    }
    else
    {
        _1038 = _729;
        _1039 = _729;
        _1040 = _729;
        _1041 = _729;
        _1042 = _729;
        _1043 = _729;
        _1044 = _729;
        _1045 = _729;
        _1046 = _729;
        _1047 = _729;
        _1048 = _729;
        _1049 = _729;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1085 = fma(_1064, cbSceneParam._m0[89u].z, fma(_1063, cbSceneParam._m0[89u].y, _1062 * cbSceneParam._m0[89u].x));
    float _1088 = fma(_1064, cbSceneParam._m0[90u].z, fma(_1063, cbSceneParam._m0[90u].y, _1062 * cbSceneParam._m0[90u].x));
    float _1091 = fma(_1064, cbSceneParam._m0[91u].z, fma(_1063, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1062));
    float _1106 = _394 * 0.5;
    float _1107 = _395 * 0.5;
    float _1108 = _396 * 0.5;
    float _1109 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1112 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1115 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1149;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1122 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_728, _732, _735, _738));
        float _1126 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_730, _733, _736, _739));
        float _1130 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_731, _734, _737, _740));
        float _1137 = dot(vec4(cbModelParam._m0[39u]), vec4(_1106, _1107, _1108, 1.0));
        _1149 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1137) ? 0.0 : (isnan(0.0) ? _1137 : max(0.0, _1137))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1149 = 1.0;
    }
    float _1160;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1151 = dot(vec4(cbModelParam._m0[40u]), vec4(_1106, _1107, _1108, 1.0));
        _1160 = dot(vec3(isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1151) ? 0.0 : (isnan(0.0) ? _1151 : max(0.0, _1151))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1160 = 1.0;
    }
    float _1164 = (_1160 * cbModelParam._m0[1u].x) + (_1149 * (1.0 - cbModelParam._m0[1u].x));
    float _1173 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1255;
    float _1257;
    float _1259;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1222 = fma(_426, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _418)) + cbModelParam._m0[13u].w;
        float _1226 = fma(_426, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _418)) + cbModelParam._m0[14u].w;
        float _1230 = fma(_426, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _418)) + cbModelParam._m0[15u].w;
        float _1233 = fma(_396, cbModelParam._m0[13u].z, fma(_395, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _394));
        float _1236 = fma(_396, cbModelParam._m0[14u].z, fma(_395, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _394));
        float _1239 = fma(_396, cbModelParam._m0[15u].z, fma(_395, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _394));
        float _1265;
        if (_1233 > 0.0)
        {
            _1265 = abs((1.0 - _1222) / _1233);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1222 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1265 = frontier_phi_16_14_ladder;
        }
        float _1440;
        if (_1236 > 0.0)
        {
            _1440 = abs((1.0 - _1226) / _1236);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1226 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1440 = frontier_phi_25_21_ladder;
        }
        float _1712;
        if (_1239 > 0.0)
        {
            _1712 = abs((1.0 - _1230) / _1239);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1230 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1712 = frontier_phi_37_32_ladder;
        }
        float _1714 = isnan(_1440) ? _1265 : (isnan(_1265) ? _1440 : min(_1265, _1440));
        float _1715 = isnan(_1712) ? _1714 : (isnan(_1714) ? _1712 : min(_1714, _1712));
        float _1719 = (_1715 * _1233) + _1222;
        float _1720 = (_1715 * _1236) + _1226;
        float _1721 = (_1715 * _1239) + _1230;
        float _1722 = _1715 * 9.9999997473787516355514526367188e-05;
        float _1724 = (-1.0) - _1722;
        float _1726 = _1722 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1721 > _1726) || ((_1721 < _1724) || ((_1720 > _1726) || ((_1720 < _1724) || ((_1719 < _1724) || (_1719 > _1726))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1721, cbModelParam._m0[9u].z, fma(_1720, cbModelParam._m0[9u].y, _1719 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1721, cbModelParam._m0[10u].z, fma(_1720, cbModelParam._m0[10u].y, _1719 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1721, cbModelParam._m0[11u].z, fma(_1720, cbModelParam._m0[11u].y, _1719 * cbModelParam._m0[11u].x))), _1173);
            frontier_phi_15_37_ladder = _1875.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1875.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1875.x * cbModelParam._m0[1u].y;
        }
        _1255 = frontier_phi_15_37_ladder_2;
        _1257 = frontier_phi_15_37_ladder_1;
        _1259 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_394, _395, _396), _1173);
        _1255 = _1243.x * cbModelParam._m0[1u].y;
        _1257 = _1243.y * cbModelParam._m0[1u].y;
        _1259 = _1243.z * cbModelParam._m0[1u].y;
    }
    float _1262 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1355;
    float _1357;
    float _1359;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1319 = fma(_426, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _418)) + cbModelParam._m0[21u].w;
        float _1323 = fma(_426, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _418)) + cbModelParam._m0[22u].w;
        float _1327 = fma(_426, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _418)) + cbModelParam._m0[23u].w;
        float _1330 = fma(_396, cbModelParam._m0[21u].z, fma(_395, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _394));
        float _1333 = fma(_396, cbModelParam._m0[22u].z, fma(_395, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _394));
        float _1336 = fma(_396, cbModelParam._m0[23u].z, fma(_395, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _394));
        float _1445;
        if (_1330 > 0.0)
        {
            _1445 = abs((1.0 - _1319) / _1330);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1319 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1445 = frontier_phi_27_23_ladder;
        }
        float _1739;
        if (_1333 > 0.0)
        {
            _1739 = abs((1.0 - _1323) / _1333);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1323 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1739 = frontier_phi_39_34_ladder;
        }
        float _1893;
        if (_1336 > 0.0)
        {
            _1893 = abs((1.0 - _1327) / _1336);
        }
        else
        {
            float frontier_phi_48_46_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_48_46_ladder = abs((_1327 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_48_46_ladder = 5000.0;
            }
            _1893 = frontier_phi_48_46_ladder;
        }
        float _1895 = isnan(_1739) ? _1445 : (isnan(_1445) ? _1739 : min(_1445, _1739));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1330) + _1319;
        float _1901 = (_1896 * _1333) + _1323;
        float _1902 = (_1896 * _1336) + _1327;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1904 = (-1.0) - _1903;
        float _1906 = _1903 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1902 > _1906) || ((_1902 < _1904) || ((_1901 > _1906) || ((_1901 < _1904) || ((_1900 < _1904) || (_1900 > _1906))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1902, cbModelParam._m0[17u].z, fma(_1901, cbModelParam._m0[17u].y, _1900 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1902, cbModelParam._m0[18u].z, fma(_1901, cbModelParam._m0[18u].y, _1900 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1902, cbModelParam._m0[19u].z, fma(_1901, cbModelParam._m0[19u].y, _1900 * cbModelParam._m0[19u].x))), _1262);
            frontier_phi_24_48_ladder = _1972.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _1972.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _1972.x * cbModelParam._m0[1u].z;
        }
        _1355 = frontier_phi_24_48_ladder_2;
        _1357 = frontier_phi_24_48_ladder_1;
        _1359 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_394, _395, _396), _1262);
        _1355 = _1339.x * cbModelParam._m0[1u].z;
        _1357 = _1339.y * cbModelParam._m0[1u].z;
        _1359 = _1339.z * cbModelParam._m0[1u].z;
    }
    float _1371 = _385 * 0.01200000010430812835693359375;
    float _1373 = _1371 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1374 = _1371 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1375 = _1371 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1378 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, _1373 * cbSceneParam._m0[91u].x));
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1432 = _1419 / _1431;
    float _1433 = _1423 / _1431;
    float _1434 = _1427 / _1431;
    float _1581;
    float _1582;
    float _1583;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1461 = ((uint(_1434 > cbSceneParam._m0[59u].y) + uint(_1434 > cbSceneParam._m0[59u].x)) + uint(_1434 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1462 = _1461 + 43u;
        uint _1470 = _1461 + 44u;
        uint _1478 = _1461 + 45u;
        uint _1486 = _1461 + 46u;
        float _1497 = fma(_1431, cbSceneParam._m0[_1462].w, fma(_1427, cbSceneParam._m0[_1462].z, fma(_1423, cbSceneParam._m0[_1462].y, _1419 * cbSceneParam._m0[_1462].x)));
        float _1501 = fma(_1431, cbSceneParam._m0[_1470].w, fma(_1427, cbSceneParam._m0[_1470].z, fma(_1423, cbSceneParam._m0[_1470].y, _1419 * cbSceneParam._m0[_1470].x)));
        float _1509 = fma(_1431, cbSceneParam._m0[_1486].w, fma(_1427, cbSceneParam._m0[_1486].z, fma(_1423, cbSceneParam._m0[_1486].y, _1419 * cbSceneParam._m0[_1486].x)));
        float _1514 = cbSceneParam._m0[33u].z * _1509;
        float _1516 = cbSceneParam._m0[33u].w * _1509;
        float _1519 = fma(_1431, cbSceneParam._m0[_1478].w, fma(_1427, cbSceneParam._m0[_1478].z, fma(_1423, cbSceneParam._m0[_1478].y, _1419 * cbSceneParam._m0[_1478].x))) / _1509;
        float _1567 = (cbSceneParam._m0[33u].x - sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434))) * cbSceneParam._m0[33u].y;
        float _3784 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1574 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1514 + _1497) / _1509, (_1516 + _1501) / _1509), _1519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1516 + _1497) / _1509, (_1501 - _1514) / _1509), _1519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1497 - _1514) / _1509, (_1501 - _1516) / _1509), _1519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1497 - _1516) / _1509, (_1514 + _1501) / _1509), _1519), 0.0)).x), vec4(0.25)));
        _1581 = 1.0 - (_1574 * cbSceneParam._m0[34u].x);
        _1582 = 1.0 - (_1574 * cbSceneParam._m0[34u].y);
        _1583 = 1.0 - (_1574 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1581 = 1.0;
        _1582 = 1.0;
        _1583 = 1.0;
    }
    float _1647;
    float _1649;
    float _1651;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1635 = fma(_1431, cbSceneParam._m0[63u].w, fma(_1427, cbSceneParam._m0[63u].z, fma(_1423, cbSceneParam._m0[63u].y, _1419 * cbSceneParam._m0[63u].x)));
        float _1636 = fma(_1431, cbSceneParam._m0[60u].w, fma(_1427, cbSceneParam._m0[60u].z, fma(_1423, cbSceneParam._m0[60u].y, _1419 * cbSceneParam._m0[60u].x))) / _1635;
        float _1637 = fma(_1431, cbSceneParam._m0[61u].w, fma(_1427, cbSceneParam._m0[61u].z, fma(_1423, cbSceneParam._m0[61u].y, _1419 * cbSceneParam._m0[61u].x))) / _1635;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1636 >= cbSceneParam._m0[64u].x) && (_1637 >= cbSceneParam._m0[64u].y)) && (_1636 <= cbSceneParam._m0[64u].z)) && (_1637 <= cbSceneParam._m0[64u].w))
        {
            float _1752 = fma(_1431, cbSceneParam._m0[62u].w, fma(_1427, cbSceneParam._m0[62u].z, fma(_1423, cbSceneParam._m0[62u].y, _1419 * cbSceneParam._m0[62u].x))) / _1635;
            float _1756 = isnan(cbSceneParam._m0[41u].w) ? _1752 : (isnan(_1752) ? cbSceneParam._m0[41u].w : max(_1752, cbSceneParam._m0[41u].w));
            float _1799 = (cbSceneParam._m0[33u].x - sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434))) * cbSceneParam._m0[33u].y;
            float _3800 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
            float _1806 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1636, cbSceneParam._m0[33u].w + _1637), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1636, _1637 - cbSceneParam._m0[33u].z), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1636 - cbSceneParam._m0[33u].z, _1637 - cbSceneParam._m0[33u].w), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1636 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1637), _1756), 0.0)).x), vec4(0.25)));
            float _1810 = 1.0 - (_1806 * cbSceneParam._m0[34u].x);
            float _1811 = 1.0 - (_1806 * cbSceneParam._m0[34u].y);
            float _1812 = 1.0 - (_1806 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1812) ? _1583 : (isnan(_1583) ? _1812 : min(_1583, _1812));
            frontier_phi_36_35_ladder_1 = isnan(_1811) ? _1582 : (isnan(_1582) ? _1811 : min(_1582, _1811));
            frontier_phi_36_35_ladder_2 = isnan(_1810) ? _1581 : (isnan(_1581) ? _1810 : min(_1581, _1810));
        }
        else
        {
            frontier_phi_36_35_ladder = _1583;
            frontier_phi_36_35_ladder_1 = _1582;
            frontier_phi_36_35_ladder_2 = _1581;
        }
        _1647 = frontier_phi_36_35_ladder_2;
        _1649 = frontier_phi_36_35_ladder_1;
        _1651 = frontier_phi_36_35_ladder;
    }
    else
    {
        _1647 = _1581;
        _1649 = _1582;
        _1651 = _1583;
    }
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_359 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _385 + (-1.0);
    float _1672 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1675 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1677 = _1658 + 4u;
    float _1689 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_229, _230, _231));
    float _1692 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    float _1693 = cbLight._m0[_1677].x * _1647;
    float _1694 = cbLight._m0[_1677].y * _1649;
    float _1695 = cbLight._m0[_1677].z * _1651;
    uint _1696 = _1658 + 5u;
    float _1708 = dot(vec3(cbLight._m0[_1658 | 1u].xyz), vec3(_229, _230, _231));
    float _1711 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    float _1884;
    float _1885;
    float _1886;
    if (_232 == 0.0)
    {
        float _3836 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _3847 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1821 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
        float _1823 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
        _1884 = ((cbLight._m0[_1696].x * _1711) * _1823) + ((_1693 * _1692) * _1821);
        _1885 = ((_1711 * cbLight._m0[_1696].y) * _1823) + ((_1694 * _1692) * _1821);
        _1886 = ((_1711 * cbLight._m0[_1696].z) * _1823) + ((_1695 * _1692) * _1821);
    }
    else
    {
        float _1833 = _1689 + _232;
        float _1836 = (_232 * 2.0) + 1.0;
        float _1837 = (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) / _1836;
        float _1844 = _1708 + _232;
        float _1846 = (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) / _1836;
        _1884 = (((_1846 * cbLight._m0[_1696].x) * _1711) + ((_1693 * _1837) * _1692)) * 0.3183098733425140380859375;
        _1885 = (((_1846 * cbLight._m0[_1696].y) * _1711) + ((_1694 * _1837) * _1692)) * 0.3183098733425140380859375;
        _1886 = (((_1846 * cbLight._m0[_1696].z) * _1711) + ((_1695 * _1837) * _1692)) * 0.3183098733425140380859375;
    }
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1892)
    {
        _1919 = _1884;
        _1921 = _1885;
        _1923 = _1886;
    }
    else
    {
        uint _1927 = _1658 + 6u;
        float _1943 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _3868 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1946 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1919 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1884;
        _1921 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1885;
        _1923 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1886;
    }
    bool _1926 = _1890.y == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1926)
    {
        _1977 = _1919;
        _1979 = _1921;
        _1981 = _1923;
    }
    else
    {
        uint _2098 = _1658 + 7u;
        float _2114 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _3884 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _2117 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1977 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _1919;
        _1979 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _1921;
        _1981 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _1923;
    }
    uint _1983 = _1658 + 8u;
    float _1994 = cbLight._m0[_1658].x + _310;
    float _1995 = cbLight._m0[_1658].y + _311;
    float _1996 = cbLight._m0[_1658].z + _312;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2004 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1658].xyz));
    float _3900 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2008 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1994 * _2000, _1995 * _2000, _1996 * _2000));
    float _3922 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2026 = (0.5 / ((_2007 + 9.9999999392252902907785028219223e-09) + _2008)) * _2007;
    float _3933 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.31831014156341552734375;
    float _2030 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _2043 = _1658 + 9u;
    uint _2049 = _1658 | 1u;
    float _2055 = cbLight._m0[_2049].x + _310;
    float _2056 = cbLight._m0[_2049].y + _311;
    float _2057 = cbLight._m0[_2049].z + _312;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2065 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2049].xyz));
    float _3949 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2055 * _2061, _2056 * _2061, _2057 * _2061));
    float _3960 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = (0.5 / ((_2068 + 9.9999999392252902907785028219223e-09) + _2008)) * _2068;
    float _3971 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.31831014156341552734375;
    float _2085 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    float _2095 = (((_2078 * cbLight._m0[_2043].x) * _2084) * _2085) + ((((cbLight._m0[_1983].x * _1647) * _2020) * _2028) * _2030);
    float _2096 = (((_2078 * cbLight._m0[_2043].y) * _2084) * _2085) + ((((cbLight._m0[_1983].y * _1649) * _2020) * _2028) * _2030);
    float _2097 = (((_2078 * cbLight._m0[_2043].z) * _2084) * _2085) + ((((cbLight._m0[_1983].z * _1651) * _2020) * _2028) * _2030);
    float _2127;
    float _2129;
    float _2131;
    if (_1892)
    {
        _2127 = _2095;
        _2129 = _2096;
        _2131 = _2097;
    }
    else
    {
        uint _2133 = _1658 + 10u;
        uint _2139 = _1658 + 2u;
        float _2145 = cbLight._m0[_2139].x + _310;
        float _2146 = cbLight._m0[_2139].y + _311;
        float _2147 = cbLight._m0[_2139].z + _312;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2155 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2139].xyz));
        float _3987 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2145 * _2151, _2146 * _2151, _2147 * _2151));
        float _3998 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2172 = (0.5 / ((_2158 + 9.9999999392252902907785028219223e-09) + _2008)) * _2158;
        float _4009 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.31831014156341552734375;
        float _2175 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2127 = (((_2168 * cbLight._m0[_2133].x) * _2174) * _2175) + _2095;
        _2129 = (((_2168 * cbLight._m0[_2133].y) * _2174) * _2175) + _2096;
        _2131 = (((_2168 * cbLight._m0[_2133].z) * _2174) * _2175) + _2097;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1926)
    {
        _2185 = _2127;
        _2187 = _2129;
        _2189 = _2131;
    }
    else
    {
        uint _2196 = _1658 + 11u;
        uint _2202 = _1658 + 3u;
        float _2208 = cbLight._m0[_2202].x + _310;
        float _2209 = cbLight._m0[_2202].y + _311;
        float _2210 = cbLight._m0[_2202].z + _312;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2218 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2202].xyz));
        float _4025 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2208 * _2214, _2209 * _2214, _2210 * _2214));
        float _4036 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2235 = (0.5 / ((_2221 + 9.9999999392252902907785028219223e-09) + _2008)) * _2221;
        float _4047 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.31831014156341552734375;
        float _2238 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2185 = (((_2231 * cbLight._m0[_2196].x) * _2237) * _2238) + _2127;
        _2187 = (((_2231 * cbLight._m0[_2196].y) * _2237) * _2238) + _2129;
        _2189 = (((_2231 * cbLight._m0[_2196].z) * _2237) * _2238) + _2131;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1656.y == 0u)
    {
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _319) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _318) / _2260)));
        float _2281 = (log2(_1434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            uint _2506 = 0u;
            uint _2515;
            bool _2516;
            for (;;)
            {
                _2515 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2506 << 2u)) >> 2u)).x;
                _2516 = _2515 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2516)
                {
                    frontier_phi_71_pred = _2505;
                    frontier_phi_71_pred_1 = _2504;
                    frontier_phi_71_pred_2 = _2503;
                    frontier_phi_71_pred_3 = _2502;
                    frontier_phi_71_pred_4 = _2500;
                    frontier_phi_71_pred_5 = _2501;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2500;
                    _2679 = _2501;
                    _2680 = _2502;
                    _2681 = _2503;
                    _2682 = _2504;
                    _2683 = _2505;
                    _2684 = _2515;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2506 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        float _2724 = _2723.x;
                        float _2725 = _2723.y;
                        float _2726 = _2723.z;
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        uint _2745 = (_2688 * 48u) + 12u;
                        vec2 _2753 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x));
                        float _2759 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
                        float _2760 = _2759 * _1432;
                        float _2761 = _2759 * _1433;
                        float _2762 = _2759 * _1434;
                        float _2763 = _2704.x - _1432;
                        float _2764 = _2704.y - _1433;
                        float _2765 = _2704.z - _1434;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2778 = 1.0 - (_2766 * _2704.w);
                        float _4073 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2780 = sqrt(_2766) * _2723.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2785 = 1.0 - _2784;
                        float _2787 = (_2785 * _2785) * _232;
                        float _2789 = (_2785 * dot(vec3(_340, _343, _346), vec3(_2770, _2771, _2772))) + _2784;
                        float _2790 = _2789 + _2787;
                        float _2795 = _2780 * _2780;
                        float _2800 = ((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2779) / (((_2787 * 2.0) + 1.0) * ((_2795 * 0.699999988079071044921875) + 1.0));
                        float _2804 = dot(vec3(_2770, _2771, _2772), vec3(_2760, _2761, _2762));
                        float _4089 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2811 = dot(vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762), vec3(_340, _343, _346)) + 1.0;
                        float _2813 = (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))) * 0.5;
                        float _2820 = ((_2813 * _2813) * _2753.x) * exp2((_2753.y * 32.0) * log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
                        float _2822 = _232 / (_232 + 1.0);
                        float _2838 = (-0.0) - _1432;
                        float _2839 = (-0.0) - _1433;
                        float _2840 = (-0.0) - _1434;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_340, _343, _346), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4105 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _4116 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2852 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2856 = (0.5 / (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) + 9.9999999392252902907785028219223e-09) + _2852)) * _2852;
                        float _4127 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2865 = (((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 3.1415927410125732421875) / ((_2795 * 2.1991131305694580078125) + 3.141590118408203125)) * _2779;
                        _2612 = (((((_2724 * 0.3183098733425140380859375) * _2822) * _2820) + _2724) * _2800) + _2681;
                        _2613 = (((((_2725 * 0.3183098733425140380859375) * _2822) * _2820) + _2725) * _2800) + _2682;
                        _2614 = (((((_2726 * 0.3183098733425140380859375) * _2822) * _2820) + _2726) * _2800) + _2683;
                        _2609 = (_2865 * _2740.x) + _2678;
                        _2610 = (_2865 * _2740.y) + _2679;
                        _2611 = (_2865 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2609;
                            _2679 = _2610;
                            _2680 = _2611;
                            _2681 = _2612;
                            _2682 = _2613;
                            _2683 = _2614;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_71_pred = _2614;
                    frontier_phi_71_pred_1 = _2613;
                    frontier_phi_71_pred_2 = _2612;
                    frontier_phi_71_pred_3 = _2611;
                    frontier_phi_71_pred_4 = _2609;
                    frontier_phi_71_pred_5 = _2610;
                }
                _2327 = frontier_phi_71_pred;
                _2325 = frontier_phi_71_pred_1;
                _2323 = frontier_phi_71_pred_2;
                _2321 = frontier_phi_71_pred_3;
                _2317 = frontier_phi_71_pred_4;
                _2319 = frontier_phi_71_pred_5;
                uint _2507 = _2506 + 1u;
                if (_2507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2500 = _2317;
                    _2501 = _2319;
                    _2502 = _2321;
                    _2503 = _2323;
                    _2504 = _2325;
                    _2505 = _2327;
                    _2506 = _2507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((4294967295u << _2333) & _2291) == 0u)
        {
            _2468 = _2316;
            _2470 = _2318;
            _2472 = _2320;
            _2474 = _2322;
            _2476 = _2324;
            _2478 = _2326;
        }
        else
        {
            float _2493 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
            float _2494 = _2493 * _1432;
            float _2495 = _2493 * _1433;
            float _2496 = _2493 * _1434;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2661 = _2316;
                float _2662 = _2318;
                float _2663 = _2320;
                float _2664 = _2322;
                float _2665 = _2324;
                float _2666 = _2326;
                uint _2667 = _2333;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2677)
                    {
                        frontier_phi_79_pred = _2663;
                        frontier_phi_79_pred_1 = _2662;
                        frontier_phi_79_pred_2 = _2661;
                        frontier_phi_79_pred_3 = _2666;
                        frontier_phi_79_pred_4 = _2665;
                        frontier_phi_79_pred_5 = _2664;
                    }
                    else
                    {
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _2921 = _2661;
                        float _2922 = _2662;
                        float _2923 = _2663;
                        float _2924 = _2664;
                        float _2925 = _2665;
                        float _2926 = _2666;
                        uint _2927 = _2676;
                        uint _2928;
                        vec4 _2953;
                        float _2954;
                        vec4 _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        vec3 _2984;
                        vec2 _2993;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2938 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2927));
                            _2928 = (_2927 + 4294967295u) & _2927;
                            uint _2940 = _2938 * 40u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2954 = _2953.w;
                            uint _2956 = (_2938 * 40u) + 4u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.x;
                            _2971 = _2969.y;
                            _2972 = _2969.z;
                            uint _2974 = (_2938 * 40u) + 8u;
                            _2984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x));
                            uint _2986 = (_2938 * 40u) + 12u;
                            _2993 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x));
                            uint _2996 = (_2938 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2938 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2938 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2938 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_1434, _3060.z, fma(_1433, _3060.y, _3060.x * _1432)) + _3060.w;
                            _3073 = !((fma(_1434, _3041.z, fma(_1433, _3041.y, _3041.x * _1432)) + _3041.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3073)
                            {
                                float _3099 = _2953.x - _1432;
                                float _3100 = _2953.y - _1433;
                                float _3101 = _2953.z - _1434;
                                float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                                float _3105 = inversesqrt(_3102);
                                float _3106 = _3105 * _3099;
                                float _3107 = _3105 * _3100;
                                float _3108 = _3105 * _3101;
                                float _3112 = 1.0 - (_3102 / (_2954 * _2954));
                                float _4138 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3117 = sqrt(_3102) * _2969.w;
                                float _3119 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                                float _3120 = _3119 * _3119;
                                float _3121 = 1.0 - _3120;
                                float _3123 = (_3121 * _3121) * _232;
                                float _3126 = ((_3121 * dot(vec3(_3106, _3107, _3108), vec3(_340, _343, _346))) + _3120) + _3123;
                                float _3131 = _3117 * _3117;
                                float _3136 = (fma(_1434, _3009.z, fma(_1433, _3009.y, _3009.x * _1432)) + _3009.w) / _3072;
                                float _3137 = (fma(_1434, _3025.z, fma(_1433, _3025.y, _3025.x * _1432)) + _3025.w) / _3072;
                                float _3141 = 1.0 - dot(vec2(_3136, _3137), vec2(_3136, _3137));
                                float _4154 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3143 = _3142 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3113) / (((_3123 * 2.0) + 1.0) * ((_3131 * 0.699999988079071044921875) + 1.0)));
                                float _3144 = (-0.0) - _2494;
                                float _3145 = (-0.0) - _2495;
                                float _3146 = (-0.0) - _2496;
                                float _3147 = dot(vec3(_3106, _3107, _3108), vec3(_2494, _2495, _2496));
                                float _4165 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3154 = dot(vec3(_3144, _3145, _3146), vec3(_340, _343, _346)) + 1.0;
                                float _3156 = (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * 0.5;
                                float _3163 = ((_3156 * _3156) * _2993.x) * exp2((_2993.y * 32.0) * log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))));
                                float _3165 = _232 / (_232 + 1.0);
                                float _3181 = dot(vec3(_340, _343, _346), vec3(_3144, _3145, _3146));
                                float _4181 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3189 = (_3121 * dot(vec3(_340, _343, _346), vec3(_3106, _3107, _3108))) + _3120;
                                float _4192 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3194 = (0.5 / (((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) + 9.9999999392252902907785028219223e-09) + _3190)) * _3190;
                                float _4203 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3201 = (_3142 * _3113) * (((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 3.1415927410125732421875) / ((_3131 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _3201 * _2984.z;
                                frontier_phi_85_pred_1 = _3201 * _2984.y;
                                frontier_phi_85_pred_2 = _3201 * _2984.x;
                                frontier_phi_85_pred_3 = ((((_2972 * 0.3183098733425140380859375) * _3165) * _3163) + _2972) * _3143;
                                frontier_phi_85_pred_4 = ((((_2971 * 0.3183098733425140380859375) * _3165) * _3163) + _2971) * _3143;
                                frontier_phi_85_pred_5 = ((((_2970 * 0.3183098733425140380859375) * _3165) * _3163) + _2970) * _3143;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3207 = frontier_phi_85_pred;
                            _3206 = frontier_phi_85_pred_1;
                            _3205 = frontier_phi_85_pred_2;
                            _3210 = frontier_phi_85_pred_3;
                            _3209 = frontier_phi_85_pred_4;
                            _3208 = frontier_phi_85_pred_5;
                            _2911 = _3208 + _2924;
                            _2912 = _3209 + _2925;
                            _2913 = _3210 + _2926;
                            _2908 = _3205 + _2921;
                            _2909 = _3206 + _2922;
                            _2910 = _3207 + _2923;
                            if (_2928 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2928;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2910;
                        frontier_phi_79_pred_1 = _2909;
                        frontier_phi_79_pred_2 = _2908;
                        frontier_phi_79_pred_3 = _2913;
                        frontier_phi_79_pred_4 = _2912;
                        frontier_phi_79_pred_5 = _2911;
                    }
                    _2473 = frontier_phi_79_pred;
                    _2471 = frontier_phi_79_pred_1;
                    _2469 = frontier_phi_79_pred_2;
                    _2479 = frontier_phi_79_pred_3;
                    _2477 = frontier_phi_79_pred_4;
                    _2475 = frontier_phi_79_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2469;
                        _2662 = _2471;
                        _2663 = _2473;
                        _2664 = _2475;
                        _2665 = _2477;
                        _2666 = _2479;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2479;
                frontier_phi_65_66_ladder_1 = _2477;
                frontier_phi_65_66_ladder_2 = _2473;
                frontier_phi_65_66_ladder_3 = _2471;
                frontier_phi_65_66_ladder_4 = _2469;
                frontier_phi_65_66_ladder_5 = _2475;
            }
            else
            {
                frontier_phi_65_66_ladder = _2326;
                frontier_phi_65_66_ladder_1 = _2324;
                frontier_phi_65_66_ladder_2 = _2320;
                frontier_phi_65_66_ladder_3 = _2318;
                frontier_phi_65_66_ladder_4 = _2316;
                frontier_phi_65_66_ladder_5 = _2322;
            }
            _2468 = frontier_phi_65_66_ladder_4;
            _2470 = frontier_phi_65_66_ladder_3;
            _2472 = frontier_phi_65_66_ladder_2;
            _2474 = frontier_phi_65_66_ladder_5;
            _2476 = frontier_phi_65_66_ladder_1;
            _2478 = frontier_phi_65_66_ladder;
        }
        float _2483 = isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0));
        _2303 = (_2483 * _2474) + _1977;
        _2305 = (_2483 * _2476) + _1979;
        _2307 = (_2483 * _2478) + _1981;
        _2309 = ((_2468 * 0.039999999105930328369140625) * _2483) + _2185;
        _2311 = ((_2470 * 0.039999999105930328369140625) * _2483) + _2187;
        _2313 = ((_2472 * 0.039999999105930328369140625) * _2483) + _2189;
    }
    else
    {
        _2303 = _1977;
        _2305 = _1979;
        _2307 = _1981;
        _2309 = _2185;
        _2311 = _2187;
        _2313 = _2189;
    }
    float _2407;
    float _2408;
    float _2409;
    if (_232 > 0.0)
    {
        uint _2337 = _1658 + 4u;
        float _2343 = (-0.0) - _310;
        float _2344 = (-0.0) - _311;
        float _2345 = (-0.0) - _312;
        float _2346 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_2343, _2344, _2345));
        float _4219 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2353 = dot(vec3(_310, _311, _312), vec3(_229, _230, _231)) + 1.0;
        float _2355 = (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) * 0.5;
        float _2360 = _2355 * _2355;
        float _2361 = _2360 * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 32.0);
        float _2363 = _232 / (_232 + 1.0);
        float _2364 = isnan(_1672) ? 1.0 : (isnan(1.0) ? _1672 : min(1.0, _1672));
        uint _2377 = _1658 + 5u;
        float _2383 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2343, _2344, _2345));
        float _4240 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2390 = _2360 * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 32.0);
        float _2391 = isnan(_1673) ? 1.0 : (isnan(1.0) ? _1673 : min(1.0, _1673));
        _2407 = ((((_2390 * cbLight._m0[_2377].x) * _2363) * _2391) + ((((cbLight._m0[_2337].x * _1647) * _2361) * _2363) * _2364)) * 0.3183098733425140380859375;
        _2408 = ((((_2390 * cbLight._m0[_2377].y) * _2363) * _2391) + ((((cbLight._m0[_2337].y * _1649) * _2361) * _2363) * _2364)) * 0.3183098733425140380859375;
        _2409 = ((((_2390 * cbLight._m0[_2377].z) * _2363) * _2391) + ((((cbLight._m0[_2337].z * _1651) * _2361) * _2363) * _2364)) * 0.3183098733425140380859375;
    }
    else
    {
        _2407 = 0.0;
        _2408 = 0.0;
        _2409 = 0.0;
    }
    float _4256 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _4267 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _4278 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _2431 = _359 + 6u;
    float _2439 = _318 / cbSceneParam._m0[86u].x;
    float _2440 = _319 / cbSceneParam._m0[86u].y;
    vec4 _2454 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, (log2((isnan(cbSceneParam._m0[77u].w) ? _252 : (isnan(_252) ? cbSceneParam._m0[77u].w : min(_252, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2456 = _2454.x;
    float _2457 = _2454.y;
    float _2458 = _2454.z;
    float _2459 = _2454.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_252 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_252) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _252 : min(cbSceneParam._m0[80u].w, _252));
        float _2522 = _2521 / _252;
        float _2533 = _2522 * _303;
        float _2534 = _304 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _305;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2634 = 1.0 / cbSceneParam._m0[80u].x;
            float _2635 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2636 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            _2870 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2645 - _2646) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0))))) * _2634)) - ((exp2(_2556 * _2645) - exp2(_2556 * _2646)) * _2634))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2459);
        _2558 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2456;
        _2560 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2457;
        _2562 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2458;
        _2564 = _2881 * _2459;
    }
    else
    {
        _2558 = _2456;
        _2560 = _2457;
        _2562 = _2458;
        _2564 = _2459;
    }
    float _2576 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2577 = _2576 == 3.0;
    float _2579 = log2(_2564);
    float _2586 = exp2(_2579 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * ((_2303 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _385)) + _2407)) + ((_2309 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1164)) * cbPerFrame._m0[3u].x));
    float _2587 = exp2(_2579 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * ((_2305 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _385)) + _2408)) + ((_2311 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1164)) * cbPerFrame._m0[3u].x));
    float _2588 = exp2(_2579 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * ((_2307 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _385)) + _2409)) + ((_2313 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1164)) * cbPerFrame._m0[3u].x));
    float _2597 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2597 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.y = _2597 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.z = _2597 * (_2577 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2562)));
    SV_Target.w = cbInstanceData._m0[_2431].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2431].w;
}


