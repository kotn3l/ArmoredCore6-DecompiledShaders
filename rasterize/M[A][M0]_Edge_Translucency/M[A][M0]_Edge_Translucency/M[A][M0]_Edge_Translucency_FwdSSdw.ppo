#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _727;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(M_A_M0_Edge_Translucency_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _222 = cbMtdParam._m0[10u].x * _215.x;
    float _226 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _227 = _226 * _173;
    float _228 = _226 * _174;
    float _229 = _226 * _175;
    float _230 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _3098 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3109 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _3120 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _250 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _301 * _307;
    float _309 = _302 * _307;
    float _310 = _303 * _307;
    float _316 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _317 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _338 = fma(_229, cbSceneParam._m0[5u].z, fma(_228, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _227));
    float _341 = fma(_229, cbSceneParam._m0[6u].z, fma(_228, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _227));
    float _344 = fma(_229, cbSceneParam._m0[7u].z, fma(_228, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _227));
    uint _357 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = (_357 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _366 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0)))) * cbInstanceData._m0[_360].x;
    float _367 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0)))) * cbInstanceData._m0[_360].y;
    float _368 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0)))) * cbInstanceData._m0[_360].z;
    float _3131 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
    float _3142 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _3153 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    vec4 _380 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _316, cbSceneParam._m0[86u].y * _317));
    float _383 = _380.x * TEXCOORD.z;
    float _384 = dot(vec3(_227, _228, _229), vec3(_308, _309, _310));
    float _387 = _384 * 2.0;
    float _392 = (_387 * _227) - _308;
    float _393 = (_387 * _228) - _309;
    float _394 = (_387 * _229) - _310;
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _726;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _451 = fma(_424, cbModelParam._m0[26u].z, fma(_420, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _416));
        float _455 = fma(_424, cbModelParam._m0[27u].z, fma(_420, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _416));
        float _459 = fma(_424, cbModelParam._m0[28u].z, fma(_420, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _416));
        float _484 = _416 + _227;
        float _485 = _420 + _228;
        float _486 = _424 + _229;
        float _496 = fma(_486, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _484)) - _451;
        float _497 = fma(_486, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _484)) - _455;
        float _498 = fma(_486, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _484)) - _459;
        float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
        float _515 = ((_502 * _496) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_451 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_502 * _497) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_455 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _517 = ((_502 * _498) / cbModelParam._m0[34u].z) + ((((((_459 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        float _554 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _555 = _554 * (_520.x + (-0.5));
        float _556 = _554 * (_520.y + (-0.5));
        float _557 = _554 * (_520.z + (-0.5));
        float _564 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _565 = _564 * (_527.x + (-0.5));
        float _566 = _564 * (_527.y + (-0.5));
        float _567 = _564 * (_527.z + (-0.5));
        float _574 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _575 = _574 * (_534.x + (-0.5));
        float _576 = _574 * (_534.y + (-0.5));
        float _577 = _574 * (_534.z + (-0.5));
        float _584 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_541.x + (-0.5));
        float _586 = _584 * (_541.y + (-0.5));
        float _587 = _584 * (_541.z + (-0.5));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = _555 * 0.5;
        float _592 = _565 * 0.5;
        float _593 = _575 * 0.5;
        float _594 = dot(vec3(_591, _592, _593), vec3(_591, _592, _593));
        float _599 = (_594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_594);
        float _608 = (dot(vec3(_227, _228, _229), vec3(_599 * _591, _599 * _592, _599 * _593)) + 1.0) * 0.5;
        float _3179 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _618 = sqrt(((_592 * _592) + (_591 * _591)) + (_593 * _593)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3190 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _619 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _620 = _619 * 2.0;
        float _624 = (1.0 - _619) / (_619 + 1.0);
        float _3201 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _634 = ((((1.0 - _625) * (_620 + 2.0)) * exp2(log2(isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0))) * (_620 + 1.0))) + _625) * _588;
        float _635 = _556 * 0.5;
        float _636 = _566 * 0.5;
        float _637 = _576 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _651 = (dot(vec3(_227, _228, _229), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3212 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _660 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3223 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _3234 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * (_662 + 1.0))) + _667) * _589;
        float _677 = _557 * 0.5;
        float _678 = _567 * 0.5;
        float _679 = _577 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _693 = (dot(vec3(_227, _228, _229), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3245 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _702 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3256 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3267 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * (_704 + 1.0))) + _709) * _590;
        _726 = _557;
        _728 = _556;
        _729 = _555;
        _730 = _567;
        _731 = _566;
        _732 = _565;
        _733 = _577;
        _734 = _576;
        _735 = _575;
        _736 = _590;
        _737 = _589;
        _738 = _588;
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0)));
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
    }
    else
    {
        _726 = _727;
        _728 = _727;
        _729 = _727;
        _730 = _727;
        _731 = _727;
        _732 = _727;
        _733 = _727;
        _734 = _727;
        _735 = _727;
        _736 = _727;
        _737 = _727;
        _738 = _727;
        _739 = 0.0;
        _740 = 0.0;
        _741 = 0.0;
    }
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _767 = fma(_424, cbModelParam._m0[30u].z, fma(_420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _416));
        float _771 = fma(_424, cbModelParam._m0[31u].z, fma(_420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _416));
        float _775 = fma(_424, cbModelParam._m0[32u].z, fma(_420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _416));
        float _798 = _416 + _227;
        float _799 = _420 + _228;
        float _800 = _424 + _229;
        float _810 = fma(_800, cbModelParam._m0[30u].z, fma(_799, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798)) - _767;
        float _811 = fma(_800, cbModelParam._m0[31u].z, fma(_799, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798)) - _771;
        float _812 = fma(_800, cbModelParam._m0[32u].z, fma(_799, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798)) - _775;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_767 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_771 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[35u].z) + ((((((_775 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _866 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_833.x + (-0.5));
        float _868 = _866 * (_833.y + (-0.5));
        float _869 = _866 * (_833.z + (-0.5));
        float _876 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_840.x + (-0.5));
        float _878 = _876 * (_840.y + (-0.5));
        float _879 = _876 * (_840.z + (-0.5));
        float _886 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_847.x + (-0.5));
        float _888 = _886 * (_847.y + (-0.5));
        float _889 = _886 * (_847.z + (-0.5));
        float _896 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_854.x + (-0.5));
        float _898 = _896 * (_854.y + (-0.5));
        float _899 = _896 * (_854.z + (-0.5));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = _867 * 0.5;
        float _904 = _877 * 0.5;
        float _905 = _887 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_227, _228, _229), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3330 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_930 + 1.0))) + _935) * _900;
        float _945 = _868 * 0.5;
        float _946 = _878 * 0.5;
        float _947 = _888 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_227, _228, _229), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3363 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_972 + 1.0))) + _977) * _901;
        float _987 = _869 * 0.5;
        float _988 = _879 * 0.5;
        float _989 = _889 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_227, _228, _229), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3396 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_1014 + 1.0))) + _1019) * _902;
        _1036 = _869;
        _1037 = _868;
        _1038 = _867;
        _1039 = _879;
        _1040 = _878;
        _1041 = _877;
        _1042 = _889;
        _1043 = _888;
        _1044 = _887;
        _1045 = _902;
        _1046 = _901;
        _1047 = _900;
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _727;
        _1037 = _727;
        _1038 = _727;
        _1039 = _727;
        _1040 = _727;
        _1041 = _727;
        _1042 = _727;
        _1043 = _727;
        _1044 = _727;
        _1045 = _727;
        _1046 = _727;
        _1047 = _727;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1083 = fma(_1062, cbSceneParam._m0[89u].z, fma(_1061, cbSceneParam._m0[89u].y, _1060 * cbSceneParam._m0[89u].x));
    float _1086 = fma(_1062, cbSceneParam._m0[90u].z, fma(_1061, cbSceneParam._m0[90u].y, _1060 * cbSceneParam._m0[90u].x));
    float _1089 = fma(_1062, cbSceneParam._m0[91u].z, fma(_1061, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1060));
    float _1104 = _392 * 0.5;
    float _1105 = _393 * 0.5;
    float _1106 = _394 * 0.5;
    float _1107 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1110 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1113 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1147;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1120 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_726, _730, _733, _736));
        float _1124 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_728, _731, _734, _737));
        float _1128 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_729, _732, _735, _738));
        float _1135 = dot(vec4(cbModelParam._m0[39u]), vec4(_1104, _1105, _1106, 1.0));
        _1147 = dot(vec3(isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1135) ? 0.0 : (isnan(0.0) ? _1135 : max(0.0, _1135))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1147 = 1.0;
    }
    float _1158;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1149 = dot(vec4(cbModelParam._m0[40u]), vec4(_1104, _1105, _1106, 1.0));
        _1158 = dot(vec3(isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1149) ? 0.0 : (isnan(0.0) ? _1149 : max(0.0, _1149))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1158 = 1.0;
    }
    float _1162 = (_1158 * cbModelParam._m0[1u].x) + (_1147 * (1.0 - cbModelParam._m0[1u].x));
    float _1171 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1253;
    float _1255;
    float _1257;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1220 = fma(_424, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _416)) + cbModelParam._m0[13u].w;
        float _1224 = fma(_424, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _416)) + cbModelParam._m0[14u].w;
        float _1228 = fma(_424, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _416)) + cbModelParam._m0[15u].w;
        float _1231 = fma(_394, cbModelParam._m0[13u].z, fma(_393, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _392));
        float _1234 = fma(_394, cbModelParam._m0[14u].z, fma(_393, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _392));
        float _1237 = fma(_394, cbModelParam._m0[15u].z, fma(_393, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _392));
        float _1263;
        if (_1231 > 0.0)
        {
            _1263 = abs((1.0 - _1220) / _1231);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1220 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1263 = frontier_phi_16_14_ladder;
        }
        float _1466;
        if (_1234 > 0.0)
        {
            _1466 = abs((1.0 - _1224) / _1234);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1224 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1466 = frontier_phi_25_21_ladder;
        }
        float _1540;
        if (_1237 > 0.0)
        {
            _1540 = abs((1.0 - _1228) / _1237);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1228 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1540 = frontier_phi_36_32_ladder;
        }
        float _1542 = isnan(_1466) ? _1263 : (isnan(_1263) ? _1466 : min(_1263, _1466));
        float _1543 = isnan(_1540) ? _1542 : (isnan(_1542) ? _1540 : min(_1542, _1540));
        float _1547 = (_1543 * _1231) + _1220;
        float _1548 = (_1543 * _1234) + _1224;
        float _1549 = (_1543 * _1237) + _1228;
        float _1550 = _1543 * 9.9999997473787516355514526367188e-05;
        float _1552 = (-1.0) - _1550;
        float _1554 = _1550 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_1549 > _1554) || ((_1549 < _1552) || ((_1548 > _1554) || ((_1548 < _1552) || ((_1547 < _1552) || (_1547 > _1554))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1549, cbModelParam._m0[9u].z, fma(_1548, cbModelParam._m0[9u].y, _1547 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1549, cbModelParam._m0[10u].z, fma(_1548, cbModelParam._m0[10u].y, _1547 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1549, cbModelParam._m0[11u].z, fma(_1548, cbModelParam._m0[11u].y, _1547 * cbModelParam._m0[11u].x))), _1171);
            frontier_phi_15_36_ladder = _1625.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _1625.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _1625.x * cbModelParam._m0[1u].y;
        }
        _1253 = frontier_phi_15_36_ladder_2;
        _1255 = frontier_phi_15_36_ladder_1;
        _1257 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1241 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_392, _393, _394), _1171);
        _1253 = _1241.x * cbModelParam._m0[1u].y;
        _1255 = _1241.y * cbModelParam._m0[1u].y;
        _1257 = _1241.z * cbModelParam._m0[1u].y;
    }
    float _1260 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1353;
    float _1355;
    float _1357;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1317 = fma(_424, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _416)) + cbModelParam._m0[21u].w;
        float _1321 = fma(_424, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _416)) + cbModelParam._m0[22u].w;
        float _1325 = fma(_424, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _416)) + cbModelParam._m0[23u].w;
        float _1328 = fma(_394, cbModelParam._m0[21u].z, fma(_393, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _392));
        float _1331 = fma(_394, cbModelParam._m0[22u].z, fma(_393, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _392));
        float _1334 = fma(_394, cbModelParam._m0[23u].z, fma(_393, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _392));
        float _1471;
        if (_1328 > 0.0)
        {
            _1471 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1471 = frontier_phi_27_23_ladder;
        }
        float _1567;
        if (_1331 > 0.0)
        {
            _1567 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1567 = frontier_phi_38_34_ladder;
        }
        float _1784;
        if (_1334 > 0.0)
        {
            _1784 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _1784 = frontier_phi_47_44_ladder;
        }
        float _1786 = isnan(_1567) ? _1471 : (isnan(_1471) ? _1567 : min(_1471, _1567));
        float _1787 = isnan(_1784) ? _1786 : (isnan(_1786) ? _1784 : min(_1786, _1784));
        float _1791 = (_1787 * _1328) + _1317;
        float _1792 = (_1787 * _1331) + _1321;
        float _1793 = (_1787 * _1334) + _1325;
        float _1794 = _1787 * 9.9999997473787516355514526367188e-05;
        float _1795 = (-1.0) - _1794;
        float _1797 = _1794 + 1.0;
        float frontier_phi_24_47_ladder;
        float frontier_phi_24_47_ladder_1;
        float frontier_phi_24_47_ladder_2;
        if ((_1793 > _1797) || ((_1793 < _1795) || ((_1792 > _1797) || ((_1792 < _1795) || ((_1791 < _1795) || (_1791 > _1797))))))
        {
            frontier_phi_24_47_ladder = 0.0;
            frontier_phi_24_47_ladder_1 = 0.0;
            frontier_phi_24_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1793, cbModelParam._m0[17u].z, fma(_1792, cbModelParam._m0[17u].y, _1791 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1793, cbModelParam._m0[18u].z, fma(_1792, cbModelParam._m0[18u].y, _1791 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1793, cbModelParam._m0[19u].z, fma(_1792, cbModelParam._m0[19u].y, _1791 * cbModelParam._m0[19u].x))), _1260);
            frontier_phi_24_47_ladder = _1884.z * cbModelParam._m0[1u].z;
            frontier_phi_24_47_ladder_1 = _1884.y * cbModelParam._m0[1u].z;
            frontier_phi_24_47_ladder_2 = _1884.x * cbModelParam._m0[1u].z;
        }
        _1353 = frontier_phi_24_47_ladder_2;
        _1355 = frontier_phi_24_47_ladder_1;
        _1357 = frontier_phi_24_47_ladder;
    }
    else
    {
        vec4 _1337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_392, _393, _394), _1260);
        _1353 = _1337.x * cbModelParam._m0[1u].z;
        _1355 = _1337.y * cbModelParam._m0[1u].z;
        _1357 = _1337.z * cbModelParam._m0[1u].z;
    }
    float _1369 = _383 * 0.01200000010430812835693359375;
    float _1371 = _1369 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1372 = _1369 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1373 = _1369 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1376 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, _1371 * cbSceneParam._m0[91u].x));
    vec4 _1390 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_316, _317));
    float _1392 = _1390.w;
    float _1404 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1392);
    float _1405 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1392);
    float _1406 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1392);
    uvec4 _1410 = floatBitsToUint(cbInstanceData._m0[_357 + 5u]);
    uint _1412 = _1410.x * 14u;
    uint _1413 = _1412 + 13u;
    float _1420 = _383 + (-1.0);
    float _1426 = (cbLight._m0[_1413].x * _1420) + 1.0;
    float _1427 = (cbLight._m0[_1413].y * _1420) + 1.0;
    float _1428 = (cbLight._m0[_1413].z * _1420) + 1.0;
    float _1429 = (cbLight._m0[_1413].w * _1420) + 1.0;
    uint _1431 = _1412 + 4u;
    float _1443 = dot(vec3(cbLight._m0[_1412].xyz), vec3(_227, _228, _229));
    float _1446 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
    float _1447 = cbLight._m0[_1431].x * _1404;
    float _1448 = cbLight._m0[_1431].y * _1405;
    float _1449 = cbLight._m0[_1431].z * _1406;
    uint _1450 = _1412 + 5u;
    float _1462 = dot(vec3(cbLight._m0[_1412 | 1u].xyz), vec3(_227, _228, _229));
    float _1465 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
    float _1530;
    float _1531;
    float _1532;
    if (_230 == 0.0)
    {
        float _3532 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _3543 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1484 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.3183098733425140380859375;
        float _1486 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.3183098733425140380859375;
        _1530 = ((cbLight._m0[_1450].x * _1465) * _1486) + ((_1447 * _1446) * _1484);
        _1531 = ((_1465 * cbLight._m0[_1450].y) * _1486) + ((_1448 * _1446) * _1484);
        _1532 = ((_1465 * cbLight._m0[_1450].z) * _1486) + ((_1449 * _1446) * _1484);
    }
    else
    {
        float _1496 = _1443 + _230;
        float _1499 = (_230 * 2.0) + 1.0;
        float _1500 = (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) / _1499;
        float _1507 = _1462 + _230;
        float _1509 = (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) / _1499;
        _1530 = (((_1509 * cbLight._m0[_1450].x) * _1465) + ((_1447 * _1500) * _1446)) * 0.3183098733425140380859375;
        _1531 = (((_1509 * cbLight._m0[_1450].y) * _1465) + ((_1448 * _1500) * _1446)) * 0.3183098733425140380859375;
        _1532 = (((_1509 * cbLight._m0[_1450].z) * _1465) + ((_1449 * _1500) * _1446)) * 0.3183098733425140380859375;
    }
    uvec4 _1537 = floatBitsToUint(cbLight._m0[_1412 + 12u]);
    bool _1539 = _1537.x == 0u;
    float _1572;
    float _1574;
    float _1576;
    if (_1539)
    {
        _1572 = _1530;
        _1574 = _1531;
        _1576 = _1532;
    }
    else
    {
        uint _1580 = _1412 + 6u;
        float _1596 = (dot(vec3(cbLight._m0[_1412 + 2u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1597 = _1596 * _1596;
        float _3564 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1599 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1572 = (((cbLight._m0[_1580].x * 0.3183098733425140380859375) * _1598) * _1599) + _1530;
        _1574 = (((cbLight._m0[_1580].y * 0.3183098733425140380859375) * _1598) * _1599) + _1531;
        _1576 = (((cbLight._m0[_1580].z * 0.3183098733425140380859375) * _1598) * _1599) + _1532;
    }
    bool _1579 = _1537.y == 0u;
    float _1634;
    float _1636;
    float _1638;
    if (_1579)
    {
        _1634 = _1572;
        _1636 = _1574;
        _1638 = _1576;
    }
    else
    {
        uint _1755 = _1412 + 7u;
        float _1771 = (dot(vec3(cbLight._m0[_1412 + 3u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3580 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1774 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1634 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1572;
        _1636 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1574;
        _1638 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1576;
    }
    uint _1640 = _1412 + 8u;
    float _1651 = cbLight._m0[_1412].x + _308;
    float _1652 = cbLight._m0[_1412].y + _309;
    float _1653 = cbLight._m0[_1412].z + _310;
    float _1657 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
    float _1661 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1412].xyz));
    float _3596 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _1665 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1412].xyz), vec3(_1651 * _1657, _1652 * _1657, _1653 * _1657));
    float _3618 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1677 = (exp2(log2(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1683 = (0.5 / ((_1664 + 9.9999999392252902907785028219223e-09) + _1665)) * _1664;
    float _3629 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1685 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.31831014156341552734375;
    float _1687 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
    uint _1700 = _1412 + 9u;
    uint _1706 = _1412 | 1u;
    float _1712 = cbLight._m0[_1706].x + _308;
    float _1713 = cbLight._m0[_1706].y + _309;
    float _1714 = cbLight._m0[_1706].z + _310;
    float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
    float _1722 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1706].xyz));
    float _3645 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_1712 * _1718, _1713 * _1718, _1714 * _1718));
    float _3656 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1735 = (exp2(log2(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1739 = (0.5 / ((_1725 + 9.9999999392252902907785028219223e-09) + _1665)) * _1725;
    float _3667 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1741 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.31831014156341552734375;
    float _1742 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
    float _1752 = (((_1735 * cbLight._m0[_1700].x) * _1741) * _1742) + ((((cbLight._m0[_1640].x * _1404) * _1677) * _1685) * _1687);
    float _1753 = (((_1735 * cbLight._m0[_1700].y) * _1741) * _1742) + ((((cbLight._m0[_1640].y * _1405) * _1677) * _1685) * _1687);
    float _1754 = (((_1735 * cbLight._m0[_1700].z) * _1741) * _1742) + ((((cbLight._m0[_1640].z * _1406) * _1677) * _1685) * _1687);
    float _1810;
    float _1812;
    float _1814;
    if (_1539)
    {
        _1810 = _1752;
        _1812 = _1753;
        _1814 = _1754;
    }
    else
    {
        uint _1816 = _1412 + 10u;
        uint _1822 = _1412 + 2u;
        float _1828 = cbLight._m0[_1822].x + _308;
        float _1829 = cbLight._m0[_1822].y + _309;
        float _1830 = cbLight._m0[_1822].z + _310;
        float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
        float _1838 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1822].xyz));
        float _3683 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1841 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1842 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_1828 * _1834, _1829 * _1834, _1830 * _1834));
        float _3694 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1855 = (0.5 / ((_1841 + 9.9999999392252902907785028219223e-09) + _1665)) * _1841;
        float _3705 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1857 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.31831014156341552734375;
        float _1858 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1810 = (((_1851 * cbLight._m0[_1816].x) * _1857) * _1858) + _1752;
        _1812 = (((_1851 * cbLight._m0[_1816].y) * _1857) * _1858) + _1753;
        _1814 = (((_1851 * cbLight._m0[_1816].z) * _1857) * _1858) + _1754;
    }
    float _1889;
    float _1891;
    float _1893;
    if (_1579)
    {
        _1889 = _1810;
        _1891 = _1812;
        _1893 = _1814;
    }
    else
    {
        uint _1900 = _1412 + 11u;
        uint _1906 = _1412 + 3u;
        float _1912 = cbLight._m0[_1906].x + _308;
        float _1913 = cbLight._m0[_1906].y + _309;
        float _1914 = cbLight._m0[_1906].z + _310;
        float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
        float _1922 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1906].xyz));
        float _3721 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_1912 * _1918, _1913 * _1918, _1914 * _1918));
        float _3732 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1939 = (0.5 / ((_1925 + 9.9999999392252902907785028219223e-09) + _1665)) * _1925;
        float _3743 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1941 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.31831014156341552734375;
        float _1942 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1889 = (((_1935 * cbLight._m0[_1900].x) * _1941) * _1942) + _1810;
        _1891 = (((_1935 * cbLight._m0[_1900].y) * _1941) * _1942) + _1812;
        _1893 = (((_1935 * cbLight._m0[_1900].z) * _1941) * _1942) + _1814;
    }
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    if (_1410.y == 0u)
    {
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1991;
        float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1991;
        float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1991;
        uvec4 _2006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2007 = _2006.x;
        uint _2018 = uint((float(_2006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _317) / _2007))) + floor(float(uint(cbSceneParam._m0[85u].x * _316) / _2007)));
        float _2028 = (log2(_1994 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2029 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        uint _2032 = uint(isnan(14.0) ? _2029 : (isnan(_2029) ? 14.0 : min(_2029, 14.0)));
        uvec4 _2037 = texelFetch(g_lightClusterGridBuffer, int(((_2032 << 2u) + (_2018 << 6u)) >> 2u));
        uint _2038 = _2037.x;
        uint _2039 = _2006.z;
        float _2063;
        float _2065;
        float _2067;
        float _2069;
        float _2071;
        float _2073;
        if (((((1u << ((_2039 >> 4u) & 15u)) + 4294967295u) & _2038) == 0u) || ((_2039 & 240u) == 0u))
        {
            _2063 = 0.0;
            _2065 = 0.0;
            _2067 = 0.0;
            _2069 = 0.0;
            _2071 = 0.0;
            _2073 = 0.0;
        }
        else
        {
            float _2064;
            float _2066;
            float _2068;
            float _2070;
            float _2072;
            float _2074;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            uint _2253 = 0u;
            uint _2262;
            bool _2263;
            for (;;)
            {
                _2262 = texelFetch(g_lightClassification, int((((_2032 << 5u) + (_2018 << 9u)) + (_2253 << 2u)) >> 2u)).x;
                _2263 = _2262 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2263)
                {
                    frontier_phi_66_pred = _2247;
                    frontier_phi_66_pred_1 = _2252;
                    frontier_phi_66_pred_2 = _2251;
                    frontier_phi_66_pred_3 = _2250;
                    frontier_phi_66_pred_4 = _2249;
                    frontier_phi_66_pred_5 = _2248;
                }
                else
                {
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    uint _2431;
                    _2425 = _2247;
                    _2426 = _2248;
                    _2427 = _2249;
                    _2428 = _2250;
                    _2429 = _2251;
                    _2430 = _2252;
                    _2431 = _2262;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    for (;;)
                    {
                        uint _2435 = uint(findLSB(_2431)) + (_2253 << 5u);
                        uint _2432 = (_2431 + 4294967295u) & _2431;
                        uint _2437 = _2435 * 48u;
                        vec4 _2451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 3u)).x));
                        uint _2457 = (_2435 * 48u) + 4u;
                        vec4 _2470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2457)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 3u)).x));
                        float _2471 = _2470.x;
                        float _2472 = _2470.y;
                        float _2473 = _2470.z;
                        uint _2476 = (_2435 * 48u) + 8u;
                        vec3 _2487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2476)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 2u)).x));
                        uint _2492 = (_2435 * 48u) + 12u;
                        vec2 _2500 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x));
                        float _2506 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
                        float _2507 = _2506 * _1992;
                        float _2508 = _2506 * _1993;
                        float _2509 = _2506 * _1994;
                        float _2510 = _2451.x - _1992;
                        float _2511 = _2451.y - _1993;
                        float _2512 = _2451.z - _1994;
                        float _2513 = dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512));
                        float _2516 = inversesqrt(_2513);
                        float _2517 = _2516 * _2510;
                        float _2518 = _2516 * _2511;
                        float _2519 = _2516 * _2512;
                        float _2525 = 1.0 - (_2513 * _2451.w);
                        float _3769 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _2526 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                        float _2527 = sqrt(_2513) * _2470.w;
                        float _2530 = 1.39999997615814208984375 / (_2527 + 1.39999997615814208984375);
                        float _2531 = _2530 * _2530;
                        float _2532 = 1.0 - _2531;
                        float _2534 = (_2532 * _2532) * _230;
                        float _2536 = (_2532 * dot(vec3(_338, _341, _344), vec3(_2517, _2518, _2519))) + _2531;
                        float _2537 = _2536 + _2534;
                        float _2542 = _2527 * _2527;
                        float _2547 = ((isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))) * _2526) / (((_2534 * 2.0) + 1.0) * ((_2542 * 0.699999988079071044921875) + 1.0));
                        float _2551 = dot(vec3(_2517, _2518, _2519), vec3(_2507, _2508, _2509));
                        float _3785 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
                        float _2558 = dot(vec3((-0.0) - _2507, (-0.0) - _2508, (-0.0) - _2509), vec3(_338, _341, _344)) + 1.0;
                        float _2560 = (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * 0.5;
                        float _2567 = ((_2560 * _2560) * _2500.x) * exp2((_2500.y * 32.0) * log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
                        float _2569 = _230 / (_230 + 1.0);
                        float _2585 = (-0.0) - _1992;
                        float _2586 = (-0.0) - _1993;
                        float _2587 = (-0.0) - _1994;
                        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
                        float _2595 = dot(vec3(_338, _341, _344), vec3(_2591 * _2585, _2591 * _2586, _2591 * _2587));
                        float _3801 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                        float _3812 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _2599 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                        float _2603 = (0.5 / (((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) + 9.9999999392252902907785028219223e-09) + _2599)) * _2599;
                        float _3823 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _2612 = (((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 3.1415927410125732421875) / ((_2542 * 2.1991131305694580078125) + 3.141590118408203125)) * _2526;
                        _2359 = (((((_2471 * 0.3183098733425140380859375) * _2569) * _2567) + _2471) * _2547) + _2428;
                        _2360 = (((((_2472 * 0.3183098733425140380859375) * _2569) * _2567) + _2472) * _2547) + _2429;
                        _2361 = (((((_2473 * 0.3183098733425140380859375) * _2569) * _2567) + _2473) * _2547) + _2430;
                        _2356 = (_2612 * _2487.x) + _2425;
                        _2357 = (_2612 * _2487.y) + _2426;
                        _2358 = (_2612 * _2487.z) + _2427;
                        if (_2432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2425 = _2356;
                            _2426 = _2357;
                            _2427 = _2358;
                            _2428 = _2359;
                            _2429 = _2360;
                            _2430 = _2361;
                            _2431 = _2432;
                        }
                    }
                    frontier_phi_66_pred = _2356;
                    frontier_phi_66_pred_1 = _2361;
                    frontier_phi_66_pred_2 = _2360;
                    frontier_phi_66_pred_3 = _2359;
                    frontier_phi_66_pred_4 = _2358;
                    frontier_phi_66_pred_5 = _2357;
                }
                _2064 = frontier_phi_66_pred;
                _2074 = frontier_phi_66_pred_1;
                _2072 = frontier_phi_66_pred_2;
                _2070 = frontier_phi_66_pred_3;
                _2068 = frontier_phi_66_pred_4;
                _2066 = frontier_phi_66_pred_5;
                uint _2254 = _2253 + 1u;
                if (_2254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2247 = _2064;
                    _2248 = _2066;
                    _2249 = _2068;
                    _2250 = _2070;
                    _2251 = _2072;
                    _2252 = _2074;
                    _2253 = _2254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2063 = _2064;
            _2065 = _2066;
            _2067 = _2068;
            _2069 = _2070;
            _2071 = _2072;
            _2073 = _2074;
        }
        uvec4 _2077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2078 = _2077.z;
        uint _2080 = (_2078 >> 8u) & 15u;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((4294967295u << _2080) & _2038) == 0u)
        {
            _2215 = _2063;
            _2217 = _2065;
            _2219 = _2067;
            _2221 = _2069;
            _2223 = _2071;
            _2225 = _2073;
        }
        else
        {
            float _2240 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
            float _2241 = _2240 * _1992;
            float _2242 = _2240 * _1993;
            float _2243 = _2240 * _1994;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2080 < ((_2078 >> 12u) & 15u))
            {
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2408 = _2063;
                float _2409 = _2065;
                float _2410 = _2067;
                float _2411 = _2069;
                float _2412 = _2071;
                float _2413 = _2073;
                uint _2414 = _2080;
                uint _2423;
                bool _2424;
                for (;;)
                {
                    _2423 = texelFetch(g_lightClassification, int((((_2032 << 5u) + (_2018 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                    _2424 = _2423 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2424)
                    {
                        frontier_phi_74_pred = _2413;
                        frontier_phi_74_pred_1 = _2412;
                        frontier_phi_74_pred_2 = _2411;
                        frontier_phi_74_pred_3 = _2410;
                        frontier_phi_74_pred_4 = _2409;
                        frontier_phi_74_pred_5 = _2408;
                    }
                    else
                    {
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2668 = _2408;
                        float _2669 = _2409;
                        float _2670 = _2410;
                        float _2671 = _2411;
                        float _2672 = _2412;
                        float _2673 = _2413;
                        uint _2674 = _2423;
                        uint _2675;
                        vec4 _2700;
                        float _2701;
                        vec4 _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        vec3 _2731;
                        vec2 _2740;
                        vec4 _2756;
                        vec4 _2772;
                        float _2819;
                        bool _2820;
                        for (;;)
                        {
                            uint _2685 = ((_2414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2674));
                            _2675 = (_2674 + 4294967295u) & _2674;
                            uint _2687 = _2685 * 40u;
                            _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            _2701 = _2700.w;
                            uint _2703 = (_2685 * 40u) + 4u;
                            _2716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 3u)).x));
                            _2717 = _2716.x;
                            _2718 = _2716.y;
                            _2719 = _2716.z;
                            uint _2721 = (_2685 * 40u) + 8u;
                            _2731 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x));
                            uint _2733 = (_2685 * 40u) + 12u;
                            _2740 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x));
                            uint _2743 = (_2685 * 40u) + 16u;
                            _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            uint _2759 = (_2685 * 40u) + 20u;
                            _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            uint _2775 = (_2685 * 40u) + 24u;
                            vec4 _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2794 = (_2685 * 40u) + 28u;
                            vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            _2819 = fma(_1994, _2807.z, fma(_1993, _2807.y, _2807.x * _1992)) + _2807.w;
                            _2820 = !((fma(_1994, _2788.z, fma(_1993, _2788.y, _2788.x * _1992)) + _2788.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2820)
                            {
                                float _2846 = _2700.x - _1992;
                                float _2847 = _2700.y - _1993;
                                float _2848 = _2700.z - _1994;
                                float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                                float _2852 = inversesqrt(_2849);
                                float _2853 = _2852 * _2846;
                                float _2854 = _2852 * _2847;
                                float _2855 = _2852 * _2848;
                                float _2859 = 1.0 - (_2849 / (_2701 * _2701));
                                float _3834 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                                float _2864 = sqrt(_2849) * _2716.w;
                                float _2866 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                                float _2867 = _2866 * _2866;
                                float _2868 = 1.0 - _2867;
                                float _2870 = (_2868 * _2868) * _230;
                                float _2873 = ((_2868 * dot(vec3(_2853, _2854, _2855), vec3(_338, _341, _344))) + _2867) + _2870;
                                float _2878 = _2864 * _2864;
                                float _2883 = (fma(_1994, _2756.z, fma(_1993, _2756.y, _2756.x * _1992)) + _2756.w) / _2819;
                                float _2884 = (fma(_1994, _2772.z, fma(_1993, _2772.y, _2772.x * _1992)) + _2772.w) / _2819;
                                float _2888 = 1.0 - dot(vec2(_2883, _2884), vec2(_2883, _2884));
                                float _3850 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2889 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2890 = _2889 * (((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2860) / (((_2870 * 2.0) + 1.0) * ((_2878 * 0.699999988079071044921875) + 1.0)));
                                float _2891 = (-0.0) - _2241;
                                float _2892 = (-0.0) - _2242;
                                float _2893 = (-0.0) - _2243;
                                float _2894 = dot(vec3(_2853, _2854, _2855), vec3(_2241, _2242, _2243));
                                float _3861 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                                float _2901 = dot(vec3(_2891, _2892, _2893), vec3(_338, _341, _344)) + 1.0;
                                float _2903 = (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * 0.5;
                                float _2910 = ((_2903 * _2903) * _2740.x) * exp2((_2740.y * 32.0) * log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
                                float _2912 = _230 / (_230 + 1.0);
                                float _2928 = dot(vec3(_338, _341, _344), vec3(_2891, _2892, _2893));
                                float _3877 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                                float _2936 = (_2868 * dot(vec3(_338, _341, _344), vec3(_2853, _2854, _2855))) + _2867;
                                float _3888 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2937 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                                float _2941 = (0.5 / (((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) + 9.9999999392252902907785028219223e-09) + _2937)) * _2937;
                                float _3899 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2948 = (_2889 * _2860) * (((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 3.1415927410125732421875) / ((_2878 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = ((((_2719 * 0.3183098733425140380859375) * _2912) * _2910) + _2719) * _2890;
                                frontier_phi_80_pred_1 = ((((_2718 * 0.3183098733425140380859375) * _2912) * _2910) + _2718) * _2890;
                                frontier_phi_80_pred_2 = ((((_2717 * 0.3183098733425140380859375) * _2912) * _2910) + _2717) * _2890;
                                frontier_phi_80_pred_3 = _2948 * _2731.z;
                                frontier_phi_80_pred_4 = _2948 * _2731.y;
                                frontier_phi_80_pred_5 = _2948 * _2731.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2957 = frontier_phi_80_pred;
                            _2956 = frontier_phi_80_pred_1;
                            _2955 = frontier_phi_80_pred_2;
                            _2954 = frontier_phi_80_pred_3;
                            _2953 = frontier_phi_80_pred_4;
                            _2952 = frontier_phi_80_pred_5;
                            _2658 = _2955 + _2671;
                            _2659 = _2956 + _2672;
                            _2660 = _2957 + _2673;
                            _2655 = _2952 + _2668;
                            _2656 = _2953 + _2669;
                            _2657 = _2954 + _2670;
                            if (_2675 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2668 = _2655;
                                _2669 = _2656;
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2675;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2660;
                        frontier_phi_74_pred_1 = _2659;
                        frontier_phi_74_pred_2 = _2658;
                        frontier_phi_74_pred_3 = _2657;
                        frontier_phi_74_pred_4 = _2656;
                        frontier_phi_74_pred_5 = _2655;
                    }
                    _2226 = frontier_phi_74_pred;
                    _2224 = frontier_phi_74_pred_1;
                    _2222 = frontier_phi_74_pred_2;
                    _2220 = frontier_phi_74_pred_3;
                    _2218 = frontier_phi_74_pred_4;
                    _2216 = frontier_phi_74_pred_5;
                    uint _2415 = _2414 + 1u;
                    if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2408 = _2216;
                        _2409 = _2218;
                        _2410 = _2220;
                        _2411 = _2222;
                        _2412 = _2224;
                        _2413 = _2226;
                        _2414 = _2415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2220;
                frontier_phi_60_61_ladder_1 = _2226;
                frontier_phi_60_61_ladder_2 = _2224;
                frontier_phi_60_61_ladder_3 = _2222;
                frontier_phi_60_61_ladder_4 = _2218;
                frontier_phi_60_61_ladder_5 = _2216;
            }
            else
            {
                frontier_phi_60_61_ladder = _2067;
                frontier_phi_60_61_ladder_1 = _2073;
                frontier_phi_60_61_ladder_2 = _2071;
                frontier_phi_60_61_ladder_3 = _2069;
                frontier_phi_60_61_ladder_4 = _2065;
                frontier_phi_60_61_ladder_5 = _2063;
            }
            _2215 = frontier_phi_60_61_ladder_5;
            _2217 = frontier_phi_60_61_ladder_4;
            _2219 = frontier_phi_60_61_ladder;
            _2221 = frontier_phi_60_61_ladder_3;
            _2223 = frontier_phi_60_61_ladder_2;
            _2225 = frontier_phi_60_61_ladder_1;
        }
        float _2230 = isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0));
        _2050 = (_2230 * _2221) + _1634;
        _2052 = (_2230 * _2223) + _1636;
        _2054 = (_2230 * _2225) + _1638;
        _2056 = ((_2215 * 0.039999999105930328369140625) * _2230) + _1889;
        _2058 = ((_2217 * 0.039999999105930328369140625) * _2230) + _1891;
        _2060 = ((_2219 * 0.039999999105930328369140625) * _2230) + _1893;
    }
    else
    {
        _2050 = _1634;
        _2052 = _1636;
        _2054 = _1638;
        _2056 = _1889;
        _2058 = _1891;
        _2060 = _1893;
    }
    float _2154;
    float _2155;
    float _2156;
    if (_230 > 0.0)
    {
        uint _2084 = _1412 + 4u;
        float _2090 = (-0.0) - _308;
        float _2091 = (-0.0) - _309;
        float _2092 = (-0.0) - _310;
        float _2093 = dot(vec3(cbLight._m0[_1412].xyz), vec3(_2090, _2091, _2092));
        float _3915 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2100 = dot(vec3(_308, _309, _310), vec3(_227, _228, _229)) + 1.0;
        float _2102 = (isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * 0.5;
        float _2107 = _2102 * _2102;
        float _2108 = _2107 * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 32.0);
        float _2110 = _230 / (_230 + 1.0);
        float _2111 = isnan(_1426) ? 1.0 : (isnan(1.0) ? _1426 : min(1.0, _1426));
        uint _2124 = _1412 + 5u;
        float _2130 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_2090, _2091, _2092));
        float _3936 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2137 = _2107 * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 32.0);
        float _2138 = isnan(_1427) ? 1.0 : (isnan(1.0) ? _1427 : min(1.0, _1427));
        _2154 = ((((_2137 * cbLight._m0[_2124].x) * _2110) * _2138) + ((((cbLight._m0[_2084].x * _1404) * _2108) * _2110) * _2111)) * 0.3183098733425140380859375;
        _2155 = ((((_2137 * cbLight._m0[_2124].y) * _2110) * _2138) + ((((cbLight._m0[_2084].y * _1405) * _2108) * _2110) * _2111)) * 0.3183098733425140380859375;
        _2156 = ((((_2137 * cbLight._m0[_2124].z) * _2110) * _2138) + ((((cbLight._m0[_2084].z * _1406) * _2108) * _2110) * _2111)) * 0.3183098733425140380859375;
    }
    else
    {
        _2154 = 0.0;
        _2155 = 0.0;
        _2156 = 0.0;
    }
    float _3952 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3963 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3974 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _2178 = _357 + 6u;
    float _2186 = _316 / cbSceneParam._m0[86u].x;
    float _2187 = _317 / cbSceneParam._m0[86u].y;
    vec4 _2201 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2186, _2187, (log2((isnan(cbSceneParam._m0[77u].w) ? _250 : (isnan(_250) ? cbSceneParam._m0[77u].w : min(_250, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2203 = _2201.x;
    float _2204 = _2201.y;
    float _2205 = _2201.z;
    float _2206 = _2201.w;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_250 > cbSceneParam._m0[78u].w)
    {
        float _2268 = isnan(_250) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _250 : min(cbSceneParam._m0[80u].w, _250));
        float _2269 = _2268 / _250;
        float _2280 = _2269 * _301;
        float _2281 = _302 * _2269;
        float _2282 = (-0.0) - _2281;
        float _2283 = _2269 * _303;
        float _2285 = (cbSceneParam._m0[77u].w * _2282) / _2268;
        float _2286 = _2285 + cbSceneParam._m0[79u].w;
        float _2287 = cbSceneParam._m0[79u].w - _2281;
        float _2293 = sqrt(((_2280 * _2280) + (_2281 * _2281)) + (_2283 * _2283));
        float _2296 = (1.0 - (cbSceneParam._m0[77u].w / _2268)) * _2293;
        float _2301 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2303 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2617;
        if (abs((_2282 - _2285) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2617 = ((((_2286 > 0.0) ? exp2(_2301 * _2286) : (2.0 - exp2(_2303 * _2286))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2296;
        }
        else
        {
            float _2381 = 1.0 / cbSceneParam._m0[80u].x;
            float _2382 = isnan(_2287) ? _2286 : (isnan(_2286) ? _2287 : max(_2286, _2287));
            float _2383 = isnan(_2287) ? _2286 : (isnan(_2286) ? _2287 : min(_2286, _2287));
            float _2392 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : min(_2382, 0.0));
            float _2393 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : min(_2383, 0.0));
            _2617 = ((abs(_2293 / _2282) * cbSceneParam._m0[80u].y) * ((((_2392 - _2393) * 2.0) - ((exp2(_2301 * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)))) - exp2(_2301 * (isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0))))) * _2381)) - ((exp2(_2303 * _2392) - exp2(_2303 * _2393)) * _2381))) + (_2296 * cbSceneParam._m0[80u].z);
        }
        vec4 _2619 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2186, _2187, 1.0), 0.0);
        float _2628 = exp2((_2617 * (-1.44269502162933349609375)) * (1.0 - _2619.w));
        float _2629 = log2(_2628);
        float _2645 = log2(_2206);
        _2305 = (exp2(_2645 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].x)) * _2619.x) / cbSceneParam._m0[78u].x)) + _2203;
        _2307 = (exp2(_2645 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].y)) * _2619.y) / cbSceneParam._m0[78u].y)) + _2204;
        _2309 = (exp2(_2645 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].z)) * _2619.z) / cbSceneParam._m0[78u].z)) + _2205;
        _2311 = _2628 * _2206;
    }
    else
    {
        _2305 = _2203;
        _2307 = _2204;
        _2309 = _2205;
        _2311 = _2206;
    }
    float _2323 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2324 = _2323 == 3.0;
    float _2326 = log2(_2311);
    float _2333 = exp2(_2326 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * ((_2050 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _383)) + _2154)) + ((_2056 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _1162)) * cbPerFrame._m0[3u].x));
    float _2334 = exp2(_2326 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * ((_2052 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _383)) + _2155)) + ((_2058 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1162)) * cbPerFrame._m0[3u].x));
    float _2335 = exp2(_2326 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * ((_2054 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _383)) + _2156)) + ((_2060 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1162)) * cbPerFrame._m0[3u].x));
    float _2344 = (_2323 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2344 * (_2324 ? _2333 : (_2333 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.y = _2344 * (_2324 ? _2334 : (_2334 + (cbSceneParam._m0[72u].w * _2307)));
    SV_Target.z = _2344 * (_2324 ? _2335 : (_2335 + (cbSceneParam._m0[72u].w * _2309)));
    SV_Target.w = cbInstanceData._m0[_2178].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2178].w;
}


