#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _754;
float _3203;
float _3204;
float _3205;
float _3206;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_Edge_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.w;
    float _206 = _199.x * cbMtdParam._m0[9u].x;
    float _207 = _199.y * cbMtdParam._m0[9u].y;
    float _208 = _199.z * cbMtdParam._m0[9u].z;
    float _212 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _213 = _212 * _177;
    float _214 = _212 * _178;
    float _215 = _212 * _179;
    float _3215 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3226 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3237 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _235 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    float _293 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _294 = _287 * _293;
    float _295 = _288 * _293;
    float _296 = _289 * _293;
    vec4 _301 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _303 = _301.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _433 = sqrt(((_287 * _287) + (_288 * _288)) + (_289 * _289));
        float _439 = (cbMatDynParam._m0[5u].x * _433) + cbMatDynParam._m0[5u].y;
        float _3248 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
        float _440 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _444 = (cbMatDynParam._m0[5u].z * _433) + cbMatDynParam._m0[5u].w;
        float _3259 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) - _440)) + _440) < ((_303 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _336 = fma(_215, cbSceneParam._m0[5u].z, fma(_214, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _213));
    float _339 = fma(_215, cbSceneParam._m0[6u].z, fma(_214, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _213));
    float _342 = fma(_215, cbSceneParam._m0[7u].z, fma(_214, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _213));
    uint _355 = uint(roundEven(NORMAL.w)) * 13u;
    uint _357 = _355 + 9u;
    uint _358 = _357 + uint(cbMatDynParam._m0[0u].w);
    float _364 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_358].x;
    float _365 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_358].y;
    float _366 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_358].z;
    float _3270 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    vec4 _378 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _315, cbSceneParam._m0[86u].y * _316));
    float _381 = _378.x * TEXCOORD.z;
    float _382 = dot(vec3(_213, _214, _215), vec3(_294, _295, _296));
    float _385 = _382 * 2.0;
    float _390 = (_385 * _213) - _294;
    float _391 = (_385 * _214) - _295;
    float _392 = (_385 * _215) - _296;
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _753;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _478 = fma(_422, cbModelParam._m0[26u].z, fma(_418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _414));
        float _482 = fma(_422, cbModelParam._m0[27u].z, fma(_418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _414));
        float _486 = fma(_422, cbModelParam._m0[28u].z, fma(_418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _414));
        float _511 = _414 + _213;
        float _512 = _418 + _214;
        float _513 = _422 + _215;
        float _523 = fma(_513, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511)) - _478;
        float _524 = fma(_513, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511)) - _482;
        float _525 = fma(_513, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511)) - _486;
        float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
        float _542 = ((_529 * _523) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_478 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _543 = ((_529 * _524) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_482 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _544 = ((_529 * _525) / cbModelParam._m0[34u].z) + ((((((_486 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_547.x + (-0.5));
        float _583 = _581 * (_547.y + (-0.5));
        float _584 = _581 * (_547.z + (-0.5));
        float _591 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_554.x + (-0.5));
        float _593 = _591 * (_554.y + (-0.5));
        float _594 = _591 * (_554.z + (-0.5));
        float _601 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_561.x + (-0.5));
        float _603 = _601 * (_561.y + (-0.5));
        float _604 = _601 * (_561.z + (-0.5));
        float _611 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _611 * (_568.x + (-0.5));
        float _613 = _611 * (_568.y + (-0.5));
        float _614 = _611 * (_568.z + (-0.5));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _618 = _582 * 0.5;
        float _619 = _592 * 0.5;
        float _620 = _602 * 0.5;
        float _621 = dot(vec3(_618, _619, _620), vec3(_618, _619, _620));
        float _626 = (_621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_621);
        float _635 = (dot(vec3(_213, _214, _215), vec3(_626 * _618, _626 * _619, _626 * _620)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _645 = sqrt(((_619 * _619) + (_618 * _618)) + (_620 * _620)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _647 = _646 * 2.0;
        float _651 = (1.0 - _646) / (_646 + 1.0);
        float _3340 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _661 = ((((1.0 - _652) * (_647 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_647 + 1.0))) + _652) * _615;
        float _662 = _583 * 0.5;
        float _663 = _593 * 0.5;
        float _664 = _603 * 0.5;
        float _665 = dot(vec3(_662, _663, _664), vec3(_662, _663, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _678 = (dot(vec3(_213, _214, _215), vec3(_670 * _662, _670 * _663, _670 * _664)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _687 = sqrt(((_663 * _663) + (_662 * _662)) + (_664 * _664)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _3373 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_689 + 1.0))) + _694) * _616;
        float _704 = _584 * 0.5;
        float _705 = _594 * 0.5;
        float _706 = _604 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _720 = (dot(vec3(_213, _214, _215), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _729 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_617 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3406 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_731 + 1.0))) + _736) * _617;
        _753 = _584;
        _755 = _583;
        _756 = _582;
        _757 = _594;
        _758 = _593;
        _759 = _592;
        _760 = _604;
        _761 = _603;
        _762 = _602;
        _763 = _617;
        _764 = _616;
        _765 = _615;
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0)));
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
    }
    else
    {
        _753 = _754;
        _755 = _754;
        _756 = _754;
        _757 = _754;
        _758 = _754;
        _759 = _754;
        _760 = _754;
        _761 = _754;
        _762 = _754;
        _763 = _754;
        _764 = _754;
        _765 = _754;
        _766 = 0.0;
        _767 = 0.0;
        _768 = 0.0;
    }
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _797 = fma(_422, cbModelParam._m0[30u].z, fma(_418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _414));
        float _801 = fma(_422, cbModelParam._m0[31u].z, fma(_418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _414));
        float _805 = fma(_422, cbModelParam._m0[32u].z, fma(_418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _414));
        float _828 = _414 + _213;
        float _829 = _418 + _214;
        float _830 = _422 + _215;
        float _840 = fma(_830, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828)) - _797;
        float _841 = fma(_830, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828)) - _801;
        float _842 = fma(_830, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828)) - _805;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_797 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_801 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[35u].z) + ((((((_805 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _896 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_863.x + (-0.5));
        float _898 = _896 * (_863.y + (-0.5));
        float _899 = _896 * (_863.z + (-0.5));
        float _906 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_870.x + (-0.5));
        float _908 = _906 * (_870.y + (-0.5));
        float _909 = _906 * (_870.z + (-0.5));
        float _916 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_877.x + (-0.5));
        float _918 = _916 * (_877.y + (-0.5));
        float _919 = _916 * (_877.z + (-0.5));
        float _926 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_884.x + (-0.5));
        float _928 = _926 * (_884.y + (-0.5));
        float _929 = _926 * (_884.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_213, _214, _215), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3469 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_960 + 1.0))) + _965) * _930;
        float _975 = _898 * 0.5;
        float _976 = _908 * 0.5;
        float _977 = _918 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_213, _214, _215), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3502 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1002 + 1.0))) + _1007) * _931;
        float _1017 = _899 * 0.5;
        float _1018 = _909 * 0.5;
        float _1019 = _919 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_213, _214, _215), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3535 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1044 + 1.0))) + _1049) * _932;
        _1066 = _899;
        _1067 = _898;
        _1068 = _897;
        _1069 = _909;
        _1070 = _908;
        _1071 = _907;
        _1072 = _919;
        _1073 = _918;
        _1074 = _917;
        _1075 = _932;
        _1076 = _931;
        _1077 = _930;
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1079 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1080 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _754;
        _1067 = _754;
        _1068 = _754;
        _1069 = _754;
        _1070 = _754;
        _1071 = _754;
        _1072 = _754;
        _1073 = _754;
        _1074 = _754;
        _1075 = _754;
        _1076 = _754;
        _1077 = _754;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _766)) + _766;
    float _1091 = (cbModelParam._m0[1u].x * (_1079 - _767)) + _767;
    float _1092 = (cbModelParam._m0[1u].x * (_1080 - _768)) + _768;
    float _1113 = fma(_1092, cbSceneParam._m0[89u].z, fma(_1091, cbSceneParam._m0[89u].y, _1090 * cbSceneParam._m0[89u].x));
    float _1116 = fma(_1092, cbSceneParam._m0[90u].z, fma(_1091, cbSceneParam._m0[90u].y, _1090 * cbSceneParam._m0[90u].x));
    float _1119 = fma(_1092, cbSceneParam._m0[91u].z, fma(_1091, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1090));
    float _1134 = _390 * 0.5;
    float _1135 = _391 * 0.5;
    float _1136 = _392 * 0.5;
    float _1137 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1140 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1143 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1177;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1150 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_753, _757, _760, _763));
        float _1154 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_755, _758, _761, _764));
        float _1158 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_756, _759, _762, _765));
        float _1165 = dot(vec4(cbModelParam._m0[39u]), vec4(_1134, _1135, _1136, 1.0));
        _1177 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1165) ? 0.0 : (isnan(0.0) ? _1165 : max(0.0, _1165))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1177 = 1.0;
    }
    float _1188;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1179 = dot(vec4(cbModelParam._m0[40u]), vec4(_1134, _1135, _1136, 1.0));
        _1188 = dot(vec3(isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1179) ? 0.0 : (isnan(0.0) ? _1179 : max(0.0, _1179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1188 = 1.0;
    }
    float _1192 = (_1188 * cbModelParam._m0[1u].x) + (_1177 * (1.0 - cbModelParam._m0[1u].x));
    float _1201 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1283;
    float _1285;
    float _1287;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1250 = fma(_422, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _414)) + cbModelParam._m0[13u].w;
        float _1254 = fma(_422, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _414)) + cbModelParam._m0[14u].w;
        float _1258 = fma(_422, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _414)) + cbModelParam._m0[15u].w;
        float _1261 = fma(_392, cbModelParam._m0[13u].z, fma(_391, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _390));
        float _1264 = fma(_392, cbModelParam._m0[14u].z, fma(_391, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _390));
        float _1267 = fma(_392, cbModelParam._m0[15u].z, fma(_391, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _390));
        float _1293;
        if (_1261 > 0.0)
        {
            _1293 = abs((1.0 - _1250) / _1261);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1250 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1293 = frontier_phi_19_17_ladder;
        }
        float _1468;
        if (_1264 > 0.0)
        {
            _1468 = abs((1.0 - _1254) / _1264);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1254 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1468 = frontier_phi_28_24_ladder;
        }
        float _1765;
        if (_1267 > 0.0)
        {
            _1765 = abs((1.0 - _1258) / _1267);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1258 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1765 = frontier_phi_40_35_ladder;
        }
        float _1767 = isnan(_1468) ? _1293 : (isnan(_1293) ? _1468 : min(_1293, _1468));
        float _1768 = isnan(_1765) ? _1767 : (isnan(_1767) ? _1765 : min(_1767, _1765));
        float _1772 = (_1768 * _1261) + _1250;
        float _1773 = (_1768 * _1264) + _1254;
        float _1774 = (_1768 * _1267) + _1258;
        float _1775 = _1768 * 9.9999997473787516355514526367188e-05;
        float _1777 = (-1.0) - _1775;
        float _1779 = _1775 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1774 > _1779) || ((_1774 < _1777) || ((_1773 > _1779) || ((_1773 < _1777) || ((_1772 < _1777) || (_1772 > _1779))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1774, cbModelParam._m0[9u].z, fma(_1773, cbModelParam._m0[9u].y, _1772 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1774, cbModelParam._m0[10u].z, fma(_1773, cbModelParam._m0[10u].y, _1772 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1774, cbModelParam._m0[11u].z, fma(_1773, cbModelParam._m0[11u].y, _1772 * cbModelParam._m0[11u].x))), _1201);
            frontier_phi_18_40_ladder = _1919.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1919.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1919.x * cbModelParam._m0[1u].y;
        }
        _1283 = frontier_phi_18_40_ladder_2;
        _1285 = frontier_phi_18_40_ladder_1;
        _1287 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_390, _391, _392), _1201);
        _1283 = _1271.x * cbModelParam._m0[1u].y;
        _1285 = _1271.y * cbModelParam._m0[1u].y;
        _1287 = _1271.z * cbModelParam._m0[1u].y;
    }
    float _1290 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1347 = fma(_422, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _414)) + cbModelParam._m0[21u].w;
        float _1351 = fma(_422, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _414)) + cbModelParam._m0[22u].w;
        float _1355 = fma(_422, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _414)) + cbModelParam._m0[23u].w;
        float _1358 = fma(_392, cbModelParam._m0[21u].z, fma(_391, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _390));
        float _1361 = fma(_392, cbModelParam._m0[22u].z, fma(_391, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _390));
        float _1364 = fma(_392, cbModelParam._m0[23u].z, fma(_391, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _390));
        float _1473;
        if (_1358 > 0.0)
        {
            _1473 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1473 = frontier_phi_30_26_ladder;
        }
        float _1792;
        if (_1361 > 0.0)
        {
            _1792 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1792 = frontier_phi_42_37_ladder;
        }
        float _2065;
        if (_1364 > 0.0)
        {
            _2065 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2065 = frontier_phi_52_49_ladder;
        }
        float _2067 = isnan(_1792) ? _1473 : (isnan(_1473) ? _1792 : min(_1473, _1792));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1358) + _1347;
        float _2073 = (_2068 * _1361) + _1351;
        float _2074 = (_2068 * _1364) + _1355;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2075;
        float _2078 = _2075 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2074 > _2078) || ((_2074 < _2076) || ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 < _2076) || (_2072 > _2078))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2074, cbModelParam._m0[17u].z, fma(_2073, cbModelParam._m0[17u].y, _2072 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2074, cbModelParam._m0[18u].z, fma(_2073, cbModelParam._m0[18u].y, _2072 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2074, cbModelParam._m0[19u].z, fma(_2073, cbModelParam._m0[19u].y, _2072 * cbModelParam._m0[19u].x))), _1290);
            frontier_phi_27_52_ladder = _2165.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2165.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2165.x * cbModelParam._m0[1u].z;
        }
        _1383 = frontier_phi_27_52_ladder_2;
        _1385 = frontier_phi_27_52_ladder_1;
        _1387 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_390, _391, _392), _1290);
        _1383 = _1367.x * cbModelParam._m0[1u].z;
        _1385 = _1367.y * cbModelParam._m0[1u].z;
        _1387 = _1367.z * cbModelParam._m0[1u].z;
    }
    float _1399 = _381 * 0.01200000010430812835693359375;
    float _1401 = _1399 * ((cbModelParam._m0[1u].w * (_1383 - _1283)) + _1283);
    float _1402 = _1399 * ((cbModelParam._m0[1u].w * (_1385 - _1285)) + _1285);
    float _1403 = _1399 * ((cbModelParam._m0[1u].w * (_1387 - _1287)) + _1287);
    float _1406 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, _1401 * cbSceneParam._m0[91u].x));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1459 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1460 = _1447 / _1459;
    float _1461 = _1451 / _1459;
    float _1462 = _1455 / _1459;
    float _1609;
    float _1610;
    float _1611;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1489 = ((uint(_1462 > cbSceneParam._m0[59u].y) + uint(_1462 > cbSceneParam._m0[59u].x)) + uint(_1462 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1490 = _1489 + 43u;
        uint _1498 = _1489 + 44u;
        uint _1506 = _1489 + 45u;
        uint _1514 = _1489 + 46u;
        float _1525 = fma(_1459, cbSceneParam._m0[_1490].w, fma(_1455, cbSceneParam._m0[_1490].z, fma(_1451, cbSceneParam._m0[_1490].y, _1447 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1459, cbSceneParam._m0[_1498].w, fma(_1455, cbSceneParam._m0[_1498].z, fma(_1451, cbSceneParam._m0[_1498].y, _1447 * cbSceneParam._m0[_1498].x)));
        float _1537 = fma(_1459, cbSceneParam._m0[_1514].w, fma(_1455, cbSceneParam._m0[_1514].z, fma(_1451, cbSceneParam._m0[_1514].y, _1447 * cbSceneParam._m0[_1514].x)));
        float _1542 = cbSceneParam._m0[33u].z * _1537;
        float _1544 = cbSceneParam._m0[33u].w * _1537;
        float _1547 = fma(_1459, cbSceneParam._m0[_1506].w, fma(_1455, cbSceneParam._m0[_1506].z, fma(_1451, cbSceneParam._m0[_1506].y, _1447 * cbSceneParam._m0[_1506].x))) / _1537;
        float _1595 = (cbSceneParam._m0[33u].x - sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462))) * cbSceneParam._m0[33u].y;
        float _3661 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1602 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1542 + _1525) / _1537, (_1544 + _1529) / _1537), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1544 + _1525) / _1537, (_1529 - _1542) / _1537), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1525 - _1542) / _1537, (_1529 - _1544) / _1537), _1547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1525 - _1544) / _1537, (_1542 + _1529) / _1537), _1547), 0.0)).x), vec4(0.25)));
        _1609 = 1.0 - (_1602 * cbSceneParam._m0[34u].x);
        _1610 = 1.0 - (_1602 * cbSceneParam._m0[34u].y);
        _1611 = 1.0 - (_1602 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1609 = 1.0;
        _1610 = 1.0;
        _1611 = 1.0;
    }
    float _1675;
    float _1677;
    float _1679;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1663 = fma(_1459, cbSceneParam._m0[63u].w, fma(_1455, cbSceneParam._m0[63u].z, fma(_1451, cbSceneParam._m0[63u].y, _1447 * cbSceneParam._m0[63u].x)));
        float _1664 = fma(_1459, cbSceneParam._m0[60u].w, fma(_1455, cbSceneParam._m0[60u].z, fma(_1451, cbSceneParam._m0[60u].y, _1447 * cbSceneParam._m0[60u].x))) / _1663;
        float _1665 = fma(_1459, cbSceneParam._m0[61u].w, fma(_1455, cbSceneParam._m0[61u].z, fma(_1451, cbSceneParam._m0[61u].y, _1447 * cbSceneParam._m0[61u].x))) / _1663;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1664 >= cbSceneParam._m0[64u].x) && (_1665 >= cbSceneParam._m0[64u].y)) && (_1664 <= cbSceneParam._m0[64u].z)) && (_1665 <= cbSceneParam._m0[64u].w))
        {
            float _1805 = fma(_1459, cbSceneParam._m0[62u].w, fma(_1455, cbSceneParam._m0[62u].z, fma(_1451, cbSceneParam._m0[62u].y, _1447 * cbSceneParam._m0[62u].x))) / _1663;
            float _1809 = isnan(cbSceneParam._m0[41u].w) ? _1805 : (isnan(_1805) ? cbSceneParam._m0[41u].w : max(_1805, cbSceneParam._m0[41u].w));
            float _1852 = (cbSceneParam._m0[33u].x - sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462))) * cbSceneParam._m0[33u].y;
            float _3677 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
            float _1859 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1664, cbSceneParam._m0[33u].w + _1665), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1664, _1665 - cbSceneParam._m0[33u].z), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1664 - cbSceneParam._m0[33u].z, _1665 - cbSceneParam._m0[33u].w), _1809), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1664 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1665), _1809), 0.0)).x), vec4(0.25)));
            float _1863 = 1.0 - (_1859 * cbSceneParam._m0[34u].x);
            float _1864 = 1.0 - (_1859 * cbSceneParam._m0[34u].y);
            float _1865 = 1.0 - (_1859 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1864) ? _1610 : (isnan(_1610) ? _1864 : min(_1610, _1864));
            frontier_phi_39_38_ladder_1 = isnan(_1863) ? _1609 : (isnan(_1609) ? _1863 : min(_1609, _1863));
            frontier_phi_39_38_ladder_2 = isnan(_1865) ? _1611 : (isnan(_1611) ? _1865 : min(_1611, _1865));
        }
        else
        {
            frontier_phi_39_38_ladder = _1610;
            frontier_phi_39_38_ladder_1 = _1609;
            frontier_phi_39_38_ladder_2 = _1611;
        }
        _1675 = frontier_phi_39_38_ladder_1;
        _1677 = frontier_phi_39_38_ladder;
        _1679 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1675 = _1609;
        _1677 = _1610;
        _1679 = _1611;
    }
    uvec4 _1684 = floatBitsToUint(cbInstanceData._m0[_355 + 5u]);
    uint _1686 = _1684.x * 14u;
    uint _1687 = _1686 + 13u;
    float _1694 = _381 + (-1.0);
    float _1700 = (cbLight._m0[_1687].x * _1694) + 1.0;
    float _1701 = (cbLight._m0[_1687].y * _1694) + 1.0;
    float _1702 = (cbLight._m0[_1687].z * _1694) + 1.0;
    float _1703 = (cbLight._m0[_1687].w * _1694) + 1.0;
    uint _1704 = _1686 + 5u;
    float _1710 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1714 = _1686 + 4u;
    float _1724 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1728 = _1686 | 1u;
    float _1739 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_213, _214, _215));
    float _1742 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_213, _214, _215));
    float _3713 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _3724 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1747 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1749 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1756 = ((cbLight._m0[_1704].x * _1710) * _1749) + (((cbLight._m0[_1714].x * _1675) * _1724) * _1747);
    float _1757 = ((_1710 * cbLight._m0[_1704].y) * _1749) + (((cbLight._m0[_1714].y * _1677) * _1724) * _1747);
    float _1758 = ((_1710 * cbLight._m0[_1704].z) * _1749) + (((cbLight._m0[_1714].z * _1679) * _1724) * _1747);
    uvec4 _1762 = floatBitsToUint(cbLight._m0[_1686 + 12u]);
    bool _1764 = _1762.x == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1764)
    {
        _1866 = _1756;
        _1868 = _1757;
        _1870 = _1758;
    }
    else
    {
        uint _1874 = _1686 + 6u;
        float _1890 = (dot(vec3(cbLight._m0[_1686 + 2u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _1891 = _1890 * _1890;
        float _3735 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1893 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1866 = (((cbLight._m0[_1874].x * 0.3183098733425140380859375) * _1892) * _1893) + _1756;
        _1868 = (((cbLight._m0[_1874].y * 0.3183098733425140380859375) * _1892) * _1893) + _1757;
        _1870 = (((cbLight._m0[_1874].z * 0.3183098733425140380859375) * _1892) * _1893) + _1758;
    }
    bool _1873 = _1762.y == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1873)
    {
        _1928 = _1866;
        _1930 = _1868;
        _1932 = _1870;
    }
    else
    {
        uint _2036 = _1686 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1686 + 3u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _3751 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _2055 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1928 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1866;
        _1930 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1868;
        _1932 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1870;
    }
    uint _1934 = _1686 + 8u;
    float _1940 = cbLight._m0[_1686].x + _294;
    float _1941 = cbLight._m0[_1686].y + _295;
    float _1942 = cbLight._m0[_1686].z + _296;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1950 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1686].xyz));
    float _3767 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _1954 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1940 * _1946, _1941 * _1946, _1942 * _1946));
    float _3789 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1972 = (0.5 / ((_1953 + 9.9999999392252902907785028219223e-09) + _1954)) * _1953;
    float _3800 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.31831014156341552734375;
    uint _1988 = _1686 + 9u;
    float _1994 = cbLight._m0[_1728].x + _294;
    float _1995 = cbLight._m0[_1728].y + _295;
    float _1996 = cbLight._m0[_1728].z + _296;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2004 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1728].xyz));
    float _3811 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1994 * _2000, _1995 * _2000, _1996 * _2000));
    float _3822 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2017 = (exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = (0.5 / ((_2007 + 9.9999999392252902907785028219223e-09) + _1954)) * _2007;
    float _3833 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.31831014156341552734375;
    float _2033 = (((_2017 * cbLight._m0[_1988].x) * _2023) * _1710) + ((((cbLight._m0[_1934].x * _1675) * _1966) * _1974) * _1724);
    float _2034 = (((_2017 * cbLight._m0[_1988].y) * _2023) * _1710) + ((((cbLight._m0[_1934].y * _1677) * _1966) * _1974) * _1724);
    float _2035 = (((_2017 * cbLight._m0[_1988].z) * _2023) * _1710) + ((((cbLight._m0[_1934].z * _1679) * _1966) * _1974) * _1724);
    float _2091;
    float _2093;
    float _2095;
    if (_1764)
    {
        _2091 = _2033;
        _2093 = _2034;
        _2095 = _2035;
    }
    else
    {
        uint _2097 = _1686 + 10u;
        uint _2103 = _1686 + 2u;
        float _2109 = cbLight._m0[_2103].x + _294;
        float _2110 = cbLight._m0[_2103].y + _295;
        float _2111 = cbLight._m0[_2103].z + _296;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2119 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_2103].xyz));
        float _3844 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _2123 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2109 * _2115, _2110 * _2115, _2111 * _2115));
        float _3855 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2136 = (0.5 / ((_2122 + 9.9999999392252902907785028219223e-09) + _1954)) * _2122;
        float _3866 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.31831014156341552734375;
        float _2139 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2091 = (((_2132 * cbLight._m0[_2097].x) * _2138) * _2139) + _2033;
        _2093 = (((_2132 * cbLight._m0[_2097].y) * _2138) * _2139) + _2034;
        _2095 = (((_2132 * cbLight._m0[_2097].z) * _2138) * _2139) + _2035;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1873)
    {
        _2170 = _2091;
        _2172 = _2093;
        _2174 = _2095;
    }
    else
    {
        uint _2181 = _1686 + 11u;
        uint _2187 = _1686 + 3u;
        float _2193 = cbLight._m0[_2187].x + _294;
        float _2194 = cbLight._m0[_2187].y + _295;
        float _2195 = cbLight._m0[_2187].z + _296;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2203 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_2187].xyz));
        float _3882 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2193 * _2199, _2194 * _2199, _2195 * _2199));
        float _3893 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = (0.5 / ((_2206 + 9.9999999392252902907785028219223e-09) + _1954)) * _2206;
        float _3904 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2222 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.31831014156341552734375;
        float _2223 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2170 = (((_2216 * cbLight._m0[_2181].x) * _2222) * _2223) + _2091;
        _2172 = (((_2216 * cbLight._m0[_2181].y) * _2222) * _2223) + _2093;
        _2174 = (((_2216 * cbLight._m0[_2181].z) * _2222) * _2223) + _2095;
    }
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    if (_1684.y == 0u)
    {
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _316) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _315) / _2245)));
        float _2266 = (log2(_1462 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
        }
        else
        {
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2522)
                {
                    frontier_phi_73_pred = _2511;
                    frontier_phi_73_pred_1 = _2510;
                    frontier_phi_73_pred_2 = _2509;
                    frontier_phi_73_pred_3 = _2508;
                    frontier_phi_73_pred_4 = _2507;
                    frontier_phi_73_pred_5 = _2506;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2521;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2512 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _1460;
                        float _2718 = _2677.y - _1461;
                        float _2719 = _2677.z - _1462;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _3930 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * dot(vec3(_336, _339, _342), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719))) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _1460;
                        float _2753 = (-0.0) - _1461;
                        float _2754 = (-0.0) - _1462;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2762 = dot(vec3(_336, _339, _342), vec3(_2758 * _2752, _2758 * _2753, _2758 * _2754));
                        float _3946 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _3957 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2766 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2770 = (0.5 / (((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) + 9.9999999392252902907785028219223e-09) + _2766)) * _2766;
                        float _3968 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2779 = (((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 3.1415927410125732421875) / ((_2744 * 2.1991131305694580078125) + 3.141590118408203125)) * _2733;
                        _2581 = (_2748 * _2696.x) + _2654;
                        _2582 = (_2748 * _2696.y) + _2655;
                        _2583 = (_2748 * _2696.z) + _2656;
                        _2578 = (_2779 * _2713.x) + _2651;
                        _2579 = (_2779 * _2713.y) + _2652;
                        _2580 = (_2779 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_73_pred = _2583;
                    frontier_phi_73_pred_1 = _2582;
                    frontier_phi_73_pred_2 = _2581;
                    frontier_phi_73_pred_3 = _2580;
                    frontier_phi_73_pred_4 = _2579;
                    frontier_phi_73_pred_5 = _2578;
                }
                _2366 = frontier_phi_73_pred;
                _2364 = frontier_phi_73_pred_1;
                _2362 = frontier_phi_73_pred_2;
                _2360 = frontier_phi_73_pred_3;
                _2358 = frontier_phi_73_pred_4;
                _2356 = frontier_phi_73_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2356;
                    _2507 = _2358;
                    _2508 = _2360;
                    _2509 = _2362;
                    _2510 = _2364;
                    _2511 = _2366;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
        }
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.z;
        uint _2372 = (_2370 >> 8u) & 15u;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((4294967295u << _2372) & _2276) == 0u)
        {
            _2477 = _2355;
            _2479 = _2357;
            _2481 = _2359;
            _2483 = _2361;
            _2485 = _2363;
            _2487 = _2365;
        }
        else
        {
            float _2502 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2372 < ((_2370 >> 12u) & 15u))
            {
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2634 = _2355;
                float _2635 = _2357;
                float _2636 = _2359;
                float _2637 = _2361;
                float _2638 = _2363;
                float _2639 = _2365;
                uint _2640 = _2372;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2650)
                    {
                        frontier_phi_84_pred = _2638;
                        frontier_phi_84_pred_1 = _2637;
                        frontier_phi_84_pred_2 = _2636;
                        frontier_phi_84_pred_3 = _2635;
                        frontier_phi_84_pred_4 = _2634;
                        frontier_phi_84_pred_5 = _2639;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _2806 = _2634;
                        float _2807 = _2635;
                        float _2808 = _2636;
                        float _2809 = _2637;
                        float _2810 = _2638;
                        float _2811 = _2639;
                        uint _2812 = _2649;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_1462, _2933.z, fma(_1461, _2933.y, _2933.x * _1460)) + _2933.w;
                            _2946 = !((fma(_1462, _2914.z, fma(_1461, _2914.y, _2914.x * _1460)) + _2914.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _1460;
                                float _2974 = _2838.y - _1461;
                                float _2975 = _2838.z - _1462;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _3979 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2995 = 1.0 - _2994;
                                float _2997 = (_2995 * dot(vec3(_2980, _2981, _2982), vec3(_336, _339, _342))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_1462, _2882.z, fma(_1461, _2882.y, _2882.x * _1460)) + _2882.w) / _2945;
                                float _3005 = (fma(_1462, _2898.z, fma(_1461, _2898.y, _2898.x * _1460)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _3995 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3021 = dot(vec3(_336, _339, _342), vec3((-0.0) - (_1460 * _2502), (-0.0) - (_1461 * _2502), (-0.0) - (_1462 * _2502)));
                                float _4006 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3029 = (_2995 * dot(vec3(_336, _339, _342), vec3(_2980, _2981, _2982))) + _2994;
                                float _4017 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _3034 = (0.5 / (((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) + 9.9999999392252902907785028219223e-09) + _3030)) * _3030;
                                float _4028 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3041 = (_3010 * _2987) * (((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 3.1415927410125732421875) / ((_3000 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3011 * _2854.y;
                                frontier_phi_90_pred_1 = _3011 * _2854.x;
                                frontier_phi_90_pred_2 = _3041 * _2866.z;
                                frontier_phi_90_pred_3 = _3041 * _2866.y;
                                frontier_phi_90_pred_4 = _3041 * _2866.x;
                                frontier_phi_90_pred_5 = _3011 * _2854.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_90_pred;
                            _3048 = frontier_phi_90_pred_1;
                            _3047 = frontier_phi_90_pred_2;
                            _3046 = frontier_phi_90_pred_3;
                            _3045 = frontier_phi_90_pred_4;
                            _3050 = frontier_phi_90_pred_5;
                            _2796 = _3048 + _2809;
                            _2797 = _3049 + _2810;
                            _2798 = _3050 + _2811;
                            _2793 = _3045 + _2806;
                            _2794 = _3046 + _2807;
                            _2795 = _3047 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2797;
                        frontier_phi_84_pred_1 = _2796;
                        frontier_phi_84_pred_2 = _2795;
                        frontier_phi_84_pred_3 = _2794;
                        frontier_phi_84_pred_4 = _2793;
                        frontier_phi_84_pred_5 = _2798;
                    }
                    _2486 = frontier_phi_84_pred;
                    _2484 = frontier_phi_84_pred_1;
                    _2482 = frontier_phi_84_pred_2;
                    _2480 = frontier_phi_84_pred_3;
                    _2478 = frontier_phi_84_pred_4;
                    _2488 = frontier_phi_84_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2478;
                        _2635 = _2480;
                        _2636 = _2482;
                        _2637 = _2484;
                        _2638 = _2486;
                        _2639 = _2488;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2488;
                frontier_phi_65_66_ladder_1 = _2484;
                frontier_phi_65_66_ladder_2 = _2486;
                frontier_phi_65_66_ladder_3 = _2480;
                frontier_phi_65_66_ladder_4 = _2478;
                frontier_phi_65_66_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_65_66_ladder = _2365;
                frontier_phi_65_66_ladder_1 = _2361;
                frontier_phi_65_66_ladder_2 = _2363;
                frontier_phi_65_66_ladder_3 = _2357;
                frontier_phi_65_66_ladder_4 = _2355;
                frontier_phi_65_66_ladder_5 = _2359;
            }
            _2477 = frontier_phi_65_66_ladder_4;
            _2479 = frontier_phi_65_66_ladder_3;
            _2481 = frontier_phi_65_66_ladder_5;
            _2483 = frontier_phi_65_66_ladder_1;
            _2485 = frontier_phi_65_66_ladder_2;
            _2487 = frontier_phi_65_66_ladder;
        }
        float _2492 = isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0));
        _2288 = (_2492 * _2483) + _1928;
        _2290 = (_2492 * _2485) + _1930;
        _2292 = (_2492 * _2487) + _1932;
        _2294 = ((_2477 * 0.039999999105930328369140625) * _2492) + _2170;
        _2296 = ((_2479 * 0.039999999105930328369140625) * _2492) + _2172;
        _2298 = ((_2481 * 0.039999999105930328369140625) * _2492) + _2174;
    }
    else
    {
        _2288 = _1928;
        _2290 = _1930;
        _2292 = _1932;
        _2294 = _2170;
        _2296 = _2172;
        _2298 = _2174;
    }
    float _4044 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _4055 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _4066 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _2315 = ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2288 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _381))) + ((_2294 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1192)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2290 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _381))) + ((_2296 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1192)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2292 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _381))) + ((_2298 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1192)) * cbPerFrame._m0[3u].x);
    uint _2318 = _355 + 6u;
    float _2326 = _315 / cbSceneParam._m0[86u].x;
    float _2327 = _316 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _235 : (isnan(_235) ? cbSceneParam._m0[77u].w : min(_235, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    if (_235 > cbSceneParam._m0[78u].w)
    {
        float _2380 = isnan(_235) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _235 : min(cbSceneParam._m0[80u].w, _235));
        float _2381 = _2380 / _235;
        float _2392 = _2381 * _287;
        float _2393 = _288 * _2381;
        float _2394 = (-0.0) - _2393;
        float _2395 = _2381 * _289;
        float _2397 = (cbSceneParam._m0[77u].w * _2394) / _2380;
        float _2398 = _2397 + cbSceneParam._m0[79u].w;
        float _2399 = cbSceneParam._m0[79u].w - _2393;
        float _2405 = sqrt(((_2392 * _2392) + (_2393 * _2393)) + (_2395 * _2395));
        float _2408 = (1.0 - (cbSceneParam._m0[77u].w / _2380)) * _2405;
        float _2413 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2415 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2591;
        if (abs((_2394 - _2397) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2591 = ((((_2398 > 0.0) ? exp2(_2413 * _2398) : (2.0 - exp2(_2415 * _2398))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2408;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2399) ? _2398 : (isnan(_2398) ? _2399 : max(_2398, _2399));
            float _2537 = isnan(_2399) ? _2398 : (isnan(_2398) ? _2399 : min(_2398, _2399));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2591 = ((abs(_2405 / _2394) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2413 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2413 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2415 * _2546) - exp2(_2415 * _2547)) * _2535))) + (_2408 * cbSceneParam._m0[80u].z);
        }
        vec4 _2593 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2602 = exp2((_2591 * (-1.44269502162933349609375)) * (1.0 - _2593.w));
        float _2603 = log2(_2602);
        float _2619 = log2(_2346);
        _2417 = (exp2(_2619 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].x)) * _2593.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2419 = (exp2(_2619 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].y)) * _2593.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2421 = (exp2(_2619 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].z)) * _2593.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2423 = _2602 * _2346;
    }
    else
    {
        _2417 = _2343;
        _2419 = _2344;
        _2421 = _2345;
        _2423 = _2346;
    }
    bool _2629;
    vec4 _2433;
    vec4 _2456;
    float _2458;
    float _2462;
    float _2463;
    float _2464;
    float _2465;
    bool _2476;
    for (;;)
    {
        _2433 = cbMatDynParam._m0[0u];
        float _2435 = roundEven(_2433.y);
        bool _2436 = _2435 == 3.0;
        float _2438 = log2(_2423);
        float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * _2315;
        float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * _2316;
        float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * _2317;
        float _2454 = _303 + (-0.5);
        _2456 = cbMtdParam._m0[1u];
        _2458 = _2456.y * _2454;
        float _2461 = (_2435 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2462 = _2461 * (_2436 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2417)));
        _2463 = _2461 * (_2436 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
        _2464 = _2461 * (_2436 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
        _2465 = _2454 * 0.999000012874603271484375;
        _2476 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2476)
        {
            if ((cbInstanceData._m0[_355 + 7u].x + _2465) < 0.5)
            {
                _2629 = true;
                break;
            }
        }
        uint _2570 = _357 + uint(_2433.w);
        if ((cbInstanceData._m0[_2570].w < 1.0) && ((cbInstanceData._m0[_2570].w + _2465) < 0.5))
        {
            _2629 = true;
            break;
        }
        if ((_2458 + _205) < _2456.x)
        {
            _2629 = true;
            break;
        }
        _2629 = false;
        break;
    }
    float _2784;
    if (_2629)
    {
        discard_state = true;
        _2784 = 0.0;
    }
    else
    {
        _2784 = cbInstanceData._m0[_2318].w;
    }
    SV_Target.x = _2462;
    SV_Target.y = _2463;
    SV_Target.z = _2464;
    SV_Target.w = _2784;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2318].w;
    discard_exit();
}


