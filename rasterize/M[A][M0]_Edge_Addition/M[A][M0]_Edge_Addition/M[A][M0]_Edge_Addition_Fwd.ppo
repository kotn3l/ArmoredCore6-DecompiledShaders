#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _704;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    float _169;
    float _170;
    float _171;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _169 = (-0.0) - _162;
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
    }
    else
    {
        _169 = _162;
        _170 = _163;
        _171 = _164;
    }
    vec4 _191 = texture(sampler2D(M_A_M0_Edge_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _197 = _191.x * cbMtdParam._m0[9u].x;
    float _198 = _191.y * cbMtdParam._m0[9u].y;
    float _199 = _191.z * cbMtdParam._m0[9u].z;
    float _203 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _204 = _203 * _169;
    float _205 = _203 * _170;
    float _206 = _203 * _171;
    float _2814 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _2825 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _2836 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _226 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _278 * _284;
    float _286 = _279 * _284;
    float _287 = _280 * _284;
    float _293 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _294 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _315 = fma(_206, cbSceneParam._m0[5u].z, fma(_205, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _204));
    float _318 = fma(_206, cbSceneParam._m0[6u].z, fma(_205, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _204));
    float _321 = fma(_206, cbSceneParam._m0[7u].z, fma(_205, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _204));
    uint _334 = uint(roundEven(NORMAL.w)) * 13u;
    uint _337 = (_334 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _343 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2814 : (isnan(_2814) ? 1.0 : min(_2814, 1.0)))) * cbInstanceData._m0[_337].x;
    float _344 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0)))) * cbInstanceData._m0[_337].y;
    float _345 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0)))) * cbInstanceData._m0[_337].z;
    float _2847 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0));
    float _2858 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _347 = isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0));
    float _2869 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0));
    vec4 _357 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _293, cbSceneParam._m0[86u].y * _294));
    float _360 = _357.x * TEXCOORD.z;
    float _361 = dot(vec3(_204, _205, _206), vec3(_285, _286, _287));
    float _364 = _361 * 2.0;
    float _369 = (_364 * _204) - _285;
    float _370 = (_364 * _205) - _286;
    float _371 = (_364 * _206) - _287;
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _703;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _428 = fma(_401, cbModelParam._m0[26u].z, fma(_397, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _393));
        float _432 = fma(_401, cbModelParam._m0[27u].z, fma(_397, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _393));
        float _436 = fma(_401, cbModelParam._m0[28u].z, fma(_397, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _393));
        float _461 = _393 + _204;
        float _462 = _397 + _205;
        float _463 = _401 + _206;
        float _473 = fma(_463, cbModelParam._m0[26u].z, fma(_462, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _461)) - _428;
        float _474 = fma(_463, cbModelParam._m0[27u].z, fma(_462, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _461)) - _432;
        float _475 = fma(_463, cbModelParam._m0[28u].z, fma(_462, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _461)) - _436;
        float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
        float _492 = ((_479 * _473) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_428 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _493 = ((_479 * _474) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_432 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _494 = ((_479 * _475) / cbModelParam._m0[34u].z) + ((((((_436 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _497 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _504 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        float _531 = exp2((_497.w + (-0.5)) * 20.0) * 2.0;
        float _532 = _531 * (_497.x + (-0.5));
        float _533 = _531 * (_497.y + (-0.5));
        float _534 = _531 * (_497.z + (-0.5));
        float _541 = exp2((_504.w + (-0.5)) * 20.0) * 2.0;
        float _542 = _541 * (_504.x + (-0.5));
        float _543 = _541 * (_504.y + (-0.5));
        float _544 = _541 * (_504.z + (-0.5));
        float _551 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_511.x + (-0.5));
        float _553 = _551 * (_511.y + (-0.5));
        float _554 = _551 * (_511.z + (-0.5));
        float _561 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_518.x + (-0.5));
        float _563 = _561 * (_518.y + (-0.5));
        float _564 = _561 * (_518.z + (-0.5));
        float _565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _566 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _567 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _568 = _532 * 0.5;
        float _569 = _542 * 0.5;
        float _570 = _552 * 0.5;
        float _571 = dot(vec3(_568, _569, _570), vec3(_568, _569, _570));
        float _576 = (_571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_571);
        float _585 = (dot(vec3(_204, _205, _206), vec3(_576 * _568, _576 * _569, _576 * _570)) + 1.0) * 0.5;
        float _2895 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _595 = sqrt(((_569 * _569) + (_568 * _568)) + (_570 * _570)) / (_565 + 9.9999997473787516355514526367188e-06);
        float _2906 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        float _597 = _596 * 2.0;
        float _601 = (1.0 - _596) / (_596 + 1.0);
        float _2917 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
        float _611 = ((((1.0 - _602) * (_597 + 2.0)) * exp2(log2(isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0))) * (_597 + 1.0))) + _602) * _565;
        float _612 = _533 * 0.5;
        float _613 = _543 * 0.5;
        float _614 = _553 * 0.5;
        float _615 = dot(vec3(_612, _613, _614), vec3(_612, _613, _614));
        float _620 = (_615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_615);
        float _628 = (dot(vec3(_204, _205, _206), vec3(_620 * _612, _620 * _613, _620 * _614)) + 1.0) * 0.5;
        float _2928 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _637 = sqrt(((_613 * _613) + (_612 * _612)) + (_614 * _614)) / (_566 + 9.9999997473787516355514526367188e-06);
        float _2939 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _2950 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))) * (_639 + 1.0))) + _644) * _566;
        float _654 = _534 * 0.5;
        float _655 = _544 * 0.5;
        float _656 = _554 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_204, _205, _206), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _2961 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_567 + 9.9999997473787516355514526367188e-06);
        float _2972 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _2983 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0))) * (_681 + 1.0))) + _686) * _567;
        _703 = _534;
        _705 = _533;
        _706 = _532;
        _707 = _544;
        _708 = _543;
        _709 = _542;
        _710 = _554;
        _711 = _553;
        _712 = _552;
        _713 = _567;
        _714 = _566;
        _715 = _565;
        _716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0)));
        _717 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
    }
    else
    {
        _703 = _704;
        _705 = _704;
        _706 = _704;
        _707 = _704;
        _708 = _704;
        _709 = _704;
        _710 = _704;
        _711 = _704;
        _712 = _704;
        _713 = _704;
        _714 = _704;
        _715 = _704;
        _716 = 0.0;
        _717 = 0.0;
        _718 = 0.0;
    }
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _744 = fma(_401, cbModelParam._m0[30u].z, fma(_397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _393));
        float _748 = fma(_401, cbModelParam._m0[31u].z, fma(_397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _393));
        float _752 = fma(_401, cbModelParam._m0[32u].z, fma(_397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _393));
        float _775 = _393 + _204;
        float _776 = _397 + _205;
        float _777 = _401 + _206;
        float _787 = fma(_777, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775)) - _744;
        float _788 = fma(_777, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775)) - _748;
        float _789 = fma(_777, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775)) - _752;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_744 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_748 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[35u].z) + ((((((_752 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _843 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_810.x + (-0.5));
        float _845 = _843 * (_810.y + (-0.5));
        float _846 = _843 * (_810.z + (-0.5));
        float _853 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_817.x + (-0.5));
        float _855 = _853 * (_817.y + (-0.5));
        float _856 = _853 * (_817.z + (-0.5));
        float _863 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_824.x + (-0.5));
        float _865 = _863 * (_824.y + (-0.5));
        float _866 = _863 * (_824.z + (-0.5));
        float _873 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_831.x + (-0.5));
        float _875 = _873 * (_831.y + (-0.5));
        float _876 = _873 * (_831.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_204, _205, _206), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3024 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3035 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3046 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * (_907 + 1.0))) + _912) * _877;
        float _922 = _845 * 0.5;
        float _923 = _855 * 0.5;
        float _924 = _865 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_204, _205, _206), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3057 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3068 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3079 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_949 + 1.0))) + _954) * _878;
        float _964 = _846 * 0.5;
        float _965 = _856 * 0.5;
        float _966 = _866 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_204, _205, _206), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3090 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3101 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3112 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * (_991 + 1.0))) + _996) * _879;
        _1013 = _846;
        _1014 = _845;
        _1015 = _844;
        _1016 = _856;
        _1017 = _855;
        _1018 = _854;
        _1019 = _866;
        _1020 = _865;
        _1021 = _864;
        _1022 = _879;
        _1023 = _878;
        _1024 = _877;
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _704;
        _1014 = _704;
        _1015 = _704;
        _1016 = _704;
        _1017 = _704;
        _1018 = _704;
        _1019 = _704;
        _1020 = _704;
        _1021 = _704;
        _1022 = _704;
        _1023 = _704;
        _1024 = _704;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _716)) + _716;
    float _1038 = (cbModelParam._m0[1u].x * (_1026 - _717)) + _717;
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _718)) + _718;
    float _1060 = fma(_1039, cbSceneParam._m0[89u].z, fma(_1038, cbSceneParam._m0[89u].y, _1037 * cbSceneParam._m0[89u].x));
    float _1063 = fma(_1039, cbSceneParam._m0[90u].z, fma(_1038, cbSceneParam._m0[90u].y, _1037 * cbSceneParam._m0[90u].x));
    float _1066 = fma(_1039, cbSceneParam._m0[91u].z, fma(_1038, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1037));
    float _1081 = _369 * 0.5;
    float _1082 = _370 * 0.5;
    float _1083 = _371 * 0.5;
    float _1084 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1087 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1014, _1017, _1020, _1023));
    float _1090 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1124;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1097 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_703, _707, _710, _713));
        float _1101 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_705, _708, _711, _714));
        float _1105 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_706, _709, _712, _715));
        float _1112 = dot(vec4(cbModelParam._m0[39u]), vec4(_1081, _1082, _1083, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1112) ? 0.0 : (isnan(0.0) ? _1112 : max(0.0, _1112))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1135;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1126 = dot(vec4(cbModelParam._m0[40u]), vec4(_1081, _1082, _1083, 1.0));
        _1135 = dot(vec3(isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)), isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1135 = 1.0;
    }
    float _1139 = (_1135 * cbModelParam._m0[1u].x) + (_1124 * (1.0 - cbModelParam._m0[1u].x));
    float _1148 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1230;
    float _1232;
    float _1234;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1197 = fma(_401, cbModelParam._m0[13u].z, fma(_397, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393)) + cbModelParam._m0[13u].w;
        float _1201 = fma(_401, cbModelParam._m0[14u].z, fma(_397, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393)) + cbModelParam._m0[14u].w;
        float _1205 = fma(_401, cbModelParam._m0[15u].z, fma(_397, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393)) + cbModelParam._m0[15u].w;
        float _1208 = fma(_371, cbModelParam._m0[13u].z, fma(_370, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _369));
        float _1211 = fma(_371, cbModelParam._m0[14u].z, fma(_370, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _369));
        float _1214 = fma(_371, cbModelParam._m0[15u].z, fma(_370, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _369));
        float _1240;
        if (_1208 > 0.0)
        {
            _1240 = abs((1.0 - _1197) / _1208);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1208 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1197 + 1.0) / _1208);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1240 = frontier_phi_16_14_ladder;
        }
        float _1448;
        if (_1211 > 0.0)
        {
            _1448 = abs((1.0 - _1201) / _1211);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1211 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1201 + 1.0) / _1211);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1448 = frontier_phi_25_21_ladder;
        }
        float _1637;
        if (_1214 > 0.0)
        {
            _1637 = abs((1.0 - _1205) / _1214);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1214 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1205 + 1.0) / _1214);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1637 = frontier_phi_37_32_ladder;
        }
        float _1639 = isnan(_1448) ? _1240 : (isnan(_1240) ? _1448 : min(_1240, _1448));
        float _1640 = isnan(_1637) ? _1639 : (isnan(_1639) ? _1637 : min(_1639, _1637));
        float _1644 = (_1640 * _1208) + _1197;
        float _1645 = (_1640 * _1211) + _1201;
        float _1646 = (_1640 * _1214) + _1205;
        float _1647 = _1640 * 9.9999997473787516355514526367188e-05;
        float _1649 = (-1.0) - _1647;
        float _1651 = _1647 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1646 > _1651) || ((_1646 < _1649) || ((_1645 > _1651) || ((_1645 < _1649) || ((_1644 < _1649) || (_1644 > _1651))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1646, cbModelParam._m0[9u].z, fma(_1645, cbModelParam._m0[9u].y, _1644 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1646, cbModelParam._m0[10u].z, fma(_1645, cbModelParam._m0[10u].y, _1644 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1646, cbModelParam._m0[11u].z, fma(_1645, cbModelParam._m0[11u].y, _1644 * cbModelParam._m0[11u].x))), _1148);
            frontier_phi_15_37_ladder = _1743.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1743.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1743.x * cbModelParam._m0[1u].y;
        }
        _1230 = frontier_phi_15_37_ladder_2;
        _1232 = frontier_phi_15_37_ladder_1;
        _1234 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_369, _370, _371), _1148);
        _1230 = _1218.x * cbModelParam._m0[1u].y;
        _1232 = _1218.y * cbModelParam._m0[1u].y;
        _1234 = _1218.z * cbModelParam._m0[1u].y;
    }
    float _1237 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1294 = fma(_401, cbModelParam._m0[21u].z, fma(_397, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393)) + cbModelParam._m0[21u].w;
        float _1298 = fma(_401, cbModelParam._m0[22u].z, fma(_397, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393)) + cbModelParam._m0[22u].w;
        float _1302 = fma(_401, cbModelParam._m0[23u].z, fma(_397, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393)) + cbModelParam._m0[23u].w;
        float _1305 = fma(_371, cbModelParam._m0[21u].z, fma(_370, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _369));
        float _1308 = fma(_371, cbModelParam._m0[22u].z, fma(_370, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _369));
        float _1311 = fma(_371, cbModelParam._m0[23u].z, fma(_370, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _369));
        float _1453;
        if (_1305 > 0.0)
        {
            _1453 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1453 = frontier_phi_27_23_ladder;
        }
        float _1664;
        if (_1308 > 0.0)
        {
            _1664 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1664 = frontier_phi_39_34_ladder;
        }
        float _1815;
        if (_1311 > 0.0)
        {
            _1815 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1815 = frontier_phi_48_45_ladder;
        }
        float _1817 = isnan(_1664) ? _1453 : (isnan(_1453) ? _1664 : min(_1453, _1664));
        float _1818 = isnan(_1815) ? _1817 : (isnan(_1817) ? _1815 : min(_1817, _1815));
        float _1822 = (_1818 * _1305) + _1294;
        float _1823 = (_1818 * _1308) + _1298;
        float _1824 = (_1818 * _1311) + _1302;
        float _1825 = _1818 * 9.9999997473787516355514526367188e-05;
        float _1826 = (-1.0) - _1825;
        float _1828 = _1825 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1824 > _1828) || ((_1824 < _1826) || ((_1823 > _1828) || ((_1823 < _1826) || ((_1822 < _1826) || (_1822 > _1828))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1824, cbModelParam._m0[17u].z, fma(_1823, cbModelParam._m0[17u].y, _1822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1824, cbModelParam._m0[18u].z, fma(_1823, cbModelParam._m0[18u].y, _1822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1824, cbModelParam._m0[19u].z, fma(_1823, cbModelParam._m0[19u].y, _1822 * cbModelParam._m0[19u].x))), _1237);
            frontier_phi_24_48_ladder = _2022.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2022.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2022.x * cbModelParam._m0[1u].z;
        }
        _1330 = frontier_phi_24_48_ladder_2;
        _1332 = frontier_phi_24_48_ladder_1;
        _1334 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_369, _370, _371), _1237);
        _1330 = _1314.x * cbModelParam._m0[1u].z;
        _1332 = _1314.y * cbModelParam._m0[1u].z;
        _1334 = _1314.z * cbModelParam._m0[1u].z;
    }
    float _1346 = _360 * 0.01200000010430812835693359375;
    float _1348 = _1346 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1349 = _1346 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1350 = _1346 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1353 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, _1348 * cbSceneParam._m0[91u].x));
    uvec4 _1369 = floatBitsToUint(cbInstanceData._m0[_334 + 5u]);
    uint _1371 = _1369.x * 14u;
    uint _1372 = _1371 + 13u;
    float _1379 = _360 + (-1.0);
    float _1385 = (cbLight._m0[_1372].x * _1379) + 1.0;
    float _1386 = (cbLight._m0[_1372].y * _1379) + 1.0;
    float _1387 = (cbLight._m0[_1372].z * _1379) + 1.0;
    float _1388 = (cbLight._m0[_1372].w * _1379) + 1.0;
    uint _1389 = _1371 + 5u;
    float _1395 = isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0));
    uint _1399 = _1371 + 4u;
    float _1406 = isnan(1.0) ? _1385 : (isnan(_1385) ? 1.0 : min(_1385, 1.0));
    uint _1410 = _1371 | 1u;
    float _1421 = dot(vec3(cbLight._m0[_1371].xyz), vec3(_204, _205, _206));
    float _1424 = dot(vec3(cbLight._m0[_1410].xyz), vec3(_204, _205, _206));
    float _3248 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
    float _3259 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1429 = (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * 0.3183098733425140380859375;
    float _1431 = (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * 0.3183098733425140380859375;
    float _1438 = ((cbLight._m0[_1389].x * _1395) * _1431) + ((cbLight._m0[_1399].x * _1406) * _1429);
    float _1439 = ((_1395 * cbLight._m0[_1389].y) * _1431) + ((_1406 * cbLight._m0[_1399].y) * _1429);
    float _1440 = ((_1395 * cbLight._m0[_1389].z) * _1431) + ((_1406 * cbLight._m0[_1399].z) * _1429);
    uvec4 _1445 = floatBitsToUint(cbLight._m0[_1371 + 12u]);
    bool _1447 = _1445.x == 0u;
    float _1458;
    float _1460;
    float _1462;
    if (_1447)
    {
        _1458 = _1438;
        _1460 = _1439;
        _1462 = _1440;
    }
    else
    {
        uint _1466 = _1371 + 6u;
        float _1482 = (dot(vec3(cbLight._m0[_1371 + 2u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1483 = _1482 * _1482;
        float _3270 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1485 = isnan(1.0) ? _1387 : (isnan(_1387) ? 1.0 : min(_1387, 1.0));
        _1458 = (((cbLight._m0[_1466].x * 0.3183098733425140380859375) * _1484) * _1485) + _1438;
        _1460 = (((cbLight._m0[_1466].y * 0.3183098733425140380859375) * _1484) * _1485) + _1439;
        _1462 = (((cbLight._m0[_1466].z * 0.3183098733425140380859375) * _1484) * _1485) + _1440;
    }
    bool _1465 = _1445.y == 0u;
    float _1503;
    float _1505;
    float _1507;
    if (_1465)
    {
        _1503 = _1458;
        _1505 = _1460;
        _1507 = _1462;
    }
    else
    {
        uint _1608 = _1371 + 7u;
        float _1624 = (dot(vec3(cbLight._m0[_1371 + 3u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1625 = _1624 * _1624;
        float _3286 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _1627 = isnan(1.0) ? _1388 : (isnan(_1388) ? 1.0 : min(_1388, 1.0));
        _1503 = (((cbLight._m0[_1608].x * 0.3183098733425140380859375) * _1626) * _1627) + _1458;
        _1505 = (((cbLight._m0[_1608].y * 0.3183098733425140380859375) * _1626) * _1627) + _1460;
        _1507 = (((cbLight._m0[_1608].z * 0.3183098733425140380859375) * _1626) * _1627) + _1462;
    }
    uint _1509 = _1371 + 8u;
    float _1515 = cbLight._m0[_1371].x + _285;
    float _1516 = cbLight._m0[_1371].y + _286;
    float _1517 = cbLight._m0[_1371].z + _287;
    float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
    float _1525 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1371].xyz));
    float _3302 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _1528 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _1529 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _1530 = dot(vec3(cbLight._m0[_1371].xyz), vec3(_1515 * _1521, _1516 * _1521, _1517 * _1521));
    float _3324 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _1541 = (exp2(log2(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1547 = (0.5 / ((_1528 + 9.9999999392252902907785028219223e-09) + _1529)) * _1528;
    float _3335 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1549 = (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.31831014156341552734375;
    uint _1560 = _1371 + 9u;
    float _1566 = cbLight._m0[_1410].x + _285;
    float _1567 = cbLight._m0[_1410].y + _286;
    float _1568 = cbLight._m0[_1410].z + _287;
    float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
    float _1576 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1410].xyz));
    float _3346 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1579 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _1580 = dot(vec3(cbLight._m0[_1410].xyz), vec3(_1566 * _1572, _1567 * _1572, _1568 * _1572));
    float _3357 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1589 = (exp2(log2(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1593 = (0.5 / ((_1579 + 9.9999999392252902907785028219223e-09) + _1529)) * _1579;
    float _3368 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1595 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.31831014156341552734375;
    float _1605 = (((_1589 * cbLight._m0[_1560].x) * _1595) * _1395) + (((_1541 * cbLight._m0[_1509].x) * _1549) * _1406);
    float _1606 = (((_1589 * cbLight._m0[_1560].y) * _1595) * _1395) + (((_1541 * cbLight._m0[_1509].y) * _1549) * _1406);
    float _1607 = (((_1589 * cbLight._m0[_1560].z) * _1595) * _1395) + (((_1541 * cbLight._m0[_1509].z) * _1549) * _1406);
    float _1669;
    float _1671;
    float _1673;
    if (_1447)
    {
        _1669 = _1605;
        _1671 = _1606;
        _1673 = _1607;
    }
    else
    {
        uint _1675 = _1371 + 10u;
        uint _1681 = _1371 + 2u;
        float _1687 = cbLight._m0[_1681].x + _285;
        float _1688 = cbLight._m0[_1681].y + _286;
        float _1689 = cbLight._m0[_1681].z + _287;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1697 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1681].xyz));
        float _3379 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1700 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1701 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1687 * _1693, _1688 * _1693, _1689 * _1693));
        float _3390 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1714 = (0.5 / ((_1700 + 9.9999999392252902907785028219223e-09) + _1529)) * _1700;
        float _3401 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1716 = (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.31831014156341552734375;
        float _1717 = isnan(1.0) ? _1387 : (isnan(_1387) ? 1.0 : min(_1387, 1.0));
        _1669 = (((_1710 * cbLight._m0[_1675].x) * _1716) * _1717) + _1605;
        _1671 = (((_1710 * cbLight._m0[_1675].y) * _1716) * _1717) + _1606;
        _1673 = (((_1710 * cbLight._m0[_1675].z) * _1716) * _1717) + _1607;
    }
    float _1752;
    float _1754;
    float _1756;
    if (_1465)
    {
        _1752 = _1669;
        _1754 = _1671;
        _1756 = _1673;
    }
    else
    {
        uint _1763 = _1371 + 11u;
        uint _1769 = _1371 + 3u;
        float _1775 = cbLight._m0[_1769].x + _285;
        float _1776 = cbLight._m0[_1769].y + _286;
        float _1777 = cbLight._m0[_1769].z + _287;
        float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
        float _1785 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1769].xyz));
        float _3417 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1788 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1789 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1775 * _1781, _1776 * _1781, _1777 * _1781));
        float _3428 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1802 = (0.5 / ((_1788 + 9.9999999392252902907785028219223e-09) + _1529)) * _1788;
        float _3439 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1804 = (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.31831014156341552734375;
        float _1805 = isnan(1.0) ? _1388 : (isnan(_1388) ? 1.0 : min(_1388, 1.0));
        _1752 = (((_1798 * cbLight._m0[_1763].x) * _1804) * _1805) + _1669;
        _1754 = (((_1798 * cbLight._m0[_1763].y) * _1804) * _1805) + _1671;
        _1756 = (((_1798 * cbLight._m0[_1763].z) * _1804) * _1805) + _1673;
    }
    float _1939;
    float _1941;
    float _1943;
    float _1945;
    float _1947;
    float _1949;
    if (_1369.y == 0u)
    {
        float _1880 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1880;
        float _1882 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1880;
        float _1883 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1880;
        uvec4 _1895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1896 = _1895.x;
        uint _1907 = uint((float(_1895.y) * floor(float(uint(cbSceneParam._m0[85u].y * _294) / _1896))) + floor(float(uint(cbSceneParam._m0[85u].x * _293) / _1896)));
        float _1917 = (log2(_1883 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1918 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        uint _1921 = uint(isnan(14.0) ? _1918 : (isnan(_1918) ? 14.0 : min(_1918, 14.0)));
        uvec4 _1926 = texelFetch(g_lightClusterGridBuffer, int(((_1921 << 2u) + (_1907 << 6u)) >> 2u));
        uint _1927 = _1926.x;
        uint _1928 = _1895.z;
        float _2027;
        float _2029;
        float _2031;
        float _2033;
        float _2035;
        float _2037;
        if (((((1u << ((_1928 >> 4u) & 15u)) + 4294967295u) & _1927) == 0u) || ((_1928 & 240u) == 0u))
        {
            _2027 = 0.0;
            _2029 = 0.0;
            _2031 = 0.0;
            _2033 = 0.0;
            _2035 = 0.0;
            _2037 = 0.0;
        }
        else
        {
            float _2028;
            float _2030;
            float _2032;
            float _2034;
            float _2036;
            float _2038;
            float _2169 = 0.0;
            float _2170 = 0.0;
            float _2171 = 0.0;
            float _2172 = 0.0;
            float _2173 = 0.0;
            float _2174 = 0.0;
            uint _2175 = 0u;
            uint _2184;
            bool _2185;
            for (;;)
            {
                _2184 = texelFetch(g_lightClassification, int((((_1921 << 5u) + (_1907 << 9u)) + (_2175 << 2u)) >> 2u)).x;
                _2185 = _2184 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2185)
                {
                    frontier_phi_63_pred = _2174;
                    frontier_phi_63_pred_1 = _2173;
                    frontier_phi_63_pred_2 = _2172;
                    frontier_phi_63_pred_3 = _2171;
                    frontier_phi_63_pred_4 = _2170;
                    frontier_phi_63_pred_5 = _2169;
                }
                else
                {
                    float _2293;
                    float _2294;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    uint _2299;
                    _2293 = _2169;
                    _2294 = _2170;
                    _2295 = _2171;
                    _2296 = _2172;
                    _2297 = _2173;
                    _2298 = _2174;
                    _2299 = _2184;
                    float _2225;
                    float _2226;
                    float _2227;
                    float _2228;
                    float _2229;
                    float _2230;
                    for (;;)
                    {
                        uint _2303 = uint(findLSB(_2299)) + (_2175 << 5u);
                        uint _2300 = (_2299 + 4294967295u) & _2299;
                        uint _2305 = _2303 * 48u;
                        vec4 _2319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2305)).x, texelFetch(g_PointLightRenderingBuffer, int(_2305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2305 + 3u)).x));
                        uint _2325 = (_2303 * 48u) + 4u;
                        vec4 _2338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2325)).x, texelFetch(g_PointLightRenderingBuffer, int(_2325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2325 + 3u)).x));
                        uint _2344 = (_2303 * 48u) + 8u;
                        vec3 _2355 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2344)).x, texelFetch(g_PointLightRenderingBuffer, int(_2344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2344 + 2u)).x));
                        float _2359 = _2319.x - _1881;
                        float _2360 = _2319.y - _1882;
                        float _2361 = _2319.z - _1883;
                        float _2362 = dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361));
                        float _2365 = inversesqrt(_2362);
                        float _2374 = 1.0 - (_2362 * _2319.w);
                        float _3465 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                        float _2375 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
                        float _2376 = sqrt(_2362) * _2338.w;
                        float _2379 = 1.39999997615814208984375 / (_2376 + 1.39999997615814208984375);
                        float _2380 = _2379 * _2379;
                        float _2383 = ((1.0 - _2380) * dot(vec3(_315, _318, _321), vec3(_2365 * _2359, _2365 * _2360, _2365 * _2361))) + _2380;
                        float _2386 = _2376 * _2376;
                        float _2390 = ((isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0))) * _2375) / ((_2386 * 0.699999988079071044921875) + 1.0);
                        float _2394 = (-0.0) - _1881;
                        float _2395 = (-0.0) - _1882;
                        float _2396 = (-0.0) - _1883;
                        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
                        float _2404 = dot(vec3(_315, _318, _321), vec3(_2400 * _2394, _2400 * _2395, _2400 * _2396));
                        float _3481 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
                        float _3492 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
                        float _2408 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
                        float _2412 = (0.5 / (((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) + 9.9999999392252902907785028219223e-09) + _2408)) * _2408;
                        float _3503 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
                        float _2421 = (((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 3.1415927410125732421875) / ((_2386 * 2.1991131305694580078125) + 3.141590118408203125)) * _2375;
                        _2228 = (_2390 * _2338.x) + _2296;
                        _2229 = (_2390 * _2338.y) + _2297;
                        _2230 = (_2390 * _2338.z) + _2298;
                        _2225 = (_2421 * _2355.x) + _2293;
                        _2226 = (_2421 * _2355.y) + _2294;
                        _2227 = (_2421 * _2355.z) + _2295;
                        if (_2300 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2293 = _2225;
                            _2294 = _2226;
                            _2295 = _2227;
                            _2296 = _2228;
                            _2297 = _2229;
                            _2298 = _2230;
                            _2299 = _2300;
                        }
                    }
                    frontier_phi_63_pred = _2230;
                    frontier_phi_63_pred_1 = _2229;
                    frontier_phi_63_pred_2 = _2228;
                    frontier_phi_63_pred_3 = _2227;
                    frontier_phi_63_pred_4 = _2226;
                    frontier_phi_63_pred_5 = _2225;
                }
                _2038 = frontier_phi_63_pred;
                _2036 = frontier_phi_63_pred_1;
                _2034 = frontier_phi_63_pred_2;
                _2032 = frontier_phi_63_pred_3;
                _2030 = frontier_phi_63_pred_4;
                _2028 = frontier_phi_63_pred_5;
                uint _2176 = _2175 + 1u;
                if (_2176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2169 = _2028;
                    _2170 = _2030;
                    _2171 = _2032;
                    _2172 = _2034;
                    _2173 = _2036;
                    _2174 = _2038;
                    _2175 = _2176;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2027 = _2028;
            _2029 = _2030;
            _2031 = _2032;
            _2033 = _2034;
            _2035 = _2036;
            _2037 = _2038;
        }
        uvec4 _2041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2042 = _2041.z;
        uint _2044 = (_2042 >> 8u) & 15u;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        float _2150;
        if (((4294967295u << _2044) & _1927) == 0u)
        {
            _2140 = _2027;
            _2142 = _2029;
            _2144 = _2031;
            _2146 = _2033;
            _2148 = _2035;
            _2150 = _2037;
        }
        else
        {
            float _2165 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2044 < ((_2042 >> 12u) & 15u))
            {
                float _2141;
                float _2143;
                float _2145;
                float _2147;
                float _2149;
                float _2151;
                float _2276 = _2027;
                float _2277 = _2029;
                float _2278 = _2031;
                float _2279 = _2033;
                float _2280 = _2035;
                float _2281 = _2037;
                uint _2282 = _2044;
                uint _2291;
                bool _2292;
                for (;;)
                {
                    _2291 = texelFetch(g_lightClassification, int((((_1921 << 5u) + (_1907 << 9u)) + (_2282 << 2u)) >> 2u)).x;
                    _2292 = _2291 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2292)
                    {
                        frontier_phi_69_pred = _2281;
                        frontier_phi_69_pred_1 = _2280;
                        frontier_phi_69_pred_2 = _2279;
                        frontier_phi_69_pred_3 = _2278;
                        frontier_phi_69_pred_4 = _2277;
                        frontier_phi_69_pred_5 = _2276;
                    }
                    else
                    {
                        float _2426;
                        float _2427;
                        float _2428;
                        float _2429;
                        float _2430;
                        float _2431;
                        float _2678;
                        float _2679;
                        float _2680;
                        float _2681;
                        float _2682;
                        float _2683;
                        float _2439 = _2276;
                        float _2440 = _2277;
                        float _2441 = _2278;
                        float _2442 = _2279;
                        float _2443 = _2280;
                        float _2444 = _2281;
                        uint _2445 = _2291;
                        uint _2446;
                        vec4 _2471;
                        float _2472;
                        vec4 _2487;
                        vec3 _2499;
                        vec4 _2515;
                        vec4 _2531;
                        float _2578;
                        bool _2579;
                        for (;;)
                        {
                            uint _2456 = ((_2282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2445));
                            _2446 = (_2445 + 4294967295u) & _2445;
                            uint _2458 = _2456 * 40u;
                            _2471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 3u)).x));
                            _2472 = _2471.w;
                            uint _2474 = (_2456 * 40u) + 4u;
                            _2487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 3u)).x));
                            uint _2489 = (_2456 * 40u) + 8u;
                            _2499 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 2u)).x));
                            uint _2502 = (_2456 * 40u) + 16u;
                            _2515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 3u)).x));
                            uint _2518 = (_2456 * 40u) + 20u;
                            _2531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2518 + 3u)).x));
                            uint _2534 = (_2456 * 40u) + 24u;
                            vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 3u)).x));
                            uint _2553 = (_2456 * 40u) + 28u;
                            vec4 _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            _2578 = fma(_1883, _2566.z, fma(_1882, _2566.y, _2566.x * _1881)) + _2566.w;
                            _2579 = !((fma(_1883, _2547.z, fma(_1882, _2547.y, _2547.x * _1881)) + _2547.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2579)
                            {
                                float _2606 = _2471.x - _1881;
                                float _2607 = _2471.y - _1882;
                                float _2608 = _2471.z - _1883;
                                float _2609 = dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608));
                                float _2612 = inversesqrt(_2609);
                                float _2613 = _2612 * _2606;
                                float _2614 = _2612 * _2607;
                                float _2615 = _2612 * _2608;
                                float _2619 = 1.0 - (_2609 / (_2472 * _2472));
                                float _3514 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                                float _2620 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
                                float _2624 = sqrt(_2609) * _2487.w;
                                float _2626 = 1.39999997615814208984375 / (_2624 + 1.39999997615814208984375);
                                float _2627 = _2626 * _2626;
                                float _2628 = 1.0 - _2627;
                                float _2630 = (_2628 * dot(vec3(_2613, _2614, _2615), vec3(_315, _318, _321))) + _2627;
                                float _2633 = _2624 * _2624;
                                float _2637 = (fma(_1883, _2515.z, fma(_1882, _2515.y, _2515.x * _1881)) + _2515.w) / _2578;
                                float _2638 = (fma(_1883, _2531.z, fma(_1882, _2531.y, _2531.x * _1881)) + _2531.w) / _2578;
                                float _2642 = 1.0 - dot(vec2(_2637, _2638), vec2(_2637, _2638));
                                float _3530 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                                float _2643 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
                                float _2644 = _2643 * (((isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))) * _2620) / ((_2633 * 0.699999988079071044921875) + 1.0));
                                float _2654 = dot(vec3(_315, _318, _321), vec3((-0.0) - (_1881 * _2165), (-0.0) - (_1882 * _2165), (-0.0) - (_1883 * _2165)));
                                float _3541 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                                float _2662 = (_2628 * dot(vec3(_315, _318, _321), vec3(_2613, _2614, _2615))) + _2627;
                                float _3552 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                                float _2663 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
                                float _2667 = (0.5 / (((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) + 9.9999999392252902907785028219223e-09) + _2663)) * _2663;
                                float _3563 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                                float _2674 = (_2643 * _2620) * (((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 3.1415927410125732421875) / ((_2633 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2644 * _2487.z;
                                frontier_phi_75_pred_1 = _2644 * _2487.y;
                                frontier_phi_75_pred_2 = _2644 * _2487.x;
                                frontier_phi_75_pred_3 = _2674 * _2499.z;
                                frontier_phi_75_pred_4 = _2674 * _2499.y;
                                frontier_phi_75_pred_5 = _2674 * _2499.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2683 = frontier_phi_75_pred;
                            _2682 = frontier_phi_75_pred_1;
                            _2681 = frontier_phi_75_pred_2;
                            _2680 = frontier_phi_75_pred_3;
                            _2679 = frontier_phi_75_pred_4;
                            _2678 = frontier_phi_75_pred_5;
                            _2429 = _2681 + _2442;
                            _2430 = _2682 + _2443;
                            _2431 = _2683 + _2444;
                            _2426 = _2678 + _2439;
                            _2427 = _2679 + _2440;
                            _2428 = _2680 + _2441;
                            if (_2446 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2439 = _2426;
                                _2440 = _2427;
                                _2441 = _2428;
                                _2442 = _2429;
                                _2443 = _2430;
                                _2444 = _2431;
                                _2445 = _2446;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2431;
                        frontier_phi_69_pred_1 = _2430;
                        frontier_phi_69_pred_2 = _2429;
                        frontier_phi_69_pred_3 = _2428;
                        frontier_phi_69_pred_4 = _2427;
                        frontier_phi_69_pred_5 = _2426;
                    }
                    _2151 = frontier_phi_69_pred;
                    _2149 = frontier_phi_69_pred_1;
                    _2147 = frontier_phi_69_pred_2;
                    _2145 = frontier_phi_69_pred_3;
                    _2143 = frontier_phi_69_pred_4;
                    _2141 = frontier_phi_69_pred_5;
                    uint _2283 = _2282 + 1u;
                    if (_2283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2276 = _2141;
                        _2277 = _2143;
                        _2278 = _2145;
                        _2279 = _2147;
                        _2280 = _2149;
                        _2281 = _2151;
                        _2282 = _2283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2151;
                frontier_phi_57_58_ladder_1 = _2149;
                frontier_phi_57_58_ladder_2 = _2147;
                frontier_phi_57_58_ladder_3 = _2145;
                frontier_phi_57_58_ladder_4 = _2143;
                frontier_phi_57_58_ladder_5 = _2141;
            }
            else
            {
                frontier_phi_57_58_ladder = _2037;
                frontier_phi_57_58_ladder_1 = _2035;
                frontier_phi_57_58_ladder_2 = _2033;
                frontier_phi_57_58_ladder_3 = _2031;
                frontier_phi_57_58_ladder_4 = _2029;
                frontier_phi_57_58_ladder_5 = _2027;
            }
            _2140 = frontier_phi_57_58_ladder_5;
            _2142 = frontier_phi_57_58_ladder_4;
            _2144 = frontier_phi_57_58_ladder_3;
            _2146 = frontier_phi_57_58_ladder_2;
            _2148 = frontier_phi_57_58_ladder_1;
            _2150 = frontier_phi_57_58_ladder;
        }
        float _2155 = isnan(1.0) ? _360 : (isnan(_360) ? 1.0 : min(_360, 1.0));
        _1939 = (_2155 * _2146) + _1503;
        _1941 = (_2155 * _2148) + _1505;
        _1943 = (_2155 * _2150) + _1507;
        _1945 = ((_2140 * 0.039999999105930328369140625) * _2155) + _1752;
        _1947 = ((_2142 * 0.039999999105930328369140625) * _2155) + _1754;
        _1949 = ((_2144 * 0.039999999105930328369140625) * _2155) + _1756;
    }
    else
    {
        _1939 = _1503;
        _1941 = _1505;
        _1943 = _1507;
        _1945 = _1752;
        _1947 = _1754;
        _1949 = _1756;
    }
    float _3579 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3590 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3601 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _1969 = _334 + 6u;
    float _1977 = _293 / cbSceneParam._m0[86u].x;
    float _1978 = _294 / cbSceneParam._m0[86u].y;
    vec4 _1992 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1977, _1978, (log2((isnan(cbSceneParam._m0[77u].w) ? _226 : (isnan(_226) ? cbSceneParam._m0[77u].w : min(_226, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1994 = _1992.x;
    float _1995 = _1992.y;
    float _1996 = _1992.z;
    float _1997 = _1992.w;
    float _2089;
    float _2091;
    float _2093;
    float _2095;
    if (_226 > cbSceneParam._m0[78u].w)
    {
        float _2052 = isnan(_226) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _226 : min(cbSceneParam._m0[80u].w, _226));
        float _2053 = _2052 / _226;
        float _2064 = _2053 * _278;
        float _2065 = _279 * _2053;
        float _2066 = (-0.0) - _2065;
        float _2067 = _2053 * _280;
        float _2069 = (cbSceneParam._m0[77u].w * _2066) / _2052;
        float _2070 = _2069 + cbSceneParam._m0[79u].w;
        float _2071 = cbSceneParam._m0[79u].w - _2065;
        float _2077 = sqrt(((_2064 * _2064) + (_2065 * _2065)) + (_2067 * _2067));
        float _2080 = (1.0 - (cbSceneParam._m0[77u].w / _2052)) * _2077;
        float _2085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2238;
        if (abs((_2066 - _2069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2238 = ((((_2070 > 0.0) ? exp2(_2085 * _2070) : (2.0 - exp2(_2087 * _2070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2080;
        }
        else
        {
            float _2198 = 1.0 / cbSceneParam._m0[80u].x;
            float _2199 = isnan(_2071) ? _2070 : (isnan(_2070) ? _2071 : max(_2070, _2071));
            float _2200 = isnan(_2071) ? _2070 : (isnan(_2070) ? _2071 : min(_2070, _2071));
            float _2209 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : min(_2199, 0.0));
            float _2210 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : min(_2200, 0.0));
            _2238 = ((abs(_2077 / _2066) * cbSceneParam._m0[80u].y) * ((((_2209 - _2210) * 2.0) - ((exp2(_2085 * (isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0)))) - exp2(_2085 * (isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))))) * _2198)) - ((exp2(_2087 * _2209) - exp2(_2087 * _2210)) * _2198))) + (_2080 * cbSceneParam._m0[80u].z);
        }
        vec4 _2240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1977, _1978, 1.0), 0.0);
        float _2249 = exp2((_2238 * (-1.44269502162933349609375)) * (1.0 - _2240.w));
        float _2250 = log2(_2249);
        float _2266 = log2(_1997);
        _2089 = (exp2(_2266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].x)) * _2240.x) / cbSceneParam._m0[78u].x)) + _1994;
        _2091 = (exp2(_2266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].y)) * _2240.y) / cbSceneParam._m0[78u].y)) + _1995;
        _2093 = (exp2(_2266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].z)) * _2240.z) / cbSceneParam._m0[78u].z)) + _1996;
        _2095 = _2249 * _1997;
    }
    else
    {
        _2089 = _1994;
        _2091 = _1995;
        _2093 = _1996;
        _2095 = _1997;
    }
    float _2107 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2108 = _2107 == 3.0;
    float _2110 = log2(_2095);
    float _2117 = exp2(_2110 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1939 + ((isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))) * _360))) + ((_1945 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2118 = exp2(_2110 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1941 + ((isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0))) * _360))) + ((_1947 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2119 = exp2(_2110 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1943 + ((isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))) * _360))) + ((_1949 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2128 = (_2107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2128 * (_2108 ? _2117 : (_2117 + (cbSceneParam._m0[72u].w * _2089)));
    SV_Target.y = _2128 * (_2108 ? _2118 : (_2118 + (cbSceneParam._m0[72u].w * _2091)));
    SV_Target.z = _2128 * (_2108 ? _2119 : (_2119 + (cbSceneParam._m0[72u].w * _2093)));
    SV_Target.w = cbInstanceData._m0[_1969].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1969].w;
}


