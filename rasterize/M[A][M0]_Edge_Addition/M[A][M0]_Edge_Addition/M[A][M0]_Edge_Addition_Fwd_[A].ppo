#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _750;
float _2915;
float _2916;
float _2917;
float _2918;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_Edge_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.w;
    float _202 = _195.x * cbMtdParam._m0[9u].x;
    float _203 = _195.y * cbMtdParam._m0[9u].y;
    float _204 = _195.z * cbMtdParam._m0[9u].z;
    float _208 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _209 = _208 * _173;
    float _210 = _208 * _174;
    float _211 = _208 * _175;
    float _2927 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2938 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _2949 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _231 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    float _289 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _290 = _283 * _289;
    float _291 = _284 * _289;
    float _292 = _285 * _289;
    vec4 _297 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _299 = _297.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _429 = sqrt(((_283 * _283) + (_284 * _284)) + (_285 * _285));
        float _435 = (cbMatDynParam._m0[5u].x * _429) + cbMatDynParam._m0[5u].y;
        float _2960 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
        float _436 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _440 = (cbMatDynParam._m0[5u].z * _429) + cbMatDynParam._m0[5u].w;
        float _2971 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0))) - _436)) + _436) < ((_299 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _311 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _312 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _332 = fma(_211, cbSceneParam._m0[5u].z, fma(_210, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _209));
    float _335 = fma(_211, cbSceneParam._m0[6u].z, fma(_210, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _209));
    float _338 = fma(_211, cbSceneParam._m0[7u].z, fma(_210, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _209));
    uint _351 = uint(roundEven(NORMAL.w)) * 13u;
    uint _353 = _351 + 9u;
    uint _354 = _353 + uint(cbMatDynParam._m0[0u].w);
    float _360 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0)))) * cbInstanceData._m0[_354].x;
    float _361 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * cbInstanceData._m0[_354].y;
    float _362 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0)))) * cbInstanceData._m0[_354].z;
    float _2982 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
    float _2993 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    float _3004 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
    vec4 _374 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _311, cbSceneParam._m0[86u].y * _312));
    float _377 = _374.x * TEXCOORD.z;
    float _378 = dot(vec3(_209, _210, _211), vec3(_290, _291, _292));
    float _381 = _378 * 2.0;
    float _386 = (_381 * _209) - _290;
    float _387 = (_381 * _210) - _291;
    float _388 = (_381 * _211) - _292;
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _749;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _474 = fma(_418, cbModelParam._m0[26u].z, fma(_414, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _410));
        float _478 = fma(_418, cbModelParam._m0[27u].z, fma(_414, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _410));
        float _482 = fma(_418, cbModelParam._m0[28u].z, fma(_414, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _410));
        float _507 = _410 + _209;
        float _508 = _414 + _210;
        float _509 = _418 + _211;
        float _519 = fma(_509, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507)) - _474;
        float _520 = fma(_509, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507)) - _478;
        float _521 = fma(_509, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507)) - _482;
        float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
        float _538 = ((_525 * _519) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_525 * _520) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_525 * _521) / cbModelParam._m0[34u].z) + ((((((_482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_543.x + (-0.5));
        float _579 = _577 * (_543.y + (-0.5));
        float _580 = _577 * (_543.z + (-0.5));
        float _587 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_550.x + (-0.5));
        float _589 = _587 * (_550.y + (-0.5));
        float _590 = _587 * (_550.z + (-0.5));
        float _597 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_557.x + (-0.5));
        float _599 = _597 * (_557.y + (-0.5));
        float _600 = _597 * (_557.z + (-0.5));
        float _607 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_564.x + (-0.5));
        float _609 = _607 * (_564.y + (-0.5));
        float _610 = _607 * (_564.z + (-0.5));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = _578 * 0.5;
        float _615 = _588 * 0.5;
        float _616 = _598 * 0.5;
        float _617 = dot(vec3(_614, _615, _616), vec3(_614, _615, _616));
        float _622 = (_617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_617);
        float _631 = (dot(vec3(_209, _210, _211), vec3(_622 * _614, _622 * _615, _622 * _616)) + 1.0) * 0.5;
        float _3030 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _641 = sqrt(((_615 * _615) + (_614 * _614)) + (_616 * _616)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3041 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _643 = _642 * 2.0;
        float _647 = (1.0 - _642) / (_642 + 1.0);
        float _3052 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _657 = ((((1.0 - _648) * (_643 + 2.0)) * exp2(log2(isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * (_643 + 1.0))) + _648) * _611;
        float _658 = _579 * 0.5;
        float _659 = _589 * 0.5;
        float _660 = _599 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_209, _210, _211), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3063 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3074 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3085 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) * (_685 + 1.0))) + _690) * _612;
        float _700 = _580 * 0.5;
        float _701 = _590 * 0.5;
        float _702 = _600 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _716 = (dot(vec3(_209, _210, _211), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3096 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _725 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3107 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3118 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))) * (_727 + 1.0))) + _732) * _613;
        _749 = _580;
        _751 = _579;
        _752 = _578;
        _753 = _590;
        _754 = _589;
        _755 = _588;
        _756 = _600;
        _757 = _599;
        _758 = _598;
        _759 = _613;
        _760 = _612;
        _761 = _611;
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0)));
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
    }
    else
    {
        _749 = _750;
        _751 = _750;
        _752 = _750;
        _753 = _750;
        _754 = _750;
        _755 = _750;
        _756 = _750;
        _757 = _750;
        _758 = _750;
        _759 = _750;
        _760 = _750;
        _761 = _750;
        _762 = 0.0;
        _763 = 0.0;
        _764 = 0.0;
    }
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _793 = fma(_418, cbModelParam._m0[30u].z, fma(_414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _410));
        float _797 = fma(_418, cbModelParam._m0[31u].z, fma(_414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _410));
        float _801 = fma(_418, cbModelParam._m0[32u].z, fma(_414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _410));
        float _824 = _410 + _209;
        float _825 = _414 + _210;
        float _826 = _418 + _211;
        float _836 = fma(_826, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _824)) - _793;
        float _837 = fma(_826, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _824)) - _797;
        float _838 = fma(_826, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _824)) - _801;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_793 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_797 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[35u].z) + ((((((_801 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _892 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_859.x + (-0.5));
        float _894 = _892 * (_859.y + (-0.5));
        float _895 = _892 * (_859.z + (-0.5));
        float _902 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_866.x + (-0.5));
        float _904 = _902 * (_866.y + (-0.5));
        float _905 = _902 * (_866.z + (-0.5));
        float _912 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_873.x + (-0.5));
        float _914 = _912 * (_873.y + (-0.5));
        float _915 = _912 * (_873.z + (-0.5));
        float _922 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_880.x + (-0.5));
        float _924 = _922 * (_880.y + (-0.5));
        float _925 = _922 * (_880.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_209, _210, _211), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3181 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_956 + 1.0))) + _961) * _926;
        float _971 = _894 * 0.5;
        float _972 = _904 * 0.5;
        float _973 = _914 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_209, _210, _211), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3214 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_998 + 1.0))) + _1003) * _927;
        float _1013 = _895 * 0.5;
        float _1014 = _905 * 0.5;
        float _1015 = _915 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_209, _210, _211), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3225 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3236 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3247 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_1040 + 1.0))) + _1045) * _928;
        _1062 = _895;
        _1063 = _894;
        _1064 = _893;
        _1065 = _905;
        _1066 = _904;
        _1067 = _903;
        _1068 = _915;
        _1069 = _914;
        _1070 = _913;
        _1071 = _928;
        _1072 = _927;
        _1073 = _926;
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _750;
        _1063 = _750;
        _1064 = _750;
        _1065 = _750;
        _1066 = _750;
        _1067 = _750;
        _1068 = _750;
        _1069 = _750;
        _1070 = _750;
        _1071 = _750;
        _1072 = _750;
        _1073 = _750;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _762)) + _762;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _763)) + _763;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _764)) + _764;
    float _1109 = fma(_1088, cbSceneParam._m0[89u].z, fma(_1087, cbSceneParam._m0[89u].y, _1086 * cbSceneParam._m0[89u].x));
    float _1112 = fma(_1088, cbSceneParam._m0[90u].z, fma(_1087, cbSceneParam._m0[90u].y, _1086 * cbSceneParam._m0[90u].x));
    float _1115 = fma(_1088, cbSceneParam._m0[91u].z, fma(_1087, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1086));
    float _1130 = _386 * 0.5;
    float _1131 = _387 * 0.5;
    float _1132 = _388 * 0.5;
    float _1133 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1136 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1139 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1173;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1146 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_749, _753, _756, _759));
        float _1150 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_751, _754, _757, _760));
        float _1154 = dot(vec4(_1130, _1131, _1132, 1.0), vec4(_752, _755, _758, _761));
        float _1161 = dot(vec4(cbModelParam._m0[39u]), vec4(_1130, _1131, _1132, 1.0));
        _1173 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1161) ? 0.0 : (isnan(0.0) ? _1161 : max(0.0, _1161))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1173 = 1.0;
    }
    float _1184;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1175 = dot(vec4(cbModelParam._m0[40u]), vec4(_1130, _1131, _1132, 1.0));
        _1184 = dot(vec3(isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1175) ? 0.0 : (isnan(0.0) ? _1175 : max(0.0, _1175))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1184 = 1.0;
    }
    float _1188 = (_1184 * cbModelParam._m0[1u].x) + (_1173 * (1.0 - cbModelParam._m0[1u].x));
    float _1197 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1279;
    float _1281;
    float _1283;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1246 = fma(_418, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _410)) + cbModelParam._m0[13u].w;
        float _1250 = fma(_418, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _410)) + cbModelParam._m0[14u].w;
        float _1254 = fma(_418, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _410)) + cbModelParam._m0[15u].w;
        float _1257 = fma(_388, cbModelParam._m0[13u].z, fma(_387, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _386));
        float _1260 = fma(_388, cbModelParam._m0[14u].z, fma(_387, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _386));
        float _1263 = fma(_388, cbModelParam._m0[15u].z, fma(_387, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _386));
        float _1289;
        if (_1257 > 0.0)
        {
            _1289 = abs((1.0 - _1246) / _1257);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1257 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1246 + 1.0) / _1257);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1289 = frontier_phi_19_17_ladder;
        }
        float _1497;
        if (_1260 > 0.0)
        {
            _1497 = abs((1.0 - _1250) / _1260);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1250 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1497 = frontier_phi_28_24_ladder;
        }
        float _1686;
        if (_1263 > 0.0)
        {
            _1686 = abs((1.0 - _1254) / _1263);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1254 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1686 = frontier_phi_40_35_ladder;
        }
        float _1688 = isnan(_1497) ? _1289 : (isnan(_1289) ? _1497 : min(_1289, _1497));
        float _1689 = isnan(_1686) ? _1688 : (isnan(_1688) ? _1686 : min(_1688, _1686));
        float _1693 = (_1689 * _1257) + _1246;
        float _1694 = (_1689 * _1260) + _1250;
        float _1695 = (_1689 * _1263) + _1254;
        float _1696 = _1689 * 9.9999997473787516355514526367188e-05;
        float _1698 = (-1.0) - _1696;
        float _1700 = _1696 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1695 > _1700) || ((_1695 < _1698) || ((_1694 > _1700) || ((_1694 < _1698) || ((_1693 < _1698) || (_1693 > _1700))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1695, cbModelParam._m0[9u].z, fma(_1694, cbModelParam._m0[9u].y, _1693 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1695, cbModelParam._m0[10u].z, fma(_1694, cbModelParam._m0[10u].y, _1693 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1695, cbModelParam._m0[11u].z, fma(_1694, cbModelParam._m0[11u].y, _1693 * cbModelParam._m0[11u].x))), _1197);
            frontier_phi_18_40_ladder = _1792.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1792.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1792.x * cbModelParam._m0[1u].y;
        }
        _1279 = frontier_phi_18_40_ladder_2;
        _1281 = frontier_phi_18_40_ladder_1;
        _1283 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_386, _387, _388), _1197);
        _1279 = _1267.x * cbModelParam._m0[1u].y;
        _1281 = _1267.y * cbModelParam._m0[1u].y;
        _1283 = _1267.z * cbModelParam._m0[1u].y;
    }
    float _1286 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1343 = fma(_418, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _410)) + cbModelParam._m0[21u].w;
        float _1347 = fma(_418, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _410)) + cbModelParam._m0[22u].w;
        float _1351 = fma(_418, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _410)) + cbModelParam._m0[23u].w;
        float _1354 = fma(_388, cbModelParam._m0[21u].z, fma(_387, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _386));
        float _1357 = fma(_388, cbModelParam._m0[22u].z, fma(_387, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _386));
        float _1360 = fma(_388, cbModelParam._m0[23u].z, fma(_387, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _386));
        float _1502;
        if (_1354 > 0.0)
        {
            _1502 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1502 = frontier_phi_30_26_ladder;
        }
        float _1713;
        if (_1357 > 0.0)
        {
            _1713 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1713 = frontier_phi_42_37_ladder;
        }
        float _1864;
        if (_1360 > 0.0)
        {
            _1864 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1864 = frontier_phi_51_48_ladder;
        }
        float _1866 = isnan(_1713) ? _1502 : (isnan(_1502) ? _1713 : min(_1502, _1713));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1354) + _1343;
        float _1872 = (_1867 * _1357) + _1347;
        float _1873 = (_1867 * _1360) + _1351;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1875 = (-1.0) - _1874;
        float _1877 = _1874 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1873 > _1877) || ((_1873 < _1875) || ((_1872 > _1877) || ((_1872 < _1875) || ((_1871 < _1875) || (_1871 > _1877))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1873, cbModelParam._m0[17u].z, fma(_1872, cbModelParam._m0[17u].y, _1871 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1873, cbModelParam._m0[18u].z, fma(_1872, cbModelParam._m0[18u].y, _1871 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1873, cbModelParam._m0[19u].z, fma(_1872, cbModelParam._m0[19u].y, _1871 * cbModelParam._m0[19u].x))), _1286);
            frontier_phi_27_51_ladder = _2071.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2071.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2071.x * cbModelParam._m0[1u].z;
        }
        _1379 = frontier_phi_27_51_ladder_2;
        _1381 = frontier_phi_27_51_ladder_1;
        _1383 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_386, _387, _388), _1286);
        _1379 = _1363.x * cbModelParam._m0[1u].z;
        _1381 = _1363.y * cbModelParam._m0[1u].z;
        _1383 = _1363.z * cbModelParam._m0[1u].z;
    }
    float _1395 = _377 * 0.01200000010430812835693359375;
    float _1397 = _1395 * ((cbModelParam._m0[1u].w * (_1379 - _1279)) + _1279);
    float _1398 = _1395 * ((cbModelParam._m0[1u].w * (_1381 - _1281)) + _1281);
    float _1399 = _1395 * ((cbModelParam._m0[1u].w * (_1383 - _1283)) + _1283);
    float _1402 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, _1397 * cbSceneParam._m0[91u].x));
    uvec4 _1418 = floatBitsToUint(cbInstanceData._m0[_351 + 5u]);
    uint _1420 = _1418.x * 14u;
    uint _1421 = _1420 + 13u;
    float _1428 = _377 + (-1.0);
    float _1434 = (cbLight._m0[_1421].x * _1428) + 1.0;
    float _1435 = (cbLight._m0[_1421].y * _1428) + 1.0;
    float _1436 = (cbLight._m0[_1421].z * _1428) + 1.0;
    float _1437 = (cbLight._m0[_1421].w * _1428) + 1.0;
    uint _1438 = _1420 + 5u;
    float _1444 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
    uint _1448 = _1420 + 4u;
    float _1455 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
    uint _1459 = _1420 | 1u;
    float _1470 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_209, _210, _211));
    float _1473 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_209, _210, _211));
    float _3383 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _3394 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1478 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.3183098733425140380859375;
    float _1480 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.3183098733425140380859375;
    float _1487 = ((cbLight._m0[_1438].x * _1444) * _1480) + ((cbLight._m0[_1448].x * _1455) * _1478);
    float _1488 = ((_1444 * cbLight._m0[_1438].y) * _1480) + ((_1455 * cbLight._m0[_1448].y) * _1478);
    float _1489 = ((_1444 * cbLight._m0[_1438].z) * _1480) + ((_1455 * cbLight._m0[_1448].z) * _1478);
    uvec4 _1494 = floatBitsToUint(cbLight._m0[_1420 + 12u]);
    bool _1496 = _1494.x == 0u;
    float _1507;
    float _1509;
    float _1511;
    if (_1496)
    {
        _1507 = _1487;
        _1509 = _1488;
        _1511 = _1489;
    }
    else
    {
        uint _1515 = _1420 + 6u;
        float _1531 = (dot(vec3(cbLight._m0[_1420 + 2u].xyz), vec3(_209, _210, _211)) * 0.5) + 0.5;
        float _1532 = _1531 * _1531;
        float _3405 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1534 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1507 = (((cbLight._m0[_1515].x * 0.3183098733425140380859375) * _1533) * _1534) + _1487;
        _1509 = (((cbLight._m0[_1515].y * 0.3183098733425140380859375) * _1533) * _1534) + _1488;
        _1511 = (((cbLight._m0[_1515].z * 0.3183098733425140380859375) * _1533) * _1534) + _1489;
    }
    bool _1514 = _1494.y == 0u;
    float _1552;
    float _1554;
    float _1556;
    if (_1514)
    {
        _1552 = _1507;
        _1554 = _1509;
        _1556 = _1511;
    }
    else
    {
        uint _1657 = _1420 + 7u;
        float _1673 = (dot(vec3(cbLight._m0[_1420 + 3u].xyz), vec3(_209, _210, _211)) * 0.5) + 0.5;
        float _1674 = _1673 * _1673;
        float _3421 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1676 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
        _1552 = (((cbLight._m0[_1657].x * 0.3183098733425140380859375) * _1675) * _1676) + _1507;
        _1554 = (((cbLight._m0[_1657].y * 0.3183098733425140380859375) * _1675) * _1676) + _1509;
        _1556 = (((cbLight._m0[_1657].z * 0.3183098733425140380859375) * _1675) * _1676) + _1511;
    }
    uint _1558 = _1420 + 8u;
    float _1564 = cbLight._m0[_1420].x + _290;
    float _1565 = cbLight._m0[_1420].y + _291;
    float _1566 = cbLight._m0[_1420].z + _292;
    float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
    float _1574 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1420].xyz));
    float _3437 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1577 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _1578 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _1579 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_1564 * _1570, _1565 * _1570, _1566 * _1570));
    float _3459 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1590 = (exp2(log2(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1596 = (0.5 / ((_1577 + 9.9999999392252902907785028219223e-09) + _1578)) * _1577;
    float _3470 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1598 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.31831014156341552734375;
    uint _1609 = _1420 + 9u;
    float _1615 = cbLight._m0[_1459].x + _290;
    float _1616 = cbLight._m0[_1459].y + _291;
    float _1617 = cbLight._m0[_1459].z + _292;
    float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
    float _1625 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1459].xyz));
    float _3481 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1628 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _1629 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1615 * _1621, _1616 * _1621, _1617 * _1621));
    float _3492 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1638 = (exp2(log2(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1642 = (0.5 / ((_1628 + 9.9999999392252902907785028219223e-09) + _1578)) * _1628;
    float _3503 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1644 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.31831014156341552734375;
    float _1654 = (((_1638 * cbLight._m0[_1609].x) * _1644) * _1444) + (((_1590 * cbLight._m0[_1558].x) * _1598) * _1455);
    float _1655 = (((_1638 * cbLight._m0[_1609].y) * _1644) * _1444) + (((_1590 * cbLight._m0[_1558].y) * _1598) * _1455);
    float _1656 = (((_1638 * cbLight._m0[_1609].z) * _1644) * _1444) + (((_1590 * cbLight._m0[_1558].z) * _1598) * _1455);
    float _1718;
    float _1720;
    float _1722;
    if (_1496)
    {
        _1718 = _1654;
        _1720 = _1655;
        _1722 = _1656;
    }
    else
    {
        uint _1724 = _1420 + 10u;
        uint _1730 = _1420 + 2u;
        float _1736 = cbLight._m0[_1730].x + _290;
        float _1737 = cbLight._m0[_1730].y + _291;
        float _1738 = cbLight._m0[_1730].z + _292;
        float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
        float _1746 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1730].xyz));
        float _3514 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1749 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1750 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1736 * _1742, _1737 * _1742, _1738 * _1742));
        float _3525 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1763 = (0.5 / ((_1749 + 9.9999999392252902907785028219223e-09) + _1578)) * _1749;
        float _3536 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1765 = (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.31831014156341552734375;
        float _1766 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1718 = (((_1759 * cbLight._m0[_1724].x) * _1765) * _1766) + _1654;
        _1720 = (((_1759 * cbLight._m0[_1724].y) * _1765) * _1766) + _1655;
        _1722 = (((_1759 * cbLight._m0[_1724].z) * _1765) * _1766) + _1656;
    }
    float _1801;
    float _1803;
    float _1805;
    if (_1514)
    {
        _1801 = _1718;
        _1803 = _1720;
        _1805 = _1722;
    }
    else
    {
        uint _1812 = _1420 + 11u;
        uint _1818 = _1420 + 3u;
        float _1824 = cbLight._m0[_1818].x + _290;
        float _1825 = cbLight._m0[_1818].y + _291;
        float _1826 = cbLight._m0[_1818].z + _292;
        float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
        float _1834 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1818].xyz));
        float _3552 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1837 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1838 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1824 * _1830, _1825 * _1830, _1826 * _1830));
        float _3563 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = (exp2(log2(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1851 = (0.5 / ((_1837 + 9.9999999392252902907785028219223e-09) + _1578)) * _1837;
        float _3574 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1853 = (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.31831014156341552734375;
        float _1854 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
        _1801 = (((_1847 * cbLight._m0[_1812].x) * _1853) * _1854) + _1718;
        _1803 = (((_1847 * cbLight._m0[_1812].y) * _1853) * _1854) + _1720;
        _1805 = (((_1847 * cbLight._m0[_1812].z) * _1853) * _1854) + _1722;
    }
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    float _1998;
    if (_1418.y == 0u)
    {
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1929;
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1929;
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1929;
        uvec4 _1944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1945 = _1944.x;
        uint _1956 = uint((float(_1944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _312) / _1945))) + floor(float(uint(cbSceneParam._m0[85u].x * _311) / _1945)));
        float _1966 = (log2(_1932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1967 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        uint _1970 = uint(isnan(14.0) ? _1967 : (isnan(_1967) ? 14.0 : min(_1967, 14.0)));
        uvec4 _1975 = texelFetch(g_lightClusterGridBuffer, int(((_1970 << 2u) + (_1956 << 6u)) >> 2u));
        uint _1976 = _1975.x;
        uint _1977 = _1944.z;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        if (((((1u << ((_1977 >> 4u) & 15u)) + 4294967295u) & _1976) == 0u) || ((_1977 & 240u) == 0u))
        {
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
        }
        else
        {
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            float _2232 = 0.0;
            uint _2233 = 0u;
            uint _2242;
            bool _2243;
            for (;;)
            {
                _2242 = texelFetch(g_lightClassification, int((((_1970 << 5u) + (_1956 << 9u)) + (_2233 << 2u)) >> 2u)).x;
                _2243 = _2242 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2243)
                {
                    frontier_phi_68_pred = _2229;
                    frontier_phi_68_pred_1 = _2232;
                    frontier_phi_68_pred_2 = _2231;
                    frontier_phi_68_pred_3 = _2230;
                    frontier_phi_68_pred_4 = _2228;
                    frontier_phi_68_pred_5 = _2227;
                }
                else
                {
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    float _2376;
                    float _2377;
                    uint _2378;
                    _2372 = _2227;
                    _2373 = _2228;
                    _2374 = _2229;
                    _2375 = _2230;
                    _2376 = _2231;
                    _2377 = _2232;
                    _2378 = _2242;
                    float _2299;
                    float _2300;
                    float _2301;
                    float _2302;
                    float _2303;
                    float _2304;
                    for (;;)
                    {
                        uint _2382 = uint(findLSB(_2378)) + (_2233 << 5u);
                        uint _2379 = (_2378 + 4294967295u) & _2378;
                        uint _2384 = _2382 * 48u;
                        vec4 _2398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2384)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 3u)).x));
                        uint _2404 = (_2382 * 48u) + 4u;
                        vec4 _2417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2404)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 3u)).x));
                        uint _2423 = (_2382 * 48u) + 8u;
                        vec3 _2434 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2423)).x, texelFetch(g_PointLightRenderingBuffer, int(_2423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2423 + 2u)).x));
                        float _2438 = _2398.x - _1930;
                        float _2439 = _2398.y - _1931;
                        float _2440 = _2398.z - _1932;
                        float _2441 = dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440));
                        float _2444 = inversesqrt(_2441);
                        float _2453 = 1.0 - (_2441 * _2398.w);
                        float _3600 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
                        float _2454 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                        float _2455 = sqrt(_2441) * _2417.w;
                        float _2458 = 1.39999997615814208984375 / (_2455 + 1.39999997615814208984375);
                        float _2459 = _2458 * _2458;
                        float _2462 = ((1.0 - _2459) * dot(vec3(_332, _335, _338), vec3(_2444 * _2438, _2444 * _2439, _2444 * _2440))) + _2459;
                        float _2465 = _2455 * _2455;
                        float _2469 = ((isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0))) * _2454) / ((_2465 * 0.699999988079071044921875) + 1.0);
                        float _2473 = (-0.0) - _1930;
                        float _2474 = (-0.0) - _1931;
                        float _2475 = (-0.0) - _1932;
                        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
                        float _2483 = dot(vec3(_332, _335, _338), vec3(_2479 * _2473, _2479 * _2474, _2479 * _2475));
                        float _3616 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
                        float _3627 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                        float _2487 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                        float _2491 = (0.5 / (((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) + 9.9999999392252902907785028219223e-09) + _2487)) * _2487;
                        float _3638 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
                        float _2500 = (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 3.1415927410125732421875) / ((_2465 * 2.1991131305694580078125) + 3.141590118408203125)) * _2454;
                        _2302 = (_2469 * _2417.x) + _2375;
                        _2303 = (_2469 * _2417.y) + _2376;
                        _2304 = (_2469 * _2417.z) + _2377;
                        _2299 = (_2500 * _2434.x) + _2372;
                        _2300 = (_2500 * _2434.y) + _2373;
                        _2301 = (_2500 * _2434.z) + _2374;
                        if (_2379 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2372 = _2299;
                            _2373 = _2300;
                            _2374 = _2301;
                            _2375 = _2302;
                            _2376 = _2303;
                            _2377 = _2304;
                            _2378 = _2379;
                        }
                    }
                    frontier_phi_68_pred = _2301;
                    frontier_phi_68_pred_1 = _2304;
                    frontier_phi_68_pred_2 = _2303;
                    frontier_phi_68_pred_3 = _2302;
                    frontier_phi_68_pred_4 = _2300;
                    frontier_phi_68_pred_5 = _2299;
                }
                _2081 = frontier_phi_68_pred;
                _2087 = frontier_phi_68_pred_1;
                _2085 = frontier_phi_68_pred_2;
                _2083 = frontier_phi_68_pred_3;
                _2079 = frontier_phi_68_pred_4;
                _2077 = frontier_phi_68_pred_5;
                uint _2234 = _2233 + 1u;
                if (_2234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2227 = _2077;
                    _2228 = _2079;
                    _2229 = _2081;
                    _2230 = _2083;
                    _2231 = _2085;
                    _2232 = _2087;
                    _2233 = _2234;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
        }
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.z;
        uint _2093 = (_2091 >> 8u) & 15u;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        if (((4294967295u << _2093) & _1976) == 0u)
        {
            _2198 = _2076;
            _2200 = _2078;
            _2202 = _2080;
            _2204 = _2082;
            _2206 = _2084;
            _2208 = _2086;
        }
        else
        {
            float _2223 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2093 < ((_2091 >> 12u) & 15u))
            {
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2207;
                float _2209;
                float _2355 = _2076;
                float _2356 = _2078;
                float _2357 = _2080;
                float _2358 = _2082;
                float _2359 = _2084;
                float _2360 = _2086;
                uint _2361 = _2093;
                uint _2370;
                bool _2371;
                for (;;)
                {
                    _2370 = texelFetch(g_lightClassification, int((((_1970 << 5u) + (_1956 << 9u)) + (_2361 << 2u)) >> 2u)).x;
                    _2371 = _2370 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2371)
                    {
                        frontier_phi_79_pred = _2360;
                        frontier_phi_79_pred_1 = _2359;
                        frontier_phi_79_pred_2 = _2358;
                        frontier_phi_79_pred_3 = _2357;
                        frontier_phi_79_pred_4 = _2356;
                        frontier_phi_79_pred_5 = _2355;
                    }
                    else
                    {
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2519;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2527 = _2355;
                        float _2528 = _2356;
                        float _2529 = _2357;
                        float _2530 = _2358;
                        float _2531 = _2359;
                        float _2532 = _2360;
                        uint _2533 = _2370;
                        uint _2534;
                        vec4 _2559;
                        float _2560;
                        vec4 _2575;
                        vec3 _2587;
                        vec4 _2603;
                        vec4 _2619;
                        float _2666;
                        bool _2667;
                        for (;;)
                        {
                            uint _2544 = ((_2361 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2533));
                            _2534 = (_2533 + 4294967295u) & _2533;
                            uint _2546 = _2544 * 40u;
                            _2559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 3u)).x));
                            _2560 = _2559.w;
                            uint _2562 = (_2544 * 40u) + 4u;
                            _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            uint _2577 = (_2544 * 40u) + 8u;
                            _2587 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x));
                            uint _2590 = (_2544 * 40u) + 16u;
                            _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            uint _2606 = (_2544 * 40u) + 20u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            uint _2622 = (_2544 * 40u) + 24u;
                            vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2641 = (_2544 * 40u) + 28u;
                            vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            _2666 = fma(_1932, _2654.z, fma(_1931, _2654.y, _2654.x * _1930)) + _2654.w;
                            _2667 = !((fma(_1932, _2635.z, fma(_1931, _2635.y, _2635.x * _1930)) + _2635.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2667)
                            {
                                float _2694 = _2559.x - _1930;
                                float _2695 = _2559.y - _1931;
                                float _2696 = _2559.z - _1932;
                                float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                                float _2700 = inversesqrt(_2697);
                                float _2701 = _2700 * _2694;
                                float _2702 = _2700 * _2695;
                                float _2703 = _2700 * _2696;
                                float _2707 = 1.0 - (_2697 / (_2560 * _2560));
                                float _3649 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                                float _2708 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                                float _2712 = sqrt(_2697) * _2575.w;
                                float _2714 = 1.39999997615814208984375 / (_2712 + 1.39999997615814208984375);
                                float _2715 = _2714 * _2714;
                                float _2716 = 1.0 - _2715;
                                float _2718 = (_2716 * dot(vec3(_2701, _2702, _2703), vec3(_332, _335, _338))) + _2715;
                                float _2721 = _2712 * _2712;
                                float _2725 = (fma(_1932, _2603.z, fma(_1931, _2603.y, _2603.x * _1930)) + _2603.w) / _2666;
                                float _2726 = (fma(_1932, _2619.z, fma(_1931, _2619.y, _2619.x * _1930)) + _2619.w) / _2666;
                                float _2730 = 1.0 - dot(vec2(_2725, _2726), vec2(_2725, _2726));
                                float _3665 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                                float _2731 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                                float _2732 = _2731 * (((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2708) / ((_2721 * 0.699999988079071044921875) + 1.0));
                                float _2742 = dot(vec3(_332, _335, _338), vec3((-0.0) - (_1930 * _2223), (-0.0) - (_1931 * _2223), (-0.0) - (_1932 * _2223)));
                                float _3676 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2750 = (_2716 * dot(vec3(_332, _335, _338), vec3(_2701, _2702, _2703))) + _2715;
                                float _3687 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2751 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
                                float _2755 = (0.5 / (((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) + 9.9999999392252902907785028219223e-09) + _2751)) * _2751;
                                float _3698 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2762 = (_2731 * _2708) * (((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 3.1415927410125732421875) / ((_2721 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2732 * _2575.z;
                                frontier_phi_85_pred_1 = _2732 * _2575.y;
                                frontier_phi_85_pred_2 = _2732 * _2575.x;
                                frontier_phi_85_pred_3 = _2762 * _2587.z;
                                frontier_phi_85_pred_4 = _2762 * _2587.y;
                                frontier_phi_85_pred_5 = _2762 * _2587.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2771 = frontier_phi_85_pred;
                            _2770 = frontier_phi_85_pred_1;
                            _2769 = frontier_phi_85_pred_2;
                            _2768 = frontier_phi_85_pred_3;
                            _2767 = frontier_phi_85_pred_4;
                            _2766 = frontier_phi_85_pred_5;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            _2519 = _2771 + _2532;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            _2516 = _2768 + _2529;
                            if (_2534 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2519;
                                _2533 = _2534;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2519;
                        frontier_phi_79_pred_1 = _2518;
                        frontier_phi_79_pred_2 = _2517;
                        frontier_phi_79_pred_3 = _2516;
                        frontier_phi_79_pred_4 = _2515;
                        frontier_phi_79_pred_5 = _2514;
                    }
                    _2209 = frontier_phi_79_pred;
                    _2207 = frontier_phi_79_pred_1;
                    _2205 = frontier_phi_79_pred_2;
                    _2203 = frontier_phi_79_pred_3;
                    _2201 = frontier_phi_79_pred_4;
                    _2199 = frontier_phi_79_pred_5;
                    uint _2362 = _2361 + 1u;
                    if (_2362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2355 = _2199;
                        _2356 = _2201;
                        _2357 = _2203;
                        _2358 = _2205;
                        _2359 = _2207;
                        _2360 = _2209;
                        _2361 = _2362;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2205;
                frontier_phi_60_61_ladder_1 = _2209;
                frontier_phi_60_61_ladder_2 = _2207;
                frontier_phi_60_61_ladder_3 = _2203;
                frontier_phi_60_61_ladder_4 = _2201;
                frontier_phi_60_61_ladder_5 = _2199;
            }
            else
            {
                frontier_phi_60_61_ladder = _2082;
                frontier_phi_60_61_ladder_1 = _2086;
                frontier_phi_60_61_ladder_2 = _2084;
                frontier_phi_60_61_ladder_3 = _2080;
                frontier_phi_60_61_ladder_4 = _2078;
                frontier_phi_60_61_ladder_5 = _2076;
            }
            _2198 = frontier_phi_60_61_ladder_5;
            _2200 = frontier_phi_60_61_ladder_4;
            _2202 = frontier_phi_60_61_ladder_3;
            _2204 = frontier_phi_60_61_ladder;
            _2206 = frontier_phi_60_61_ladder_2;
            _2208 = frontier_phi_60_61_ladder_1;
        }
        float _2213 = isnan(1.0) ? _377 : (isnan(_377) ? 1.0 : min(_377, 1.0));
        _1988 = (_2213 * _2204) + _1552;
        _1990 = (_2213 * _2206) + _1554;
        _1992 = (_2213 * _2208) + _1556;
        _1994 = ((_2198 * 0.039999999105930328369140625) * _2213) + _1801;
        _1996 = ((_2200 * 0.039999999105930328369140625) * _2213) + _1803;
        _1998 = ((_2202 * 0.039999999105930328369140625) * _2213) + _1805;
    }
    else
    {
        _1988 = _1552;
        _1990 = _1554;
        _1992 = _1556;
        _1994 = _1801;
        _1996 = _1803;
        _1998 = _1805;
    }
    float _3714 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3725 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3736 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _2015 = ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1988 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _377))) + ((_1994 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1188)) * cbPerFrame._m0[3u].x);
    float _2016 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1990 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _377))) + ((_1996 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1188)) * cbPerFrame._m0[3u].x);
    float _2017 = ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1992 + ((isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))) * _377))) + ((_1998 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1188)) * cbPerFrame._m0[3u].x);
    uint _2018 = _351 + 6u;
    float _2026 = _311 / cbSceneParam._m0[86u].x;
    float _2027 = _312 / cbSceneParam._m0[86u].y;
    vec4 _2041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2026, _2027, (log2((isnan(cbSceneParam._m0[77u].w) ? _231 : (isnan(_231) ? cbSceneParam._m0[77u].w : min(_231, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2043 = _2041.x;
    float _2044 = _2041.y;
    float _2045 = _2041.z;
    float _2046 = _2041.w;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    if (_231 > cbSceneParam._m0[78u].w)
    {
        float _2101 = isnan(_231) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _231 : min(cbSceneParam._m0[80u].w, _231));
        float _2102 = _2101 / _231;
        float _2113 = _2102 * _283;
        float _2114 = _284 * _2102;
        float _2115 = (-0.0) - _2114;
        float _2116 = _2102 * _285;
        float _2118 = (cbSceneParam._m0[77u].w * _2115) / _2101;
        float _2119 = _2118 + cbSceneParam._m0[79u].w;
        float _2120 = cbSceneParam._m0[79u].w - _2114;
        float _2126 = sqrt(((_2113 * _2113) + (_2114 * _2114)) + (_2116 * _2116));
        float _2129 = (1.0 - (cbSceneParam._m0[77u].w / _2101)) * _2126;
        float _2134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2312;
        if (abs((_2115 - _2118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2312 = ((((_2119 > 0.0) ? exp2(_2134 * _2119) : (2.0 - exp2(_2136 * _2119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2129;
        }
        else
        {
            float _2256 = 1.0 / cbSceneParam._m0[80u].x;
            float _2257 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : max(_2119, _2120));
            float _2258 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : min(_2119, _2120));
            float _2267 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : min(_2257, 0.0));
            float _2268 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : min(_2258, 0.0));
            _2312 = ((abs(_2126 / _2115) * cbSceneParam._m0[80u].y) * ((((_2267 - _2268) * 2.0) - ((exp2(_2134 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0)))) - exp2(_2134 * (isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))))) * _2256)) - ((exp2(_2136 * _2267) - exp2(_2136 * _2268)) * _2256))) + (_2129 * cbSceneParam._m0[80u].z);
        }
        vec4 _2314 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2026, _2027, 1.0), 0.0);
        float _2323 = exp2((_2312 * (-1.44269502162933349609375)) * (1.0 - _2314.w));
        float _2324 = log2(_2323);
        float _2340 = log2(_2046);
        _2138 = (exp2(_2340 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2324 * cbSceneParam._m0[78u].x)) * _2314.x) / cbSceneParam._m0[78u].x)) + _2043;
        _2140 = (exp2(_2340 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2324 * cbSceneParam._m0[78u].y)) * _2314.y) / cbSceneParam._m0[78u].y)) + _2044;
        _2142 = (exp2(_2340 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2324 * cbSceneParam._m0[78u].z)) * _2314.z) / cbSceneParam._m0[78u].z)) + _2045;
        _2144 = _2323 * _2046;
    }
    else
    {
        _2138 = _2043;
        _2140 = _2044;
        _2142 = _2045;
        _2144 = _2046;
    }
    bool _2350;
    vec4 _2154;
    vec4 _2177;
    float _2179;
    float _2183;
    float _2184;
    float _2185;
    float _2186;
    bool _2197;
    for (;;)
    {
        _2154 = cbMatDynParam._m0[0u];
        float _2156 = roundEven(_2154.y);
        bool _2157 = _2156 == 3.0;
        float _2159 = log2(_2144);
        float _2166 = exp2(_2159 * cbSceneParam._m0[78u].x) * _2015;
        float _2167 = exp2(_2159 * cbSceneParam._m0[78u].y) * _2016;
        float _2168 = exp2(_2159 * cbSceneParam._m0[78u].z) * _2017;
        float _2175 = _299 + (-0.5);
        _2177 = cbMtdParam._m0[1u];
        _2179 = _2177.y * _2175;
        float _2182 = (_2156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2183 = _2182 * (_2157 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2138)));
        _2184 = _2182 * (_2157 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2140)));
        _2185 = _2182 * (_2157 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2142)));
        _2186 = _2175 * 0.999000012874603271484375;
        _2197 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2197)
        {
            if ((cbInstanceData._m0[_351 + 7u].x + _2186) < 0.5)
            {
                _2350 = true;
                break;
            }
        }
        uint _2291 = _353 + uint(_2154.w);
        if ((cbInstanceData._m0[_2291].w < 1.0) && ((cbInstanceData._m0[_2291].w + _2186) < 0.5))
        {
            _2350 = true;
            break;
        }
        if ((_2179 + _201) < _2177.x)
        {
            _2350 = true;
            break;
        }
        _2350 = false;
        break;
    }
    float _2505;
    if (_2350)
    {
        discard_state = true;
        _2505 = 0.0;
    }
    else
    {
        _2505 = cbInstanceData._m0[_2018].w;
    }
    SV_Target.x = _2183;
    SV_Target.y = _2184;
    SV_Target.z = _2185;
    SV_Target.w = _2505;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2018].w;
    discard_exit();
}


