#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1332;
float _3738;
float _3739;
float _3740;
float _3741;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _306 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _266.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _3750 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _337 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _339 = _337.x;
    float _340 = _337.y;
    float _341 = _337.z;
    float _348 = ((_320.x - _339) * _307) + _339;
    float _349 = ((_320.y - _340) * _307) + _340;
    float _350 = ((_320.z - _341) * _307) + _341;
    float _375 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _266.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _3761 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    vec4 _388 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _399 = ((_388.x - _348) * _376) + _348;
    float _400 = ((_388.y - _349) * _376) + _349;
    float _401 = ((_388.z - _350) * _376) + _350;
    float _424 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _266.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _3772 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    vec4 _438 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _454 = ((((_438.x - _399) * _425) + _399) * 2.0) + (-1.0);
    float _456 = ((((_438.y - _400) * _425) + _400) * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _3783 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    vec4 _481 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _486 = _481.x * cbMtdParam._m0[10u].x;
    float _487 = _481.y * cbMtdParam._m0[10u].y;
    float _488 = _481.z * cbMtdParam._m0[10u].z;
    vec4 _507 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _521 = (((_507.x * cbMtdParam._m0[11u].x) - _486) * _307) + _486;
    float _522 = (((_507.y * cbMtdParam._m0[11u].y) - _487) * _307) + _487;
    float _523 = (((_507.z * cbMtdParam._m0[11u].z) - _488) * _307) + _488;
    vec4 _541 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _555 = (((_541.x * cbMtdParam._m0[12u].x) - _521) * _376) + _521;
    float _556 = (((_541.y * cbMtdParam._m0[12u].y) - _522) * _376) + _522;
    float _557 = (((_541.z * cbMtdParam._m0[12u].z) - _523) * _376) + _523;
    vec4 _575 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _609 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _617 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_575.x * cbMtdParam._m0[13u].x) - _555) * _425) + _555)) * _609.x;
    float _620 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_575.y * cbMtdParam._m0[13u].y) - _556) * _425) + _556)) * _609.y;
    float _623 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_575.z * cbMtdParam._m0[13u].z) - _557) * _425) + _557)) * _609.z;
    vec4 _635 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _637 = _635.x;
    vec4 _677 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _679 = _677.x;
    float _696 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _679) * _307) + _679;
    float _699 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _696) * _376) + _696;
    float _706 = (((_699 - _637) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _699) * _425)) * cbMtdParam._m0[14u].w) + _637;
    vec4 _720 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _724 = _720.z;
    float _731 = (((((_438.z - _401) * _425) + _401) - _724) * cbMtdParam._m0[15u].x) + _724;
    float _735 = (((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].z) + _454;
    float _736 = (((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].z) + _456;
    float _739 = fma(_462, _250, fma(_736, _242 * TANGENT.x, (_228 * _220) * _735));
    float _742 = fma(_462, _251, fma(_736, _242 * TANGENT.y, (_228 * _221) * _735));
    float _745 = fma(_462, _252, fma(_736, _242 * TANGENT.z, (_228 * _222) * _735));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _3794 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _753 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3816 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3827 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3838 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _757 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _773 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _823 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _813);
    float _824 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _813);
    float _825 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _813);
    float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
    float _830 = _823 * _829;
    float _831 = _824 * _829;
    float _832 = _825 * _829;
    vec4 _837 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _839 = _837.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1011 = sqrt(((_823 * _823) + (_824 * _824)) + (_825 * _825));
        float _1017 = (cbMatDynParam._m0[5u].x * _1011) + cbMatDynParam._m0[5u].y;
        float _3849 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1022 = (cbMatDynParam._m0[5u].z * _1011) + cbMatDynParam._m0[5u].w;
        float _3860 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _1018)) + _1018) < ((_839 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _850 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _851 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _872 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _875 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _888 = uint(roundEven(NORMAL.w)) * 13u;
    uint _889 = _888 + 9u;
    uint _890 = _889 + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_890].z;
    float _3871 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _902 = 1.0 - _757;
    float _903 = _899 * _902;
    float _904 = _900 * _902;
    float _905 = _901 * _902;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _757;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _757;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _757;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _850, cbSceneParam._m0[86u].y * _851));
    float _928 = _925.x * TEXCOORD_4;
    float _929 = dot(vec3(_750, _751, _752), vec3(_830, _831, _832));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _750) - _830;
    float _937 = (_932 * _751) - _831;
    float _938 = (_932 * _752) - _832;
    float _942 = abs(dot(vec3(_830, _831, _832), vec3(_750, _751, _752)));
    float _3904 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_753);
    float _957 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _963 = (1.0 - _957) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _944;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1060 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1064 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1089 = _992 + _750;
        float _1090 = _996 + _751;
        float _1091 = _1000 + _752;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_750, _751, _752), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3952 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_750, _751, _752), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3985 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_750, _751, _752), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4018 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1379 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1383 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1406 = _992 + _750;
        float _1407 = _996 + _751;
        float _1408 = _1000 + _752;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_750, _751, _752), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4081 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_750, _751, _752), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4114 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_750, _751, _752), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4147 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = _1332;
        _1653 = _1332;
        _1654 = _1332;
        _1655 = _1332;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1344)) + _1344;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1345)) + _1345;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1346)) + _1346;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _936 * 0.5;
    float _1713 = _937 * 0.5;
    float _1714 = _938 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1842 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1845 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1873 = frontier_phi_19_17_ladder;
        }
        float _2097;
        if (_1842 > 0.0)
        {
            _2097 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2354;
        if (_1845 > 0.0)
        {
            _2354 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2354 = frontier_phi_40_35_ladder;
        }
        float _2356 = isnan(_2097) ? _1873 : (isnan(_1873) ? _2097 : min(_1873, _2097));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1839) + _1828;
        float _2362 = (_2357 * _1842) + _1832;
        float _2363 = (_2357 * _1845) + _1836;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_18_40_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_18_40_ladder_2;
        _1863 = frontier_phi_18_40_ladder_1;
        _1865 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1781);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1938 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1941 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2102;
        if (_1935 > 0.0)
        {
            _2102 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2102 = frontier_phi_30_26_ladder;
        }
        float _2381;
        if (_1938 > 0.0)
        {
            _2381 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2381 = frontier_phi_42_37_ladder;
        }
        float _2594;
        if (_1941 > 0.0)
        {
            _2594 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2594 = frontier_phi_51_48_ladder;
        }
        float _2596 = isnan(_2381) ? _2102 : (isnan(_2102) ? _2381 : min(_2102, _2381));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1935) + _1924;
        float _2602 = (_2597 * _1938) + _1928;
        float _2603 = (_2597 * _1941) + _1932;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_27_51_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_27_51_ladder_2;
        _1962 = frontier_phi_27_51_ladder_1;
        _1964 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_963 * _913) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_963 * _915) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_963 * _916) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    vec4 _1998 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_850, _851));
    float _2000 = _1998.w;
    float _2012 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2000);
    float _2013 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2000);
    float _2014 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2000);
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_888 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _928 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2056 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2060 = _2020 | 1u;
    float _2071 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_750, _751, _752));
    float _2074 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_750, _751, _752));
    float _4283 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _4294 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2081 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2088 = ((cbLight._m0[_2037].x * _2043) * _2081) + (((cbLight._m0[_2047].x * _2012) * _2056) * _2079);
    float _2089 = ((_2043 * cbLight._m0[_2037].y) * _2081) + (((cbLight._m0[_2047].y * _2013) * _2056) * _2079);
    float _2090 = ((_2043 * cbLight._m0[_2037].z) * _2081) + (((cbLight._m0[_2047].z * _2014) * _2056) * _2079);
    uvec4 _2094 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2096 = _2094.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2096)
    {
        _2107 = _2088;
        _2109 = _2089;
        _2111 = _2090;
    }
    else
    {
        uint _2115 = _2020 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4305 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2134 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _2088;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _2089;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _2090;
    }
    bool _2114 = _2094.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2114)
    {
        _2152 = _2107;
        _2154 = _2109;
        _2156 = _2111;
    }
    else
    {
        uint _2325 = _2020 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4321 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2344 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2152 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2107;
        _2154 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2109;
        _2156 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2111;
    }
    uint _2159 = _2020 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _753) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2020].x + _830;
    float _2175 = cbLight._m0[_2020].y + _831;
    float _2176 = cbLight._m0[_2020].z + _832;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2020].xyz));
    float _4337 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2188 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2189 = dot(vec3(_750, _751, _752), vec3(_2181, _2182, _2183));
    float _4359 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2181, _2182, _2183));
    float _4370 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _910;
    float _2212 = 0.959999978542327880859375 - _911;
    float _2213 = 0.959999978542327880859375 - _912;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4381 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2247 = _2020 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _753) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2060].x + _830;
    float _2261 = cbLight._m0[_2060].y + _831;
    float _2262 = cbLight._m0[_2060].z + _832;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2060].xyz));
    float _4392 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2274 = dot(vec3(_750, _751, _752), vec3(_2267, _2268, _2269));
    float _4403 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2267, _2268, _2269));
    float _4414 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2188 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2300) + _2259) * _2273))) * _2273;
    float _4425 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2210) + _913) * cbLight._m0[_2247].x) * _2312) * _2043) + ((((cbLight._m0[_2159].x * _2012) * ((_2209 * _2210) + _913)) * _2233) * _2056);
    float _2323 = (((((_2293 * _2212) + _915) * cbLight._m0[_2247].y) * _2312) * _2043) + ((((cbLight._m0[_2159].y * _2013) * ((_2209 * _2212) + _915)) * _2233) * _2056);
    float _2324 = (((((_2293 * _2213) + _916) * cbLight._m0[_2247].z) * _2312) * _2043) + ((((cbLight._m0[_2159].z * _2014) * ((_2209 * _2213) + _916)) * _2233) * _2056);
    float _2386;
    float _2388;
    float _2390;
    if (_2096)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2020 + 2u;
        uint _2396 = _2020 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _753) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _830;
        float _2413 = cbLight._m0[_2392].y + _831;
        float _2414 = cbLight._m0[_2392].z + _832;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2392].xyz));
        float _4436 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2426 = dot(vec3(_750, _751, _752), vec3(_2419, _2420, _2421));
        float _4447 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4458 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2188 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2452) + _2411) * _2425))) * _2425;
        float _4469 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2386 = (((((_2445 * _2210) + _913) * cbLight._m0[_2396].x) * _2464) * _2465) + _2322;
        _2388 = (((((_2445 * _2212) + _915) * cbLight._m0[_2396].y) * _2464) * _2465) + _2323;
        _2390 = (((((_2445 * _2213) + _916) * cbLight._m0[_2396].z) * _2464) * _2465) + _2324;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2114)
    {
        _2500 = _2386;
        _2502 = _2388;
        _2504 = _2390;
    }
    else
    {
        uint _2511 = _2020 + 3u;
        uint _2515 = _2020 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _753) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _830;
        float _2532 = cbLight._m0[_2511].y + _831;
        float _2533 = cbLight._m0[_2511].z + _832;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2511].xyz));
        float _4485 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2545 = dot(vec3(_750, _751, _752), vec3(_2538, _2539, _2540));
        float _4496 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4507 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2188 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2571) + _2530) * _2544))) * _2544;
        float _4518 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2500 = (((((_2564 * _2210) + _913) * cbLight._m0[_2515].x) * _2583) * _2584) + _2386;
        _2502 = (((((_2564 * _2212) + _915) * cbLight._m0[_2515].y) * _2583) * _2584) + _2388;
        _2504 = (((((_2564 * _2213) + _916) * cbLight._m0[_2515].z) * _2583) * _2584) + _2390;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2018.y == 0u)
    {
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2659;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2659;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2659;
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _851) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _850) / _2675)));
        float _2696 = (log2(_2662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2974)
                {
                    frontier_phi_68_pred = _2960;
                    frontier_phi_68_pred_1 = _2963;
                    frontier_phi_68_pred_2 = _2962;
                    frontier_phi_68_pred_3 = _2961;
                    frontier_phi_68_pred_4 = _2959;
                    frontier_phi_68_pred_5 = _2958;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2973;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2964 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2660;
                        float _3170 = _3129.y - _2661;
                        float _3171 = _3129.z - _2662;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_869, _872, _875), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4544 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2660;
                        float _3205 = (-0.0) - _2661;
                        float _3206 = (-0.0) - _2662;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _944;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_869, _872, _875), vec3(_3211, _3212, _3213));
                        float _4560 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3246 = dot(vec3(_869, _872, _875), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4571 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4582 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4593 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3033 = (_3200 * _3148.x) + _3106;
                        _3034 = (_3200 * _3148.y) + _3107;
                        _3035 = (_3200 * _3148.z) + _3108;
                        _3030 = (_3281 * _3165.x) + _3103;
                        _3031 = (_3281 * _3165.y) + _3104;
                        _3032 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_68_pred = _3032;
                    frontier_phi_68_pred_1 = _3035;
                    frontier_phi_68_pred_2 = _3034;
                    frontier_phi_68_pred_3 = _3033;
                    frontier_phi_68_pred_4 = _3031;
                    frontier_phi_68_pred_5 = _3030;
                }
                _2811 = frontier_phi_68_pred;
                _2817 = frontier_phi_68_pred_1;
                _2815 = frontier_phi_68_pred_2;
                _2813 = frontier_phi_68_pred_3;
                _2809 = frontier_phi_68_pred_4;
                _2807 = frontier_phi_68_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2807;
                    _2959 = _2809;
                    _2960 = _2811;
                    _2961 = _2813;
                    _2962 = _2815;
                    _2963 = _2817;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2823) & _2706) == 0u)
        {
            _2926 = _2806;
            _2928 = _2808;
            _2930 = _2810;
            _2932 = _2812;
            _2934 = _2814;
            _2936 = _2816;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
            float _2952 = _2951 * _2660;
            float _2953 = _2951 * _2661;
            float _2954 = _2951 * _2662;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3086 = _2806;
                float _3087 = _2808;
                float _3088 = _2810;
                float _3089 = _2812;
                float _3090 = _2814;
                float _3091 = _2816;
                uint _3092 = _2823;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3102)
                    {
                        frontier_phi_79_pred = _3091;
                        frontier_phi_79_pred_1 = _3090;
                        frontier_phi_79_pred_2 = _3089;
                        frontier_phi_79_pred_3 = _3088;
                        frontier_phi_79_pred_4 = _3087;
                        frontier_phi_79_pred_5 = _3086;
                    }
                    else
                    {
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        uint _3314 = _3101;
                        uint _3315;
                        vec4 _3340;
                        float _3341;
                        vec4 _3356;
                        vec3 _3368;
                        vec4 _3383;
                        vec4 _3398;
                        float _3445;
                        bool _3446;
                        for (;;)
                        {
                            uint _3325 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3314));
                            _3315 = (_3314 + 4294967295u) & _3314;
                            uint _3327 = _3325 * 40u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3341 = _3340.w;
                            uint _3343 = (_3325 * 40u) + 4u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3325 * 40u) + 8u;
                            _3368 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x));
                            uint _3370 = (_3325 * 40u) + 16u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3325 * 40u) + 20u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3325 * 40u) + 24u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3420 = (_3325 * 40u) + 28u;
                            vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3445 = fma(_2662, _3433.z, fma(_2661, _3433.y, _3433.x * _2660)) + _3433.w;
                            _3446 = !((fma(_2662, _3414.z, fma(_2661, _3414.y, _3414.x * _2660)) + _3414.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3446)
                            {
                                float _3473 = _3340.x - _2660;
                                float _3474 = _3340.y - _2661;
                                float _3475 = _3340.z - _2662;
                                float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                                float _3479 = inversesqrt(_3476);
                                float _3480 = _3479 * _3473;
                                float _3481 = _3479 * _3474;
                                float _3482 = _3479 * _3475;
                                float _3486 = 1.0 - (_3476 / (_3341 * _3341));
                                float _4604 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3491 = sqrt(_3476) * _3356.w;
                                float _3493 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                                float _3494 = _3493 * _3493;
                                float _3497 = ((1.0 - _3494) * dot(vec3(_3480, _3481, _3482), vec3(_869, _872, _875))) + _3494;
                                float _3500 = _3491 * _3491;
                                float _3504 = (fma(_2662, _3383.z, fma(_2661, _3383.y, _3383.x * _2660)) + _3383.w) / _3445;
                                float _3505 = (fma(_2662, _3398.z, fma(_2661, _3398.y, _3398.x * _2660)) + _3398.w) / _3445;
                                float _3509 = 1.0 - dot(vec2(_3504, _3505), vec2(_3504, _3505));
                                float _4620 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3511 = _3510 * (((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3487) / ((_3500 * 0.699999988079071044921875) + 1.0));
                                float _3523 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                                float _3524 = 1.0 - _944;
                                float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                                float _3532 = _3531 * _3531;
                                float _3533 = _3532 * _3532;
                                float _3534 = _3480 - _2952;
                                float _3535 = _3481 - _2953;
                                float _3536 = _3482 - _2954;
                                float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                                float _3544 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4631 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3548 = dot(vec3(_869, _872, _875), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                                float _4642 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                                float _3556 = _3493 * _3532;
                                float _3557 = _3556 * _3556;
                                float _3563 = ((1.0 - _3557) * dot(vec3(_869, _872, _875), vec3(_3480, _3481, _3482))) + _3557;
                                float _4653 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3565 = 1.0 - _3532;
                                float _3575 = (0.5 / (((_3564 * ((_3547 * _3565) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3532) * _3547))) * _3564;
                                float _4664 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3585 = (_3510 * _3487) * (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3555 * _3555) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3511 * _3356.z;
                                frontier_phi_85_pred_1 = _3511 * _3356.y;
                                frontier_phi_85_pred_2 = _3511 * _3356.x;
                                frontier_phi_85_pred_3 = _3585 * _3368.z;
                                frontier_phi_85_pred_4 = _3585 * _3368.y;
                                frontier_phi_85_pred_5 = _3585 * _3368.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3594 = frontier_phi_85_pred;
                            _3593 = frontier_phi_85_pred_1;
                            _3592 = frontier_phi_85_pred_2;
                            _3591 = frontier_phi_85_pred_3;
                            _3590 = frontier_phi_85_pred_4;
                            _3589 = frontier_phi_85_pred_5;
                            _3298 = _3592 + _3311;
                            _3299 = _3593 + _3312;
                            _3300 = _3594 + _3313;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            if (_3315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3315;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3300;
                        frontier_phi_79_pred_1 = _3299;
                        frontier_phi_79_pred_2 = _3298;
                        frontier_phi_79_pred_3 = _3297;
                        frontier_phi_79_pred_4 = _3296;
                        frontier_phi_79_pred_5 = _3295;
                    }
                    _2937 = frontier_phi_79_pred;
                    _2935 = frontier_phi_79_pred_1;
                    _2933 = frontier_phi_79_pred_2;
                    _2931 = frontier_phi_79_pred_3;
                    _2929 = frontier_phi_79_pred_4;
                    _2927 = frontier_phi_79_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2927;
                        _3087 = _2929;
                        _3088 = _2931;
                        _3089 = _2933;
                        _3090 = _2935;
                        _3091 = _2937;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2933;
                frontier_phi_60_61_ladder_1 = _2937;
                frontier_phi_60_61_ladder_2 = _2935;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2929;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_60_61_ladder = _2812;
                frontier_phi_60_61_ladder_1 = _2816;
                frontier_phi_60_61_ladder_2 = _2814;
                frontier_phi_60_61_ladder_3 = _2810;
                frontier_phi_60_61_ladder_4 = _2808;
                frontier_phi_60_61_ladder_5 = _2806;
            }
            _2926 = frontier_phi_60_61_ladder_5;
            _2928 = frontier_phi_60_61_ladder_4;
            _2930 = frontier_phi_60_61_ladder_3;
            _2932 = frontier_phi_60_61_ladder;
            _2934 = frontier_phi_60_61_ladder_2;
            _2936 = frontier_phi_60_61_ladder_1;
        }
        float _2941 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2718 = (_2941 * _2932) + _2152;
        _2720 = (_2941 * _2934) + _2154;
        _2722 = (_2941 * _2936) + _2156;
        _2724 = ((_2926 * _913) * _2941) + _2500;
        _2726 = ((_2928 * _915) * _2941) + _2502;
        _2728 = ((_2930 * _916) * _2941) + _2504;
    }
    else
    {
        _2718 = _2152;
        _2720 = _2154;
        _2722 = _2156;
        _2724 = _2500;
        _2726 = _2502;
        _2728 = _2504;
    }
    float _4680 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4691 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4702 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2745 = ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2718 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _928))) + ((_2724 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2746 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2720 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _928))) + ((_2726 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2747 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2722 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _928))) + ((_2728 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2748 = _888 + 6u;
    float _2756 = _850 / cbSceneParam._m0[86u].x;
    float _2757 = _851 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _773 : (isnan(_773) ? cbSceneParam._m0[77u].w : min(_773, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_773 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_773) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _773 : min(cbSceneParam._m0[80u].w, _773));
        float _2832 = _2831 / _773;
        float _2843 = _2832 * _823;
        float _2844 = _824 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2846 = _2832 * _825;
        float _2848 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2844;
        float _2856 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2845 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2989 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3043 = ((abs(_2856 / _2845) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2866 * _2998) - exp2(_2866 * _2999)) * _2987))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2776);
        _2868 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2870 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2872 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2874 = _3054 * _2776;
    }
    else
    {
        _2868 = _2773;
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
    }
    bool _3081;
    vec4 _2884;
    vec4 _2906;
    float _2908;
    float _2912;
    float _2913;
    float _2914;
    float _2915;
    bool _2925;
    for (;;)
    {
        _2884 = cbMatDynParam._m0[0u];
        float _2886 = roundEven(_2884.y);
        bool _2887 = _2886 == 3.0;
        float _2888 = log2(_2874);
        float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * _2745;
        float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * _2746;
        float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * _2747;
        float _2904 = _839 + (-0.5);
        _2906 = cbMtdParam._m0[1u];
        _2908 = _2906.y * _2904;
        float _2911 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2912 = _2911 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
        _2913 = _2911 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
        _2914 = _2911 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
        _2915 = _2904 * 0.999000012874603271484375;
        _2925 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2925)
        {
            if ((cbInstanceData._m0[_888 + 7u].x + _2915) < 0.5)
            {
                _3081 = true;
                break;
            }
        }
        uint _3022 = _889 + uint(_2884.w);
        if ((cbInstanceData._m0[_3022].w < 1.0) && ((cbInstanceData._m0[_3022].w + _2915) < 0.5))
        {
            _3081 = true;
            break;
        }
        if ((_2908 + 1.0) < _2906.x)
        {
            _3081 = true;
            break;
        }
        _3081 = false;
        break;
    }
    float _3286;
    if (_3081)
    {
        discard_state = true;
        _3286 = 0.0;
    }
    else
    {
        _3286 = cbInstanceData._m0[_2748].w;
    }
    SV_Target.x = _2912;
    SV_Target.y = _2913;
    SV_Target.z = _2914;
    SV_Target.w = _3286;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
    discard_exit();
}


