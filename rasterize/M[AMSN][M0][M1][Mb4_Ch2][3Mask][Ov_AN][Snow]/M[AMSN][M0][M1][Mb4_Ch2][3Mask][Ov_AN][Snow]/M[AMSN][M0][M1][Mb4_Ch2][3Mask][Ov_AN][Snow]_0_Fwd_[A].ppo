#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1441;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _278 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _318 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _278.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _3835 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _349 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _351 = _349.x;
    float _352 = _349.y;
    float _353 = _349.z;
    float _360 = ((_332.x - _351) * _319) + _351;
    float _361 = ((_332.y - _352) * _319) + _352;
    float _362 = ((_332.z - _353) * _319) + _353;
    float _384 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _278.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _3846 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _397 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _408 = ((_397.x - _360) * _385) + _360;
    float _409 = ((_397.y - _361) * _385) + _361;
    float _410 = ((_397.z - _362) * _385) + _362;
    float _433 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _278.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _3857 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    vec4 _447 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _463 = ((((_447.x - _408) * _434) + _408) * 2.0) + (-1.0);
    float _465 = ((((_447.y - _409) * _434) + _409) * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3868 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))));
    float _472 = fma(_471, _254, 0.0);
    float _473 = fma(_471, _255, 0.0);
    float _474 = fma(_471, _256, 0.0);
    float _478 = inversesqrt(dot(vec3(_472, _473, _474), vec3(_472, _473, _474)));
    float _504 = (cbMtdParam._m0[14u].y + dot(vec4(_478 * _472, _478 * _473, _478 * _474, 0.0), vec4(cbMtdParam._m0[16u].w, cbMtdParam._m0[17u].xy, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x * cbMtdParam._m0[14u].x);
    float _3879 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    vec4 _524 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _529 = _524.x * cbMtdParam._m0[10u].x;
    float _530 = _524.y * cbMtdParam._m0[10u].y;
    float _531 = _524.z * cbMtdParam._m0[10u].z;
    vec4 _549 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _563 = (((_549.x * cbMtdParam._m0[11u].x) - _529) * _319) + _529;
    float _564 = (((_549.y * cbMtdParam._m0[11u].y) - _530) * _319) + _530;
    float _565 = (((_549.z * cbMtdParam._m0[11u].z) - _531) * _319) + _531;
    vec4 _583 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _597 = (((_583.x * cbMtdParam._m0[12u].x) - _563) * _385) + _563;
    float _598 = (((_583.y * cbMtdParam._m0[12u].y) - _564) * _385) + _564;
    float _599 = (((_583.z * cbMtdParam._m0[12u].z) - _565) * _385) + _565;
    vec4 _617 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _651 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _659 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_617.x * cbMtdParam._m0[13u].x) - _597) * _434) + _597)) * _651.x;
    float _662 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_617.y * cbMtdParam._m0[13u].y) - _598) * _434) + _598)) * _651.y;
    float _665 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_617.z * cbMtdParam._m0[13u].z) - _599) * _434) + _599)) * _651.z;
    vec4 _677 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _688 = ((_677.x - _659) * _505) + _659;
    float _689 = ((_677.y - _662) * _505) + _662;
    float _690 = ((_677.z - _665) * _505) + _665;
    vec4 _702 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _704 = _702.x;
    vec4 _744 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _746 = _744.x;
    float _763 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _746) * _319) + _746;
    float _766 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _763) * _385) + _763;
    float _773 = (((_766 - _704) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _766) * _434)) * cbMtdParam._m0[14u].w) + _704;
    float _775 = _773 - (_773 * _505);
    vec4 _789 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _793 = _789.z;
    float _800 = (((((_447.z - _410) * _434) + _410) - _793) * cbMtdParam._m0[15u].x) + _793;
    vec4 _812 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _819 = (_812.x * 2.0) + (-1.0);
    float _820 = (_812.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _3890 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _829 = ((_812.z - _800) * _505) + _800;
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) - _471) * _505) + _471;
    float _844 = (((_819 - _463) * _505) + _463) + (cbMtdParam._m0[16u].z * ((_789.x * 2.0) + (-1.0)));
    float _845 = (((_820 - _465) * _505) + _465) + (cbMtdParam._m0[16u].z * ((_789.y * 2.0) + (-1.0)));
    float _848 = fma(_838, _254, fma(_845, _246 * TANGENT.x, (_232 * _224) * _844));
    float _851 = fma(_838, _255, fma(_845, _246 * TANGENT.y, (_232 * _225) * _844));
    float _854 = fma(_838, _256, fma(_845, _246 * TANGENT.z, (_232 * _226) * _844));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3901 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _862 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3923 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3934 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3945 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _866 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    vec4 _946 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _948 = _946.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1120 = sqrt(((_932 * _932) + (_933 * _933)) + (_934 * _934));
        float _1126 = (cbMatDynParam._m0[5u].x * _1120) + cbMatDynParam._m0[5u].y;
        float _3956 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1131 = (cbMatDynParam._m0[5u].z * _1120) + cbMatDynParam._m0[5u].w;
        float _3967 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _1127)) + _1127) < ((_948 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _981 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _984 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _997 = uint(roundEven(NORMAL.w)) * 13u;
    uint _998 = _997 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_999].z;
    float _3978 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1011 = 1.0 - _866;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _866;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _866;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _866;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1037 = _1034.x * TEXCOORD_4;
    float _1038 = dot(vec3(_859, _860, _861), vec3(_939, _940, _941));
    float _1041 = _1038 * 2.0;
    float _1045 = (_1041 * _859) - _939;
    float _1046 = (_1041 * _860) - _940;
    float _1047 = (_1041 * _861) - _941;
    float _1051 = abs(dot(vec3(_939, _940, _941), vec3(_859, _860, _861)));
    float _4011 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1053 = sqrt(_862);
    float _1066 = exp2((_1053 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1053 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1053 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1053;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1440;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1165 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1169 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1173 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1198 = _1101 + _859;
        float _1199 = _1105 + _860;
        float _1200 = _1109 + _861;
        float _1210 = fma(_1200, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198)) - _1165;
        float _1211 = fma(_1200, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198)) - _1169;
        float _1212 = fma(_1200, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198)) - _1173;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1165 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1169 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[34u].z) + ((((((_1173 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1268 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1234.x + (-0.5));
        float _1270 = _1268 * (_1234.y + (-0.5));
        float _1271 = _1268 * (_1234.z + (-0.5));
        float _1278 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1241.x + (-0.5));
        float _1280 = _1278 * (_1241.y + (-0.5));
        float _1281 = _1278 * (_1241.z + (-0.5));
        float _1288 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1248.x + (-0.5));
        float _1290 = _1288 * (_1248.y + (-0.5));
        float _1291 = _1288 * (_1248.z + (-0.5));
        float _1298 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1255.x + (-0.5));
        float _1300 = _1298 * (_1255.y + (-0.5));
        float _1301 = _1298 * (_1255.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1322 = (dot(vec3(_859, _860, _861), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1332 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4059 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1334 + 1.0))) + _1339) * _1302;
        float _1349 = _1270 * 0.5;
        float _1350 = _1280 * 0.5;
        float _1351 = _1290 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_859, _860, _861), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4092 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1376 + 1.0))) + _1381) * _1303;
        float _1391 = _1271 * 0.5;
        float _1392 = _1281 * 0.5;
        float _1393 = _1291 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_859, _860, _861), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4125 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1418 + 1.0))) + _1423) * _1304;
        _1440 = _1271;
        _1442 = _1270;
        _1443 = _1269;
        _1444 = _1281;
        _1445 = _1280;
        _1446 = _1279;
        _1447 = _1291;
        _1448 = _1290;
        _1449 = _1289;
        _1450 = _1304;
        _1451 = _1303;
        _1452 = _1302;
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1441;
        _1442 = _1441;
        _1443 = _1441;
        _1444 = _1441;
        _1445 = _1441;
        _1446 = _1441;
        _1447 = _1441;
        _1448 = _1441;
        _1449 = _1441;
        _1450 = _1441;
        _1451 = _1441;
        _1452 = _1441;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1484 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1488 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1492 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1515 = _1101 + _859;
        float _1516 = _1105 + _860;
        float _1517 = _1109 + _861;
        float _1527 = fma(_1517, cbModelParam._m0[30u].z, fma(_1516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1515)) - _1484;
        float _1528 = fma(_1517, cbModelParam._m0[31u].z, fma(_1516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1515)) - _1488;
        float _1529 = fma(_1517, cbModelParam._m0[32u].z, fma(_1516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1515)) - _1492;
        float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
        float _1546 = ((_1533 * _1527) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1484 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1533 * _1528) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1488 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1533 * _1529) / cbModelParam._m0[35u].z) + ((((((_1492 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        float _1583 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1550.x + (-0.5));
        float _1585 = _1583 * (_1550.y + (-0.5));
        float _1586 = _1583 * (_1550.z + (-0.5));
        float _1593 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1557.x + (-0.5));
        float _1595 = _1593 * (_1557.y + (-0.5));
        float _1596 = _1593 * (_1557.z + (-0.5));
        float _1603 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1564.x + (-0.5));
        float _1605 = _1603 * (_1564.y + (-0.5));
        float _1606 = _1603 * (_1564.z + (-0.5));
        float _1613 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1571.x + (-0.5));
        float _1615 = _1613 * (_1571.y + (-0.5));
        float _1616 = _1613 * (_1571.z + (-0.5));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = _1584 * 0.5;
        float _1621 = _1594 * 0.5;
        float _1622 = _1604 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_859, _860, _861), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4188 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1647 + 1.0))) + _1652) * _1617;
        float _1662 = _1585 * 0.5;
        float _1663 = _1595 * 0.5;
        float _1664 = _1605 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_859, _860, _861), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4221 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1689 + 1.0))) + _1694) * _1618;
        float _1704 = _1586 * 0.5;
        float _1705 = _1596 * 0.5;
        float _1706 = _1606 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_859, _860, _861), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4254 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1731 + 1.0))) + _1736) * _1619;
        _1753 = _1586;
        _1754 = _1585;
        _1755 = _1584;
        _1756 = _1596;
        _1757 = _1595;
        _1758 = _1594;
        _1759 = _1606;
        _1760 = _1605;
        _1761 = _1604;
        _1762 = _1619;
        _1763 = _1618;
        _1764 = _1617;
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
    }
    else
    {
        _1753 = _1441;
        _1754 = _1441;
        _1755 = _1441;
        _1756 = _1441;
        _1757 = _1441;
        _1758 = _1441;
        _1759 = _1441;
        _1760 = _1441;
        _1761 = _1441;
        _1762 = _1441;
        _1763 = _1441;
        _1764 = _1441;
        _1765 = 0.0;
        _1766 = 0.0;
        _1767 = 0.0;
    }
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1453)) + _1453;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1454)) + _1454;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1455)) + _1455;
    float _1800 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1777));
    float _1821 = _1045 * 0.5;
    float _1822 = _1046 * 0.5;
    float _1823 = _1047 * 0.5;
    float _1824 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1827 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1830 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1864;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1837 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1440, _1444, _1447, _1450));
        float _1841 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1845 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1852 = dot(vec4(cbModelParam._m0[39u]), vec4(_1821, _1822, _1823, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1875;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1866 = dot(vec4(cbModelParam._m0[40u]), vec4(_1821, _1822, _1823, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1879 = (_1875 * cbModelParam._m0[1u].x) + (_1864 * (1.0 - cbModelParam._m0[1u].x));
    float _1889 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1889 : min(cbModelParam._m0[25u].z, _1889));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1937 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1941 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1945 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1948 = fma(_1047, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045));
        float _1951 = fma(_1047, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045));
        float _1954 = fma(_1047, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045));
        float _1982;
        if (_1948 > 0.0)
        {
            _1982 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1982 = frontier_phi_19_17_ladder;
        }
        float _2185;
        if (_1951 > 0.0)
        {
            _2185 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2185 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_1954 > 0.0)
        {
            _2439 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2441 = isnan(_2185) ? _1982 : (isnan(_1982) ? _2185 : min(_1982, _2185));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1948) + _1937;
        float _2447 = (_2442 * _1951) + _1941;
        float _2448 = (_2442 * _1954) + _1945;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2449;
        float _2453 = _2449 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 > _2453) || ((_2447 < _2451) || ((_2446 < _2451) || (_2446 > _2453))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2448, cbModelParam._m0[9u].z, fma(_2447, cbModelParam._m0[9u].y, _2446 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2448, cbModelParam._m0[10u].z, fma(_2447, cbModelParam._m0[10u].y, _2446 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2448, cbModelParam._m0[11u].z, fma(_2447, cbModelParam._m0[11u].y, _2446 * cbModelParam._m0[11u].x))), _1890);
            frontier_phi_18_40_ladder = _2576.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2576.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2576.x * cbModelParam._m0[1u].y;
        }
        _1970 = frontier_phi_18_40_ladder_2;
        _1972 = frontier_phi_18_40_ladder_1;
        _1974 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1045, _1046, _1047), _1890);
        _1970 = _1958.x * cbModelParam._m0[1u].y;
        _1972 = _1958.y * cbModelParam._m0[1u].y;
        _1974 = _1958.z * cbModelParam._m0[1u].y;
    }
    float _1978 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1978 : min(cbModelParam._m0[25u].w, _1978));
    float _2069;
    float _2071;
    float _2073;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2033 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2037 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2041 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2044 = fma(_1047, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045));
        float _2047 = fma(_1047, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045));
        float _2050 = fma(_1047, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045));
        float _2190;
        if (_2044 > 0.0)
        {
            _2190 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2190 = frontier_phi_30_26_ladder;
        }
        float _2466;
        if (_2047 > 0.0)
        {
            _2466 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2466 = frontier_phi_42_37_ladder;
        }
        float _2679;
        if (_2050 > 0.0)
        {
            _2679 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2679 = frontier_phi_51_48_ladder;
        }
        float _2681 = isnan(_2466) ? _2190 : (isnan(_2190) ? _2466 : min(_2190, _2466));
        float _2682 = isnan(_2679) ? _2681 : (isnan(_2681) ? _2679 : min(_2681, _2679));
        float _2686 = (_2682 * _2044) + _2033;
        float _2687 = (_2682 * _2047) + _2037;
        float _2688 = (_2682 * _2050) + _2041;
        float _2689 = _2682 * 9.9999997473787516355514526367188e-05;
        float _2690 = (-1.0) - _2689;
        float _2692 = _2689 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2688 > _2692) || ((_2688 < _2690) || ((_2687 > _2692) || ((_2687 < _2690) || ((_2686 < _2690) || (_2686 > _2692))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2688, cbModelParam._m0[17u].z, fma(_2687, cbModelParam._m0[17u].y, _2686 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2688, cbModelParam._m0[18u].z, fma(_2687, cbModelParam._m0[18u].y, _2686 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2688, cbModelParam._m0[19u].z, fma(_2687, cbModelParam._m0[19u].y, _2686 * cbModelParam._m0[19u].x))), _1979);
            frontier_phi_27_51_ladder = _2886.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2886.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2886.x * cbModelParam._m0[1u].z;
        }
        _2069 = frontier_phi_27_51_ladder_2;
        _2071 = frontier_phi_27_51_ladder_1;
        _2073 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2053 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1045, _1046, _1047), _1979);
        _2069 = _2053.x * cbModelParam._m0[1u].z;
        _2071 = _2053.y * cbModelParam._m0[1u].z;
        _2073 = _2053.z * cbModelParam._m0[1u].z;
    }
    float _2086 = (((_1072 * _1022) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2069 - _1970)) + _1970);
    float _2088 = (((_1072 * _1024) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2071 - _1972)) + _1972);
    float _2090 = (((_1072 * _1025) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2073 - _1974)) + _1974);
    float _2093 = fma(_2090, cbSceneParam._m0[89u].z, fma(_2088, cbSceneParam._m0[89u].y, _2086 * cbSceneParam._m0[89u].x));
    float _2096 = fma(_2090, cbSceneParam._m0[90u].z, fma(_2088, cbSceneParam._m0[90u].y, _2086 * cbSceneParam._m0[90u].x));
    float _2099 = fma(_2090, cbSceneParam._m0[91u].z, fma(_2088, cbSceneParam._m0[91u].y, _2086 * cbSceneParam._m0[91u].x));
    uvec4 _2109 = floatBitsToUint(cbInstanceData._m0[_997 + 5u]);
    uint _2111 = _2109.x * 14u;
    uint _2112 = _2111 + 13u;
    float _2119 = _1037 + (-1.0);
    float _2124 = (cbLight._m0[_2112].x * _2119) + 1.0;
    float _2125 = (cbLight._m0[_2112].y * _2119) + 1.0;
    float _2126 = (cbLight._m0[_2112].z * _2119) + 1.0;
    float _2127 = (cbLight._m0[_2112].w * _2119) + 1.0;
    uint _2128 = _2111 + 5u;
    float _2134 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2138 = _2111 + 4u;
    float _2144 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2148 = _2111 | 1u;
    float _2159 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_859, _860, _861));
    float _2162 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_859, _860, _861));
    float _4390 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _4401 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2167 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2169 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2176 = ((cbLight._m0[_2128].x * _2134) * _2169) + ((cbLight._m0[_2138].x * _2144) * _2167);
    float _2177 = ((_2134 * cbLight._m0[_2128].y) * _2169) + ((_2144 * cbLight._m0[_2138].y) * _2167);
    float _2178 = ((_2134 * cbLight._m0[_2128].z) * _2169) + ((_2144 * cbLight._m0[_2138].z) * _2167);
    uvec4 _2182 = floatBitsToUint(cbLight._m0[_2111 + 12u]);
    bool _2184 = _2182.x == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2184)
    {
        _2195 = _2176;
        _2197 = _2177;
        _2199 = _2178;
    }
    else
    {
        uint _2203 = _2111 + 6u;
        float _2219 = (dot(vec3(cbLight._m0[_2111 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4412 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2222 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2195 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _2176;
        _2197 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _2177;
        _2199 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _2178;
    }
    bool _2202 = _2182.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2202)
    {
        _2240 = _2195;
        _2242 = _2197;
        _2244 = _2199;
    }
    else
    {
        uint _2410 = _2111 + 7u;
        float _2426 = (dot(vec3(cbLight._m0[_2111 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2429 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2240 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2195;
        _2242 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2197;
        _2244 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2199;
    }
    uint _2247 = _2111 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _862) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2111].x + _939;
    float _2263 = cbLight._m0[_2111].y + _940;
    float _2264 = cbLight._m0[_2111].z + _941;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2111].xyz));
    float _4444 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2276 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2277 = dot(vec3(_859, _860, _861), vec3(_2269, _2270, _2271));
    float _4466 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2269, _2270, _2271));
    float _4477 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2298 = 0.959999978542327880859375 - _1019;
    float _2300 = 0.959999978542327880859375 - _1020;
    float _2301 = 0.959999978542327880859375 - _1021;
    float _2308 = 1.0 - _2261;
    float _2319 = (0.5 / (((_2276 * ((_2275 * _2308) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2308) + _2261) * _2275))) * _2275;
    float _4488 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2332 = _2111 + 9u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _862) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2148].x + _939;
    float _2346 = cbLight._m0[_2148].y + _940;
    float _2347 = cbLight._m0[_2148].z + _941;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2148].xyz));
    float _4499 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2359 = dot(vec3(_859, _860, _861), vec3(_2352, _2353, _2354));
    float _4510 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2352, _2353, _2354));
    float _4521 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2344 * _2344;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
    float _2385 = 1.0 - _2344;
    float _2395 = (0.5 / (((_2276 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2385) + _2344) * _2358))) * _2358;
    float _4532 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    float _2407 = (((((_2378 * _2298) + _1022) * cbLight._m0[_2332].x) * _2397) * _2134) + (((((_2297 * _2298) + _1022) * cbLight._m0[_2247].x) * _2321) * _2144);
    float _2408 = (((((_2378 * _2300) + _1024) * cbLight._m0[_2332].y) * _2397) * _2134) + (((((_2297 * _2300) + _1024) * cbLight._m0[_2247].y) * _2321) * _2144);
    float _2409 = (((((_2378 * _2301) + _1025) * cbLight._m0[_2332].z) * _2397) * _2134) + (((((_2297 * _2301) + _1025) * cbLight._m0[_2247].z) * _2321) * _2144);
    float _2471;
    float _2473;
    float _2475;
    if (_2184)
    {
        _2471 = _2407;
        _2473 = _2408;
        _2475 = _2409;
    }
    else
    {
        uint _2477 = _2111 + 2u;
        uint _2481 = _2111 + 10u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _862) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _939;
        float _2498 = cbLight._m0[_2477].y + _940;
        float _2499 = cbLight._m0[_2477].z + _941;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2477].xyz));
        float _4543 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2511 = dot(vec3(_859, _860, _861), vec3(_2504, _2505, _2506));
        float _4554 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4565 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2276 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2537) + _2496) * _2510))) * _2510;
        float _4576 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2471 = (((((_2530 * _2298) + _1022) * cbLight._m0[_2481].x) * _2549) * _2550) + _2407;
        _2473 = (((((_2530 * _2300) + _1024) * cbLight._m0[_2481].y) * _2549) * _2550) + _2408;
        _2475 = (((((_2530 * _2301) + _1025) * cbLight._m0[_2481].z) * _2549) * _2550) + _2409;
    }
    float _2585;
    float _2587;
    float _2589;
    if (_2202)
    {
        _2585 = _2471;
        _2587 = _2473;
        _2589 = _2475;
    }
    else
    {
        uint _2596 = _2111 + 3u;
        uint _2600 = _2111 + 11u;
        float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2596].w)) * _862) * 0.949999988079071044921875);
        float _2615 = _2614 * _2614;
        float _2616 = cbLight._m0[_2596].x + _939;
        float _2617 = cbLight._m0[_2596].y + _940;
        float _2618 = cbLight._m0[_2596].z + _941;
        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
        float _2623 = _2622 * _2616;
        float _2624 = _2622 * _2617;
        float _2625 = _2622 * _2618;
        float _2626 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2596].xyz));
        float _4592 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2630 = dot(vec3(_859, _860, _861), vec3(_2623, _2624, _2625));
        float _4603 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2634 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_2623, _2624, _2625));
        float _4614 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2638 = _2615 * _2615;
        float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
        float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2656 = 1.0 - _2615;
        float _2666 = (0.5 / (((_2276 * ((_2629 * _2656) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2656) + _2615) * _2629))) * _2629;
        float _4625 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2668 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
        float _2669 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2585 = (((((_2649 * _2298) + _1022) * cbLight._m0[_2600].x) * _2668) * _2669) + _2471;
        _2587 = (((((_2649 * _2300) + _1024) * cbLight._m0[_2600].y) * _2668) * _2669) + _2473;
        _2589 = (((((_2649 * _2301) + _1025) * cbLight._m0[_2600].z) * _2668) * _2669) + _2475;
    }
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_2109.y == 0u)
    {
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2744;
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2744;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2744;
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.x;
        uint _2771 = uint((float(_2759.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2760))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2760)));
        float _2781 = (log2(_2747 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2782 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        uint _2785 = uint(isnan(14.0) ? _2782 : (isnan(_2782) ? 14.0 : min(_2782, 14.0)));
        uvec4 _2790 = texelFetch(g_lightClusterGridBuffer, int(((_2785 << 2u) + (_2771 << 6u)) >> 2u));
        uint _2791 = _2790.x;
        uint _2792 = _2759.z;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((((1u << ((_2792 >> 4u) & 15u)) + 4294967295u) & _2791) == 0u) || ((_2792 & 240u) == 0u))
        {
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
        }
        else
        {
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            uint _3049 = 0u;
            uint _3058;
            bool _3059;
            for (;;)
            {
                _3058 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                _3059 = _3058 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3059)
                {
                    frontier_phi_68_pred = _3045;
                    frontier_phi_68_pred_1 = _3048;
                    frontier_phi_68_pred_2 = _3047;
                    frontier_phi_68_pred_3 = _3046;
                    frontier_phi_68_pred_4 = _3044;
                    frontier_phi_68_pred_5 = _3043;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3058;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3049 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _2745;
                        float _3255 = _3214.y - _2746;
                        float _3256 = _3214.z - _2747;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_978, _981, _984), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4651 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _2745;
                        float _3290 = (-0.0) - _2746;
                        float _3291 = (-0.0) - _2747;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3306 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _1053;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_978, _981, _984), vec3(_3296, _3297, _3298));
                        float _4667 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3331 = dot(vec3(_978, _981, _984), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4678 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3274 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3264) + _3340;
                        float _4689 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4700 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3338 * _3338) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3118 = (_3285 * _3233.x) + _3191;
                        _3119 = (_3285 * _3233.y) + _3192;
                        _3120 = (_3285 * _3233.z) + _3193;
                        _3115 = (_3366 * _3250.x) + _3188;
                        _3116 = (_3366 * _3250.y) + _3189;
                        _3117 = (_3366 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_68_pred = _3117;
                    frontier_phi_68_pred_1 = _3120;
                    frontier_phi_68_pred_2 = _3119;
                    frontier_phi_68_pred_3 = _3118;
                    frontier_phi_68_pred_4 = _3116;
                    frontier_phi_68_pred_5 = _3115;
                }
                _2896 = frontier_phi_68_pred;
                _2902 = frontier_phi_68_pred_1;
                _2900 = frontier_phi_68_pred_2;
                _2898 = frontier_phi_68_pred_3;
                _2894 = frontier_phi_68_pred_4;
                _2892 = frontier_phi_68_pred_5;
                uint _3050 = _3049 + 1u;
                if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3043 = _2892;
                    _3044 = _2894;
                    _3045 = _2896;
                    _3046 = _2898;
                    _3047 = _2900;
                    _3048 = _2902;
                    _3049 = _3050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
        }
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.z;
        uint _2908 = (_2906 >> 8u) & 15u;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((4294967295u << _2908) & _2791) == 0u)
        {
            _3011 = _2891;
            _3013 = _2893;
            _3015 = _2895;
            _3017 = _2897;
            _3019 = _2899;
            _3021 = _2901;
        }
        else
        {
            float _3036 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
            float _3037 = _3036 * _2745;
            float _3038 = _3036 * _2746;
            float _3039 = _3036 * _2747;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2908 < ((_2906 >> 12u) & 15u))
            {
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3171 = _2891;
                float _3172 = _2893;
                float _3173 = _2895;
                float _3174 = _2897;
                float _3175 = _2899;
                float _3176 = _2901;
                uint _3177 = _2908;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3187)
                    {
                        frontier_phi_79_pred = _3176;
                        frontier_phi_79_pred_1 = _3175;
                        frontier_phi_79_pred_2 = _3174;
                        frontier_phi_79_pred_3 = _3173;
                        frontier_phi_79_pred_4 = _3172;
                        frontier_phi_79_pred_5 = _3171;
                    }
                    else
                    {
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3393 = _3171;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        uint _3399 = _3186;
                        uint _3400;
                        vec4 _3425;
                        float _3426;
                        vec4 _3441;
                        vec3 _3453;
                        vec4 _3468;
                        vec4 _3483;
                        float _3530;
                        bool _3531;
                        for (;;)
                        {
                            uint _3410 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3399));
                            _3400 = (_3399 + 4294967295u) & _3399;
                            uint _3412 = _3410 * 40u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3426 = _3425.w;
                            uint _3428 = (_3410 * 40u) + 4u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3410 * 40u) + 8u;
                            _3453 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x));
                            uint _3455 = (_3410 * 40u) + 16u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3410 * 40u) + 20u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3486 = (_3410 * 40u) + 24u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3505 = (_3410 * 40u) + 28u;
                            vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3530 = fma(_2747, _3518.z, fma(_2746, _3518.y, _3518.x * _2745)) + _3518.w;
                            _3531 = !((fma(_2747, _3499.z, fma(_2746, _3499.y, _3499.x * _2745)) + _3499.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3531)
                            {
                                float _3558 = _3425.x - _2745;
                                float _3559 = _3425.y - _2746;
                                float _3560 = _3425.z - _2747;
                                float _3561 = dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560));
                                float _3564 = inversesqrt(_3561);
                                float _3565 = _3564 * _3558;
                                float _3566 = _3564 * _3559;
                                float _3567 = _3564 * _3560;
                                float _3571 = 1.0 - (_3561 / (_3426 * _3426));
                                float _4711 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3576 = sqrt(_3561) * _3441.w;
                                float _3578 = 1.39999997615814208984375 / (_3576 + 1.39999997615814208984375);
                                float _3579 = _3578 * _3578;
                                float _3582 = ((1.0 - _3579) * dot(vec3(_3565, _3566, _3567), vec3(_978, _981, _984))) + _3579;
                                float _3585 = _3576 * _3576;
                                float _3589 = (fma(_2747, _3468.z, fma(_2746, _3468.y, _3468.x * _2745)) + _3468.w) / _3530;
                                float _3590 = (fma(_2747, _3483.z, fma(_2746, _3483.y, _3483.x * _2745)) + _3483.w) / _3530;
                                float _3594 = 1.0 - dot(vec2(_3589, _3590), vec2(_3589, _3590));
                                float _4727 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3596 = _3595 * (((isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0))) * _3572) / ((_3585 * 0.699999988079071044921875) + 1.0));
                                float _3608 = exp2(log2(1.0 / ((_3585 * 3.5) + 5.0)) * 0.25);
                                float _3609 = 1.0 - _1053;
                                float _3616 = sqrt(1.0 - ((1.0 - (_3609 * _3609)) * (1.0 - (_3608 * _3608))));
                                float _3617 = _3616 * _3616;
                                float _3618 = _3617 * _3617;
                                float _3619 = _3565 - _3037;
                                float _3620 = _3566 - _3038;
                                float _3621 = _3567 - _3039;
                                float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                                float _3629 = dot(vec3(_978, _981, _984), vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039));
                                float _4738 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3633 = dot(vec3(_978, _981, _984), vec3(_3625 * _3619, _3625 * _3620, _3625 * _3621));
                                float _4749 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3640 = ((_3636 * _3636) * (_3618 + (-1.0))) + 1.0;
                                float _3641 = _3578 * _3617;
                                float _3642 = _3641 * _3641;
                                float _3648 = ((1.0 - _3642) * dot(vec3(_978, _981, _984), vec3(_3565, _3566, _3567))) + _3642;
                                float _4760 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3650 = 1.0 - _3617;
                                float _3660 = (0.5 / (((_3649 * ((_3632 * _3650) + _3617)) + 9.9999999392252902907785028219223e-09) + (((_3649 * _3650) + _3617) * _3632))) * _3649;
                                float _4771 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3670 = (_3595 * _3572) * (((_3618 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3640 * _3640) * ((_3585 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3596 * _3441.z;
                                frontier_phi_85_pred_1 = _3596 * _3441.y;
                                frontier_phi_85_pred_2 = _3596 * _3441.x;
                                frontier_phi_85_pred_3 = _3670 * _3453.z;
                                frontier_phi_85_pred_4 = _3670 * _3453.y;
                                frontier_phi_85_pred_5 = _3670 * _3453.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3679 = frontier_phi_85_pred;
                            _3678 = frontier_phi_85_pred_1;
                            _3677 = frontier_phi_85_pred_2;
                            _3676 = frontier_phi_85_pred_3;
                            _3675 = frontier_phi_85_pred_4;
                            _3674 = frontier_phi_85_pred_5;
                            _3383 = _3677 + _3396;
                            _3384 = _3678 + _3397;
                            _3385 = _3679 + _3398;
                            _3380 = _3674 + _3393;
                            _3381 = _3675 + _3394;
                            _3382 = _3676 + _3395;
                            if (_3400 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3400;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3385;
                        frontier_phi_79_pred_1 = _3384;
                        frontier_phi_79_pred_2 = _3383;
                        frontier_phi_79_pred_3 = _3382;
                        frontier_phi_79_pred_4 = _3381;
                        frontier_phi_79_pred_5 = _3380;
                    }
                    _3022 = frontier_phi_79_pred;
                    _3020 = frontier_phi_79_pred_1;
                    _3018 = frontier_phi_79_pred_2;
                    _3016 = frontier_phi_79_pred_3;
                    _3014 = frontier_phi_79_pred_4;
                    _3012 = frontier_phi_79_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3012;
                        _3172 = _3014;
                        _3173 = _3016;
                        _3174 = _3018;
                        _3175 = _3020;
                        _3176 = _3022;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3018;
                frontier_phi_60_61_ladder_1 = _3022;
                frontier_phi_60_61_ladder_2 = _3020;
                frontier_phi_60_61_ladder_3 = _3016;
                frontier_phi_60_61_ladder_4 = _3014;
                frontier_phi_60_61_ladder_5 = _3012;
            }
            else
            {
                frontier_phi_60_61_ladder = _2897;
                frontier_phi_60_61_ladder_1 = _2901;
                frontier_phi_60_61_ladder_2 = _2899;
                frontier_phi_60_61_ladder_3 = _2895;
                frontier_phi_60_61_ladder_4 = _2893;
                frontier_phi_60_61_ladder_5 = _2891;
            }
            _3011 = frontier_phi_60_61_ladder_5;
            _3013 = frontier_phi_60_61_ladder_4;
            _3015 = frontier_phi_60_61_ladder_3;
            _3017 = frontier_phi_60_61_ladder;
            _3019 = frontier_phi_60_61_ladder_2;
            _3021 = frontier_phi_60_61_ladder_1;
        }
        float _3026 = isnan(1.0) ? _1037 : (isnan(_1037) ? 1.0 : min(_1037, 1.0));
        _2803 = (_3026 * _3017) + _2240;
        _2805 = (_3026 * _3019) + _2242;
        _2807 = (_3026 * _3021) + _2244;
        _2809 = ((_3011 * _1022) * _3026) + _2585;
        _2811 = ((_3013 * _1024) * _3026) + _2587;
        _2813 = ((_3015 * _1025) * _3026) + _2589;
    }
    else
    {
        _2803 = _2240;
        _2805 = _2242;
        _2807 = _2244;
        _2809 = _2585;
        _2811 = _2587;
        _2813 = _2589;
    }
    float _4787 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4798 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4809 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2830 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2803 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1037))) + ((_2809 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _2831 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2805 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1037))) + ((_2811 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _2832 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2807 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1037))) + ((_2813 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    uint _2833 = _997 + 6u;
    float _2841 = _959 / cbSceneParam._m0[86u].x;
    float _2842 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2856 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2858 = _2856.x;
    float _2859 = _2856.y;
    float _2860 = _2856.z;
    float _2861 = _2856.w;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2916 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2917 = _2916 / _882;
        float _2928 = _2917 * _932;
        float _2929 = _933 * _2917;
        float _2930 = (-0.0) - _2929;
        float _2931 = _2917 * _934;
        float _2933 = (cbSceneParam._m0[77u].w * _2930) / _2916;
        float _2934 = _2933 + cbSceneParam._m0[79u].w;
        float _2935 = cbSceneParam._m0[79u].w - _2929;
        float _2941 = sqrt(((_2928 * _2928) + (_2929 * _2929)) + (_2931 * _2931));
        float _2944 = (1.0 - (cbSceneParam._m0[77u].w / _2916)) * _2941;
        float _2949 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2951 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2930 - _2933) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2934 > 0.0) ? exp2(_2949 * _2934) : (2.0 - exp2(_2951 * _2934))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2944;
        }
        else
        {
            float _3072 = 1.0 / cbSceneParam._m0[80u].x;
            float _3073 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : max(_2934, _2935));
            float _3074 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : min(_2934, _2935));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            _3128 = ((abs(_2941 / _2930) * cbSceneParam._m0[80u].y) * ((((_3083 - _3084) * 2.0) - ((exp2(_2949 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)))) - exp2(_2949 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))))) * _3072)) - ((exp2(_2951 * _3083) - exp2(_2951 * _3084)) * _3072))) + (_2944 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2861);
        _2953 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2858;
        _2955 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2859;
        _2957 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2860;
        _2959 = _3139 * _2861;
    }
    else
    {
        _2953 = _2858;
        _2955 = _2859;
        _2957 = _2860;
        _2959 = _2861;
    }
    bool _3166;
    vec4 _2969;
    vec4 _2991;
    float _2993;
    float _2997;
    float _2998;
    float _2999;
    float _3000;
    bool _3010;
    for (;;)
    {
        _2969 = cbMatDynParam._m0[0u];
        float _2971 = roundEven(_2969.y);
        bool _2972 = _2971 == 3.0;
        float _2973 = log2(_2959);
        float _2980 = exp2(_2973 * cbSceneParam._m0[78u].x) * _2830;
        float _2981 = exp2(_2973 * cbSceneParam._m0[78u].y) * _2831;
        float _2982 = exp2(_2973 * cbSceneParam._m0[78u].z) * _2832;
        float _2989 = _948 + (-0.5);
        _2991 = cbMtdParam._m0[1u];
        _2993 = _2991.y * _2989;
        float _2996 = (_2971 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2997 = _2996 * (_2972 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2953)));
        _2998 = _2996 * (_2972 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2955)));
        _2999 = _2996 * (_2972 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2957)));
        _3000 = _2989 * 0.999000012874603271484375;
        _3010 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3010)
        {
            if ((cbInstanceData._m0[_997 + 7u].x + _3000) < 0.5)
            {
                _3166 = true;
                break;
            }
        }
        uint _3107 = _998 + uint(_2969.w);
        if ((cbInstanceData._m0[_3107].w < 1.0) && ((cbInstanceData._m0[_3107].w + _3000) < 0.5))
        {
            _3166 = true;
            break;
        }
        if ((_2993 + 1.0) < _2991.x)
        {
            _3166 = true;
            break;
        }
        _3166 = false;
        break;
    }
    float _3371;
    if (_3166)
    {
        discard_state = true;
        _3371 = 0.0;
    }
    else
    {
        _3371 = cbInstanceData._m0[_2833].w;
    }
    SV_Target.x = _2997;
    SV_Target.y = _2998;
    SV_Target.z = _2999;
    SV_Target.w = _3371;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2833].w;
    discard_exit();
}


