#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1396;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _274 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _314 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _274.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _3724 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _315 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _345 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _349 = _345.z;
    float _356 = ((_328.x - _347) * _315) + _347;
    float _357 = ((_328.y - _348) * _315) + _348;
    float _358 = ((_328.z - _349) * _315) + _349;
    float _380 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _274.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _3735 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _393 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _404 = ((_393.x - _356) * _381) + _356;
    float _405 = ((_393.y - _357) * _381) + _357;
    float _406 = ((_393.z - _358) * _381) + _358;
    float _429 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _274.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _3746 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _443 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _459 = ((((_443.x - _404) * _430) + _404) * 2.0) + (-1.0);
    float _461 = ((((_443.y - _405) * _430) + _405) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3757 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))));
    float _468 = fma(_467, _250, 0.0);
    float _469 = fma(_467, _251, 0.0);
    float _470 = fma(_467, _252, 0.0);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _500 = (cbMtdParam._m0[14u].y + dot(vec4(_474 * _468, _474 * _469, _474 * _470, 0.0), vec4(cbMtdParam._m0[16u].w, cbMtdParam._m0[17u].xy, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x * cbMtdParam._m0[14u].x);
    float _3768 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _520 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _525 = _520.x * cbMtdParam._m0[10u].x;
    float _526 = _520.y * cbMtdParam._m0[10u].y;
    float _527 = _520.z * cbMtdParam._m0[10u].z;
    vec4 _545 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _559 = (((_545.x * cbMtdParam._m0[11u].x) - _525) * _315) + _525;
    float _560 = (((_545.y * cbMtdParam._m0[11u].y) - _526) * _315) + _526;
    float _561 = (((_545.z * cbMtdParam._m0[11u].z) - _527) * _315) + _527;
    vec4 _579 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _593 = (((_579.x * cbMtdParam._m0[12u].x) - _559) * _381) + _559;
    float _594 = (((_579.y * cbMtdParam._m0[12u].y) - _560) * _381) + _560;
    float _595 = (((_579.z * cbMtdParam._m0[12u].z) - _561) * _381) + _561;
    vec4 _613 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _647 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _655 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_613.x * cbMtdParam._m0[13u].x) - _593) * _430) + _593)) * _647.x;
    float _658 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_613.y * cbMtdParam._m0[13u].y) - _594) * _430) + _594)) * _647.y;
    float _661 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_613.z * cbMtdParam._m0[13u].z) - _595) * _430) + _595)) * _647.z;
    vec4 _673 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _684 = ((_673.x - _655) * _501) + _655;
    float _685 = ((_673.y - _658) * _501) + _658;
    float _686 = ((_673.z - _661) * _501) + _661;
    vec4 _698 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _700 = _698.x;
    vec4 _740 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _742 = _740.x;
    float _759 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _742) * _315) + _742;
    float _762 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _759) * _381) + _759;
    float _769 = (((_762 - _700) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _762) * _430)) * cbMtdParam._m0[14u].w) + _700;
    float _771 = _769 - (_769 * _501);
    vec4 _785 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _789 = _785.z;
    float _796 = (((((_443.z - _406) * _430) + _406) - _789) * cbMtdParam._m0[15u].x) + _789;
    vec4 _808 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _815 = (_808.x * 2.0) + (-1.0);
    float _816 = (_808.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3779 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _825 = ((_808.z - _796) * _501) + _796;
    float _834 = ((sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _467) * _501) + _467;
    float _840 = (((_815 - _459) * _501) + _459) + (cbMtdParam._m0[16u].z * ((_785.x * 2.0) + (-1.0)));
    float _841 = (((_816 - _461) * _501) + _461) + (cbMtdParam._m0[16u].z * ((_785.y * 2.0) + (-1.0)));
    float _844 = fma(_834, _250, fma(_841, _242 * TANGENT.x, (_228 * _220) * _840));
    float _847 = fma(_834, _251, fma(_841, _242 * TANGENT.y, (_228 * _221) * _840));
    float _850 = fma(_834, _252, fma(_841, _242 * TANGENT.z, (_228 * _222) * _840));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3790 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _858 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3812 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3823 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3834 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _862 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _928 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _918);
    float _929 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _918);
    float _930 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _918);
    float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
    float _935 = _928 * _934;
    float _936 = _929 * _934;
    float _937 = _930 * _934;
    float _943 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _944 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _962 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _965 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _968 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _981 = uint(roundEven(NORMAL.w)) * 13u;
    uint _983 = (_981 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_983].z;
    float _3845 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _995 = 1.0 - _862;
    float _996 = _992 * _995;
    float _997 = _993 * _995;
    float _998 = _994 * _995;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _862;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _862;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _862;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _943, cbSceneParam._m0[86u].y * _944));
    float _1021 = _1018.x * TEXCOORD_4;
    float _1022 = dot(vec3(_855, _856, _857), vec3(_935, _936, _937));
    float _1025 = _1022 * 2.0;
    float _1029 = (_1025 * _855) - _935;
    float _1030 = (_1025 * _856) - _936;
    float _1031 = (_1025 * _857) - _937;
    float _1035 = abs(dot(vec3(_935, _936, _937), vec3(_855, _856, _857)));
    float _3878 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1037 = sqrt(_858);
    float _1050 = exp2((_1037 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1037 * 3.0));
    float _1056 = (1.0 - _1050) * ((_1037 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1057 = _1050 * _1037;
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1124 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1128 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1153 = _1085 + _855;
        float _1154 = _1089 + _856;
        float _1155 = _1093 + _857;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1120;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1124;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1128;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_855, _856, _857), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3926 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_855, _856, _857), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3959 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_855, _856, _857), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3992 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1440 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1444 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1467 = _1085 + _855;
        float _1468 = _1089 + _856;
        float _1469 = _1093 + _857;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_855, _856, _857), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4055 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_855, _856, _857), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4088 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_855, _856, _857), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4121 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1396;
        _1706 = _1396;
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = _1396;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1409)) + _1409;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1410)) + _1410;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _1029 * 0.5;
    float _1774 = _1030 * 0.5;
    float _1775 = _1031 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1031, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029));
        float _1903 = fma(_1031, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029));
        float _1906 = fma(_1031, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1934 = frontier_phi_16_14_ladder;
        }
        float _2137;
        if (_1903 > 0.0)
        {
            _2137 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2137 = frontier_phi_25_21_ladder;
        }
        float _2391;
        if (_1906 > 0.0)
        {
            _2391 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2391 = frontier_phi_37_32_ladder;
        }
        float _2393 = isnan(_2137) ? _1934 : (isnan(_1934) ? _2137 : min(_1934, _2137));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1900) + _1889;
        float _2399 = (_2394 * _1903) + _1893;
        float _2400 = (_2394 * _1906) + _1897;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_15_37_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_15_37_ladder_2;
        _1924 = frontier_phi_15_37_ladder_1;
        _1926 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1029, _1030, _1031), _1842);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1031, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029));
        float _1999 = fma(_1031, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029));
        float _2002 = fma(_1031, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029));
        float _2142;
        if (_1996 > 0.0)
        {
            _2142 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2142 = frontier_phi_27_23_ladder;
        }
        float _2418;
        if (_1999 > 0.0)
        {
            _2418 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2418 = frontier_phi_39_34_ladder;
        }
        float _2631;
        if (_2002 > 0.0)
        {
            _2631 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2631 = frontier_phi_48_45_ladder;
        }
        float _2633 = isnan(_2418) ? _2142 : (isnan(_2142) ? _2418 : min(_2142, _2418));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1996) + _1985;
        float _2639 = (_2634 * _1999) + _1989;
        float _2640 = (_2634 * _2002) + _1993;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_24_48_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_24_48_ladder_2;
        _2023 = frontier_phi_24_48_ladder_1;
        _2025 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1029, _1030, _1031), _1931);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1056 * _1006) + _1057) * _1021) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2040 = (((_1056 * _1008) + _1057) * _1021) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2042 = (((_1056 * _1009) + _1057) * _1021) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_981 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _1021 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2096 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2100 = _2063 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_855, _856, _857));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_855, _856, _857));
    float _4257 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4268 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2080].x * _2086) * _2121) + ((cbLight._m0[_2090].x * _2096) * _2119);
    float _2129 = ((_2086 * cbLight._m0[_2080].y) * _2121) + ((_2096 * cbLight._m0[_2090].y) * _2119);
    float _2130 = ((_2086 * cbLight._m0[_2080].z) * _2121) + ((_2096 * cbLight._m0[_2090].z) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2136)
    {
        _2147 = _2128;
        _2149 = _2129;
        _2151 = _2130;
    }
    else
    {
        uint _2155 = _2063 + 6u;
        float _2171 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4279 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2174 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2147 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _2128;
        _2149 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _2129;
        _2151 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _2130;
    }
    bool _2154 = _2134.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2154)
    {
        _2192 = _2147;
        _2194 = _2149;
        _2196 = _2151;
    }
    else
    {
        uint _2362 = _2063 + 7u;
        float _2378 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4295 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2381 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2192 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2147;
        _2194 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2149;
        _2196 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2151;
    }
    uint _2199 = _2063 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _858) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2063].x + _935;
    float _2215 = cbLight._m0[_2063].y + _936;
    float _2216 = cbLight._m0[_2063].z + _937;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2063].xyz));
    float _4311 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2228 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2229 = dot(vec3(_855, _856, _857), vec3(_2221, _2222, _2223));
    float _4333 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2221, _2222, _2223));
    float _4344 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2250 = 0.959999978542327880859375 - _1003;
    float _2252 = 0.959999978542327880859375 - _1004;
    float _2253 = 0.959999978542327880859375 - _1005;
    float _2260 = 1.0 - _2213;
    float _2271 = (0.5 / (((_2228 * ((_2227 * _2260) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2260) + _2213) * _2227))) * _2227;
    float _4355 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2284 = _2063 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _858) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2100].x + _935;
    float _2298 = cbLight._m0[_2100].y + _936;
    float _2299 = cbLight._m0[_2100].z + _937;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2100].xyz));
    float _4366 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2311 = dot(vec3(_855, _856, _857), vec3(_2304, _2305, _2306));
    float _4377 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2304, _2305, _2306));
    float _4388 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2337 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2228 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2337) + _2296) * _2310))) * _2310;
    float _4399 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2359 = (((((_2330 * _2250) + _1006) * cbLight._m0[_2284].x) * _2349) * _2086) + (((((_2249 * _2250) + _1006) * cbLight._m0[_2199].x) * _2273) * _2096);
    float _2360 = (((((_2330 * _2252) + _1008) * cbLight._m0[_2284].y) * _2349) * _2086) + (((((_2249 * _2252) + _1008) * cbLight._m0[_2199].y) * _2273) * _2096);
    float _2361 = (((((_2330 * _2253) + _1009) * cbLight._m0[_2284].z) * _2349) * _2086) + (((((_2249 * _2253) + _1009) * cbLight._m0[_2199].z) * _2273) * _2096);
    float _2423;
    float _2425;
    float _2427;
    if (_2136)
    {
        _2423 = _2359;
        _2425 = _2360;
        _2427 = _2361;
    }
    else
    {
        uint _2429 = _2063 + 2u;
        uint _2433 = _2063 + 10u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _858) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _935;
        float _2450 = cbLight._m0[_2429].y + _936;
        float _2451 = cbLight._m0[_2429].z + _937;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2429].xyz));
        float _4410 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2463 = dot(vec3(_855, _856, _857), vec3(_2456, _2457, _2458));
        float _4421 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4432 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2228 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2489) + _2448) * _2462))) * _2462;
        float _4443 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2423 = (((((_2482 * _2250) + _1006) * cbLight._m0[_2433].x) * _2501) * _2502) + _2359;
        _2425 = (((((_2482 * _2252) + _1008) * cbLight._m0[_2433].y) * _2501) * _2502) + _2360;
        _2427 = (((((_2482 * _2253) + _1009) * cbLight._m0[_2433].z) * _2501) * _2502) + _2361;
    }
    float _2537;
    float _2539;
    float _2541;
    if (_2154)
    {
        _2537 = _2423;
        _2539 = _2425;
        _2541 = _2427;
    }
    else
    {
        uint _2548 = _2063 + 3u;
        uint _2552 = _2063 + 11u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _858) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _935;
        float _2569 = cbLight._m0[_2548].y + _936;
        float _2570 = cbLight._m0[_2548].z + _937;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2548].xyz));
        float _4459 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2582 = dot(vec3(_855, _856, _857), vec3(_2575, _2576, _2577));
        float _4470 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4481 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2228 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2608) + _2567) * _2581))) * _2581;
        float _4492 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2537 = (((((_2601 * _2250) + _1006) * cbLight._m0[_2552].x) * _2620) * _2621) + _2423;
        _2539 = (((((_2601 * _2252) + _1008) * cbLight._m0[_2552].y) * _2620) * _2621) + _2425;
        _2541 = (((((_2601 * _2253) + _1009) * cbLight._m0[_2552].z) * _2620) * _2621) + _2427;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2061.y == 0u)
    {
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2696;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2696;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2696;
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _944) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _943) / _2712)));
        float _2733 = (log2(_2699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
        }
        else
        {
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3003)
                {
                    frontier_phi_63_pred = _2992;
                    frontier_phi_63_pred_1 = _2991;
                    frontier_phi_63_pred_2 = _2990;
                    frontier_phi_63_pred_3 = _2989;
                    frontier_phi_63_pred_4 = _2988;
                    frontier_phi_63_pred_5 = _2987;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2697;
                        float _3178 = _3137.y - _2698;
                        float _3179 = _3137.z - _2699;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_962, _965, _968), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4518 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2697;
                        float _3213 = (-0.0) - _2698;
                        float _3214 = (-0.0) - _2699;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3229 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _1037;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_962, _965, _968), vec3(_3219, _3220, _3221));
                        float _4534 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3254 = dot(vec3(_962, _965, _968), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4545 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3197 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3187) + _3263;
                        float _4556 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4567 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3261 * _3261) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3289 * _3173.x) + _3111;
                        _3044 = (_3289 * _3173.y) + _3112;
                        _3045 = (_3289 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_63_pred = _3048;
                    frontier_phi_63_pred_1 = _3047;
                    frontier_phi_63_pred_2 = _3046;
                    frontier_phi_63_pred_3 = _3045;
                    frontier_phi_63_pred_4 = _3044;
                    frontier_phi_63_pred_5 = _3043;
                }
                _2854 = frontier_phi_63_pred;
                _2852 = frontier_phi_63_pred_1;
                _2850 = frontier_phi_63_pred_2;
                _2848 = frontier_phi_63_pred_3;
                _2846 = frontier_phi_63_pred_4;
                _2844 = frontier_phi_63_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2844;
                    _2988 = _2846;
                    _2989 = _2848;
                    _2990 = _2850;
                    _2991 = _2852;
                    _2992 = _2854;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
        }
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.z;
        uint _2860 = (_2858 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2860) & _2743) == 0u)
        {
            _2955 = _2843;
            _2957 = _2845;
            _2959 = _2847;
            _2961 = _2849;
            _2963 = _2851;
            _2965 = _2853;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
            float _2981 = _2980 * _2697;
            float _2982 = _2980 * _2698;
            float _2983 = _2980 * _2699;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2860 < ((_2858 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2843;
                float _3095 = _2845;
                float _3096 = _2847;
                float _3097 = _2849;
                float _3098 = _2851;
                float _3099 = _2853;
                uint _3100 = _2860;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3110)
                    {
                        frontier_phi_69_pred = _3099;
                        frontier_phi_69_pred_1 = _3098;
                        frontier_phi_69_pred_2 = _3097;
                        frontier_phi_69_pred_3 = _3096;
                        frontier_phi_69_pred_4 = _3095;
                        frontier_phi_69_pred_5 = _3094;
                    }
                    else
                    {
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        float _3309 = _3096;
                        float _3310 = _3097;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        uint _3313 = _3109;
                        uint _3314;
                        vec4 _3339;
                        float _3340;
                        vec4 _3355;
                        vec3 _3367;
                        vec4 _3382;
                        vec4 _3397;
                        float _3444;
                        bool _3445;
                        for (;;)
                        {
                            uint _3324 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3313));
                            _3314 = (_3313 + 4294967295u) & _3313;
                            uint _3326 = _3324 * 40u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3340 = _3339.w;
                            uint _3342 = (_3324 * 40u) + 4u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3324 * 40u) + 8u;
                            _3367 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x));
                            uint _3369 = (_3324 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3324 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3400 = (_3324 * 40u) + 24u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3419 = (_3324 * 40u) + 28u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3444 = fma(_2699, _3432.z, fma(_2698, _3432.y, _3432.x * _2697)) + _3432.w;
                            _3445 = !((fma(_2699, _3413.z, fma(_2698, _3413.y, _3413.x * _2697)) + _3413.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3445)
                            {
                                float _3472 = _3339.x - _2697;
                                float _3473 = _3339.y - _2698;
                                float _3474 = _3339.z - _2699;
                                float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                                float _3478 = inversesqrt(_3475);
                                float _3479 = _3478 * _3472;
                                float _3480 = _3478 * _3473;
                                float _3481 = _3478 * _3474;
                                float _3485 = 1.0 - (_3475 / (_3340 * _3340));
                                float _4578 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3490 = sqrt(_3475) * _3355.w;
                                float _3492 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                                float _3493 = _3492 * _3492;
                                float _3496 = ((1.0 - _3493) * dot(vec3(_3479, _3480, _3481), vec3(_962, _965, _968))) + _3493;
                                float _3499 = _3490 * _3490;
                                float _3503 = (fma(_2699, _3382.z, fma(_2698, _3382.y, _3382.x * _2697)) + _3382.w) / _3444;
                                float _3504 = (fma(_2699, _3397.z, fma(_2698, _3397.y, _3397.x * _2697)) + _3397.w) / _3444;
                                float _3508 = 1.0 - dot(vec2(_3503, _3504), vec2(_3503, _3504));
                                float _4594 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3510 = _3509 * (((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3486) / ((_3499 * 0.699999988079071044921875) + 1.0));
                                float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _1037;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3479 - _2981;
                                float _3534 = _3480 - _2982;
                                float _3535 = _3481 - _2983;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_962, _965, _968), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4605 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3547 = dot(vec3(_962, _965, _968), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4616 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3492 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_962, _965, _968), vec3(_3479, _3480, _3481))) + _3556;
                                float _4627 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4638 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3509 * _3486) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3510 * _3355.z;
                                frontier_phi_75_pred_1 = _3510 * _3355.y;
                                frontier_phi_75_pred_2 = _3510 * _3355.x;
                                frontier_phi_75_pred_3 = _3584 * _3367.z;
                                frontier_phi_75_pred_4 = _3584 * _3367.y;
                                frontier_phi_75_pred_5 = _3584 * _3367.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3593 = frontier_phi_75_pred;
                            _3592 = frontier_phi_75_pred_1;
                            _3591 = frontier_phi_75_pred_2;
                            _3590 = frontier_phi_75_pred_3;
                            _3589 = frontier_phi_75_pred_4;
                            _3588 = frontier_phi_75_pred_5;
                            _3297 = _3591 + _3310;
                            _3298 = _3592 + _3311;
                            _3299 = _3593 + _3312;
                            _3294 = _3588 + _3307;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            if (_3314 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3314;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3299;
                        frontier_phi_69_pred_1 = _3298;
                        frontier_phi_69_pred_2 = _3297;
                        frontier_phi_69_pred_3 = _3296;
                        frontier_phi_69_pred_4 = _3295;
                        frontier_phi_69_pred_5 = _3294;
                    }
                    _2966 = frontier_phi_69_pred;
                    _2964 = frontier_phi_69_pred_1;
                    _2962 = frontier_phi_69_pred_2;
                    _2960 = frontier_phi_69_pred_3;
                    _2958 = frontier_phi_69_pred_4;
                    _2956 = frontier_phi_69_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2966;
                frontier_phi_57_58_ladder_1 = _2964;
                frontier_phi_57_58_ladder_2 = _2962;
                frontier_phi_57_58_ladder_3 = _2960;
                frontier_phi_57_58_ladder_4 = _2958;
                frontier_phi_57_58_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_57_58_ladder = _2853;
                frontier_phi_57_58_ladder_1 = _2851;
                frontier_phi_57_58_ladder_2 = _2849;
                frontier_phi_57_58_ladder_3 = _2847;
                frontier_phi_57_58_ladder_4 = _2845;
                frontier_phi_57_58_ladder_5 = _2843;
            }
            _2955 = frontier_phi_57_58_ladder_5;
            _2957 = frontier_phi_57_58_ladder_4;
            _2959 = frontier_phi_57_58_ladder_3;
            _2961 = frontier_phi_57_58_ladder_2;
            _2963 = frontier_phi_57_58_ladder_1;
            _2965 = frontier_phi_57_58_ladder;
        }
        float _2970 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        _2755 = (_2970 * _2961) + _2192;
        _2757 = (_2970 * _2963) + _2194;
        _2759 = (_2970 * _2965) + _2196;
        _2761 = ((_2955 * _1006) * _2970) + _2537;
        _2763 = ((_2957 * _1008) * _2970) + _2539;
        _2765 = ((_2959 * _1009) * _2970) + _2541;
    }
    else
    {
        _2755 = _2192;
        _2757 = _2194;
        _2759 = _2196;
        _2761 = _2537;
        _2763 = _2539;
        _2765 = _2541;
    }
    float _4654 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4665 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4676 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    uint _2785 = _981 + 6u;
    float _2793 = _943 / cbSceneParam._m0[86u].x;
    float _2794 = _944 / cbSceneParam._m0[86u].y;
    vec4 _2808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2810 = _2808.x;
    float _2811 = _2808.y;
    float _2812 = _2808.z;
    float _2813 = _2808.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _2868 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _2869 = _2868 / _878;
        float _2880 = _2869 * _928;
        float _2881 = _929 * _2869;
        float _2882 = (-0.0) - _2881;
        float _2883 = _2869 * _930;
        float _2885 = (cbSceneParam._m0[77u].w * _2882) / _2868;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2881;
        float _2893 = sqrt(((_2880 * _2880) + (_2881 * _2881)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2868)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2882 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3018 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2893 / _2882) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2903 * _3027) - exp2(_2903 * _3028)) * _3016))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2813);
        _2905 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2810;
        _2907 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2811;
        _2909 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2812;
        _2911 = _3067 * _2813;
    }
    else
    {
        _2905 = _2810;
        _2907 = _2811;
        _2909 = _2812;
        _2911 = _2813;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2755 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1021))) + ((_2761 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2757 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1021))) + ((_2763 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2759 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1021))) + ((_2765 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1831)) * cbPerFrame._m0[3u].x));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2785].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2785].w;
}


