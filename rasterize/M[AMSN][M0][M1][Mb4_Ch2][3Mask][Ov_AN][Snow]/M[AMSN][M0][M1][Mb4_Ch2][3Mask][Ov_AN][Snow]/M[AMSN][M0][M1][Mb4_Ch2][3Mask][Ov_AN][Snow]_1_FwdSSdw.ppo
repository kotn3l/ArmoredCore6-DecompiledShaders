#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1287;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246;
    float _247;
    float _248;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
    }
    else
    {
        _246 = _232;
        _247 = _233;
        _248 = _234;
    }
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _302 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _262.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _3639 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    vec4 _316 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _333 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _335 = _333.x;
    float _336 = _333.y;
    float _337 = _333.z;
    float _344 = ((_316.x - _335) * _303) + _335;
    float _345 = ((_316.y - _336) * _303) + _336;
    float _346 = ((_316.z - _337) * _303) + _337;
    float _371 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _262.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _3650 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    vec4 _384 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _395 = ((_384.x - _344) * _372) + _344;
    float _396 = ((_384.y - _345) * _372) + _345;
    float _397 = ((_384.z - _346) * _372) + _346;
    float _420 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _262.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _3661 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _434 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _450 = ((((_434.x - _395) * _421) + _395) * 2.0) + (-1.0);
    float _452 = ((((_434.y - _396) * _421) + _396) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3672 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))));
    vec4 _477 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _482 = _477.x * cbMtdParam._m0[10u].x;
    float _483 = _477.y * cbMtdParam._m0[10u].y;
    float _484 = _477.z * cbMtdParam._m0[10u].z;
    vec4 _503 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _517 = (((_503.x * cbMtdParam._m0[11u].x) - _482) * _303) + _482;
    float _518 = (((_503.y * cbMtdParam._m0[11u].y) - _483) * _303) + _483;
    float _519 = (((_503.z * cbMtdParam._m0[11u].z) - _484) * _303) + _484;
    vec4 _537 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _551 = (((_537.x * cbMtdParam._m0[12u].x) - _517) * _372) + _517;
    float _552 = (((_537.y * cbMtdParam._m0[12u].y) - _518) * _372) + _518;
    float _553 = (((_537.z * cbMtdParam._m0[12u].z) - _519) * _372) + _519;
    vec4 _571 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _605 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _613 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_571.x * cbMtdParam._m0[13u].x) - _551) * _421) + _551)) * _605.x;
    float _616 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_571.y * cbMtdParam._m0[13u].y) - _552) * _421) + _552)) * _605.y;
    float _619 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_571.z * cbMtdParam._m0[13u].z) - _553) * _421) + _553)) * _605.z;
    vec4 _631 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _633 = _631.x;
    vec4 _673 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _675 = _673.x;
    float _692 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _675) * _303) + _675;
    float _695 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _692) * _372) + _692;
    float _702 = (((_695 - _633) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _695) * _421)) * cbMtdParam._m0[14u].w) + _633;
    vec4 _716 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _720 = _716.z;
    float _727 = (((((_434.z - _397) * _421) + _397) - _720) * cbMtdParam._m0[15u].x) + _720;
    float _731 = (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].z) + _450;
    float _732 = (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].z) + _452;
    float _735 = fma(_458, _246, fma(_732, _238 * TANGENT.x, (_224 * _216) * _731));
    float _738 = fma(_458, _247, fma(_732, _238 * TANGENT.y, (_224 * _217) * _731));
    float _741 = fma(_458, _248, fma(_732, _238 * TANGENT.z, (_224 * _218) * _731));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    float _746 = _745 * _735;
    float _747 = _745 * _738;
    float _748 = _745 * _741;
    float _3683 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _749 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3705 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3716 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3727 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _753 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _769 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _819 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _809);
    float _820 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _809);
    float _821 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _809);
    float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
    float _826 = _819 * _825;
    float _827 = _820 * _825;
    float _828 = _821 * _825;
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _853 = fma(_748, cbSceneParam._m0[5u].z, fma(_747, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _746));
    float _856 = fma(_748, cbSceneParam._m0[6u].z, fma(_747, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _746));
    float _859 = fma(_748, cbSceneParam._m0[7u].z, fma(_747, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _746));
    uint _872 = uint(roundEven(NORMAL.w)) * 13u;
    uint _874 = (_872 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3738 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _886 = 1.0 - _753;
    float _887 = _883 * _886;
    float _888 = _884 * _886;
    float _889 = _885 * _886;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _753;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _753;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _753;
    float _897 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _912 = _909.x * TEXCOORD_4;
    float _913 = dot(vec3(_746, _747, _748), vec3(_826, _827, _828));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _746) - _826;
    float _921 = (_916 * _747) - _827;
    float _922 = (_916 * _748) - _828;
    float _926 = abs(dot(vec3(_826, _827, _828), vec3(_746, _747, _748)));
    float _3771 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_749);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _947 = (1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _928;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1015 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1019 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1044 = _976 + _746;
        float _1045 = _980 + _747;
        float _1046 = _984 + _748;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1011;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1015;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1019;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_746, _747, _748), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3819 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_746, _747, _748), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3852 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_746, _747, _748), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3885 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1327 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1331 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1335 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1358 = _976 + _746;
        float _1359 = _980 + _747;
        float _1360 = _984 + _748;
        float _1370 = fma(_1360, cbModelParam._m0[30u].z, fma(_1359, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1358)) - _1327;
        float _1371 = fma(_1360, cbModelParam._m0[31u].z, fma(_1359, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1358)) - _1331;
        float _1372 = fma(_1360, cbModelParam._m0[32u].z, fma(_1359, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1358)) - _1335;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1327 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1331 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[35u].z) + ((((((_1335 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1426 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1393.x + (-0.5));
        float _1428 = _1426 * (_1393.y + (-0.5));
        float _1429 = _1426 * (_1393.z + (-0.5));
        float _1436 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1400.x + (-0.5));
        float _1438 = _1436 * (_1400.y + (-0.5));
        float _1439 = _1436 * (_1400.z + (-0.5));
        float _1446 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1407.x + (-0.5));
        float _1448 = _1446 * (_1407.y + (-0.5));
        float _1449 = _1446 * (_1407.z + (-0.5));
        float _1456 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1414.x + (-0.5));
        float _1458 = _1456 * (_1414.y + (-0.5));
        float _1459 = _1456 * (_1414.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_746, _747, _748), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _3948 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1490 + 1.0))) + _1495) * _1460;
        float _1505 = _1428 * 0.5;
        float _1506 = _1438 * 0.5;
        float _1507 = _1448 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_746, _747, _748), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _3981 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1532 + 1.0))) + _1537) * _1461;
        float _1547 = _1429 * 0.5;
        float _1548 = _1439 * 0.5;
        float _1549 = _1449 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_746, _747, _748), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4014 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1574 + 1.0))) + _1579) * _1462;
        _1596 = _1429;
        _1597 = _1428;
        _1598 = _1427;
        _1599 = _1439;
        _1600 = _1438;
        _1601 = _1437;
        _1602 = _1449;
        _1603 = _1448;
        _1604 = _1447;
        _1605 = _1462;
        _1606 = _1461;
        _1607 = _1460;
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
    }
    else
    {
        _1596 = _1287;
        _1597 = _1287;
        _1598 = _1287;
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1299)) + _1299;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1300)) + _1300;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1301)) + _1301;
    float _1643 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1620));
    float _1664 = _920 * 0.5;
    float _1665 = _921 * 0.5;
    float _1666 = _922 * 0.5;
    float _1667 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1670 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1673 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1707;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1680 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1684 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1688 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1695 = dot(vec4(cbModelParam._m0[39u]), vec4(_1664, _1665, _1666, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1718;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1709 = dot(vec4(cbModelParam._m0[40u]), vec4(_1664, _1665, _1666, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1722 = (_1718 * cbModelParam._m0[1u].x) + (_1707 * (1.0 - cbModelParam._m0[1u].x));
    float _1732 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _749);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1732 : min(cbModelParam._m0[25u].z, _1732));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1794 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1797 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1825 = frontier_phi_16_14_ladder;
        }
        float _2049;
        if (_1794 > 0.0)
        {
            _2049 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2306;
        if (_1797 > 0.0)
        {
            _2306 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2306 = frontier_phi_37_32_ladder;
        }
        float _2308 = isnan(_2049) ? _1825 : (isnan(_1825) ? _2049 : min(_1825, _2049));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1791) + _1780;
        float _2314 = (_2309 * _1794) + _1784;
        float _2315 = (_2309 * _1797) + _1788;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1733);
            frontier_phi_15_37_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_15_37_ladder_2;
        _1815 = frontier_phi_15_37_ladder_1;
        _1817 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1733);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _749);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1876 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1880 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1884 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1887 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1890 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1893 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2054;
        if (_1887 > 0.0)
        {
            _2054 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2054 = frontier_phi_27_23_ladder;
        }
        float _2333;
        if (_1890 > 0.0)
        {
            _2333 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2333 = frontier_phi_39_34_ladder;
        }
        float _2546;
        if (_1893 > 0.0)
        {
            _2546 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2546 = frontier_phi_48_45_ladder;
        }
        float _2548 = isnan(_2333) ? _2054 : (isnan(_2054) ? _2333 : min(_2054, _2333));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1887) + _1876;
        float _2554 = (_2549 * _1890) + _1880;
        float _2555 = (_2549 * _1893) + _1884;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_24_48_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1912 = frontier_phi_24_48_ladder_2;
        _1914 = frontier_phi_24_48_ladder_1;
        _1916 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1822);
        _1912 = _1896.x * cbModelParam._m0[1u].z;
        _1914 = _1896.y * cbModelParam._m0[1u].z;
        _1916 = _1896.z * cbModelParam._m0[1u].z;
    }
    float _1929 = (((_947 * _897) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_947 * _899) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1933 = (((_947 * _900) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1936 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1929 * cbSceneParam._m0[91u].x));
    vec4 _1950 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_834, _835));
    float _1952 = _1950.w;
    float _1964 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1952);
    float _1965 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1952);
    float _1966 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1952);
    uvec4 _1970 = floatBitsToUint(cbInstanceData._m0[_872 + 5u]);
    uint _1972 = _1970.x * 14u;
    uint _1973 = _1972 + 13u;
    float _1980 = _912 + (-1.0);
    float _1985 = (cbLight._m0[_1973].x * _1980) + 1.0;
    float _1986 = (cbLight._m0[_1973].y * _1980) + 1.0;
    float _1987 = (cbLight._m0[_1973].z * _1980) + 1.0;
    float _1988 = (cbLight._m0[_1973].w * _1980) + 1.0;
    uint _1989 = _1972 + 5u;
    float _1995 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _1999 = _1972 + 4u;
    float _2008 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _2012 = _1972 | 1u;
    float _2023 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_746, _747, _748));
    float _2026 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_746, _747, _748));
    float _4150 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _4161 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2031 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _2033 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _2040 = ((cbLight._m0[_1989].x * _1995) * _2033) + (((cbLight._m0[_1999].x * _1964) * _2008) * _2031);
    float _2041 = ((_1995 * cbLight._m0[_1989].y) * _2033) + (((cbLight._m0[_1999].y * _1965) * _2008) * _2031);
    float _2042 = ((_1995 * cbLight._m0[_1989].z) * _2033) + (((cbLight._m0[_1999].z * _1966) * _2008) * _2031);
    uvec4 _2046 = floatBitsToUint(cbLight._m0[_1972 + 12u]);
    bool _2048 = _2046.x == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2048)
    {
        _2059 = _2040;
        _2061 = _2041;
        _2063 = _2042;
    }
    else
    {
        uint _2067 = _1972 + 6u;
        float _2083 = (dot(vec3(cbLight._m0[_1972 + 2u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4172 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2086 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2059 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _2040;
        _2061 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _2041;
        _2063 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _2042;
    }
    bool _2066 = _2046.y == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2066)
    {
        _2104 = _2059;
        _2106 = _2061;
        _2108 = _2063;
    }
    else
    {
        uint _2277 = _1972 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1972 + 3u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4188 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2296 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2104 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2059;
        _2106 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2061;
        _2108 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2063;
    }
    uint _2111 = _1972 + 8u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _749) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1972].x + _826;
    float _2127 = cbLight._m0[_1972].y + _827;
    float _2128 = cbLight._m0[_1972].z + _828;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_1972].xyz));
    float _4204 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2140 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2141 = dot(vec3(_746, _747, _748), vec3(_2133, _2134, _2135));
    float _4226 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2133, _2134, _2135));
    float _4237 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2125 * _2125;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
    float _2162 = 0.959999978542327880859375 - _894;
    float _2164 = 0.959999978542327880859375 - _895;
    float _2165 = 0.959999978542327880859375 - _896;
    float _2172 = 1.0 - _2125;
    float _2183 = (0.5 / (((_2140 * ((_2139 * _2172) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2172) + _2125) * _2139))) * _2139;
    float _4248 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    uint _2199 = _1972 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _749) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2012].x + _826;
    float _2213 = cbLight._m0[_2012].y + _827;
    float _2214 = cbLight._m0[_2012].z + _828;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2012].xyz));
    float _4259 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2226 = dot(vec3(_746, _747, _748), vec3(_2219, _2220, _2221));
    float _4270 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2219, _2220, _2221));
    float _4281 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
    float _2252 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2140 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2252) + _2211) * _2225))) * _2225;
    float _4292 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2274 = (((((_2245 * _2162) + _897) * cbLight._m0[_2199].x) * _2264) * _1995) + ((((cbLight._m0[_2111].x * _1964) * ((_2161 * _2162) + _897)) * _2185) * _2008);
    float _2275 = (((((_2245 * _2164) + _899) * cbLight._m0[_2199].y) * _2264) * _1995) + ((((cbLight._m0[_2111].y * _1965) * ((_2161 * _2164) + _899)) * _2185) * _2008);
    float _2276 = (((((_2245 * _2165) + _900) * cbLight._m0[_2199].z) * _2264) * _1995) + ((((cbLight._m0[_2111].z * _1966) * ((_2161 * _2165) + _900)) * _2185) * _2008);
    float _2338;
    float _2340;
    float _2342;
    if (_2048)
    {
        _2338 = _2274;
        _2340 = _2275;
        _2342 = _2276;
    }
    else
    {
        uint _2344 = _1972 + 2u;
        uint _2348 = _1972 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _749) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _826;
        float _2365 = cbLight._m0[_2344].y + _827;
        float _2366 = cbLight._m0[_2344].z + _828;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2344].xyz));
        float _4303 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2378 = dot(vec3(_746, _747, _748), vec3(_2371, _2372, _2373));
        float _4314 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4325 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
        float _2404 = 1.0 - _2363;
        float _2414 = (0.5 / (((_2140 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2404) + _2363) * _2377))) * _2377;
        float _4336 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2338 = (((((_2397 * _2162) + _897) * cbLight._m0[_2348].x) * _2416) * _2417) + _2274;
        _2340 = (((((_2397 * _2164) + _899) * cbLight._m0[_2348].y) * _2416) * _2417) + _2275;
        _2342 = (((((_2397 * _2165) + _900) * cbLight._m0[_2348].z) * _2416) * _2417) + _2276;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2066)
    {
        _2452 = _2338;
        _2454 = _2340;
        _2456 = _2342;
    }
    else
    {
        uint _2463 = _1972 + 3u;
        uint _2467 = _1972 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _749) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _826;
        float _2484 = cbLight._m0[_2463].y + _827;
        float _2485 = cbLight._m0[_2463].z + _828;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2463].xyz));
        float _4352 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2497 = dot(vec3(_746, _747, _748), vec3(_2490, _2491, _2492));
        float _4363 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4374 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2140 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2523) + _2482) * _2496))) * _2496;
        float _4385 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2452 = (((((_2516 * _2162) + _897) * cbLight._m0[_2467].x) * _2535) * _2536) + _2338;
        _2454 = (((((_2516 * _2164) + _899) * cbLight._m0[_2467].y) * _2535) * _2536) + _2340;
        _2456 = (((((_2516 * _2165) + _900) * cbLight._m0[_2467].z) * _2535) * _2536) + _2342;
    }
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_1970.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
        }
        else
        {
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            uint _2908 = 0u;
            uint _2917;
            bool _2918;
            for (;;)
            {
                _2917 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                _2918 = _2917 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2918)
                {
                    frontier_phi_63_pred = _2907;
                    frontier_phi_63_pred_1 = _2906;
                    frontier_phi_63_pred_2 = _2905;
                    frontier_phi_63_pred_3 = _2904;
                    frontier_phi_63_pred_4 = _2903;
                    frontier_phi_63_pred_5 = _2902;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2917;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2908 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2612;
                        float _3093 = _3052.y - _2613;
                        float _3094 = _3052.z - _2614;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_853, _856, _859), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4411 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2612;
                        float _3128 = (-0.0) - _2613;
                        float _3129 = (-0.0) - _2614;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _928;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_853, _856, _859), vec3(_3134, _3135, _3136));
                        float _4427 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3169 = dot(vec3(_853, _856, _859), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4438 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4449 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4460 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2961 = (_3123 * _3071.x) + _3029;
                        _2962 = (_3123 * _3071.y) + _3030;
                        _2963 = (_3123 * _3071.z) + _3031;
                        _2958 = (_3204 * _3088.x) + _3026;
                        _2959 = (_3204 * _3088.y) + _3027;
                        _2960 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_63_pred = _2963;
                    frontier_phi_63_pred_1 = _2962;
                    frontier_phi_63_pred_2 = _2961;
                    frontier_phi_63_pred_3 = _2960;
                    frontier_phi_63_pred_4 = _2959;
                    frontier_phi_63_pred_5 = _2958;
                }
                _2769 = frontier_phi_63_pred;
                _2767 = frontier_phi_63_pred_1;
                _2765 = frontier_phi_63_pred_2;
                _2763 = frontier_phi_63_pred_3;
                _2761 = frontier_phi_63_pred_4;
                _2759 = frontier_phi_63_pred_5;
                uint _2909 = _2908 + 1u;
                if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2902 = _2759;
                    _2903 = _2761;
                    _2904 = _2763;
                    _2905 = _2765;
                    _2906 = _2767;
                    _2907 = _2769;
                    _2908 = _2909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
        }
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.z;
        uint _2775 = (_2773 >> 8u) & 15u;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((4294967295u << _2775) & _2658) == 0u)
        {
            _2870 = _2758;
            _2872 = _2760;
            _2874 = _2762;
            _2876 = _2764;
            _2878 = _2766;
            _2880 = _2768;
        }
        else
        {
            float _2895 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2896 = _2895 * _2612;
            float _2897 = _2895 * _2613;
            float _2898 = _2895 * _2614;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2775 < ((_2773 >> 12u) & 15u))
            {
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _3009 = _2758;
                float _3010 = _2760;
                float _3011 = _2762;
                float _3012 = _2764;
                float _3013 = _2766;
                float _3014 = _2768;
                uint _3015 = _2775;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3025)
                    {
                        frontier_phi_69_pred = _3014;
                        frontier_phi_69_pred_1 = _3013;
                        frontier_phi_69_pred_2 = _3012;
                        frontier_phi_69_pred_3 = _3011;
                        frontier_phi_69_pred_4 = _3010;
                        frontier_phi_69_pred_5 = _3009;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        uint _3228 = _3024;
                        uint _3229;
                        vec4 _3254;
                        float _3255;
                        vec4 _3270;
                        vec3 _3282;
                        vec4 _3297;
                        vec4 _3312;
                        float _3359;
                        bool _3360;
                        for (;;)
                        {
                            uint _3239 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3228));
                            _3229 = (_3228 + 4294967295u) & _3228;
                            uint _3241 = _3239 * 40u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            _3255 = _3254.w;
                            uint _3257 = (_3239 * 40u) + 4u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3239 * 40u) + 8u;
                            _3282 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x));
                            uint _3284 = (_3239 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3239 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3315 = (_3239 * 40u) + 24u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3334 = (_3239 * 40u) + 28u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3359 = fma(_2614, _3347.z, fma(_2613, _3347.y, _3347.x * _2612)) + _3347.w;
                            _3360 = !((fma(_2614, _3328.z, fma(_2613, _3328.y, _3328.x * _2612)) + _3328.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3360)
                            {
                                float _3387 = _3254.x - _2612;
                                float _3388 = _3254.y - _2613;
                                float _3389 = _3254.z - _2614;
                                float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                                float _3393 = inversesqrt(_3390);
                                float _3394 = _3393 * _3387;
                                float _3395 = _3393 * _3388;
                                float _3396 = _3393 * _3389;
                                float _3400 = 1.0 - (_3390 / (_3255 * _3255));
                                float _4471 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3405 = sqrt(_3390) * _3270.w;
                                float _3407 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                                float _3408 = _3407 * _3407;
                                float _3411 = ((1.0 - _3408) * dot(vec3(_3394, _3395, _3396), vec3(_853, _856, _859))) + _3408;
                                float _3414 = _3405 * _3405;
                                float _3418 = (fma(_2614, _3297.z, fma(_2613, _3297.y, _3297.x * _2612)) + _3297.w) / _3359;
                                float _3419 = (fma(_2614, _3312.z, fma(_2613, _3312.y, _3312.x * _2612)) + _3312.w) / _3359;
                                float _3423 = 1.0 - dot(vec2(_3418, _3419), vec2(_3418, _3419));
                                float _4487 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3425 = _3424 * (((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3401) / ((_3414 * 0.699999988079071044921875) + 1.0));
                                float _3437 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                                float _3438 = 1.0 - _928;
                                float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                                float _3446 = _3445 * _3445;
                                float _3447 = _3446 * _3446;
                                float _3448 = _3394 - _2896;
                                float _3449 = _3395 - _2897;
                                float _3450 = _3396 - _2898;
                                float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                                float _3458 = dot(vec3(_853, _856, _859), vec3((-0.0) - _2896, (-0.0) - _2897, (-0.0) - _2898));
                                float _4498 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3462 = dot(vec3(_853, _856, _859), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                                float _4509 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                                float _3470 = _3407 * _3446;
                                float _3471 = _3470 * _3470;
                                float _3477 = ((1.0 - _3471) * dot(vec3(_853, _856, _859), vec3(_3394, _3395, _3396))) + _3471;
                                float _4520 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3479 = 1.0 - _3446;
                                float _3489 = (0.5 / (((_3478 * ((_3461 * _3479) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3446) * _3461))) * _3478;
                                float _4531 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3499 = (_3424 * _3401) * (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3469 * _3469) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3425 * _3270.z;
                                frontier_phi_75_pred_1 = _3425 * _3270.y;
                                frontier_phi_75_pred_2 = _3425 * _3270.x;
                                frontier_phi_75_pred_3 = _3499 * _3282.z;
                                frontier_phi_75_pred_4 = _3499 * _3282.y;
                                frontier_phi_75_pred_5 = _3499 * _3282.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3508 = frontier_phi_75_pred;
                            _3507 = frontier_phi_75_pred_1;
                            _3506 = frontier_phi_75_pred_2;
                            _3505 = frontier_phi_75_pred_3;
                            _3504 = frontier_phi_75_pred_4;
                            _3503 = frontier_phi_75_pred_5;
                            _3212 = _3506 + _3225;
                            _3213 = _3507 + _3226;
                            _3214 = _3508 + _3227;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            _3211 = _3505 + _3224;
                            if (_3229 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3229;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3214;
                        frontier_phi_69_pred_1 = _3213;
                        frontier_phi_69_pred_2 = _3212;
                        frontier_phi_69_pred_3 = _3211;
                        frontier_phi_69_pred_4 = _3210;
                        frontier_phi_69_pred_5 = _3209;
                    }
                    _2881 = frontier_phi_69_pred;
                    _2879 = frontier_phi_69_pred_1;
                    _2877 = frontier_phi_69_pred_2;
                    _2875 = frontier_phi_69_pred_3;
                    _2873 = frontier_phi_69_pred_4;
                    _2871 = frontier_phi_69_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2871;
                        _3010 = _2873;
                        _3011 = _2875;
                        _3012 = _2877;
                        _3013 = _2879;
                        _3014 = _2881;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2881;
                frontier_phi_57_58_ladder_1 = _2879;
                frontier_phi_57_58_ladder_2 = _2877;
                frontier_phi_57_58_ladder_3 = _2875;
                frontier_phi_57_58_ladder_4 = _2873;
                frontier_phi_57_58_ladder_5 = _2871;
            }
            else
            {
                frontier_phi_57_58_ladder = _2768;
                frontier_phi_57_58_ladder_1 = _2766;
                frontier_phi_57_58_ladder_2 = _2764;
                frontier_phi_57_58_ladder_3 = _2762;
                frontier_phi_57_58_ladder_4 = _2760;
                frontier_phi_57_58_ladder_5 = _2758;
            }
            _2870 = frontier_phi_57_58_ladder_5;
            _2872 = frontier_phi_57_58_ladder_4;
            _2874 = frontier_phi_57_58_ladder_3;
            _2876 = frontier_phi_57_58_ladder_2;
            _2878 = frontier_phi_57_58_ladder_1;
            _2880 = frontier_phi_57_58_ladder;
        }
        float _2885 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2670 = (_2885 * _2876) + _2104;
        _2672 = (_2885 * _2878) + _2106;
        _2674 = (_2885 * _2880) + _2108;
        _2676 = ((_2870 * _897) * _2885) + _2452;
        _2678 = ((_2872 * _899) * _2885) + _2454;
        _2680 = ((_2874 * _900) * _2885) + _2456;
    }
    else
    {
        _2670 = _2104;
        _2672 = _2106;
        _2674 = _2108;
        _2676 = _2452;
        _2678 = _2454;
        _2680 = _2456;
    }
    float _4547 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4558 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4569 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    uint _2700 = _872 + 6u;
    float _2708 = _834 / cbSceneParam._m0[86u].x;
    float _2709 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2723 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, (log2((isnan(cbSceneParam._m0[77u].w) ? _769 : (isnan(_769) ? cbSceneParam._m0[77u].w : min(_769, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2725 = _2723.x;
    float _2726 = _2723.y;
    float _2727 = _2723.z;
    float _2728 = _2723.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_769 > cbSceneParam._m0[78u].w)
    {
        float _2783 = isnan(_769) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _769 : min(cbSceneParam._m0[80u].w, _769));
        float _2784 = _2783 / _769;
        float _2795 = _2784 * _819;
        float _2796 = _820 * _2784;
        float _2797 = (-0.0) - _2796;
        float _2798 = _2784 * _821;
        float _2800 = (cbSceneParam._m0[77u].w * _2797) / _2783;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2796;
        float _2808 = sqrt(((_2795 * _2795) + (_2796 * _2796)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2783)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2797 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2931 = 1.0 / cbSceneParam._m0[80u].x;
            float _2932 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2933 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            _2971 = ((abs(_2808 / _2797) * cbSceneParam._m0[80u].y) * ((((_2942 - _2943) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))))) * _2931)) - ((exp2(_2818 * _2942) - exp2(_2818 * _2943)) * _2931))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2728);
        _2820 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2725;
        _2822 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2726;
        _2824 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2727;
        _2826 = _2982 * _2728;
    }
    else
    {
        _2820 = _2725;
        _2822 = _2726;
        _2824 = _2727;
        _2826 = _2728;
    }
    float _2838 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2839 = _2838 == 3.0;
    float _2840 = log2(_2826);
    float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2670 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _912))) + ((_2676 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2672 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _912))) + ((_2678 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2674 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _912))) + ((_2680 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1722)) * cbPerFrame._m0[3u].x));
    float _2858 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2858 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.y = _2858 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
    SV_Target.z = _2858 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
    SV_Target.w = cbInstanceData._m0[_2700].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2700].w;
}


