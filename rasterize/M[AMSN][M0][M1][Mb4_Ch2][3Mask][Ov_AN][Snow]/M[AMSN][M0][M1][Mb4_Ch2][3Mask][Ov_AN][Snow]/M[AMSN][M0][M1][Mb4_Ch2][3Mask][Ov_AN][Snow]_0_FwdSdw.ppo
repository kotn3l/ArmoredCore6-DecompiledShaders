#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1400;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _278 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _318 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _278.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _4011 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _349 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _351 = _349.x;
    float _352 = _349.y;
    float _353 = _349.z;
    float _360 = ((_332.x - _351) * _319) + _351;
    float _361 = ((_332.y - _352) * _319) + _352;
    float _362 = ((_332.z - _353) * _319) + _353;
    float _384 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _278.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _4022 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    vec4 _397 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _408 = ((_397.x - _360) * _385) + _360;
    float _409 = ((_397.y - _361) * _385) + _361;
    float _410 = ((_397.z - _362) * _385) + _362;
    float _433 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _278.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _4033 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    vec4 _447 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _463 = ((((_447.x - _408) * _434) + _408) * 2.0) + (-1.0);
    float _465 = ((((_447.y - _409) * _434) + _409) * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _4044 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))));
    float _472 = fma(_471, _254, 0.0);
    float _473 = fma(_471, _255, 0.0);
    float _474 = fma(_471, _256, 0.0);
    float _478 = inversesqrt(dot(vec3(_472, _473, _474), vec3(_472, _473, _474)));
    float _504 = (cbMtdParam._m0[14u].y + dot(vec4(_478 * _472, _478 * _473, _478 * _474, 0.0), vec4(cbMtdParam._m0[16u].w, cbMtdParam._m0[17u].xy, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x * cbMtdParam._m0[14u].x);
    float _4055 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    vec4 _524 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _529 = _524.x * cbMtdParam._m0[10u].x;
    float _530 = _524.y * cbMtdParam._m0[10u].y;
    float _531 = _524.z * cbMtdParam._m0[10u].z;
    vec4 _549 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _563 = (((_549.x * cbMtdParam._m0[11u].x) - _529) * _319) + _529;
    float _564 = (((_549.y * cbMtdParam._m0[11u].y) - _530) * _319) + _530;
    float _565 = (((_549.z * cbMtdParam._m0[11u].z) - _531) * _319) + _531;
    vec4 _583 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _597 = (((_583.x * cbMtdParam._m0[12u].x) - _563) * _385) + _563;
    float _598 = (((_583.y * cbMtdParam._m0[12u].y) - _564) * _385) + _564;
    float _599 = (((_583.z * cbMtdParam._m0[12u].z) - _565) * _385) + _565;
    vec4 _617 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _651 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _659 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_617.x * cbMtdParam._m0[13u].x) - _597) * _434) + _597)) * _651.x;
    float _662 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_617.y * cbMtdParam._m0[13u].y) - _598) * _434) + _598)) * _651.y;
    float _665 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_617.z * cbMtdParam._m0[13u].z) - _599) * _434) + _599)) * _651.z;
    vec4 _677 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _688 = ((_677.x - _659) * _505) + _659;
    float _689 = ((_677.y - _662) * _505) + _662;
    float _690 = ((_677.z - _665) * _505) + _665;
    vec4 _702 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _704 = _702.x;
    vec4 _744 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _746 = _744.x;
    float _763 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _746) * _319) + _746;
    float _766 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _763) * _385) + _763;
    float _773 = (((_766 - _704) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _766) * _434)) * cbMtdParam._m0[14u].w) + _704;
    float _775 = _773 - (_773 * _505);
    vec4 _789 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _793 = _789.z;
    float _800 = (((((_447.z - _410) * _434) + _410) - _793) * cbMtdParam._m0[15u].x) + _793;
    vec4 _812 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _819 = (_812.x * 2.0) + (-1.0);
    float _820 = (_812.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4066 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _829 = ((_812.z - _800) * _505) + _800;
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) - _471) * _505) + _471;
    float _844 = (((_819 - _463) * _505) + _463) + (cbMtdParam._m0[16u].z * ((_789.x * 2.0) + (-1.0)));
    float _845 = (((_820 - _465) * _505) + _465) + (cbMtdParam._m0[16u].z * ((_789.y * 2.0) + (-1.0)));
    float _848 = fma(_838, _254, fma(_845, _246 * TANGENT.x, (_232 * _224) * _844));
    float _851 = fma(_838, _255, fma(_845, _246 * TANGENT.y, (_232 * _225) * _844));
    float _854 = fma(_838, _256, fma(_845, _246 * TANGENT.z, (_232 * _226) * _844));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _4077 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _862 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4099 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4110 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4121 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _866 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _966 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _969 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _972 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _985 = uint(roundEven(NORMAL.w)) * 13u;
    uint _987 = (_985 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _993 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_987].x;
    float _994 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_987].y;
    float _995 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_987].z;
    float _4132 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _999 = 1.0 - _866;
    float _1000 = _996 * _999;
    float _1001 = _997 * _999;
    float _1002 = _998 * _999;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _866;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _866;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _866;
    float _1010 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    vec4 _1022 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1025 = _1022.x * TEXCOORD_4;
    float _1026 = dot(vec3(_859, _860, _861), vec3(_939, _940, _941));
    float _1029 = _1026 * 2.0;
    float _1033 = (_1029 * _859) - _939;
    float _1034 = (_1029 * _860) - _940;
    float _1035 = (_1029 * _861) - _941;
    float _1039 = abs(dot(vec3(_939, _940, _941), vec3(_859, _860, _861)));
    float _4165 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1041 = sqrt(_862);
    float _1054 = exp2((_1041 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1041 * 3.0));
    float _1060 = (1.0 - _1054) * ((_1041 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1061 = _1054 * _1041;
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1128 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1132 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1157 = _1089 + _859;
        float _1158 = _1093 + _860;
        float _1159 = _1097 + _861;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1124;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1128;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1132;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_859, _860, _861), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4213 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_859, _860, _861), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4246 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_859, _860, _861), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4279 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1444 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1448 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1471 = _1089 + _859;
        float _1472 = _1093 + _860;
        float _1473 = _1097 + _861;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_859, _860, _861), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4342 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_859, _860, _861), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4375 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_859, _860, _861), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4408 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1400;
        _1710 = _1400;
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1412)) + _1412;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1413)) + _1413;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1033 * 0.5;
    float _1778 = _1034 * 0.5;
    float _1779 = _1035 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1035, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033));
        float _1907 = fma(_1035, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033));
        float _1910 = fma(_1035, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1938 = frontier_phi_16_14_ladder;
        }
        float _2110;
        if (_1907 > 0.0)
        {
            _2110 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2110 = frontier_phi_25_21_ladder;
        }
        float _2405;
        if (_1910 > 0.0)
        {
            _2405 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2405 = frontier_phi_37_32_ladder;
        }
        float _2407 = isnan(_2110) ? _1938 : (isnan(_1938) ? _2110 : min(_1938, _2110));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1904) + _1893;
        float _2413 = (_2408 * _1907) + _1897;
        float _2414 = (_2408 * _1910) + _1901;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2415;
        float _2419 = _2415 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 > _2419) || ((_2413 < _2417) || ((_2412 < _2417) || (_2412 > _2419))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_15_37_ladder = _2559.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2559.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2559.z * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_15_37_ladder_1;
        _1928 = frontier_phi_15_37_ladder;
        _1930 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1033, _1034, _1035), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1035, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033));
        float _2003 = fma(_1035, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033));
        float _2006 = fma(_1035, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033));
        float _2115;
        if (_2000 > 0.0)
        {
            _2115 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2115 = frontier_phi_27_23_ladder;
        }
        float _2432;
        if (_2003 > 0.0)
        {
            _2432 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2432 = frontier_phi_39_34_ladder;
        }
        float _2770;
        if (_2006 > 0.0)
        {
            _2770 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2770 = frontier_phi_49_46_ladder;
        }
        float _2772 = isnan(_2432) ? _2115 : (isnan(_2115) ? _2432 : min(_2115, _2432));
        float _2773 = isnan(_2770) ? _2772 : (isnan(_2772) ? _2770 : min(_2772, _2770));
        float _2777 = (_2773 * _2000) + _1989;
        float _2778 = (_2773 * _2003) + _1993;
        float _2779 = (_2773 * _2006) + _1997;
        float _2780 = _2773 * 9.9999997473787516355514526367188e-05;
        float _2781 = (-1.0) - _2780;
        float _2783 = _2780 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2779 > _2783) || ((_2779 < _2781) || ((_2778 > _2783) || ((_2778 < _2781) || ((_2777 < _2781) || (_2777 > _2783))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2779, cbModelParam._m0[17u].z, fma(_2778, cbModelParam._m0[17u].y, _2777 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2779, cbModelParam._m0[18u].z, fma(_2778, cbModelParam._m0[18u].y, _2777 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2779, cbModelParam._m0[19u].z, fma(_2778, cbModelParam._m0[19u].y, _2777 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_24_49_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_24_49_ladder_2;
        _2027 = frontier_phi_24_49_ladder_1;
        _2029 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1033, _1034, _1035), _1935);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2042 = (((_1060 * _1010) + _1061) * _1025) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2044 = (((_1060 * _1012) + _1061) * _1025) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1060 * _1013) + _1061) * _1025) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2044, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2044, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2044, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2102 = _2089 / _2101;
    float _2103 = _2093 / _2101;
    float _2104 = _2097 / _2101;
    float _2251;
    float _2252;
    float _2253;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2131 = ((uint(_2104 > cbSceneParam._m0[59u].y) + uint(_2104 > cbSceneParam._m0[59u].x)) + uint(_2104 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2132 = _2131 + 43u;
        uint _2140 = _2131 + 44u;
        uint _2148 = _2131 + 45u;
        uint _2156 = _2131 + 46u;
        float _2167 = fma(_2101, cbSceneParam._m0[_2132].w, fma(_2097, cbSceneParam._m0[_2132].z, fma(_2093, cbSceneParam._m0[_2132].y, _2089 * cbSceneParam._m0[_2132].x)));
        float _2171 = fma(_2101, cbSceneParam._m0[_2140].w, fma(_2097, cbSceneParam._m0[_2140].z, fma(_2093, cbSceneParam._m0[_2140].y, _2089 * cbSceneParam._m0[_2140].x)));
        float _2179 = fma(_2101, cbSceneParam._m0[_2156].w, fma(_2097, cbSceneParam._m0[_2156].z, fma(_2093, cbSceneParam._m0[_2156].y, _2089 * cbSceneParam._m0[_2156].x)));
        float _2184 = cbSceneParam._m0[33u].z * _2179;
        float _2186 = cbSceneParam._m0[33u].w * _2179;
        float _2189 = fma(_2101, cbSceneParam._m0[_2148].w, fma(_2097, cbSceneParam._m0[_2148].z, fma(_2093, cbSceneParam._m0[_2148].y, _2089 * cbSceneParam._m0[_2148].x))) / _2179;
        float _2237 = (cbSceneParam._m0[33u].x - sqrt(((_2103 * _2103) + (_2102 * _2102)) + (_2104 * _2104))) * cbSceneParam._m0[33u].y;
        float _4534 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2244 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2167) / _2179, (_2186 + _2171) / _2179), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 + _2167) / _2179, (_2171 - _2184) / _2179), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 - _2184) / _2179, (_2171 - _2186) / _2179), _2189), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 - _2186) / _2179, (_2184 + _2171) / _2179), _2189), 0.0)).x), vec4(0.25)));
        _2251 = 1.0 - (_2244 * cbSceneParam._m0[34u].x);
        _2252 = 1.0 - (_2244 * cbSceneParam._m0[34u].y);
        _2253 = 1.0 - (_2244 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2251 = 1.0;
        _2252 = 1.0;
        _2253 = 1.0;
    }
    float _2317;
    float _2319;
    float _2321;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2305 = fma(_2101, cbSceneParam._m0[63u].w, fma(_2097, cbSceneParam._m0[63u].z, fma(_2093, cbSceneParam._m0[63u].y, _2089 * cbSceneParam._m0[63u].x)));
        float _2306 = fma(_2101, cbSceneParam._m0[60u].w, fma(_2097, cbSceneParam._m0[60u].z, fma(_2093, cbSceneParam._m0[60u].y, _2089 * cbSceneParam._m0[60u].x))) / _2305;
        float _2307 = fma(_2101, cbSceneParam._m0[61u].w, fma(_2097, cbSceneParam._m0[61u].z, fma(_2093, cbSceneParam._m0[61u].y, _2089 * cbSceneParam._m0[61u].x))) / _2305;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2306 >= cbSceneParam._m0[64u].x) && (_2307 >= cbSceneParam._m0[64u].y)) && (_2306 <= cbSceneParam._m0[64u].z)) && (_2307 <= cbSceneParam._m0[64u].w))
        {
            float _2445 = fma(_2101, cbSceneParam._m0[62u].w, fma(_2097, cbSceneParam._m0[62u].z, fma(_2093, cbSceneParam._m0[62u].y, _2089 * cbSceneParam._m0[62u].x))) / _2305;
            float _2449 = isnan(cbSceneParam._m0[41u].w) ? _2445 : (isnan(_2445) ? cbSceneParam._m0[41u].w : max(_2445, cbSceneParam._m0[41u].w));
            float _2492 = (cbSceneParam._m0[33u].x - sqrt(((_2103 * _2103) + (_2102 * _2102)) + (_2104 * _2104))) * cbSceneParam._m0[33u].y;
            float _4550 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
            float _2499 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2306, cbSceneParam._m0[33u].w + _2307), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2306, _2307 - cbSceneParam._m0[33u].z), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2306 - cbSceneParam._m0[33u].z, _2307 - cbSceneParam._m0[33u].w), _2449), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2306 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2307), _2449), 0.0)).x), vec4(0.25)));
            float _2503 = 1.0 - (_2499 * cbSceneParam._m0[34u].x);
            float _2504 = 1.0 - (_2499 * cbSceneParam._m0[34u].y);
            float _2505 = 1.0 - (_2499 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2504) ? _2252 : (isnan(_2252) ? _2504 : min(_2252, _2504));
            frontier_phi_36_35_ladder_1 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
            frontier_phi_36_35_ladder_2 = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
        }
        else
        {
            frontier_phi_36_35_ladder = _2252;
            frontier_phi_36_35_ladder_1 = _2253;
            frontier_phi_36_35_ladder_2 = _2251;
        }
        _2317 = frontier_phi_36_35_ladder_2;
        _2319 = frontier_phi_36_35_ladder;
        _2321 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2317 = _2251;
        _2319 = _2252;
        _2321 = _2253;
    }
    uvec4 _2326 = floatBitsToUint(cbInstanceData._m0[_985 + 5u]);
    uint _2328 = _2326.x * 14u;
    uint _2329 = _2328 + 13u;
    float _2336 = _1025 + (-1.0);
    float _2341 = (cbLight._m0[_2329].x * _2336) + 1.0;
    float _2342 = (cbLight._m0[_2329].y * _2336) + 1.0;
    float _2343 = (cbLight._m0[_2329].z * _2336) + 1.0;
    float _2344 = (cbLight._m0[_2329].w * _2336) + 1.0;
    uint _2345 = _2328 + 5u;
    float _2351 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
    uint _2355 = _2328 + 4u;
    float _2364 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
    uint _2368 = _2328 | 1u;
    float _2379 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_859, _860, _861));
    float _2382 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_859, _860, _861));
    float _4586 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _4597 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2387 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * 0.3183098733425140380859375;
    float _2389 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * 0.3183098733425140380859375;
    float _2396 = ((cbLight._m0[_2345].x * _2351) * _2389) + (((cbLight._m0[_2355].x * _2317) * _2364) * _2387);
    float _2397 = ((_2351 * cbLight._m0[_2345].y) * _2389) + (((cbLight._m0[_2355].y * _2319) * _2364) * _2387);
    float _2398 = ((_2351 * cbLight._m0[_2345].z) * _2389) + (((cbLight._m0[_2355].z * _2321) * _2364) * _2387);
    uvec4 _2402 = floatBitsToUint(cbLight._m0[_2328 + 12u]);
    bool _2404 = _2402.x == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2404)
    {
        _2506 = _2396;
        _2508 = _2397;
        _2510 = _2398;
    }
    else
    {
        uint _2514 = _2328 + 6u;
        float _2530 = (dot(vec3(cbLight._m0[_2328 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2531 = _2530 * _2530;
        float _4608 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2532 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2533 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2506 = (((cbLight._m0[_2514].x * 0.3183098733425140380859375) * _2532) * _2533) + _2396;
        _2508 = (((cbLight._m0[_2514].y * 0.3183098733425140380859375) * _2532) * _2533) + _2397;
        _2510 = (((cbLight._m0[_2514].z * 0.3183098733425140380859375) * _2532) * _2533) + _2398;
    }
    bool _2513 = _2402.y == 0u;
    float _2568;
    float _2570;
    float _2572;
    if (_2513)
    {
        _2568 = _2506;
        _2570 = _2508;
        _2572 = _2510;
    }
    else
    {
        uint _2741 = _2328 + 7u;
        float _2757 = (dot(vec3(cbLight._m0[_2328 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2758 = _2757 * _2757;
        float _4624 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2759 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2760 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2568 = (((cbLight._m0[_2741].x * 0.3183098733425140380859375) * _2759) * _2760) + _2506;
        _2570 = (((cbLight._m0[_2741].y * 0.3183098733425140380859375) * _2759) * _2760) + _2508;
        _2572 = (((cbLight._m0[_2741].z * 0.3183098733425140380859375) * _2759) * _2760) + _2510;
    }
    uint _2575 = _2328 + 8u;
    float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _862) * 0.949999988079071044921875);
    float _2589 = _2588 * _2588;
    float _2590 = cbLight._m0[_2328].x + _939;
    float _2591 = cbLight._m0[_2328].y + _940;
    float _2592 = cbLight._m0[_2328].z + _941;
    float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
    float _2597 = _2596 * _2590;
    float _2598 = _2596 * _2591;
    float _2599 = _2596 * _2592;
    float _2600 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2328].xyz));
    float _4640 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _4651 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _2604 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2605 = dot(vec3(_859, _860, _861), vec3(_2597, _2598, _2599));
    float _4662 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2597, _2598, _2599));
    float _4673 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2589 * _2589;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2626 = 0.959999978542327880859375 - _1007;
    float _2628 = 0.959999978542327880859375 - _1008;
    float _2629 = 0.959999978542327880859375 - _1009;
    float _2636 = 1.0 - _2589;
    float _2647 = (0.5 / (((_2604 * ((_2603 * _2636) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2636) + _2589) * _2603))) * _2603;
    float _4684 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2649 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    uint _2663 = _2328 + 9u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _862) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2368].x + _939;
    float _2677 = cbLight._m0[_2368].y + _940;
    float _2678 = cbLight._m0[_2368].z + _941;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2368].xyz));
    float _4695 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2690 = dot(vec3(_859, _860, _861), vec3(_2683, _2684, _2685));
    float _4706 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2683, _2684, _2685));
    float _4717 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2675 * _2675;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2716 = 1.0 - _2675;
    float _2726 = (0.5 / (((_2604 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2716) + _2675) * _2689))) * _2689;
    float _4728 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2728 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    float _2738 = (((((_2709 * _2626) + _1010) * cbLight._m0[_2663].x) * _2728) * _2351) + ((((cbLight._m0[_2575].x * _2317) * ((_2625 * _2626) + _1010)) * _2649) * _2364);
    float _2739 = (((((_2709 * _2628) + _1012) * cbLight._m0[_2663].y) * _2728) * _2351) + ((((cbLight._m0[_2575].y * _2319) * ((_2625 * _2628) + _1012)) * _2649) * _2364);
    float _2740 = (((((_2709 * _2629) + _1013) * cbLight._m0[_2663].z) * _2728) * _2351) + ((((cbLight._m0[_2575].z * _2321) * ((_2625 * _2629) + _1013)) * _2649) * _2364);
    float _2796;
    float _2798;
    float _2800;
    if (_2404)
    {
        _2796 = _2738;
        _2798 = _2739;
        _2800 = _2740;
    }
    else
    {
        uint _2802 = _2328 + 2u;
        uint _2806 = _2328 + 10u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _862) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _939;
        float _2823 = cbLight._m0[_2802].y + _940;
        float _2824 = cbLight._m0[_2802].z + _941;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2802].xyz));
        float _4739 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2836 = dot(vec3(_859, _860, _861), vec3(_2829, _2830, _2831));
        float _4750 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4761 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2604 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2862) + _2821) * _2835))) * _2835;
        float _4772 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2796 = (((((_2855 * _2626) + _1010) * cbLight._m0[_2806].x) * _2874) * _2875) + _2738;
        _2798 = (((((_2855 * _2628) + _1012) * cbLight._m0[_2806].y) * _2874) * _2875) + _2739;
        _2800 = (((((_2855 * _2629) + _1013) * cbLight._m0[_2806].z) * _2874) * _2875) + _2740;
    }
    float _2906;
    float _2908;
    float _2910;
    if (_2513)
    {
        _2906 = _2796;
        _2908 = _2798;
        _2910 = _2800;
    }
    else
    {
        uint _2917 = _2328 + 3u;
        uint _2921 = _2328 + 11u;
        float _2935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2917].w)) * _862) * 0.949999988079071044921875);
        float _2936 = _2935 * _2935;
        float _2937 = cbLight._m0[_2917].x + _939;
        float _2938 = cbLight._m0[_2917].y + _940;
        float _2939 = cbLight._m0[_2917].z + _941;
        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
        float _2944 = _2943 * _2937;
        float _2945 = _2943 * _2938;
        float _2946 = _2943 * _2939;
        float _2947 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2917].xyz));
        float _4788 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2950 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2951 = dot(vec3(_859, _860, _861), vec3(_2944, _2945, _2946));
        float _4799 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2955 = dot(vec3(cbLight._m0[_2917].xyz), vec3(_2944, _2945, _2946));
        float _4810 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2959 = _2936 * _2936;
        float _2963 = ((_2954 * _2954) * (_2959 + (-1.0))) + 1.0;
        float _2970 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2977 = 1.0 - _2936;
        float _2987 = (0.5 / (((_2604 * ((_2950 * _2977) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2977) + _2936) * _2950))) * _2950;
        float _4821 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2989 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2959 / ((_2963 * _2963) * 3.141590118408203125));
        float _2990 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2906 = (((((_2970 * _2626) + _1010) * cbLight._m0[_2921].x) * _2989) * _2990) + _2796;
        _2908 = (((((_2970 * _2628) + _1012) * cbLight._m0[_2921].y) * _2989) * _2990) + _2798;
        _2910 = (((((_2970 * _2629) + _1013) * cbLight._m0[_2921].z) * _2989) * _2990) + _2800;
    }
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_2326.y == 0u)
    {
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.x;
        uint _3023 = uint((float(_3011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _3012))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _3012)));
        float _3033 = (log2(_2104 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3034 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        uint _3037 = uint(isnan(14.0) ? _3034 : (isnan(_3034) ? 14.0 : min(_3034, 14.0)));
        uvec4 _3042 = texelFetch(g_lightClusterGridBuffer, int(((_3037 << 2u) + (_3023 << 6u)) >> 2u));
        uint _3043 = _3042.x;
        uint _3044 = _3011.z;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((((1u << ((_3044 >> 4u) & 15u)) + 4294967295u) & _3043) == 0u) || ((_3044 & 240u) == 0u))
        {
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
        }
        else
        {
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            uint _3272 = 0u;
            uint _3281;
            bool _3282;
            for (;;)
            {
                _3281 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                _3282 = _3281 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3282)
                {
                    frontier_phi_68_pred = _3271;
                    frontier_phi_68_pred_1 = _3270;
                    frontier_phi_68_pred_2 = _3269;
                    frontier_phi_68_pred_3 = _3267;
                    frontier_phi_68_pred_4 = _3266;
                    frontier_phi_68_pred_5 = _3268;
                }
                else
                {
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    uint _3396;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3269;
                    _3394 = _3270;
                    _3395 = _3271;
                    _3396 = _3281;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    for (;;)
                    {
                        uint _3400 = uint(findLSB(_3396)) + (_3272 << 5u);
                        uint _3397 = (_3396 + 4294967295u) & _3396;
                        uint _3402 = _3400 * 48u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3422 = (_3400 * 48u) + 4u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3441 = (_3400 * 48u) + 8u;
                        vec3 _3452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x));
                        float _3456 = _3416.x - _2102;
                        float _3457 = _3416.y - _2103;
                        float _3458 = _3416.z - _2104;
                        float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                        float _3462 = inversesqrt(_3459);
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3466 = dot(vec3(_966, _969, _972), vec3(_3463, _3464, _3465));
                        float _3471 = 1.0 - (_3459 * _3416.w);
                        float _4847 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3473 = sqrt(_3459) * _3435.w;
                        float _3476 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3466) + _3477;
                        float _3483 = _3473 * _3473;
                        float _3487 = ((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3472) / ((_3483 * 0.699999988079071044921875) + 1.0);
                        float _3491 = (-0.0) - _2102;
                        float _3492 = (-0.0) - _2103;
                        float _3493 = (-0.0) - _2104;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3507 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                        float _3508 = 1.0 - _1041;
                        float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                        float _3516 = _3515 * _3515;
                        float _3517 = _3516 * _3516;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3520 = _3500 + _3465;
                        float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                        float _3528 = dot(vec3(_966, _969, _972), vec3(_3498, _3499, _3500));
                        float _4863 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3532 = dot(vec3(_966, _969, _972), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                        float _4874 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                        float _3540 = _3476 * _3516;
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3466) + _3541;
                        float _4885 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3546 = 1.0 - _3516;
                        float _3556 = (0.5 / (((_3545 * ((_3531 * _3546) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3516) * _3531))) * _3545;
                        float _4896 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3567 = (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3539 * _3539) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125))) * _3472;
                        _3325 = (_3487 * _3435.x) + _3393;
                        _3326 = (_3487 * _3435.y) + _3394;
                        _3327 = (_3487 * _3435.z) + _3395;
                        _3322 = (_3567 * _3452.x) + _3390;
                        _3323 = (_3567 * _3452.y) + _3391;
                        _3324 = (_3567 * _3452.z) + _3392;
                        if (_3397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3325;
                            _3394 = _3326;
                            _3395 = _3327;
                            _3396 = _3397;
                        }
                    }
                    frontier_phi_68_pred = _3327;
                    frontier_phi_68_pred_1 = _3326;
                    frontier_phi_68_pred_2 = _3325;
                    frontier_phi_68_pred_3 = _3323;
                    frontier_phi_68_pred_4 = _3322;
                    frontier_phi_68_pred_5 = _3324;
                }
                _3133 = frontier_phi_68_pred;
                _3131 = frontier_phi_68_pred_1;
                _3129 = frontier_phi_68_pred_2;
                _3125 = frontier_phi_68_pred_3;
                _3123 = frontier_phi_68_pred_4;
                _3127 = frontier_phi_68_pred_5;
                uint _3273 = _3272 + 1u;
                if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3266 = _3123;
                    _3267 = _3125;
                    _3268 = _3127;
                    _3269 = _3129;
                    _3270 = _3131;
                    _3271 = _3133;
                    _3272 = _3273;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
        }
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.z;
        uint _3139 = (_3137 >> 8u) & 15u;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        if (((4294967295u << _3139) & _3043) == 0u)
        {
            _3234 = _3122;
            _3236 = _3124;
            _3238 = _3126;
            _3240 = _3128;
            _3242 = _3130;
            _3244 = _3132;
        }
        else
        {
            float _3259 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
            float _3260 = _3259 * _2102;
            float _3261 = _3259 * _2103;
            float _3262 = _3259 * _2104;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3139 < ((_3137 >> 12u) & 15u))
            {
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3373 = _3122;
                float _3374 = _3124;
                float _3375 = _3126;
                float _3376 = _3128;
                float _3377 = _3130;
                float _3378 = _3132;
                uint _3379 = _3139;
                uint _3388;
                bool _3389;
                for (;;)
                {
                    _3388 = texelFetch(g_lightClassification, int((((_3037 << 5u) + (_3023 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                    _3389 = _3388 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3389)
                    {
                        frontier_phi_74_pred = _3375;
                        frontier_phi_74_pred_1 = _3374;
                        frontier_phi_74_pred_2 = _3373;
                        frontier_phi_74_pred_3 = _3378;
                        frontier_phi_74_pred_4 = _3377;
                        frontier_phi_74_pred_5 = _3376;
                    }
                    else
                    {
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        float _3587 = _3375;
                        float _3588 = _3376;
                        float _3589 = _3377;
                        float _3590 = _3378;
                        uint _3591 = _3388;
                        uint _3592;
                        vec4 _3617;
                        float _3618;
                        vec4 _3633;
                        vec3 _3645;
                        vec4 _3660;
                        vec4 _3675;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3602 = ((_3379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3591));
                            _3592 = (_3591 + 4294967295u) & _3591;
                            uint _3604 = _3602 * 40u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3618 = _3617.w;
                            uint _3620 = (_3602 * 40u) + 4u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3602 * 40u) + 8u;
                            _3645 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x));
                            uint _3647 = (_3602 * 40u) + 16u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3602 * 40u) + 20u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3678 = (_3602 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3602 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2104, _3710.z, fma(_2103, _3710.y, _3710.x * _2102)) + _3710.w;
                            _3723 = !((fma(_2104, _3691.z, fma(_2103, _3691.y, _3691.x * _2102)) + _3691.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3617.x - _2102;
                                float _3751 = _3617.y - _2103;
                                float _3752 = _3617.z - _2104;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3618 * _3618));
                                float _4907 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3768 = sqrt(_3753) * _3633.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_966, _969, _972))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2104, _3660.z, fma(_2103, _3660.y, _3660.x * _2102)) + _3660.w) / _3722;
                                float _3782 = (fma(_2104, _3675.z, fma(_2103, _3675.y, _3675.x * _2102)) + _3675.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _4923 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _1041;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3260;
                                float _3812 = _3758 - _3261;
                                float _3813 = _3759 - _3262;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_966, _969, _972), vec3((-0.0) - _3260, (-0.0) - _3261, (-0.0) - _3262));
                                float _4934 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3825 = dot(vec3(_966, _969, _972), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _4945 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_966, _969, _972), vec3(_3757, _3758, _3759))) + _3834;
                                float _4956 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _4967 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3862 * _3645.z;
                                frontier_phi_80_pred_1 = _3862 * _3645.y;
                                frontier_phi_80_pred_2 = _3862 * _3645.x;
                                frontier_phi_80_pred_3 = _3788 * _3633.z;
                                frontier_phi_80_pred_4 = _3788 * _3633.y;
                                frontier_phi_80_pred_5 = _3788 * _3633.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3868 = frontier_phi_80_pred;
                            _3867 = frontier_phi_80_pred_1;
                            _3866 = frontier_phi_80_pred_2;
                            _3871 = frontier_phi_80_pred_3;
                            _3870 = frontier_phi_80_pred_4;
                            _3869 = frontier_phi_80_pred_5;
                            _3575 = _3869 + _3588;
                            _3576 = _3870 + _3589;
                            _3577 = _3871 + _3590;
                            _3572 = _3866 + _3585;
                            _3573 = _3867 + _3586;
                            _3574 = _3868 + _3587;
                            if (_3592 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3592;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3574;
                        frontier_phi_74_pred_1 = _3573;
                        frontier_phi_74_pred_2 = _3572;
                        frontier_phi_74_pred_3 = _3577;
                        frontier_phi_74_pred_4 = _3576;
                        frontier_phi_74_pred_5 = _3575;
                    }
                    _3239 = frontier_phi_74_pred;
                    _3237 = frontier_phi_74_pred_1;
                    _3235 = frontier_phi_74_pred_2;
                    _3245 = frontier_phi_74_pred_3;
                    _3243 = frontier_phi_74_pred_4;
                    _3241 = frontier_phi_74_pred_5;
                    uint _3380 = _3379 + 1u;
                    if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3373 = _3235;
                        _3374 = _3237;
                        _3375 = _3239;
                        _3376 = _3241;
                        _3377 = _3243;
                        _3378 = _3245;
                        _3379 = _3380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3243;
                frontier_phi_62_63_ladder_1 = _3241;
                frontier_phi_62_63_ladder_2 = _3239;
                frontier_phi_62_63_ladder_3 = _3245;
                frontier_phi_62_63_ladder_4 = _3237;
                frontier_phi_62_63_ladder_5 = _3235;
            }
            else
            {
                frontier_phi_62_63_ladder = _3130;
                frontier_phi_62_63_ladder_1 = _3128;
                frontier_phi_62_63_ladder_2 = _3126;
                frontier_phi_62_63_ladder_3 = _3132;
                frontier_phi_62_63_ladder_4 = _3124;
                frontier_phi_62_63_ladder_5 = _3122;
            }
            _3234 = frontier_phi_62_63_ladder_5;
            _3236 = frontier_phi_62_63_ladder_4;
            _3238 = frontier_phi_62_63_ladder_2;
            _3240 = frontier_phi_62_63_ladder_1;
            _3242 = frontier_phi_62_63_ladder;
            _3244 = frontier_phi_62_63_ladder_3;
        }
        float _3249 = isnan(1.0) ? _1025 : (isnan(_1025) ? 1.0 : min(_1025, 1.0));
        _3055 = (_3249 * _3240) + _2568;
        _3057 = (_3249 * _3242) + _2570;
        _3059 = (_3249 * _3244) + _2572;
        _3061 = ((_3234 * _1010) * _3249) + _2906;
        _3063 = ((_3236 * _1012) * _3249) + _2908;
        _3065 = ((_3238 * _1013) * _3249) + _2910;
    }
    else
    {
        _3055 = _2568;
        _3057 = _2570;
        _3059 = _2572;
        _3061 = _2906;
        _3063 = _2908;
        _3065 = _2910;
    }
    float _4983 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4994 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    uint _3085 = _985 + 6u;
    float _3093 = _947 / cbSceneParam._m0[86u].x;
    float _3094 = _948 / cbSceneParam._m0[86u].y;
    vec4 _3108 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3110 = _3108.x;
    float _3111 = _3108.y;
    float _3112 = _3108.z;
    float _3113 = _3108.w;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _3147 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _3148 = _3147 / _882;
        float _3159 = _3148 * _932;
        float _3160 = _933 * _3148;
        float _3161 = (-0.0) - _3160;
        float _3162 = _3148 * _934;
        float _3164 = (cbSceneParam._m0[77u].w * _3161) / _3147;
        float _3165 = _3164 + cbSceneParam._m0[79u].w;
        float _3166 = cbSceneParam._m0[79u].w - _3160;
        float _3172 = sqrt(((_3159 * _3159) + (_3160 * _3160)) + (_3162 * _3162));
        float _3175 = (1.0 - (cbSceneParam._m0[77u].w / _3147)) * _3172;
        float _3180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3335;
        if (abs((_3161 - _3164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3335 = ((((_3165 > 0.0) ? exp2(_3180 * _3165) : (2.0 - exp2(_3182 * _3165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3175;
        }
        else
        {
            float _3295 = 1.0 / cbSceneParam._m0[80u].x;
            float _3296 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : max(_3165, _3166));
            float _3297 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : min(_3165, _3166));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            float _3307 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : min(_3297, 0.0));
            _3335 = ((abs(_3172 / _3161) * cbSceneParam._m0[80u].y) * ((((_3306 - _3307) * 2.0) - ((exp2(_3180 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0)))) - exp2(_3180 * (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))))) * _3295)) - ((exp2(_3182 * _3306) - exp2(_3182 * _3307)) * _3295))) + (_3175 * cbSceneParam._m0[80u].z);
        }
        vec4 _3337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, 1.0), 0.0);
        float _3346 = exp2((_3335 * (-1.44269502162933349609375)) * (1.0 - _3337.w));
        float _3347 = log2(_3346);
        float _3363 = log2(_3113);
        _3184 = (exp2(_3363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].x)) * _3337.x) / cbSceneParam._m0[78u].x)) + _3110;
        _3186 = (exp2(_3363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].y)) * _3337.y) / cbSceneParam._m0[78u].y)) + _3111;
        _3188 = (exp2(_3363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3347 * cbSceneParam._m0[78u].z)) * _3337.z) / cbSceneParam._m0[78u].z)) + _3112;
        _3190 = _3346 * _3113;
    }
    else
    {
        _3184 = _3110;
        _3186 = _3111;
        _3188 = _3112;
        _3190 = _3113;
    }
    float _3202 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3203 = _3202 == 3.0;
    float _3204 = log2(_3190);
    float _3211 = exp2(_3204 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_3055 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1025))) + ((_3061 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _3212 = exp2(_3204 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_3057 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1025))) + ((_3063 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _3213 = exp2(_3204 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_3059 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1025))) + ((_3065 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _3222 = (_3202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3222 * (_3203 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3184)));
    SV_Target.y = _3222 * (_3203 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3186)));
    SV_Target.z = _3222 * (_3203 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3188)));
    SV_Target.w = cbInstanceData._m0[_3085].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3085].w;
}


