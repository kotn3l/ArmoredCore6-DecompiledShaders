#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1443;
float _3849;
float _3850;
float _3851;
float _3852;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256;
    float _257;
    float _258;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
    }
    else
    {
        _256 = _242;
        _257 = _243;
        _258 = _244;
    }
    vec4 _280 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _320 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _280.x) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.z) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.w) + cbTextureTilingScale._m0[19u].w)).x * cbMtdParam._m0[15u].w))) + 1.0;
    float _3861 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _321 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    vec4 _334 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _351 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _353 = _351.x;
    float _354 = _351.y;
    float _355 = _351.z;
    float _362 = ((_334.x - _353) * _321) + _353;
    float _363 = ((_334.y - _354) * _321) + _354;
    float _364 = ((_334.z - _355) * _321) + _355;
    float _386 = ((cbMtdParam._m0[16u].y * (-1.39999997615814208984375)) * (((1.0 - _280.y) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x * cbMtdParam._m0[15u].z))) + 1.0;
    float _3872 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    vec4 _399 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _410 = ((_399.x - _362) * _387) + _362;
    float _411 = ((_399.y - _363) * _387) + _363;
    float _412 = ((_399.z - _364) * _387) + _364;
    float _435 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - _280.z) * 2.0) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_20, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x * cbMtdParam._m0[15u].y))) + 1.0;
    float _3883 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    vec4 _449 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _465 = ((((_449.x - _410) * _436) + _410) * 2.0) + (-1.0);
    float _467 = ((((_449.y - _411) * _436) + _411) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3894 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _474 = fma(_473, _256, 0.0);
    float _475 = fma(_473, _257, 0.0);
    float _476 = fma(_473, _258, 0.0);
    float _480 = inversesqrt(dot(vec3(_474, _475, _476), vec3(_474, _475, _476)));
    float _506 = (cbMtdParam._m0[14u].y + dot(vec4(_480 * _474, _480 * _475, _480 * _476, 0.0), vec4(cbMtdParam._m0[16u].w, cbMtdParam._m0[17u].xy, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x * cbMtdParam._m0[14u].x);
    float _3905 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    vec4 _526 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _531 = _526.x * cbMtdParam._m0[10u].x;
    float _532 = _526.y * cbMtdParam._m0[10u].y;
    float _533 = _526.z * cbMtdParam._m0[10u].z;
    vec4 _551 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _565 = (((_551.x * cbMtdParam._m0[11u].x) - _531) * _321) + _531;
    float _566 = (((_551.y * cbMtdParam._m0[11u].y) - _532) * _321) + _532;
    float _567 = (((_551.z * cbMtdParam._m0[11u].z) - _533) * _321) + _533;
    vec4 _585 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _599 = (((_585.x * cbMtdParam._m0[12u].x) - _565) * _387) + _565;
    float _600 = (((_585.y * cbMtdParam._m0[12u].y) - _566) * _387) + _566;
    float _601 = (((_585.z * cbMtdParam._m0[12u].z) - _567) * _387) + _567;
    vec4 _619 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w));
    vec4 _653 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _661 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_619.x * cbMtdParam._m0[13u].x) - _599) * _436) + _599)) * _653.x;
    float _664 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_619.y * cbMtdParam._m0[13u].y) - _600) * _436) + _600)) * _653.y;
    float _667 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_619.z * cbMtdParam._m0[13u].z) - _601) * _436) + _601)) * _653.z;
    vec4 _679 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _690 = ((_679.x - _661) * _507) + _661;
    float _691 = ((_679.y - _664) * _507) + _664;
    float _692 = ((_679.z - _667) * _507) + _667;
    vec4 _704 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _706 = _704.x;
    vec4 _746 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _765 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _748) * _321) + _748;
    float _768 = ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w)).x - _765) * _387) + _765;
    float _775 = (((_768 - _706) + ((texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _768) * _436)) * cbMtdParam._m0[14u].w) + _706;
    float _777 = _775 - (_775 * _507);
    vec4 _791 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _795 = _791.z;
    float _802 = (((((_449.z - _412) * _436) + _412) - _795) * cbMtdParam._m0[15u].x) + _795;
    vec4 _814 = texture(sampler2D(M_AMSN_M0_M1_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _821 = (_814.x * 2.0) + (-1.0);
    float _822 = (_814.y * 2.0) + (-1.0);
    float _823 = dot(vec2(_821, _822), vec2(_821, _822));
    float _3916 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _831 = ((_814.z - _802) * _507) + _802;
    float _840 = ((sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) - _473) * _507) + _473;
    float _846 = (((_821 - _465) * _507) + _465) + (cbMtdParam._m0[16u].z * ((_791.x * 2.0) + (-1.0)));
    float _847 = (((_822 - _467) * _507) + _467) + (cbMtdParam._m0[16u].z * ((_791.y * 2.0) + (-1.0)));
    float _850 = fma(_840, _256, fma(_847, _248 * TANGENT.x, (_234 * _226) * _846));
    float _853 = fma(_840, _257, fma(_847, _248 * TANGENT.y, (_234 * _227) * _846));
    float _856 = fma(_840, _258, fma(_847, _248 * TANGENT.z, (_234 * _228) * _846));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _3927 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _864 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3949 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3960 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3971 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _868 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    vec4 _948 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _950 = _948.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1122 = sqrt(((_934 * _934) + (_935 * _935)) + (_936 * _936));
        float _1128 = (cbMatDynParam._m0[5u].x * _1122) + cbMatDynParam._m0[5u].y;
        float _3982 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1133 = (cbMatDynParam._m0[5u].z * _1122) + cbMatDynParam._m0[5u].w;
        float _3993 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) - _1129)) + _1129) < ((_950 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _983 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _986 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _999 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1000 = _999 + 9u;
    uint _1001 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4004 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1013 = 1.0 - _868;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _868;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _868;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _868;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1039 = _1036.x * TEXCOORD_4;
    float _1040 = dot(vec3(_861, _862, _863), vec3(_941, _942, _943));
    float _1043 = _1040 * 2.0;
    float _1047 = (_1043 * _861) - _941;
    float _1048 = (_1043 * _862) - _942;
    float _1049 = (_1043 * _863) - _943;
    float _1053 = abs(dot(vec3(_941, _942, _943), vec3(_861, _862, _863)));
    float _4037 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1055 = sqrt(_864);
    float _1068 = exp2((_1055 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1055 * 3.0));
    float _1074 = (1.0 - _1068) * ((_1055 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1075 = _1068 * _1055;
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1442;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1167 = fma(_1111, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103));
        float _1171 = fma(_1111, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103));
        float _1175 = fma(_1111, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103));
        float _1200 = _1103 + _861;
        float _1201 = _1107 + _862;
        float _1202 = _1111 + _863;
        float _1212 = fma(_1202, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200)) - _1167;
        float _1213 = fma(_1202, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200)) - _1171;
        float _1214 = fma(_1202, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200)) - _1175;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1167 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1171 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[34u].z) + ((((((_1175 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1270 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1236.x + (-0.5));
        float _1272 = _1270 * (_1236.y + (-0.5));
        float _1273 = _1270 * (_1236.z + (-0.5));
        float _1280 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1243.x + (-0.5));
        float _1282 = _1280 * (_1243.y + (-0.5));
        float _1283 = _1280 * (_1243.z + (-0.5));
        float _1290 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1250.x + (-0.5));
        float _1292 = _1290 * (_1250.y + (-0.5));
        float _1293 = _1290 * (_1250.z + (-0.5));
        float _1300 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1257.x + (-0.5));
        float _1302 = _1300 * (_1257.y + (-0.5));
        float _1303 = _1300 * (_1257.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1324 = (dot(vec3(_861, _862, _863), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1334 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4085 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1336 + 1.0))) + _1341) * _1304;
        float _1351 = _1272 * 0.5;
        float _1352 = _1282 * 0.5;
        float _1353 = _1292 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_861, _862, _863), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4118 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1378 + 1.0))) + _1383) * _1305;
        float _1393 = _1273 * 0.5;
        float _1394 = _1283 * 0.5;
        float _1395 = _1293 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_861, _862, _863), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4151 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1420 + 1.0))) + _1425) * _1306;
        _1442 = _1273;
        _1444 = _1272;
        _1445 = _1271;
        _1446 = _1283;
        _1447 = _1282;
        _1448 = _1281;
        _1449 = _1293;
        _1450 = _1292;
        _1451 = _1291;
        _1452 = _1306;
        _1453 = _1305;
        _1454 = _1304;
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1443;
        _1444 = _1443;
        _1445 = _1443;
        _1446 = _1443;
        _1447 = _1443;
        _1448 = _1443;
        _1449 = _1443;
        _1450 = _1443;
        _1451 = _1443;
        _1452 = _1443;
        _1453 = _1443;
        _1454 = _1443;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1486 = fma(_1111, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103));
        float _1490 = fma(_1111, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103));
        float _1494 = fma(_1111, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103));
        float _1517 = _1103 + _861;
        float _1518 = _1107 + _862;
        float _1519 = _1111 + _863;
        float _1529 = fma(_1519, cbModelParam._m0[30u].z, fma(_1518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1517)) - _1486;
        float _1530 = fma(_1519, cbModelParam._m0[31u].z, fma(_1518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1517)) - _1490;
        float _1531 = fma(_1519, cbModelParam._m0[32u].z, fma(_1518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1517)) - _1494;
        float _1535 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
        float _1548 = ((_1535 * _1529) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1486 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1535 * _1530) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1490 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1535 * _1531) / cbModelParam._m0[35u].z) + ((((((_1494 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        float _1585 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1552.x + (-0.5));
        float _1587 = _1585 * (_1552.y + (-0.5));
        float _1588 = _1585 * (_1552.z + (-0.5));
        float _1595 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1559.x + (-0.5));
        float _1597 = _1595 * (_1559.y + (-0.5));
        float _1598 = _1595 * (_1559.z + (-0.5));
        float _1605 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1566.x + (-0.5));
        float _1607 = _1605 * (_1566.y + (-0.5));
        float _1608 = _1605 * (_1566.z + (-0.5));
        float _1615 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1573.x + (-0.5));
        float _1617 = _1615 * (_1573.y + (-0.5));
        float _1618 = _1615 * (_1573.z + (-0.5));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = _1586 * 0.5;
        float _1623 = _1596 * 0.5;
        float _1624 = _1606 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_861, _862, _863), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4214 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1649 + 1.0))) + _1654) * _1619;
        float _1664 = _1587 * 0.5;
        float _1665 = _1597 * 0.5;
        float _1666 = _1607 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_861, _862, _863), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4247 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1691 + 1.0))) + _1696) * _1620;
        float _1706 = _1588 * 0.5;
        float _1707 = _1598 * 0.5;
        float _1708 = _1608 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_861, _862, _863), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4280 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1733 + 1.0))) + _1738) * _1621;
        _1755 = _1588;
        _1756 = _1587;
        _1757 = _1586;
        _1758 = _1598;
        _1759 = _1597;
        _1760 = _1596;
        _1761 = _1608;
        _1762 = _1607;
        _1763 = _1606;
        _1764 = _1621;
        _1765 = _1620;
        _1766 = _1619;
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
    }
    else
    {
        _1755 = _1443;
        _1756 = _1443;
        _1757 = _1443;
        _1758 = _1443;
        _1759 = _1443;
        _1760 = _1443;
        _1761 = _1443;
        _1762 = _1443;
        _1763 = _1443;
        _1764 = _1443;
        _1765 = _1443;
        _1766 = _1443;
        _1767 = 0.0;
        _1768 = 0.0;
        _1769 = 0.0;
    }
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1455)) + _1455;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1456)) + _1456;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1457)) + _1457;
    float _1802 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1779));
    float _1823 = _1047 * 0.5;
    float _1824 = _1048 * 0.5;
    float _1825 = _1049 * 0.5;
    float _1826 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1829 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1832 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1866;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1839 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1442, _1446, _1449, _1452));
        float _1843 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1847 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1445, _1448, _1451, _1454));
        float _1854 = dot(vec4(cbModelParam._m0[39u]), vec4(_1823, _1824, _1825, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1877;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1868 = dot(vec4(cbModelParam._m0[40u]), vec4(_1823, _1824, _1825, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1881 = (_1877 * cbModelParam._m0[1u].x) + (_1866 * (1.0 - cbModelParam._m0[1u].x));
    float _1891 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1891 : min(cbModelParam._m0[25u].z, _1891));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1939 = fma(_1111, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103)) + cbModelParam._m0[13u].w;
        float _1943 = fma(_1111, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103)) + cbModelParam._m0[14u].w;
        float _1947 = fma(_1111, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103)) + cbModelParam._m0[15u].w;
        float _1950 = fma(_1049, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047));
        float _1953 = fma(_1049, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047));
        float _1956 = fma(_1049, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047));
        float _1984;
        if (_1950 > 0.0)
        {
            _1984 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1984 = frontier_phi_19_17_ladder;
        }
        float _2208;
        if (_1953 > 0.0)
        {
            _2208 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2208 = frontier_phi_28_24_ladder;
        }
        float _2465;
        if (_1956 > 0.0)
        {
            _2465 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2465 = frontier_phi_40_35_ladder;
        }
        float _2467 = isnan(_2208) ? _1984 : (isnan(_1984) ? _2208 : min(_1984, _2208));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1950) + _1939;
        float _2473 = (_2468 * _1953) + _1943;
        float _2474 = (_2468 * _1956) + _1947;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1892);
            frontier_phi_18_40_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1972 = frontier_phi_18_40_ladder_2;
        _1974 = frontier_phi_18_40_ladder_1;
        _1976 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1047, _1048, _1049), _1892);
        _1972 = _1960.x * cbModelParam._m0[1u].y;
        _1974 = _1960.y * cbModelParam._m0[1u].y;
        _1976 = _1960.z * cbModelParam._m0[1u].y;
    }
    float _1980 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1980 : min(cbModelParam._m0[25u].w, _1980));
    float _2071;
    float _2073;
    float _2075;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2035 = fma(_1111, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103)) + cbModelParam._m0[21u].w;
        float _2039 = fma(_1111, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103)) + cbModelParam._m0[22u].w;
        float _2043 = fma(_1111, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103)) + cbModelParam._m0[23u].w;
        float _2046 = fma(_1049, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047));
        float _2049 = fma(_1049, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047));
        float _2052 = fma(_1049, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047));
        float _2213;
        if (_2046 > 0.0)
        {
            _2213 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2213 = frontier_phi_30_26_ladder;
        }
        float _2492;
        if (_2049 > 0.0)
        {
            _2492 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2492 = frontier_phi_42_37_ladder;
        }
        float _2705;
        if (_2052 > 0.0)
        {
            _2705 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2705 = frontier_phi_51_48_ladder;
        }
        float _2707 = isnan(_2492) ? _2213 : (isnan(_2213) ? _2492 : min(_2213, _2492));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _2046) + _2035;
        float _2713 = (_2708 * _2049) + _2039;
        float _2714 = (_2708 * _2052) + _2043;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _1981);
            frontier_phi_27_51_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2071 = frontier_phi_27_51_ladder_2;
        _2073 = frontier_phi_27_51_ladder_1;
        _2075 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1047, _1048, _1049), _1981);
        _2071 = _2055.x * cbModelParam._m0[1u].z;
        _2073 = _2055.y * cbModelParam._m0[1u].z;
        _2075 = _2055.z * cbModelParam._m0[1u].z;
    }
    float _2088 = (((_1074 * _1024) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2071 - _1972)) + _1972);
    float _2090 = (((_1074 * _1026) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2073 - _1974)) + _1974);
    float _2092 = (((_1074 * _1027) + _1075) * _1039) * ((cbModelParam._m0[1u].w * (_2075 - _1976)) + _1976);
    float _2095 = fma(_2092, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2088 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2092, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2088 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2092, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2088 * cbSceneParam._m0[91u].x));
    vec4 _2109 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_961, _962));
    float _2111 = _2109.w;
    float _2123 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2111);
    float _2124 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2111);
    float _2125 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2111);
    uvec4 _2129 = floatBitsToUint(cbInstanceData._m0[_999 + 5u]);
    uint _2131 = _2129.x * 14u;
    uint _2132 = _2131 + 13u;
    float _2139 = _1039 + (-1.0);
    float _2144 = (cbLight._m0[_2132].x * _2139) + 1.0;
    float _2145 = (cbLight._m0[_2132].y * _2139) + 1.0;
    float _2146 = (cbLight._m0[_2132].z * _2139) + 1.0;
    float _2147 = (cbLight._m0[_2132].w * _2139) + 1.0;
    uint _2148 = _2131 + 5u;
    float _2154 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2158 = _2131 + 4u;
    float _2167 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2171 = _2131 | 1u;
    float _2182 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_861, _862, _863));
    float _2185 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_861, _862, _863));
    float _4416 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _4427 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2192 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2199 = ((cbLight._m0[_2148].x * _2154) * _2192) + (((cbLight._m0[_2158].x * _2123) * _2167) * _2190);
    float _2200 = ((_2154 * cbLight._m0[_2148].y) * _2192) + (((cbLight._m0[_2158].y * _2124) * _2167) * _2190);
    float _2201 = ((_2154 * cbLight._m0[_2148].z) * _2192) + (((cbLight._m0[_2158].z * _2125) * _2167) * _2190);
    uvec4 _2205 = floatBitsToUint(cbLight._m0[_2131 + 12u]);
    bool _2207 = _2205.x == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2207)
    {
        _2218 = _2199;
        _2220 = _2200;
        _2222 = _2201;
    }
    else
    {
        uint _2226 = _2131 + 6u;
        float _2242 = (dot(vec3(cbLight._m0[_2131 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4438 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2245 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2218 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2199;
        _2220 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2200;
        _2222 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2201;
    }
    bool _2225 = _2205.y == 0u;
    float _2263;
    float _2265;
    float _2267;
    if (_2225)
    {
        _2263 = _2218;
        _2265 = _2220;
        _2267 = _2222;
    }
    else
    {
        uint _2436 = _2131 + 7u;
        float _2452 = (dot(vec3(cbLight._m0[_2131 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2455 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2263 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2218;
        _2265 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2220;
        _2267 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2222;
    }
    uint _2270 = _2131 + 8u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _864) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2131].x + _941;
    float _2286 = cbLight._m0[_2131].y + _942;
    float _2287 = cbLight._m0[_2131].z + _943;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2131].xyz));
    float _4470 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _4481 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2299 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2300 = dot(vec3(_861, _862, _863), vec3(_2292, _2293, _2294));
    float _4492 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2304 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2292, _2293, _2294));
    float _4503 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2308 = _2284 * _2284;
    float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
    float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2321 = 0.959999978542327880859375 - _1021;
    float _2323 = 0.959999978542327880859375 - _1022;
    float _2324 = 0.959999978542327880859375 - _1023;
    float _2331 = 1.0 - _2284;
    float _2342 = (0.5 / (((_2299 * ((_2298 * _2331) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2331) + _2284) * _2298))) * _2298;
    float _4514 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2344 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
    uint _2358 = _2131 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _864) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2171].x + _941;
    float _2372 = cbLight._m0[_2171].y + _942;
    float _2373 = cbLight._m0[_2171].z + _943;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2171].xyz));
    float _4525 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2385 = dot(vec3(_861, _862, _863), vec3(_2378, _2379, _2380));
    float _4536 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2378, _2379, _2380));
    float _4547 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2411 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2299 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2411) + _2370) * _2384))) * _2384;
    float _4558 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2433 = (((((_2404 * _2321) + _1024) * cbLight._m0[_2358].x) * _2423) * _2154) + ((((cbLight._m0[_2270].x * _2123) * ((_2320 * _2321) + _1024)) * _2344) * _2167);
    float _2434 = (((((_2404 * _2323) + _1026) * cbLight._m0[_2358].y) * _2423) * _2154) + ((((cbLight._m0[_2270].y * _2124) * ((_2320 * _2323) + _1026)) * _2344) * _2167);
    float _2435 = (((((_2404 * _2324) + _1027) * cbLight._m0[_2358].z) * _2423) * _2154) + ((((cbLight._m0[_2270].z * _2125) * ((_2320 * _2324) + _1027)) * _2344) * _2167);
    float _2497;
    float _2499;
    float _2501;
    if (_2207)
    {
        _2497 = _2433;
        _2499 = _2434;
        _2501 = _2435;
    }
    else
    {
        uint _2503 = _2131 + 2u;
        uint _2507 = _2131 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _864) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _941;
        float _2524 = cbLight._m0[_2503].y + _942;
        float _2525 = cbLight._m0[_2503].z + _943;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2503].xyz));
        float _4569 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2537 = dot(vec3(_861, _862, _863), vec3(_2530, _2531, _2532));
        float _4580 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4591 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2299 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2563) + _2522) * _2536))) * _2536;
        float _4602 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2497 = (((((_2556 * _2321) + _1024) * cbLight._m0[_2507].x) * _2575) * _2576) + _2433;
        _2499 = (((((_2556 * _2323) + _1026) * cbLight._m0[_2507].y) * _2575) * _2576) + _2434;
        _2501 = (((((_2556 * _2324) + _1027) * cbLight._m0[_2507].z) * _2575) * _2576) + _2435;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2225)
    {
        _2611 = _2497;
        _2613 = _2499;
        _2615 = _2501;
    }
    else
    {
        uint _2622 = _2131 + 3u;
        uint _2626 = _2131 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _864) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _941;
        float _2643 = cbLight._m0[_2622].y + _942;
        float _2644 = cbLight._m0[_2622].z + _943;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2622].xyz));
        float _4618 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2656 = dot(vec3(_861, _862, _863), vec3(_2649, _2650, _2651));
        float _4629 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4640 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2299 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2299 * _2682) + _2641) * _2655))) * _2655;
        float _4651 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2611 = (((((_2675 * _2321) + _1024) * cbLight._m0[_2626].x) * _2694) * _2695) + _2497;
        _2613 = (((((_2675 * _2323) + _1026) * cbLight._m0[_2626].y) * _2694) * _2695) + _2499;
        _2615 = (((((_2675 * _2324) + _1027) * cbLight._m0[_2626].z) * _2694) * _2695) + _2501;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2129.y == 0u)
    {
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2770;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2770;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2770;
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _2786)));
        float _2807 = (log2(_2773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
        }
        else
        {
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            uint _3075 = 0u;
            uint _3084;
            bool _3085;
            for (;;)
            {
                _3084 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                _3085 = _3084 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3085)
                {
                    frontier_phi_68_pred = _3071;
                    frontier_phi_68_pred_1 = _3074;
                    frontier_phi_68_pred_2 = _3073;
                    frontier_phi_68_pred_3 = _3072;
                    frontier_phi_68_pred_4 = _3070;
                    frontier_phi_68_pred_5 = _3069;
                }
                else
                {
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    uint _3220;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3084;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    for (;;)
                    {
                        uint _3224 = uint(findLSB(_3220)) + (_3075 << 5u);
                        uint _3221 = (_3220 + 4294967295u) & _3220;
                        uint _3226 = _3224 * 48u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3246 = (_3224 * 48u) + 4u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3265 = (_3224 * 48u) + 8u;
                        vec3 _3276 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x));
                        float _3280 = _3240.x - _2771;
                        float _3281 = _3240.y - _2772;
                        float _3282 = _3240.z - _2773;
                        float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                        float _3286 = inversesqrt(_3283);
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3290 = dot(vec3(_980, _983, _986), vec3(_3287, _3288, _3289));
                        float _3295 = 1.0 - (_3283 * _3240.w);
                        float _4677 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3297 = sqrt(_3283) * _3259.w;
                        float _3300 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3290) + _3301;
                        float _3307 = _3297 * _3297;
                        float _3311 = ((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3296) / ((_3307 * 0.699999988079071044921875) + 1.0);
                        float _3315 = (-0.0) - _2771;
                        float _3316 = (-0.0) - _2772;
                        float _3317 = (-0.0) - _2773;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3332 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                        float _3333 = 1.0 - _1055;
                        float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                        float _3341 = _3340 * _3340;
                        float _3342 = _3341 * _3341;
                        float _3343 = _3322 + _3287;
                        float _3344 = _3323 + _3288;
                        float _3345 = _3324 + _3289;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3353 = dot(vec3(_980, _983, _986), vec3(_3322, _3323, _3324));
                        float _4693 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3357 = dot(vec3(_980, _983, _986), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                        float _4704 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3360 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                        float _3365 = _3300 * _3341;
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3290) + _3366;
                        float _4715 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3371 = 1.0 - _3341;
                        float _3381 = (0.5 / (((_3370 * ((_3356 * _3371) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3341) * _3356))) * _3370;
                        float _4726 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3392 = (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3364 * _3364) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125))) * _3296;
                        _3144 = (_3311 * _3259.x) + _3217;
                        _3145 = (_3311 * _3259.y) + _3218;
                        _3146 = (_3311 * _3259.z) + _3219;
                        _3141 = (_3392 * _3276.x) + _3214;
                        _3142 = (_3392 * _3276.y) + _3215;
                        _3143 = (_3392 * _3276.z) + _3216;
                        if (_3221 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3221;
                        }
                    }
                    frontier_phi_68_pred = _3143;
                    frontier_phi_68_pred_1 = _3146;
                    frontier_phi_68_pred_2 = _3145;
                    frontier_phi_68_pred_3 = _3144;
                    frontier_phi_68_pred_4 = _3142;
                    frontier_phi_68_pred_5 = _3141;
                }
                _2922 = frontier_phi_68_pred;
                _2928 = frontier_phi_68_pred_1;
                _2926 = frontier_phi_68_pred_2;
                _2924 = frontier_phi_68_pred_3;
                _2920 = frontier_phi_68_pred_4;
                _2918 = frontier_phi_68_pred_5;
                uint _3076 = _3075 + 1u;
                if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3069 = _2918;
                    _3070 = _2920;
                    _3071 = _2922;
                    _3072 = _2924;
                    _3073 = _2926;
                    _3074 = _2928;
                    _3075 = _3076;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
        }
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.z;
        uint _2934 = (_2932 >> 8u) & 15u;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((4294967295u << _2934) & _2817) == 0u)
        {
            _3037 = _2917;
            _3039 = _2919;
            _3041 = _2921;
            _3043 = _2923;
            _3045 = _2925;
            _3047 = _2927;
        }
        else
        {
            float _3062 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
            float _3063 = _3062 * _2771;
            float _3064 = _3062 * _2772;
            float _3065 = _3062 * _2773;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2934 < ((_2932 >> 12u) & 15u))
            {
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3197 = _2917;
                float _3198 = _2919;
                float _3199 = _2921;
                float _3200 = _2923;
                float _3201 = _2925;
                float _3202 = _2927;
                uint _3203 = _2934;
                uint _3212;
                bool _3213;
                for (;;)
                {
                    _3212 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                    _3213 = _3212 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3213)
                    {
                        frontier_phi_79_pred = _3202;
                        frontier_phi_79_pred_1 = _3201;
                        frontier_phi_79_pred_2 = _3200;
                        frontier_phi_79_pred_3 = _3199;
                        frontier_phi_79_pred_4 = _3198;
                        frontier_phi_79_pred_5 = _3197;
                    }
                    else
                    {
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        uint _3425 = _3212;
                        uint _3426;
                        vec4 _3451;
                        float _3452;
                        vec4 _3467;
                        vec3 _3479;
                        vec4 _3494;
                        vec4 _3509;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3436 = ((_3203 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3425));
                            _3426 = (_3425 + 4294967295u) & _3425;
                            uint _3438 = _3436 * 40u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3452 = _3451.w;
                            uint _3454 = (_3436 * 40u) + 4u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3436 * 40u) + 8u;
                            _3479 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x));
                            uint _3481 = (_3436 * 40u) + 16u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3436 * 40u) + 20u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3512 = (_3436 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3436 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_2773, _3544.z, fma(_2772, _3544.y, _3544.x * _2771)) + _3544.w;
                            _3557 = !((fma(_2773, _3525.z, fma(_2772, _3525.y, _3525.x * _2771)) + _3525.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3451.x - _2771;
                                float _3585 = _3451.y - _2772;
                                float _3586 = _3451.z - _2773;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3452 * _3452));
                                float _4737 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3602 = sqrt(_3587) * _3467.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_980, _983, _986))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_2773, _3494.z, fma(_2772, _3494.y, _3494.x * _2771)) + _3494.w) / _3556;
                                float _3616 = (fma(_2773, _3509.z, fma(_2772, _3509.y, _3509.x * _2771)) + _3509.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4753 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _1055;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3063;
                                float _3646 = _3592 - _3064;
                                float _3647 = _3593 - _3065;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_980, _983, _986), vec3((-0.0) - _3063, (-0.0) - _3064, (-0.0) - _3065));
                                float _4764 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3659 = dot(vec3(_980, _983, _986), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4775 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_980, _983, _986), vec3(_3591, _3592, _3593))) + _3668;
                                float _4786 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4797 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3622 * _3467.z;
                                frontier_phi_85_pred_1 = _3622 * _3467.y;
                                frontier_phi_85_pred_2 = _3622 * _3467.x;
                                frontier_phi_85_pred_3 = _3696 * _3479.z;
                                frontier_phi_85_pred_4 = _3696 * _3479.y;
                                frontier_phi_85_pred_5 = _3696 * _3479.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3705 = frontier_phi_85_pred;
                            _3704 = frontier_phi_85_pred_1;
                            _3703 = frontier_phi_85_pred_2;
                            _3702 = frontier_phi_85_pred_3;
                            _3701 = frontier_phi_85_pred_4;
                            _3700 = frontier_phi_85_pred_5;
                            _3409 = _3703 + _3422;
                            _3410 = _3704 + _3423;
                            _3411 = _3705 + _3424;
                            _3406 = _3700 + _3419;
                            _3407 = _3701 + _3420;
                            _3408 = _3702 + _3421;
                            if (_3426 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3426;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3411;
                        frontier_phi_79_pred_1 = _3410;
                        frontier_phi_79_pred_2 = _3409;
                        frontier_phi_79_pred_3 = _3408;
                        frontier_phi_79_pred_4 = _3407;
                        frontier_phi_79_pred_5 = _3406;
                    }
                    _3048 = frontier_phi_79_pred;
                    _3046 = frontier_phi_79_pred_1;
                    _3044 = frontier_phi_79_pred_2;
                    _3042 = frontier_phi_79_pred_3;
                    _3040 = frontier_phi_79_pred_4;
                    _3038 = frontier_phi_79_pred_5;
                    uint _3204 = _3203 + 1u;
                    if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3197 = _3038;
                        _3198 = _3040;
                        _3199 = _3042;
                        _3200 = _3044;
                        _3201 = _3046;
                        _3202 = _3048;
                        _3203 = _3204;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3044;
                frontier_phi_60_61_ladder_1 = _3048;
                frontier_phi_60_61_ladder_2 = _3046;
                frontier_phi_60_61_ladder_3 = _3042;
                frontier_phi_60_61_ladder_4 = _3040;
                frontier_phi_60_61_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_60_61_ladder = _2923;
                frontier_phi_60_61_ladder_1 = _2927;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2921;
                frontier_phi_60_61_ladder_4 = _2919;
                frontier_phi_60_61_ladder_5 = _2917;
            }
            _3037 = frontier_phi_60_61_ladder_5;
            _3039 = frontier_phi_60_61_ladder_4;
            _3041 = frontier_phi_60_61_ladder_3;
            _3043 = frontier_phi_60_61_ladder;
            _3045 = frontier_phi_60_61_ladder_2;
            _3047 = frontier_phi_60_61_ladder_1;
        }
        float _3052 = isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0));
        _2829 = (_3052 * _3043) + _2263;
        _2831 = (_3052 * _3045) + _2265;
        _2833 = (_3052 * _3047) + _2267;
        _2835 = ((_3037 * _1024) * _3052) + _2611;
        _2837 = ((_3039 * _1026) * _3052) + _2613;
        _2839 = ((_3041 * _1027) * _3052) + _2615;
    }
    else
    {
        _2829 = _2263;
        _2831 = _2265;
        _2833 = _2267;
        _2835 = _2611;
        _2837 = _2613;
        _2839 = _2615;
    }
    float _4813 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4824 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _4835 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2856 = ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2829 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1039))) + ((_2835 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1881)) * cbPerFrame._m0[3u].x);
    float _2857 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2831 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1039))) + ((_2837 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1881)) * cbPerFrame._m0[3u].x);
    float _2858 = ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2833 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1039))) + ((_2839 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1881)) * cbPerFrame._m0[3u].x);
    uint _2859 = _999 + 6u;
    float _2867 = _961 / cbSceneParam._m0[86u].x;
    float _2868 = _962 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2942 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2943 = _2942 / _884;
        float _2954 = _2943 * _934;
        float _2955 = _935 * _2943;
        float _2956 = (-0.0) - _2955;
        float _2957 = _2943 * _936;
        float _2959 = (cbSceneParam._m0[77u].w * _2956) / _2942;
        float _2960 = _2959 + cbSceneParam._m0[79u].w;
        float _2961 = cbSceneParam._m0[79u].w - _2955;
        float _2967 = sqrt(((_2954 * _2954) + (_2955 * _2955)) + (_2957 * _2957));
        float _2970 = (1.0 - (cbSceneParam._m0[77u].w / _2942)) * _2967;
        float _2975 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2977 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3154;
        if (abs((_2956 - _2959) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3154 = ((((_2960 > 0.0) ? exp2(_2975 * _2960) : (2.0 - exp2(_2977 * _2960))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2970;
        }
        else
        {
            float _3098 = 1.0 / cbSceneParam._m0[80u].x;
            float _3099 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : max(_2960, _2961));
            float _3100 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : min(_2960, _2961));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            _3154 = ((abs(_2967 / _2956) * cbSceneParam._m0[80u].y) * ((((_3109 - _3110) * 2.0) - ((exp2(_2975 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)))) - exp2(_2975 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))))) * _3098)) - ((exp2(_2977 * _3109) - exp2(_2977 * _3110)) * _3098))) + (_2970 * cbSceneParam._m0[80u].z);
        }
        vec4 _3156 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3165 = exp2((_3154 * (-1.44269502162933349609375)) * (1.0 - _3156.w));
        float _3166 = log2(_3165);
        float _3182 = log2(_2887);
        _2979 = (exp2(_3182 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].x)) * _3156.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2981 = (exp2(_3182 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].y)) * _3156.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2983 = (exp2(_3182 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].z)) * _3156.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2985 = _3165 * _2887;
    }
    else
    {
        _2979 = _2884;
        _2981 = _2885;
        _2983 = _2886;
        _2985 = _2887;
    }
    bool _3192;
    vec4 _2995;
    vec4 _3017;
    float _3019;
    float _3023;
    float _3024;
    float _3025;
    float _3026;
    bool _3036;
    for (;;)
    {
        _2995 = cbMatDynParam._m0[0u];
        float _2997 = roundEven(_2995.y);
        bool _2998 = _2997 == 3.0;
        float _2999 = log2(_2985);
        float _3006 = exp2(_2999 * cbSceneParam._m0[78u].x) * _2856;
        float _3007 = exp2(_2999 * cbSceneParam._m0[78u].y) * _2857;
        float _3008 = exp2(_2999 * cbSceneParam._m0[78u].z) * _2858;
        float _3015 = _950 + (-0.5);
        _3017 = cbMtdParam._m0[1u];
        _3019 = _3017.y * _3015;
        float _3022 = (_2997 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3023 = _3022 * (_2998 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2979)));
        _3024 = _3022 * (_2998 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2981)));
        _3025 = _3022 * (_2998 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2983)));
        _3026 = _3015 * 0.999000012874603271484375;
        _3036 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3036)
        {
            if ((cbInstanceData._m0[_999 + 7u].x + _3026) < 0.5)
            {
                _3192 = true;
                break;
            }
        }
        uint _3133 = _1000 + uint(_2995.w);
        if ((cbInstanceData._m0[_3133].w < 1.0) && ((cbInstanceData._m0[_3133].w + _3026) < 0.5))
        {
            _3192 = true;
            break;
        }
        if ((_3019 + 1.0) < _3017.x)
        {
            _3192 = true;
            break;
        }
        _3192 = false;
        break;
    }
    float _3397;
    if (_3192)
    {
        discard_state = true;
        _3397 = 0.0;
    }
    else
    {
        _3397 = cbInstanceData._m0[_2859].w;
    }
    SV_Target.x = _3023;
    SV_Target.y = _3024;
    SV_Target.z = _3025;
    SV_Target.w = _3397;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
    discard_exit();
}


