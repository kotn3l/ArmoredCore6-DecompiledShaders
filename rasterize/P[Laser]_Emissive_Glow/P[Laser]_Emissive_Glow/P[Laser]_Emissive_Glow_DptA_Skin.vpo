#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1_1;
layout(location = 5) out float TEXCOORD_4;
layout(location = 5, component = 1) out vec2 TEXCOORD_6;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1_1.x = 0.0;
    TEXCOORD_1_1.y = 0.0;
    TEXCOORD_1_1.z = 0.0;
    TEXCOORD_1_1.w = 0.0;
    TEXCOORD_4 = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _174 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _177 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _198 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _200 = texelFetch(g_InstanceIndexBuffer, int(_198));
    uint _201 = _200.x;
    precise float _202 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _207 = isnan(_202) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _202 : max(0.001000000047497451305389404296875, _202));
    precise float _209 = BLENDWEIGHT.x / _207;
    precise float _210 = BLENDWEIGHT.y / _207;
    precise float _211 = BLENDWEIGHT.z / _207;
    precise float _212 = BLENDWEIGHT.w / _207;
    uint _214 = _201 * 13u;
    uvec4 _219 = floatBitsToUint(cbInstanceData._m0[_214 + 4u]);
    uint _220 = _219.x;
    uint _222 = (_220 + uint(float(BLENDINDICES.x))) * 3u;
    uint _229 = _222 + 1u;
    uint _236 = _222 + 2u;
    precise float _243 = _209 * cbObjMatrix._m0[_222].x;
    precise float _244 = _209 * cbObjMatrix._m0[_229].x;
    precise float _245 = _209 * cbObjMatrix._m0[_236].x;
    precise float _246 = _209 * cbObjMatrix._m0[_222].y;
    precise float _247 = _209 * cbObjMatrix._m0[_229].y;
    precise float _248 = _209 * cbObjMatrix._m0[_236].y;
    precise float _249 = _209 * cbObjMatrix._m0[_222].z;
    precise float _250 = _209 * cbObjMatrix._m0[_229].z;
    precise float _251 = _209 * cbObjMatrix._m0[_236].z;
    precise float _252 = _209 * cbObjMatrix._m0[_222].w;
    precise float _253 = _209 * cbObjMatrix._m0[_229].w;
    precise float _254 = _209 * cbObjMatrix._m0[_236].w;
    uint _257 = (_220 + uint(float(BLENDINDICES.y))) * 3u;
    uint _264 = _257 + 1u;
    uint _271 = _257 + 2u;
    precise float _278 = _210 * cbObjMatrix._m0[_257].x;
    precise float _279 = _210 * cbObjMatrix._m0[_264].x;
    precise float _280 = _210 * cbObjMatrix._m0[_271].x;
    precise float _281 = _210 * cbObjMatrix._m0[_257].y;
    precise float _282 = _210 * cbObjMatrix._m0[_264].y;
    precise float _283 = _210 * cbObjMatrix._m0[_271].y;
    precise float _284 = _210 * cbObjMatrix._m0[_257].z;
    precise float _285 = _210 * cbObjMatrix._m0[_264].z;
    precise float _286 = _210 * cbObjMatrix._m0[_271].z;
    precise float _287 = _210 * cbObjMatrix._m0[_257].w;
    precise float _288 = _210 * cbObjMatrix._m0[_264].w;
    precise float _289 = _210 * cbObjMatrix._m0[_271].w;
    precise float _290 = _243 + _278;
    precise float _291 = _244 + _279;
    precise float _292 = _245 + _280;
    precise float _293 = _246 + _281;
    precise float _294 = _247 + _282;
    precise float _295 = _248 + _283;
    precise float _296 = _249 + _284;
    precise float _297 = _250 + _285;
    precise float _298 = _251 + _286;
    precise float _299 = _252 + _287;
    precise float _300 = _253 + _288;
    precise float _301 = _254 + _289;
    uint _304 = (_220 + uint(float(BLENDINDICES.z))) * 3u;
    uint _311 = _304 + 1u;
    uint _318 = _304 + 2u;
    precise float _325 = _211 * cbObjMatrix._m0[_304].x;
    precise float _326 = _211 * cbObjMatrix._m0[_311].x;
    precise float _327 = _211 * cbObjMatrix._m0[_318].x;
    precise float _328 = _211 * cbObjMatrix._m0[_304].y;
    precise float _329 = _211 * cbObjMatrix._m0[_311].y;
    precise float _330 = _211 * cbObjMatrix._m0[_318].y;
    precise float _331 = _211 * cbObjMatrix._m0[_304].z;
    precise float _332 = _211 * cbObjMatrix._m0[_311].z;
    precise float _333 = _211 * cbObjMatrix._m0[_318].z;
    precise float _334 = _211 * cbObjMatrix._m0[_304].w;
    precise float _335 = _211 * cbObjMatrix._m0[_311].w;
    precise float _336 = _211 * cbObjMatrix._m0[_318].w;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    precise float _347 = _300 + _335;
    precise float _348 = _301 + _336;
    uint _351 = (_220 + uint(float(BLENDINDICES.w))) * 3u;
    uint _358 = _351 + 1u;
    uint _365 = _351 + 2u;
    precise float _372 = _212 * cbObjMatrix._m0[_351].x;
    precise float _373 = _212 * cbObjMatrix._m0[_358].x;
    precise float _374 = _212 * cbObjMatrix._m0[_365].x;
    precise float _375 = _212 * cbObjMatrix._m0[_351].y;
    precise float _376 = _212 * cbObjMatrix._m0[_358].y;
    precise float _377 = _212 * cbObjMatrix._m0[_365].y;
    precise float _378 = _212 * cbObjMatrix._m0[_351].z;
    precise float _379 = _212 * cbObjMatrix._m0[_358].z;
    precise float _380 = _212 * cbObjMatrix._m0[_365].z;
    precise float _381 = _212 * cbObjMatrix._m0[_351].w;
    precise float _382 = _212 * cbObjMatrix._m0[_358].w;
    precise float _383 = _212 * cbObjMatrix._m0[_365].w;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = _347 + _382;
    precise float _395 = _348 + _383;
    precise float _396 = POSITION.x * _384;
    precise float _397 = POSITION.y * _387;
    precise float _398 = _397 + _396;
    precise float _399 = POSITION.z * _390;
    precise float _400 = _399 + _398;
    precise float _401 = 1.0 * _393;
    precise float _402 = _401 + _400;
    precise float _403 = POSITION.x * _385;
    precise float _404 = POSITION.y * _388;
    precise float _405 = _404 + _403;
    precise float _406 = POSITION.z * _391;
    precise float _407 = _406 + _405;
    precise float _408 = 1.0 * _394;
    precise float _409 = _408 + _407;
    precise float _410 = POSITION.x * _386;
    precise float _411 = POSITION.y * _389;
    precise float _412 = _411 + _410;
    precise float _413 = POSITION.z * _392;
    precise float _414 = _413 + _412;
    precise float _415 = 1.0 * _395;
    precise float _416 = _415 + _414;
    precise float _441 = _402 - cbSceneParam._m0[3u].x;
    precise float _442 = _409 - cbSceneParam._m0[3u].y;
    precise float _443 = _416 - cbSceneParam._m0[3u].z;
    precise float _471 = _441 * cbSceneParam._m0[24u].x;
    precise float _472 = _442 * cbSceneParam._m0[24u].y;
    precise float _473 = _472 + _471;
    precise float _474 = _443 * cbSceneParam._m0[24u].z;
    precise float _475 = _474 + _473;
    precise float _476 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _477 = _476 + _475;
    precise float _478 = _441 * cbSceneParam._m0[25u].x;
    precise float _479 = _442 * cbSceneParam._m0[25u].y;
    precise float _480 = _479 + _478;
    precise float _481 = _443 * cbSceneParam._m0[25u].z;
    precise float _482 = _481 + _480;
    precise float _483 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _484 = _483 + _482;
    precise float _485 = _441 * cbSceneParam._m0[26u].x;
    precise float _486 = _442 * cbSceneParam._m0[26u].y;
    precise float _487 = _486 + _485;
    precise float _488 = _443 * cbSceneParam._m0[26u].z;
    precise float _489 = _488 + _487;
    precise float _490 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _491 = _490 + _489;
    precise float _492 = _441 * cbSceneParam._m0[27u].x;
    precise float _493 = _442 * cbSceneParam._m0[27u].y;
    precise float _494 = _493 + _492;
    precise float _495 = _443 * cbSceneParam._m0[27u].z;
    precise float _496 = _495 + _494;
    precise float _497 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _498 = _497 + _496;
    gl_Position.x = _477;
    gl_Position.y = _484;
    gl_Position.z = _491;
    gl_Position.w = _498;
    POSITION_1.x = _477;
    POSITION_1.y = _484;
    POSITION_1.z = _491;
    POSITION_1.w = _498;
    NORMAL_1.x = fma(_177, _390, fma(_176, _387, _384 * _174));
    NORMAL_1.y = fma(_177, _391, fma(_176, _388, _385 * _174));
    NORMAL_1.z = fma(_177, _392, fma(_176, _389, _386 * _174));
    NORMAL_1.w = float(_201);
    TANGENT_1.x = fma(_188, _390, fma(_187, _387, _384 * _186));
    TANGENT_1.y = fma(_188, _391, fma(_187, _388, _385 * _186));
    TANGENT_1.z = fma(_188, _392, fma(_187, _389, _386 * _186));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1_1.z = COLOR_1.w;
    TEXCOORD_1_1.w = COLOR_1.x;
    TEXCOORD_4 = TEXCOORD_1.x;
    TEXCOORD_6.x = _491;
    TEXCOORD_6.y = _498;
    gl_ClipDistance[0u] = dot(vec4(_477, _484, _491, _498), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_477, _484, _491, _498), vec4(cbInstanceData._m0[_214 + 3u]));
}


