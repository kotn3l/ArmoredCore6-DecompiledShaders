#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1256;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _264 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _267 = _264.x;
    float _268 = _264.y;
    float _269 = _264.z;
    float _284 = (POSITION_1.w - cbMtdParam._m0[14u].z) * (1.0 / cbMtdParam._m0[13u].y);
    float _3916 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    vec4 _297 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _299 = _297.x;
    float _300 = _297.y;
    float _301 = _297.z;
    float _308 = (((_267 * cbMtdParam._m0[12u].x) - _299) * _285) + _299;
    float _309 = (((_268 * cbMtdParam._m0[12u].y) - _300) * _285) + _300;
    float _310 = (((_269 * cbMtdParam._m0[12u].z) - _301) * _285) + _301;
    vec4 _332 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _334 = _332.x;
    float _335 = _332.y;
    float _336 = _332.z;
    vec4 _354 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _381 = cbMtdParam._m0[14u].y * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _389 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _354.x) * 2.0) - _381)) + 1.0;
    float _3927 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _400 = (_390 * ((_334 - _308) + (((cbMtdParam._m0[10u].x * _267) - _334) * _285))) + _308;
    float _401 = (_390 * ((_335 - _309) + (((cbMtdParam._m0[10u].y * _268) - _335) * _285))) + _309;
    float _402 = (_390 * ((_336 - _310) + (((cbMtdParam._m0[10u].z * _269) - _336) * _285))) + _310;
    vec4 _424 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _440 = ((((((1.0 - TEXCOORD_3.y) - _354.y) * 2.0) - _381) * (-1.39999997615814208984375)) * cbMtdParam._m0[13u].w) + 1.0;
    float _3938 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _451 = (((_426 - _400) + (((cbMtdParam._m0[9u].x * _267) - _426) * _285)) * _441) + _400;
    float _452 = (((_427 - _401) + (((cbMtdParam._m0[9u].y * _268) - _427) * _285)) * _441) + _401;
    float _453 = (_441 * ((_428 - _402) + (((cbMtdParam._m0[9u].z * _269) - _428) * _285))) + _402;
    vec4 _473 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _489 = ((((((1.0 - TEXCOORD_3.z) - _354.z) * 2.0) - _381) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3949 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _500 = (((_475 - _451) + (((cbMtdParam._m0[11u].x * _267) - _475) * _285)) * _490) + _451;
    float _501 = (((_476 - _452) + (((cbMtdParam._m0[11u].y * _268) - _476) * _285)) * _490) + _452;
    float _502 = (_490 * ((_477 - _453) + (((cbMtdParam._m0[11u].z * _269) - _477) * _285))) + _453;
    vec4 _516 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    vec4 _532 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    vec4 _558 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    vec4 _583 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _585 = _583.x;
    float _586 = _583.y;
    float _587 = _583.z;
    vec4 _609 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _613 = _609.z;
    float _620 = ((_534 - _611) * _285) + _611;
    float _621 = ((_535 - _612) * _285) + _612;
    float _622 = ((_536 - _613) * _285) + _613;
    float _629 = (((((_534 - _585) * _285) + _585) - _620) * _390) + _620;
    float _630 = (((((_535 - _586) * _285) + _586) - _621) * _390) + _621;
    float _631 = (((((_536 - _587) * _285) + _587) - _622) * _390) + _622;
    float _638 = (((((_534 - _560) * _285) + _560) - _629) * _441) + _629;
    float _639 = (((((_535 - _561) * _285) + _561) - _630) * _441) + _630;
    float _640 = (((((_536 - _562) * _285) + _562) - _631) * _441) + _631;
    float _651 = (((((((_534 - _518) * _285) + _518) - _638) * _490) + _638) * 2.0) + (-1.0);
    float _653 = (((((((_535 - _519) * _285) + _519) - _639) * _490) + _639) * 2.0) + (-1.0);
    float _654 = dot(vec2(_651, _653), vec2(_651, _653));
    float _3960 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    float _661 = (_640 + cbMtdParam._m0[13u].z) + (((((_536 - _520) * _285) + _520) - _640) * _490);
    float _677 = (((_651 * cbMtdParam._m0[14u].w) - _651) * _285) + _651;
    float _678 = (((_653 * cbMtdParam._m0[15u].x) - _653) * _285) + _653;
    float _679 = (((cbMtdParam._m0[15u].y * _659) - _659) * _285) + _659;
    float _682 = fma(_679, _242, fma(_678, _234 * TANGENT.x, (_220 * _212) * _677));
    float _685 = fma(_679, _243, fma(_678, _234 * TANGENT.y, (_220 * _213) * _677));
    float _688 = fma(_679, _244, fma(_678, _234 * TANGENT.z, (_220 * _214) * _677));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3971 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _696 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3993 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4004 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    vec4 _779 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _781 = _779.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _935 = sqrt(((_765 * _765) + (_766 * _766)) + (_767 * _767));
        float _941 = (cbMatDynParam._m0[5u].x * _935) + cbMatDynParam._m0[5u].y;
        float _4015 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _946 = (cbMatDynParam._m0[5u].z * _935) + cbMatDynParam._m0[5u].w;
        float _4026 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) - _942)) + _942) < ((_781 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_695, cbSceneParam._m0[5u].z, fma(_694, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _693));
    float _814 = fma(_695, cbSceneParam._m0[6u].z, fma(_694, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _693));
    float _817 = fma(_695, cbSceneParam._m0[7u].z, fma(_694, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _693));
    uint _830 = uint(roundEven(NORMAL.w)) * 13u;
    uint _831 = _830 + 9u;
    uint _832 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_832].z;
    float _4037 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _855 = _852.x * TEXCOORD_3.w;
    float _856 = dot(vec3(_693, _694, _695), vec3(_772, _773, _774));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _693) - _772;
    float _864 = (_859 * _694) - _773;
    float _865 = (_859 * _695) - _774;
    float _869 = abs(dot(vec3(_772, _773, _774), vec3(_693, _694, _695)));
    float _4070 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_696);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _984 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _988 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _1013 = _916 + _693;
        float _1014 = _920 + _694;
        float _1015 = _924 + _695;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_693, _694, _695), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4118 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_693, _694, _695), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4151 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_693, _694, _695), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4184 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1303 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1307 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1330 = _916 + _693;
        float _1331 = _920 + _694;
        float _1332 = _924 + _695;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_693, _694, _695), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4247 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_693, _694, _695), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4280 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_693, _694, _695), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4313 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = _1256;
        _1578 = _1256;
        _1579 = _1256;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1268)) + _1268;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1269)) + _1269;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _863 * 0.5;
    float _1637 = _864 * 0.5;
    float _1638 = _865 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1766 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1769 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1797 = frontier_phi_19_17_ladder;
        }
        float _1970;
        if (_1766 > 0.0)
        {
            _1970 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1970 = frontier_phi_28_24_ladder;
        }
        float _2265;
        if (_1769 > 0.0)
        {
            _2265 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2265 = frontier_phi_40_35_ladder;
        }
        float _2267 = isnan(_1970) ? _1797 : (isnan(_1797) ? _1970 : min(_1797, _1970));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1763) + _1752;
        float _2273 = (_2268 * _1766) + _1756;
        float _2274 = (_2268 * _1769) + _1760;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2275;
        float _2279 = _2275 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 > _2279) || ((_2273 < _2277) || ((_2272 < _2277) || (_2272 > _2279))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2274, cbModelParam._m0[9u].z, fma(_2273, cbModelParam._m0[9u].y, _2272 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2274, cbModelParam._m0[10u].z, fma(_2273, cbModelParam._m0[10u].y, _2272 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2274, cbModelParam._m0[11u].z, fma(_2273, cbModelParam._m0[11u].y, _2272 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_18_40_ladder = _2419.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2419.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2419.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_18_40_ladder_2;
        _1787 = frontier_phi_18_40_ladder_1;
        _1789 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1851 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1855 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1859 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1862 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1865 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1868 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1975;
        if (_1862 > 0.0)
        {
            _1975 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1975 = frontier_phi_30_26_ladder;
        }
        float _2292;
        if (_1865 > 0.0)
        {
            _2292 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2292 = frontier_phi_42_37_ladder;
        }
        float _2619;
        if (_1868 > 0.0)
        {
            _2619 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2619 = frontier_phi_52_49_ladder;
        }
        float _2621 = isnan(_2292) ? _1975 : (isnan(_1975) ? _2292 : min(_1975, _2292));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1862) + _1851;
        float _2627 = (_2622 * _1865) + _1855;
        float _2628 = (_2622 * _1868) + _1859;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_27_52_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1887 = frontier_phi_27_52_ladder_2;
        _1889 = frontier_phi_27_52_ladder_1;
        _1891 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1794);
        _1887 = _1871.x * cbModelParam._m0[1u].z;
        _1889 = _1871.y * cbModelParam._m0[1u].z;
        _1891 = _1871.z * cbModelParam._m0[1u].z;
    }
    float _1903 = ((((1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_884 * _871)) * _855;
    float _1904 = _1903 * ((cbModelParam._m0[1u].w * (_1887 - _1785)) + _1785);
    float _1905 = _1903 * ((cbModelParam._m0[1u].w * (_1889 - _1787)) + _1787);
    float _1906 = _1903 * ((cbModelParam._m0[1u].w * (_1891 - _1789)) + _1789);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1904 * cbSceneParam._m0[91u].x));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1962 = _1949 / _1961;
    float _1963 = _1953 / _1961;
    float _1964 = _1957 / _1961;
    float _2111;
    float _2112;
    float _2113;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1991 = ((uint(_1964 > cbSceneParam._m0[59u].y) + uint(_1964 > cbSceneParam._m0[59u].x)) + uint(_1964 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1992 = _1991 + 43u;
        uint _2000 = _1991 + 44u;
        uint _2008 = _1991 + 45u;
        uint _2016 = _1991 + 46u;
        float _2027 = fma(_1961, cbSceneParam._m0[_1992].w, fma(_1957, cbSceneParam._m0[_1992].z, fma(_1953, cbSceneParam._m0[_1992].y, _1949 * cbSceneParam._m0[_1992].x)));
        float _2031 = fma(_1961, cbSceneParam._m0[_2000].w, fma(_1957, cbSceneParam._m0[_2000].z, fma(_1953, cbSceneParam._m0[_2000].y, _1949 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1961, cbSceneParam._m0[_2016].w, fma(_1957, cbSceneParam._m0[_2016].z, fma(_1953, cbSceneParam._m0[_2016].y, _1949 * cbSceneParam._m0[_2016].x)));
        float _2044 = cbSceneParam._m0[33u].z * _2039;
        float _2046 = cbSceneParam._m0[33u].w * _2039;
        float _2049 = fma(_1961, cbSceneParam._m0[_2008].w, fma(_1957, cbSceneParam._m0[_2008].z, fma(_1953, cbSceneParam._m0[_2008].y, _1949 * cbSceneParam._m0[_2008].x))) / _2039;
        float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
        float _4439 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2104 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 + _2027) / _2039, (_2046 + _2031) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 + _2027) / _2039, (_2031 - _2044) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2044) / _2039, (_2031 - _2046) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2046) / _2039, (_2044 + _2031) / _2039), _2049), 0.0)).x), vec4(0.25)));
        _2111 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
        _2112 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
        _2113 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2111 = 1.0;
        _2112 = 1.0;
        _2113 = 1.0;
    }
    float _2177;
    float _2179;
    float _2181;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2165 = fma(_1961, cbSceneParam._m0[63u].w, fma(_1957, cbSceneParam._m0[63u].z, fma(_1953, cbSceneParam._m0[63u].y, _1949 * cbSceneParam._m0[63u].x)));
        float _2166 = fma(_1961, cbSceneParam._m0[60u].w, fma(_1957, cbSceneParam._m0[60u].z, fma(_1953, cbSceneParam._m0[60u].y, _1949 * cbSceneParam._m0[60u].x))) / _2165;
        float _2167 = fma(_1961, cbSceneParam._m0[61u].w, fma(_1957, cbSceneParam._m0[61u].z, fma(_1953, cbSceneParam._m0[61u].y, _1949 * cbSceneParam._m0[61u].x))) / _2165;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2166 >= cbSceneParam._m0[64u].x) && (_2167 >= cbSceneParam._m0[64u].y)) && (_2166 <= cbSceneParam._m0[64u].z)) && (_2167 <= cbSceneParam._m0[64u].w))
        {
            float _2305 = fma(_1961, cbSceneParam._m0[62u].w, fma(_1957, cbSceneParam._m0[62u].z, fma(_1953, cbSceneParam._m0[62u].y, _1949 * cbSceneParam._m0[62u].x))) / _2165;
            float _2309 = isnan(cbSceneParam._m0[41u].w) ? _2305 : (isnan(_2305) ? cbSceneParam._m0[41u].w : max(_2305, cbSceneParam._m0[41u].w));
            float _2352 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
            float _4455 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
            float _2359 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2166, cbSceneParam._m0[33u].w + _2167), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2166, _2167 - cbSceneParam._m0[33u].z), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].z, _2167 - cbSceneParam._m0[33u].w), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2167), _2309), 0.0)).x), vec4(0.25)));
            float _2363 = 1.0 - (_2359 * cbSceneParam._m0[34u].x);
            float _2364 = 1.0 - (_2359 * cbSceneParam._m0[34u].y);
            float _2365 = 1.0 - (_2359 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
            frontier_phi_39_38_ladder_1 = isnan(_2363) ? _2111 : (isnan(_2111) ? _2363 : min(_2111, _2363));
            frontier_phi_39_38_ladder_2 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
        }
        else
        {
            frontier_phi_39_38_ladder = _2112;
            frontier_phi_39_38_ladder_1 = _2111;
            frontier_phi_39_38_ladder_2 = _2113;
        }
        _2177 = frontier_phi_39_38_ladder_1;
        _2179 = frontier_phi_39_38_ladder;
        _2181 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2177 = _2111;
        _2179 = _2112;
        _2181 = _2113;
    }
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_830 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2196 = _855 + (-1.0);
    float _2201 = (cbLight._m0[_2189].x * _2196) + 1.0;
    float _2202 = (cbLight._m0[_2189].y * _2196) + 1.0;
    float _2203 = (cbLight._m0[_2189].z * _2196) + 1.0;
    float _2204 = (cbLight._m0[_2189].w * _2196) + 1.0;
    uint _2205 = _2188 + 5u;
    float _2211 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2215 = _2188 + 4u;
    float _2224 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2228 = _2188 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_693, _694, _695));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_693, _694, _695));
    float _4491 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4502 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2205].x * _2211) * _2249) + (((cbLight._m0[_2215].x * _2177) * _2224) * _2247);
    float _2257 = ((_2211 * cbLight._m0[_2205].y) * _2249) + (((cbLight._m0[_2215].y * _2179) * _2224) * _2247);
    float _2258 = ((_2211 * cbLight._m0[_2205].z) * _2249) + (((cbLight._m0[_2215].z * _2181) * _2224) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2188 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2264)
    {
        _2366 = _2256;
        _2368 = _2257;
        _2370 = _2258;
    }
    else
    {
        uint _2374 = _2188 + 6u;
        float _2390 = (dot(vec3(cbLight._m0[_2188 + 2u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2391 = _2390 * _2390;
        float _4513 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2392 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2393 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2366 = (((cbLight._m0[_2374].x * 0.3183098733425140380859375) * _2392) * _2393) + _2256;
        _2368 = (((cbLight._m0[_2374].y * 0.3183098733425140380859375) * _2392) * _2393) + _2257;
        _2370 = (((cbLight._m0[_2374].z * 0.3183098733425140380859375) * _2392) * _2393) + _2258;
    }
    bool _2373 = _2262.y == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2373)
    {
        _2428 = _2366;
        _2430 = _2368;
        _2432 = _2370;
    }
    else
    {
        uint _2590 = _2188 + 7u;
        float _2606 = (dot(vec3(cbLight._m0[_2188 + 3u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2607 = _2606 * _2606;
        float _4529 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2608 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2609 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2428 = (((cbLight._m0[_2590].x * 0.3183098733425140380859375) * _2608) * _2609) + _2366;
        _2430 = (((cbLight._m0[_2590].y * 0.3183098733425140380859375) * _2608) * _2609) + _2368;
        _2432 = (((cbLight._m0[_2590].z * 0.3183098733425140380859375) * _2608) * _2609) + _2370;
    }
    uint _2435 = _2188 + 8u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _696) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2188].x + _772;
    float _2451 = cbLight._m0[_2188].y + _773;
    float _2452 = cbLight._m0[_2188].z + _774;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2188].xyz));
    float _4545 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2464 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2465 = dot(vec3(_693, _694, _695), vec3(_2457, _2458, _2459));
    float _4567 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2457, _2458, _2459));
    float _4578 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2449 * _2449;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2488 = (exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2489 = 1.0 - _2449;
    float _2500 = (0.5 / (((_2464 * ((_2463 * _2489) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2489) + _2449) * _2463))) * _2463;
    float _4589 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    uint _2516 = _2188 + 9u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _696) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2228].x + _772;
    float _2530 = cbLight._m0[_2228].y + _773;
    float _2531 = cbLight._m0[_2228].z + _774;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2228].xyz));
    float _4600 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2543 = dot(vec3(_693, _694, _695), vec3(_2536, _2537, _2538));
    float _4611 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2536, _2537, _2538));
    float _4622 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2528 * _2528;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2564 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2565 = 1.0 - _2528;
    float _2575 = (0.5 / (((_2464 * ((_2542 * _2565) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2565) + _2528) * _2542))) * _2542;
    float _4633 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2577 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    float _2587 = (((_2564 * cbLight._m0[_2516].x) * _2577) * _2211) + ((((cbLight._m0[_2435].x * _2177) * _2488) * _2502) * _2224);
    float _2588 = (((_2564 * cbLight._m0[_2516].y) * _2577) * _2211) + ((((cbLight._m0[_2435].y * _2179) * _2488) * _2502) * _2224);
    float _2589 = (((_2564 * cbLight._m0[_2516].z) * _2577) * _2211) + ((((cbLight._m0[_2435].z * _2181) * _2488) * _2502) * _2224);
    float _2645;
    float _2647;
    float _2649;
    if (_2264)
    {
        _2645 = _2587;
        _2647 = _2588;
        _2649 = _2589;
    }
    else
    {
        uint _2651 = _2188 + 2u;
        uint _2655 = _2188 + 10u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _696) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _772;
        float _2672 = cbLight._m0[_2651].y + _773;
        float _2673 = cbLight._m0[_2651].z + _774;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2651].xyz));
        float _4644 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2685 = dot(vec3(_693, _694, _695), vec3(_2678, _2679, _2680));
        float _4655 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4666 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2706 = (exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2707 = 1.0 - _2670;
        float _2717 = (0.5 / (((_2464 * ((_2684 * _2707) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2707) + _2670) * _2684))) * _2684;
        float _4677 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2645 = (((_2706 * cbLight._m0[_2655].x) * _2719) * _2720) + _2587;
        _2647 = (((_2706 * cbLight._m0[_2655].y) * _2719) * _2720) + _2588;
        _2649 = (((_2706 * cbLight._m0[_2655].z) * _2719) * _2720) + _2589;
    }
    float _2751;
    float _2753;
    float _2755;
    if (_2373)
    {
        _2751 = _2645;
        _2753 = _2647;
        _2755 = _2649;
    }
    else
    {
        uint _2762 = _2188 + 3u;
        uint _2766 = _2188 + 11u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _696) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _772;
        float _2783 = cbLight._m0[_2762].y + _773;
        float _2784 = cbLight._m0[_2762].z + _774;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2762].xyz));
        float _4693 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2796 = dot(vec3(_693, _694, _695), vec3(_2789, _2790, _2791));
        float _4704 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4715 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2817 = (exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2818 = 1.0 - _2781;
        float _2828 = (0.5 / (((_2464 * ((_2795 * _2818) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2818) + _2781) * _2795))) * _2795;
        float _4726 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2751 = (((_2817 * cbLight._m0[_2766].x) * _2830) * _2831) + _2645;
        _2753 = (((_2817 * cbLight._m0[_2766].y) * _2830) * _2831) + _2647;
        _2755 = (((_2817 * cbLight._m0[_2766].z) * _2830) * _2831) + _2649;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2186.y == 0u)
    {
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.x;
        uint _2864 = uint((float(_2852.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2853))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2853)));
        float _2874 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2875 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        uint _2878 = uint(isnan(14.0) ? _2875 : (isnan(_2875) ? 14.0 : min(_2875, 14.0)));
        uvec4 _2883 = texelFetch(g_lightClusterGridBuffer, int(((_2878 << 2u) + (_2864 << 6u)) >> 2u));
        uint _2884 = _2883.x;
        uint _2885 = _2852.z;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((((1u << ((_2885 >> 4u) & 15u)) + 4294967295u) & _2884) == 0u) || ((_2885 & 240u) == 0u))
        {
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
        }
        else
        {
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            uint _3121 = 0u;
            uint _3130;
            bool _3131;
            for (;;)
            {
                _3130 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                _3131 = _3130 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3131)
                {
                    frontier_phi_73_pred = _3120;
                    frontier_phi_73_pred_1 = _3119;
                    frontier_phi_73_pred_2 = _3118;
                    frontier_phi_73_pred_3 = _3117;
                    frontier_phi_73_pred_4 = _3116;
                    frontier_phi_73_pred_5 = _3115;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3130;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3121 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _1962;
                        float _3327 = _3286.y - _1963;
                        float _3328 = _3286.z - _1964;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_811, _814, _817), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4752 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3357 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3361 = (-0.0) - _1962;
                        float _3362 = (-0.0) - _1963;
                        float _3363 = (-0.0) - _1964;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3377 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3378 = 1.0 - _871;
                        float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                        float _3386 = _3385 * _3385;
                        float _3387 = _3386 * _3386;
                        float _3388 = _3368 + _3333;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3398 = dot(vec3(_811, _814, _817), vec3(_3368, _3369, _3370));
                        float _4768 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3402 = dot(vec3(_811, _814, _817), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                        float _4779 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                        float _3410 = _3346 * _3386;
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3336) + _3411;
                        float _4790 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3416 = 1.0 - _3386;
                        float _3426 = (0.5 / (((_3415 * ((_3401 * _3416) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3386) * _3401))) * _3415;
                        float _4801 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3437 = (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3409 * _3409) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3190 = (_3357 * _3305.x) + _3263;
                        _3191 = (_3357 * _3305.y) + _3264;
                        _3192 = (_3357 * _3305.z) + _3265;
                        _3187 = (_3437 * _3322.x) + _3260;
                        _3188 = (_3437 * _3322.y) + _3261;
                        _3189 = (_3437 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_73_pred = _3192;
                    frontier_phi_73_pred_1 = _3191;
                    frontier_phi_73_pred_2 = _3190;
                    frontier_phi_73_pred_3 = _3189;
                    frontier_phi_73_pred_4 = _3188;
                    frontier_phi_73_pred_5 = _3187;
                }
                _2974 = frontier_phi_73_pred;
                _2972 = frontier_phi_73_pred_1;
                _2970 = frontier_phi_73_pred_2;
                _2968 = frontier_phi_73_pred_3;
                _2966 = frontier_phi_73_pred_4;
                _2964 = frontier_phi_73_pred_5;
                uint _3122 = _3121 + 1u;
                if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3115 = _2964;
                    _3116 = _2966;
                    _3117 = _2968;
                    _3118 = _2970;
                    _3119 = _2972;
                    _3120 = _2974;
                    _3121 = _3122;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
        }
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.z;
        uint _2980 = (_2978 >> 8u) & 15u;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((4294967295u << _2980) & _2884) == 0u)
        {
            _3083 = _2963;
            _3085 = _2965;
            _3087 = _2967;
            _3089 = _2969;
            _3091 = _2971;
            _3093 = _2973;
        }
        else
        {
            float _3108 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float _3109 = _3108 * _1962;
            float _3110 = _3108 * _1963;
            float _3111 = _3108 * _1964;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2980 < ((_2978 >> 12u) & 15u))
            {
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3243 = _2963;
                float _3244 = _2965;
                float _3245 = _2967;
                float _3246 = _2969;
                float _3247 = _2971;
                float _3248 = _2973;
                uint _3249 = _2980;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3259)
                    {
                        frontier_phi_84_pred = _3247;
                        frontier_phi_84_pred_1 = _3246;
                        frontier_phi_84_pred_2 = _3245;
                        frontier_phi_84_pred_3 = _3244;
                        frontier_phi_84_pred_4 = _3243;
                        frontier_phi_84_pred_5 = _3248;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        uint _3470 = _3258;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3539;
                        vec4 _3555;
                        float _3602;
                        bool _3603;
                        for (;;)
                        {
                            uint _3481 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3526 = (_3481 * 40u) + 16u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3542 = (_3481 * 40u) + 20u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3558 = (_3481 * 40u) + 24u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3577 = (_3481 * 40u) + 28u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3602 = fma(_1964, _3590.z, fma(_1963, _3590.y, _3590.x * _1962)) + _3590.w;
                            _3603 = !((fma(_1964, _3571.z, fma(_1963, _3571.y, _3571.x * _1962)) + _3571.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3603)
                            {
                                float _3630 = _3496.x - _1962;
                                float _3631 = _3496.y - _1963;
                                float _3632 = _3496.z - _1964;
                                float _3633 = dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632));
                                float _3636 = inversesqrt(_3633);
                                float _3637 = _3636 * _3630;
                                float _3638 = _3636 * _3631;
                                float _3639 = _3636 * _3632;
                                float _3643 = 1.0 - (_3633 / (_3497 * _3497));
                                float _4812 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3648 = sqrt(_3633) * _3512.w;
                                float _3650 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                                float _3651 = _3650 * _3650;
                                float _3654 = ((1.0 - _3651) * dot(vec3(_3637, _3638, _3639), vec3(_811, _814, _817))) + _3651;
                                float _3657 = _3648 * _3648;
                                float _3661 = (fma(_1964, _3539.z, fma(_1963, _3539.y, _3539.x * _1962)) + _3539.w) / _3602;
                                float _3662 = (fma(_1964, _3555.z, fma(_1963, _3555.y, _3555.x * _1962)) + _3555.w) / _3602;
                                float _3666 = 1.0 - dot(vec2(_3661, _3662), vec2(_3661, _3662));
                                float _4828 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3668 = _3667 * (((isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0))) * _3644) / ((_3657 * 0.699999988079071044921875) + 1.0));
                                float _3680 = exp2(log2(1.0 / ((_3657 * 3.5) + 5.0)) * 0.25);
                                float _3681 = 1.0 - _871;
                                float _3688 = sqrt(1.0 - ((1.0 - (_3681 * _3681)) * (1.0 - (_3680 * _3680))));
                                float _3689 = _3688 * _3688;
                                float _3690 = _3689 * _3689;
                                float _3691 = _3637 - _3109;
                                float _3692 = _3638 - _3110;
                                float _3693 = _3639 - _3111;
                                float _3697 = inversesqrt(dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693)));
                                float _3701 = dot(vec3(_811, _814, _817), vec3((-0.0) - _3109, (-0.0) - _3110, (-0.0) - _3111));
                                float _4839 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3705 = dot(vec3(_811, _814, _817), vec3(_3697 * _3691, _3697 * _3692, _3697 * _3693));
                                float _4850 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3712 = ((_3708 * _3708) * (_3690 + (-1.0))) + 1.0;
                                float _3713 = _3650 * _3689;
                                float _3714 = _3713 * _3713;
                                float _3720 = ((1.0 - _3714) * dot(vec3(_811, _814, _817), vec3(_3637, _3638, _3639))) + _3714;
                                float _4861 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3722 = 1.0 - _3689;
                                float _3732 = (0.5 / (((_3721 * ((_3704 * _3722) + _3689)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3689) * _3704))) * _3721;
                                float _4872 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3742 = (_3667 * _3644) * (((_3690 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3712 * _3712) * ((_3657 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3668 * _3512.y;
                                frontier_phi_90_pred_1 = _3668 * _3512.x;
                                frontier_phi_90_pred_2 = _3742 * _3524.z;
                                frontier_phi_90_pred_3 = _3742 * _3524.y;
                                frontier_phi_90_pred_4 = _3742 * _3524.x;
                                frontier_phi_90_pred_5 = _3668 * _3512.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_90_pred;
                            _3749 = frontier_phi_90_pred_1;
                            _3748 = frontier_phi_90_pred_2;
                            _3747 = frontier_phi_90_pred_3;
                            _3746 = frontier_phi_90_pred_4;
                            _3751 = frontier_phi_90_pred_5;
                            _3454 = _3749 + _3467;
                            _3455 = _3750 + _3468;
                            _3456 = _3751 + _3469;
                            _3451 = _3746 + _3464;
                            _3452 = _3747 + _3465;
                            _3453 = _3748 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3455;
                        frontier_phi_84_pred_1 = _3454;
                        frontier_phi_84_pred_2 = _3453;
                        frontier_phi_84_pred_3 = _3452;
                        frontier_phi_84_pred_4 = _3451;
                        frontier_phi_84_pred_5 = _3456;
                    }
                    _3092 = frontier_phi_84_pred;
                    _3090 = frontier_phi_84_pred_1;
                    _3088 = frontier_phi_84_pred_2;
                    _3086 = frontier_phi_84_pred_3;
                    _3084 = frontier_phi_84_pred_4;
                    _3094 = frontier_phi_84_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3084;
                        _3244 = _3086;
                        _3245 = _3088;
                        _3246 = _3090;
                        _3247 = _3092;
                        _3248 = _3094;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3094;
                frontier_phi_65_66_ladder_1 = _3090;
                frontier_phi_65_66_ladder_2 = _3092;
                frontier_phi_65_66_ladder_3 = _3086;
                frontier_phi_65_66_ladder_4 = _3084;
                frontier_phi_65_66_ladder_5 = _3088;
            }
            else
            {
                frontier_phi_65_66_ladder = _2973;
                frontier_phi_65_66_ladder_1 = _2969;
                frontier_phi_65_66_ladder_2 = _2971;
                frontier_phi_65_66_ladder_3 = _2965;
                frontier_phi_65_66_ladder_4 = _2963;
                frontier_phi_65_66_ladder_5 = _2967;
            }
            _3083 = frontier_phi_65_66_ladder_4;
            _3085 = frontier_phi_65_66_ladder_3;
            _3087 = frontier_phi_65_66_ladder_5;
            _3089 = frontier_phi_65_66_ladder_1;
            _3091 = frontier_phi_65_66_ladder_2;
            _3093 = frontier_phi_65_66_ladder;
        }
        float _3098 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2896 = (_3098 * _3089) + _2428;
        _2898 = (_3098 * _3091) + _2430;
        _2900 = (_3098 * _3093) + _2432;
        _2902 = ((_3083 * 0.039999999105930328369140625) * _3098) + _2751;
        _2904 = ((_3085 * 0.039999999105930328369140625) * _3098) + _2753;
        _2906 = ((_3087 * 0.039999999105930328369140625) * _3098) + _2755;
    }
    else
    {
        _2896 = _2428;
        _2898 = _2430;
        _2900 = _2432;
        _2902 = _2751;
        _2904 = _2753;
        _2906 = _2755;
    }
    float _4888 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4899 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4910 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2923 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2896 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _855))) + ((_2902 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2898 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _855))) + ((_2904 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2900 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _855))) + ((_2906 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    uint _2926 = _830 + 6u;
    float _2934 = _792 / cbSceneParam._m0[86u].x;
    float _2935 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2988 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2989 = _2988 / _715;
        float _3000 = _2989 * _765;
        float _3001 = _766 * _2989;
        float _3002 = (-0.0) - _3001;
        float _3003 = _2989 * _767;
        float _3005 = (cbSceneParam._m0[77u].w * _3002) / _2988;
        float _3006 = _3005 + cbSceneParam._m0[79u].w;
        float _3007 = cbSceneParam._m0[79u].w - _3001;
        float _3013 = sqrt(((_3000 * _3000) + (_3001 * _3001)) + (_3003 * _3003));
        float _3016 = (1.0 - (cbSceneParam._m0[77u].w / _2988)) * _3013;
        float _3021 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3023 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3200;
        if (abs((_3002 - _3005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3200 = ((((_3006 > 0.0) ? exp2(_3021 * _3006) : (2.0 - exp2(_3023 * _3006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3016;
        }
        else
        {
            float _3144 = 1.0 / cbSceneParam._m0[80u].x;
            float _3145 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : max(_3006, _3007));
            float _3146 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : min(_3006, _3007));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            _3200 = ((abs(_3013 / _3002) * cbSceneParam._m0[80u].y) * ((((_3155 - _3156) * 2.0) - ((exp2(_3021 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0)))) - exp2(_3021 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))))) * _3144)) - ((exp2(_3023 * _3155) - exp2(_3023 * _3156)) * _3144))) + (_3016 * cbSceneParam._m0[80u].z);
        }
        vec4 _3202 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3211 = exp2((_3200 * (-1.44269502162933349609375)) * (1.0 - _3202.w));
        float _3212 = log2(_3211);
        float _3228 = log2(_2954);
        _3025 = (exp2(_3228 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].x)) * _3202.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3027 = (exp2(_3228 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].y)) * _3202.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3029 = (exp2(_3228 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].z)) * _3202.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3031 = _3211 * _2954;
    }
    else
    {
        _3025 = _2951;
        _3027 = _2952;
        _3029 = _2953;
        _3031 = _2954;
    }
    bool _3238;
    vec4 _3041;
    vec4 _3063;
    float _3065;
    float _3069;
    float _3070;
    float _3071;
    float _3072;
    bool _3082;
    for (;;)
    {
        _3041 = cbMatDynParam._m0[0u];
        float _3043 = roundEven(_3041.y);
        bool _3044 = _3043 == 3.0;
        float _3045 = log2(_3031);
        float _3052 = exp2(_3045 * cbSceneParam._m0[78u].x) * _2923;
        float _3053 = exp2(_3045 * cbSceneParam._m0[78u].y) * _2924;
        float _3054 = exp2(_3045 * cbSceneParam._m0[78u].z) * _2925;
        float _3061 = _781 + (-0.5);
        _3063 = cbMtdParam._m0[1u];
        _3065 = _3063.y * _3061;
        float _3068 = (_3043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3069 = _3068 * (_3044 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3025)));
        _3070 = _3068 * (_3044 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3027)));
        _3071 = _3068 * (_3044 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3029)));
        _3072 = _3061 * 0.999000012874603271484375;
        _3082 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3082)
        {
            if ((cbInstanceData._m0[_830 + 7u].x + _3072) < 0.5)
            {
                _3238 = true;
                break;
            }
        }
        uint _3179 = _831 + uint(_3041.w);
        if ((cbInstanceData._m0[_3179].w < 1.0) && ((cbInstanceData._m0[_3179].w + _3072) < 0.5))
        {
            _3238 = true;
            break;
        }
        if ((_3065 + 1.0) < _3063.x)
        {
            _3238 = true;
            break;
        }
        _3238 = false;
        break;
    }
    float _3442;
    if (_3238)
    {
        discard_state = true;
        _3442 = 0.0;
    }
    else
    {
        _3442 = cbInstanceData._m0[_2926].w;
    }
    SV_Target.x = _3069;
    SV_Target.y = _3070;
    SV_Target.z = _3071;
    SV_Target.w = _3442;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
    discard_exit();
}


