#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1254;
float _3643;
float _3644;
float _3645;
float _3646;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _262 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _265 = _262.x;
    float _266 = _262.y;
    float _267 = _262.z;
    float _282 = (POSITION_1.w - cbMtdParam._m0[14u].z) * (1.0 / cbMtdParam._m0[13u].y);
    float _3655 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _295 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _297 = _295.x;
    float _298 = _295.y;
    float _299 = _295.z;
    float _306 = (((_265 * cbMtdParam._m0[12u].x) - _297) * _283) + _297;
    float _307 = (((_266 * cbMtdParam._m0[12u].y) - _298) * _283) + _298;
    float _308 = (((_267 * cbMtdParam._m0[12u].z) - _299) * _283) + _299;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _332 = _330.x;
    float _333 = _330.y;
    float _334 = _330.z;
    vec4 _352 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _379 = cbMtdParam._m0[14u].y * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _387 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _352.x) * 2.0) - _379)) + 1.0;
    float _3666 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _398 = (_388 * ((_332 - _306) + (((cbMtdParam._m0[10u].x * _265) - _332) * _283))) + _306;
    float _399 = (_388 * ((_333 - _307) + (((cbMtdParam._m0[10u].y * _266) - _333) * _283))) + _307;
    float _400 = (_388 * ((_334 - _308) + (((cbMtdParam._m0[10u].z * _267) - _334) * _283))) + _308;
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _438 = ((((((1.0 - TEXCOORD_3.y) - _352.y) * 2.0) - _379) * (-1.39999997615814208984375)) * cbMtdParam._m0[13u].w) + 1.0;
    float _3677 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _449 = (((_424 - _398) + (((cbMtdParam._m0[9u].x * _265) - _424) * _283)) * _439) + _398;
    float _450 = (((_425 - _399) + (((cbMtdParam._m0[9u].y * _266) - _425) * _283)) * _439) + _399;
    float _451 = (_439 * ((_426 - _400) + (((cbMtdParam._m0[9u].z * _267) - _426) * _283))) + _400;
    vec4 _471 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _487 = ((((((1.0 - TEXCOORD_3.z) - _352.z) * 2.0) - _379) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3688 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _498 = (((_473 - _449) + (((cbMtdParam._m0[11u].x * _265) - _473) * _283)) * _488) + _449;
    float _499 = (((_474 - _450) + (((cbMtdParam._m0[11u].y * _266) - _474) * _283)) * _488) + _450;
    float _500 = (_488 * ((_475 - _451) + (((cbMtdParam._m0[11u].z * _267) - _475) * _283))) + _451;
    vec4 _514 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    vec4 _530 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    vec4 _556 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _560 = _556.z;
    vec4 _581 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    vec4 _607 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _611 = _607.z;
    float _618 = ((_532 - _609) * _283) + _609;
    float _619 = ((_533 - _610) * _283) + _610;
    float _620 = ((_534 - _611) * _283) + _611;
    float _627 = (((((_532 - _583) * _283) + _583) - _618) * _388) + _618;
    float _628 = (((((_533 - _584) * _283) + _584) - _619) * _388) + _619;
    float _629 = (((((_534 - _585) * _283) + _585) - _620) * _388) + _620;
    float _636 = (((((_532 - _558) * _283) + _558) - _627) * _439) + _627;
    float _637 = (((((_533 - _559) * _283) + _559) - _628) * _439) + _628;
    float _638 = (((((_534 - _560) * _283) + _560) - _629) * _439) + _629;
    float _649 = (((((((_532 - _516) * _283) + _516) - _636) * _488) + _636) * 2.0) + (-1.0);
    float _651 = (((((((_533 - _517) * _283) + _517) - _637) * _488) + _637) * 2.0) + (-1.0);
    float _652 = dot(vec2(_649, _651), vec2(_649, _651));
    float _3699 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    float _659 = (_638 + cbMtdParam._m0[13u].z) + (((((_534 - _518) * _283) + _518) - _638) * _488);
    float _675 = (((_649 * cbMtdParam._m0[14u].w) - _649) * _283) + _649;
    float _676 = (((_651 * cbMtdParam._m0[15u].x) - _651) * _283) + _651;
    float _677 = (((cbMtdParam._m0[15u].y * _657) - _657) * _283) + _657;
    float _680 = fma(_677, _240, fma(_676, _232 * TANGENT.x, (_218 * _210) * _675));
    float _683 = fma(_677, _241, fma(_676, _232 * TANGENT.y, (_218 * _211) * _675));
    float _686 = fma(_677, _242, fma(_676, _232 * TANGENT.z, (_218 * _212) * _675));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _3710 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _694 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3732 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3743 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _713 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _763 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _753);
    float _764 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _753);
    float _765 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _753);
    float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
    float _770 = _763 * _769;
    float _771 = _764 * _769;
    float _772 = _765 * _769;
    vec4 _777 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _779 = _777.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _933 = sqrt(((_763 * _763) + (_764 * _764)) + (_765 * _765));
        float _939 = (cbMatDynParam._m0[5u].x * _933) + cbMatDynParam._m0[5u].y;
        float _3754 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _944 = (cbMatDynParam._m0[5u].z * _933) + cbMatDynParam._m0[5u].w;
        float _3765 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) - _940)) + _940) < ((_779 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _812 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _815 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _828 = uint(roundEven(NORMAL.w)) * 13u;
    uint _829 = _828 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3776 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _853 = _850.x * TEXCOORD_3.w;
    float _854 = dot(vec3(_691, _692, _693), vec3(_770, _771, _772));
    float _857 = _854 * 2.0;
    float _861 = (_857 * _691) - _770;
    float _862 = (_857 * _692) - _771;
    float _863 = (_857 * _693) - _772;
    float _867 = abs(dot(vec3(_770, _771, _772), vec3(_691, _692, _693)));
    float _3809 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _869 = sqrt(_694);
    float _882 = exp2((_869 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_869 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _982 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _986 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _1011 = _914 + _691;
        float _1012 = _918 + _692;
        float _1013 = _922 + _693;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_691, _692, _693), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3857 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_691, _692, _693), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3890 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_691, _692, _693), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3923 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1301 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1305 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1328 = _914 + _691;
        float _1329 = _918 + _692;
        float _1330 = _922 + _693;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_691, _692, _693), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3986 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_691, _692, _693), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4019 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_691, _692, _693), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4052 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = _1254;
        _1576 = _1254;
        _1577 = _1254;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1266)) + _1266;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1267)) + _1267;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1268)) + _1268;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _861 * 0.5;
    float _1635 = _862 * 0.5;
    float _1636 = _863 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_863, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861));
        float _1764 = fma(_863, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861));
        float _1767 = fma(_863, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1795 = frontier_phi_19_17_ladder;
        }
        float _2020;
        if (_1764 > 0.0)
        {
            _2020 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2020 = frontier_phi_28_24_ladder;
        }
        float _2266;
        if (_1767 > 0.0)
        {
            _2266 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2266 = frontier_phi_40_35_ladder;
        }
        float _2268 = isnan(_2020) ? _1795 : (isnan(_1795) ? _2020 : min(_1795, _2020));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1761) + _1750;
        float _2274 = (_2269 * _1764) + _1754;
        float _2275 = (_2269 * _1767) + _1758;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_18_40_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_18_40_ladder_2;
        _1785 = frontier_phi_18_40_ladder_1;
        _1787 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_861, _862, _863), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1849 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1853 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1857 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1860 = fma(_863, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861));
        float _1863 = fma(_863, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861));
        float _1866 = fma(_863, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861));
        float _2025;
        if (_1860 > 0.0)
        {
            _2025 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2025 = frontier_phi_30_26_ladder;
        }
        float _2293;
        if (_1863 > 0.0)
        {
            _2293 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2293 = frontier_phi_42_37_ladder;
        }
        float _2498;
        if (_1866 > 0.0)
        {
            _2498 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2498 = frontier_phi_51_48_ladder;
        }
        float _2500 = isnan(_2293) ? _2025 : (isnan(_2025) ? _2293 : min(_2025, _2293));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1860) + _1849;
        float _2506 = (_2501 * _1863) + _1853;
        float _2507 = (_2501 * _1866) + _1857;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2507, cbModelParam._m0[17u].z, fma(_2506, cbModelParam._m0[17u].y, _2505 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2507, cbModelParam._m0[18u].z, fma(_2506, cbModelParam._m0[18u].y, _2505 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2507, cbModelParam._m0[19u].z, fma(_2506, cbModelParam._m0[19u].y, _2505 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_27_51_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1885 = frontier_phi_27_51_ladder_2;
        _1887 = frontier_phi_27_51_ladder_1;
        _1889 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_861, _862, _863), _1792);
        _1885 = _1869.x * cbModelParam._m0[1u].z;
        _1887 = _1869.y * cbModelParam._m0[1u].z;
        _1889 = _1869.z * cbModelParam._m0[1u].z;
    }
    float _1901 = ((((1.0 - _882) * ((_869 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _869)) * _853;
    float _1902 = _1901 * ((cbModelParam._m0[1u].w * (_1885 - _1783)) + _1783);
    float _1903 = _1901 * ((cbModelParam._m0[1u].w * (_1887 - _1785)) + _1785);
    float _1904 = _1901 * ((cbModelParam._m0[1u].w * (_1889 - _1787)) + _1787);
    float _1907 = fma(_1904, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1910 = fma(_1904, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1913 = fma(_1904, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1902 * cbSceneParam._m0[91u].x));
    vec4 _1921 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_790, _791));
    float _1923 = _1921.w;
    float _1935 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1923);
    float _1936 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1923);
    float _1937 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1923);
    uvec4 _1941 = floatBitsToUint(cbInstanceData._m0[_828 + 5u]);
    uint _1943 = _1941.x * 14u;
    uint _1944 = _1943 + 13u;
    float _1951 = _853 + (-1.0);
    float _1956 = (cbLight._m0[_1944].x * _1951) + 1.0;
    float _1957 = (cbLight._m0[_1944].y * _1951) + 1.0;
    float _1958 = (cbLight._m0[_1944].z * _1951) + 1.0;
    float _1959 = (cbLight._m0[_1944].w * _1951) + 1.0;
    uint _1960 = _1943 + 5u;
    float _1966 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1970 = _1943 + 4u;
    float _1979 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1983 = _1943 | 1u;
    float _1994 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_691, _692, _693));
    float _1997 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_691, _692, _693));
    float _4188 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _4199 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2002 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2004 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2011 = ((cbLight._m0[_1960].x * _1966) * _2004) + (((cbLight._m0[_1970].x * _1935) * _1979) * _2002);
    float _2012 = ((_1966 * cbLight._m0[_1960].y) * _2004) + (((cbLight._m0[_1970].y * _1936) * _1979) * _2002);
    float _2013 = ((_1966 * cbLight._m0[_1960].z) * _2004) + (((cbLight._m0[_1970].z * _1937) * _1979) * _2002);
    uvec4 _2017 = floatBitsToUint(cbLight._m0[_1943 + 12u]);
    bool _2019 = _2017.x == 0u;
    float _2030;
    float _2032;
    float _2034;
    if (_2019)
    {
        _2030 = _2011;
        _2032 = _2012;
        _2034 = _2013;
    }
    else
    {
        uint _2038 = _1943 + 6u;
        float _2054 = (dot(vec3(cbLight._m0[_1943 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2055 = _2054 * _2054;
        float _4210 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2057 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2030 = (((cbLight._m0[_2038].x * 0.3183098733425140380859375) * _2056) * _2057) + _2011;
        _2032 = (((cbLight._m0[_2038].y * 0.3183098733425140380859375) * _2056) * _2057) + _2012;
        _2034 = (((cbLight._m0[_2038].z * 0.3183098733425140380859375) * _2056) * _2057) + _2013;
    }
    bool _2037 = _2017.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2037)
    {
        _2075 = _2030;
        _2077 = _2032;
        _2079 = _2034;
    }
    else
    {
        uint _2237 = _1943 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1943 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4226 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2256 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2075 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2030;
        _2077 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2032;
        _2079 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2034;
    }
    uint _2082 = _1943 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _694) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1943].x + _770;
    float _2098 = cbLight._m0[_1943].y + _771;
    float _2099 = cbLight._m0[_1943].z + _772;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_1943].xyz));
    float _4242 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2111 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2112 = dot(vec3(_691, _692, _693), vec3(_2104, _2105, _2106));
    float _4264 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2104, _2105, _2106));
    float _4275 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2111 * ((_2110 * _2136) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2136) + _2096) * _2110))) * _2110;
    float _4286 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2163 = _1943 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _694) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1983].x + _770;
    float _2177 = cbLight._m0[_1983].y + _771;
    float _2178 = cbLight._m0[_1983].z + _772;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_1983].xyz));
    float _4297 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2190 = dot(vec3(_691, _692, _693), vec3(_2183, _2184, _2185));
    float _4308 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2183, _2184, _2185));
    float _4319 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2175;
    float _2222 = (0.5 / (((_2111 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2212) + _2175) * _2189))) * _2189;
    float _4330 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2234 = (((_2211 * cbLight._m0[_2163].x) * _2224) * _1966) + ((((cbLight._m0[_2082].x * _1935) * _2135) * _2149) * _1979);
    float _2235 = (((_2211 * cbLight._m0[_2163].y) * _2224) * _1966) + ((((cbLight._m0[_2082].y * _1936) * _2135) * _2149) * _1979);
    float _2236 = (((_2211 * cbLight._m0[_2163].z) * _2224) * _1966) + ((((cbLight._m0[_2082].z * _1937) * _2135) * _2149) * _1979);
    float _2298;
    float _2300;
    float _2302;
    if (_2019)
    {
        _2298 = _2234;
        _2300 = _2235;
        _2302 = _2236;
    }
    else
    {
        uint _2304 = _1943 + 2u;
        uint _2308 = _1943 + 10u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _694) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _770;
        float _2325 = cbLight._m0[_2304].y + _771;
        float _2326 = cbLight._m0[_2304].z + _772;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2304].xyz));
        float _4341 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2338 = dot(vec3(_691, _692, _693), vec3(_2331, _2332, _2333));
        float _4352 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4363 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2360 = 1.0 - _2323;
        float _2370 = (0.5 / (((_2111 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2360) + _2323) * _2337))) * _2337;
        float _4374 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2298 = (((_2359 * cbLight._m0[_2308].x) * _2372) * _2373) + _2234;
        _2300 = (((_2359 * cbLight._m0[_2308].y) * _2372) * _2373) + _2235;
        _2302 = (((_2359 * cbLight._m0[_2308].z) * _2372) * _2373) + _2236;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2037)
    {
        _2408 = _2298;
        _2410 = _2300;
        _2412 = _2302;
    }
    else
    {
        uint _2419 = _1943 + 3u;
        uint _2423 = _1943 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _694) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _770;
        float _2440 = cbLight._m0[_2419].y + _771;
        float _2441 = cbLight._m0[_2419].z + _772;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2419].xyz));
        float _4390 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2453 = dot(vec3(_691, _692, _693), vec3(_2446, _2447, _2448));
        float _4401 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4412 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2111 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2475) + _2438) * _2452))) * _2452;
        float _4423 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2408 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2298;
        _2410 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2300;
        _2412 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2302;
    }
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_1941.y == 0u)
    {
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2563;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2563;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2563;
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.x;
        uint _2590 = uint((float(_2578.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2579))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2579)));
        float _2600 = (log2(_2566 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2601 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        uint _2604 = uint(isnan(14.0) ? _2601 : (isnan(_2601) ? 14.0 : min(_2601, 14.0)));
        uvec4 _2609 = texelFetch(g_lightClusterGridBuffer, int(((_2604 << 2u) + (_2590 << 6u)) >> 2u));
        uint _2610 = _2609.x;
        uint _2611 = _2578.z;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((((1u << ((_2611 >> 4u) & 15u)) + 4294967295u) & _2610) == 0u) || ((_2611 & 240u) == 0u))
        {
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
        }
        else
        {
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            uint _2868 = 0u;
            uint _2877;
            bool _2878;
            for (;;)
            {
                _2877 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                _2878 = _2877 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2878)
                {
                    frontier_phi_68_pred = _2864;
                    frontier_phi_68_pred_1 = _2867;
                    frontier_phi_68_pred_2 = _2866;
                    frontier_phi_68_pred_3 = _2865;
                    frontier_phi_68_pred_4 = _2863;
                    frontier_phi_68_pred_5 = _2862;
                }
                else
                {
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    uint _3013;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2877;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    for (;;)
                    {
                        uint _3017 = uint(findLSB(_3013)) + (_2868 << 5u);
                        uint _3014 = (_3013 + 4294967295u) & _3013;
                        uint _3019 = _3017 * 48u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3039 = (_3017 * 48u) + 4u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3058 = (_3017 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        float _3073 = _3033.x - _2564;
                        float _3074 = _3033.y - _2565;
                        float _3075 = _3033.z - _2566;
                        float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                        float _3079 = inversesqrt(_3076);
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3083 = dot(vec3(_809, _812, _815), vec3(_3080, _3081, _3082));
                        float _3088 = 1.0 - (_3076 * _3033.w);
                        float _4449 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3090 = sqrt(_3076) * _3052.w;
                        float _3093 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3083) + _3094;
                        float _3100 = _3090 * _3090;
                        float _3104 = ((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3089) / ((_3100 * 0.699999988079071044921875) + 1.0);
                        float _3108 = (-0.0) - _2564;
                        float _3109 = (-0.0) - _2565;
                        float _3110 = (-0.0) - _2566;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3125 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                        float _3126 = 1.0 - _869;
                        float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                        float _3134 = _3133 * _3133;
                        float _3135 = _3134 * _3134;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3146 = dot(vec3(_809, _812, _815), vec3(_3115, _3116, _3117));
                        float _4465 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3150 = dot(vec3(_809, _812, _815), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                        float _4476 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                        float _3158 = _3093 * _3134;
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3083) + _3159;
                        float _4487 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3164 = 1.0 - _3134;
                        float _3174 = (0.5 / (((_3163 * ((_3149 * _3164) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3134) * _3149))) * _3163;
                        float _4498 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3185 = (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3157 * _3157) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125))) * _3089;
                        _2937 = (_3104 * _3052.x) + _3010;
                        _2938 = (_3104 * _3052.y) + _3011;
                        _2939 = (_3104 * _3052.z) + _3012;
                        _2934 = (_3185 * _3069.x) + _3007;
                        _2935 = (_3185 * _3069.y) + _3008;
                        _2936 = (_3185 * _3069.z) + _3009;
                        if (_3014 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _3014;
                        }
                    }
                    frontier_phi_68_pred = _2936;
                    frontier_phi_68_pred_1 = _2939;
                    frontier_phi_68_pred_2 = _2938;
                    frontier_phi_68_pred_3 = _2937;
                    frontier_phi_68_pred_4 = _2935;
                    frontier_phi_68_pred_5 = _2934;
                }
                _2715 = frontier_phi_68_pred;
                _2721 = frontier_phi_68_pred_1;
                _2719 = frontier_phi_68_pred_2;
                _2717 = frontier_phi_68_pred_3;
                _2713 = frontier_phi_68_pred_4;
                _2711 = frontier_phi_68_pred_5;
                uint _2869 = _2868 + 1u;
                if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2862 = _2711;
                    _2863 = _2713;
                    _2864 = _2715;
                    _2865 = _2717;
                    _2866 = _2719;
                    _2867 = _2721;
                    _2868 = _2869;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
        }
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.z;
        uint _2727 = (_2725 >> 8u) & 15u;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((4294967295u << _2727) & _2610) == 0u)
        {
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
            _2840 = _2720;
        }
        else
        {
            float _2855 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
            float _2856 = _2855 * _2564;
            float _2857 = _2855 * _2565;
            float _2858 = _2855 * _2566;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2727 < ((_2725 >> 12u) & 15u))
            {
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2990 = _2710;
                float _2991 = _2712;
                float _2992 = _2714;
                float _2993 = _2716;
                float _2994 = _2718;
                float _2995 = _2720;
                uint _2996 = _2727;
                uint _3005;
                bool _3006;
                for (;;)
                {
                    _3005 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                    _3006 = _3005 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3006)
                    {
                        frontier_phi_79_pred = _2995;
                        frontier_phi_79_pred_1 = _2994;
                        frontier_phi_79_pred_2 = _2993;
                        frontier_phi_79_pred_3 = _2992;
                        frontier_phi_79_pred_4 = _2991;
                        frontier_phi_79_pred_5 = _2990;
                    }
                    else
                    {
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        uint _3218 = _3005;
                        uint _3219;
                        vec4 _3244;
                        float _3245;
                        vec4 _3260;
                        vec3 _3272;
                        vec4 _3287;
                        vec4 _3303;
                        float _3350;
                        bool _3351;
                        for (;;)
                        {
                            uint _3229 = ((_2996 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3218));
                            _3219 = (_3218 + 4294967295u) & _3218;
                            uint _3231 = _3229 * 40u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3245 = _3244.w;
                            uint _3247 = (_3229 * 40u) + 4u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3229 * 40u) + 8u;
                            _3272 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x));
                            uint _3274 = (_3229 * 40u) + 16u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3290 = (_3229 * 40u) + 20u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3306 = (_3229 * 40u) + 24u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3325 = (_3229 * 40u) + 28u;
                            vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3350 = fma(_2566, _3338.z, fma(_2565, _3338.y, _3338.x * _2564)) + _3338.w;
                            _3351 = !((fma(_2566, _3319.z, fma(_2565, _3319.y, _3319.x * _2564)) + _3319.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3351)
                            {
                                float _3378 = _3244.x - _2564;
                                float _3379 = _3244.y - _2565;
                                float _3380 = _3244.z - _2566;
                                float _3381 = dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380));
                                float _3384 = inversesqrt(_3381);
                                float _3385 = _3384 * _3378;
                                float _3386 = _3384 * _3379;
                                float _3387 = _3384 * _3380;
                                float _3391 = 1.0 - (_3381 / (_3245 * _3245));
                                float _4509 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3396 = sqrt(_3381) * _3260.w;
                                float _3398 = 1.39999997615814208984375 / (_3396 + 1.39999997615814208984375);
                                float _3399 = _3398 * _3398;
                                float _3402 = ((1.0 - _3399) * dot(vec3(_3385, _3386, _3387), vec3(_809, _812, _815))) + _3399;
                                float _3405 = _3396 * _3396;
                                float _3409 = (fma(_2566, _3287.z, fma(_2565, _3287.y, _3287.x * _2564)) + _3287.w) / _3350;
                                float _3410 = (fma(_2566, _3303.z, fma(_2565, _3303.y, _3303.x * _2564)) + _3303.w) / _3350;
                                float _3414 = 1.0 - dot(vec2(_3409, _3410), vec2(_3409, _3410));
                                float _4525 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3416 = _3415 * (((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3392) / ((_3405 * 0.699999988079071044921875) + 1.0));
                                float _3428 = exp2(log2(1.0 / ((_3405 * 3.5) + 5.0)) * 0.25);
                                float _3429 = 1.0 - _869;
                                float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                                float _3437 = _3436 * _3436;
                                float _3438 = _3437 * _3437;
                                float _3439 = _3385 - _2856;
                                float _3440 = _3386 - _2857;
                                float _3441 = _3387 - _2858;
                                float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                                float _3449 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2856, (-0.0) - _2857, (-0.0) - _2858));
                                float _4536 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3453 = dot(vec3(_809, _812, _815), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                                float _4547 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                                float _3461 = _3398 * _3437;
                                float _3462 = _3461 * _3461;
                                float _3468 = ((1.0 - _3462) * dot(vec3(_809, _812, _815), vec3(_3385, _3386, _3387))) + _3462;
                                float _4558 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3470 = 1.0 - _3437;
                                float _3480 = (0.5 / (((_3469 * ((_3452 * _3470) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3437) * _3452))) * _3469;
                                float _4569 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3490 = (_3415 * _3392) * (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3460 * _3460) * ((_3405 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3416 * _3260.z;
                                frontier_phi_85_pred_1 = _3416 * _3260.y;
                                frontier_phi_85_pred_2 = _3416 * _3260.x;
                                frontier_phi_85_pred_3 = _3490 * _3272.z;
                                frontier_phi_85_pred_4 = _3490 * _3272.y;
                                frontier_phi_85_pred_5 = _3490 * _3272.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_85_pred;
                            _3498 = frontier_phi_85_pred_1;
                            _3497 = frontier_phi_85_pred_2;
                            _3496 = frontier_phi_85_pred_3;
                            _3495 = frontier_phi_85_pred_4;
                            _3494 = frontier_phi_85_pred_5;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            _3204 = _3499 + _3217;
                            _3199 = _3494 + _3212;
                            _3200 = _3495 + _3213;
                            _3201 = _3496 + _3214;
                            if (_3219 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3219;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3204;
                        frontier_phi_79_pred_1 = _3203;
                        frontier_phi_79_pred_2 = _3202;
                        frontier_phi_79_pred_3 = _3201;
                        frontier_phi_79_pred_4 = _3200;
                        frontier_phi_79_pred_5 = _3199;
                    }
                    _2841 = frontier_phi_79_pred;
                    _2839 = frontier_phi_79_pred_1;
                    _2837 = frontier_phi_79_pred_2;
                    _2835 = frontier_phi_79_pred_3;
                    _2833 = frontier_phi_79_pred_4;
                    _2831 = frontier_phi_79_pred_5;
                    uint _2997 = _2996 + 1u;
                    if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2990 = _2831;
                        _2991 = _2833;
                        _2992 = _2835;
                        _2993 = _2837;
                        _2994 = _2839;
                        _2995 = _2841;
                        _2996 = _2997;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2837;
                frontier_phi_60_61_ladder_1 = _2841;
                frontier_phi_60_61_ladder_2 = _2839;
                frontier_phi_60_61_ladder_3 = _2835;
                frontier_phi_60_61_ladder_4 = _2833;
                frontier_phi_60_61_ladder_5 = _2831;
            }
            else
            {
                frontier_phi_60_61_ladder = _2716;
                frontier_phi_60_61_ladder_1 = _2720;
                frontier_phi_60_61_ladder_2 = _2718;
                frontier_phi_60_61_ladder_3 = _2714;
                frontier_phi_60_61_ladder_4 = _2712;
                frontier_phi_60_61_ladder_5 = _2710;
            }
            _2830 = frontier_phi_60_61_ladder_5;
            _2832 = frontier_phi_60_61_ladder_4;
            _2834 = frontier_phi_60_61_ladder_3;
            _2836 = frontier_phi_60_61_ladder;
            _2838 = frontier_phi_60_61_ladder_2;
            _2840 = frontier_phi_60_61_ladder_1;
        }
        float _2845 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
        _2622 = (_2845 * _2836) + _2075;
        _2624 = (_2845 * _2838) + _2077;
        _2626 = (_2845 * _2840) + _2079;
        _2628 = ((_2830 * 0.039999999105930328369140625) * _2845) + _2408;
        _2630 = ((_2832 * 0.039999999105930328369140625) * _2845) + _2410;
        _2632 = ((_2834 * 0.039999999105930328369140625) * _2845) + _2412;
    }
    else
    {
        _2622 = _2075;
        _2624 = _2077;
        _2626 = _2079;
        _2628 = _2408;
        _2630 = _2410;
        _2632 = _2412;
    }
    float _4585 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4596 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4607 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2649 = ((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2622 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _853))) + ((_2628 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2650 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2624 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _853))) + ((_2630 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2651 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2626 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _853))) + ((_2632 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    uint _2652 = _828 + 6u;
    float _2660 = _790 / cbSceneParam._m0[86u].x;
    float _2661 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _713 : (isnan(_713) ? cbSceneParam._m0[77u].w : min(_713, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_713 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_713) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _713 : min(cbSceneParam._m0[80u].w, _713));
        float _2736 = _2735 / _713;
        float _2747 = _2736 * _763;
        float _2748 = _764 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2750 = _2736 * _765;
        float _2752 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2748;
        float _2760 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2947;
        if (abs((_2749 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2947 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2891 = 1.0 / cbSceneParam._m0[80u].x;
            float _2892 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2893 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            _2947 = ((abs(_2760 / _2749) * cbSceneParam._m0[80u].y) * ((((_2902 - _2903) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))))) * _2891)) - ((exp2(_2770 * _2902) - exp2(_2770 * _2903)) * _2891))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _2949 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2958 = exp2((_2947 * (-1.44269502162933349609375)) * (1.0 - _2949.w));
        float _2959 = log2(_2958);
        float _2975 = log2(_2680);
        _2772 = (exp2(_2975 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].x)) * _2949.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2774 = (exp2(_2975 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].y)) * _2949.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2776 = (exp2(_2975 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].z)) * _2949.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2778 = _2958 * _2680;
    }
    else
    {
        _2772 = _2677;
        _2774 = _2678;
        _2776 = _2679;
        _2778 = _2680;
    }
    bool _2985;
    vec4 _2788;
    vec4 _2810;
    float _2812;
    float _2816;
    float _2817;
    float _2818;
    float _2819;
    bool _2829;
    for (;;)
    {
        _2788 = cbMatDynParam._m0[0u];
        float _2790 = roundEven(_2788.y);
        bool _2791 = _2790 == 3.0;
        float _2792 = log2(_2778);
        float _2799 = exp2(_2792 * cbSceneParam._m0[78u].x) * _2649;
        float _2800 = exp2(_2792 * cbSceneParam._m0[78u].y) * _2650;
        float _2801 = exp2(_2792 * cbSceneParam._m0[78u].z) * _2651;
        float _2808 = _779 + (-0.5);
        _2810 = cbMtdParam._m0[1u];
        _2812 = _2810.y * _2808;
        float _2815 = (_2790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2816 = _2815 * (_2791 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2772)));
        _2817 = _2815 * (_2791 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2774)));
        _2818 = _2815 * (_2791 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2776)));
        _2819 = _2808 * 0.999000012874603271484375;
        _2829 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2829)
        {
            if ((cbInstanceData._m0[_828 + 7u].x + _2819) < 0.5)
            {
                _2985 = true;
                break;
            }
        }
        uint _2926 = _829 + uint(_2788.w);
        if ((cbInstanceData._m0[_2926].w < 1.0) && ((cbInstanceData._m0[_2926].w + _2819) < 0.5))
        {
            _2985 = true;
            break;
        }
        if ((_2812 + 1.0) < _2810.x)
        {
            _2985 = true;
            break;
        }
        _2985 = false;
        break;
    }
    float _3190;
    if (_2985)
    {
        discard_state = true;
        _3190 = 0.0;
    }
    else
    {
        _3190 = cbInstanceData._m0[_2652].w;
    }
    SV_Target.x = _2816;
    SV_Target.y = _2817;
    SV_Target.z = _2818;
    SV_Target.w = _3190;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2652].w;
    discard_exit();
}


