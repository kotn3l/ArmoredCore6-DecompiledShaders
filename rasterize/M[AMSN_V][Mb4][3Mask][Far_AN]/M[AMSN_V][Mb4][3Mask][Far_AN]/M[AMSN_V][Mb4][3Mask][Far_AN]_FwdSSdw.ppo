#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1209;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _258 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _261 = _258.x;
    float _262 = _258.y;
    float _263 = _258.z;
    float _278 = (POSITION_1.w - cbMtdParam._m0[14u].z) * (1.0 / cbMtdParam._m0[13u].y);
    float _3544 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _293 = _291.x;
    float _294 = _291.y;
    float _295 = _291.z;
    float _302 = (((_261 * cbMtdParam._m0[12u].x) - _293) * _279) + _293;
    float _303 = (((_262 * cbMtdParam._m0[12u].y) - _294) * _279) + _294;
    float _304 = (((_263 * cbMtdParam._m0[12u].z) - _295) * _279) + _295;
    vec4 _326 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _328 = _326.x;
    float _329 = _326.y;
    float _330 = _326.z;
    vec4 _348 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _375 = cbMtdParam._m0[14u].y * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _383 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _348.x) * 2.0) - _375)) + 1.0;
    float _3555 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _394 = (_384 * ((_328 - _302) + (((cbMtdParam._m0[10u].x * _261) - _328) * _279))) + _302;
    float _395 = (_384 * ((_329 - _303) + (((cbMtdParam._m0[10u].y * _262) - _329) * _279))) + _303;
    float _396 = (_384 * ((_330 - _304) + (((cbMtdParam._m0[10u].z * _263) - _330) * _279))) + _304;
    vec4 _418 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = ((((((1.0 - TEXCOORD_3.y) - _348.y) * 2.0) - _375) * (-1.39999997615814208984375)) * cbMtdParam._m0[13u].w) + 1.0;
    float _3566 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _445 = (((_420 - _394) + (((cbMtdParam._m0[9u].x * _261) - _420) * _279)) * _435) + _394;
    float _446 = (((_421 - _395) + (((cbMtdParam._m0[9u].y * _262) - _421) * _279)) * _435) + _395;
    float _447 = (_435 * ((_422 - _396) + (((cbMtdParam._m0[9u].z * _263) - _422) * _279))) + _396;
    vec4 _467 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _483 = ((((((1.0 - TEXCOORD_3.z) - _348.z) * 2.0) - _375) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3577 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _494 = (((_469 - _445) + (((cbMtdParam._m0[11u].x * _261) - _469) * _279)) * _484) + _445;
    float _495 = (((_470 - _446) + (((cbMtdParam._m0[11u].y * _262) - _470) * _279)) * _484) + _446;
    float _496 = (_484 * ((_471 - _447) + (((cbMtdParam._m0[11u].z * _263) - _471) * _279))) + _447;
    vec4 _510 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    vec4 _526 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    vec4 _552 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    vec4 _577 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _579 = _577.x;
    float _580 = _577.y;
    float _581 = _577.z;
    vec4 _603 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_528 - _605) * _279) + _605;
    float _615 = ((_529 - _606) * _279) + _606;
    float _616 = ((_530 - _607) * _279) + _607;
    float _623 = (((((_528 - _579) * _279) + _579) - _614) * _384) + _614;
    float _624 = (((((_529 - _580) * _279) + _580) - _615) * _384) + _615;
    float _625 = (((((_530 - _581) * _279) + _581) - _616) * _384) + _616;
    float _632 = (((((_528 - _554) * _279) + _554) - _623) * _435) + _623;
    float _633 = (((((_529 - _555) * _279) + _555) - _624) * _435) + _624;
    float _634 = (((((_530 - _556) * _279) + _556) - _625) * _435) + _625;
    float _645 = (((((((_528 - _512) * _279) + _512) - _632) * _484) + _632) * 2.0) + (-1.0);
    float _647 = (((((((_529 - _513) * _279) + _513) - _633) * _484) + _633) * 2.0) + (-1.0);
    float _648 = dot(vec2(_645, _647), vec2(_645, _647));
    float _3588 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _655 = (_634 + cbMtdParam._m0[13u].z) + (((((_530 - _514) * _279) + _514) - _634) * _484);
    float _671 = (((_645 * cbMtdParam._m0[14u].w) - _645) * _279) + _645;
    float _672 = (((_647 * cbMtdParam._m0[15u].x) - _647) * _279) + _647;
    float _673 = (((cbMtdParam._m0[15u].y * _653) - _653) * _279) + _653;
    float _676 = fma(_673, _236, fma(_672, _228 * TANGENT.x, (_214 * _206) * _671));
    float _679 = fma(_673, _237, fma(_672, _228 * TANGENT.y, (_214 * _207) * _671));
    float _682 = fma(_673, _238, fma(_672, _228 * TANGENT.z, (_214 * _208) * _671));
    float _686 = inversesqrt(dot(vec3(_676, _679, _682), vec3(_676, _679, _682)));
    float _687 = _686 * _676;
    float _688 = _686 * _679;
    float _689 = _686 * _682;
    float _3599 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _690 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3621 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3632 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_689, cbSceneParam._m0[5u].z, fma(_688, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _687));
    float _796 = fma(_689, cbSceneParam._m0[6u].z, fma(_688, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _687));
    float _799 = fma(_689, cbSceneParam._m0[7u].z, fma(_688, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _687));
    uint _812 = uint(roundEven(NORMAL.w)) * 13u;
    uint _814 = (_812 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3643 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _837 = _834.x * TEXCOORD_3.w;
    float _838 = dot(vec3(_687, _688, _689), vec3(_766, _767, _768));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _687) - _766;
    float _846 = (_841 * _688) - _767;
    float _847 = (_841 * _689) - _768;
    float _851 = abs(dot(vec3(_766, _767, _768), vec3(_687, _688, _689)));
    float _3676 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_690);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1208;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _937 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _941 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _966 = _898 + _687;
        float _967 = _902 + _688;
        float _968 = _906 + _689;
        float _978 = fma(_968, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966)) - _933;
        float _979 = fma(_968, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966)) - _937;
        float _980 = fma(_968, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966)) - _941;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1036 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1002.x + (-0.5));
        float _1038 = _1036 * (_1002.y + (-0.5));
        float _1039 = _1036 * (_1002.z + (-0.5));
        float _1046 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1009.x + (-0.5));
        float _1048 = _1046 * (_1009.y + (-0.5));
        float _1049 = _1046 * (_1009.z + (-0.5));
        float _1056 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1016.x + (-0.5));
        float _1058 = _1056 * (_1016.y + (-0.5));
        float _1059 = _1056 * (_1016.z + (-0.5));
        float _1066 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1023.x + (-0.5));
        float _1068 = _1066 * (_1023.y + (-0.5));
        float _1069 = _1066 * (_1023.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1090 = (dot(vec3(_687, _688, _689), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1100 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3724 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1102 + 1.0))) + _1107) * _1070;
        float _1117 = _1038 * 0.5;
        float _1118 = _1048 * 0.5;
        float _1119 = _1058 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_687, _688, _689), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3757 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1144 + 1.0))) + _1149) * _1071;
        float _1159 = _1039 * 0.5;
        float _1160 = _1049 * 0.5;
        float _1161 = _1059 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_687, _688, _689), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3790 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1186 + 1.0))) + _1191) * _1072;
        _1208 = _1039;
        _1210 = _1038;
        _1211 = _1037;
        _1212 = _1049;
        _1213 = _1048;
        _1214 = _1047;
        _1215 = _1059;
        _1216 = _1058;
        _1217 = _1057;
        _1218 = _1072;
        _1219 = _1071;
        _1220 = _1070;
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _1209;
        _1210 = _1209;
        _1211 = _1209;
        _1212 = _1209;
        _1213 = _1209;
        _1214 = _1209;
        _1215 = _1209;
        _1216 = _1209;
        _1217 = _1209;
        _1218 = _1209;
        _1219 = _1209;
        _1220 = _1209;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1253 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1257 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1280 = _898 + _687;
        float _1281 = _902 + _688;
        float _1282 = _906 + _689;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_687, _688, _689), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3853 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_687, _688, _689), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3886 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_687, _688, _689), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3919 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1209;
        _1519 = _1209;
        _1520 = _1209;
        _1521 = _1209;
        _1522 = _1209;
        _1523 = _1209;
        _1524 = _1209;
        _1525 = _1209;
        _1526 = _1209;
        _1527 = _1209;
        _1528 = _1209;
        _1529 = _1209;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1223)) + _1223;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _845 * 0.5;
    float _1587 = _846 * 0.5;
    float _1588 = _847 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1208, _1212, _1215, _1218));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _690);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1716 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1719 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1747 = frontier_phi_16_14_ladder;
        }
        float _1972;
        if (_1716 > 0.0)
        {
            _1972 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2218;
        if (_1719 > 0.0)
        {
            _2218 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2218 = frontier_phi_37_32_ladder;
        }
        float _2220 = isnan(_1972) ? _1747 : (isnan(_1747) ? _1972 : min(_1747, _1972));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1713) + _1702;
        float _2226 = (_2221 * _1716) + _1706;
        float _2227 = (_2221 * _1719) + _1710;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2228;
        float _2232 = _2228 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 > _2232) || ((_2226 < _2230) || ((_2225 < _2230) || (_2225 > _2232))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2227, cbModelParam._m0[9u].z, fma(_2226, cbModelParam._m0[9u].y, _2225 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2227, cbModelParam._m0[10u].z, fma(_2226, cbModelParam._m0[10u].y, _2225 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2227, cbModelParam._m0[11u].z, fma(_2226, cbModelParam._m0[11u].y, _2225 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_15_37_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_15_37_ladder_2;
        _1737 = frontier_phi_15_37_ladder_1;
        _1739 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _690);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1815 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1818 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1977;
        if (_1812 > 0.0)
        {
            _1977 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1977 = frontier_phi_27_23_ladder;
        }
        float _2245;
        if (_1815 > 0.0)
        {
            _2245 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2245 = frontier_phi_39_34_ladder;
        }
        float _2450;
        if (_1818 > 0.0)
        {
            _2450 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2450 = frontier_phi_48_45_ladder;
        }
        float _2452 = isnan(_2245) ? _1977 : (isnan(_1977) ? _2245 : min(_1977, _2245));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1812) + _1801;
        float _2458 = (_2453 * _1815) + _1805;
        float _2459 = (_2453 * _1818) + _1809;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2460;
        float _2463 = _2460 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2459 > _2463) || ((_2459 < _2461) || ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 < _2461) || (_2457 > _2463))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2459, cbModelParam._m0[17u].z, fma(_2458, cbModelParam._m0[17u].y, _2457 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2459, cbModelParam._m0[18u].z, fma(_2458, cbModelParam._m0[18u].y, _2457 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2459, cbModelParam._m0[19u].z, fma(_2458, cbModelParam._m0[19u].y, _2457 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_24_48_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_24_48_ladder_2;
        _1839 = frontier_phi_24_48_ladder_1;
        _1841 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1744);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1853 = ((((1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_866 * _853)) * _837;
    float _1854 = _1853 * ((cbModelParam._m0[1u].w * (_1837 - _1735)) + _1735);
    float _1855 = _1853 * ((cbModelParam._m0[1u].w * (_1839 - _1737)) + _1737);
    float _1856 = _1853 * ((cbModelParam._m0[1u].w * (_1841 - _1739)) + _1739);
    float _1859 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    vec4 _1873 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_774, _775));
    float _1875 = _1873.w;
    float _1887 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1875);
    float _1888 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1875);
    float _1889 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1875);
    uvec4 _1893 = floatBitsToUint(cbInstanceData._m0[_812 + 5u]);
    uint _1895 = _1893.x * 14u;
    uint _1896 = _1895 + 13u;
    float _1903 = _837 + (-1.0);
    float _1908 = (cbLight._m0[_1896].x * _1903) + 1.0;
    float _1909 = (cbLight._m0[_1896].y * _1903) + 1.0;
    float _1910 = (cbLight._m0[_1896].z * _1903) + 1.0;
    float _1911 = (cbLight._m0[_1896].w * _1903) + 1.0;
    uint _1912 = _1895 + 5u;
    float _1918 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1922 = _1895 + 4u;
    float _1931 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1935 = _1895 | 1u;
    float _1946 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_687, _688, _689));
    float _1949 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_687, _688, _689));
    float _4055 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _4066 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1954 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1956 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1963 = ((cbLight._m0[_1912].x * _1918) * _1956) + (((cbLight._m0[_1922].x * _1887) * _1931) * _1954);
    float _1964 = ((_1918 * cbLight._m0[_1912].y) * _1956) + (((cbLight._m0[_1922].y * _1888) * _1931) * _1954);
    float _1965 = ((_1918 * cbLight._m0[_1912].z) * _1956) + (((cbLight._m0[_1922].z * _1889) * _1931) * _1954);
    uvec4 _1969 = floatBitsToUint(cbLight._m0[_1895 + 12u]);
    bool _1971 = _1969.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1971)
    {
        _1982 = _1963;
        _1984 = _1964;
        _1986 = _1965;
    }
    else
    {
        uint _1990 = _1895 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1895 + 2u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4077 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2009 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1963;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1964;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1965;
    }
    bool _1989 = _1969.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1989)
    {
        _2027 = _1982;
        _2029 = _1984;
        _2031 = _1986;
    }
    else
    {
        uint _2189 = _1895 + 7u;
        float _2205 = (dot(vec3(cbLight._m0[_1895 + 3u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4093 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2208 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2027 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _1982;
        _2029 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _1984;
        _2031 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _1986;
    }
    uint _2034 = _1895 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _690) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1895].x + _766;
    float _2050 = cbLight._m0[_1895].y + _767;
    float _2051 = cbLight._m0[_1895].z + _768;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_1895].xyz));
    float _4109 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2063 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2064 = dot(vec3(_687, _688, _689), vec3(_2056, _2057, _2058));
    float _4131 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2056, _2057, _2058));
    float _4142 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2088 = 1.0 - _2048;
    float _2099 = (0.5 / (((_2063 * ((_2062 * _2088) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2088) + _2048) * _2062))) * _2062;
    float _4153 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2115 = _1895 + 9u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _690) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1935].x + _766;
    float _2129 = cbLight._m0[_1935].y + _767;
    float _2130 = cbLight._m0[_1935].z + _768;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_1935].xyz));
    float _4164 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2142 = dot(vec3(_687, _688, _689), vec3(_2135, _2136, _2137));
    float _4175 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2135, _2136, _2137));
    float _4186 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2127 * _2127;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2164 = 1.0 - _2127;
    float _2174 = (0.5 / (((_2063 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2164) + _2127) * _2141))) * _2141;
    float _4197 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    float _2186 = (((_2163 * cbLight._m0[_2115].x) * _2176) * _1918) + ((((cbLight._m0[_2034].x * _1887) * _2087) * _2101) * _1931);
    float _2187 = (((_2163 * cbLight._m0[_2115].y) * _2176) * _1918) + ((((cbLight._m0[_2034].y * _1888) * _2087) * _2101) * _1931);
    float _2188 = (((_2163 * cbLight._m0[_2115].z) * _2176) * _1918) + ((((cbLight._m0[_2034].z * _1889) * _2087) * _2101) * _1931);
    float _2250;
    float _2252;
    float _2254;
    if (_1971)
    {
        _2250 = _2186;
        _2252 = _2187;
        _2254 = _2188;
    }
    else
    {
        uint _2256 = _1895 + 2u;
        uint _2260 = _1895 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _690) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _766;
        float _2277 = cbLight._m0[_2256].y + _767;
        float _2278 = cbLight._m0[_2256].z + _768;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2256].xyz));
        float _4208 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2290 = dot(vec3(_687, _688, _689), vec3(_2283, _2284, _2285));
        float _4219 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4230 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2312 = 1.0 - _2275;
        float _2322 = (0.5 / (((_2063 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2312) + _2275) * _2289))) * _2289;
        float _4241 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2250 = (((_2311 * cbLight._m0[_2260].x) * _2324) * _2325) + _2186;
        _2252 = (((_2311 * cbLight._m0[_2260].y) * _2324) * _2325) + _2187;
        _2254 = (((_2311 * cbLight._m0[_2260].z) * _2324) * _2325) + _2188;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1989)
    {
        _2360 = _2250;
        _2362 = _2252;
        _2364 = _2254;
    }
    else
    {
        uint _2371 = _1895 + 3u;
        uint _2375 = _1895 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _690) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _766;
        float _2392 = cbLight._m0[_2371].y + _767;
        float _2393 = cbLight._m0[_2371].z + _768;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2371].xyz));
        float _4257 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2405 = dot(vec3(_687, _688, _689), vec3(_2398, _2399, _2400));
        float _4268 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4279 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2427 = 1.0 - _2390;
        float _2437 = (0.5 / (((_2063 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2427) + _2390) * _2404))) * _2404;
        float _4290 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2360 = (((_2426 * cbLight._m0[_2375].x) * _2439) * _2440) + _2250;
        _2362 = (((_2426 * cbLight._m0[_2375].y) * _2439) * _2440) + _2252;
        _2364 = (((_2426 * cbLight._m0[_2375].z) * _2439) * _2440) + _2254;
    }
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_1893.y == 0u)
    {
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2515;
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2515;
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2515;
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2531)));
        float _2552 = (log2(_2518 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
        }
        else
        {
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            uint _2812 = 0u;
            uint _2821;
            bool _2822;
            for (;;)
            {
                _2821 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                _2822 = _2821 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2822)
                {
                    frontier_phi_63_pred = _2811;
                    frontier_phi_63_pred_1 = _2810;
                    frontier_phi_63_pred_2 = _2809;
                    frontier_phi_63_pred_3 = _2808;
                    frontier_phi_63_pred_4 = _2807;
                    frontier_phi_63_pred_5 = _2806;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2821;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2812 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2516;
                        float _2997 = _2956.y - _2517;
                        float _2998 = _2956.z - _2518;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_793, _796, _799), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4316 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2516;
                        float _3032 = (-0.0) - _2517;
                        float _3033 = (-0.0) - _2518;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _853;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_793, _796, _799), vec3(_3038, _3039, _3040));
                        float _4332 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3073 = dot(vec3(_793, _796, _799), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4343 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4354 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4365 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3108 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2865 = (_3027 * _2975.x) + _2933;
                        _2866 = (_3027 * _2975.y) + _2934;
                        _2867 = (_3027 * _2975.z) + _2935;
                        _2862 = (_3108 * _2992.x) + _2930;
                        _2863 = (_3108 * _2992.y) + _2931;
                        _2864 = (_3108 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_63_pred = _2867;
                    frontier_phi_63_pred_1 = _2866;
                    frontier_phi_63_pred_2 = _2865;
                    frontier_phi_63_pred_3 = _2864;
                    frontier_phi_63_pred_4 = _2863;
                    frontier_phi_63_pred_5 = _2862;
                }
                _2673 = frontier_phi_63_pred;
                _2671 = frontier_phi_63_pred_1;
                _2669 = frontier_phi_63_pred_2;
                _2667 = frontier_phi_63_pred_3;
                _2665 = frontier_phi_63_pred_4;
                _2663 = frontier_phi_63_pred_5;
                uint _2813 = _2812 + 1u;
                if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2806 = _2663;
                    _2807 = _2665;
                    _2808 = _2667;
                    _2809 = _2669;
                    _2810 = _2671;
                    _2811 = _2673;
                    _2812 = _2813;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
        }
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.z;
        uint _2679 = (_2677 >> 8u) & 15u;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((4294967295u << _2679) & _2562) == 0u)
        {
            _2774 = _2662;
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
            _2784 = _2672;
        }
        else
        {
            float _2799 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
            float _2800 = _2799 * _2516;
            float _2801 = _2799 * _2517;
            float _2802 = _2799 * _2518;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2679 < ((_2677 >> 12u) & 15u))
            {
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2913 = _2662;
                float _2914 = _2664;
                float _2915 = _2666;
                float _2916 = _2668;
                float _2917 = _2670;
                float _2918 = _2672;
                uint _2919 = _2679;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2929)
                    {
                        frontier_phi_69_pred = _2918;
                        frontier_phi_69_pred_1 = _2917;
                        frontier_phi_69_pred_2 = _2916;
                        frontier_phi_69_pred_3 = _2915;
                        frontier_phi_69_pred_4 = _2914;
                        frontier_phi_69_pred_5 = _2913;
                    }
                    else
                    {
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        uint _3132 = _2928;
                        uint _3133;
                        vec4 _3158;
                        float _3159;
                        vec4 _3174;
                        vec3 _3186;
                        vec4 _3201;
                        vec4 _3217;
                        float _3264;
                        bool _3265;
                        for (;;)
                        {
                            uint _3143 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3132));
                            _3133 = (_3132 + 4294967295u) & _3132;
                            uint _3145 = _3143 * 40u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3159 = _3158.w;
                            uint _3161 = (_3143 * 40u) + 4u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3143 * 40u) + 8u;
                            _3186 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x));
                            uint _3188 = (_3143 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3204 = (_3143 * 40u) + 20u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3220 = (_3143 * 40u) + 24u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3239 = (_3143 * 40u) + 28u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3264 = fma(_2518, _3252.z, fma(_2517, _3252.y, _3252.x * _2516)) + _3252.w;
                            _3265 = !((fma(_2518, _3233.z, fma(_2517, _3233.y, _3233.x * _2516)) + _3233.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3265)
                            {
                                float _3292 = _3158.x - _2516;
                                float _3293 = _3158.y - _2517;
                                float _3294 = _3158.z - _2518;
                                float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                                float _3298 = inversesqrt(_3295);
                                float _3299 = _3298 * _3292;
                                float _3300 = _3298 * _3293;
                                float _3301 = _3298 * _3294;
                                float _3305 = 1.0 - (_3295 / (_3159 * _3159));
                                float _4376 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3310 = sqrt(_3295) * _3174.w;
                                float _3312 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                                float _3313 = _3312 * _3312;
                                float _3316 = ((1.0 - _3313) * dot(vec3(_3299, _3300, _3301), vec3(_793, _796, _799))) + _3313;
                                float _3319 = _3310 * _3310;
                                float _3323 = (fma(_2518, _3201.z, fma(_2517, _3201.y, _3201.x * _2516)) + _3201.w) / _3264;
                                float _3324 = (fma(_2518, _3217.z, fma(_2517, _3217.y, _3217.x * _2516)) + _3217.w) / _3264;
                                float _3328 = 1.0 - dot(vec2(_3323, _3324), vec2(_3323, _3324));
                                float _4392 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3330 = _3329 * (((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3306) / ((_3319 * 0.699999988079071044921875) + 1.0));
                                float _3342 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                                float _3343 = 1.0 - _853;
                                float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                                float _3351 = _3350 * _3350;
                                float _3352 = _3351 * _3351;
                                float _3353 = _3299 - _2800;
                                float _3354 = _3300 - _2801;
                                float _3355 = _3301 - _2802;
                                float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                                float _3363 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2800, (-0.0) - _2801, (-0.0) - _2802));
                                float _4403 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3367 = dot(vec3(_793, _796, _799), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                                float _4414 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                                float _3375 = _3312 * _3351;
                                float _3376 = _3375 * _3375;
                                float _3382 = ((1.0 - _3376) * dot(vec3(_793, _796, _799), vec3(_3299, _3300, _3301))) + _3376;
                                float _4425 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3384 = 1.0 - _3351;
                                float _3394 = (0.5 / (((_3383 * ((_3366 * _3384) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3351) * _3366))) * _3383;
                                float _4436 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3404 = (_3329 * _3306) * (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3374 * _3374) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3330 * _3174.z;
                                frontier_phi_75_pred_1 = _3330 * _3174.y;
                                frontier_phi_75_pred_2 = _3330 * _3174.x;
                                frontier_phi_75_pred_3 = _3404 * _3186.z;
                                frontier_phi_75_pred_4 = _3404 * _3186.y;
                                frontier_phi_75_pred_5 = _3404 * _3186.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3413 = frontier_phi_75_pred;
                            _3412 = frontier_phi_75_pred_1;
                            _3411 = frontier_phi_75_pred_2;
                            _3410 = frontier_phi_75_pred_3;
                            _3409 = frontier_phi_75_pred_4;
                            _3408 = frontier_phi_75_pred_5;
                            _3116 = _3411 + _3129;
                            _3117 = _3412 + _3130;
                            _3118 = _3413 + _3131;
                            _3113 = _3408 + _3126;
                            _3114 = _3409 + _3127;
                            _3115 = _3410 + _3128;
                            if (_3133 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3133;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3118;
                        frontier_phi_69_pred_1 = _3117;
                        frontier_phi_69_pred_2 = _3116;
                        frontier_phi_69_pred_3 = _3115;
                        frontier_phi_69_pred_4 = _3114;
                        frontier_phi_69_pred_5 = _3113;
                    }
                    _2785 = frontier_phi_69_pred;
                    _2783 = frontier_phi_69_pred_1;
                    _2781 = frontier_phi_69_pred_2;
                    _2779 = frontier_phi_69_pred_3;
                    _2777 = frontier_phi_69_pred_4;
                    _2775 = frontier_phi_69_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2775;
                        _2914 = _2777;
                        _2915 = _2779;
                        _2916 = _2781;
                        _2917 = _2783;
                        _2918 = _2785;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2785;
                frontier_phi_57_58_ladder_1 = _2783;
                frontier_phi_57_58_ladder_2 = _2781;
                frontier_phi_57_58_ladder_3 = _2779;
                frontier_phi_57_58_ladder_4 = _2777;
                frontier_phi_57_58_ladder_5 = _2775;
            }
            else
            {
                frontier_phi_57_58_ladder = _2672;
                frontier_phi_57_58_ladder_1 = _2670;
                frontier_phi_57_58_ladder_2 = _2668;
                frontier_phi_57_58_ladder_3 = _2666;
                frontier_phi_57_58_ladder_4 = _2664;
                frontier_phi_57_58_ladder_5 = _2662;
            }
            _2774 = frontier_phi_57_58_ladder_5;
            _2776 = frontier_phi_57_58_ladder_4;
            _2778 = frontier_phi_57_58_ladder_3;
            _2780 = frontier_phi_57_58_ladder_2;
            _2782 = frontier_phi_57_58_ladder_1;
            _2784 = frontier_phi_57_58_ladder;
        }
        float _2789 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2574 = (_2789 * _2780) + _2027;
        _2576 = (_2789 * _2782) + _2029;
        _2578 = (_2789 * _2784) + _2031;
        _2580 = ((_2774 * 0.039999999105930328369140625) * _2789) + _2360;
        _2582 = ((_2776 * 0.039999999105930328369140625) * _2789) + _2362;
        _2584 = ((_2778 * 0.039999999105930328369140625) * _2789) + _2364;
    }
    else
    {
        _2574 = _2027;
        _2576 = _2029;
        _2578 = _2031;
        _2580 = _2360;
        _2582 = _2362;
        _2584 = _2364;
    }
    float _4452 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4463 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4474 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    uint _2604 = _812 + 6u;
    float _2612 = _774 / cbSceneParam._m0[86u].x;
    float _2613 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2627 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2629 = _2627.x;
    float _2630 = _2627.y;
    float _2631 = _2627.z;
    float _2632 = _2627.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _2687 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _2688 = _2687 / _709;
        float _2699 = _2688 * _759;
        float _2700 = _760 * _2688;
        float _2701 = (-0.0) - _2700;
        float _2702 = _2688 * _761;
        float _2704 = (cbSceneParam._m0[77u].w * _2701) / _2687;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2700;
        float _2712 = sqrt(((_2699 * _2699) + (_2700 * _2700)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2687)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2701 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2835 = 1.0 / cbSceneParam._m0[80u].x;
            float _2836 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2837 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            _2875 = ((abs(_2712 / _2701) * cbSceneParam._m0[80u].y) * ((((_2846 - _2847) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))))) * _2835)) - ((exp2(_2722 * _2846) - exp2(_2722 * _2847)) * _2835))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2632);
        _2724 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2629;
        _2726 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2630;
        _2728 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2631;
        _2730 = _2886 * _2632;
    }
    else
    {
        _2724 = _2629;
        _2726 = _2630;
        _2728 = _2631;
        _2730 = _2632;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2751 = exp2(_2744 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2574 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _837))) + ((_2580 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2752 = exp2(_2744 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2576 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _837))) + ((_2582 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2753 = exp2(_2744 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2578 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _837))) + ((_2584 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2604].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2604].w;
}


