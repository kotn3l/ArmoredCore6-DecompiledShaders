#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _909;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = cbMtdParam._m0[10u].x * _284.x;
    float _297 = cbMtdParam._m0[10u].y * _284.y;
    float _298 = cbMtdParam._m0[10u].z * _284.z;
    float _299 = _284.w * TEXCOORD_1.z;
    vec4 _311 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _321 = (_311.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3264 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))));
    vec4 _343 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _363 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _384 = fma(0.989949524402618408203125, _212, fma(-0.10000002384185791015625, _205, _191 * (-0.10000002384185791015625)));
    float _388 = fma(0.989949524402618408203125, _213, fma(-0.10000002384185791015625, _206, _192 * (-0.10000002384185791015625)));
    float _391 = fma(0.989949524402618408203125, _214, fma(-0.10000002384185791015625, _207, _193 * (-0.10000002384185791015625)));
    float _395 = inversesqrt(dot(vec3(_384, _388, _391), vec3(_384, _388, _391)));
    float _402 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _403 = _402 * _269;
    float _404 = _402 * _270;
    float _405 = _402 * _271;
    float _409 = dot(vec4(_403, _404, _405, 0.0), vec4(_395 * _384, _395 * _388, _395 * _391, 0.0)) - cbMtdParam._m0[11u].z;
    float _3275 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _416 = exp2(log2(1.0 - (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _417 = TEXCOORD_1.z * 10.0;
    float _430 = fma(_328, _212, fma(_321, _205, _319 * _191));
    float _433 = fma(_328, _213, fma(_321, _206, _319 * _192));
    float _436 = fma(_328, _214, fma(_321, _207, _319 * _193));
    float _440 = inversesqrt(dot(vec3(_430, _433, _436), vec3(_430, _433, _436)));
    float _441 = _440 * _430;
    float _442 = _440 * _433;
    float _443 = _440 * _436;
    float _3291 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _444 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _445 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3324 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3335 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _464 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _471 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _492 = fma(_443, cbSceneParam._m0[5u].z, fma(_442, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _441));
    float _495 = fma(_443, cbSceneParam._m0[6u].z, fma(_442, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _441));
    float _498 = fma(_443, cbSceneParam._m0[7u].z, fma(_442, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _441));
    uint _511 = uint(roundEven(NORMAL.w)) * 13u;
    uint _513 = _511 + 9u;
    uint _514 = _513 + uint(cbMatDynParam._m0[0u].w);
    float _520 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_514].x;
    float _521 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_514].y;
    float _522 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_514].z;
    float _3346 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    vec4 _534 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _470, cbSceneParam._m0[86u].y * _471));
    float _537 = _534.x * TEXCOORD_1.w;
    float _538 = dot(vec3(_441, _442, _443), vec3(_403, _404, _405));
    float _541 = _538 * 2.0;
    float _545 = (_541 * _441) - _403;
    float _546 = (_541 * _442) - _404;
    float _547 = (_541 * _443) - _405;
    float _551 = abs(dot(vec3(_403, _404, _405), vec3(_441, _442, _443)));
    float _3379 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _553 = sqrt(_445);
    float _566 = exp2((_553 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_553 * 3.0));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _666 = _598 + _441;
        float _667 = _602 + _442;
        float _668 = _606 + _443;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_441, _442, _443), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3427 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_441, _442, _443), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3460 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_441, _442, _443), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3493 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _953 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _957 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _980 = _598 + _441;
        float _981 = _602 + _442;
        float _982 = _606 + _443;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_441, _442, _443), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3556 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_441, _442, _443), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3589 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_441, _442, _443), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3622 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _545 * 0.5;
    float _1287 = _546 * 0.5;
    float _1288 = _547 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _912, _915, _918));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_910, _913, _916, _919));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_911, _914, _917, _920));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _445);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_547, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545));
        float _1418 = fma(_547, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545));
        float _1421 = fma(_547, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1449 = frontier_phi_16_14_ladder;
        }
        float _1654;
        if (_1418 > 0.0)
        {
            _1654 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1654 = frontier_phi_25_21_ladder;
        }
        float _1897;
        if (_1421 > 0.0)
        {
            _1897 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1897 = frontier_phi_37_32_ladder;
        }
        float _1899 = isnan(_1654) ? _1449 : (isnan(_1449) ? _1654 : min(_1449, _1654));
        float _1900 = isnan(_1897) ? _1899 : (isnan(_1899) ? _1897 : min(_1899, _1897));
        float _1904 = (_1900 * _1415) + _1404;
        float _1905 = (_1900 * _1418) + _1408;
        float _1906 = (_1900 * _1421) + _1412;
        float _1907 = _1900 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1907;
        float _1911 = _1907 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 > _1911) || ((_1905 < _1909) || ((_1904 < _1909) || (_1904 > _1911))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1906, cbModelParam._m0[9u].z, fma(_1905, cbModelParam._m0[9u].y, _1904 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1906, cbModelParam._m0[10u].z, fma(_1905, cbModelParam._m0[10u].y, _1904 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1906, cbModelParam._m0[11u].z, fma(_1905, cbModelParam._m0[11u].y, _1904 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_15_37_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_15_37_ladder_2;
        _1439 = frontier_phi_15_37_ladder_1;
        _1441 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_545, _546, _547), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _445);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_547, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545));
        float _1517 = fma(_547, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545));
        float _1520 = fma(_547, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545));
        float _1659;
        if (_1514 > 0.0)
        {
            _1659 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1659 = frontier_phi_27_23_ladder;
        }
        float _1924;
        if (_1517 > 0.0)
        {
            _1924 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1924 = frontier_phi_39_34_ladder;
        }
        float _2129;
        if (_1520 > 0.0)
        {
            _2129 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2129 = frontier_phi_48_45_ladder;
        }
        float _2131 = isnan(_1924) ? _1659 : (isnan(_1659) ? _1924 : min(_1659, _1924));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1514) + _1503;
        float _2137 = (_2132 * _1517) + _1507;
        float _2138 = (_2132 * _1520) + _1511;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2139;
        float _2142 = _2139 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2138 > _2142) || ((_2138 < _2140) || ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 < _2140) || (_2136 > _2142))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2138, cbModelParam._m0[17u].z, fma(_2137, cbModelParam._m0[17u].y, _2136 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2138, cbModelParam._m0[18u].z, fma(_2137, cbModelParam._m0[18u].y, _2136 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2138, cbModelParam._m0[19u].z, fma(_2137, cbModelParam._m0[19u].y, _2136 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_24_48_ladder = _2367.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2367.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2367.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_24_48_ladder_2;
        _1541 = frontier_phi_24_48_ladder_1;
        _1543 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_545, _546, _547), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1555 = ((((1.0 - _566) * ((_553 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_566 * _553)) * _537;
    float _1556 = _1555 * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1557 = _1555 * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1558 = _1555 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_511 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _537 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1613 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1617 = _1579 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_441, _442, _443));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_441, _442, _443));
    float _3758 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3769 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1596].x * _1602) * _1638) + ((cbLight._m0[_1606].x * _1613) * _1636);
    float _1646 = ((_1602 * cbLight._m0[_1596].y) * _1638) + ((_1613 * cbLight._m0[_1606].y) * _1636);
    float _1647 = ((_1602 * cbLight._m0[_1596].z) * _1638) + ((_1613 * cbLight._m0[_1606].z) * _1636);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1653 = _1651.x == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1653)
    {
        _1664 = _1645;
        _1666 = _1646;
        _1668 = _1647;
    }
    else
    {
        uint _1672 = _1579 + 6u;
        float _1688 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_441, _442, _443)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3780 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1691 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1664 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1645;
        _1666 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1646;
        _1668 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1647;
    }
    bool _1671 = _1651.y == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1671)
    {
        _1709 = _1664;
        _1711 = _1666;
        _1713 = _1668;
    }
    else
    {
        uint _1868 = _1579 + 7u;
        float _1884 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_441, _442, _443)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3796 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1887 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1709 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1664;
        _1711 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1666;
        _1713 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1668;
    }
    uint _1716 = _1579 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _445) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1579].x + _403;
    float _1732 = cbLight._m0[_1579].y + _404;
    float _1733 = cbLight._m0[_1579].z + _405;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_1579].xyz));
    float _3812 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _1745 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1746 = dot(vec3(_441, _442, _443), vec3(_1738, _1739, _1740));
    float _3834 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1738, _1739, _1740));
    float _3845 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1769 = (exp2(log2(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1770 = 1.0 - _1730;
    float _1781 = (0.5 / (((_1745 * ((_1744 * _1770) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1770) + _1730) * _1744))) * _1744;
    float _3856 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1794 = _1579 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _445) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1617].x + _403;
    float _1808 = cbLight._m0[_1617].y + _404;
    float _1809 = cbLight._m0[_1617].z + _405;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_1617].xyz));
    float _3867 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1821 = dot(vec3(_441, _442, _443), vec3(_1814, _1815, _1816));
    float _3878 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1814, _1815, _1816));
    float _3889 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1843 = 1.0 - _1806;
    float _1853 = (0.5 / (((_1745 * ((_1820 * _1843) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1843) + _1806) * _1820))) * _1820;
    float _3900 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1865 = (((_1842 * cbLight._m0[_1794].x) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].x) * _1783) * _1613);
    float _1866 = (((_1842 * cbLight._m0[_1794].y) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].y) * _1783) * _1613);
    float _1867 = (((_1842 * cbLight._m0[_1794].z) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].z) * _1783) * _1613);
    float _1929;
    float _1931;
    float _1933;
    if (_1653)
    {
        _1929 = _1865;
        _1931 = _1866;
        _1933 = _1867;
    }
    else
    {
        uint _1935 = _1579 + 2u;
        uint _1939 = _1579 + 10u;
        float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _445) * 0.949999988079071044921875);
        float _1954 = _1953 * _1953;
        float _1955 = cbLight._m0[_1935].x + _403;
        float _1956 = cbLight._m0[_1935].y + _404;
        float _1957 = cbLight._m0[_1935].z + _405;
        float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
        float _1962 = _1961 * _1955;
        float _1963 = _1961 * _1956;
        float _1964 = _1961 * _1957;
        float _1965 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_1935].xyz));
        float _3911 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1969 = dot(vec3(_441, _442, _443), vec3(_1962, _1963, _1964));
        float _3922 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1973 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_1962, _1963, _1964));
        float _3933 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1977 = _1954 * _1954;
        float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
        float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1991 = 1.0 - _1954;
        float _2001 = (0.5 / (((_1745 * ((_1968 * _1991) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1991) + _1954) * _1968))) * _1968;
        float _3944 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1929 = (((_1990 * cbLight._m0[_1939].x) * _2003) * _2004) + _1865;
        _1931 = (((_1990 * cbLight._m0[_1939].y) * _2003) * _2004) + _1866;
        _1933 = (((_1990 * cbLight._m0[_1939].z) * _2003) * _2004) + _1867;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1671)
    {
        _2039 = _1929;
        _2041 = _1931;
        _2043 = _1933;
    }
    else
    {
        uint _2050 = _1579 + 3u;
        uint _2054 = _1579 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _445) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _403;
        float _2071 = cbLight._m0[_2050].y + _404;
        float _2072 = cbLight._m0[_2050].z + _405;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_2050].xyz));
        float _3960 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2084 = dot(vec3(_441, _442, _443), vec3(_2077, _2078, _2079));
        float _3971 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _3982 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2106 = 1.0 - _2069;
        float _2116 = (0.5 / (((_1745 * ((_2083 * _2106) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2106) + _2069) * _2083))) * _2083;
        float _3993 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2039 = (((_2105 * cbLight._m0[_2054].x) * _2118) * _2119) + _1929;
        _2041 = (((_2105 * cbLight._m0[_2054].y) * _2118) * _2119) + _1931;
        _2043 = (((_2105 * cbLight._m0[_2054].z) * _2118) * _2119) + _1933;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1577.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _471) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _470) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            uint _2531 = 0u;
            uint _2540;
            bool _2541;
            for (;;)
            {
                _2540 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                _2541 = _2540 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2541)
                {
                    frontier_phi_63_pred = _2530;
                    frontier_phi_63_pred_1 = _2529;
                    frontier_phi_63_pred_2 = _2528;
                    frontier_phi_63_pred_3 = _2527;
                    frontier_phi_63_pred_4 = _2526;
                    frontier_phi_63_pred_5 = _2525;
                }
                else
                {
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    uint _2655;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2540;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2659 = uint(findLSB(_2655)) + (_2531 << 5u);
                        uint _2656 = (_2655 + 4294967295u) & _2655;
                        uint _2661 = _2659 * 48u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2681 = (_2659 * 48u) + 4u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2700 = (_2659 * 48u) + 8u;
                        vec3 _2711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x));
                        float _2715 = _2675.x - _2195;
                        float _2716 = _2675.y - _2196;
                        float _2717 = _2675.z - _2197;
                        float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                        float _2721 = inversesqrt(_2718);
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2725 = dot(vec3(_492, _495, _498), vec3(_2722, _2723, _2724));
                        float _2730 = 1.0 - (_2718 * _2675.w);
                        float _4019 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2732 = sqrt(_2718) * _2694.w;
                        float _2735 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2725) + _2736;
                        float _2742 = _2732 * _2732;
                        float _2746 = ((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2731) / ((_2742 * 0.699999988079071044921875) + 1.0);
                        float _2750 = (-0.0) - _2195;
                        float _2751 = (-0.0) - _2196;
                        float _2752 = (-0.0) - _2197;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2767 = exp2(log2(1.0 / ((_2742 * 3.5) + 5.0)) * 0.25);
                        float _2768 = 1.0 - _553;
                        float _2775 = sqrt(1.0 - ((1.0 - (_2768 * _2768)) * (1.0 - (_2767 * _2767))));
                        float _2776 = _2775 * _2775;
                        float _2777 = _2776 * _2776;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2788 = dot(vec3(_492, _495, _498), vec3(_2757, _2758, _2759));
                        float _4035 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2792 = dot(vec3(_492, _495, _498), vec3(_2784 * _2778, _2784 * _2779, _2784 * _2780));
                        float _4046 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2799 = ((_2795 * _2795) * (_2777 + (-1.0))) + 1.0;
                        float _2800 = _2735 * _2776;
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2725) + _2801;
                        float _4057 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2806 = 1.0 - _2776;
                        float _2816 = (0.5 / (((_2805 * ((_2791 * _2806) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2805 * _2806) + _2776) * _2791))) * _2805;
                        float _4068 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2827 = (((_2777 * 3.1415927410125732421875) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) / ((_2799 * _2799) * ((_2742 * 2.1991131305694580078125) + 3.141590118408203125))) * _2731;
                        _2584 = (_2746 * _2694.x) + _2652;
                        _2585 = (_2746 * _2694.y) + _2653;
                        _2586 = (_2746 * _2694.z) + _2654;
                        _2581 = (_2827 * _2711.x) + _2649;
                        _2582 = (_2827 * _2711.y) + _2650;
                        _2583 = (_2827 * _2711.z) + _2651;
                        if (_2656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2656;
                        }
                    }
                    frontier_phi_63_pred = _2586;
                    frontier_phi_63_pred_1 = _2585;
                    frontier_phi_63_pred_2 = _2584;
                    frontier_phi_63_pred_3 = _2583;
                    frontier_phi_63_pred_4 = _2582;
                    frontier_phi_63_pred_5 = _2581;
                }
                _2383 = frontier_phi_63_pred;
                _2381 = frontier_phi_63_pred_1;
                _2379 = frontier_phi_63_pred_2;
                _2377 = frontier_phi_63_pred_3;
                _2375 = frontier_phi_63_pred_4;
                _2373 = frontier_phi_63_pred_5;
                uint _2532 = _2531 + 1u;
                if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2525 = _2373;
                    _2526 = _2375;
                    _2527 = _2377;
                    _2528 = _2379;
                    _2529 = _2381;
                    _2530 = _2383;
                    _2531 = _2532;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((4294967295u << _2389) & _2241) == 0u)
        {
            _2493 = _2372;
            _2495 = _2374;
            _2497 = _2376;
            _2499 = _2378;
            _2501 = _2380;
            _2503 = _2382;
        }
        else
        {
            float _2518 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2519 = _2518 * _2195;
            float _2520 = _2518 * _2196;
            float _2521 = _2518 * _2197;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2632 = _2372;
                float _2633 = _2374;
                float _2634 = _2376;
                float _2635 = _2378;
                float _2636 = _2380;
                float _2637 = _2382;
                uint _2638 = _2389;
                uint _2647;
                bool _2648;
                for (;;)
                {
                    _2647 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                    _2648 = _2647 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2648)
                    {
                        frontier_phi_69_pred = _2637;
                        frontier_phi_69_pred_1 = _2636;
                        frontier_phi_69_pred_2 = _2635;
                        frontier_phi_69_pred_3 = _2634;
                        frontier_phi_69_pred_4 = _2633;
                        frontier_phi_69_pred_5 = _2632;
                    }
                    else
                    {
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        uint _2851 = _2647;
                        uint _2852;
                        vec4 _2877;
                        float _2878;
                        vec4 _2893;
                        vec3 _2905;
                        vec4 _2921;
                        vec4 _2937;
                        float _2984;
                        bool _2985;
                        for (;;)
                        {
                            uint _2862 = ((_2638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2851));
                            _2852 = (_2851 + 4294967295u) & _2851;
                            uint _2864 = _2862 * 40u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2878 = _2877.w;
                            uint _2880 = (_2862 * 40u) + 4u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2862 * 40u) + 8u;
                            _2905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x));
                            uint _2908 = (_2862 * 40u) + 16u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2862 * 40u) + 20u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2862 * 40u) + 24u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2959 = (_2862 * 40u) + 28u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2984 = fma(_2197, _2972.z, fma(_2196, _2972.y, _2972.x * _2195)) + _2972.w;
                            _2985 = !((fma(_2197, _2953.z, fma(_2196, _2953.y, _2953.x * _2195)) + _2953.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2985)
                            {
                                float _3012 = _2877.x - _2195;
                                float _3013 = _2877.y - _2196;
                                float _3014 = _2877.z - _2197;
                                float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                                float _3018 = inversesqrt(_3015);
                                float _3019 = _3018 * _3012;
                                float _3020 = _3018 * _3013;
                                float _3021 = _3018 * _3014;
                                float _3025 = 1.0 - (_3015 / (_2878 * _2878));
                                float _4079 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3030 = sqrt(_3015) * _2893.w;
                                float _3032 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                                float _3033 = _3032 * _3032;
                                float _3036 = ((1.0 - _3033) * dot(vec3(_3019, _3020, _3021), vec3(_492, _495, _498))) + _3033;
                                float _3039 = _3030 * _3030;
                                float _3043 = (fma(_2197, _2921.z, fma(_2196, _2921.y, _2921.x * _2195)) + _2921.w) / _2984;
                                float _3044 = (fma(_2197, _2937.z, fma(_2196, _2937.y, _2937.x * _2195)) + _2937.w) / _2984;
                                float _3048 = 1.0 - dot(vec2(_3043, _3044), vec2(_3043, _3044));
                                float _4095 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3050 = _3049 * (((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3026) / ((_3039 * 0.699999988079071044921875) + 1.0));
                                float _3062 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                                float _3063 = 1.0 - _553;
                                float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                                float _3071 = _3070 * _3070;
                                float _3072 = _3071 * _3071;
                                float _3073 = _3019 - _2519;
                                float _3074 = _3020 - _2520;
                                float _3075 = _3021 - _2521;
                                float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                                float _3083 = dot(vec3(_492, _495, _498), vec3((-0.0) - _2519, (-0.0) - _2520, (-0.0) - _2521));
                                float _4106 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3087 = dot(vec3(_492, _495, _498), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                                float _4117 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                                float _3095 = _3032 * _3071;
                                float _3096 = _3095 * _3095;
                                float _3102 = ((1.0 - _3096) * dot(vec3(_492, _495, _498), vec3(_3019, _3020, _3021))) + _3096;
                                float _4128 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                                float _3104 = 1.0 - _3071;
                                float _3114 = (0.5 / (((_3103 * ((_3086 * _3104) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3071) * _3086))) * _3103;
                                float _4139 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3124 = (_3049 * _3026) * (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) / ((_3094 * _3094) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3050 * _2893.z;
                                frontier_phi_75_pred_1 = _3050 * _2893.y;
                                frontier_phi_75_pred_2 = _3050 * _2893.x;
                                frontier_phi_75_pred_3 = _3124 * _2905.z;
                                frontier_phi_75_pred_4 = _3124 * _2905.y;
                                frontier_phi_75_pred_5 = _3124 * _2905.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3133 = frontier_phi_75_pred;
                            _3132 = frontier_phi_75_pred_1;
                            _3131 = frontier_phi_75_pred_2;
                            _3130 = frontier_phi_75_pred_3;
                            _3129 = frontier_phi_75_pred_4;
                            _3128 = frontier_phi_75_pred_5;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            if (_2852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2852;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2837;
                        frontier_phi_69_pred_1 = _2836;
                        frontier_phi_69_pred_2 = _2835;
                        frontier_phi_69_pred_3 = _2834;
                        frontier_phi_69_pred_4 = _2833;
                        frontier_phi_69_pred_5 = _2832;
                    }
                    _2504 = frontier_phi_69_pred;
                    _2502 = frontier_phi_69_pred_1;
                    _2500 = frontier_phi_69_pred_2;
                    _2498 = frontier_phi_69_pred_3;
                    _2496 = frontier_phi_69_pred_4;
                    _2494 = frontier_phi_69_pred_5;
                    uint _2639 = _2638 + 1u;
                    if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2632 = _2494;
                        _2633 = _2496;
                        _2634 = _2498;
                        _2635 = _2500;
                        _2636 = _2502;
                        _2637 = _2504;
                        _2638 = _2639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2504;
                frontier_phi_57_58_ladder_1 = _2502;
                frontier_phi_57_58_ladder_2 = _2500;
                frontier_phi_57_58_ladder_3 = _2498;
                frontier_phi_57_58_ladder_4 = _2496;
                frontier_phi_57_58_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_57_58_ladder = _2382;
                frontier_phi_57_58_ladder_1 = _2380;
                frontier_phi_57_58_ladder_2 = _2378;
                frontier_phi_57_58_ladder_3 = _2376;
                frontier_phi_57_58_ladder_4 = _2374;
                frontier_phi_57_58_ladder_5 = _2372;
            }
            _2493 = frontier_phi_57_58_ladder_5;
            _2495 = frontier_phi_57_58_ladder_4;
            _2497 = frontier_phi_57_58_ladder_3;
            _2499 = frontier_phi_57_58_ladder_2;
            _2501 = frontier_phi_57_58_ladder_1;
            _2503 = frontier_phi_57_58_ladder;
        }
        float _2508 = isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0));
        _2253 = (_2508 * _2499) + _1709;
        _2255 = (_2508 * _2501) + _1711;
        _2257 = (_2508 * _2503) + _1713;
        _2259 = ((_2493 * 0.039999999105930328369140625) * _2508) + _2039;
        _2261 = ((_2495 * 0.039999999105930328369140625) * _2508) + _2041;
        _2263 = ((_2497 * 0.039999999105930328369140625) * _2508) + _2043;
    }
    else
    {
        _2253 = _1709;
        _2255 = _1711;
        _2257 = _1713;
        _2259 = _2039;
        _2261 = _2041;
        _2263 = _2043;
    }
    uint _2269 = _513 + uint(cbMatDynParam._m0[0u].w);
    float _2275 = cbInstanceData._m0[_2269].x * (((_363.x * cbMtdParam._m0[11u].w) + (_343.x * cbMtdParam._m0[11u].y)) + ((_417 * cbMtdParam._m0[9u].x) * _416));
    float _2276 = cbInstanceData._m0[_2269].y * (((_363.y * cbMtdParam._m0[11u].w) + (_343.y * cbMtdParam._m0[11u].y)) + ((_417 * cbMtdParam._m0[9u].y) * _416));
    float _2277 = cbInstanceData._m0[_2269].z * (((_363.z * cbMtdParam._m0[11u].w) + (_343.z * cbMtdParam._m0[11u].y)) + ((_417 * cbMtdParam._m0[9u].z) * _416));
    float _4155 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4166 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4177 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4188 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _2295 = (((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2253 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _537))) + ((_2259 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + _2275;
    float _2297 = (_2276 + ((_2261 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2255 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _537)));
    float _2299 = (_2277 + ((_2263 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2257 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _537)));
    float _4214 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2312 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2317 = cbInstanceData._m0[_511 + 6u].w * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)));
    float _2322 = _470 / cbSceneParam._m0[86u].x;
    float _2323 = _471 / cbSceneParam._m0[86u].y;
    vec4 _2337 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, (log2((isnan(cbSceneParam._m0[77u].w) ? _464 : (isnan(_464) ? cbSceneParam._m0[77u].w : min(_464, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2339 = _2337.x;
    float _2340 = _2337.y;
    float _2341 = _2337.z;
    float _2342 = _2337.w;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_464 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_464) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _464 : min(cbSceneParam._m0[80u].w, _464));
        float _2398 = _2397 / _464;
        float _2409 = _2398 * _269;
        float _2410 = _270 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2412 = _2398 * _271;
        float _2414 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2410;
        float _2422 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2422;
        float _2430 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2432 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2411 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2415 > 0.0) ? exp2(_2430 * _2415) : (2.0 - exp2(_2432 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2554 = 1.0 / cbSceneParam._m0[80u].x;
            float _2555 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2556 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            _2594 = ((abs(_2422 / _2411) * cbSceneParam._m0[80u].y) * ((((_2565 - _2566) * 2.0) - ((exp2(_2430 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)))) - exp2(_2430 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))))) * _2554)) - ((exp2(_2432 * _2565) - exp2(_2432 * _2566)) * _2554))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2342);
        _2434 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2339;
        _2436 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2340;
        _2438 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2341;
        _2440 = _2605 * _2342;
    }
    else
    {
        _2434 = _2339;
        _2436 = _2340;
        _2438 = _2341;
        _2440 = _2342;
    }
    float _2452 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2453 = _2452 == 3.0;
    float _2454 = log2(_2440);
    float _2458 = exp2(_2454 * cbSceneParam._m0[78u].x);
    float _2459 = exp2(_2454 * cbSceneParam._m0[78u].y);
    float _2460 = exp2(_2454 * cbSceneParam._m0[78u].z);
    float _2461 = _2458 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2462 = _2459 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2463 = _2460 * (isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)));
    float _2472 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2472 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.y = _2472 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.z = _2472 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2438)));
    SV_Target.w = _2317;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2275) * _2312) * _2458) * _2472;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2276) * _2312) * _2459) * _2472;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2277) * _2312) * _2460) * _2472;
    SV_Target_1.w = _2317;
}


