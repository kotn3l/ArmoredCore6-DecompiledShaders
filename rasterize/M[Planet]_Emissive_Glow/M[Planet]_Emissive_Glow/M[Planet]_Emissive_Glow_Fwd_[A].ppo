#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _920;
float _3325;
float _3326;
float _3327;
float _3328;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.w;
    float _300 = cbMtdParam._m0[10u].x * _288.x;
    float _301 = cbMtdParam._m0[10u].y * _288.y;
    float _302 = cbMtdParam._m0[10u].z * _288.z;
    float _303 = _294 * TEXCOORD_1.z;
    vec4 _315 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3337 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))));
    vec4 _347 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _367 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _388 = fma(0.989949524402618408203125, _216, fma(-0.10000002384185791015625, _209, _195 * (-0.10000002384185791015625)));
    float _392 = fma(0.989949524402618408203125, _217, fma(-0.10000002384185791015625, _210, _196 * (-0.10000002384185791015625)));
    float _395 = fma(0.989949524402618408203125, _218, fma(-0.10000002384185791015625, _211, _197 * (-0.10000002384185791015625)));
    float _399 = inversesqrt(dot(vec3(_388, _392, _395), vec3(_388, _392, _395)));
    float _406 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _407 = _406 * _273;
    float _408 = _406 * _274;
    float _409 = _406 * _275;
    float _413 = dot(vec4(_407, _408, _409, 0.0), vec4(_399 * _388, _399 * _392, _399 * _395, 0.0)) - cbMtdParam._m0[11u].z;
    float _3348 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _420 = exp2(log2(1.0 - (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _421 = TEXCOORD_1.z * 10.0;
    float _434 = fma(_332, _216, fma(_325, _209, _323 * _195));
    float _437 = fma(_332, _217, fma(_325, _210, _323 * _196));
    float _440 = fma(_332, _218, fma(_325, _211, _323 * _197));
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    float _445 = _444 * _434;
    float _446 = _444 * _437;
    float _447 = _444 * _440;
    float _3364 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _448 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _449 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3397 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3408 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _473 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _475 = _473.w;
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_447, cbSceneParam._m0[5u].z, fma(_446, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _445));
    float _506 = fma(_447, cbSceneParam._m0[6u].z, fma(_446, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _445));
    float _509 = fma(_447, cbSceneParam._m0[7u].z, fma(_446, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _445));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _524 = _522 + 9u;
    uint _525 = _524 + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3419 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _548 = _545.x * TEXCOORD_1.w;
    float _549 = dot(vec3(_445, _446, _447), vec3(_407, _408, _409));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _445) - _407;
    float _557 = (_552 * _446) - _408;
    float _558 = (_552 * _447) - _409;
    float _562 = abs(dot(vec3(_407, _408, _409), vec3(_445, _446, _447)));
    float _3452 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_449);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _644 = fma(_617, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609));
        float _648 = fma(_617, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609));
        float _652 = fma(_617, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609));
        float _677 = _609 + _445;
        float _678 = _613 + _446;
        float _679 = _617 + _447;
        float _689 = fma(_679, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677)) - _644;
        float _690 = fma(_679, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677)) - _648;
        float _691 = fma(_679, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677)) - _652;
        float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
        float _708 = ((_695 * _689) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_644 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_695 * _690) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_648 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_695 * _691) / cbModelParam._m0[34u].z) + ((((((_652 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(_445, _446, _447), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3500 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_445, _446, _447), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3533 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_445, _446, _447), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3566 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _960 = fma(_617, cbModelParam._m0[30u].z, fma(_613, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609));
        float _964 = fma(_617, cbModelParam._m0[31u].z, fma(_613, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609));
        float _968 = fma(_617, cbModelParam._m0[32u].z, fma(_613, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609));
        float _991 = _609 + _445;
        float _992 = _613 + _446;
        float _993 = _617 + _447;
        float _1003 = fma(_993, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991)) - _960;
        float _1004 = fma(_993, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991)) - _964;
        float _1005 = fma(_993, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991)) - _968;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_960 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_964 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[35u].z) + ((((((_968 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1059 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1026.x + (-0.5));
        float _1061 = _1059 * (_1026.y + (-0.5));
        float _1062 = _1059 * (_1026.z + (-0.5));
        float _1069 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1033.x + (-0.5));
        float _1071 = _1069 * (_1033.y + (-0.5));
        float _1072 = _1069 * (_1033.z + (-0.5));
        float _1079 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1040.x + (-0.5));
        float _1081 = _1079 * (_1040.y + (-0.5));
        float _1082 = _1079 * (_1040.z + (-0.5));
        float _1089 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1047.x + (-0.5));
        float _1091 = _1089 * (_1047.y + (-0.5));
        float _1092 = _1089 * (_1047.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_445, _446, _447), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3629 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1123 + 1.0))) + _1128) * _1093;
        float _1138 = _1061 * 0.5;
        float _1139 = _1071 * 0.5;
        float _1140 = _1081 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_445, _446, _447), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3662 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1165 + 1.0))) + _1170) * _1094;
        float _1180 = _1062 * 0.5;
        float _1181 = _1072 * 0.5;
        float _1182 = _1082 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_445, _446, _447), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3695 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1207 + 1.0))) + _1212) * _1095;
        _1229 = _1062;
        _1230 = _1061;
        _1231 = _1060;
        _1232 = _1072;
        _1233 = _1071;
        _1234 = _1070;
        _1235 = _1082;
        _1236 = _1081;
        _1237 = _1080;
        _1238 = _1095;
        _1239 = _1094;
        _1240 = _1093;
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _920;
        _1230 = _920;
        _1231 = _920;
        _1232 = _920;
        _1233 = _920;
        _1234 = _920;
        _1235 = _920;
        _1236 = _920;
        _1237 = _920;
        _1238 = _920;
        _1239 = _920;
        _1240 = _920;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _932)) + _932;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1276 = fma(_1255, cbSceneParam._m0[89u].z, fma(_1254, cbSceneParam._m0[89u].y, _1253 * cbSceneParam._m0[89u].x));
    float _1279 = fma(_1255, cbSceneParam._m0[90u].z, fma(_1254, cbSceneParam._m0[90u].y, _1253 * cbSceneParam._m0[90u].x));
    float _1282 = fma(_1255, cbSceneParam._m0[91u].z, fma(_1254, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1253));
    float _1297 = _556 * 0.5;
    float _1298 = _557 * 0.5;
    float _1299 = _558 * 0.5;
    float _1300 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1303 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1306 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1340;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1313 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_919, _923, _926, _929));
        float _1317 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_921, _924, _927, _930));
        float _1321 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_922, _925, _928, _931));
        float _1328 = dot(vec4(cbModelParam._m0[39u]), vec4(_1297, _1298, _1299, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1351;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1342 = dot(vec4(cbModelParam._m0[40u]), vec4(_1297, _1298, _1299, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1355 = (_1351 * cbModelParam._m0[1u].x) + (_1340 * (1.0 - cbModelParam._m0[1u].x));
    float _1365 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1366 = isnan(_1365) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1365 : min(cbModelParam._m0[25u].z, _1365));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_617, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_617, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_617, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1429 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1432 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1460 = frontier_phi_16_14_ladder;
        }
        float _1665;
        if (_1429 > 0.0)
        {
            _1665 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1665 = frontier_phi_25_21_ladder;
        }
        float _1908;
        if (_1432 > 0.0)
        {
            _1908 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_37_32_ladder;
        }
        float _1910 = isnan(_1665) ? _1460 : (isnan(_1460) ? _1665 : min(_1460, _1665));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1426) + _1415;
        float _1916 = (_1911 * _1429) + _1419;
        float _1917 = (_1911 * _1432) + _1423;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1366);
            frontier_phi_15_37_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_15_37_ladder_2;
        _1450 = frontier_phi_15_37_ladder_1;
        _1452 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1366);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_617, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_617, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_617, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1528 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1531 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1670;
        if (_1525 > 0.0)
        {
            _1670 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1670 = frontier_phi_27_23_ladder;
        }
        float _1935;
        if (_1528 > 0.0)
        {
            _1935 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1935 = frontier_phi_39_34_ladder;
        }
        float _2140;
        if (_1531 > 0.0)
        {
            _2140 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2140 = frontier_phi_48_45_ladder;
        }
        float _2142 = isnan(_1935) ? _1670 : (isnan(_1670) ? _1935 : min(_1670, _1935));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1525) + _1514;
        float _2148 = (_2143 * _1528) + _1518;
        float _2149 = (_2143 * _1531) + _1522;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2150;
        float _2153 = _2150 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2149 > _2153) || ((_2149 < _2151) || ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 < _2151) || (_2147 > _2153))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2149, cbModelParam._m0[17u].z, fma(_2148, cbModelParam._m0[17u].y, _2147 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2149, cbModelParam._m0[18u].z, fma(_2148, cbModelParam._m0[18u].y, _2147 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2149, cbModelParam._m0[19u].z, fma(_2148, cbModelParam._m0[19u].y, _2147 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_24_48_ladder = _2378.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2378.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2378.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_24_48_ladder_2;
        _1552 = frontier_phi_24_48_ladder_1;
        _1554 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((((1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_577 * _564)) * _548;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    uvec4 _1588 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1590 = _1588.x * 14u;
    uint _1591 = _1590 + 13u;
    float _1598 = _548 + (-1.0);
    float _1603 = (cbLight._m0[_1591].x * _1598) + 1.0;
    float _1604 = (cbLight._m0[_1591].y * _1598) + 1.0;
    float _1605 = (cbLight._m0[_1591].z * _1598) + 1.0;
    float _1606 = (cbLight._m0[_1591].w * _1598) + 1.0;
    uint _1607 = _1590 + 5u;
    float _1613 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1617 = _1590 + 4u;
    float _1624 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1628 = _1590 | 1u;
    float _1639 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_445, _446, _447));
    float _1642 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_445, _446, _447));
    float _3831 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _3842 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1647 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1649 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1656 = ((cbLight._m0[_1607].x * _1613) * _1649) + ((cbLight._m0[_1617].x * _1624) * _1647);
    float _1657 = ((_1613 * cbLight._m0[_1607].y) * _1649) + ((_1624 * cbLight._m0[_1617].y) * _1647);
    float _1658 = ((_1613 * cbLight._m0[_1607].z) * _1649) + ((_1624 * cbLight._m0[_1617].z) * _1647);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1590 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1656;
        _1677 = _1657;
        _1679 = _1658;
    }
    else
    {
        uint _1683 = _1590 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1590 + 2u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3853 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1702 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1658;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1879 = _1590 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1590 + 3u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3869 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1898 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1720 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1675;
        _1722 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1677;
        _1724 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1679;
    }
    uint _1727 = _1590 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _449) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1590].x + _407;
    float _1743 = cbLight._m0[_1590].y + _408;
    float _1744 = cbLight._m0[_1590].z + _409;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1590].xyz));
    float _3885 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1756 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1757 = dot(vec3(_445, _446, _447), vec3(_1749, _1750, _1751));
    float _3907 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1749, _1750, _1751));
    float _3918 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1741;
    float _1792 = (0.5 / (((_1756 * ((_1755 * _1781) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1781) + _1741) * _1755))) * _1755;
    float _3929 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1805 = _1590 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _449) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1628].x + _407;
    float _1819 = cbLight._m0[_1628].y + _408;
    float _1820 = cbLight._m0[_1628].z + _409;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1628].xyz));
    float _3940 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1832 = dot(vec3(_445, _446, _447), vec3(_1825, _1826, _1827));
    float _3951 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1825, _1826, _1827));
    float _3962 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1854 = 1.0 - _1817;
    float _1864 = (0.5 / (((_1756 * ((_1831 * _1854) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1854) + _1817) * _1831))) * _1831;
    float _3973 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1876 = (((_1853 * cbLight._m0[_1805].x) * _1866) * _1613) + (((_1780 * cbLight._m0[_1727].x) * _1794) * _1624);
    float _1877 = (((_1853 * cbLight._m0[_1805].y) * _1866) * _1613) + (((_1780 * cbLight._m0[_1727].y) * _1794) * _1624);
    float _1878 = (((_1853 * cbLight._m0[_1805].z) * _1866) * _1613) + (((_1780 * cbLight._m0[_1727].z) * _1794) * _1624);
    float _1940;
    float _1942;
    float _1944;
    if (_1664)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1590 + 2u;
        uint _1950 = _1590 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _449) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _407;
        float _1967 = cbLight._m0[_1946].y + _408;
        float _1968 = cbLight._m0[_1946].z + _409;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1946].xyz));
        float _3984 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1980 = dot(vec3(_445, _446, _447), vec3(_1973, _1974, _1975));
        float _3995 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _4006 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2002 = 1.0 - _1965;
        float _2012 = (0.5 / (((_1756 * ((_1979 * _2002) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2002) + _1965) * _1979))) * _1979;
        float _4017 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1940 = (((_2001 * cbLight._m0[_1950].x) * _2014) * _2015) + _1876;
        _1942 = (((_2001 * cbLight._m0[_1950].y) * _2014) * _2015) + _1877;
        _1944 = (((_2001 * cbLight._m0[_1950].z) * _2014) * _2015) + _1878;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1682)
    {
        _2050 = _1940;
        _2052 = _1942;
        _2054 = _1944;
    }
    else
    {
        uint _2061 = _1590 + 3u;
        uint _2065 = _1590 + 11u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _449) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _407;
        float _2082 = cbLight._m0[_2061].y + _408;
        float _2083 = cbLight._m0[_2061].z + _409;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2061].xyz));
        float _4033 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2095 = dot(vec3(_445, _446, _447), vec3(_2088, _2089, _2090));
        float _4044 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _4055 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2117 = 1.0 - _2080;
        float _2127 = (0.5 / (((_1756 * ((_2094 * _2117) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2117) + _2080) * _2094))) * _2094;
        float _4066 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2130 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _2050 = (((_2116 * cbLight._m0[_2065].x) * _2129) * _2130) + _1940;
        _2052 = (((_2116 * cbLight._m0[_2065].y) * _2129) * _2130) + _1942;
        _2054 = (((_2116 * cbLight._m0[_2065].z) * _2129) * _2130) + _1944;
    }
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_1588.y == 0u)
    {
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2205;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2205;
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2205;
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.x;
        uint _2232 = uint((float(_2220.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2221))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2221)));
        float _2242 = (log2(_2208 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2243 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        uint _2246 = uint(isnan(14.0) ? _2243 : (isnan(_2243) ? 14.0 : min(_2243, 14.0)));
        uvec4 _2251 = texelFetch(g_lightClusterGridBuffer, int(((_2246 << 2u) + (_2232 << 6u)) >> 2u));
        uint _2252 = _2251.x;
        uint _2253 = _2220.z;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((((1u << ((_2253 >> 4u) & 15u)) + 4294967295u) & _2252) == 0u) || ((_2253 & 240u) == 0u))
        {
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
        }
        else
        {
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            uint _2550 = 0u;
            uint _2559;
            bool _2560;
            for (;;)
            {
                _2559 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                _2560 = _2559 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2560)
                {
                    frontier_phi_65_pred = _2546;
                    frontier_phi_65_pred_1 = _2549;
                    frontier_phi_65_pred_2 = _2548;
                    frontier_phi_65_pred_3 = _2547;
                    frontier_phi_65_pred_4 = _2545;
                    frontier_phi_65_pred_5 = _2544;
                }
                else
                {
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    uint _2696;
                    _2690 = _2544;
                    _2691 = _2545;
                    _2692 = _2546;
                    _2693 = _2547;
                    _2694 = _2548;
                    _2695 = _2549;
                    _2696 = _2559;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    for (;;)
                    {
                        uint _2700 = uint(findLSB(_2696)) + (_2550 << 5u);
                        uint _2697 = (_2696 + 4294967295u) & _2696;
                        uint _2702 = _2700 * 48u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2722 = (_2700 * 48u) + 4u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2741 = (_2700 * 48u) + 8u;
                        vec3 _2752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x));
                        float _2756 = _2716.x - _2206;
                        float _2757 = _2716.y - _2207;
                        float _2758 = _2716.z - _2208;
                        float _2759 = dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758));
                        float _2762 = inversesqrt(_2759);
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2766 = dot(vec3(_503, _506, _509), vec3(_2763, _2764, _2765));
                        float _2771 = 1.0 - (_2759 * _2716.w);
                        float _4092 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2773 = sqrt(_2759) * _2735.w;
                        float _2776 = 1.39999997615814208984375 / (_2773 + 1.39999997615814208984375);
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2766) + _2777;
                        float _2783 = _2773 * _2773;
                        float _2787 = ((isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))) * _2772) / ((_2783 * 0.699999988079071044921875) + 1.0);
                        float _2791 = (-0.0) - _2206;
                        float _2792 = (-0.0) - _2207;
                        float _2793 = (-0.0) - _2208;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2808 = exp2(log2(1.0 / ((_2783 * 3.5) + 5.0)) * 0.25);
                        float _2809 = 1.0 - _564;
                        float _2816 = sqrt(1.0 - ((1.0 - (_2809 * _2809)) * (1.0 - (_2808 * _2808))));
                        float _2817 = _2816 * _2816;
                        float _2818 = _2817 * _2817;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2829 = dot(vec3(_503, _506, _509), vec3(_2798, _2799, _2800));
                        float _4108 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2833 = dot(vec3(_503, _506, _509), vec3(_2825 * _2819, _2825 * _2820, _2825 * _2821));
                        float _4119 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2840 = ((_2836 * _2836) * (_2818 + (-1.0))) + 1.0;
                        float _2841 = _2776 * _2817;
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2766) + _2842;
                        float _4130 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2847 = 1.0 - _2817;
                        float _2857 = (0.5 / (((_2846 * ((_2832 * _2847) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2846 * _2847) + _2817) * _2832))) * _2846;
                        float _4141 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2868 = (((_2818 * 3.1415927410125732421875) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) / ((_2840 * _2840) * ((_2783 * 2.1991131305694580078125) + 3.141590118408203125))) * _2772;
                        _2619 = (_2787 * _2735.x) + _2693;
                        _2620 = (_2787 * _2735.y) + _2694;
                        _2621 = (_2787 * _2735.z) + _2695;
                        _2616 = (_2868 * _2752.x) + _2690;
                        _2617 = (_2868 * _2752.y) + _2691;
                        _2618 = (_2868 * _2752.z) + _2692;
                        if (_2697 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2690 = _2616;
                            _2691 = _2617;
                            _2692 = _2618;
                            _2693 = _2619;
                            _2694 = _2620;
                            _2695 = _2621;
                            _2696 = _2697;
                        }
                    }
                    frontier_phi_65_pred = _2618;
                    frontier_phi_65_pred_1 = _2621;
                    frontier_phi_65_pred_2 = _2620;
                    frontier_phi_65_pred_3 = _2619;
                    frontier_phi_65_pred_4 = _2617;
                    frontier_phi_65_pred_5 = _2616;
                }
                _2388 = frontier_phi_65_pred;
                _2394 = frontier_phi_65_pred_1;
                _2392 = frontier_phi_65_pred_2;
                _2390 = frontier_phi_65_pred_3;
                _2386 = frontier_phi_65_pred_4;
                _2384 = frontier_phi_65_pred_5;
                uint _2551 = _2550 + 1u;
                if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2544 = _2384;
                    _2545 = _2386;
                    _2546 = _2388;
                    _2547 = _2390;
                    _2548 = _2392;
                    _2549 = _2394;
                    _2550 = _2551;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
        }
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.z;
        uint _2400 = (_2398 >> 8u) & 15u;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((4294967295u << _2400) & _2252) == 0u)
        {
            _2512 = _2383;
            _2514 = _2385;
            _2516 = _2387;
            _2518 = _2389;
            _2520 = _2391;
            _2522 = _2393;
        }
        else
        {
            float _2537 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
            float _2538 = _2537 * _2206;
            float _2539 = _2537 * _2207;
            float _2540 = _2537 * _2208;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2400 < ((_2398 >> 12u) & 15u))
            {
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2673 = _2383;
                float _2674 = _2385;
                float _2675 = _2387;
                float _2676 = _2389;
                float _2677 = _2391;
                float _2678 = _2393;
                uint _2679 = _2400;
                uint _2688;
                bool _2689;
                for (;;)
                {
                    _2688 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                    _2689 = _2688 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2689)
                    {
                        frontier_phi_76_pred = _2678;
                        frontier_phi_76_pred_1 = _2677;
                        frontier_phi_76_pred_2 = _2676;
                        frontier_phi_76_pred_3 = _2675;
                        frontier_phi_76_pred_4 = _2674;
                        frontier_phi_76_pred_5 = _2673;
                    }
                    else
                    {
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _2897 = _2673;
                        float _2898 = _2674;
                        float _2899 = _2675;
                        float _2900 = _2676;
                        float _2901 = _2677;
                        float _2902 = _2678;
                        uint _2903 = _2688;
                        uint _2904;
                        vec4 _2929;
                        float _2930;
                        vec4 _2945;
                        vec3 _2957;
                        vec4 _2973;
                        vec4 _2989;
                        float _3036;
                        bool _3037;
                        for (;;)
                        {
                            uint _2914 = ((_2679 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2903));
                            _2904 = (_2903 + 4294967295u) & _2903;
                            uint _2916 = _2914 * 40u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2930 = _2929.w;
                            uint _2932 = (_2914 * 40u) + 4u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2914 * 40u) + 8u;
                            _2957 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x));
                            uint _2960 = (_2914 * 40u) + 16u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2914 * 40u) + 20u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2992 = (_2914 * 40u) + 24u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3011 = (_2914 * 40u) + 28u;
                            vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3036 = fma(_2208, _3024.z, fma(_2207, _3024.y, _3024.x * _2206)) + _3024.w;
                            _3037 = !((fma(_2208, _3005.z, fma(_2207, _3005.y, _3005.x * _2206)) + _3005.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3037)
                            {
                                float _3064 = _2929.x - _2206;
                                float _3065 = _2929.y - _2207;
                                float _3066 = _2929.z - _2208;
                                float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                                float _3070 = inversesqrt(_3067);
                                float _3071 = _3070 * _3064;
                                float _3072 = _3070 * _3065;
                                float _3073 = _3070 * _3066;
                                float _3077 = 1.0 - (_3067 / (_2930 * _2930));
                                float _4152 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3082 = sqrt(_3067) * _2945.w;
                                float _3084 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                                float _3085 = _3084 * _3084;
                                float _3088 = ((1.0 - _3085) * dot(vec3(_3071, _3072, _3073), vec3(_503, _506, _509))) + _3085;
                                float _3091 = _3082 * _3082;
                                float _3095 = (fma(_2208, _2973.z, fma(_2207, _2973.y, _2973.x * _2206)) + _2973.w) / _3036;
                                float _3096 = (fma(_2208, _2989.z, fma(_2207, _2989.y, _2989.x * _2206)) + _2989.w) / _3036;
                                float _3100 = 1.0 - dot(vec2(_3095, _3096), vec2(_3095, _3096));
                                float _4168 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3102 = _3101 * (((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3078) / ((_3091 * 0.699999988079071044921875) + 1.0));
                                float _3114 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                                float _3115 = 1.0 - _564;
                                float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                                float _3123 = _3122 * _3122;
                                float _3124 = _3123 * _3123;
                                float _3125 = _3071 - _2538;
                                float _3126 = _3072 - _2539;
                                float _3127 = _3073 - _2540;
                                float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                                float _3135 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2538, (-0.0) - _2539, (-0.0) - _2540));
                                float _4179 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3139 = dot(vec3(_503, _506, _509), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                                float _4190 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3142 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                                float _3147 = _3084 * _3123;
                                float _3148 = _3147 * _3147;
                                float _3154 = ((1.0 - _3148) * dot(vec3(_503, _506, _509), vec3(_3071, _3072, _3073))) + _3148;
                                float _4201 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3156 = 1.0 - _3123;
                                float _3166 = (0.5 / (((_3155 * ((_3138 * _3156) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3123) * _3138))) * _3155;
                                float _4212 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3176 = (_3101 * _3078) * (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) / ((_3146 * _3146) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3102 * _2945.z;
                                frontier_phi_82_pred_1 = _3102 * _2945.y;
                                frontier_phi_82_pred_2 = _3102 * _2945.x;
                                frontier_phi_82_pred_3 = _3176 * _2957.z;
                                frontier_phi_82_pred_4 = _3176 * _2957.y;
                                frontier_phi_82_pred_5 = _3176 * _2957.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3185 = frontier_phi_82_pred;
                            _3184 = frontier_phi_82_pred_1;
                            _3183 = frontier_phi_82_pred_2;
                            _3182 = frontier_phi_82_pred_3;
                            _3181 = frontier_phi_82_pred_4;
                            _3180 = frontier_phi_82_pred_5;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            if (_2904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2904;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2889;
                        frontier_phi_76_pred_1 = _2888;
                        frontier_phi_76_pred_2 = _2887;
                        frontier_phi_76_pred_3 = _2886;
                        frontier_phi_76_pred_4 = _2885;
                        frontier_phi_76_pred_5 = _2884;
                    }
                    _2523 = frontier_phi_76_pred;
                    _2521 = frontier_phi_76_pred_1;
                    _2519 = frontier_phi_76_pred_2;
                    _2517 = frontier_phi_76_pred_3;
                    _2515 = frontier_phi_76_pred_4;
                    _2513 = frontier_phi_76_pred_5;
                    uint _2680 = _2679 + 1u;
                    if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2673 = _2513;
                        _2674 = _2515;
                        _2675 = _2517;
                        _2676 = _2519;
                        _2677 = _2521;
                        _2678 = _2523;
                        _2679 = _2680;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2519;
                frontier_phi_57_58_ladder_1 = _2523;
                frontier_phi_57_58_ladder_2 = _2521;
                frontier_phi_57_58_ladder_3 = _2517;
                frontier_phi_57_58_ladder_4 = _2515;
                frontier_phi_57_58_ladder_5 = _2513;
            }
            else
            {
                frontier_phi_57_58_ladder = _2389;
                frontier_phi_57_58_ladder_1 = _2393;
                frontier_phi_57_58_ladder_2 = _2391;
                frontier_phi_57_58_ladder_3 = _2387;
                frontier_phi_57_58_ladder_4 = _2385;
                frontier_phi_57_58_ladder_5 = _2383;
            }
            _2512 = frontier_phi_57_58_ladder_5;
            _2514 = frontier_phi_57_58_ladder_4;
            _2516 = frontier_phi_57_58_ladder_3;
            _2518 = frontier_phi_57_58_ladder;
            _2520 = frontier_phi_57_58_ladder_2;
            _2522 = frontier_phi_57_58_ladder_1;
        }
        float _2527 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2264 = (_2527 * _2518) + _1720;
        _2266 = (_2527 * _2520) + _1722;
        _2268 = (_2527 * _2522) + _1724;
        _2270 = ((_2512 * 0.039999999105930328369140625) * _2527) + _2050;
        _2272 = ((_2514 * 0.039999999105930328369140625) * _2527) + _2052;
        _2274 = ((_2516 * 0.039999999105930328369140625) * _2527) + _2054;
    }
    else
    {
        _2264 = _1720;
        _2266 = _1722;
        _2268 = _1724;
        _2270 = _2050;
        _2272 = _2052;
        _2274 = _2054;
    }
    uint _2280 = _524 + uint(cbMatDynParam._m0[0u].w);
    float _2286 = cbInstanceData._m0[_2280].x * (((_367.x * cbMtdParam._m0[11u].w) + (_347.x * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].x) * _420));
    float _2287 = cbInstanceData._m0[_2280].y * (((_367.y * cbMtdParam._m0[11u].w) + (_347.y * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].y) * _420));
    float _2288 = cbInstanceData._m0[_2280].z * (((_367.z * cbMtdParam._m0[11u].w) + (_347.z * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].z) * _420));
    float _4228 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4239 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4250 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4261 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2306 = (((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2264 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _548))) + ((_2270 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + _2286;
    float _2308 = (_2287 + ((_2272 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2266 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _548)));
    float _2310 = (_2288 + ((_2274 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2268 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _548)));
    float _2311 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2312 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2319 = cbMtdParam._m0[2u].x * _2286;
    float _2320 = cbMtdParam._m0[2u].y * _2287;
    float _2321 = cbMtdParam._m0[2u].z * _2288;
    float _4287 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2323 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2328 = cbInstanceData._m0[_522 + 6u].w * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)));
    float _2333 = _481 / cbSceneParam._m0[86u].x;
    float _2334 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2348 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2350 = _2348.x;
    float _2351 = _2348.y;
    float _2352 = _2348.z;
    float _2353 = _2348.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2408 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2409 = _2408 / _468;
        float _2420 = _2409 * _273;
        float _2421 = _274 * _2409;
        float _2422 = (-0.0) - _2421;
        float _2423 = _2409 * _275;
        float _2425 = (cbSceneParam._m0[77u].w * _2422) / _2408;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2421;
        float _2433 = sqrt(((_2420 * _2420) + (_2421 * _2421)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2408)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2629;
        if (abs((_2422 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2629 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2573 = 1.0 / cbSceneParam._m0[80u].x;
            float _2574 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2575 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            _2629 = ((abs(_2433 / _2422) * cbSceneParam._m0[80u].y) * ((((_2584 - _2585) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))))) * _2573)) - ((exp2(_2443 * _2584) - exp2(_2443 * _2585)) * _2573))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2631 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, 1.0), 0.0);
        float _2640 = exp2((_2629 * (-1.44269502162933349609375)) * (1.0 - _2631.w));
        float _2641 = log2(_2640);
        float _2657 = log2(_2353);
        _2445 = (exp2(_2657 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].x)) * _2631.x) / cbSceneParam._m0[78u].x)) + _2350;
        _2447 = (exp2(_2657 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].y)) * _2631.y) / cbSceneParam._m0[78u].y)) + _2351;
        _2449 = (exp2(_2657 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].z)) * _2631.z) / cbSceneParam._m0[78u].z)) + _2352;
        _2451 = _2640 * _2353;
    }
    else
    {
        _2445 = _2350;
        _2447 = _2351;
        _2449 = _2352;
        _2451 = _2353;
    }
    bool _2667;
    vec4 _2461;
    vec4 _2483;
    float _2485;
    float _2489;
    float _2490;
    float _2491;
    float _2494;
    float _2497;
    float _2500;
    float _2501;
    bool _2511;
    for (;;)
    {
        _2461 = cbMatDynParam._m0[0u];
        float _2463 = roundEven(_2461.y);
        bool _2464 = _2463 == 3.0;
        float _2465 = log2(_2451);
        float _2469 = exp2(_2465 * cbSceneParam._m0[78u].x);
        float _2470 = exp2(_2465 * cbSceneParam._m0[78u].y);
        float _2471 = exp2(_2465 * cbSceneParam._m0[78u].z);
        float _2472 = _2469 * _2311;
        float _2473 = _2470 * _2312;
        float _2474 = _2471 * _2313;
        float _2481 = _475 + (-0.5);
        _2483 = cbMtdParam._m0[1u];
        _2485 = _2483.y * _2481;
        float _2488 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2489 = _2488 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
        _2490 = _2488 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
        _2491 = _2488 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = ((_2319 * _2323) * _2469) * _2488;
        _2497 = ((_2320 * _2323) * _2470) * _2488;
        _2500 = ((_2321 * _2323) * _2471) * _2488;
        _2501 = _2481 * 0.999000012874603271484375;
        _2511 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2511)
        {
            if ((cbInstanceData._m0[_522 + 7u].x + _2501) < 0.5)
            {
                _2667 = true;
                break;
            }
        }
        uint _2608 = _524 + uint(_2461.w);
        if ((cbInstanceData._m0[_2608].w < 1.0) && ((cbInstanceData._m0[_2608].w + _2501) < 0.5))
        {
            _2667 = true;
            break;
        }
        if ((_2485 + _294) < _2483.x)
        {
            _2667 = true;
            break;
        }
        _2667 = false;
        break;
    }
    float _2875;
    if (_2667)
    {
        discard_state = true;
        _2875 = 0.0;
    }
    else
    {
        _2875 = _2328;
    }
    SV_Target.x = _2489;
    SV_Target.y = _2490;
    SV_Target.z = _2491;
    SV_Target.w = _2875;
    SV_Target_1.x = _2494;
    SV_Target_1.y = _2497;
    SV_Target_1.z = _2500;
    SV_Target_1.w = _2328;
    discard_exit();
}


