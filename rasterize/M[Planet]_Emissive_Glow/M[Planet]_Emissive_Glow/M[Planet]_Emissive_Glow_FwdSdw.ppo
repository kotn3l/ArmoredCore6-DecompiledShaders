#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _300 = cbMtdParam._m0[10u].x * _288.x;
    float _301 = cbMtdParam._m0[10u].y * _288.y;
    float _302 = cbMtdParam._m0[10u].z * _288.z;
    float _303 = _288.w * TEXCOORD_1.z;
    vec4 _315 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3551 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    vec4 _347 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _367 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _388 = fma(0.989949524402618408203125, _216, fma(-0.10000002384185791015625, _209, _195 * (-0.10000002384185791015625)));
    float _392 = fma(0.989949524402618408203125, _217, fma(-0.10000002384185791015625, _210, _196 * (-0.10000002384185791015625)));
    float _395 = fma(0.989949524402618408203125, _218, fma(-0.10000002384185791015625, _211, _197 * (-0.10000002384185791015625)));
    float _399 = inversesqrt(dot(vec3(_388, _392, _395), vec3(_388, _392, _395)));
    float _406 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _407 = _406 * _273;
    float _408 = _406 * _274;
    float _409 = _406 * _275;
    float _413 = dot(vec4(_407, _408, _409, 0.0), vec4(_399 * _388, _399 * _392, _399 * _395, 0.0)) - cbMtdParam._m0[11u].z;
    float _3562 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _420 = exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _421 = TEXCOORD_1.z * 10.0;
    float _434 = fma(_332, _216, fma(_325, _209, _323 * _195));
    float _437 = fma(_332, _217, fma(_325, _210, _323 * _196));
    float _440 = fma(_332, _218, fma(_325, _211, _323 * _197));
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    float _445 = _444 * _434;
    float _446 = _444 * _437;
    float _447 = _444 * _440;
    float _3578 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _448 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _449 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3611 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3622 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _496 = fma(_447, cbSceneParam._m0[5u].z, fma(_446, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _445));
    float _499 = fma(_447, cbSceneParam._m0[6u].z, fma(_446, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _445));
    float _502 = fma(_447, cbSceneParam._m0[7u].z, fma(_446, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _445));
    uint _515 = uint(roundEven(NORMAL.w)) * 13u;
    uint _517 = _515 + 9u;
    uint _518 = _517 + uint(cbMatDynParam._m0[0u].w);
    float _524 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_518].x;
    float _525 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_518].y;
    float _526 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_518].z;
    float _3633 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _538 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _541 = _538.x * TEXCOORD_1.w;
    float _542 = dot(vec3(_445, _446, _447), vec3(_407, _408, _409));
    float _545 = _542 * 2.0;
    float _549 = (_545 * _445) - _407;
    float _550 = (_545 * _446) - _408;
    float _551 = (_545 * _447) - _409;
    float _555 = abs(dot(vec3(_407, _408, _409), vec3(_445, _446, _447)));
    float _3666 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _557 = sqrt(_449);
    float _570 = exp2((_557 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_557 * 3.0));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _445;
        float _671 = _606 + _446;
        float _672 = _610 + _447;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_445, _446, _447), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3714 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_445, _446, _447), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3747 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_445, _446, _447), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3780 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _957 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _961 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _984 = _602 + _445;
        float _985 = _606 + _446;
        float _986 = _610 + _447;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_445, _446, _447), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3843 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_445, _446, _447), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3876 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_445, _446, _447), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3909 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _549 * 0.5;
    float _1291 = _550 * 0.5;
    float _1292 = _551 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_551, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549));
        float _1422 = fma(_551, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549));
        float _1425 = fma(_551, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1453 = frontier_phi_16_14_ladder;
        }
        float _1626;
        if (_1422 > 0.0)
        {
            _1626 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_21_ladder;
        }
        float _1922;
        if (_1425 > 0.0)
        {
            _1922 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1922 = frontier_phi_37_32_ladder;
        }
        float _1924 = isnan(_1626) ? _1453 : (isnan(_1453) ? _1626 : min(_1453, _1626));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1419) + _1408;
        float _1930 = (_1925 * _1422) + _1412;
        float _1931 = (_1925 * _1425) + _1416;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_15_37_ladder = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2076.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2076.z * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_15_37_ladder_1;
        _1443 = frontier_phi_15_37_ladder;
        _1445 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_549, _550, _551), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_551, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549));
        float _1521 = fma(_551, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549));
        float _1524 = fma(_551, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549));
        float _1631;
        if (_1518 > 0.0)
        {
            _1631 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_27_23_ladder;
        }
        float _1949;
        if (_1521 > 0.0)
        {
            _1949 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1949 = frontier_phi_39_34_ladder;
        }
        float _2276;
        if (_1524 > 0.0)
        {
            _2276 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2276 = frontier_phi_49_46_ladder;
        }
        float _2278 = isnan(_1949) ? _1631 : (isnan(_1631) ? _1949 : min(_1631, _1949));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1518) + _1507;
        float _2284 = (_2279 * _1521) + _1511;
        float _2285 = (_2279 * _1524) + _1515;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_24_49_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_24_49_ladder_2;
        _1545 = frontier_phi_24_49_ladder_1;
        _1547 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_549, _550, _551), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1559 = ((((1.0 - _570) * ((_557 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_570 * _557)) * _541;
    float _1560 = _1559 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1561 = _1559 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1562 = _1559 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1618 = _1605 / _1617;
    float _1619 = _1609 / _1617;
    float _1620 = _1613 / _1617;
    float _1767;
    float _1768;
    float _1769;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1647 = ((uint(_1620 > cbSceneParam._m0[59u].y) + uint(_1620 > cbSceneParam._m0[59u].x)) + uint(_1620 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1648 = _1647 + 43u;
        uint _1656 = _1647 + 44u;
        uint _1664 = _1647 + 45u;
        uint _1672 = _1647 + 46u;
        float _1683 = fma(_1617, cbSceneParam._m0[_1648].w, fma(_1613, cbSceneParam._m0[_1648].z, fma(_1609, cbSceneParam._m0[_1648].y, _1605 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1617, cbSceneParam._m0[_1656].w, fma(_1613, cbSceneParam._m0[_1656].z, fma(_1609, cbSceneParam._m0[_1656].y, _1605 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1617, cbSceneParam._m0[_1672].w, fma(_1613, cbSceneParam._m0[_1672].z, fma(_1609, cbSceneParam._m0[_1672].y, _1605 * cbSceneParam._m0[_1672].x)));
        float _1700 = cbSceneParam._m0[33u].z * _1695;
        float _1702 = cbSceneParam._m0[33u].w * _1695;
        float _1705 = fma(_1617, cbSceneParam._m0[_1664].w, fma(_1613, cbSceneParam._m0[_1664].z, fma(_1609, cbSceneParam._m0[_1664].y, _1605 * cbSceneParam._m0[_1664].x))) / _1695;
        float _1753 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
        float _4035 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1760 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1683) / _1695, (_1702 + _1687) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1683) / _1695, (_1687 - _1700) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1700) / _1695, (_1687 - _1702) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1702) / _1695, (_1700 + _1687) / _1695), _1705), 0.0)).x), vec4(0.25)));
        _1767 = 1.0 - (_1760 * cbSceneParam._m0[34u].x);
        _1768 = 1.0 - (_1760 * cbSceneParam._m0[34u].y);
        _1769 = 1.0 - (_1760 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1767 = 1.0;
        _1768 = 1.0;
        _1769 = 1.0;
    }
    float _1833;
    float _1835;
    float _1837;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1821 = fma(_1617, cbSceneParam._m0[63u].w, fma(_1613, cbSceneParam._m0[63u].z, fma(_1609, cbSceneParam._m0[63u].y, _1605 * cbSceneParam._m0[63u].x)));
        float _1822 = fma(_1617, cbSceneParam._m0[60u].w, fma(_1613, cbSceneParam._m0[60u].z, fma(_1609, cbSceneParam._m0[60u].y, _1605 * cbSceneParam._m0[60u].x))) / _1821;
        float _1823 = fma(_1617, cbSceneParam._m0[61u].w, fma(_1613, cbSceneParam._m0[61u].z, fma(_1609, cbSceneParam._m0[61u].y, _1605 * cbSceneParam._m0[61u].x))) / _1821;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1822 >= cbSceneParam._m0[64u].x) && (_1823 >= cbSceneParam._m0[64u].y)) && (_1822 <= cbSceneParam._m0[64u].z)) && (_1823 <= cbSceneParam._m0[64u].w))
        {
            float _1962 = fma(_1617, cbSceneParam._m0[62u].w, fma(_1613, cbSceneParam._m0[62u].z, fma(_1609, cbSceneParam._m0[62u].y, _1605 * cbSceneParam._m0[62u].x))) / _1821;
            float _1966 = isnan(cbSceneParam._m0[41u].w) ? _1962 : (isnan(_1962) ? cbSceneParam._m0[41u].w : max(_1962, cbSceneParam._m0[41u].w));
            float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
            float _4051 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
            float _2016 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1822, cbSceneParam._m0[33u].w + _1823), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1822, _1823 - cbSceneParam._m0[33u].z), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].z, _1823 - cbSceneParam._m0[33u].w), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1823), _1966), 0.0)).x), vec4(0.25)));
            float _2020 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
            float _2021 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
            float _2022 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
            frontier_phi_36_35_ladder_1 = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_36_35_ladder_2 = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
        }
        else
        {
            frontier_phi_36_35_ladder = _1768;
            frontier_phi_36_35_ladder_1 = _1769;
            frontier_phi_36_35_ladder_2 = _1767;
        }
        _1833 = frontier_phi_36_35_ladder_2;
        _1835 = frontier_phi_36_35_ladder;
        _1837 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1833 = _1767;
        _1835 = _1768;
        _1837 = _1769;
    }
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_515 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _541 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1881 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1885 = _1844 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_445, _446, _447));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_445, _446, _447));
    float _4087 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4098 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1861].x * _1867) * _1906) + (((cbLight._m0[_1871].x * _1833) * _1881) * _1904);
    float _1914 = ((_1867 * cbLight._m0[_1861].y) * _1906) + (((cbLight._m0[_1871].y * _1835) * _1881) * _1904);
    float _1915 = ((_1867 * cbLight._m0[_1861].z) * _1906) + (((cbLight._m0[_1871].z * _1837) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1921)
    {
        _2023 = _1913;
        _2025 = _1914;
        _2027 = _1915;
    }
    else
    {
        uint _2031 = _1844 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4109 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2050 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1913;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1914;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1915;
    }
    bool _2030 = _1919.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2030)
    {
        _2085 = _2023;
        _2087 = _2025;
        _2089 = _2027;
    }
    else
    {
        uint _2247 = _1844 + 7u;
        float _2263 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4125 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2266 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2085 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2023;
        _2087 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2025;
        _2089 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2027;
    }
    uint _2092 = _1844 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _449) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1844].x + _407;
    float _2108 = cbLight._m0[_1844].y + _408;
    float _2109 = cbLight._m0[_1844].z + _409;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1844].xyz));
    float _4141 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2121 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2122 = dot(vec3(_445, _446, _447), vec3(_2114, _2115, _2116));
    float _4163 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2114, _2115, _2116));
    float _4174 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2121 * ((_2120 * _2146) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2146) + _2106) * _2120))) * _2120;
    float _4185 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2173 = _1844 + 9u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _449) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_1885].x + _407;
    float _2187 = cbLight._m0[_1885].y + _408;
    float _2188 = cbLight._m0[_1885].z + _409;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1885].xyz));
    float _4196 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2200 = dot(vec3(_445, _446, _447), vec3(_2193, _2194, _2195));
    float _4207 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2193, _2194, _2195));
    float _4218 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2185 * _2185;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2222 = 1.0 - _2185;
    float _2232 = (0.5 / (((_2121 * ((_2199 * _2222) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2222) + _2185) * _2199))) * _2199;
    float _4229 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2244 = (((_2221 * cbLight._m0[_2173].x) * _2234) * _1867) + ((((cbLight._m0[_2092].x * _1833) * _2145) * _2159) * _1881);
    float _2245 = (((_2221 * cbLight._m0[_2173].y) * _2234) * _1867) + ((((cbLight._m0[_2092].y * _1835) * _2145) * _2159) * _1881);
    float _2246 = (((_2221 * cbLight._m0[_2173].z) * _2234) * _1867) + ((((cbLight._m0[_2092].z * _1837) * _2145) * _2159) * _1881);
    float _2302;
    float _2304;
    float _2306;
    if (_1921)
    {
        _2302 = _2244;
        _2304 = _2245;
        _2306 = _2246;
    }
    else
    {
        uint _2308 = _1844 + 2u;
        uint _2312 = _1844 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _449) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _407;
        float _2329 = cbLight._m0[_2308].y + _408;
        float _2330 = cbLight._m0[_2308].z + _409;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2308].xyz));
        float _4240 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2342 = dot(vec3(_445, _446, _447), vec3(_2335, _2336, _2337));
        float _4251 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4262 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2121 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2364) + _2327) * _2341))) * _2341;
        float _4273 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2302 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2244;
        _2304 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2245;
        _2306 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2246;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2030)
    {
        _2408 = _2302;
        _2410 = _2304;
        _2412 = _2306;
    }
    else
    {
        uint _2419 = _1844 + 3u;
        uint _2423 = _1844 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _449) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _407;
        float _2440 = cbLight._m0[_2419].y + _408;
        float _2441 = cbLight._m0[_2419].z + _409;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2419].xyz));
        float _4289 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2453 = dot(vec3(_445, _446, _447), vec3(_2446, _2447, _2448));
        float _4300 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4311 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2121 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2475) + _2438) * _2452))) * _2452;
        float _4322 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2408 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2302;
        _2410 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2304;
        _2412 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2306;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1842.y == 0u)
    {
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2510)));
        float _2531 = (log2(_1620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
        }
        else
        {
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2820)
                {
                    frontier_phi_68_pred = _2809;
                    frontier_phi_68_pred_1 = _2808;
                    frontier_phi_68_pred_2 = _2807;
                    frontier_phi_68_pred_3 = _2805;
                    frontier_phi_68_pred_4 = _2804;
                    frontier_phi_68_pred_5 = _2806;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2819;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2810 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1618;
                        float _2995 = _2954.y - _1619;
                        float _2996 = _2954.z - _1620;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_496, _499, _502), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4348 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1618;
                        float _3030 = (-0.0) - _1619;
                        float _3031 = (-0.0) - _1620;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _557;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_496, _499, _502), vec3(_3036, _3037, _3038));
                        float _4364 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3070 = dot(vec3(_496, _499, _502), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4375 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4386 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4397 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2863 = (_3025 * _2973.x) + _2931;
                        _2864 = (_3025 * _2973.y) + _2932;
                        _2865 = (_3025 * _2973.z) + _2933;
                        _2860 = (_3105 * _2990.x) + _2928;
                        _2861 = (_3105 * _2990.y) + _2929;
                        _2862 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_68_pred = _2865;
                    frontier_phi_68_pred_1 = _2864;
                    frontier_phi_68_pred_2 = _2863;
                    frontier_phi_68_pred_3 = _2861;
                    frontier_phi_68_pred_4 = _2860;
                    frontier_phi_68_pred_5 = _2862;
                }
                _2662 = frontier_phi_68_pred;
                _2660 = frontier_phi_68_pred_1;
                _2658 = frontier_phi_68_pred_2;
                _2654 = frontier_phi_68_pred_3;
                _2652 = frontier_phi_68_pred_4;
                _2656 = frontier_phi_68_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2652;
                    _2805 = _2654;
                    _2806 = _2656;
                    _2807 = _2658;
                    _2808 = _2660;
                    _2809 = _2662;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
        }
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.z;
        uint _2668 = (_2666 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2668) & _2541) == 0u)
        {
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
            _2778 = _2657;
            _2780 = _2659;
            _2782 = _2661;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
            float _2798 = _2797 * _1618;
            float _2799 = _2797 * _1619;
            float _2800 = _2797 * _1620;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2668 < ((_2666 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2911 = _2651;
                float _2912 = _2653;
                float _2913 = _2655;
                float _2914 = _2657;
                float _2915 = _2659;
                float _2916 = _2661;
                uint _2917 = _2668;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2927)
                    {
                        frontier_phi_74_pred = _2913;
                        frontier_phi_74_pred_1 = _2912;
                        frontier_phi_74_pred_2 = _2911;
                        frontier_phi_74_pred_3 = _2916;
                        frontier_phi_74_pred_4 = _2915;
                        frontier_phi_74_pred_5 = _2914;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        float _3127 = _2915;
                        float _3128 = _2916;
                        uint _3129 = _2926;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3140 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3140 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3140 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_1620, _3250.z, fma(_1619, _3250.y, _3250.x * _1618)) + _3250.w;
                            _3263 = !((fma(_1620, _3231.z, fma(_1619, _3231.y, _3231.x * _1618)) + _3231.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3155.x - _1618;
                                float _3291 = _3155.y - _1619;
                                float _3292 = _3155.z - _1620;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3156 * _3156));
                                float _4408 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3308 = sqrt(_3293) * _3171.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_496, _499, _502))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_1620, _3199.z, fma(_1619, _3199.y, _3199.x * _1618)) + _3199.w) / _3262;
                                float _3322 = (fma(_1620, _3215.z, fma(_1619, _3215.y, _3215.x * _1618)) + _3215.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4424 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _557;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2798;
                                float _3352 = _3298 - _2799;
                                float _3353 = _3299 - _2800;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_496, _499, _502), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4435 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3365 = dot(vec3(_496, _499, _502), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4446 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_496, _499, _502), vec3(_3297, _3298, _3299))) + _3374;
                                float _4457 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4468 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3402 * _3183.z;
                                frontier_phi_80_pred_1 = _3402 * _3183.y;
                                frontier_phi_80_pred_2 = _3402 * _3183.x;
                                frontier_phi_80_pred_3 = _3328 * _3171.z;
                                frontier_phi_80_pred_4 = _3328 * _3171.y;
                                frontier_phi_80_pred_5 = _3328 * _3171.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_80_pred;
                            _3407 = frontier_phi_80_pred_1;
                            _3406 = frontier_phi_80_pred_2;
                            _3411 = frontier_phi_80_pred_3;
                            _3410 = frontier_phi_80_pred_4;
                            _3409 = frontier_phi_80_pred_5;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3112;
                        frontier_phi_74_pred_1 = _3111;
                        frontier_phi_74_pred_2 = _3110;
                        frontier_phi_74_pred_3 = _3115;
                        frontier_phi_74_pred_4 = _3114;
                        frontier_phi_74_pred_5 = _3113;
                    }
                    _2777 = frontier_phi_74_pred;
                    _2775 = frontier_phi_74_pred_1;
                    _2773 = frontier_phi_74_pred_2;
                    _2783 = frontier_phi_74_pred_3;
                    _2781 = frontier_phi_74_pred_4;
                    _2779 = frontier_phi_74_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2773;
                        _2912 = _2775;
                        _2913 = _2777;
                        _2914 = _2779;
                        _2915 = _2781;
                        _2916 = _2783;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2781;
                frontier_phi_62_63_ladder_1 = _2779;
                frontier_phi_62_63_ladder_2 = _2777;
                frontier_phi_62_63_ladder_3 = _2783;
                frontier_phi_62_63_ladder_4 = _2775;
                frontier_phi_62_63_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_62_63_ladder = _2659;
                frontier_phi_62_63_ladder_1 = _2657;
                frontier_phi_62_63_ladder_2 = _2655;
                frontier_phi_62_63_ladder_3 = _2661;
                frontier_phi_62_63_ladder_4 = _2653;
                frontier_phi_62_63_ladder_5 = _2651;
            }
            _2772 = frontier_phi_62_63_ladder_5;
            _2774 = frontier_phi_62_63_ladder_4;
            _2776 = frontier_phi_62_63_ladder_2;
            _2778 = frontier_phi_62_63_ladder_1;
            _2780 = frontier_phi_62_63_ladder;
            _2782 = frontier_phi_62_63_ladder_3;
        }
        float _2787 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
        _2553 = (_2787 * _2778) + _2085;
        _2555 = (_2787 * _2780) + _2087;
        _2557 = (_2787 * _2782) + _2089;
        _2559 = ((_2772 * 0.039999999105930328369140625) * _2787) + _2408;
        _2561 = ((_2774 * 0.039999999105930328369140625) * _2787) + _2410;
        _2563 = ((_2776 * 0.039999999105930328369140625) * _2787) + _2412;
    }
    else
    {
        _2553 = _2085;
        _2555 = _2087;
        _2557 = _2089;
        _2559 = _2408;
        _2561 = _2410;
        _2563 = _2412;
    }
    uint _2569 = _517 + uint(cbMatDynParam._m0[0u].w);
    float _2575 = cbInstanceData._m0[_2569].x * (((_367.x * cbMtdParam._m0[11u].w) + (_347.x * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].x) * _420));
    float _2576 = cbInstanceData._m0[_2569].y * (((_367.y * cbMtdParam._m0[11u].w) + (_347.y * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].y) * _420));
    float _2577 = cbInstanceData._m0[_2569].z * (((_367.z * cbMtdParam._m0[11u].w) + (_347.z * cbMtdParam._m0[11u].y)) + ((_421 * cbMtdParam._m0[9u].z) * _420));
    float _4484 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4495 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4506 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4517 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2595 = (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2553 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _541))) + ((_2559 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + _2575;
    float _2597 = (_2576 + ((_2561 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2555 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _541)));
    float _2599 = (_2577 + ((_2563 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2557 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _541)));
    float _4543 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2612 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2617 = cbInstanceData._m0[_515 + 6u].w * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)));
    float _2622 = _474 / cbSceneParam._m0[86u].x;
    float _2623 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2639 = _2637.x;
    float _2640 = _2637.y;
    float _2641 = _2637.z;
    float _2642 = _2637.w;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2676 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2677 = _2676 / _468;
        float _2688 = _2677 * _273;
        float _2689 = _274 * _2677;
        float _2690 = (-0.0) - _2689;
        float _2691 = _2677 * _275;
        float _2693 = (cbSceneParam._m0[77u].w * _2690) / _2676;
        float _2694 = _2693 + cbSceneParam._m0[79u].w;
        float _2695 = cbSceneParam._m0[79u].w - _2689;
        float _2701 = sqrt(((_2688 * _2688) + (_2689 * _2689)) + (_2691 * _2691));
        float _2704 = (1.0 - (cbSceneParam._m0[77u].w / _2676)) * _2701;
        float _2709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2690 - _2693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2694 > 0.0) ? exp2(_2709 * _2694) : (2.0 - exp2(_2711 * _2694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2704;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : max(_2694, _2695));
            float _2835 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : min(_2694, _2695));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2873 = ((abs(_2701 / _2690) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2709 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2709 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2711 * _2844) - exp2(_2711 * _2845)) * _2833))) + (_2704 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2642);
        _2713 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2639;
        _2715 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2640;
        _2717 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2641;
        _2719 = _2884 * _2642;
    }
    else
    {
        _2713 = _2639;
        _2715 = _2640;
        _2717 = _2641;
        _2719 = _2642;
    }
    float _2731 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2732 = _2731 == 3.0;
    float _2733 = log2(_2719);
    float _2737 = exp2(_2733 * cbSceneParam._m0[78u].x);
    float _2738 = exp2(_2733 * cbSceneParam._m0[78u].y);
    float _2739 = exp2(_2733 * cbSceneParam._m0[78u].z);
    float _2740 = _2737 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2741 = _2738 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)));
    float _2742 = _2739 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)));
    float _2751 = (_2731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2751 * (_2732 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.y = _2751 * (_2732 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.z = _2751 * (_2732 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.w = _2617;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2575) * _2612) * _2737) * _2751;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2576) * _2612) * _2738) * _2751;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2577) * _2612) * _2739) * _2751;
    SV_Target_1.w = _2617;
}


