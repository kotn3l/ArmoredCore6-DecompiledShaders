#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = cbMtdParam._m0[10u].x * _286.x;
    float _299 = cbMtdParam._m0[10u].y * _286.y;
    float _300 = cbMtdParam._m0[10u].z * _286.z;
    float _301 = _286.w * TEXCOORD_1.z;
    vec4 _313 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3290 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))));
    vec4 _345 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _365 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _386 = fma(0.989949524402618408203125, _214, fma(-0.10000002384185791015625, _207, _193 * (-0.10000002384185791015625)));
    float _390 = fma(0.989949524402618408203125, _215, fma(-0.10000002384185791015625, _208, _194 * (-0.10000002384185791015625)));
    float _393 = fma(0.989949524402618408203125, _216, fma(-0.10000002384185791015625, _209, _195 * (-0.10000002384185791015625)));
    float _397 = inversesqrt(dot(vec3(_386, _390, _393), vec3(_386, _390, _393)));
    float _404 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _405 = _404 * _271;
    float _406 = _404 * _272;
    float _407 = _404 * _273;
    float _411 = dot(vec4(_405, _406, _407, 0.0), vec4(_397 * _386, _397 * _390, _397 * _393, 0.0)) - cbMtdParam._m0[11u].z;
    float _3301 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _418 = exp2(log2(1.0 - (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _419 = TEXCOORD_1.z * 10.0;
    float _432 = fma(_330, _214, fma(_323, _207, _321 * _193));
    float _435 = fma(_330, _215, fma(_323, _208, _321 * _194));
    float _438 = fma(_330, _216, fma(_323, _209, _321 * _195));
    float _442 = inversesqrt(dot(vec3(_432, _435, _438), vec3(_432, _435, _438)));
    float _443 = _442 * _432;
    float _444 = _442 * _435;
    float _445 = _442 * _438;
    float _3317 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _446 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _447 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3350 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3361 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _494 = fma(_445, cbSceneParam._m0[5u].z, fma(_444, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _443));
    float _497 = fma(_445, cbSceneParam._m0[6u].z, fma(_444, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _443));
    float _500 = fma(_445, cbSceneParam._m0[7u].z, fma(_444, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _443));
    uint _513 = uint(roundEven(NORMAL.w)) * 13u;
    uint _515 = _513 + 9u;
    uint _516 = _515 + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3372 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    vec4 _536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _539 = _536.x * TEXCOORD_1.w;
    float _540 = dot(vec3(_443, _444, _445), vec3(_405, _406, _407));
    float _543 = _540 * 2.0;
    float _547 = (_543 * _443) - _405;
    float _548 = (_543 * _444) - _406;
    float _549 = (_543 * _445) - _407;
    float _553 = abs(dot(vec3(_405, _406, _407), vec3(_443, _444, _445)));
    float _3405 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _555 = sqrt(_447);
    float _568 = exp2((_555 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_555 * 3.0));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _443;
        float _669 = _604 + _444;
        float _670 = _608 + _445;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_443, _444, _445), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3453 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_443, _444, _445), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3486 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_443, _444, _445), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3519 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _443;
        float _983 = _604 + _444;
        float _984 = _608 + _445;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_443, _444, _445), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3582 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_443, _444, _445), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3615 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_443, _444, _445), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3648 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _547 * 0.5;
    float _1289 = _548 * 0.5;
    float _1290 = _549 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_549, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547));
        float _1420 = fma(_549, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547));
        float _1423 = fma(_549, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1451 = frontier_phi_16_14_ladder;
        }
        float _1677;
        if (_1420 > 0.0)
        {
            _1677 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1677 = frontier_phi_25_21_ladder;
        }
        float _1923;
        if (_1423 > 0.0)
        {
            _1923 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1923 = frontier_phi_37_32_ladder;
        }
        float _1925 = isnan(_1677) ? _1451 : (isnan(_1451) ? _1677 : min(_1451, _1677));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1417) + _1406;
        float _1931 = (_1926 * _1420) + _1410;
        float _1932 = (_1926 * _1423) + _1414;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_15_37_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_15_37_ladder_2;
        _1441 = frontier_phi_15_37_ladder_1;
        _1443 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_547, _548, _549), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_549, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547));
        float _1519 = fma(_549, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547));
        float _1522 = fma(_549, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547));
        float _1682;
        if (_1516 > 0.0)
        {
            _1682 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1682 = frontier_phi_27_23_ladder;
        }
        float _1950;
        if (_1519 > 0.0)
        {
            _1950 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1950 = frontier_phi_39_34_ladder;
        }
        float _2155;
        if (_1522 > 0.0)
        {
            _2155 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2155 = frontier_phi_48_45_ladder;
        }
        float _2157 = isnan(_1950) ? _1682 : (isnan(_1682) ? _1950 : min(_1682, _1950));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1516) + _1505;
        float _2163 = (_2158 * _1519) + _1509;
        float _2164 = (_2158 * _1522) + _1513;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_24_48_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_24_48_ladder_2;
        _1543 = frontier_phi_24_48_ladder_1;
        _1545 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_547, _548, _549), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1557 = ((((1.0 - _568) * ((_555 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_568 * _555)) * _539;
    float _1558 = _1557 * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1559 = _1557 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1560 = _1557 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    vec4 _1577 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_472, _473));
    float _1579 = _1577.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1579);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1579);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1579);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_513 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _539 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1636 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1640 = _1599 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_443, _444, _445));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_443, _444, _445));
    float _3784 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3795 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1616].x * _1622) * _1661) + (((cbLight._m0[_1626].x * _1591) * _1636) * _1659);
    float _1669 = ((_1622 * cbLight._m0[_1616].y) * _1661) + (((cbLight._m0[_1626].y * _1592) * _1636) * _1659);
    float _1670 = ((_1622 * cbLight._m0[_1616].z) * _1661) + (((cbLight._m0[_1626].z * _1593) * _1636) * _1659);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1668;
        _1689 = _1669;
        _1691 = _1670;
    }
    else
    {
        uint _1695 = _1599 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3806 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1714 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1670;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1894 = _1599 + 7u;
        float _1910 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _3822 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1913 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1732 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1687;
        _1734 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1689;
        _1736 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1691;
    }
    uint _1739 = _1599 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _447) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1599].x + _405;
    float _1755 = cbLight._m0[_1599].y + _406;
    float _1756 = cbLight._m0[_1599].z + _407;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1599].xyz));
    float _3838 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _1768 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1769 = dot(vec3(_443, _444, _445), vec3(_1761, _1762, _1763));
    float _3860 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1761, _1762, _1763));
    float _3871 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1793 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1768 * ((_1767 * _1793) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1793) + _1753) * _1767))) * _1767;
    float _3882 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1820 = _1599 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _447) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1640].x + _405;
    float _1834 = cbLight._m0[_1640].y + _406;
    float _1835 = cbLight._m0[_1640].z + _407;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1640].xyz));
    float _3893 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1847 = dot(vec3(_443, _444, _445), vec3(_1840, _1841, _1842));
    float _3904 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1840, _1841, _1842));
    float _3915 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1869 = 1.0 - _1832;
    float _1879 = (0.5 / (((_1768 * ((_1846 * _1869) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1869) + _1832) * _1846))) * _1846;
    float _3926 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1891 = (((_1868 * cbLight._m0[_1820].x) * _1881) * _1622) + ((((cbLight._m0[_1739].x * _1591) * _1792) * _1806) * _1636);
    float _1892 = (((_1868 * cbLight._m0[_1820].y) * _1881) * _1622) + ((((cbLight._m0[_1739].y * _1592) * _1792) * _1806) * _1636);
    float _1893 = (((_1868 * cbLight._m0[_1820].z) * _1881) * _1622) + ((((cbLight._m0[_1739].z * _1593) * _1792) * _1806) * _1636);
    float _1955;
    float _1957;
    float _1959;
    if (_1676)
    {
        _1955 = _1891;
        _1957 = _1892;
        _1959 = _1893;
    }
    else
    {
        uint _1961 = _1599 + 2u;
        uint _1965 = _1599 + 10u;
        float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _447) * 0.949999988079071044921875);
        float _1980 = _1979 * _1979;
        float _1981 = cbLight._m0[_1961].x + _405;
        float _1982 = cbLight._m0[_1961].y + _406;
        float _1983 = cbLight._m0[_1961].z + _407;
        float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
        float _1988 = _1987 * _1981;
        float _1989 = _1987 * _1982;
        float _1990 = _1987 * _1983;
        float _1991 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1961].xyz));
        float _3937 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1995 = dot(vec3(_443, _444, _445), vec3(_1988, _1989, _1990));
        float _3948 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1999 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_1988, _1989, _1990));
        float _3959 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2003 = _1980 * _1980;
        float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
        float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2017 = 1.0 - _1980;
        float _2027 = (0.5 / (((_1768 * ((_1994 * _2017) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2017) + _1980) * _1994))) * _1994;
        float _3970 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1955 = (((_2016 * cbLight._m0[_1965].x) * _2029) * _2030) + _1891;
        _1957 = (((_2016 * cbLight._m0[_1965].y) * _2029) * _2030) + _1892;
        _1959 = (((_2016 * cbLight._m0[_1965].z) * _2029) * _2030) + _1893;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1694)
    {
        _2065 = _1955;
        _2067 = _1957;
        _2069 = _1959;
    }
    else
    {
        uint _2076 = _1599 + 3u;
        uint _2080 = _1599 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _447) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _405;
        float _2097 = cbLight._m0[_2076].y + _406;
        float _2098 = cbLight._m0[_2076].z + _407;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2076].xyz));
        float _3986 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2110 = dot(vec3(_443, _444, _445), vec3(_2103, _2104, _2105));
        float _3997 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4008 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2132 = 1.0 - _2095;
        float _2142 = (0.5 / (((_1768 * ((_2109 * _2132) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2132) + _2095) * _2109))) * _2109;
        float _4019 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2065 = (((_2131 * cbLight._m0[_2080].x) * _2144) * _2145) + _1955;
        _2067 = (((_2131 * cbLight._m0[_2080].y) * _2144) * _2145) + _1957;
        _2069 = (((_2131 * cbLight._m0[_2080].z) * _2144) * _2145) + _1959;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1597.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
        }
        else
        {
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2567)
                {
                    frontier_phi_63_pred = _2556;
                    frontier_phi_63_pred_1 = _2555;
                    frontier_phi_63_pred_2 = _2554;
                    frontier_phi_63_pred_3 = _2553;
                    frontier_phi_63_pred_4 = _2552;
                    frontier_phi_63_pred_5 = _2551;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2566;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2557 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2221;
                        float _2742 = _2701.y - _2222;
                        float _2743 = _2701.z - _2223;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_494, _497, _500), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4045 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2221;
                        float _2777 = (-0.0) - _2222;
                        float _2778 = (-0.0) - _2223;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _555;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_494, _497, _500), vec3(_2783, _2784, _2785));
                        float _4061 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2818 = dot(vec3(_494, _497, _500), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4072 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4083 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4094 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2610 = (_2772 * _2720.x) + _2678;
                        _2611 = (_2772 * _2720.y) + _2679;
                        _2612 = (_2772 * _2720.z) + _2680;
                        _2607 = (_2853 * _2737.x) + _2675;
                        _2608 = (_2853 * _2737.y) + _2676;
                        _2609 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_63_pred = _2612;
                    frontier_phi_63_pred_1 = _2611;
                    frontier_phi_63_pred_2 = _2610;
                    frontier_phi_63_pred_3 = _2609;
                    frontier_phi_63_pred_4 = _2608;
                    frontier_phi_63_pred_5 = _2607;
                }
                _2409 = frontier_phi_63_pred;
                _2407 = frontier_phi_63_pred_1;
                _2405 = frontier_phi_63_pred_2;
                _2403 = frontier_phi_63_pred_3;
                _2401 = frontier_phi_63_pred_4;
                _2399 = frontier_phi_63_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2399;
                    _2552 = _2401;
                    _2553 = _2403;
                    _2554 = _2405;
                    _2555 = _2407;
                    _2556 = _2409;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
        }
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.z;
        uint _2415 = (_2413 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2415) & _2267) == 0u)
        {
            _2519 = _2398;
            _2521 = _2400;
            _2523 = _2402;
            _2525 = _2404;
            _2527 = _2406;
            _2529 = _2408;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2545 = _2544 * _2221;
            float _2546 = _2544 * _2222;
            float _2547 = _2544 * _2223;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2415 < ((_2413 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2658 = _2398;
                float _2659 = _2400;
                float _2660 = _2402;
                float _2661 = _2404;
                float _2662 = _2406;
                float _2663 = _2408;
                uint _2664 = _2415;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2674)
                    {
                        frontier_phi_69_pred = _2663;
                        frontier_phi_69_pred_1 = _2662;
                        frontier_phi_69_pred_2 = _2661;
                        frontier_phi_69_pred_3 = _2660;
                        frontier_phi_69_pred_4 = _2659;
                        frontier_phi_69_pred_5 = _2658;
                    }
                    else
                    {
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        uint _2877 = _2673;
                        uint _2878;
                        vec4 _2903;
                        float _2904;
                        vec4 _2919;
                        vec3 _2931;
                        vec4 _2947;
                        vec4 _2963;
                        float _3010;
                        bool _3011;
                        for (;;)
                        {
                            uint _2888 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2877));
                            _2878 = (_2877 + 4294967295u) & _2877;
                            uint _2890 = _2888 * 40u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2904 = _2903.w;
                            uint _2906 = (_2888 * 40u) + 4u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2888 * 40u) + 8u;
                            _2931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x));
                            uint _2934 = (_2888 * 40u) + 16u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2888 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2888 * 40u) + 24u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2985 = (_2888 * 40u) + 28u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _3010 = fma(_2223, _2998.z, fma(_2222, _2998.y, _2998.x * _2221)) + _2998.w;
                            _3011 = !((fma(_2223, _2979.z, fma(_2222, _2979.y, _2979.x * _2221)) + _2979.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3011)
                            {
                                float _3038 = _2903.x - _2221;
                                float _3039 = _2903.y - _2222;
                                float _3040 = _2903.z - _2223;
                                float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                                float _3044 = inversesqrt(_3041);
                                float _3045 = _3044 * _3038;
                                float _3046 = _3044 * _3039;
                                float _3047 = _3044 * _3040;
                                float _3051 = 1.0 - (_3041 / (_2904 * _2904));
                                float _4105 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3056 = sqrt(_3041) * _2919.w;
                                float _3058 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                                float _3059 = _3058 * _3058;
                                float _3062 = ((1.0 - _3059) * dot(vec3(_3045, _3046, _3047), vec3(_494, _497, _500))) + _3059;
                                float _3065 = _3056 * _3056;
                                float _3069 = (fma(_2223, _2947.z, fma(_2222, _2947.y, _2947.x * _2221)) + _2947.w) / _3010;
                                float _3070 = (fma(_2223, _2963.z, fma(_2222, _2963.y, _2963.x * _2221)) + _2963.w) / _3010;
                                float _3074 = 1.0 - dot(vec2(_3069, _3070), vec2(_3069, _3070));
                                float _4121 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3076 = _3075 * (((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3052) / ((_3065 * 0.699999988079071044921875) + 1.0));
                                float _3088 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                                float _3089 = 1.0 - _555;
                                float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                                float _3097 = _3096 * _3096;
                                float _3098 = _3097 * _3097;
                                float _3099 = _3045 - _2545;
                                float _3100 = _3046 - _2546;
                                float _3101 = _3047 - _2547;
                                float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                                float _3109 = dot(vec3(_494, _497, _500), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4132 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3113 = dot(vec3(_494, _497, _500), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                                float _4143 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                                float _3121 = _3058 * _3097;
                                float _3122 = _3121 * _3121;
                                float _3128 = ((1.0 - _3122) * dot(vec3(_494, _497, _500), vec3(_3045, _3046, _3047))) + _3122;
                                float _4154 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3130 = 1.0 - _3097;
                                float _3140 = (0.5 / (((_3129 * ((_3112 * _3130) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3097) * _3112))) * _3129;
                                float _4165 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3150 = (_3075 * _3052) * (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) / ((_3120 * _3120) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3076 * _2919.z;
                                frontier_phi_75_pred_1 = _3076 * _2919.y;
                                frontier_phi_75_pred_2 = _3076 * _2919.x;
                                frontier_phi_75_pred_3 = _3150 * _2931.z;
                                frontier_phi_75_pred_4 = _3150 * _2931.y;
                                frontier_phi_75_pred_5 = _3150 * _2931.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3159 = frontier_phi_75_pred;
                            _3158 = frontier_phi_75_pred_1;
                            _3157 = frontier_phi_75_pred_2;
                            _3156 = frontier_phi_75_pred_3;
                            _3155 = frontier_phi_75_pred_4;
                            _3154 = frontier_phi_75_pred_5;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            if (_2878 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2878;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2863;
                        frontier_phi_69_pred_1 = _2862;
                        frontier_phi_69_pred_2 = _2861;
                        frontier_phi_69_pred_3 = _2860;
                        frontier_phi_69_pred_4 = _2859;
                        frontier_phi_69_pred_5 = _2858;
                    }
                    _2530 = frontier_phi_69_pred;
                    _2528 = frontier_phi_69_pred_1;
                    _2526 = frontier_phi_69_pred_2;
                    _2524 = frontier_phi_69_pred_3;
                    _2522 = frontier_phi_69_pred_4;
                    _2520 = frontier_phi_69_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2520;
                        _2659 = _2522;
                        _2660 = _2524;
                        _2661 = _2526;
                        _2662 = _2528;
                        _2663 = _2530;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2530;
                frontier_phi_57_58_ladder_1 = _2528;
                frontier_phi_57_58_ladder_2 = _2526;
                frontier_phi_57_58_ladder_3 = _2524;
                frontier_phi_57_58_ladder_4 = _2522;
                frontier_phi_57_58_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_57_58_ladder = _2408;
                frontier_phi_57_58_ladder_1 = _2406;
                frontier_phi_57_58_ladder_2 = _2404;
                frontier_phi_57_58_ladder_3 = _2402;
                frontier_phi_57_58_ladder_4 = _2400;
                frontier_phi_57_58_ladder_5 = _2398;
            }
            _2519 = frontier_phi_57_58_ladder_5;
            _2521 = frontier_phi_57_58_ladder_4;
            _2523 = frontier_phi_57_58_ladder_3;
            _2525 = frontier_phi_57_58_ladder_2;
            _2527 = frontier_phi_57_58_ladder_1;
            _2529 = frontier_phi_57_58_ladder;
        }
        float _2534 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
        _2279 = (_2534 * _2525) + _1732;
        _2281 = (_2534 * _2527) + _1734;
        _2283 = (_2534 * _2529) + _1736;
        _2285 = ((_2519 * 0.039999999105930328369140625) * _2534) + _2065;
        _2287 = ((_2521 * 0.039999999105930328369140625) * _2534) + _2067;
        _2289 = ((_2523 * 0.039999999105930328369140625) * _2534) + _2069;
    }
    else
    {
        _2279 = _1732;
        _2281 = _1734;
        _2283 = _1736;
        _2285 = _2065;
        _2287 = _2067;
        _2289 = _2069;
    }
    uint _2295 = _515 + uint(cbMatDynParam._m0[0u].w);
    float _2301 = cbInstanceData._m0[_2295].x * (((_365.x * cbMtdParam._m0[11u].w) + (_345.x * cbMtdParam._m0[11u].y)) + ((_419 * cbMtdParam._m0[9u].x) * _418));
    float _2302 = cbInstanceData._m0[_2295].y * (((_365.y * cbMtdParam._m0[11u].w) + (_345.y * cbMtdParam._m0[11u].y)) + ((_419 * cbMtdParam._m0[9u].y) * _418));
    float _2303 = cbInstanceData._m0[_2295].z * (((_365.z * cbMtdParam._m0[11u].w) + (_345.z * cbMtdParam._m0[11u].y)) + ((_419 * cbMtdParam._m0[9u].z) * _418));
    float _4181 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4192 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4203 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4214 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2321 = (((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2279 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _539))) + ((_2285 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + _2301;
    float _2323 = (_2302 + ((_2287 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2281 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _539)));
    float _2325 = (_2303 + ((_2289 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2283 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _539)));
    float _4240 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2338 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2343 = cbInstanceData._m0[_513 + 6u].w * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)));
    float _2348 = _472 / cbSceneParam._m0[86u].x;
    float _2349 = _473 / cbSceneParam._m0[86u].y;
    vec4 _2363 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2365 = _2363.x;
    float _2366 = _2363.y;
    float _2367 = _2363.z;
    float _2368 = _2363.w;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2423 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2424 = _2423 / _466;
        float _2435 = _2424 * _271;
        float _2436 = _272 * _2424;
        float _2437 = (-0.0) - _2436;
        float _2438 = _2424 * _273;
        float _2440 = (cbSceneParam._m0[77u].w * _2437) / _2423;
        float _2441 = _2440 + cbSceneParam._m0[79u].w;
        float _2442 = cbSceneParam._m0[79u].w - _2436;
        float _2448 = sqrt(((_2435 * _2435) + (_2436 * _2436)) + (_2438 * _2438));
        float _2451 = (1.0 - (cbSceneParam._m0[77u].w / _2423)) * _2448;
        float _2456 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2458 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2437 - _2440) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2441 > 0.0) ? exp2(_2456 * _2441) : (2.0 - exp2(_2458 * _2441))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2451;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : max(_2441, _2442));
            float _2582 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : min(_2441, _2442));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2620 = ((abs(_2448 / _2437) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2456 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2456 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2458 * _2591) - exp2(_2458 * _2592)) * _2580))) + (_2451 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2368);
        _2460 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2365;
        _2462 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2366;
        _2464 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2367;
        _2466 = _2631 * _2368;
    }
    else
    {
        _2460 = _2365;
        _2462 = _2366;
        _2464 = _2367;
        _2466 = _2368;
    }
    float _2478 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2479 = _2478 == 3.0;
    float _2480 = log2(_2466);
    float _2484 = exp2(_2480 * cbSceneParam._m0[78u].x);
    float _2485 = exp2(_2480 * cbSceneParam._m0[78u].y);
    float _2486 = exp2(_2480 * cbSceneParam._m0[78u].z);
    float _2487 = _2484 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2488 = _2485 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)));
    float _2489 = _2486 * (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)));
    float _2498 = (_2478 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2498 * (_2479 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2460)));
    SV_Target.y = _2498 * (_2479 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.z = _2498 * (_2479 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.w = _2343;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2301) * _2338) * _2484) * _2498;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2302) * _2338) * _2485) * _2498;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2303) * _2338) * _2486) * _2498;
    SV_Target_1.w = _2343;
}


