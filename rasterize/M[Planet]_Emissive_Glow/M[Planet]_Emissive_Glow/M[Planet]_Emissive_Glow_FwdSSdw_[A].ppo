#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Planet_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _922;
float _3351;
float _3352;
float _3353;
float _3354;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _290 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _290.w;
    float _302 = cbMtdParam._m0[10u].x * _290.x;
    float _303 = cbMtdParam._m0[10u].y * _290.y;
    float _304 = cbMtdParam._m0[10u].z * _290.z;
    float _305 = _296 * TEXCOORD_1.z;
    vec4 _317 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3363 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    vec4 _349 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _369 = texture(sampler2D(M_Planet_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _390 = fma(0.989949524402618408203125, _218, fma(-0.10000002384185791015625, _211, _197 * (-0.10000002384185791015625)));
    float _394 = fma(0.989949524402618408203125, _219, fma(-0.10000002384185791015625, _212, _198 * (-0.10000002384185791015625)));
    float _397 = fma(0.989949524402618408203125, _220, fma(-0.10000002384185791015625, _213, _199 * (-0.10000002384185791015625)));
    float _401 = inversesqrt(dot(vec3(_390, _394, _397), vec3(_390, _394, _397)));
    float _408 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _409 = _408 * _275;
    float _410 = _408 * _276;
    float _411 = _408 * _277;
    float _415 = dot(vec4(_409, _410, _411, 0.0), vec4(_401 * _390, _401 * _394, _401 * _397, 0.0)) - cbMtdParam._m0[11u].z;
    float _3374 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _422 = exp2(log2(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[11u].x, 0.001000000047497451305389404296875))));
    float _423 = TEXCOORD_1.z * 10.0;
    float _436 = fma(_334, _218, fma(_327, _211, _325 * _197));
    float _439 = fma(_334, _219, fma(_327, _212, _325 * _198));
    float _442 = fma(_334, _220, fma(_327, _213, _325 * _199));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _3390 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _450 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _451 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3423 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3434 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    float _483 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _484 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_449, cbSceneParam._m0[5u].z, fma(_448, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _447));
    float _508 = fma(_449, cbSceneParam._m0[6u].z, fma(_448, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _447));
    float _511 = fma(_449, cbSceneParam._m0[7u].z, fma(_448, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _447));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = _524 + 9u;
    uint _527 = _526 + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3445 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _483, cbSceneParam._m0[86u].y * _484));
    float _550 = _547.x * TEXCOORD_1.w;
    float _551 = dot(vec3(_447, _448, _449), vec3(_409, _410, _411));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _447) - _409;
    float _559 = (_554 * _448) - _410;
    float _560 = (_554 * _449) - _411;
    float _564 = abs(dot(vec3(_409, _410, _411), vec3(_447, _448, _449)));
    float _3478 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_451);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611));
        float _650 = fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611));
        float _654 = fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611));
        float _679 = _611 + _447;
        float _680 = _615 + _448;
        float _681 = _619 + _449;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_447, _448, _449), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3526 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_447, _448, _449), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3559 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_447, _448, _449), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3592 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _962 = fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611));
        float _966 = fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611));
        float _970 = fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611));
        float _993 = _611 + _447;
        float _994 = _615 + _448;
        float _995 = _619 + _449;
        float _1005 = fma(_995, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_962 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_966 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[35u].z) + ((((((_970 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1061 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1028.x + (-0.5));
        float _1063 = _1061 * (_1028.y + (-0.5));
        float _1064 = _1061 * (_1028.z + (-0.5));
        float _1071 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1035.x + (-0.5));
        float _1073 = _1071 * (_1035.y + (-0.5));
        float _1074 = _1071 * (_1035.z + (-0.5));
        float _1081 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1042.x + (-0.5));
        float _1083 = _1081 * (_1042.y + (-0.5));
        float _1084 = _1081 * (_1042.z + (-0.5));
        float _1091 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1049.x + (-0.5));
        float _1093 = _1091 * (_1049.y + (-0.5));
        float _1094 = _1091 * (_1049.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_447, _448, _449), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3655 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1125 + 1.0))) + _1130) * _1095;
        float _1140 = _1063 * 0.5;
        float _1141 = _1073 * 0.5;
        float _1142 = _1083 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_447, _448, _449), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3688 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1167 + 1.0))) + _1172) * _1096;
        float _1182 = _1064 * 0.5;
        float _1183 = _1074 * 0.5;
        float _1184 = _1084 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_447, _448, _449), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3721 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1209 + 1.0))) + _1214) * _1097;
        _1231 = _1064;
        _1232 = _1063;
        _1233 = _1062;
        _1234 = _1074;
        _1235 = _1073;
        _1236 = _1072;
        _1237 = _1084;
        _1238 = _1083;
        _1239 = _1082;
        _1240 = _1097;
        _1241 = _1096;
        _1242 = _1095;
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _922;
        _1232 = _922;
        _1233 = _922;
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1278 = fma(_1257, cbSceneParam._m0[89u].z, fma(_1256, cbSceneParam._m0[89u].y, _1255 * cbSceneParam._m0[89u].x));
    float _1281 = fma(_1257, cbSceneParam._m0[90u].z, fma(_1256, cbSceneParam._m0[90u].y, _1255 * cbSceneParam._m0[90u].x));
    float _1284 = fma(_1257, cbSceneParam._m0[91u].z, fma(_1256, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1255));
    float _1299 = _558 * 0.5;
    float _1300 = _559 * 0.5;
    float _1301 = _560 * 0.5;
    float _1302 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1305 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1308 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1342;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1315 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_921, _925, _928, _931));
        float _1319 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_923, _926, _929, _932));
        float _1323 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_924, _927, _930, _933));
        float _1330 = dot(vec4(cbModelParam._m0[39u]), vec4(_1299, _1300, _1301, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1353;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1344 = dot(vec4(cbModelParam._m0[40u]), vec4(_1299, _1300, _1301, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1357 = (_1353 * cbModelParam._m0[1u].x) + (_1342 * (1.0 - cbModelParam._m0[1u].x));
    float _1367 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1368 = isnan(_1367) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1367 : min(cbModelParam._m0[25u].z, _1367));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1431 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1434 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1462;
        if (_1428 > 0.0)
        {
            _1462 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1462 = frontier_phi_16_14_ladder;
        }
        float _1688;
        if (_1431 > 0.0)
        {
            _1688 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1688 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1434 > 0.0)
        {
            _1934 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_37_32_ladder;
        }
        float _1936 = isnan(_1688) ? _1462 : (isnan(_1462) ? _1688 : min(_1462, _1688));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1428) + _1417;
        float _1942 = (_1937 * _1431) + _1421;
        float _1943 = (_1937 * _1434) + _1425;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1368);
            frontier_phi_15_37_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_15_37_ladder_2;
        _1452 = frontier_phi_15_37_ladder_1;
        _1454 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1368);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1458 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1458 : min(cbModelParam._m0[25u].w, _1458));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1530 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1533 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1693;
        if (_1527 > 0.0)
        {
            _1693 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1693 = frontier_phi_27_23_ladder;
        }
        float _1961;
        if (_1530 > 0.0)
        {
            _1961 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1961 = frontier_phi_39_34_ladder;
        }
        float _2166;
        if (_1533 > 0.0)
        {
            _2166 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2166 = frontier_phi_48_45_ladder;
        }
        float _2168 = isnan(_1961) ? _1693 : (isnan(_1693) ? _1961 : min(_1693, _1961));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1527) + _1516;
        float _2174 = (_2169 * _1530) + _1520;
        float _2175 = (_2169 * _1533) + _1524;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2176;
        float _2179 = _2176 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2175 > _2179) || ((_2175 < _2177) || ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 < _2177) || (_2173 > _2179))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2175, cbModelParam._m0[17u].z, fma(_2174, cbModelParam._m0[17u].y, _2173 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2175, cbModelParam._m0[18u].z, fma(_2174, cbModelParam._m0[18u].y, _2173 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2175, cbModelParam._m0[19u].z, fma(_2174, cbModelParam._m0[19u].y, _2173 * cbModelParam._m0[19u].x))), _1459);
            frontier_phi_24_48_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_24_48_ladder_2;
        _1554 = frontier_phi_24_48_ladder_1;
        _1556 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1459);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = ((((1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_579 * _566)) * _550;
    float _1569 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    vec4 _1588 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_483, _484));
    float _1590 = _1588.w;
    float _1602 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1590);
    float _1603 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1590);
    float _1604 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1590);
    uvec4 _1608 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1610 = _1608.x * 14u;
    uint _1611 = _1610 + 13u;
    float _1618 = _550 + (-1.0);
    float _1623 = (cbLight._m0[_1611].x * _1618) + 1.0;
    float _1624 = (cbLight._m0[_1611].y * _1618) + 1.0;
    float _1625 = (cbLight._m0[_1611].z * _1618) + 1.0;
    float _1626 = (cbLight._m0[_1611].w * _1618) + 1.0;
    uint _1627 = _1610 + 5u;
    float _1633 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1637 = _1610 + 4u;
    float _1647 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1651 = _1610 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_447, _448, _449));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_447, _448, _449));
    float _3857 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3868 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1627].x * _1633) * _1672) + (((cbLight._m0[_1637].x * _1602) * _1647) * _1670);
    float _1680 = ((_1633 * cbLight._m0[_1627].y) * _1672) + (((cbLight._m0[_1637].y * _1603) * _1647) * _1670);
    float _1681 = ((_1633 * cbLight._m0[_1627].z) * _1672) + (((cbLight._m0[_1637].z * _1604) * _1647) * _1670);
    uvec4 _1685 = floatBitsToUint(cbLight._m0[_1610 + 12u]);
    bool _1687 = _1685.x == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1687)
    {
        _1698 = _1679;
        _1700 = _1680;
        _1702 = _1681;
    }
    else
    {
        uint _1706 = _1610 + 6u;
        float _1722 = (dot(vec3(cbLight._m0[_1610 + 2u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1723 = _1722 * _1722;
        float _3879 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1725 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1698 = (((cbLight._m0[_1706].x * 0.3183098733425140380859375) * _1724) * _1725) + _1679;
        _1700 = (((cbLight._m0[_1706].y * 0.3183098733425140380859375) * _1724) * _1725) + _1680;
        _1702 = (((cbLight._m0[_1706].z * 0.3183098733425140380859375) * _1724) * _1725) + _1681;
    }
    bool _1705 = _1685.y == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1705)
    {
        _1743 = _1698;
        _1745 = _1700;
        _1747 = _1702;
    }
    else
    {
        uint _1905 = _1610 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1610 + 3u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3895 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1924 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1743 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1698;
        _1745 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1700;
        _1747 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1702;
    }
    uint _1750 = _1610 + 8u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1610].w)) * _451) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1610].x + _409;
    float _1766 = cbLight._m0[_1610].y + _410;
    float _1767 = cbLight._m0[_1610].z + _411;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1610].xyz));
    float _3911 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1779 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1780 = dot(vec3(_447, _448, _449), vec3(_1772, _1773, _1774));
    float _3933 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1772, _1773, _1774));
    float _3944 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1764 * _1764;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1779 * ((_1778 * _1804) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1804) + _1764) * _1778))) * _1778;
    float _3955 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    uint _1831 = _1610 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _451) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1651].x + _409;
    float _1845 = cbLight._m0[_1651].y + _410;
    float _1846 = cbLight._m0[_1651].z + _411;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1651].xyz));
    float _3966 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1858 = dot(vec3(_447, _448, _449), vec3(_1851, _1852, _1853));
    float _3977 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1851, _1852, _1853));
    float _3988 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1843;
    float _1890 = (0.5 / (((_1779 * ((_1857 * _1880) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1880) + _1843) * _1857))) * _1857;
    float _3999 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1902 = (((_1879 * cbLight._m0[_1831].x) * _1892) * _1633) + ((((cbLight._m0[_1750].x * _1602) * _1803) * _1817) * _1647);
    float _1903 = (((_1879 * cbLight._m0[_1831].y) * _1892) * _1633) + ((((cbLight._m0[_1750].y * _1603) * _1803) * _1817) * _1647);
    float _1904 = (((_1879 * cbLight._m0[_1831].z) * _1892) * _1633) + ((((cbLight._m0[_1750].z * _1604) * _1803) * _1817) * _1647);
    float _1966;
    float _1968;
    float _1970;
    if (_1687)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1610 + 2u;
        uint _1976 = _1610 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _451) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _409;
        float _1993 = cbLight._m0[_1972].y + _410;
        float _1994 = cbLight._m0[_1972].z + _411;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1972].xyz));
        float _4010 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2006 = dot(vec3(_447, _448, _449), vec3(_1999, _2000, _2001));
        float _4021 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _4032 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2028 = 1.0 - _1991;
        float _2038 = (0.5 / (((_1779 * ((_2005 * _2028) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2028) + _1991) * _2005))) * _2005;
        float _4043 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1966 = (((_2027 * cbLight._m0[_1976].x) * _2040) * _2041) + _1902;
        _1968 = (((_2027 * cbLight._m0[_1976].y) * _2040) * _2041) + _1903;
        _1970 = (((_2027 * cbLight._m0[_1976].z) * _2040) * _2041) + _1904;
    }
    float _2076;
    float _2078;
    float _2080;
    if (_1705)
    {
        _2076 = _1966;
        _2078 = _1968;
        _2080 = _1970;
    }
    else
    {
        uint _2087 = _1610 + 3u;
        uint _2091 = _1610 + 11u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _451) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _409;
        float _2108 = cbLight._m0[_2087].y + _410;
        float _2109 = cbLight._m0[_2087].z + _411;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2087].xyz));
        float _4059 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2121 = dot(vec3(_447, _448, _449), vec3(_2114, _2115, _2116));
        float _4070 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4081 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1779 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2143) + _2106) * _2120))) * _2120;
        float _4092 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _2076 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _1966;
        _2078 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _1968;
        _2080 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _1970;
    }
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_1608.y == 0u)
    {
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2231;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2231;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2231;
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.x;
        uint _2258 = uint((float(_2246.y) * floor(float(uint(cbSceneParam._m0[85u].y * _484) / _2247))) + floor(float(uint(cbSceneParam._m0[85u].x * _483) / _2247)));
        float _2268 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2269 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        uint _2272 = uint(isnan(14.0) ? _2269 : (isnan(_2269) ? 14.0 : min(_2269, 14.0)));
        uvec4 _2277 = texelFetch(g_lightClusterGridBuffer, int(((_2272 << 2u) + (_2258 << 6u)) >> 2u));
        uint _2278 = _2277.x;
        uint _2279 = _2246.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2279 >> 4u) & 15u)) + 4294967295u) & _2278) == 0u) || ((_2279 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2586)
                {
                    frontier_phi_65_pred = _2572;
                    frontier_phi_65_pred_1 = _2575;
                    frontier_phi_65_pred_2 = _2574;
                    frontier_phi_65_pred_3 = _2573;
                    frontier_phi_65_pred_4 = _2571;
                    frontier_phi_65_pred_5 = _2570;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2570;
                    _2717 = _2571;
                    _2718 = _2572;
                    _2719 = _2573;
                    _2720 = _2574;
                    _2721 = _2575;
                    _2722 = _2585;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2576 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2232;
                        float _2783 = _2742.y - _2233;
                        float _2784 = _2742.z - _2234;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_505, _508, _511), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4118 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2232;
                        float _2818 = (-0.0) - _2233;
                        float _2819 = (-0.0) - _2234;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _566;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_505, _508, _511), vec3(_2824, _2825, _2826));
                        float _4134 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2859 = dot(vec3(_505, _508, _511), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4145 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4156 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4167 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2645 = (_2813 * _2761.x) + _2719;
                        _2646 = (_2813 * _2761.y) + _2720;
                        _2647 = (_2813 * _2761.z) + _2721;
                        _2642 = (_2894 * _2778.x) + _2716;
                        _2643 = (_2894 * _2778.y) + _2717;
                        _2644 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2642;
                            _2717 = _2643;
                            _2718 = _2644;
                            _2719 = _2645;
                            _2720 = _2646;
                            _2721 = _2647;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_65_pred = _2644;
                    frontier_phi_65_pred_1 = _2647;
                    frontier_phi_65_pred_2 = _2646;
                    frontier_phi_65_pred_3 = _2645;
                    frontier_phi_65_pred_4 = _2643;
                    frontier_phi_65_pred_5 = _2642;
                }
                _2414 = frontier_phi_65_pred;
                _2420 = frontier_phi_65_pred_1;
                _2418 = frontier_phi_65_pred_2;
                _2416 = frontier_phi_65_pred_3;
                _2412 = frontier_phi_65_pred_4;
                _2410 = frontier_phi_65_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2410;
                    _2571 = _2412;
                    _2572 = _2414;
                    _2573 = _2416;
                    _2574 = _2418;
                    _2575 = _2420;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2426) & _2278) == 0u)
        {
            _2538 = _2409;
            _2540 = _2411;
            _2542 = _2413;
            _2544 = _2415;
            _2546 = _2417;
            _2548 = _2419;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _2564 = _2563 * _2232;
            float _2565 = _2563 * _2233;
            float _2566 = _2563 * _2234;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2699 = _2409;
                float _2700 = _2411;
                float _2701 = _2413;
                float _2702 = _2415;
                float _2703 = _2417;
                float _2704 = _2419;
                uint _2705 = _2426;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2715)
                    {
                        frontier_phi_76_pred = _2704;
                        frontier_phi_76_pred_1 = _2703;
                        frontier_phi_76_pred_2 = _2702;
                        frontier_phi_76_pred_3 = _2701;
                        frontier_phi_76_pred_4 = _2700;
                        frontier_phi_76_pred_5 = _2699;
                    }
                    else
                    {
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _2923 = _2699;
                        float _2924 = _2700;
                        float _2925 = _2701;
                        float _2926 = _2702;
                        float _2927 = _2703;
                        float _2928 = _2704;
                        uint _2929 = _2714;
                        uint _2930;
                        vec4 _2955;
                        float _2956;
                        vec4 _2971;
                        vec3 _2983;
                        vec4 _2999;
                        vec4 _3015;
                        float _3062;
                        bool _3063;
                        for (;;)
                        {
                            uint _2940 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2929));
                            _2930 = (_2929 + 4294967295u) & _2929;
                            uint _2942 = _2940 * 40u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2956 = _2955.w;
                            uint _2958 = (_2940 * 40u) + 4u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2973 = (_2940 * 40u) + 8u;
                            _2983 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x));
                            uint _2986 = (_2940 * 40u) + 16u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2940 * 40u) + 20u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2940 * 40u) + 24u;
                            vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3037 = (_2940 * 40u) + 28u;
                            vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3062 = fma(_2234, _3050.z, fma(_2233, _3050.y, _3050.x * _2232)) + _3050.w;
                            _3063 = !((fma(_2234, _3031.z, fma(_2233, _3031.y, _3031.x * _2232)) + _3031.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3063)
                            {
                                float _3090 = _2955.x - _2232;
                                float _3091 = _2955.y - _2233;
                                float _3092 = _2955.z - _2234;
                                float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                                float _3096 = inversesqrt(_3093);
                                float _3097 = _3096 * _3090;
                                float _3098 = _3096 * _3091;
                                float _3099 = _3096 * _3092;
                                float _3103 = 1.0 - (_3093 / (_2956 * _2956));
                                float _4178 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3108 = sqrt(_3093) * _2971.w;
                                float _3110 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                                float _3111 = _3110 * _3110;
                                float _3114 = ((1.0 - _3111) * dot(vec3(_3097, _3098, _3099), vec3(_505, _508, _511))) + _3111;
                                float _3117 = _3108 * _3108;
                                float _3121 = (fma(_2234, _2999.z, fma(_2233, _2999.y, _2999.x * _2232)) + _2999.w) / _3062;
                                float _3122 = (fma(_2234, _3015.z, fma(_2233, _3015.y, _3015.x * _2232)) + _3015.w) / _3062;
                                float _3126 = 1.0 - dot(vec2(_3121, _3122), vec2(_3121, _3122));
                                float _4194 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3128 = _3127 * (((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3104) / ((_3117 * 0.699999988079071044921875) + 1.0));
                                float _3140 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                                float _3141 = 1.0 - _566;
                                float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                                float _3149 = _3148 * _3148;
                                float _3150 = _3149 * _3149;
                                float _3151 = _3097 - _2564;
                                float _3152 = _3098 - _2565;
                                float _3153 = _3099 - _2566;
                                float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                                float _3161 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4205 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3165 = dot(vec3(_505, _508, _511), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                                float _4216 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                                float _3173 = _3110 * _3149;
                                float _3174 = _3173 * _3173;
                                float _3180 = ((1.0 - _3174) * dot(vec3(_505, _508, _511), vec3(_3097, _3098, _3099))) + _3174;
                                float _4227 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3182 = 1.0 - _3149;
                                float _3192 = (0.5 / (((_3181 * ((_3164 * _3182) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3149) * _3164))) * _3181;
                                float _4238 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3202 = (_3127 * _3104) * (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_3172 * _3172) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3128 * _2971.z;
                                frontier_phi_82_pred_1 = _3128 * _2971.y;
                                frontier_phi_82_pred_2 = _3128 * _2971.x;
                                frontier_phi_82_pred_3 = _3202 * _2983.z;
                                frontier_phi_82_pred_4 = _3202 * _2983.y;
                                frontier_phi_82_pred_5 = _3202 * _2983.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3211 = frontier_phi_82_pred;
                            _3210 = frontier_phi_82_pred_1;
                            _3209 = frontier_phi_82_pred_2;
                            _3208 = frontier_phi_82_pred_3;
                            _3207 = frontier_phi_82_pred_4;
                            _3206 = frontier_phi_82_pred_5;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            if (_2930 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2930;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2915;
                        frontier_phi_76_pred_1 = _2914;
                        frontier_phi_76_pred_2 = _2913;
                        frontier_phi_76_pred_3 = _2912;
                        frontier_phi_76_pred_4 = _2911;
                        frontier_phi_76_pred_5 = _2910;
                    }
                    _2549 = frontier_phi_76_pred;
                    _2547 = frontier_phi_76_pred_1;
                    _2545 = frontier_phi_76_pred_2;
                    _2543 = frontier_phi_76_pred_3;
                    _2541 = frontier_phi_76_pred_4;
                    _2539 = frontier_phi_76_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2539;
                        _2700 = _2541;
                        _2701 = _2543;
                        _2702 = _2545;
                        _2703 = _2547;
                        _2704 = _2549;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2545;
                frontier_phi_57_58_ladder_1 = _2549;
                frontier_phi_57_58_ladder_2 = _2547;
                frontier_phi_57_58_ladder_3 = _2543;
                frontier_phi_57_58_ladder_4 = _2541;
                frontier_phi_57_58_ladder_5 = _2539;
            }
            else
            {
                frontier_phi_57_58_ladder = _2415;
                frontier_phi_57_58_ladder_1 = _2419;
                frontier_phi_57_58_ladder_2 = _2417;
                frontier_phi_57_58_ladder_3 = _2413;
                frontier_phi_57_58_ladder_4 = _2411;
                frontier_phi_57_58_ladder_5 = _2409;
            }
            _2538 = frontier_phi_57_58_ladder_5;
            _2540 = frontier_phi_57_58_ladder_4;
            _2542 = frontier_phi_57_58_ladder_3;
            _2544 = frontier_phi_57_58_ladder;
            _2546 = frontier_phi_57_58_ladder_2;
            _2548 = frontier_phi_57_58_ladder_1;
        }
        float _2553 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2290 = (_2553 * _2544) + _1743;
        _2292 = (_2553 * _2546) + _1745;
        _2294 = (_2553 * _2548) + _1747;
        _2296 = ((_2538 * 0.039999999105930328369140625) * _2553) + _2076;
        _2298 = ((_2540 * 0.039999999105930328369140625) * _2553) + _2078;
        _2300 = ((_2542 * 0.039999999105930328369140625) * _2553) + _2080;
    }
    else
    {
        _2290 = _1743;
        _2292 = _1745;
        _2294 = _1747;
        _2296 = _2076;
        _2298 = _2078;
        _2300 = _2080;
    }
    uint _2306 = _526 + uint(cbMatDynParam._m0[0u].w);
    float _2312 = cbInstanceData._m0[_2306].x * (((_369.x * cbMtdParam._m0[11u].w) + (_349.x * cbMtdParam._m0[11u].y)) + ((_423 * cbMtdParam._m0[9u].x) * _422));
    float _2313 = cbInstanceData._m0[_2306].y * (((_369.y * cbMtdParam._m0[11u].w) + (_349.y * cbMtdParam._m0[11u].y)) + ((_423 * cbMtdParam._m0[9u].y) * _422));
    float _2314 = cbInstanceData._m0[_2306].z * (((_369.z * cbMtdParam._m0[11u].w) + (_349.z * cbMtdParam._m0[11u].y)) + ((_423 * cbMtdParam._m0[9u].z) * _422));
    float _4254 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4265 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4276 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4287 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2332 = (((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2290 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _550))) + ((_2296 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + _2312;
    float _2334 = (_2313 + ((_2298 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2292 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _550)));
    float _2336 = (_2314 + ((_2300 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2294 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _550)));
    float _2337 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2338 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2345 = cbMtdParam._m0[2u].x * _2312;
    float _2346 = cbMtdParam._m0[2u].y * _2313;
    float _2347 = cbMtdParam._m0[2u].z * _2314;
    float _4313 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2349 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2354 = cbInstanceData._m0[_524 + 6u].w * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)));
    float _2359 = _483 / cbSceneParam._m0[86u].x;
    float _2360 = _484 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2435 = _2434 / _470;
        float _2446 = _2435 * _275;
        float _2447 = _276 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2449 = _2435 * _277;
        float _2451 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2447;
        float _2459 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2655;
        if (abs((_2448 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2655 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2601 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2655 = ((abs(_2459 / _2448) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2469 * _2610) - exp2(_2469 * _2611)) * _2599))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2666 = exp2((_2655 * (-1.44269502162933349609375)) * (1.0 - _2657.w));
        float _2667 = log2(_2666);
        float _2683 = log2(_2379);
        _2471 = (exp2(_2683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].x)) * _2657.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2473 = (exp2(_2683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].y)) * _2657.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2475 = (exp2(_2683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].z)) * _2657.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2477 = _2666 * _2379;
    }
    else
    {
        _2471 = _2376;
        _2473 = _2377;
        _2475 = _2378;
        _2477 = _2379;
    }
    bool _2693;
    vec4 _2487;
    vec4 _2509;
    float _2511;
    float _2515;
    float _2516;
    float _2517;
    float _2520;
    float _2523;
    float _2526;
    float _2527;
    bool _2537;
    for (;;)
    {
        _2487 = cbMatDynParam._m0[0u];
        float _2489 = roundEven(_2487.y);
        bool _2490 = _2489 == 3.0;
        float _2491 = log2(_2477);
        float _2495 = exp2(_2491 * cbSceneParam._m0[78u].x);
        float _2496 = exp2(_2491 * cbSceneParam._m0[78u].y);
        float _2497 = exp2(_2491 * cbSceneParam._m0[78u].z);
        float _2498 = _2495 * _2337;
        float _2499 = _2496 * _2338;
        float _2500 = _2497 * _2339;
        float _2507 = _477 + (-0.5);
        _2509 = cbMtdParam._m0[1u];
        _2511 = _2509.y * _2507;
        float _2514 = (_2489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2515 = _2514 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
        _2516 = _2514 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
        _2517 = _2514 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = ((_2345 * _2349) * _2495) * _2514;
        _2523 = ((_2346 * _2349) * _2496) * _2514;
        _2526 = ((_2347 * _2349) * _2497) * _2514;
        _2527 = _2507 * 0.999000012874603271484375;
        _2537 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2537)
        {
            if ((cbInstanceData._m0[_524 + 7u].x + _2527) < 0.5)
            {
                _2693 = true;
                break;
            }
        }
        uint _2634 = _526 + uint(_2487.w);
        if ((cbInstanceData._m0[_2634].w < 1.0) && ((cbInstanceData._m0[_2634].w + _2527) < 0.5))
        {
            _2693 = true;
            break;
        }
        if ((_2511 + _296) < _2509.x)
        {
            _2693 = true;
            break;
        }
        _2693 = false;
        break;
    }
    float _2901;
    if (_2693)
    {
        discard_state = true;
        _2901 = 0.0;
    }
    else
    {
        _2901 = _2354;
    }
    SV_Target.x = _2515;
    SV_Target.y = _2516;
    SV_Target.z = _2517;
    SV_Target.w = _2901;
    SV_Target_1.x = _2520;
    SV_Target_1.y = _2523;
    SV_Target_1.z = _2526;
    SV_Target_1.w = _2354;
    discard_exit();
}


