#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _733;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    vec4 _225 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _234 = _233 * _173;
    float _235 = _233 * _174;
    float _236 = _233 * _175;
    float _2891 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2902 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2913 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _256 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _307 * _313;
    float _315 = _308 * _313;
    float _316 = _309 * _313;
    float _322 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _323 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _344 = fma(_236, cbSceneParam._m0[5u].z, fma(_235, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _234));
    float _347 = fma(_236, cbSceneParam._m0[6u].z, fma(_235, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _234));
    float _350 = fma(_236, cbSceneParam._m0[7u].z, fma(_235, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _234));
    uint _363 = uint(roundEven(NORMAL.w)) * 13u;
    uint _365 = _363 + 9u;
    uint _366 = _365 + uint(cbMatDynParam._m0[0u].w);
    float _372 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0)))) * cbInstanceData._m0[_366].x;
    float _373 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0)))) * cbInstanceData._m0[_366].y;
    float _374 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0)))) * cbInstanceData._m0[_366].z;
    float _2924 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0));
    float _2935 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0));
    float _2946 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0));
    vec4 _386 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _322, cbSceneParam._m0[86u].y * _323));
    float _389 = _386.x * TEXCOORD.z;
    float _390 = dot(vec3(_234, _235, _236), vec3(_314, _315, _316));
    float _393 = _390 * 2.0;
    float _398 = (_393 * _234) - _314;
    float _399 = (_393 * _235) - _315;
    float _400 = (_393 * _236) - _316;
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _732;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _457 = fma(_430, cbModelParam._m0[26u].z, fma(_426, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _422));
        float _461 = fma(_430, cbModelParam._m0[27u].z, fma(_426, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _422));
        float _465 = fma(_430, cbModelParam._m0[28u].z, fma(_426, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _422));
        float _490 = _422 + _234;
        float _491 = _426 + _235;
        float _492 = _430 + _236;
        float _502 = fma(_492, cbModelParam._m0[26u].z, fma(_491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490)) - _457;
        float _503 = fma(_492, cbModelParam._m0[27u].z, fma(_491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490)) - _461;
        float _504 = fma(_492, cbModelParam._m0[28u].z, fma(_491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490)) - _465;
        float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
        float _521 = ((_508 * _502) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_457 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _522 = ((_508 * _503) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_461 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _523 = ((_508 * _504) / cbModelParam._m0[34u].z) + ((((((_465 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_521, _522, _523), 0.0);
        float _560 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _561 = _560 * (_526.x + (-0.5));
        float _562 = _560 * (_526.y + (-0.5));
        float _563 = _560 * (_526.z + (-0.5));
        float _570 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _571 = _570 * (_533.x + (-0.5));
        float _572 = _570 * (_533.y + (-0.5));
        float _573 = _570 * (_533.z + (-0.5));
        float _580 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_540.x + (-0.5));
        float _582 = _580 * (_540.y + (-0.5));
        float _583 = _580 * (_540.z + (-0.5));
        float _590 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_547.x + (-0.5));
        float _592 = _590 * (_547.y + (-0.5));
        float _593 = _590 * (_547.z + (-0.5));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = _561 * 0.5;
        float _598 = _571 * 0.5;
        float _599 = _581 * 0.5;
        float _600 = dot(vec3(_597, _598, _599), vec3(_597, _598, _599));
        float _605 = (_600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_600);
        float _614 = (dot(vec3(_234, _235, _236), vec3(_605 * _597, _605 * _598, _605 * _599)) + 1.0) * 0.5;
        float _2972 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _624 = sqrt(((_598 * _598) + (_597 * _597)) + (_599 * _599)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _2983 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _626 = _625 * 2.0;
        float _630 = (1.0 - _625) / (_625 + 1.0);
        float _2994 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
        float _640 = ((((1.0 - _631) * (_626 + 2.0)) * exp2(log2(isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0))) * (_626 + 1.0))) + _631) * _594;
        float _641 = _562 * 0.5;
        float _642 = _572 * 0.5;
        float _643 = _582 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _657 = (dot(vec3(_234, _235, _236), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3005 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _666 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3016 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3027 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * (_668 + 1.0))) + _673) * _595;
        float _683 = _563 * 0.5;
        float _684 = _573 * 0.5;
        float _685 = _583 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_234, _235, _236), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3038 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3049 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3060 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * (_710 + 1.0))) + _715) * _596;
        _732 = _563;
        _734 = _562;
        _735 = _561;
        _736 = _573;
        _737 = _572;
        _738 = _571;
        _739 = _583;
        _740 = _582;
        _741 = _581;
        _742 = _596;
        _743 = _595;
        _744 = _594;
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0)));
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
    }
    else
    {
        _732 = _733;
        _734 = _733;
        _735 = _733;
        _736 = _733;
        _737 = _733;
        _738 = _733;
        _739 = _733;
        _740 = _733;
        _741 = _733;
        _742 = _733;
        _743 = _733;
        _744 = _733;
        _745 = 0.0;
        _746 = 0.0;
        _747 = 0.0;
    }
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _773 = fma(_430, cbModelParam._m0[30u].z, fma(_426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _422));
        float _777 = fma(_430, cbModelParam._m0[31u].z, fma(_426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _422));
        float _781 = fma(_430, cbModelParam._m0[32u].z, fma(_426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _422));
        float _804 = _422 + _234;
        float _805 = _426 + _235;
        float _806 = _430 + _236;
        float _816 = fma(_806, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804)) - _773;
        float _817 = fma(_806, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804)) - _777;
        float _818 = fma(_806, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804)) - _781;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_773 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_777 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[35u].z) + ((((((_781 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _872 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_839.x + (-0.5));
        float _874 = _872 * (_839.y + (-0.5));
        float _875 = _872 * (_839.z + (-0.5));
        float _882 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_846.x + (-0.5));
        float _884 = _882 * (_846.y + (-0.5));
        float _885 = _882 * (_846.z + (-0.5));
        float _892 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_853.x + (-0.5));
        float _894 = _892 * (_853.y + (-0.5));
        float _895 = _892 * (_853.z + (-0.5));
        float _902 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_860.x + (-0.5));
        float _904 = _902 * (_860.y + (-0.5));
        float _905 = _902 * (_860.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_234, _235, _236), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3101 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3112 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3123 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0))) * (_936 + 1.0))) + _941) * _906;
        float _951 = _874 * 0.5;
        float _952 = _884 * 0.5;
        float _953 = _894 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_234, _235, _236), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3134 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3145 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3156 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0))) * (_978 + 1.0))) + _983) * _907;
        float _993 = _875 * 0.5;
        float _994 = _885 * 0.5;
        float _995 = _895 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_234, _235, _236), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3189 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_1020 + 1.0))) + _1025) * _908;
        _1042 = _875;
        _1043 = _874;
        _1044 = _873;
        _1045 = _885;
        _1046 = _884;
        _1047 = _883;
        _1048 = _895;
        _1049 = _894;
        _1050 = _893;
        _1051 = _908;
        _1052 = _907;
        _1053 = _906;
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _733;
        _1043 = _733;
        _1044 = _733;
        _1045 = _733;
        _1046 = _733;
        _1047 = _733;
        _1048 = _733;
        _1049 = _733;
        _1050 = _733;
        _1051 = _733;
        _1052 = _733;
        _1053 = _733;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1089 = fma(_1068, cbSceneParam._m0[89u].z, fma(_1067, cbSceneParam._m0[89u].y, _1066 * cbSceneParam._m0[89u].x));
    float _1092 = fma(_1068, cbSceneParam._m0[90u].z, fma(_1067, cbSceneParam._m0[90u].y, _1066 * cbSceneParam._m0[90u].x));
    float _1095 = fma(_1068, cbSceneParam._m0[91u].z, fma(_1067, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1066));
    float _1110 = _398 * 0.5;
    float _1111 = _399 * 0.5;
    float _1112 = _400 * 0.5;
    float _1113 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1116 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1119 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1153;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1126 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_732, _736, _739, _742));
        float _1130 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_734, _737, _740, _743));
        float _1134 = dot(vec4(_1110, _1111, _1112, 1.0), vec4(_735, _738, _741, _744));
        float _1141 = dot(vec4(cbModelParam._m0[39u]), vec4(_1110, _1111, _1112, 1.0));
        _1153 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1141) ? 0.0 : (isnan(0.0) ? _1141 : max(0.0, _1141))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1153 = 1.0;
    }
    float _1164;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1155 = dot(vec4(cbModelParam._m0[40u]), vec4(_1110, _1111, _1112, 1.0));
        _1164 = dot(vec3(isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1155) ? 0.0 : (isnan(0.0) ? _1155 : max(0.0, _1155))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1164 = 1.0;
    }
    float _1168 = (_1164 * cbModelParam._m0[1u].x) + (_1153 * (1.0 - cbModelParam._m0[1u].x));
    float _1177 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1259;
    float _1261;
    float _1263;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1226 = fma(_430, cbModelParam._m0[13u].z, fma(_426, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _422)) + cbModelParam._m0[13u].w;
        float _1230 = fma(_430, cbModelParam._m0[14u].z, fma(_426, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _422)) + cbModelParam._m0[14u].w;
        float _1234 = fma(_430, cbModelParam._m0[15u].z, fma(_426, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _422)) + cbModelParam._m0[15u].w;
        float _1237 = fma(_400, cbModelParam._m0[13u].z, fma(_399, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _398));
        float _1240 = fma(_400, cbModelParam._m0[14u].z, fma(_399, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _398));
        float _1243 = fma(_400, cbModelParam._m0[15u].z, fma(_399, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _398));
        float _1269;
        if (_1237 > 0.0)
        {
            _1269 = abs((1.0 - _1226) / _1237);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1226 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1269 = frontier_phi_16_14_ladder;
        }
        float _1497;
        if (_1240 > 0.0)
        {
            _1497 = abs((1.0 - _1230) / _1240);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1230 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1497 = frontier_phi_25_21_ladder;
        }
        float _1689;
        if (_1243 > 0.0)
        {
            _1689 = abs((1.0 - _1234) / _1243);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1234 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1689 = frontier_phi_37_32_ladder;
        }
        float _1691 = isnan(_1497) ? _1269 : (isnan(_1269) ? _1497 : min(_1269, _1497));
        float _1692 = isnan(_1689) ? _1691 : (isnan(_1691) ? _1689 : min(_1691, _1689));
        float _1696 = (_1692 * _1237) + _1226;
        float _1697 = (_1692 * _1240) + _1230;
        float _1698 = (_1692 * _1243) + _1234;
        float _1699 = _1692 * 9.9999997473787516355514526367188e-05;
        float _1701 = (-1.0) - _1699;
        float _1703 = _1699 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1698 > _1703) || ((_1698 < _1701) || ((_1697 > _1703) || ((_1697 < _1701) || ((_1696 < _1701) || (_1696 > _1703))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1698, cbModelParam._m0[9u].z, fma(_1697, cbModelParam._m0[9u].y, _1696 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1698, cbModelParam._m0[10u].z, fma(_1697, cbModelParam._m0[10u].y, _1696 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1698, cbModelParam._m0[11u].z, fma(_1697, cbModelParam._m0[11u].y, _1696 * cbModelParam._m0[11u].x))), _1177);
            frontier_phi_15_37_ladder = _1795.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1795.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1795.x * cbModelParam._m0[1u].y;
        }
        _1259 = frontier_phi_15_37_ladder_2;
        _1261 = frontier_phi_15_37_ladder_1;
        _1263 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_398, _399, _400), _1177);
        _1259 = _1247.x * cbModelParam._m0[1u].y;
        _1261 = _1247.y * cbModelParam._m0[1u].y;
        _1263 = _1247.z * cbModelParam._m0[1u].y;
    }
    float _1266 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1359;
    float _1361;
    float _1363;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1323 = fma(_430, cbModelParam._m0[21u].z, fma(_426, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _422)) + cbModelParam._m0[21u].w;
        float _1327 = fma(_430, cbModelParam._m0[22u].z, fma(_426, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _422)) + cbModelParam._m0[22u].w;
        float _1331 = fma(_430, cbModelParam._m0[23u].z, fma(_426, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _422)) + cbModelParam._m0[23u].w;
        float _1334 = fma(_400, cbModelParam._m0[21u].z, fma(_399, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _398));
        float _1337 = fma(_400, cbModelParam._m0[22u].z, fma(_399, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _398));
        float _1340 = fma(_400, cbModelParam._m0[23u].z, fma(_399, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _398));
        float _1502;
        if (_1334 > 0.0)
        {
            _1502 = abs((1.0 - _1323) / _1334);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1323 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1502 = frontier_phi_27_23_ladder;
        }
        float _1716;
        if (_1337 > 0.0)
        {
            _1716 = abs((1.0 - _1327) / _1337);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1327 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1716 = frontier_phi_39_34_ladder;
        }
        float _1867;
        if (_1340 > 0.0)
        {
            _1867 = abs((1.0 - _1331) / _1340);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1331 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1867 = frontier_phi_48_45_ladder;
        }
        float _1869 = isnan(_1716) ? _1502 : (isnan(_1502) ? _1716 : min(_1502, _1716));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1334) + _1323;
        float _1875 = (_1870 * _1337) + _1327;
        float _1876 = (_1870 * _1340) + _1331;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1877;
        float _1880 = _1877 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1876 > _1880) || ((_1876 < _1878) || ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 < _1878) || (_1874 > _1880))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1876, cbModelParam._m0[17u].z, fma(_1875, cbModelParam._m0[17u].y, _1874 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1876, cbModelParam._m0[18u].z, fma(_1875, cbModelParam._m0[18u].y, _1874 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1876, cbModelParam._m0[19u].z, fma(_1875, cbModelParam._m0[19u].y, _1874 * cbModelParam._m0[19u].x))), _1266);
            frontier_phi_24_48_ladder = _2099.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2099.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2099.x * cbModelParam._m0[1u].z;
        }
        _1359 = frontier_phi_24_48_ladder_2;
        _1361 = frontier_phi_24_48_ladder_1;
        _1363 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_398, _399, _400), _1266);
        _1359 = _1343.x * cbModelParam._m0[1u].z;
        _1361 = _1343.y * cbModelParam._m0[1u].z;
        _1363 = _1343.z * cbModelParam._m0[1u].z;
    }
    float _1375 = _389 * 0.01200000010430812835693359375;
    float _1377 = _1375 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1378 = _1375 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1379 = _1375 * ((cbModelParam._m0[1u].w * (_1363 - _1263)) + _1263);
    float _1382 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, _1377 * cbSceneParam._m0[91u].x));
    vec4 _1396 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_322, _323));
    float _1398 = _1396.w;
    float _1410 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1398);
    float _1411 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1398);
    float _1412 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1398);
    uvec4 _1416 = floatBitsToUint(cbInstanceData._m0[_363 + 5u]);
    uint _1418 = _1416.x * 14u;
    uint _1419 = _1418 + 13u;
    float _1426 = _389 + (-1.0);
    float _1432 = (cbLight._m0[_1419].x * _1426) + 1.0;
    float _1433 = (cbLight._m0[_1419].y * _1426) + 1.0;
    float _1434 = (cbLight._m0[_1419].z * _1426) + 1.0;
    float _1435 = (cbLight._m0[_1419].w * _1426) + 1.0;
    uint _1436 = _1418 + 5u;
    float _1442 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
    uint _1446 = _1418 + 4u;
    float _1456 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
    uint _1460 = _1418 | 1u;
    float _1471 = dot(vec3(cbLight._m0[_1418].xyz), vec3(_234, _235, _236));
    float _1474 = dot(vec3(cbLight._m0[_1460].xyz), vec3(_234, _235, _236));
    float _3325 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
    float _3336 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _1479 = (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * 0.3183098733425140380859375;
    float _1481 = (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * 0.3183098733425140380859375;
    float _1488 = ((cbLight._m0[_1436].x * _1442) * _1481) + (((cbLight._m0[_1446].x * _1410) * _1456) * _1479);
    float _1489 = ((_1442 * cbLight._m0[_1436].y) * _1481) + (((cbLight._m0[_1446].y * _1411) * _1456) * _1479);
    float _1490 = ((_1442 * cbLight._m0[_1436].z) * _1481) + (((cbLight._m0[_1446].z * _1412) * _1456) * _1479);
    uvec4 _1494 = floatBitsToUint(cbLight._m0[_1418 + 12u]);
    bool _1496 = _1494.x == 0u;
    float _1507;
    float _1509;
    float _1511;
    if (_1496)
    {
        _1507 = _1488;
        _1509 = _1489;
        _1511 = _1490;
    }
    else
    {
        uint _1515 = _1418 + 6u;
        float _1531 = (dot(vec3(cbLight._m0[_1418 + 2u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1532 = _1531 * _1531;
        float _3347 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1534 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1507 = (((cbLight._m0[_1515].x * 0.3183098733425140380859375) * _1533) * _1534) + _1488;
        _1509 = (((cbLight._m0[_1515].y * 0.3183098733425140380859375) * _1533) * _1534) + _1489;
        _1511 = (((cbLight._m0[_1515].z * 0.3183098733425140380859375) * _1533) * _1534) + _1490;
    }
    bool _1514 = _1494.y == 0u;
    float _1552;
    float _1554;
    float _1556;
    if (_1514)
    {
        _1552 = _1507;
        _1554 = _1509;
        _1556 = _1511;
    }
    else
    {
        uint _1660 = _1418 + 7u;
        float _1676 = (dot(vec3(cbLight._m0[_1418 + 3u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3363 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1679 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1552 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1507;
        _1554 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1509;
        _1556 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1511;
    }
    uint _1558 = _1418 + 8u;
    float _1564 = cbLight._m0[_1418].x + _314;
    float _1565 = cbLight._m0[_1418].y + _315;
    float _1566 = cbLight._m0[_1418].z + _316;
    float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
    float _1574 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1418].xyz));
    float _3379 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1577 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _1578 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _1579 = dot(vec3(cbLight._m0[_1418].xyz), vec3(_1564 * _1570, _1565 * _1570, _1566 * _1570));
    float _3401 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1590 = (exp2(log2(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1596 = (0.5 / ((_1577 + 9.9999999392252902907785028219223e-09) + _1578)) * _1577;
    float _3412 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1598 = (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * 0.31831014156341552734375;
    uint _1612 = _1418 + 9u;
    float _1618 = cbLight._m0[_1460].x + _314;
    float _1619 = cbLight._m0[_1460].y + _315;
    float _1620 = cbLight._m0[_1460].z + _316;
    float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
    float _1628 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1460].xyz));
    float _3423 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1631 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1460].xyz), vec3(_1618 * _1624, _1619 * _1624, _1620 * _1624));
    float _3434 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1641 = (exp2(log2(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1645 = (0.5 / ((_1631 + 9.9999999392252902907785028219223e-09) + _1578)) * _1631;
    float _3445 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1647 = (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.31831014156341552734375;
    float _1657 = (((_1641 * cbLight._m0[_1612].x) * _1647) * _1442) + ((((cbLight._m0[_1558].x * _1410) * _1590) * _1598) * _1456);
    float _1658 = (((_1641 * cbLight._m0[_1612].y) * _1647) * _1442) + ((((cbLight._m0[_1558].y * _1411) * _1590) * _1598) * _1456);
    float _1659 = (((_1641 * cbLight._m0[_1612].z) * _1647) * _1442) + ((((cbLight._m0[_1558].z * _1412) * _1590) * _1598) * _1456);
    float _1721;
    float _1723;
    float _1725;
    if (_1496)
    {
        _1721 = _1657;
        _1723 = _1658;
        _1725 = _1659;
    }
    else
    {
        uint _1727 = _1418 + 10u;
        uint _1733 = _1418 + 2u;
        float _1739 = cbLight._m0[_1733].x + _314;
        float _1740 = cbLight._m0[_1733].y + _315;
        float _1741 = cbLight._m0[_1733].z + _316;
        float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
        float _1749 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1733].xyz));
        float _3456 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1752 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1753 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1739 * _1745, _1740 * _1745, _1741 * _1745));
        float _3467 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1766 = (0.5 / ((_1752 + 9.9999999392252902907785028219223e-09) + _1578)) * _1752;
        float _3478 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1768 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
        float _1769 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1721 = (((_1762 * cbLight._m0[_1727].x) * _1768) * _1769) + _1657;
        _1723 = (((_1762 * cbLight._m0[_1727].y) * _1768) * _1769) + _1658;
        _1725 = (((_1762 * cbLight._m0[_1727].z) * _1768) * _1769) + _1659;
    }
    float _1804;
    float _1806;
    float _1808;
    if (_1514)
    {
        _1804 = _1721;
        _1806 = _1723;
        _1808 = _1725;
    }
    else
    {
        uint _1815 = _1418 + 11u;
        uint _1821 = _1418 + 3u;
        float _1827 = cbLight._m0[_1821].x + _314;
        float _1828 = cbLight._m0[_1821].y + _315;
        float _1829 = cbLight._m0[_1821].z + _316;
        float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
        float _1837 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1821].xyz));
        float _3494 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1840 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1841 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1827 * _1833, _1828 * _1833, _1829 * _1833));
        float _3505 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1854 = (0.5 / ((_1840 + 9.9999999392252902907785028219223e-09) + _1578)) * _1840;
        float _3516 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1856 = (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * 0.31831014156341552734375;
        float _1857 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1804 = (((_1850 * cbLight._m0[_1815].x) * _1856) * _1857) + _1721;
        _1806 = (((_1850 * cbLight._m0[_1815].y) * _1856) * _1857) + _1723;
        _1808 = (((_1850 * cbLight._m0[_1815].z) * _1856) * _1857) + _1725;
    }
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1416.y == 0u)
    {
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1932;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1932;
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1932;
        uvec4 _1947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1948 = _1947.x;
        uint _1959 = uint((float(_1947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _323) / _1948))) + floor(float(uint(cbSceneParam._m0[85u].x * _322) / _1948)));
        float _1969 = (log2(_1935 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1970 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        uint _1973 = uint(isnan(14.0) ? _1970 : (isnan(_1970) ? 14.0 : min(_1970, 14.0)));
        uvec4 _1978 = texelFetch(g_lightClusterGridBuffer, int(((_1973 << 2u) + (_1959 << 6u)) >> 2u));
        uint _1979 = _1978.x;
        uint _1980 = _1947.z;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        if (((((1u << ((_1980 >> 4u) & 15u)) + 4294967295u) & _1979) == 0u) || ((_1980 & 240u) == 0u))
        {
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
        }
        else
        {
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            uint _2252 = 0u;
            uint _2261;
            bool _2262;
            for (;;)
            {
                _2261 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2252 << 2u)) >> 2u)).x;
                _2262 = _2261 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2262)
                {
                    frontier_phi_63_pred = _2251;
                    frontier_phi_63_pred_1 = _2250;
                    frontier_phi_63_pred_2 = _2249;
                    frontier_phi_63_pred_3 = _2248;
                    frontier_phi_63_pred_4 = _2247;
                    frontier_phi_63_pred_5 = _2246;
                }
                else
                {
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    uint _2376;
                    _2370 = _2246;
                    _2371 = _2247;
                    _2372 = _2248;
                    _2373 = _2249;
                    _2374 = _2250;
                    _2375 = _2251;
                    _2376 = _2261;
                    float _2302;
                    float _2303;
                    float _2304;
                    float _2305;
                    float _2306;
                    float _2307;
                    for (;;)
                    {
                        uint _2380 = uint(findLSB(_2376)) + (_2252 << 5u);
                        uint _2377 = (_2376 + 4294967295u) & _2376;
                        uint _2382 = _2380 * 48u;
                        vec4 _2396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2382)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 3u)).x));
                        uint _2402 = (_2380 * 48u) + 4u;
                        vec4 _2415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2402)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 3u)).x));
                        uint _2421 = (_2380 * 48u) + 8u;
                        vec3 _2432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x));
                        float _2436 = _2396.x - _1933;
                        float _2437 = _2396.y - _1934;
                        float _2438 = _2396.z - _1935;
                        float _2439 = dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438));
                        float _2442 = inversesqrt(_2439);
                        float _2451 = 1.0 - (_2439 * _2396.w);
                        float _3542 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
                        float _2452 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
                        float _2453 = sqrt(_2439) * _2415.w;
                        float _2456 = 1.39999997615814208984375 / (_2453 + 1.39999997615814208984375);
                        float _2457 = _2456 * _2456;
                        float _2460 = ((1.0 - _2457) * dot(vec3(_344, _347, _350), vec3(_2442 * _2436, _2442 * _2437, _2442 * _2438))) + _2457;
                        float _2463 = _2453 * _2453;
                        float _2467 = ((isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0))) * _2452) / ((_2463 * 0.699999988079071044921875) + 1.0);
                        float _2471 = (-0.0) - _1933;
                        float _2472 = (-0.0) - _1934;
                        float _2473 = (-0.0) - _1935;
                        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
                        float _2481 = dot(vec3(_344, _347, _350), vec3(_2477 * _2471, _2477 * _2472, _2477 * _2473));
                        float _3558 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
                        float _3569 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2485 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
                        float _2489 = (0.5 / (((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) + 9.9999999392252902907785028219223e-09) + _2485)) * _2485;
                        float _3580 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
                        float _2498 = (((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 3.1415927410125732421875) / ((_2463 * 2.1991131305694580078125) + 3.141590118408203125)) * _2452;
                        _2305 = (_2467 * _2415.x) + _2373;
                        _2306 = (_2467 * _2415.y) + _2374;
                        _2307 = (_2467 * _2415.z) + _2375;
                        _2302 = (_2498 * _2432.x) + _2370;
                        _2303 = (_2498 * _2432.y) + _2371;
                        _2304 = (_2498 * _2432.z) + _2372;
                        if (_2377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2370 = _2302;
                            _2371 = _2303;
                            _2372 = _2304;
                            _2373 = _2305;
                            _2374 = _2306;
                            _2375 = _2307;
                            _2376 = _2377;
                        }
                    }
                    frontier_phi_63_pred = _2307;
                    frontier_phi_63_pred_1 = _2306;
                    frontier_phi_63_pred_2 = _2305;
                    frontier_phi_63_pred_3 = _2304;
                    frontier_phi_63_pred_4 = _2303;
                    frontier_phi_63_pred_5 = _2302;
                }
                _2115 = frontier_phi_63_pred;
                _2113 = frontier_phi_63_pred_1;
                _2111 = frontier_phi_63_pred_2;
                _2109 = frontier_phi_63_pred_3;
                _2107 = frontier_phi_63_pred_4;
                _2105 = frontier_phi_63_pred_5;
                uint _2253 = _2252 + 1u;
                if (_2253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2246 = _2105;
                    _2247 = _2107;
                    _2248 = _2109;
                    _2249 = _2111;
                    _2250 = _2113;
                    _2251 = _2115;
                    _2252 = _2253;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
        }
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.z;
        uint _2121 = (_2119 >> 8u) & 15u;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        if (((4294967295u << _2121) & _1979) == 0u)
        {
            _2217 = _2104;
            _2219 = _2106;
            _2221 = _2108;
            _2223 = _2110;
            _2225 = _2112;
            _2227 = _2114;
        }
        else
        {
            float _2242 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2121 < ((_2119 >> 12u) & 15u))
            {
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2353 = _2104;
                float _2354 = _2106;
                float _2355 = _2108;
                float _2356 = _2110;
                float _2357 = _2112;
                float _2358 = _2114;
                uint _2359 = _2121;
                uint _2368;
                bool _2369;
                for (;;)
                {
                    _2368 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2359 << 2u)) >> 2u)).x;
                    _2369 = _2368 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2369)
                    {
                        frontier_phi_69_pred = _2358;
                        frontier_phi_69_pred_1 = _2357;
                        frontier_phi_69_pred_2 = _2356;
                        frontier_phi_69_pred_3 = _2355;
                        frontier_phi_69_pred_4 = _2354;
                        frontier_phi_69_pred_5 = _2353;
                    }
                    else
                    {
                        float _2503;
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2516 = _2353;
                        float _2517 = _2354;
                        float _2518 = _2355;
                        float _2519 = _2356;
                        float _2520 = _2357;
                        float _2521 = _2358;
                        uint _2522 = _2368;
                        uint _2523;
                        vec4 _2548;
                        float _2549;
                        vec4 _2564;
                        vec3 _2576;
                        vec4 _2592;
                        vec4 _2608;
                        float _2655;
                        bool _2656;
                        for (;;)
                        {
                            uint _2533 = ((_2359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2522));
                            _2523 = (_2522 + 4294967295u) & _2522;
                            uint _2535 = _2533 * 40u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            _2549 = _2548.w;
                            uint _2551 = (_2533 * 40u) + 4u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            uint _2566 = (_2533 * 40u) + 8u;
                            _2576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x));
                            uint _2579 = (_2533 * 40u) + 16u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2595 = (_2533 * 40u) + 20u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2611 = (_2533 * 40u) + 24u;
                            vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2630 = (_2533 * 40u) + 28u;
                            vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            _2655 = fma(_1935, _2643.z, fma(_1934, _2643.y, _2643.x * _1933)) + _2643.w;
                            _2656 = !((fma(_1935, _2624.z, fma(_1934, _2624.y, _2624.x * _1933)) + _2624.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2656)
                            {
                                float _2683 = _2548.x - _1933;
                                float _2684 = _2548.y - _1934;
                                float _2685 = _2548.z - _1935;
                                float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                                float _2689 = inversesqrt(_2686);
                                float _2690 = _2689 * _2683;
                                float _2691 = _2689 * _2684;
                                float _2692 = _2689 * _2685;
                                float _2696 = 1.0 - (_2686 / (_2549 * _2549));
                                float _3591 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
                                float _2701 = sqrt(_2686) * _2564.w;
                                float _2703 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                                float _2704 = _2703 * _2703;
                                float _2705 = 1.0 - _2704;
                                float _2707 = (_2705 * dot(vec3(_2690, _2691, _2692), vec3(_344, _347, _350))) + _2704;
                                float _2710 = _2701 * _2701;
                                float _2714 = (fma(_1935, _2592.z, fma(_1934, _2592.y, _2592.x * _1933)) + _2592.w) / _2655;
                                float _2715 = (fma(_1935, _2608.z, fma(_1934, _2608.y, _2608.x * _1933)) + _2608.w) / _2655;
                                float _2719 = 1.0 - dot(vec2(_2714, _2715), vec2(_2714, _2715));
                                float _3607 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                                float _2720 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
                                float _2721 = _2720 * (((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2697) / ((_2710 * 0.699999988079071044921875) + 1.0));
                                float _2731 = dot(vec3(_344, _347, _350), vec3((-0.0) - (_1933 * _2242), (-0.0) - (_1934 * _2242), (-0.0) - (_1935 * _2242)));
                                float _3618 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2739 = (_2705 * dot(vec3(_344, _347, _350), vec3(_2690, _2691, _2692))) + _2704;
                                float _3629 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                                float _2744 = (0.5 / (((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) + 9.9999999392252902907785028219223e-09) + _2740)) * _2740;
                                float _3640 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2751 = (_2720 * _2697) * (((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 3.1415927410125732421875) / ((_2710 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2721 * _2564.z;
                                frontier_phi_75_pred_1 = _2721 * _2564.y;
                                frontier_phi_75_pred_2 = _2721 * _2564.x;
                                frontier_phi_75_pred_3 = _2751 * _2576.z;
                                frontier_phi_75_pred_4 = _2751 * _2576.y;
                                frontier_phi_75_pred_5 = _2751 * _2576.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2760 = frontier_phi_75_pred;
                            _2759 = frontier_phi_75_pred_1;
                            _2758 = frontier_phi_75_pred_2;
                            _2757 = frontier_phi_75_pred_3;
                            _2756 = frontier_phi_75_pred_4;
                            _2755 = frontier_phi_75_pred_5;
                            _2506 = _2758 + _2519;
                            _2507 = _2759 + _2520;
                            _2508 = _2760 + _2521;
                            _2503 = _2755 + _2516;
                            _2504 = _2756 + _2517;
                            _2505 = _2757 + _2518;
                            if (_2523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2516 = _2503;
                                _2517 = _2504;
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2523;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2508;
                        frontier_phi_69_pred_1 = _2507;
                        frontier_phi_69_pred_2 = _2506;
                        frontier_phi_69_pred_3 = _2505;
                        frontier_phi_69_pred_4 = _2504;
                        frontier_phi_69_pred_5 = _2503;
                    }
                    _2228 = frontier_phi_69_pred;
                    _2226 = frontier_phi_69_pred_1;
                    _2224 = frontier_phi_69_pred_2;
                    _2222 = frontier_phi_69_pred_3;
                    _2220 = frontier_phi_69_pred_4;
                    _2218 = frontier_phi_69_pred_5;
                    uint _2360 = _2359 + 1u;
                    if (_2360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2353 = _2218;
                        _2354 = _2220;
                        _2355 = _2222;
                        _2356 = _2224;
                        _2357 = _2226;
                        _2358 = _2228;
                        _2359 = _2360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2228;
                frontier_phi_57_58_ladder_1 = _2226;
                frontier_phi_57_58_ladder_2 = _2224;
                frontier_phi_57_58_ladder_3 = _2222;
                frontier_phi_57_58_ladder_4 = _2220;
                frontier_phi_57_58_ladder_5 = _2218;
            }
            else
            {
                frontier_phi_57_58_ladder = _2114;
                frontier_phi_57_58_ladder_1 = _2112;
                frontier_phi_57_58_ladder_2 = _2110;
                frontier_phi_57_58_ladder_3 = _2108;
                frontier_phi_57_58_ladder_4 = _2106;
                frontier_phi_57_58_ladder_5 = _2104;
            }
            _2217 = frontier_phi_57_58_ladder_5;
            _2219 = frontier_phi_57_58_ladder_4;
            _2221 = frontier_phi_57_58_ladder_3;
            _2223 = frontier_phi_57_58_ladder_2;
            _2225 = frontier_phi_57_58_ladder_1;
            _2227 = frontier_phi_57_58_ladder;
        }
        float _2232 = isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0));
        _1991 = (_2232 * _2223) + _1552;
        _1993 = (_2232 * _2225) + _1554;
        _1995 = (_2232 * _2227) + _1556;
        _1997 = ((_2217 * 0.039999999105930328369140625) * _2232) + _1804;
        _1999 = ((_2219 * 0.039999999105930328369140625) * _2232) + _1806;
        _2001 = ((_2221 * 0.039999999105930328369140625) * _2232) + _1808;
    }
    else
    {
        _1991 = _1552;
        _1993 = _1554;
        _1995 = _1556;
        _1997 = _1804;
        _1999 = _1806;
        _2001 = _1808;
    }
    uint _2007 = _365 + uint(cbMatDynParam._m0[0u].w);
    float _3656 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3667 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3678 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _2038 = (((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1991 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _389))) + ((_1997 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _225.x) * cbInstanceData._m0[_2007].x);
    float _2040 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _225.y) * cbInstanceData._m0[_2007].y) + ((_1999 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1993 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _389)));
    float _2042 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _225.z) * cbInstanceData._m0[_2007].z) + ((_2001 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1168)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1995 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _389)));
    uint _2046 = _363 + 6u;
    float _2054 = _322 / cbSceneParam._m0[86u].x;
    float _2055 = _323 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _256 : (isnan(_256) ? cbSceneParam._m0[77u].w : min(_256, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    if (_256 > cbSceneParam._m0[78u].w)
    {
        float _2129 = isnan(_256) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _256 : min(cbSceneParam._m0[80u].w, _256));
        float _2130 = _2129 / _256;
        float _2141 = _2130 * _307;
        float _2142 = _308 * _2130;
        float _2143 = (-0.0) - _2142;
        float _2144 = _2130 * _309;
        float _2146 = (cbSceneParam._m0[77u].w * _2143) / _2129;
        float _2147 = _2146 + cbSceneParam._m0[79u].w;
        float _2148 = cbSceneParam._m0[79u].w - _2142;
        float _2154 = sqrt(((_2141 * _2141) + (_2142 * _2142)) + (_2144 * _2144));
        float _2157 = (1.0 - (cbSceneParam._m0[77u].w / _2129)) * _2154;
        float _2162 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2164 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2315;
        if (abs((_2143 - _2146) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2315 = ((((_2147 > 0.0) ? exp2(_2162 * _2147) : (2.0 - exp2(_2164 * _2147))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2157;
        }
        else
        {
            float _2275 = 1.0 / cbSceneParam._m0[80u].x;
            float _2276 = isnan(_2148) ? _2147 : (isnan(_2147) ? _2148 : max(_2147, _2148));
            float _2277 = isnan(_2148) ? _2147 : (isnan(_2147) ? _2148 : min(_2147, _2148));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            float _2287 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : min(_2277, 0.0));
            _2315 = ((abs(_2154 / _2143) * cbSceneParam._m0[80u].y) * ((((_2286 - _2287) * 2.0) - ((exp2(_2162 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)))) - exp2(_2162 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))))) * _2275)) - ((exp2(_2164 * _2286) - exp2(_2164 * _2287)) * _2275))) + (_2157 * cbSceneParam._m0[80u].z);
        }
        vec4 _2317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2326 = exp2((_2315 * (-1.44269502162933349609375)) * (1.0 - _2317.w));
        float _2327 = log2(_2326);
        float _2343 = log2(_2074);
        _2166 = (exp2(_2343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].x)) * _2317.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2168 = (exp2(_2343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].y)) * _2317.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2170 = (exp2(_2343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].z)) * _2317.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2172 = _2326 * _2074;
    }
    else
    {
        _2166 = _2071;
        _2168 = _2072;
        _2170 = _2073;
        _2172 = _2074;
    }
    float _2184 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2185 = _2184 == 3.0;
    float _2187 = log2(_2172);
    float _2194 = exp2(_2187 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)));
    float _2195 = exp2(_2187 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2196 = exp2(_2187 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2205 = (_2184 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2205 * (_2185 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2166)));
    SV_Target.y = _2205 * (_2185 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2168)));
    SV_Target.z = _2205 * (_2185 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2170)));
    SV_Target.w = cbInstanceData._m0[_2046].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2046].w;
}


